<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF MNP RED2"
	   UI_FREEZE="N"
	   UPDATED="01/16/2018 15:38:02"
	   UPDATED_BY="IBM_TFERREIRA"
	   CREATED="12/16/2013 15:12:51"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="TC-5029: MNPRED"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF MNPRED Transfer"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="01/16/2018 15:21:57"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="IBM_TFERREIRA"
		   UPDATED="01/16/2018 15:24:08"
		   UPDATED_BY="IBM_TFERREIRA"
		   CREATED="12/16/2013 15:12:55"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF MNPRED Transfer"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="12/16/2013 15:12:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckHatsahKul"
			   UPDATED="12/16/2013 15:12:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:55"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Target Customer Id"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="NewAcc"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/16/2013 15:12:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/16/2013 15:12:55"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="NewAcc"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/16/2013 15:12:55"
					   UPDATED_BY="SADMIN"
					   CREATED="12/16/2013 15:12:55"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Order Reason"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/16/2013 15:12:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/16/2013 15:12:55"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderReason"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/16/2013 15:12:55"
					   UPDATED_BY="SADMIN"
					   CREATED="12/16/2013 15:12:55"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="MSISDN to Transfer"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF MSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/16/2013 15:12:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/16/2013 15:12:55"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="VF MSISDN"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/16/2013 15:12:55"
					   UPDATED_BY="SADMIN"
					   CREATED="12/16/2013 15:12:55"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckHatsahKul"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/16/2013 15:12:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/16/2013 15:12:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckHatsahKulForTransfers"
			   UPDATED="01/27/2014 11:35:43"
			   UPDATED_BY="SADMIN"
			   CREATED="01/27/2014 11:35:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/27/2014 11:35:43"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2014 11:35:43"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/27/2014 11:35:43"
					   UPDATED_BY="SADMIN"
					   CREATED="01/27/2014 11:35:43"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF MSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/27/2014 11:35:43"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2014 11:35:43"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="VF MSISDN"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/27/2014 11:35:43"
					   UPDATED_BY="SADMIN"
					   CREATED="01/27/2014 11:35:43"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckHatsahKulForTransfers"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/27/2014 11:35:43"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2014 11:35:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddDays"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddDays(myDate,days) 
{
/* Adds the number of Days specified in the input parameter ‘days’ 
 *  to the input parameter mydate and returns the new date
 * @param myDate,days
 * @return new Date
 
*
 */
	var vcreated = new Date(myDate);
    return new Date(vcreated.getTime() + days*24*60*60*1000);
}"
			   SEQUENCE="1"
			   UPDATED="12/16/2013 15:12:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckHatsahKul"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckHatsahKul(InAccnt, OutAccnt)
{
	try
	{
		//var OldCust = InAccnt.GetProperty(&quot;OldAcc&quot;);
		var NewCust = InAccnt.GetProperty(&quot;NewAcc&quot;);
		var OrderReason = InAccnt.GetProperty(&quot;OrderReason&quot;);
		var OrderSubReason = InAccnt.GetProperty(&quot;OrderSubReason&quot;);
		var strIMEI = InAccnt.GetProperty(&quot;VF MSISDN&quot;);
		var App = TheApplication();
		var BS		: Service	 = App.GetService(&quot;VF TRK Utilities&quot;);	//Code Review Jan 2014
		var inProp 	:PropertySet = App.NewPropertySet();//Code Review Jan 2014
		var outProp	: PropertySet = App.NewPropertySet();//Code Review Jan 2014
		inProp.SetProperty(&quot;NewAcc&quot;,NewCust);//Code Review Jan 2014
		inProp.SetProperty(&quot;OrderReason&quot;,OrderReason);//Code Review Jan 2014
		inProp.SetProperty(&quot;VF MSISDN&quot;,strIMEI);//Code Review Jan 2014
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);//Code Review Jan 2014
		
		//++WA#13 - RPIRES
		var inTask = InAccnt.GetProperty(&quot;inTask&quot;);
		if(inTask != &quot;&quot; &amp;&amp; inTask != null)
		{
			OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;0&quot;);
			OutAccnt.SetProperty(&quot;Error Message&quot;,&quot;&quot;);
		}
		//--WA#13 - RPIRES
		
		var hatsahKulReason =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_SUB_REASON&quot;, &quot;HATSAH_KUL&quot;); //WA#13 VFTRCBU-7334 - RPIRES
		var kulHatsahReason =  TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_SUB_REASON&quot;, &quot;KUL_HATSAH&quot;); //WA#13 VFTRCBU-7334 - RPIRES
		var oBO;
		var oBCAccount;
		
		if(OrderSubReason==hatsahKulReason || OrderSubReason==kulHatsahReason)
		{
			var hatsahKulIsDone= false; ////check if hatsah_kul is done
			var kulHatsahIsDone= false;
			var decisionDate= new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;BTK_Dec&quot;)); //BTK decision date 21.10.2013
			var blockDate= new Date (App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;MNP_Block_Date&quot;)); //Block date 31.12.2013
			var endDate= new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;HATSAHKUL_End_Date&quot;)); //HATSAH_KUL end date 10.10.2014
			var dToday = new Date();//Today
			var msg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_001&quot;);//Already HatSAH_KUL is done
			var msg2 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_002&quot;);//Cannot do KUL_HATSAH, rejection period exceed
			var msg3 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_003&quot;);//Already KUL_HATSAH is done or Customer is not Vodafone
			var msg4 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_004&quot;);//Cannot do hatsah_kul anymore
			var msg5 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_005&quot;);//Kul_Hatsah should be done to Only Customer ID
			var msg6 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_009&quot;);//There is not Hatsah_kul transfer done before
			
			oBO = TheApplication().GetBusObject(&quot;MNP Turnover Info BO&quot;);
			oBCAccount = oBO.GetBusComp(&quot;MNP Turnover Info BC&quot;);
			var strSearchAsset = &quot;[GSM_NO]= &apos;&quot;+strIMEI+&quot;&apos;&quot;;
			oBCAccount.SetViewMode(AllView);		
			oBCAccount.ClearToQuery();
			oBCAccount.ActivateField(&quot;GSM_NO&quot;);
			oBCAccount.ActivateField(&quot;CUSTOMER_ID&quot;);
			oBCAccount.ActivateField(&quot;TRANSFER_DATE&quot;);
			oBCAccount.ActivateField(&quot;OPERATOR&quot;);
			oBCAccount.ActivateField(&quot;REASON&quot;);
			oBCAccount.SetSearchExpr(strSearchAsset);
			oBCAccount.ExecuteQuery(ForwardOnly);
		if(oBCAccount.FirstRecord()) //if any record exists in the table
			{
			//var oBO : BusObject =TheApplication().GetBusObject(&quot;MNP Turnover Info BO&quot;);
			//var strCustType = &quot;&quot;;
			//var oBCHATSAH_KUL : BusComp = TheApplication().GetBusComp(&quot;HATSAH_KUL VBC&quot;);
			var hatsahKulReasonDate =new Date(oBCAccount.GetFieldValue(&quot;TRANSFER_DATE&quot;));//Hatsahkul date
			//var hatsahKulReasonDate2 = AddToDate(hatsahKulReasonDate,0,3,+); //Hatsahkul date plus 3 months
			var hatsahKulReasonDate2 = AddDays(hatsahKulReasonDate,90); //Hatsahkul date plus 3 months
			var OldCust;
			do
			{
				if(oBCAccount.GetFieldValue(&quot;REASON&quot;)==&quot;G&quot;)
				{
					kulHatsahIsDone= true;
					hatsahKulIsDone= true;
				}
				else 	if(oBCAccount.GetFieldValue(&quot;REASON&quot;)==&quot;B&quot;)
				{
					hatsahKulIsDone= true;
					OldCust=oBCAccount.GetFieldValue(&quot;CUSTOMER_ID&quot;);
				}
			}
			while(oBCAccount.NextRecord())
			
				if (OrderSubReason == hatsahKulReason)//HATSAH_KUL
						{
						 if(hatsahKulIsDone)
							{
								if(inTask != &quot;&quot; &amp;&amp; inTask != null) //WA#13 - RPIRES
								{
									OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;1&quot;);
									OutAccnt.SetProperty(&quot;Error Message&quot;,msg);
								}
								else
									TheApplication().RaiseErrorText(msg);
								return(CancelOperation);
							}
						}
						else if (OrderSubReason == kulHatsahReason)//KUL_HATSAH
						{
						
							if(kulHatsahIsDone||oBCAccount.GetFieldValue(&quot;OPERATOR&quot;)!=&quot;VODAFONE&quot;)
							{ 
								if(inTask != &quot;&quot; &amp;&amp; inTask != null) //WA#13 - RPIRES
								{
									OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;2&quot;);
									OutAccnt.SetProperty(&quot;Error Message&quot;,msg3);
								}
								else
									TheApplication().RaiseErrorText(msg3);
								return(CancelOperation);
							}
							else if(OldCust!=NewCust)
							{
								if(inTask != &quot;&quot; &amp;&amp; inTask != null) //WA#13 - RPIRES
								{
									OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;3&quot;);
									OutAccnt.SetProperty(&quot;Error Message&quot;,msg5+&quot;: &quot;+OldCust);
								}
								else
									TheApplication().RaiseErrorText(msg5+&quot;: &quot;+OldCust);
								return(CancelOperation);
							}
							else if(hatsahKulReasonDate &lt;= decisionDate)
							{
								if(dToday&gt;blockDate)
								{
									if(inTask != &quot;&quot; &amp;&amp; inTask != null) //WA#13 - RPIRES
									{
										OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;4&quot;);
										OutAccnt.SetProperty(&quot;Error Message&quot;,msg2);
									}
									else
										TheApplication().RaiseErrorText(msg2);
									return(CancelOperation)
								}
							}
							else
							{
								if(dToday&gt;hatsahKulReasonDate2)
								{
									if(inTask != &quot;&quot; &amp;&amp; inTask != null) //WA#13 - RPIRES
									{	
										OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;5&quot;);
										OutAccnt.SetProperty(&quot;Error Message&quot;,msg2);
									}
									else
										TheApplication().RaiseErrorText(msg2);
									return(CancelOperation)
								}
							}
						
						}
			}
				else if(OrderSubReason == kulHatsahReason)
				{
					if(inTask != &quot;&quot; &amp;&amp; inTask != null) //WA#13 - RPIRES
					{
						OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;6&quot;);
						OutAccnt.SetProperty(&quot;Error Message&quot;,msg6);
					}
					else
						TheApplication().RaiseErrorText(msg6);
				} else 	if(OrderSubReason == hatsahKulReason &amp;&amp; dToday&gt;endDate) //10.10.2014
							{
								if(inTask != &quot;&quot; &amp;&amp; inTask != null) //WA#13 - RPIRES
								{
									OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;7&quot;);
									OutAccnt.SetProperty(&quot;Error Message&quot;,msg4);
								}
								else
									TheApplication().RaiseErrorText(msg4);
								return(CancelOperation);
							}
							
		}
	}
	finally
	{
		oBCAccount = null;
		oBO = null;
		BS = null;
		inProp = null;
		outProp = null;	
	}
}"
			   SEQUENCE="2"
			   UPDATED="03/13/2015 01:23:29"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckHatsahKulForTransfers"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckHatsahKulForTransfers(InAccnt, OutAccnt)
{
	try
	{
			var strIMEI = InAccnt.GetProperty(&quot;VF MSISDN&quot;);
			var App = TheApplication();
			var BS		: Service	 = App.GetService(&quot;VF TRK Utilities&quot;);
			var inProp 	:PropertySet = App.NewPropertySet();
			var outProp	: PropertySet = App.NewPropertySet();
			inProp.SetProperty(&quot;VF MSISDN&quot;,strIMEI);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			var boAsset	:BusObject		= App.GetBusObject (&quot;Asset Management&quot;);
			var bcAsset :BusComp		= boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
			var bcAssetXA :BusComp		= boAsset.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);
			var boOrderHP :BusObject	= App.GetBusObject(&quot;X Order Entry&quot;);
			var bcOrderItemHP :BusComp	= boOrderHP.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
			//var strCancelledStatus		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
			//var strCompleteStatus 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
			var strHATSAHKUL			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;HATSAH_KUL&quot;); //WA#13 VFTRCBU-7334 - RPIRES
			var autoRejectDate			= new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;MNP_Block_Date&quot;)); //31.12.2013
			var decisionDate			= new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;BTK_Dec&quot;)); //BTK decision date 21.10.2013
			var Active = App.InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
			var Suspended = App.InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);
			var strCompleteStatus 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
			var strAssetSrcExpr			=&quot;&quot;;
			var searchOrderExpr			=&quot;&quot;;
			var strOrderReason			=&quot;&quot;;
			var strActionSubReason		=&quot;&quot;;//WA#13 - RPIRES
			var strOrigStartDate =&quot;&quot;;
			var strInstallDate 	= &quot;&quot;;
			//var strAssetStatus  = &quot;&quot;;
			var strMSISDN       = &quot;&quot;;
			var strAccountId    = &quot;&quot;;
			//var strMSISDNStatus = &quot;&quot;;
			var assetId			= &quot;&quot;;
			var CustStatus		= &quot;&quot;;
			var LastReason		= &quot;&quot;;
			var assetStatus		=&quot;&quot;;
			var strStartDate	=&quot;&quot;;
			var IntegId			=&quot;&quot;;
			OutAccnt.SetProperty(&quot;Result&quot;,&quot;OK&quot;);
			OutAccnt.SetProperty(&quot;Error Code&quot;, &quot;0&quot;);
			OutAccnt.SetProperty(&quot;Error Message&quot;,&quot;&quot;);
			App.SetProfileAttr(&quot;InHatsahKulPeriod&quot;,&quot;N&quot;);	
			strAssetSrcExpr = &quot;[Serial Number] = &apos;&quot;+strIMEI+&quot;&apos; AND ([Status] = &apos;&quot;+Active+&quot;&apos; OR [Status] = &apos;&quot;+Suspended+&quot;&apos;) AND ([Product Part Number] = &apos;1000&apos; OR [Product Part Number] = &apos;70000&apos;)&quot;; //WA#13 - RPIRES - Added &quot;OR&quot; for Consumer partnum
			
			with(bcAsset)
				{
					ClearToQuery ();
					SetViewMode(AllView);
					ActivateField (&quot;Serial Number&quot;);
					ActivateField (&quot;Status&quot;);
					ActivateField (&quot;VF Customer Status&quot;);
					//ActivateField (&quot;Owner Account Id&quot;);
					ActivateField (&quot;Install Date&quot;);
					ActivateField (&quot;Reason Code&quot;);
					ActivateField (&quot;Integration Id&quot;);
					ActivateField (&quot;Start Date&quot;);
					SetSearchExpr (strAssetSrcExpr);
					ExecuteQuery (ForwardOnly);
				}
				if (bcAsset.FirstRecord ())
					{
						assetStatus 	 = bcAsset.GetFieldValue(&quot;Status&quot;);
						LastReason 		 = bcAsset.GetFieldValue(&quot;Reason Code&quot;);
						assetId 		 = bcAsset.GetFieldValue(&quot;Id&quot;);
						IntegId 		 = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
						CustStatus 		 = bcAsset.GetFieldValue(&quot;VF Customer Status&quot;);
						strStartDate	 =  bcAsset.GetFieldValue(&quot;Start Date&quot;);
						strOrigStartDate =  bcAsset.GetFieldValue(&quot;VF Orig Start Date&quot;);
						strInstallDate 	 =  bcAsset.GetFieldValue(&quot;Install Date&quot;);
						var checkDate =  (strOrigStartDate != &quot;&quot;) ? strOrigStartDate : strInstallDate;
				
					searchOrderExpr	= &quot;[Asset Integration Id]=&apos;&quot;+IntegId+&quot;&apos; AND [Status] = &apos;&quot;+strCompleteStatus+&quot;&apos;&quot;;
						with(bcOrderItemHP)
						{
							ClearToQuery();
							SetViewMode(AllView);
							//ActivateField(&quot;VF Order Header Reason&quot;); -- WA#13 RPIRES
							ActivateField(&quot;VF Action SubReason&quot;); //WA#13 RPIRES
							ActivateField(&quot;Order Type&quot;);
							SetSearchExpr(searchOrderExpr);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								//strOrderReason = GetFieldValue(&quot;VF Order Header Reason&quot;); -- WA#13 RPIRES
								strActionSubReason = GetFieldValue(&quot;VF Action SubReason&quot;); //WA#13 RPIRES
							}
					
						}//with
						var sInstallDate = new Date(checkDate);
						var dToday = new Date();
						if(sInstallDate&gt;decisionDate)
						{
							autoRejectDate=AddDays(sInstallDate,90);
						}
							autoRejectDate=new Date(autoRejectDate);
							
						if((strActionSubReason==strHATSAHKUL) &amp;&amp; assetStatus == Active &amp;&amp; dToday &lt;= autoRejectDate)//CR756 
								{
									 OutAccnt.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
									 App.SetProfileAttr(&quot;InHatsahKulPeriod&quot;,&quot;Y&quot;);
								}
						
					}//if
		}
		catch(e)
		{
			OutAccnt.SetProperty(&quot;Error Code&quot;, e.errCode);
			OutAccnt.SetProperty(&quot;Error Message&quot;, e.errText);
		}
		finally
		{
			BS = null;
			inProp = null;
			outProp = null;
			//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
			//boAsset = null;
			bcAsset = null;
			bcAssetXA = null;
			boAsset = null;
			//boOrderHP = null;
			bcOrderItemHP = null;
			boOrderHP = null;
		}
}"
			   SEQUENCE="3"
			   UPDATED="01/16/2018 15:24:08"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/27/2014 11:35:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SendPassword"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SendPassword(Inputs,Outputs)
{
try{
			var sObjectId = TheApplication().GetProfileAttr(&quot;Old_MSISDN&quot;);
			var sMobilePhone = TheApplication().GetProfileAttr(&quot;Old_MSISDN&quot;);
			var sTemplate = &quot;Temp HATSAHKUL pswd&quot;;
			var sSourceBusObj =&quot;MNP Turnover Info BO&quot;;
			var otpInputs  = TheApplication().NewPropertySet();
			var otpOutputs = TheApplication().NewPropertySet();
			otpInputs.SetProperty(&quot;NumOfDigits&quot;,6);
			var otpService = TheApplication().GetService(&quot;VF OTP Utils&quot;);
			otpService.InvokeMethod(&quot;GenerateOTPassword&quot;,otpInputs,otpOutputs);
			var OTP=otpOutputs.GetProperty(&quot;Number&quot;); //One time password for Hatsah_KUL Reason
			TheApplication().SetProfileAttr(&quot;hatsahKulOTP&quot;,OTP);
			var psInputs  = TheApplication().NewPropertySet();
			var psOutputs = TheApplication().NewPropertySet();
			var scWF	  = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
			var smsErrorMsg=TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_008&quot;);
			
			psInputs.SetProperty(&quot;Object Id&quot;, sObjectId);
			psInputs.SetProperty(&quot;TemplateMail&quot;, sTemplate);
			psInputs.SetProperty(&quot;MobilePhone&quot;, sMobilePhone);
			psInputs.SetProperty(&quot;SourceBusObj&quot;,sSourceBusObj);
			psInputs.SetProperty(&quot;hatsahKulOTP&quot;,OTP);
			psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Send SMS for Transfer Customer WF&quot;);
	
			scWF.InvokeMethod(&quot;RunProcess&quot;, psInputs, psOutputs);
			
			if(psOutputs.GetProperty(&quot;Error Message&quot;)!=&quot;&quot;)
			TheApplication().RaiseErrorText(smsErrorMsg);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		otpInputs=null;
		otpOutputs=null;
		psInputs=null;
		psOutputs=null;
		scWF=null;
		otpService=null;	
	}
}"
			   SEQUENCE="4"
			   UPDATED="01/27/2014 11:35:43"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;CheckHatsahKul&quot;)
	{
		CheckHatsahKul (Inputs, Outputs);
		return(CancelOperation);
	} 
	else if (MethodName == &quot;SendPassword&quot;)
	{
		SendPassword (Inputs,Outputs);
		return(CancelOperation);
	}  
	else if (MethodName == &quot;VerifyPassword&quot;)
	{
		VerifyPassword (Inputs,Outputs);
		return(CancelOperation);
	}  
	else if (MethodName ==&quot;CheckHatsahKulForTransfers&quot;) 
	{
		CheckHatsahKulForTransfers (Inputs,Outputs);
		return(CancelOperation);
	} 
	return (ContinueOperation);
}"
			   SEQUENCE="6"
			   UPDATED="01/27/2014 11:35:43"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VerifyPassword"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VerifyPassword(Inputs,Outputs)
{
			var OTP= TheApplication().GetProfileAttr(&quot;hatsahKulOTP&quot;);
			//var userPswd=thisBC.GetFieldValue(&quot;Reason Password&quot;);
			var userPswd=TheApplication().GetProfileAttr(&quot;userHatsahkulPSWD&quot;); //The password entered by user. ProfileAttr must be filled in browser script
			var msgError=TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_007&quot;);
			var msgSuccess=TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_MNPRED_006&quot;);
		
			if(OTP==userPswd)
			{
				TheApplication().SetProfileAttr(&quot;hatsahKulOTPVerified&quot;,&quot;Y&quot;); //this attrib will be checked for Assign CanInvoke
				TheApplication().RaiseErrorText(msgSuccess);
			}
			else
				TheApplication().RaiseErrorText(msgError);
}"
			   SEQUENCE="5"
			   UPDATED="01/27/2014 11:35:43"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



