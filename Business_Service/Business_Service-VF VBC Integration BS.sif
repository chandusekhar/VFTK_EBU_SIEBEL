<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF HSM Integration"
	   UI_FREEZE="N"
	   UPDATED="12/28/2017 15:56:16"
	   UPDATED_BY="IBM_TFERREIRA"
	   CREATED="05/01/2013 18:27:08"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="EJM CR680 - VBC Generic Dispatcher"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF VBC Integration BS"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="12/28/2017 01:32:23"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="IBM_TFERREIRA"
		   UPDATED="12/28/2017 15:56:14"
		   UPDATED_BY="IBM_TFERREIRA"
		   CREATED="05/01/2013 18:30:53"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF VBC Integration BS"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="05/01/2013 18:30:53"
			   UPDATED_BY="SADMIN"
			   CREATED="05/01/2013 18:30:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_DELETE-1004224629-055"
			   HIDDEN="Y"
			   INACTIVE="N"
			   NAME="Delete"
			   UPDATED="05/14/2013 21:43:40"
			   UPDATED_BY="SADMIN"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUS_COMP_ID-1004225124-059"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUSINESS_COMPONENT_NAME-1004225125-05N"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_REMOTE_SOURCE-1004225246-0TC"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Remote Source"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/14/2013 21:43:40"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_INIT-1004225100-0GQ"
			   HIDDEN="Y"
			   INACTIVE="N"
			   NAME="Init"
			   UPDATED="05/01/2013 18:30:54"
			   UPDATED_BY="SADMIN"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUS_COMP_ID-1004225124-059"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUSINESS_COMPONENT_NAME-1004225125-05N"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_PARAMETERS-1004225033-4RS"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Parameters"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_REMOTE_SOURCE-1004225246-0TC"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Remote Source"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_INSERT-1004224659-0AM"
			   HIDDEN="Y"
			   INACTIVE="N"
			   NAME="Insert"
			   UPDATED="05/01/2013 18:30:54"
			   UPDATED_BY="SADMIN"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUS_COMP_ID-1004225124-059"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUSINESS_COMPONENT_NAME-1004225125-05N"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_REMOTE_SOURCE-1004225246-0TC"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Remote Source"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_PREINSERT-1004225107-0KS"
			   HIDDEN="Y"
			   INACTIVE="N"
			   NAME="Preinsert"
			   UPDATED="05/01/2013 18:30:54"
			   UPDATED_BY="SADMIN"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUS_COMP_ID-1004225124-059"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUSINESS_COMPONENT_NAME-1004225125-05N"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_REMOTE_SOURCE-1004225246-0TC"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Remote Source"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_QUERY-1005111820-1VI"
			   HIDDEN="Y"
			   INACTIVE="N"
			   NAME="Query"
			   UPDATED="04/14/2016 12:12:42"
			   UPDATED_BY="SADMIN"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUS_COMP_ID-1004225124-059"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUSINESS_COMPONENT_NAME-1004225125-05N"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_REMOTE_SOURCE-1004225246-0TC"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Remote Source"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_UPDATE-1004224807-0JZ"
			   HIDDEN="Y"
			   INACTIVE="N"
			   NAME="Update"
			   UPDATED="05/01/2013 18:30:54"
			   UPDATED_BY="SADMIN"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUS_COMP_ID-1004225124-059"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_BUSINESS_COMPONENT_NAME-1004225125-05N"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Business Component Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_REMOTE_SOURCE-1004225246-0TC"
				   HIDDEN="Y"
				   INACTIVE="N"
				   NAME="Remote Source"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/01/2013 18:30:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/01/2013 18:30:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Delete"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Delete(Inputs:PropertySet, Outputs:PropertySet)
{
try{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_Delete.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;Delete Start!&quot;);
	//Declarations
	var sVBCName:String = Inputs.GetProperty(&quot;Business Component Name&quot;);
	var sWF:String;
	var sContext:String;
	var sPA:String;

	sVBCName = Inputs.GetProperty(&quot;Business Component Name&quot;);
	TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
	
	sPA = sVBCName + &quot;.&quot; + &quot;VFRunDeleteWF&quot;;
	TheApplication().Trace(&quot;sPA = &quot; + sPA);
	TheApplication().Trace(&quot;GetProfileAttr(sPA) = &quot; + TheApplication().GetProfileAttr(sPA));
	TheApplication().Trace(&quot;VFRunDeleteWF = &quot; + TheApplication().GetProfileAttr(&quot;VFRunDeleteWF&quot;));

	if(TheApplication().GetProfileAttr(sPA) == &quot;Y&quot; || TheApplication().GetProfileAttr(&quot;VFRunDeleteWF&quot;) == &quot;Y&quot;)
	{
		TheApplication().Trace(&quot;GetProfileAttr(sPA) == Y || VFRunDeleteWF == Y&quot;);
		//Do nothing - Log Message and exit
		LogMessage (Inputs, sVBCName, &quot;Delete&quot;, &quot;Send_VFRunDeleteWF_Y&quot;);
	}
	else
	{
		TheApplication().Trace(&quot;else GetProfileAttr(sPA) == Y || VFRunDeleteWF == Y&quot;);
		LogMessage (Inputs, sVBCName, &quot;Delete&quot;, &quot;Send_VFRunDeleteWF_N&quot;);

		//Parse Input Message
		ParseInputServiceParameters(Inputs);
		
		sContext = Inputs.GetProperty(&quot;RequireContext&quot;);
		TheApplication().Trace(&quot;sContext = &quot; + sContext);
		
		if (sContext == &quot;Y&quot;)
		{
			TheApplication().Trace(&quot;sContext == Y&quot;);
			ParseInputParameters(Inputs);
		}

		//Get Process to execute for Query
		sWF = GetProcess(sVBCName, &quot;Delete&quot;);
		TheApplication().Trace(&quot;sWF = &quot; + sWF);
	
		//Execute Process
		ExecuteProcess(sWF, Inputs, Outputs);	
		
		TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
		LogMessage (Outputs, sVBCName, &quot;Delete&quot;, &quot;Receive_VFRunDeleteWF_N&quot;);
	}
}
catch(e)
{
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally
{
	//Clear Vars
	sWF = &quot;&quot;;
	sVBCName = &quot;&quot;;
	sContext = &quot;&quot;;
}	
	
}"
			   SEQUENCE="1"
			   UPDATED="12/28/2017 15:56:14"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ExecuteProcess"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ExecuteProcess(sProcessName:String, Inputs:PropertySet, Outputs:PropertySet)
{
try{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_ExecuteProcess.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;ExecuteProcess Start!&quot;);
	var oPSLocalRecordSet:PropertySet;
	var oPSLocalRecord:PropertySet;
	var oPSManageResponse:PropertySet;

	var iRecordNumber:Number;
	var iRecordIndex:Number;
	var iNumberOfChilds:Number;

	var bsWfrMgr : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	var WFInputs : PropertySet = TheApplication ().NewPropertySet (); 
	var WFOutputs : PropertySet = TheApplication ().NewPropertySet (); 
	
	//Copy of the Original PropertySet 
	iNumberOfChilds = Inputs.GetChildCount();
	TheApplication().Trace(&quot;iNumberOfChilds = &quot; + iNumberOfChilds);
	if (iNumberOfChilds &gt; 0)
	{
		TheApplication().Trace(&quot;iNumberOfChilds &gt; 0&quot;);
		WFInputs = Inputs.Copy();
		TheApplication().Trace(&quot;iNumberOfChilds = &quot; + iNumberOfChilds);
		for(iRecordIndex = 0; iRecordIndex &lt; iNumberOfChilds; iRecordIndex++)
		{
			//Remove all child from PropertySet
			WFInputs.RemoveChild(0);
		}
	}
	else 
	{
		TheApplication().Trace(&quot;else iNumberOfChilds &gt; 0&quot;);
		WFInputs = Inputs.Copy();
	}
	
	TheApplication().Trace(&quot;sProcessName = &quot; + sProcessName);
	WFInputs.SetProperty(&quot;ProcessName&quot;, sProcessName);
	bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;,WFInputs,WFOutputs);
	
	//VFTRCBU WA#43 - Changed to verify if has child
	if(WFOutputs.GetChildCount() &gt; 0)
	{
		TheApplication().Trace(&quot;WFOutputs.GetChildCount() &gt; 0&quot;);
		oPSManageResponse = WFOutputs.GetChild(0);
		TheApplication().Trace(&quot;oPSManageResponse = &quot; + oPSManageResponse);
			
		if(oPSManageResponse.GetChildCount() &gt; 0)
		{
			TheApplication().Trace(&quot;oPSManageResponse.GetChildCount() &gt; 0&quot;);
			oPSLocalRecordSet = oPSManageResponse.GetChild(0);
			TheApplication().Trace(&quot;oPSLocalRecordSet = &quot; + oPSLocalRecordSet);
				
			iRecordNumber = oPSLocalRecordSet.GetChildCount();
			TheApplication().Trace(&quot;iRecordNumber = &quot; + iRecordNumber);
					
			for(iRecordIndex = 0; iRecordIndex &lt; iRecordNumber; iRecordIndex++)
			{
				oPSLocalRecord = oPSLocalRecordSet.GetChild(iRecordIndex);	
				TheApplication().Trace(&quot;oPSLocalRecord = &quot; + oPSLocalRecord);				
				Outputs.AddChild(oPSLocalRecord);
			}
		}
	}
}
catch(e)
{
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally
{	
	//Clear Vars
	oPSLocalRecord = null;
	oPSLocalRecordSet = null;
	oPSManageResponse = null;
	WFOutputs = null;
	WFInputs = null;
	bsWfrMgr = null;
}
}"
			   SEQUENCE="2"
			   UPDATED="12/28/2017 15:56:08"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetProcess"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetProcess(sVBCName:String, sMethod:String)
{
	var oBO:BusObject;
	var oBC:BusComp;
	var bRecord;
	var sOutput:String = &quot;&quot;;
	var sApplication:String = &quot;&quot;;
	var sResult = &quot;&quot;;
	var sProcess = TheApplication().GetProfileAttr(&quot;GetMSISDNListProcess&quot;); //WA#18 Gaps - RPIRES 

	try
	{
		TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_GetProcess.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
		TheApplication().Trace(&quot;GetProcess Start!&quot;);
		sApplication = TheApplication().GetProfileAttr(&quot;ApplicationName&quot;);
		TheApplication().Trace(&quot;sApplication = &quot; + sApplication);
		
		sResult = sApplication + &quot;_&quot; + sMethod;
		TheApplication().Trace(&quot;sResult = &quot; + sResult);
		
		oBO = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		oBC = oBO.GetBusComp(&quot;List Of Values&quot;);
							
		with(oBC)
		{
			SetViewMode(AllView);
			ActivateField(&quot;VF Long Description&quot;);
		    ActivateField(&quot;Type&quot;);
   			ActivateField(&quot;Name&quot;);
   			ActivateField(&quot;Value&quot;);
			ActivateField(&quot;Parent&quot;);
			ClearToQuery();
			SetSearchSpec(&quot;Type&quot;, &quot;VF_VBC_ACTION&quot;);
			SetSearchSpec(&quot;Parent&quot;, sResult);
			//++WA#18 Gaps - RPIRES
			TheApplication().Trace(&quot;sProcess = &quot; + sProcess);
			if(sProcess == &quot;MNP&quot;)
			{
				TheApplication().Trace(&quot;sProcess == MNP&quot;);
				SetSearchSpec(&quot;Name&quot;, sVBCName+&quot;_MNP&quot;);
			}
			else 
			{
				TheApplication().Trace(&quot;sProcess &lt;&gt; MNP&quot;);
				SetSearchSpec(&quot;Name&quot;, sVBCName);
			}
			//--WA#18 Gaps - RPIRES
			ExecuteQuery(ForwardOnly);
		
			bRecord = FirstRecord();		
			if(bRecord)
			{
				TheApplication().Trace(&quot;oBC.FirstRecord&quot;);
				sOutput = GetFieldValue(&quot;VF Long Description&quot;);
				TheApplication().Trace(&quot;sOutput = &quot; + sOutput);
			}
		}
	}
	catch (e)
	{
		TheApplication().Trace(&quot;catch = &quot; + e.errText);
		throw(e);
	}
	finally
	{
		oBC=null;
		oBO=null;
 	}
 	
	return sOutput;
}"
			   SEQUENCE="3"
			   UPDATED="12/28/2017 15:56:04"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Init"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Init(Inputs:PropertySet, Outputs:PropertySet)
{
try{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_Init.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;Init Start!&quot;);
	// Init Vars
	var oBS:Service = TheApplication().GetService(&quot;PRM ANI Utility Service&quot;);
	var oPSInputs:PropertySet = TheApplication().NewPropertySet();
	var oPSOutputs:PropertySet = TheApplication().NewPropertySet();
	var oPSFields:PropertySet;
	var index:Number;
	var sFieldName:String;
	var sIOName:String;
	var sVBCName = Inputs.GetProperty(&quot;Business Component Name&quot;);

	//Log Init Input Message
	TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
	LogMessage (Inputs, sVBCName, &quot;Init&quot;, &quot;Send_NA&quot;);

	//Parse Input Message
	ParseInputServiceParameters(Inputs);
	
	//Process Init
	sIOName = Inputs.GetProperty(&quot;IOName&quot;);	
	oPSInputs.SetProperty(&quot;Hierarchy Name&quot;,sIOName);
	oBS.InvokeMethod(&quot;CreateEmptyPropSet&quot;, oPSInputs, oPSOutputs);
	
	oPSFields = oPSOutputs.GetChild(0).GetChild(0).GetChild(0);
	
	// Copy Field Names to Output Prop Set
	sFieldName = oPSFields.GetFirstProperty();
	TheApplication().Trace(&quot;sFieldName = &quot; + sFieldName);
	
	while(sFieldName != null &amp;&amp; sFieldName != &quot;&quot;)
	{
		TheApplication().Trace(&quot;sFieldName != null&quot;);
		Outputs.SetProperty(sFieldName, &quot;&quot;);
		sFieldName = oPSFields.GetNextProperty();
	}
	
	//ACAMBAS: VFTRCBU-19549
	TheApplication().Trace(&quot;VFTRCBUCreateCustomerTask = &quot; + TheApplication().GetProfileAttr(&quot;VFTRCBUCreateCustomerTask&quot;));
	if(TheApplication().GetProfileAttr(&quot;VFTRCBUCreateCustomerTask&quot;) == &quot;ON&quot;)
	{
		TheApplication().Trace(&quot;VFTRCBUCreateCustomerTask == ON &quot;);
		Outputs.SetProperty(&quot;Id&quot;, &quot;&quot;);
	}
	
	//Log Init Output Message
	LogMessage (Outputs, sVBCName, &quot;Init&quot;, &quot;Receive_NA&quot;);
	
}
catch(e){
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally
{
	oPSInputs = null;
	oPSFields = null;
	oPSOutputs = null;
	oBS = null;
}	
}"
			   SEQUENCE="4"
			   UPDATED="12/28/2017 15:55:59"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Insert"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Insert(Inputs:PropertySet, Outputs:PropertySet)
{
try{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_Insert.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;Insert Start!&quot;);
	//Declarations
	var sWF:String;
	var sContext:String;
	var sVBCName = Inputs.GetProperty(&quot;Business Component Name&quot;);
	var sPA:String;
	
	sVBCName = Inputs.GetProperty(&quot;Business Component Name&quot;);
	TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
	
	sPA = sVBCName + &quot;.&quot; + &quot;VFSkipInsertWF&quot;;
	TheApplication().Trace(&quot;sPA = &quot; + sPA);
	TheApplication().Trace(&quot;GetProfileAttr(sPA) = &quot; + TheApplication().GetProfileAttr(sPA));
	TheApplication().Trace(&quot;VFSkipInsertWF = &quot; + TheApplication().GetProfileAttr(&quot;VFSkipInsertWF&quot;));

	if(TheApplication().GetProfileAttr(sPA) == &quot;Y&quot; || TheApplication().GetProfileAttr(&quot;VFSkipInsertWF&quot;) == &quot;Y&quot;)
	{
		TheApplication().Trace(&quot;GetProfileAttr(sPA) == Y || VFSkipInsertWF == Y&quot;);
		//Do nothing - Log Message and exit
		LogMessage (Inputs, sVBCName, &quot;Insert&quot;, &quot;Send_VFRunInsertWF_Y&quot;);
	}
	else
	{
		TheApplication().Trace(&quot;else GetProfileAttr(sPA) == Y || VFSkipInsertWF == Y&quot;);
		//Log Input Message
		LogMessage (Inputs, sVBCName, &quot;Insert&quot;, &quot;Send_VFRunInsertWF_N&quot;);
		
		//Parse Input Message
		ParseInputServiceParameters(Inputs);
	
		sContext = Inputs.GetProperty(&quot;RequireContext&quot;);
		TheApplication().Trace(&quot;sContext = &quot; + sContext);

		if (sContext == &quot;Y&quot;)
		{
			TheApplication().Trace(&quot;sContext == Y&quot;);
			ParseInputParameters(Inputs);
		}
	
		//Get Process to execute for Query
		sWF = GetProcess(sVBCName, &quot;Insert&quot;);
		TheApplication().Trace(&quot;sWF = &quot; + sWF);

		//Execute Process
		Outputs = ExecuteProcess(sWF, Inputs, Outputs);	
		
		//Log Output Message		
		TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
		LogMessage (Outputs, sVBCName, &quot;Insert&quot;, &quot;Receive_VFRunInsertWF_N&quot;);
	}
}
catch(e)
{
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally
{
	//Clear Vars
	sWF = &quot;&quot;;
	sVBCName = &quot;&quot;;
	sContext = &quot;&quot;;
}
}"
			   SEQUENCE="5"
			   UPDATED="12/28/2017 15:55:54"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LogMessage"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LogMessage (Inputs:PropertySet, VBCName:String, MethodName:String, Direction:String)
{
	var srv;
	var slogflag;
	var Outputs;
	var oBO;
	var oBC;

	try
	{
		TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_LogMessage.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
		TheApplication().Trace(&quot;LogMessage Start!&quot;);
		
		slogflag = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_VBC_LOG&quot;,&quot;Active&quot;);
		TheApplication().Trace(&quot;slogflag = &quot; + slogflag);
		
		if (slogflag == &quot;Y&quot;)
		{
			TheApplication().Trace(&quot;slogflag == Y&quot;);
			var sDebugMode = &quot;&quot;;
			var sFilePath = &quot;&quot;;
		
			sFilePath = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_VBC_LOG&quot;,&quot;Log Path&quot;);
			TheApplication().Trace(&quot;sFilePath = &quot; + sFilePath);
			
			//Log message	
			srv 	= TheApplication().GetService(&quot;EAI XML Write to File&quot;);		
			Outputs = TheApplication().NewPropertySet();
				
			var Inputs_File = TheApplication().NewPropertySet();
			var sDate = new Date();
			Inputs_File = Inputs;
			var sTime = &quot;&quot;+sDate.getFullYear();
			sTime = sTime+(sDate.getMonth()+1);
			sTime = sTime+sDate.getDate();
			sTime = sTime+&quot;-&quot;+sDate.getHours();
			sTime = sTime+sDate.getMinutes();
			sTime = sTime+sDate.getSeconds();
					
			TheApplication().Trace(&quot;sFilePath = &quot; + sFilePath);
			TheApplication().Trace(&quot;sTime = &quot; + sTime);
			TheApplication().Trace(&quot;VBCName = &quot; + VBCName);
			TheApplication().Trace(&quot;MethodName = &quot; + MethodName);
			TheApplication().Trace(&quot;Direction = &quot; + Direction);
			Inputs_File.SetProperty(&quot;FileName&quot;, sFilePath+sTime+&quot;_&quot;+VBCName+&quot;_&quot;+MethodName+&quot;_&quot;+Direction+&quot;.xml&quot;);		
			srv.InvokeMethod(&quot;WritePropSet&quot;,Inputs_File, Outputs);	
			
			Inputs_File = null;
		}
	}
	catch (e)
	{
		TheApplication().Trace(&quot;catch = &quot; + e.errText);
		//Ignore in case of error - do nothing
	}
	finally
	{
		srv = null;
		Outputs = null;
		oBC = null;
		oBO = null;	
		sFilePath = null;
		slogflag = null;
	}

}"
			   SEQUENCE="6"
			   UPDATED="12/28/2017 15:55:49"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/09/2013 14:20:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ParseInputParameters"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ParseInputParameters(Inputs:PropertySet)
{
try{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_ParseInputParameters.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;ParseInputParameters Start!&quot;);
	//Init Vars
	var oPSLocalRecordSet:PropertySet;
	var iNumberOfChilds:Number;
	var index:Number;
	var sFieldName:String;
	var bExist:Boolean;
	
	iNumberOfChilds = Inputs.GetChildCount();
	TheApplication().Trace(&quot;iNumberOfChilds = &quot; + iNumberOfChilds);
	
	if (iNumberOfChilds &gt; 0)
	{
		TheApplication().Trace(&quot;iNumberOfChilds &gt; 0&quot;);
		TheApplication().Trace(&quot;iNumberOfChilds = &quot; + iNumberOfChilds);
		for(index = 0; index &lt; iNumberOfChilds; index++)
		{
			oPSLocalRecordSet = Inputs.GetChild(index);
			TheApplication().Trace(&quot;oPSLocalRecordSet = &quot; + oPSLocalRecordSet);
			bExist = oPSLocalRecordSet.PropertyExists(&quot;Field Name&quot;);
			TheApplication().Trace(&quot;bExist = &quot; + bExist);
			if (bExist == true)
			{
				TheApplication().Trace(&quot;bExist == true&quot;);
				TheApplication().Trace(&quot;oPSLocalRecordSet.GetProperty(Field Name) = &quot; + oPSLocalRecordSet.GetProperty(&quot;Field Name&quot;));
				TheApplication().Trace(&quot;oPSLocalRecordSet.GetProperty(Field Value) = &quot; + oPSLocalRecordSet.GetProperty(&quot;Field Value&quot;));
				Inputs.SetProperty(oPSLocalRecordSet.GetProperty(&quot;Field Name&quot;), oPSLocalRecordSet.GetProperty(&quot;Field Value&quot;));
			}
			else
			{
				TheApplication().Trace(&quot;bExist &lt;&gt; true&quot;);
				sFieldName = oPSLocalRecordSet.GetFirstProperty();
				TheApplication().Trace(&quot;sFieldName = &quot; + sFieldName);
				while (sFieldName != &quot;&quot;)
				{
					TheApplication().Trace(&quot;sFieldName &lt;&gt; null&quot;);
					TheApplication().Trace(&quot;oPSLocalRecordSet.GetProperty(sFieldName) = &quot; + oPSLocalRecordSet.GetProperty(sFieldName));
					Inputs.SetProperty(sFieldName, oPSLocalRecordSet.GetProperty(sFieldName));
					sFieldName = oPSLocalRecordSet.GetNextProperty();					
				}
			} 
		}	
	}
}
catch(e)
{
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally
{
	//Clear Vars
	sFieldName = &quot;&quot;;
	oPSLocalRecordSet = null;
}
}"
			   SEQUENCE="7"
			   UPDATED="12/28/2017 15:55:44"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/14/2013 21:43:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ParseInputServiceParameters"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ParseInputServiceParameters(Inputs:PropertySet)
{
try{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_ParseInputServiceParameters.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;ParseInputServiceParameters Start!&quot;);
	// Parse the parameters defined in &quot;Service Parameters&quot; VBC user prop
	// Format: Param1=Value1;Param2=Value2;...;ParamN=ValueN
	var sParameters:String = Inputs.GetProperty(&quot;Parameters&quot;);
	var aParamArray:Array = sParameters.split(&quot;;&quot;);
	var iParamCount:Number = aParamArray.length;
	var index:Number, iEqualSignPos:Number;
	var sParamDef:String;
	var aParamDef:Array;
	
	TheApplication().Trace(&quot;iParamCount = &quot; + iParamCount);
	for(index = 0; index &lt; iParamCount; index++)
	{
		sParamDef = aParamArray[index];
		TheApplication().Trace(&quot;sParamDef = &quot; + sParamDef);
		aParamDef = sParamDef.split(&quot;=&quot;);
		TheApplication().Trace(&quot;aParamDef = &quot; + aParamDef);
		
		TheApplication().Trace(&quot;aParamDef[0] = &quot; + aParamDef[0]);
		TheApplication().Trace(&quot;aParamDef[1] = &quot; + aParamDef[1]);
		Inputs.SetProperty(aParamDef[0], aParamDef[1]);
		
		aParamDef = null;
	}	

	aParamArray = null;	
}
catch(e)
{
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally
{
}
}"
			   SEQUENCE="8"
			   UPDATED="12/28/2017 15:55:39"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ParseQuerySearchSpecification"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ParseQuerySearchSpecification(Inputs:PropertySet)
{
	try
	{
		TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_ParseQuerySearchSpecification.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
		TheApplication().Trace(&quot;ParseQuerySearchSpecification Start!&quot;);
		var sSearchSpecification:String = Inputs.GetProperty(&quot;search-string&quot;);
		var iSearchCount:Number 		= sSearchSpecification.length;
		var sFieldName:String 			= &quot;&quot;;
		var sFieldValue:String 			= &quot;&quot;;
		var iStart:Number 				= 0;
		var iEnd:Number		 			= 0;
		//VFTRCBU 17122014: JIRA VFTRCBU-4373 - FTOSCANO
		var sPreviousFieldName:String   = &quot;&quot;;   
        //VFTRCBU 17122014: JIRA VFTRCBU-4373 - FTOSCANO
        var sAux:String                 = &quot;&quot;;	
		 
		TheApplication().Trace(&quot;iSearchCount = &quot; + iSearchCount);
		if (iSearchCount &gt; 0)
		{
			TheApplication().Trace(&quot;iSearchCount &gt; 0&quot;);
			TheApplication().Trace(&quot;iEnd = &quot; + iEnd);
			while(iEnd &lt; iSearchCount)
			{
				TheApplication().Trace(&quot;iEnd &lt; iSearchCount&quot;);
				// Field scenario
				TheApplication().Trace(&quot;sSearchSpecification = &quot; + sSearchSpecification);
				iStart 		= sSearchSpecification.indexOf(&apos;[&apos;, iStart+1);	//Look for field start
				iEnd 		= sSearchSpecification.indexOf(&apos;]&apos;, iEnd+1);		//Look for field end
				sFieldName 	= sSearchSpecification.substring(iStart+1, iEnd);
				TheApplication().Trace(&quot;iStart = &quot; + iStart);
				TheApplication().Trace(&quot;iEnd = &quot; + iEnd);
				TheApplication().Trace(&quot;sFieldName = &quot; + sFieldName);

				//36516 (TC-4730) - Added to avoid endless loops
				if (iStart == -1 || iEnd == -1)
				{
					TheApplication().Trace(&quot;iStart == -1 || iEnd == -1&quot;);
					return;
				}	
				// Value scenario
				iStart 		= sSearchSpecification.indexOf(&apos;&quot;&apos;, iEnd+1);
				iEnd 		= sSearchSpecification.indexOf(&apos;&quot;&apos;, iStart+1);
				sFieldValue = sSearchSpecification.substring(iStart+1, iEnd);
				TheApplication().Trace(&quot;iStart = &quot; + iStart);
				TheApplication().Trace(&quot;iEnd = &quot; + iEnd);
				TheApplication().Trace(&quot;sFieldValue = &quot; + sFieldValue);
				
				//VFTRCBU 09122014: JIRA VFTRCBU-4373 - FTOSCANO - START
				if(sFieldName != &quot;&quot; &amp;&amp; sFieldValue != &quot;&quot;)
                {                    
                    TheApplication().Trace(&quot;sFieldName != null &amp;&amp; sFieldValue != null&quot;);
                    TheApplication().Trace(&quot;sFieldName.valueOf() = &quot; + sFieldName.valueOf());
                    TheApplication().Trace(&quot;sPreviousFieldName.valueOf() = &quot; + sPreviousFieldName.valueOf());
                    if (sFieldName.valueOf() != sPreviousFieldName.valueOf())
                    {
                    	TheApplication().Trace(&quot;sFieldName.valueOf() != sPreviousFieldName.valueOf()&quot;);
                    	TheApplication().Trace(&quot;sFieldName = &quot; + sFieldName);
						TheApplication().Trace(&quot;sFieldValue = &quot; + sFieldValue);
                        Inputs.SetProperty(sFieldName, sFieldValue);                        
                    } 
                    else if (sFieldName.valueOf() == &quot;VFTRCBU MSISDN&quot; || sFieldName.valueOf() == &quot;VFTRCBU IMSI&quot; || sFieldName.valueOf() == &quot;VFTRCBU ICCID&quot; || sFieldName.valueOf() == &quot;VFTRCBU GSM&quot;)
                    {
                    	TheApplication().Trace(&quot;sFieldName.valueOf() == VFTRCBU MSISDN || VFTRCBU IMSI || VFTRCBU ICCID || VFTRCBU GSM&quot;);
                    	TheApplication().Trace(&quot;sFieldName = &quot; + sFieldName);
                    	TheApplication().Trace(&quot;sFieldValue = &quot; + sFieldValue);
                        sAux = Inputs.GetProperty(sFieldName) + &quot;;&quot; + sFieldValue;
                        TheApplication().Trace(&quot;sAux = &quot; + sAux);
                        Inputs.SetProperty(sFieldName, sAux);
                    }
                    TheApplication().Trace(&quot;sFieldName = &quot; + sFieldName);
                    sPreviousFieldName = sFieldName;
                    sFieldName  = &quot;&quot;;
                    sFieldValue = &quot;&quot;;
                }
                else
                {	
                	TheApplication().Trace(&quot;else sFieldName != null &amp;&amp; sFieldValue != null&quot;);
                	//++VFTRCBU-28938 RPIRES
                	TheApplication().Trace(&quot;sFieldName = &quot; + sFieldName);
                    sPreviousFieldName = sFieldName;
                    sFieldName  = &quot;&quot;;
                    sFieldValue = &quot;&quot;;
                    //return;
                    //--VFTRCBU-28938 RPIRES
                }
                //VFTRCBU 09122014: JIRA VFTRCBU-4373 - FTOSCANO - END
			}
		}
	}
	catch(e)
	{
		TheApplication().Trace(&quot;catch = &quot; + e.errText);
	}
	finally
	{
		iEnd = null;
		iStart = null;
		sFieldValue	= null;
		sFieldName = null;
		iSearchCount = null;
		sSearchSpecification = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="12/28/2017 15:55:34"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/14/2013 21:43:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PreInsert"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function PreInsert(Inputs:PropertySet, Outputs:PropertySet)
{
	try
	{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_PreInsert.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;PreInsert Start!&quot;);
	var sVBCName = Inputs.GetProperty(&quot;Business Component Name&quot;);
	TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
	LogMessage (Inputs, sVBCName, &quot;PreInsert&quot;, &quot;Send_NA&quot;);
	Outputs.AddChild(TheApplication().NewPropertySet());
	LogMessage (Outputs, sVBCName, &quot;PreInsert&quot;, &quot;Receive_NA&quot;);
	}
	catch(e)
	{
		TheApplication().Trace(&quot;catch = &quot; + e.errText);
	}
	finally
	{
	}
}"
			   SEQUENCE="10"
			   UPDATED="12/28/2017 15:55:28"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Query"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Query(Inputs:PropertySet, Outputs:PropertySet)
{
try
{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_Query.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;Query Start!&quot;);
	//Declarations
	var sWF:String;
	var sContext:String;
	var sPA:String;

	var sVBCName = Inputs.GetProperty(&quot;Business Component Name&quot;);
	TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
	
	sPA = sVBCName + &quot;.&quot; + &quot;VFSkipQueryWF&quot;;
	TheApplication().Trace(&quot;sPA = &quot; + sPA);

	TheApplication().Trace(&quot;GetProfileAttr(sPA) = &quot; + TheApplication().GetProfileAttr(sPA));
	TheApplication().Trace(&quot;GetProfileAttr(VFSkipQueryWF) = &quot; + TheApplication().GetProfileAttr(&quot;VFSkipQueryWF&quot;));
	if(TheApplication().GetProfileAttr(sPA) == &quot;Y&quot; || TheApplication().GetProfileAttr(&quot;VFSkipQueryWF&quot;) == &quot;Y&quot;)
	{
		TheApplication().Trace(&quot;GetProfileAttr(sPA) == Y || GetProfileAttr(VFSkipQueryWF) == Y&quot;);
		//Do nothing - Log Message and exit
		TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
		LogMessage (Inputs, sVBCName, &quot;Query&quot;, &quot;Send_VFRunQueryWF_Y&quot;);
	}
	else
	{
		TheApplication().Trace(&quot;else GetProfileAttr(sPA) == Y || GetProfileAttr(VFSkipQueryWF) == Y&quot;);
		//Log Input Message
		TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
		LogMessage (Inputs, sVBCName, &quot;Query&quot;, &quot;Send_VFRunQueryWF_N&quot;);
	
		//Parse Input Message
		ParseInputServiceParameters(Inputs);
		
		sContext = Inputs.GetProperty(&quot;RequireContext&quot;);
		TheApplication().Trace(&quot;sContext = &quot; + sContext);
		
		if (sContext == &quot;Y&quot;)
		{
			TheApplication().Trace(&quot;sContext == Y&quot;);
			ParseQuerySearchSpecification(Inputs);
		}
		
		//Get Process to execute for Query
		TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
		sWF = GetProcess(sVBCName, &quot;Query&quot;);
		TheApplication().Trace(&quot;sWF = &quot; + sWF);
	
		//Execute Process
		ExecuteProcess(sWF, Inputs, Outputs);
	
		TheApplication().SetProfileAttr(&quot;GetMSISDNListProcess&quot;,&quot;&quot;); //WA#18 Gaps - RPIRES
	
		//Log Output Message
		TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
		LogMessage (Outputs, sVBCName, &quot;Query&quot;, &quot;Receive_VFRunQueryWF_N&quot;);

	}
}
catch(e)
{
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally{
	//Clear Vars
	sWF = &quot;&quot;;
	sVBCName = &quot;&quot;;
	sContext = &quot;&quot;;
}
}"
			   SEQUENCE="11"
			   UPDATED="12/28/2017 15:55:23"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_PreInvokeMethod.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	switch(MethodName)
	{
		case &quot;Init&quot;:
			TheApplication().Trace(&quot;Init Start!&quot;);
			Init(Inputs,Outputs);
			return (CancelOperation);
		break;
		
		case &quot;Query&quot;:
			TheApplication().Trace(&quot;Query Start!&quot;);
			Query(Inputs,Outputs);
			return (CancelOperation);
		break;
		
		case &quot;Update&quot;:
			TheApplication().Trace(&quot;Update Start!&quot;);
			Update(Inputs,Outputs);
			return(CancelOperation);
		break;
		
		case &quot;PreInsert&quot;:
			TheApplication().Trace(&quot;PreInsert Start!&quot;);
			PreInsert(Inputs,Outputs);
			return(CancelOperation);
		break;
		
		case &quot;Insert&quot;:
			TheApplication().Trace(&quot;Insert Start!&quot;);
			Insert(Inputs,Outputs);
			return(CancelOperation);
		break;
		
		case &quot;Delete&quot;:
			TheApplication().Trace(&quot;Delete Start!&quot;);
			Delete(Inputs,Outputs);
			return(CancelOperation);
		break;
		
	}
}"
			   SEQUENCE="13"
			   UPDATED="12/28/2017 15:55:13"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Update"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Update(Inputs:PropertySet, Outputs:PropertySet)
{
try{
	TheApplication().TraceOn(&quot;/swstage/VFVBCIntegBS_Update.txt&quot;, &quot;Allocation&quot;, &quot;All&quot;);
	TheApplication().Trace(&quot;Update Start!&quot;);
	//Declarations
	var sVBCName:String;
	var sContext:String;
	var sWF:String;
	var sChild:PropertySet;
	var sFieldName:String, sFieldValue:String;
	var row:PropertySet = TheApplication().NewPropertySet();
	var childCount:Number = 0;
	var child:PropertySet;
	var sPA:String;
	
	sVBCName = Inputs.GetProperty(&quot;Business Component Name&quot;);
	TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
	
	sPA = sVBCName + &quot;.&quot; + &quot;VFSkipUpdateWF&quot;;
	TheApplication().Trace(&quot;sPA = &quot; + sPA);
	TheApplication().Trace(&quot;GetProfileAttr(sPA) = &quot; + TheApplication().GetProfileAttr(sPA));
	TheApplication().Trace(&quot;VFSkipUpdateWF = &quot; + TheApplication().GetProfileAttr(&quot;VFSkipUpdateWF&quot;));
	TheApplication().Trace(&quot;VFTRCBUCreateCustomerTask = &quot; + TheApplication().GetProfileAttr(&quot;VFTRCBUCreateCustomerTask&quot;));

	if(TheApplication().GetProfileAttr(sPA) == &quot;Y&quot; || TheApplication().GetProfileAttr(&quot;VFSkipUpdateWF&quot;) == &quot;Y&quot; || TheApplication().GetProfileAttr(&quot;VFTRCBUCreateCustomerTask&quot;) == &quot;ON&quot;)
	{
		TheApplication().Trace(&quot;GetProfileAttr(sPA) == Y || VFSkipUpdateWF == Y || VFTRCBUCreateCustomerTask == ON&quot;);
		//Do nothing - Log Message and exit
		LogMessage (Inputs, sVBCName, &quot;Update&quot;, &quot;Send_VFRunUpdateWF_Y&quot;);
	} 
	else
	{ 
		TheApplication().Trace(&quot;else GetProfileAttr(sPA) == Y || VFSkipUpdateWF == Y || VFTRCBUCreateCustomerTask == ON&quot;);
		//Log Input Message
	 	LogMessage (Inputs, sVBCName, &quot;Update&quot;, &quot;Send_VFRunUpdateWF_N&quot;);
		
		//Parse Input Parameters
		ParseInputServiceParameters(Inputs);
		
		sContext = Inputs.GetProperty(&quot;RequireContext&quot;);
		TheApplication().Trace(&quot;sContext = &quot; + sContext);
		
		if (sContext == &quot;Y&quot;)
		{
			TheApplication().Trace(&quot;sContext == Y&quot;);
			ParseInputParameters(Inputs);
		}
		
		//Get Process to execute for Query
		sWF = GetProcess(sVBCName, &quot;Update&quot;);
		TheApplication().Trace(&quot;sWF = &quot; + sWF);		

		//Execute Process
		ExecuteProcess(sWF, Inputs, Outputs);	

		//Log Output Message
		TheApplication().Trace(&quot;sVBCName = &quot; + sVBCName);
		LogMessage (Outputs, sVBCName, &quot;Update&quot;, &quot;Receive_VFRunUpdateWF_N&quot;);
	}
}
catch(e)
{
	TheApplication().Trace(&quot;catch = &quot; + e.errText);
}
finally
{
	//Clear Vars
	sWF = &quot;&quot;;
	sVBCName = &quot;&quot;;
	sContext = &quot;&quot;;
}
}"
			   SEQUENCE="12"
			   UPDATED="12/28/2017 15:55:18"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/01/2013 18:30:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



