<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="04/28/2018 18:51:18"
   UPDATED_BY="SADMIN"
   CREATED="04/28/2018 10:52:36"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LANGUAGE_LOCKED="ENU"
	   LOCKED="N"
	   NAME="VF WP17 GIB"
	   UI_FREEZE="N"
	   UPDATED="05/11/2018 16:36:34"
	   UPDATED_BY="IBM_ETUNALI"
	   CREATED="05/10/2011 22:18:13"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="WP17GIB"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF GIB Response Container"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="Y"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="05/14/2018 13:28:22"
		   UPDATED_BY="IBM_ETUNALI"
		   CREATED="05/13/2011 16:47:25"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF GIB Response Container"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="05/13/2011 16:48:44"
			   UPDATED_BY="SADMIN"
			   CREATED="05/13/2011 16:47:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Accepted_GibError"
			   UPDATED="05/25/2011 11:44:14"
			   UPDATED_BY="SADMIN"
			   CREATED="05/13/2011 16:47:25"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:09"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:25:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:11"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:25:12"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Profile Mode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:14"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:24:52"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Accepted_GibOk"
			   UPDATED="05/25/2011 11:44:06"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2011 17:26:03"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:03"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:26:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:01"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:26:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Profile Mode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:06"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:26:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Approved_Gib"
			   UPDATED="05/28/2011 22:55:26"
			   UPDATED_BY="SADMIN"
			   CREATED="05/28/2011 22:55:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ConfirmCustomerData_GibOK"
			   UPDATED="05/25/2011 11:43:48"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2011 17:27:51"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:31"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:27:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Customer Name"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:30"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:28:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="GIB Retrieved Customer Name"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:28"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:28:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Logging Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:33"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:27:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:34"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:27:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Profile Mode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:36"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:27:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Timestamp"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:30:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TransactionId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:43:48"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:30:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Rejected_Fraud"
			   UPDATED="05/28/2011 22:55:26"
			   UPDATED_BY="SADMIN"
			   CREATED="05/28/2011 22:55:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Rejected_GibError"
			   UPDATED="05/25/2011 11:44:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2011 17:27:20"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:27:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:18"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:27:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Profile Mode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:27:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Rejected_GibOk"
			   UPDATED="06/01/2011 18:59:58"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2011 17:26:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:26:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Logging Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:26:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:44:27"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:26:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Profile Mode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2011 11:45:40"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2011 17:26:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Rejected_MissingDoc"
			   UPDATED="05/28/2011 22:55:26"
			   UPDATED_BY="SADMIN"
			   CREATED="05/28/2011 22:55:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Update_GibVerStatus"
			   UPDATED="05/28/2011 22:55:26"
			   UPDATED_BY="SADMIN"
			   CREATED="05/28/2011 22:55:26"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/28/2011 22:55:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/28/2011 22:55:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Company Status"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/28/2011 22:55:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/28/2011 22:55:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Duplicated"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/28/2011 22:55:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/28/2011 22:55:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="LIC have to be provided"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="GIB Verification Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/28/2011 22:55:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/28/2011 22:55:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/28/2011 22:55:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/28/2011 22:55:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF GIB Reg Number"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/28/2011 22:55:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/28/2011 22:55:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Accepted_GibError"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function 	Accepted_GibError(Inputs, Outputs)
{
	try
	{
		/*a) creating log for this transaction with logging id L04
		  b) Updating gib verification status to unverified. */	
		var enable_logging	=   TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
		var boAccount		: BusObject = 	TheApplication().GetBusObject (&quot;X Order Entry&quot;);
		var bcAccount		: BusComp = 	boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
		var bcOrder         : BusComp =  boAccount.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var payload			: PropertySet = TheApplication().NewPropertySet();
		var strOrderID;
		var accountId;
		var profileMode;
		TheApplication().SetProfileAttr(&quot;CallGIBNavigate&quot;,&quot;N&quot;);
		TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);

		payload 	= Inputs.GetChild(0);
		strOrderID 	= payload.GetProperty(&quot;Order Id&quot;);
		accountId	= payload.GetProperty(&quot;Account Id&quot;);
		profileMode	= payload.GetProperty(&quot;Profile Mode&quot;);
		
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;accountId&quot;, accountId);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
		
  		var bsGIBLogging : Service= TheApplication().GetService(&quot;VF Logging BS&quot;);
		var psBSInput : PropertySet = TheApplication().NewPropertySet();
		var psBSOutput : PropertySet = TheApplication().NewPropertySet();
					
		if(strOrderID!=&quot;&quot;)
    	{
		    bcOrder.ClearToQuery();
		    bcOrder.SetViewMode(AllView);
		    bcOrder.ActivateField(&quot;VF GIB Call&quot;);
		    bcOrder.SetSearchSpec(&quot;Id&quot;,payload.GetProperty(&quot;Order Id&quot;));
		    bcOrder.ExecuteQuery(ForwardOnly);
		    if (bcOrder.FirstRecord()) 
		    {
	            bcOrder.SetFieldValue(&quot;VF GIB Call&quot;,&quot;Y&quot;)
	            bcOrder.WriteRecord();
		    }
		}
		if (enable_logging == &quot;Y&quot;)	  	
		{
			psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L04&quot;);
			psBSInput.SetProperty(&quot;Customer Code&quot;,accountId);
			psBSInput.SetProperty(&quot;Profile Mode&quot;,profileMode);
			psBSInput.SetProperty(&quot;Order Id&quot;,strOrderID);
			bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
			var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
	     }	
		bcAccount.ClearToQuery();
	 	bcAccount.SetViewMode(AllView);
		bcAccount.SetSearchSpec(&quot;Id&quot;,payload.GetProperty(&quot;Account Id&quot;));
		bcAccount.ExecuteQuery(ForwardOnly);
		if (bcAccount.FirstRecord()) 
		{ 
			bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;));
			bcAccount.WriteRecord();
		}
		TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);   
	}
	finally
	{
		bsGIBLogging = null;
		bcAccount = null;
		bcOrder = null;
		boAccount = null;
		payload = null;
		BS	= null;
		outProp	= null;
		inProp	= null;
		psBSOutput = null;
		psBSInput = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="07/05/2013 20:26:38"
			   UPDATED_BY="SADMIN"
			   CREATED="05/18/2011 17:04:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Accepted_GibOk"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function  Accepted_GibOk(Inputs, Outputs)
{
	try
	{
	var bsWfrMgr 		: Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	var enable_logging  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
	var isActive 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 95);
	var isAcquired 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 100);
	var feedback 		: PropertySet = TheApplication().NewPropertySet();
	var psInputs  		: PropertySet = TheApplication().NewPropertySet();
	var psOutputs 		: PropertySet = TheApplication().NewPropertySet();
	var payload			: PropertySet = TheApplication().NewPropertySet();
	var	gibResponse		: PropertySet = TheApplication().NewPropertySet();
	var boAccount		: BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
	var bcAccount		: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
	var bcOrder			: BusComp = boAccount.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
	payload 				= Inputs.GetChild(0);
	var strOrderID;
	var bsTaxOfficeCheck;
	var strResult1;
	var taxCity;
	var regNumber;
	var timestamp;
	var accountId;
	var profileMode;
	var companyStatus;
	var taxOffice;
	var dodTitle;
	var baAccountStatusNew;
	var companyType;//ESANTOS DEF-2839

	TheApplication().SetProfileAttr(&quot;CallGIBNavigate&quot;,&quot;N&quot;);
	TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);
	payload				=  Inputs.GetChild(0); 
	gibResponse			=  Inputs.GetChild(1);
	Clib.strftime(timestamp, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
 	
 	var bsGIBLogging : Service = TheApplication().GetService(&quot;VF Logging BS&quot;);
	var psBSInput : PropertySet = TheApplication().NewPropertySet();
	var psBSOutput : PropertySet = TheApplication().NewPropertySet();
		
	/*code to enable order submission*/
	strOrderID 		= payload.GetProperty(&quot;Order Id&quot;);
	regNumber 		= payload.GetProperty(&quot;VF GIB Reg Number&quot;);
	accountId 		= payload.GetProperty(&quot;Account Id&quot;);
	profileMode		= payload.GetProperty(&quot;Profile Mode&quot;);
	taxOffice		= payload.GetProperty(&quot;Tax Office&quot;);
	companyStatus 	= payload.GetProperty(&quot;Company Status&quot;);
	dodTitle		= payload.GetProperty(&quot;DOD Title&quot;);
	companyType		= payload.GetProperty(&quot;Company Type&quot;);//ESANTOS DEF-2839
	var loggingId = companyStatus == &quot;Y&quot; ? &quot;L17&quot; : &quot;L11&quot;;
	
	if(strOrderID!=&quot;&quot;)
    {
	    bcOrder.ClearToQuery();
	    bcOrder.SetViewMode(AllView);
	    bcOrder.ActivateField(&quot;VF GIB Call&quot;);
	    bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderID);
	    bcOrder.ExecuteQuery(ForwardOnly);
	    if (bcOrder.FirstRecord()) 
	    {
	                bcOrder.SetFieldValue(&quot;VF GIB Call&quot;,&quot;Y&quot;)
	                bcOrder.WriteRecord();
	    }
    }
    /*END - code to enable order submission*/
    /*Check Tax Office retrieved from GIB match with internal one*/  	
	bsTaxOfficeCheck = TheApplication().GetService (&quot;ACS NI General Operations&quot;);
	psInputs.SetProperty(&quot;svc_In_LOV_Type&quot;, &quot;TAX_OFFICE&quot;);
	psInputs.SetProperty(&quot;svc_In_Value&quot;, taxOffice);
	bsTaxOfficeCheck.InvokeMethod(&quot;GetParentLIC&quot;, psInputs,psOutputs); 
	strResult1 = psOutputs.GetProperty(&quot;Result&quot;);
	taxCity =psOutputs.GetProperty(&quot;ParentDisplay&quot;);
	/*END - Check Tax Office retrieved from GIB match with internal one*/ 
	/*Writing logging value (CR67)*/
	bsWfrMgr = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	psInputs = TheApplication ().NewPropertySet (); 
	psOutputs = TheApplication ().NewPropertySet (); 
	psInputs.SetProperty(&quot;Account Id&quot;, accountId);
	psInputs.AddChild(gibResponse);
	psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Response GIB Data Workflow&quot;);                                                              
	bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;, psInputs,psOutputs);
	/*END-Writing logging value (CR67)*/
	if (strResult1==&quot;OK&quot;)
    {
	 	bcAccount.ClearToQuery();
	 	bcAccount.SetViewMode(AllView);
	 	bcAccount.ActivateField(&quot;VF GIB Ver Reason&quot;);
		bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);
		bcAccount.ExecuteQuery(ForwardOnly);
		if (bcAccount.FirstRecord()) 
		{ 
			bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerified&quot;));
			bcAccount.SetFieldValue(&quot;Name&quot;,dodTitle);
			bcAccount.SetFieldValue(&quot;VF Tax City&quot;,taxCity);
			bcAccount.SetFieldValue(&quot;VF GIB Last Ver Date&quot;,timestamp);
			bcAccount.SetFieldValue(&quot;VF GIB Reg Number&quot;,regNumber);
			bcAccount.SetFieldValue(&quot;VF GIB Account Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,companyStatus));
			bcAccount.SetFieldValue(&quot;VF Tax Office&quot;,taxOffice);
			bcAccount.SetFieldValue(&quot;VF GIB Ver Reason&quot;,&quot;&quot;);
			bcAccount.SetFieldValue(&quot;Flag PF&quot;, companyType);//ESANTOS DEF-2839
			bcAccount.WriteRecord();
			
			//activation check
			TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
			bcAccount.InvokeMethod(&quot;CheckActivateCustomer&quot;);

			baAccountStatusNew = bcAccount.GetFieldValue(&quot;Account Status Code&quot;);
			if((TheApplication().GetProfileAttr(&quot;CustomerDuplicated&quot;))!=&quot;Y&quot;)
			{
				bcAccount.WriteRecord();
				TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);   
			}	
		}
	}	
	TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);   
	
	if (enable_logging == &quot;Y&quot;)  	
	{
	  	
		psBSInput.SetProperty(&quot;Logging Id&quot;,loggingId);
		psBSInput.SetProperty(&quot;Customer Code&quot;,accountId);
		psBSInput.SetProperty(&quot;Profile Mode&quot;,profileMode);
		psBSInput.SetProperty(&quot;Order Id&quot;,strOrderID);
		bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
		var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
    }	
	}
	catch (e) { throw(e);}
	finally
	{
	bsGIBLogging = null;
	bsWfrMgr = null;
	bcAccount = null;
	bcOrder = null;
	boAccount = null;
	bsTaxOfficeCheck = null;
	payload = null;
	gibResponse	= null;
	psBSOutput	= null;
	psBSInput	= null;
	bsGIBLogging	= null;
	feedback	= null;
	psOutputs	= null;
	psInputs	= null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="05/11/2018 16:36:34"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/18/2011 18:01:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Approved_Gib"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function  Approved_Gib(Inputs, Outputs)
{
	try
	{
	var bsGIBLogging 	: Service = TheApplication().GetService(&quot;VF Logging BS&quot;);
	var psBSInput 		: PropertySet = TheApplication().NewPropertySet();
	var psBSOutput 		: PropertySet = TheApplication().NewPropertySet();
	var bsWfrMgr 		: Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	var enable_logging  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
	var isActive 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 95);
	var isAcquired 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 100);
	var feedback 		: PropertySet = TheApplication().NewPropertySet();
	var psInputs  		: PropertySet = TheApplication().NewPropertySet();
	var psOutputs 		: PropertySet = TheApplication().NewPropertySet();
	var payload			: PropertySet = TheApplication().NewPropertySet();
	var	gibResponse		: PropertySet = TheApplication().NewPropertySet();
	var boAccount		: BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
	var bcAccount		: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
	var bcOrder			: BusComp = boAccount.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
	var boListVal		: BusObject = TheApplication().GetBusObject (&quot;List Of Values&quot;);
	var bcListVal		: BusComp = boListVal.GetBusComp(&quot;List Of Values&quot;);
	var strOrderID;
	var bsTaxOfficeCheck;
	var strResult1;
	var taxCity;
	var regNumber;
	var timestamp;
	var accountId;
	var profileMode;
	var DCAScenario;
	var loggingId;
    var companyStatus;
	var taxOffice;
	var dodTitle;
	var baAccount;
	var baAccountStatusNew;
	var strTaxId;
	var strTaxJurLIC;
	payload				=  Inputs.GetChild(0); 
	gibResponse			=  Inputs.GetChild(1).GetChild(0);
	Clib.strftime(timestamp, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
 	
	/*code to enable order submission */
	dodTitle			= payload.GetProperty(&quot;DOD Title&quot;);
	strOrderID 			= payload.GetProperty(&quot;Order Id&quot;);
	regNumber 			= payload.GetProperty(&quot;VF GIB Reg Number&quot;);
	accountId 			= payload.GetProperty(&quot;Account Id&quot;);
	profileMode			= payload.GetProperty(&quot;Profile Mode&quot;);
	companyStatus		= payload.GetProperty(&quot;Company Status&quot;);
	DCAScenario		    = payload.GetProperty(&quot;DCA Scenario&quot;);
	taxOffice			= payload.GetProperty(&quot;Tax Office&quot;);
	strTaxId 			= payload.GetProperty(&quot;Tax Number&quot;);
			
	if(strOrderID!=&quot;&quot;)
    {
	    bcOrder.ClearToQuery();
	    bcOrder.SetViewMode(AllView);
	    bcOrder.ActivateField(&quot;VF GIB Call&quot;);
	    bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderID);
	    bcOrder.ExecuteQuery(ForwardOnly);
	    if (bcOrder.FirstRecord()) 
	    {
	                bcOrder.SetFieldValue(&quot;VF GIB Call&quot;,&quot;Y&quot;)
	                bcOrder.WriteRecord();
	    }
    }
    /*END - code to enable order submission*/
	/*Writing logging value (CR67)*/
	bsWfrMgr = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	psInputs = TheApplication ().NewPropertySet (); 
	psOutputs = TheApplication ().NewPropertySet (); 
	psInputs.SetProperty(&quot;Account Id&quot;, accountId);
	psInputs.AddChild(gibResponse);
	psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Response GIB Data Workflow&quot;);                                                              
	bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;, psInputs,psOutputs);
	/*END-Writing logging value (CR67)*/
	//START CR
		bcListVal.ClearToQuery();
		bcListVal.SetViewMode(AllView);
		bcListVal.ActivateField(&quot;Value&quot;);
		bcListVal.ActivateField(&quot;Parent&quot;);
		bcListVal.SetSearchSpec(&quot;Value&quot;,&quot;&apos;&quot;+taxOffice+&quot;&apos;&quot;);//ESANTOS DEF-2808 - &apos;&apos; Added to avoid error in query
		bcListVal.SetSearchSpec(&quot;Type&quot;,&quot;TAX_OFFICE&quot;);
		bcListVal.ExecuteQuery(ForwardOnly);
		if(bcListVal.FirstRecord())
			strTaxJurLIC = bcListVal.GetFieldValue(&quot;Parent&quot;);	
	//END CR
 	bcAccount.ClearToQuery();
 	bcAccount.SetViewMode(AllView);
 	bcAccount.ActivateField(&quot;VF GIB Ver Reason&quot;);
 	bcAccount.ActivateField(&quot;VF GIB Tax Id&quot;);
 	bcAccount.ActivateField(&quot;VF Tax City&quot;);
 	bcAccount.ActivateField(&quot;Name&quot;);
	bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);
	bcAccount.ExecuteQuery(ForwardOnly);
	if (bcAccount.FirstRecord()) 
	{ 
		bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBApproved&quot;));
		bcAccount.SetFieldValue(&quot;VF Tax City&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PROVINCE&quot;,strTaxJurLIC));
		bcAccount.SetFieldValue(&quot;VF Tax Office&quot;,taxOffice);
		bcAccount.SetFieldValue(&quot;VF GIB Last Ver Date&quot;,timestamp);
		bcAccount.SetFieldValue(&quot;VF GIB Ver Reason&quot;,&quot;&quot;);
		bcAccount.SetFieldValue(&quot;VF GIB Tax Id&quot;,strTaxId);
		bcAccount.SetFieldValue(&quot;Name&quot;,dodTitle);
		
		bcAccount.WriteRecord();
		
		//activation check
		TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
		bcAccount.InvokeMethod(&quot;CheckActivateCustomer&quot;);
		baAccountStatusNew = bcAccount.GetFieldValue(&quot;Account Status Code&quot;);
		//duplicity
		/*TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
		if ((baAccountStatusNew == isActive)|| (baAccountStatusNew == isAcquired))
		{	
			bcAccount.InvokeMethod(&quot;CheckDuplicity&quot;);
		}*/
		if((TheApplication().GetProfileAttr(&quot;CustomerDuplicated&quot;))!=&quot;Y&quot;)
		{
			bcAccount.WriteRecord();
			TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);   
		}	
	}
	loggingId = companyStatus == &quot;Y&quot; ? &quot;L31&quot; : &quot;L35&quot;; 

	if (enable_logging == &quot;Y&quot;)  	
	{ 
		psBSInput.SetProperty(&quot;Logging Id&quot;,loggingId);
		psBSInput.SetProperty(&quot;Customer Code&quot;,accountId);
		psBSInput.SetProperty(&quot;Profile Mode&quot;,profileMode);
		psBSInput.SetProperty(&quot;Order Id&quot;,strOrderID);
		bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
		var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
    }
  	
	}
	finally
	{
	bsGIBLogging 	= null;
	bsWfrMgr     	= null;
	bcOrder      	= null;
	bcAccount	 	= null;
	boAccount     	 = null;
	bcListVal	= null;
	boListVal	= null;
	gibResponse	= null;
	payload	= null;
	psOutputs	= null;
	psInputs	= null;
	feedback	= null;
	psBSOutput	= null;
	psBSInput	= null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="05/04/2015 22:49:53"
			   UPDATED_BY="SADMIN"
			   CREATED="05/27/2011 17:16:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ConfirmCustomerData_GibOK"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ConfirmCustomerData_GibOK(Inputs, Outputs)
{
	try
	{	
		 var enable_logging = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
		 var isActive 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 95);
		 var isAcquired 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 100);
		 var timestamp;
		 var payload						: PropertySet =  TheApplication().NewPropertySet();
		 var completeGIBResponse			: PropertySet =  TheApplication().NewPropertySet();
		 var fuzzyResult = &quot;KO&quot;; 
		 var strTitle;
		 var strName;
		 payload 				= Inputs.GetChild(0);
		 var companyStatus 	= payload.GetProperty(&quot;Company Status&quot;);
		 var logValueFuzzyOK 	= companyStatus == &quot;Y&quot; ?  &quot;L15&quot;: &quot;L12&quot;;
		 var logValueFuzzyKO 	= companyStatus == &quot;Y&quot; ?  &quot;L18&quot;: &quot;L14&quot;;
		 var boAccount			: BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
		 var bcAccount			: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
		 var bcOrder			: BusComp = boAccount.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		 var bsWPRManager 		: Service = TheApplication().GetService (&quot;Workflow Process Manager&quot;);
		 var wfmInputs  		: PropertySet = TheApplication ().NewPropertySet ();
		 var wfmOutputs 		: PropertySet = TheApplication ().NewPropertySet ();
		 var strFuzzyThreshold 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FUZZY_LOGIC_THRESHOLD&quot;,&quot;FuzzyLogic&quot;);
		 var strStatCode;
		 var strFuzzyResult1;
		 var strFuzzyResult;
		 var baAccountStatusNew;
		 var baAccountStatus;
		 var accountId;
		 var profileMode;
		 var strOrderID;
		 var strTaxId;
		 TheApplication().SetProfileAttr(&quot;CallGIBNavigate&quot;,&quot;N&quot;);
		 TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);
		 payload = Inputs.GetChild(0);
		 completeGIBResponse = Inputs.GetChild(1).GetChild(0); //populate CX_GIB_RESPONSE
		 strOrderID 	= payload.GetProperty(&quot;Order Id&quot;);
		 accountId 		= payload.GetProperty(&quot;Account Id&quot;);
		 profileMode	= payload.GetProperty(&quot;Profile Mode&quot;);
		 strTitle 		= payload.GetProperty(&quot;DOD Title&quot;);
		 strName  		= payload.GetProperty(&quot;GIB Actual Name&quot;);
		 companyStatus 	= payload.GetProperty(&quot;Company Status&quot;);
		 strTaxId 		= payload.GetProperty(&quot;Tax Number&quot;);
		 
		 /*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;accountId&quot;,accountId); //Id Validation
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
	  	var bsGIBLogging : Service = TheApplication().GetService(&quot;VF Logging BS&quot;);
		var psBSInput : PropertySet = TheApplication().NewPropertySet();
		var psBSOutput : PropertySet = TheApplication().NewPropertySet();
		 
		 /*code to enable order submission*/
		 if(strOrderID!=&quot;&quot;)
		 {
		    bcOrder.ClearToQuery();
		    bcOrder.SetViewMode(AllView);
		    bcOrder.ActivateField(&quot;VF GIB Call&quot;);
		    bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderID);
		    bcOrder.ExecuteQuery(ForwardOnly);
		    if (bcOrder.FirstRecord()) 
		    {
                bcOrder.SetFieldValue(&quot;VF GIB Call&quot;,&quot;Y&quot;)
                bcOrder.WriteRecord();
		    }
		 }
		 /*ENDcode to enable order submission*/
		 
		 /*calling GIB Fuzzy Workflow*/
		 wfmInputs.SetProperty(&quot;ProcessName&quot;,&quot;VF Fuzzy WF&quot;);
		 wfmInputs.SetProperty(&quot;CustSiebeName&quot;,strName);
		 wfmInputs.SetProperty(&quot;GIBName&quot;,strTitle);
		 Clib.strftime(timestamp, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
		 wfmInputs.SetProperty(&quot;Timestamp&quot;,timestamp);
		 wfmInputs.SetProperty(&quot;TransactionId&quot;,getSequence());
		 bsWPRManager.InvokeMethod(&quot;RunProcess&quot;, wfmInputs, wfmOutputs);
		 strStatCode = wfmOutputs.GetProperty(&quot;StatusCode&quot;);
		 strFuzzyResult1 = wfmOutputs.GetProperty(&quot;Result&quot;);
		 /*end GIB fuzzy Workflow*/
		 strFuzzyResult = (strFuzzyResult1*100);                                                                    
		 if((strStatCode==&quot;0&quot;)&amp;&amp;(strFuzzyResult&gt;strFuzzyThreshold))
		 {
	     	fuzzyResult= &quot;OK&quot;;
		 }
		 bcAccount.ClearToQuery();
		 bcAccount.SetViewMode(AllView);
		 bcAccount.ActivateField(&quot;VF GIB Ver Reason&quot;);
		 bcAccount.ActivateField(&quot;VF GIB Tax Id&quot;);
		 bcAccount.ActivateField(&quot;Name&quot;);
		 bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);	 
		 bcAccount.ExecuteQuery(ForwardOnly);
		 if (bcAccount.FirstRecord())
		 {  
		 	baAccountStatus = bcAccount.GetFieldValue(&quot;Account Status Code&quot;); 
		 			
			if (fuzzyResult==&quot;OK&quot;)
			{
				bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerified&quot;));
				bcAccount.SetFieldValue(&quot;VF GIB Account Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,companyStatus));
				bcAccount.SetFieldValue(&quot;VF GIB Last Ver Date&quot;,timestamp);
				bcAccount.SetFieldValue(&quot;VF GIB Ver Reason&quot;,&quot;&quot;);
				bcAccount.SetFieldValue(&quot;VF GIB Tax Id&quot;,strTaxId);
				bcAccount.SetFieldValue(&quot;Name&quot;,strTitle);
			}
			else
			{
				bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;));
				bcAccount.SetFieldValue(&quot;VF GIB Account Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,companyStatus));
				bcAccount.SetFieldValue(&quot;VF GIB Tax Id&quot;,strTaxId);
			}
			//activation check
			
			bcAccount.WriteRecord();
			
			TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
			bcAccount.InvokeMethod(&quot;CheckActivateCustomer&quot;);
			baAccountStatusNew = bcAccount.GetFieldValue(&quot;Account Status Code&quot;);
			//duplicity
			/*TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
			if ((baAccountStatusNew == isActive)|| (baAccountStatusNew == isAcquired))
			{	
				bcAccount.InvokeMethod(&quot;CheckDuplicity&quot;);
			}*/
			if((TheApplication().GetProfileAttr(&quot;CustomerDuplicated&quot;))!=&quot;Y&quot;)
			{
				bcAccount.WriteRecord();
				TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);   
			}	
				else
				{
					TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
					Outputs.SetProperty(&quot;Duplicated&quot;,&quot;Y&quot;);
				}
			
		}	
	
		 if (enable_logging == &quot;Y&quot;)
		  	
		  	{

			fuzzyResult = (fuzzyResult == &quot;OK&quot;) ? logValueFuzzyOK : logValueFuzzyKO;
			psBSInput.SetProperty(&quot;Logging Id&quot;,fuzzyResult);
			psBSInput.SetProperty(&quot;Customer Code&quot;,accountId);
			psBSInput.SetProperty(&quot;Profile Mode&quot;,profileMode);
			psBSInput.SetProperty(&quot;Order Id&quot;,strOrderID);
			bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
			var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
	        }
	        
	      
		TheApplication().SetProfileAttr(&quot;UserResponse&quot;,&quot;Accepted&quot;);
		}
		finally
		{
		bsGIBLogging = null;
		bsWPRManager = null;
		bcAccount = null;
		bcOrder = null;
		boAccount = null;
		payload = null;
		BS	= null;
		outProp	= null;
		inProp	= null;
		payload = null;
		wfmOutputs = null;
		wfmInputs = null;
		psBSOutput = null;
		psBSInput = null;
		completeGIBResponse = null;
		}
}"
			   SEQUENCE="4"
			   UPDATED="07/21/2013 15:12:11"
			   UPDATED_BY="SADMIN"
			   CREATED="05/18/2011 18:02:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RefreshPRMTask"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RefreshPRMTask()
{
	try{
		
		if(TheApplication().GetProfileAttr(&quot;ApplicationName&quot;) != &quot;Siebel eChannel&quot;){
			return(CancelOperation);
		}
		
		var bo:BusObject = TheApplication().ActiveBusObject();
		var bc:BusComp = null;
		if(bo.Name() == &quot;Order Entry (Sales)&quot;){
			bc = bo.GetBusComp(&quot;Account&quot;);
			var curRowId = &quot;&quot;;
			with(bc){
				curRowId = GetFieldValue(&quot;Id&quot;);
				ClearToQuery();
				ActivateField(&quot;VF BG Contact Control&quot;);
				SetSearchSpec(&quot;Id&quot;,curRowId);
				ExecuteQuery();
				if(FirstRecord()){
					
					SetFieldValue(&quot;VF Mernis Internal Flag&quot;,&quot;Y&quot;);
		
					 try{
					 	var mernisCheck = GetFieldValue(&quot;VF Mernis Internal Flag&quot;);
					 	var p = GetFieldValue(&quot;VF Contact Validation Calc&quot;);
						TheApplication().SetProfileAttr(&quot;MernisCheck&quot;,mernisCheck);
						TheApplication().SetProfileAttr(&quot;CheckValidations&quot;, &quot;YES&quot;);
						
					//	InvokeMethod(&quot;WriteRecord&quot;);
						bc.CheckActivateCustomer();
						ExecuteQuery(ForwardBackward);
						FirstRecord();
					 }catch(e){
					 	TheApplication().RaiseErrorText(e.errText);
					 }					
				}
			}
		}
	
	}finally{
		bc = null;
		bo = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="05/15/2013 17:39:01"
			   UPDATED_BY="SADMIN"
			   CREATED="05/13/2013 16:25:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Rejected_Fraud"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Rejected_Fraud(Inputs, Outputs)
{
	try
	{
	 var boAccount			: BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
	 var bcAccount			: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
	 var enable_logging 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
	 var accountId;
	 var profileMode;
	 var DCAScenario;
	 var loggingId;
	 var strOrderID;
	 var rollback;
	 var compstatus;
	 var payload			: PropertySet =  TheApplication().NewPropertySet();
	 var strCompanyStatusActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;Y&quot;);
	 var strCompanyStatusPassive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;N&quot;);
	 var strGIBCompStatus;
	 payload 				= Inputs.GetChild(0);
	 strOrderID 			= payload.GetProperty(&quot;Order Id&quot;);
	 accountId 				= payload.GetProperty(&quot;Account Id&quot;);
	 profileMode			= payload.GetProperty(&quot;Profile Mode&quot;);
	 compstatus				= payload.GetProperty(&quot;Company Status&quot;);
	 DCAScenario		    = payload.GetProperty(&quot;DCA Scenario&quot;);
	 
   	 var bsGIBLogging : Service = TheApplication().GetService(&quot;VF Logging BS&quot;);
	 var psBSInput : PropertySet = TheApplication().NewPropertySet();
 	 var psBSOutput : PropertySet = TheApplication().NewPropertySet();
	 
     rollback = TheApplication().GetProfileAttr(&quot;CallGIB&quot;);
     
	     bcAccount.ClearToQuery();
	     bcAccount.SetViewMode(AllView);
	     bcAccount.ActivateField(&quot;VF Old Name&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Office&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax City&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Number&quot;);
	     bcAccount.ActivateField(&quot;VF GIB Ver Reason&quot;);
	     //Begin - Scripting 15 - Input validation 
	     var inProp 	:PropertySet = TheApplication().NewPropertySet();
		 var outProp	: PropertySet = TheApplication().NewPropertySet();
		 var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		 inProp.SetProperty(&quot;accountId&quot;,accountId);
		 BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		 //End - Scripting 15
	     bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);
	     bcAccount.ExecuteQuery(ForwardOnly);
	     if (bcAccount.FirstRecord())
	     { 
	     	strGIBCompStatus = bcAccount.GetFieldValue(&quot;VF GIB Account Status&quot;);
			if (rollback == &quot;Y&quot;)
			{	
				bcAccount.SetFieldValue(&quot;Name&quot;,bcAccount.GetFieldValue(&quot;VF Old Comp Name&quot;));
				bcAccount.SetFieldValue(&quot;VF Tax City&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax City&quot;));
				bcAccount.SetFieldValue(&quot;VF Tax Office&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Office&quot;));
				bcAccount.SetFieldValue(&quot;VF Tax Number&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Number&quot;));
			}	
				bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;));
				bcAccount.SetFieldValue(&quot;VF GIB Ver Reason&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_REASON&quot;,&quot;Fraud&quot;));
				bcAccount.WriteRecord();
				TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);
				TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);
	 	 } 
	 	if(DCAScenario == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_SCENARIO&quot;,&quot;DCAGIBDataMis&quot;))
		 {
		 	loggingId = compstatus == &quot;Y&quot; ? &quot;L32&quot; : &quot;L36&quot;; 
		 }
		 else if(DCAScenario == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_SCENARIO&quot;,&quot;DCAGIBTypeMis&quot;))
		 {
		 	//loggingId = &quot;L28&quot;;
		 	if(strGIBCompStatus==strCompanyStatusActive){
				loggingId = &quot;L28&quot;;
			}else if (strGIBCompStatus==strCompanyStatusPassive){
				loggingId = &quot;L66&quot;;
			}else{
				loggingId = &quot;L67&quot;;
			}
		 }
		 
		 if (enable_logging == &quot;Y&quot;)		  	
		  	{
			psBSInput.SetProperty(&quot;Logging Id&quot;,loggingId);
			psBSInput.SetProperty(&quot;Customer Code&quot;,accountId);
			psBSInput.SetProperty(&quot;Profile Mode&quot;,profileMode);
			psBSInput.SetProperty(&quot;Order Id&quot;,strOrderID);
			bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
			var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
	        }  
      
	TheApplication().SetProfileAttr(&quot;UserResponse&quot;,&quot;Rejected&quot;);
	}
	finally
	{
		bsGIBLogging = null;
		bcAccount = null;
		boAccount = null;
		payload = null;
		BS	= null;
		outProp	= null;
		inProp	= null;
		psBSOutput = null;
		psBSInput = null;
	} 
}"
			   SEQUENCE="7"
			   UPDATED="05/13/2013 16:25:34"
			   UPDATED_BY="SADMIN"
			   CREATED="05/27/2011 17:15:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Rejected_GibError"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Rejected_GibError(Inputs, Outputs)
{
	try
	{
	TheApplication().SetProfileAttr(&quot;UserResponse&quot;,&quot;Rejected&quot;);
		var boAccount			: BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
		var bcAccount			: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
	  	var enable_logging 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
	 	var accountId;
		var profileMode;
		var strOrderID;
		var rollback;
		var payload				: PropertySet =  TheApplication().NewPropertySet();
		payload = Inputs.GetChild(0);
		strOrderID 	= payload.GetProperty(&quot;Order Id&quot;);
		accountId 	= payload.GetProperty(&quot;Account Id&quot;);
		profileMode	= payload.GetProperty(&quot;Profile Mode&quot;);
	 	var bsGIBLogging : Service = TheApplication().GetService(&quot;VF Logging BS&quot;);
		var psBSInput : PropertySet = TheApplication().NewPropertySet();
		var psBSOutput : PropertySet = TheApplication().NewPropertySet();
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	 if (enable_logging == &quot;Y&quot;)	  	
	  	{
		psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L03&quot;);
		psBSInput.SetProperty(&quot;Customer Code&quot;,Inputs.GetProperty(&quot;Account Id&quot;));
		psBSInput.SetProperty(&quot;Profile Mode&quot;,Inputs.GetProperty(&quot;Profile Mode&quot;));
		psBSInput.SetProperty(&quot;Order Id&quot;,Inputs.GetProperty(&quot;Order Id&quot;));
		bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
		var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
        }
     
     rollback = TheApplication().GetProfileAttr(&quot;CallGIB&quot;);
     if (rollback == &quot;Y&quot;)
     {   
	     bcAccount.ClearToQuery();
	     bcAccount.SetViewMode(AllView);
	     bcAccount.ActivateField(&quot;VF Old Name&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Office&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax City&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Number&quot;);
	     //Begin - Scripting 15 - Input validation 
	     
		 inProp.SetProperty(&quot;accountId&quot;,accountId);
		 BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		 //End - Scripting 15
	     bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);
	     bcAccount.ExecuteQuery(ForwardOnly);
	     if (bcAccount.FirstRecord())
	     { 
			bcAccount.SetFieldValue(&quot;Name&quot;,bcAccount.GetFieldValue(&quot;VF Old Comp Name&quot;));
			bcAccount.SetFieldValue(&quot;VF Tax City&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax City&quot;));
			bcAccount.SetFieldValue(&quot;VF Tax Office&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Office&quot;));
			bcAccount.SetFieldValue(&quot;VF Tax Number&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Number&quot;));
			bcAccount.WriteRecord();
			TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);
			TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);
	 	 }   
      }       
	}
	finally
	{
		bsGIBLogging = null;
		bcAccount = null;
		boAccount = null;
		payload = null;
		BS		= null;
		outProp		= null;
		inProp		= null;
		psBSOutput	= null;
		psBSInput	= null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="05/13/2013 16:25:34"
			   UPDATED_BY="SADMIN"
			   CREATED="05/18/2011 17:02:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Rejected_GibOk"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function 	Rejected_GibOk(Inputs, Outputs)
{
	try
	{	
	 var boAccount			: BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
	 var bcAccount			: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
	 var enable_logging 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
	 var accountId;
	 var profileMode;
	 var strOrderID;
	 var rollback;
	 var payload			: PropertySet =  TheApplication().NewPropertySet();
	 payload 				= Inputs.GetChild(0);
	 strOrderID 			= payload.GetProperty(&quot;Order Id&quot;);
	 accountId 				= payload.GetProperty(&quot;Account Id&quot;);
	 profileMode			= payload.GetProperty(&quot;Profile Mode&quot;);
	 var companyStatus			= payload.GetProperty(&quot;Company Status&quot;);
	 var loggingId = (companyStatus == &quot;Y&quot; ? &quot;L16&quot; : &quot;L13&quot;); 
	 var bsGIBLogging : Service = TheApplication().GetService(&quot;VF Logging BS&quot;);
	 var psBSInput : PropertySet = TheApplication().NewPropertySet();
	 var psBSOutput : PropertySet = TheApplication().NewPropertySet();
	 var inProp 	: PropertySet = TheApplication().NewPropertySet();
	 var outProp	: PropertySet = TheApplication().NewPropertySet();
	 var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	 if (enable_logging == &quot;Y&quot;) 	
	 {
		psBSInput.SetProperty(&quot;Logging Id&quot;,loggingId);
		psBSInput.SetProperty(&quot;Customer Code&quot;,accountId);
		psBSInput.SetProperty(&quot;Profile Mode&quot;,profileMode);
		psBSInput.SetProperty(&quot;Order Id&quot;,strOrderID);
		bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
		var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
     }
     rollback = TheApplication().GetProfileAttr(&quot;CallGIB&quot;);
     if (rollback == &quot;Y&quot;)
     {   
	     bcAccount.ClearToQuery();
	     bcAccount.SetViewMode(AllView);
	     bcAccount.ActivateField(&quot;VF Old Name&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Office&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax City&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Number&quot;);
	     //Begin - Scripting 15 - Input validation 
	     
		 inProp.SetProperty(&quot;accountId&quot;,accountId);
		 BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		 //End - Scripting 15
	     bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);
	     bcAccount.ExecuteQuery(ForwardOnly);
	     if (bcAccount.FirstRecord())
	     { 
		
			bcAccount.SetFieldValue(&quot;Name&quot;,bcAccount.GetFieldValue(&quot;VF Old Comp Name&quot;));
			bcAccount.SetFieldValue(&quot;VF Tax City&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax City&quot;));
			bcAccount.SetFieldValue(&quot;VF Tax Office&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Office&quot;));
			bcAccount.SetFieldValue(&quot;VF Tax Number&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Number&quot;));
			bcAccount.WriteRecord();
			TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);
			TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);
	 	 }   
      }
	TheApplication().SetProfileAttr(&quot;UserResponse&quot;,&quot;Rejected&quot;);
	}
	finally
	{
		bsGIBLogging = null;
		bcAccount = null;
		boAccount = null;
		payload = null;
		BS		= null;
		outProp		= null;
		inProp		= null;
		psBSOutput	= null;
		psBSInput	= null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="05/13/2013 16:25:34"
			   UPDATED_BY="SADMIN"
			   CREATED="05/18/2011 18:00:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Rejected_MissingDoc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Rejected_MissingDoc(Inputs, Outputs)
{
	try
	{
	 var boAccount			: BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
	 var bcAccount			: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
	 var enable_logging 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
	 var strCompanyStatusActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;Y&quot;);
	 var strCompanyStatusPassive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;N&quot;);
	 var strGIBCompStatus;
	 var accountId;
	 var profileMode;
	 var DCAScenario;
	 var loggingId;
	 var compstatus;
	 var strOrderID;
	 var rollback;
	 var payload			=  TheApplication().NewPropertySet();
	 
	 payload 				= Inputs.GetChild(0);
	 strOrderID 			= payload.GetProperty(&quot;Order Id&quot;);
	 accountId 				= payload.GetProperty(&quot;Account Id&quot;);
	 profileMode			= payload.GetProperty(&quot;Profile Mode&quot;);
	 compstatus				= payload.GetProperty(&quot;Company Status&quot;);
	 DCAScenario		    = payload.GetProperty(&quot;DCA Scenario&quot;);
	 
     rollback = TheApplication().GetProfileAttr(&quot;CallGIB&quot;);
     
	     bcAccount.ClearToQuery();
	     bcAccount.SetViewMode(AllView);
	     bcAccount.ActivateField(&quot;VF Old Name&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Office&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax City&quot;);
	     bcAccount.ActivateField(&quot;VF Old Tax Number&quot;);
	     bcAccount.ActivateField(&quot;VF GIB Ver Reason&quot;);
	     //Begin - Scripting 15 - Input validation 
	    var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var bsGIBLogging = TheApplication().GetService(&quot;VF Logging BS&quot;);
		var psBSInput = TheApplication().NewPropertySet();
		var psBSOutput = TheApplication().NewPropertySet();
		 
		 inProp.SetProperty(&quot;accountId&quot;,accountId);
		 BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		 //End - Scripting 15
	     bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);
	     bcAccount.ExecuteQuery(ForwardOnly);
	     if (bcAccount.FirstRecord())
	     { 
		  	if (rollback == &quot;Y&quot;)
     		{   
     			
				bcAccount.SetFieldValue(&quot;Name&quot;,bcAccount.GetFieldValue(&quot;VF Old Comp Name&quot;));
				bcAccount.SetFieldValue(&quot;VF Tax City&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax City&quot;));
				bcAccount.SetFieldValue(&quot;VF Tax Office&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Office&quot;));
				bcAccount.SetFieldValue(&quot;VF Tax Number&quot;,bcAccount.GetFieldValue(&quot;VF Old Tax Number&quot;));
			}
				bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;));
			bcAccount.SetFieldValue(&quot;VF GIB Ver Reason&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_REASON&quot;,&quot;Missing Document&quot;));
			strGIBCompStatus = bcAccount.GetFieldValue(&quot;VF GIB Account Status&quot;);
			bcAccount.WriteRecord();
			TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);
			TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);
	 	 }
	 	if(DCAScenario == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_SCENARIO&quot;,&quot;DCAGIBDataMis&quot;))
	 	{
	 		loggingId = compstatus == &quot;Y&quot; ? &quot;L33&quot; : &quot;L37&quot;; 
		}
	 	else if(DCAScenario == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_SCENARIO&quot;,&quot;DCAGIBTypeMis&quot;))
		 {
		 	if(strGIBCompStatus==strCompanyStatusActive){
				loggingId = &quot;L29&quot;;
			}else if (strGIBCompStatus==strCompanyStatusPassive){
				loggingId = &quot;L68&quot;;
			}else{
				loggingId = &quot;L69&quot;;
			}
		 }	 
	 	if (enable_logging == &quot;Y&quot;)
	  	{
			psBSInput.SetProperty(&quot;Logging Id&quot;,loggingId);
			psBSInput.SetProperty(&quot;Customer Code&quot;,accountId);
			psBSInput.SetProperty(&quot;Profile Mode&quot;,profileMode);
			psBSInput.SetProperty(&quot;Order Id&quot;,strOrderID);
			bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
			var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);
        }   
      
	TheApplication().SetProfileAttr(&quot;UserResponse&quot;,&quot;Rejected&quot;);
	}
	finally
	{
	bsGIBLogging = null;
	bcAccount = null;
	boAccount = null;
	payload = null;
	BS		= null;
	outProp		= null;
	inProp		= null;
	psBSOutput	= null;
	psBSInput	= null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="05/13/2013 16:25:34"
			   UPDATED_BY="SADMIN"
			   CREATED="05/27/2011 17:14:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{	
	if (MethodName == &quot;Accepted_GibError&quot;)
		{
			Accepted_GibError(Inputs, Outputs);
			RefreshPRMTask();
			return (CancelOperation);	
		}
	if (MethodName == &quot;Rejected_GibError&quot;)
		{
			Rejected_GibError(Inputs, Outputs);
			return (CancelOperation);	
		}
	if (MethodName == &quot;ConfirmCustomerData_GibOK&quot;)
		{
			ConfirmCustomerData_GibOK(Inputs, Outputs);	
			RefreshPRMTask();
			return (CancelOperation);	
		}
		
	if (MethodName == &quot;Accepted_GibOk&quot;)
		{
			Accepted_GibOk(Inputs, Outputs);
			RefreshPRMTask();
			return (CancelOperation);	
		}
	if (MethodName == &quot;Rejected_GibOk&quot;)
		{
			Rejected_GibOk(Inputs, Outputs);
			return (CancelOperation);		
		}
	if (MethodName == &quot;Rejected_MissingDoc&quot;)
		{
			Rejected_MissingDoc(Inputs, Outputs);
			return (CancelOperation);		
		}
	if (MethodName == &quot;Rejected_Fraud&quot;)
	{
		Rejected_Fraud(Inputs, Outputs);
		return (CancelOperation);		
	}
	if (MethodName == &quot;Update_GibVerStatus&quot;)
	{
		Update_GibVerStatus(Inputs, Outputs);
		RefreshPRMTask();
		return (CancelOperation);		
	}		
	if (MethodName == &quot;Approved_Gib&quot;)
	{
		Approved_Gib(Inputs, Outputs);
		RefreshPRMTask();
		return (CancelOperation);		
	}	
	return (ContinueOperation);
}"
			   SEQUENCE="12"
			   UPDATED="05/15/2013 17:39:01"
			   UPDATED_BY="SADMIN"
			   CREATED="05/13/2011 16:47:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Update_GibVerStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function  Update_GibVerStatus(Inputs, Outputs)
{
	try
	{
	
	var psInputs  		: PropertySet = TheApplication().NewPropertySet();
	var psOutputs 		: PropertySet = TheApplication().NewPropertySet();
	var boAccount		: BusObject  = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
	var bcAccount		: BusComp = boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
	var bcOrder			: BusComp = boAccount.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
	var strOrderID;
	var regNumber;
	var timestamp;
	var accountId;
	var baAccountStatus;
	var baAccountStatusNew;
	var gibStatus;
	var companyStatus;
	TheApplication().SetProfileAttr(&quot;CallGIBNavigate&quot;,&quot;N&quot;);
	TheApplication().SetProfileAttr(&quot;CallGIB&quot;,&quot;N&quot;);
	Clib.strftime(timestamp, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
 	
	/*code to enable order submission*/
	strOrderID 		= Inputs.GetProperty(&quot;Order Id&quot;);
	regNumber 		= Inputs.GetProperty(&quot;VF GIB Reg Number&quot;);
	accountId 		= Inputs.GetProperty(&quot;Account Id&quot;);
	gibStatus 		= Inputs.GetProperty(&quot;GIB Verification Status&quot;);
	companyStatus 	= Inputs.GetProperty(&quot;Company Status&quot;);
	if(strOrderID!=&quot;&quot;)
    {
	    bcOrder.ClearToQuery();
	    bcOrder.SetViewMode(AllView);
	    bcOrder.ActivateField(&quot;VF GIB Call&quot;);
	    bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderID);
	    bcOrder.ExecuteQuery(ForwardOnly);
	    if (bcOrder.FirstRecord()) 
	    {
	                bcOrder.SetFieldValue(&quot;VF GIB Call&quot;,&quot;Y&quot;)
	                bcOrder.WriteRecord();
	    }
    }
    /*END - code to enable order submission*/

	/*** Begin ***/ 
	var inProp: PropertySet = TheApplication().NewPropertySet();
	var outProp: PropertySet = TheApplication().NewPropertySet();
	var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;accountId&quot;,accountId); //Id Validation
	inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
	/*** End ***/ 

	 	bcAccount.ClearToQuery();
	 	bcAccount.SetViewMode(AllView);
		bcAccount.SetSearchSpec(&quot;Id&quot;,accountId);
		bcAccount.ActivateField(&quot;VF GIB Ver Reason&quot;);
		bcAccount.ExecuteQuery(ForwardOnly);
		if (bcAccount.FirstRecord()) 
		{ 
			bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,gibStatus));
			bcAccount.SetFieldValue(&quot;VF GIB Last Ver Date&quot;,timestamp);
			bcAccount.SetFieldValue(&quot;VF GIB Reg Number&quot;,regNumber);
			bcAccount.SetFieldValue(&quot;VF GIB Account Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,companyStatus));
		    baAccountStatus = bcAccount.GetFieldValue(&quot;Account Status Code&quot;);
		    bcAccount.SetFieldValue(&quot;VF GIB Ver Reason&quot;,&quot;&quot;);
		    bcAccount.WriteRecord();
		    
		    //check activate customer
		    bcAccount.InvokeMethod(&quot;CheckActivateCustomer&quot;);
			baAccountStatusNew = bcAccount.GetFieldValue(&quot;Account Status Code&quot;);
			//duplicity
			/*
			TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
			if (baAccountStatusNew != baAccountStatus)
			{
				bcAccount.InvokeMethod(&quot;CheckDuplicity&quot;);
			}*/
			if((TheApplication().GetProfileAttr(&quot;CustomerDuplicated&quot;))!=&quot;Y&quot;)
			{
				bcAccount.WriteRecord();
				TheApplication().SetProfileAttr(&quot;RefreshRequired&quot;,&quot;Y&quot;);   
			} 
			else
			{
				TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
				Outputs.SetProperty(&quot;Duplicated&quot;,&quot;Y&quot;);
			}
		}	
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Duplicated&quot;,e);
	}
	finally
	{
		bcAccount = null;
		bcOrder = null;
		boAccount = null;
		BS = null;
		outProp = null;
		inProp = null;
		psOutputs = null;
		psInputs = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="07/21/2013 15:12:11"
			   UPDATED_BY="SADMIN"
			   CREATED="05/28/2011 22:55:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getSequence"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getSequence()
{
	try
	{ 
	     var strChannel         = &quot;SIEBEL&quot;; 
	     var strTimeStamp       = &quot;&quot;; 
	     var strSequenceNumberMNP =&quot;&quot;;                                           
	     var VFSequenceBo                          : BusObject = TheApplication().GetBusObject(&quot;VF Sequence BO&quot;);
	     var VFSequenceBc                          : BusComp = VFSequenceBo.GetBusComp(&quot;VF Sequence BusComp&quot;);
	     var strProcessName                       = &quot;VF_UNBILL&quot;;                
	
	     VFSequenceBc.NewRecord(NewAfter);
	     VFSequenceBc.SetFieldValue(&quot;Process Name&quot;,strProcessName);
	     VFSequenceBc.WriteRecord();
	     var strSearchSpec = VFSequenceBc.GetFieldValue(&quot;Id&quot;);
	     
	     VFSequenceBc.ClearToQuery();
	     VFSequenceBc.SetSearchSpec(&quot;Id&quot;, strSearchSpec);//VFTK Venkata 10052012 : No changes for OracleScript 15 review 
	     VFSequenceBc.ExecuteQuery(ForwardOnly);
	     
	     var booRecordExists = VFSequenceBc.FirstRecord ();  
	     
	     if (booRecordExists)
	     {
	            strSequenceNumberMNP = &quot;SBL&quot;+VFSequenceBc.GetFieldValue(&quot;Sequence&quot;);
	     }
	}
	finally
	{
		VFSequenceBc = null;
		VFSequenceBo = null;
	} 
	return(strSequenceNumberMNP);
}"
			   SEQUENCE="5"
			   UPDATED="11/21/2012 09:38:40"
			   UPDATED_BY="SADMIN"
			   CREATED="05/26/2011 16:01:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



