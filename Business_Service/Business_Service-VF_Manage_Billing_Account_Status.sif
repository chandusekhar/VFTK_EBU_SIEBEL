<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="11/24/2016 17:14:00"
   UPDATED_BY="SADMIN"
   CREATED="11/24/2016 14:49:11"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="- PLW Account"
	   UI_FREEZE="N"
	   UPDATED="04/18/2017 10:57:56"
	   UPDATED_BY="JMARQUES"
	   CREATED="01/31/2009 12:28:34"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="Y"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Manage Billing Account Status"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="04/18/2017 10:10:43"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="JMARQUES"
		   UPDATED="04/18/2017 10:57:55"
		   UPDATED_BY="JMARQUES"
		   CREATED="02/19/2013 14:39:18"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalucateSubtypeAndReason"
			   UPDATED="02/19/2013 14:39:18"
			   UPDATED_BY="SADMIN"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Reason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Sub Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="UseCase"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CalucateSubtypeAndReason"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckBAStatus"
			   UPDATED="09/02/2013 14:55:43"
			   UPDATED_BY="SADMIN"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Header Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Root Item Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/02/2013 14:55:43"
				   UPDATED_BY="SADMIN"
				   CREATED="09/02/2013 14:55:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckBAStatus"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckBAStatusTWC"
			   UPDATED="05/11/2016 21:47:08"
			   UPDATED_BY="SADMIN"
			   CREATED="05/11/2016 21:47:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Header Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/11/2016 21:47:08"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2016 21:47:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Root Item Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/11/2016 21:47:08"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2016 21:47:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckBAStatusTWC"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/11/2016 21:47:08"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2016 21:47:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckSVBResume"
			   UPDATED="02/19/2013 14:39:18"
			   UPDATED_BY="SADMIN"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckSVBResume"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/19/2013 14:39:18"
				   UPDATED_BY="SADMIN"
				   CREATED="02/19/2013 14:39:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalucateSubtypeAndReason"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalucateSubtypeAndReason(Inputs,Outputs)
{
	try
	{
		var strBAId = Inputs.GetProperty(&quot;Object Id&quot;);
		var strAccountId = Inputs.GetProperty(&quot;Account Id&quot;);
		var strUseCase = Inputs.GetProperty(&quot;UseCase&quot;);

		var BillingAccountBO : BusObject = TheApplication().GetBusObject(&quot;Billing Account&quot;);
		var BillingAccountBC : BusComp = BillingAccountBO.GetBusComp(&quot;Billing Account&quot;);
		var AssetBC : BusComp = BillingAccountBO.GetBusComp(&quot;Asset Mgmt - Asset - Header - Root&quot;);
		var ParametersBO : BusObject 	= TheApplication().GetBusObject (&quot;ACS NI Parameter&quot;);
		var ParameterBC : BusComp 		= ParametersBO.GetBusComp (&quot;ACS NI Parameter&quot;);

		var strCancelled = &quot;Cancelled&quot;;
		var strFrozen = &quot;Frozen&quot;;

		var bolNextRecord = false;
		var strFinalStatus = &quot;&quot;;
		var strCustomerStatus = &quot;&quot;;
		var strCustomerStatusLic = &quot;&quot;;
		var strDunningStatus = &quot;&quot;;
		var strDunningStatusLic = &quot;&quot;;
		var strDocumentStatus = &quot;&quot;;
		var strDocumentStatusLic = &quot;&quot;;
		var strReasonCX = &quot;&quot;;
		var srtOrderSubType = &quot;&quot;;
		
		if(strUseCase == &quot;NotAllInactive&quot;)
		{
			with(BillingAccountBC)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec (&quot;Id&quot;, strBAId);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
				{
					with(AssetBC)
					{
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;VF Final Status&quot;);
						ActivateField(&quot;VF Customer Status&quot;);
						ActivateField(&quot;VF Dunning Status&quot;);
						ActivateField(&quot;VF Document Missing Status&quot;);
						SetSearchSpec(&quot;VF Product Group&quot;, &quot;SRV&quot;);
						SetSearchSpec(&quot;VF Product Type&quot;, &quot;MAIN&quot;);
						SetSearchSpec(&quot;VF Product Sub Type&quot;, &quot;MOBILE&quot;);
						SetSearchSpec(&quot;Type&quot;, &quot;Group&quot;);
						ExecuteQuery(ForwardOnly);
						bolNextRecord = FirstRecord();
						while(bolNextRecord)
						{
							strFinalStatus = GetFieldValue(&quot;VF Final Status&quot;);
							
							strCustomerStatus = GetFieldValue(&quot;VF Customer Status&quot;);
							strDunningStatus = GetFieldValue(&quot;VF Dunning Status&quot;);
							strDocumentStatus = GetFieldValue(&quot;VF Document Missing Status&quot;);
							if(strFinalStatus == strCancelled)
								break;
							bolNextRecord = NextRecord();
						}
						
						if(strFinalStatus == strCancelled)
						{
							if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strCustomerStatus) == strCancelled)
								strReasonCX = strCustomerStatus;
							else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strDunningStatus) == strCancelled)
								strReasonCX = strDunningStatus;
							else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strDocumentStatus) == strCancelled)
								strReasonCX = strDocumentStatus;
						}
						else
						{
							if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strCustomerStatus) == strFrozen)
								strReasonCX = strCustomerStatus;
							else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strDunningStatus) == strFrozen)
								strReasonCX = strDunningStatus;
							else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strDocumentStatus) == strFrozen)
								strReasonCX = strDocumentStatus;
						}
					}
				}
			}
			if(strReasonCX != &quot;&quot;)
			{
				with(ParameterBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Condition2&quot;);
					SetSearchSpec (&quot;Condition1&quot;, strReasonCX);
					SetSearchSpec (&quot;Function&quot;, &quot;VF Reason&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())	
						srtOrderSubType = GetFieldValue(&quot;Condition2&quot;);
				}
			}
		}
	}
	finally
	{
		Outputs.SetProperty(&quot;Order Sub Type&quot;, srtOrderSubType);
		Outputs.SetProperty(&quot;Order Reason&quot;, strReasonCX);
		BillingAccountBC = null;
		AssetBC = null;
		ParametersBO = null;
		ParameterBC = null;
		BillingAccountBO = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="02/19/2013 14:39:18"
			   UPDATED_BY="SADMIN"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBAStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBAStatus (Inputs,Outputs)
{
	try
	{
		var RootItemId = Inputs.GetProperty(&quot;Root Item Id&quot;);
		
		//++Oracle Recommendations - RPIRES
		if(RootItemId == &quot;&quot; || RootItemId == null) 
			return;
		//--Oracle Recommendations - RPIRES
		
		var OrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var OrderItemBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		
		var strCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;, &quot;90&quot;);
		var strActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;, &quot;100&quot;);
		var strNoInvoice = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;, &quot;130&quot;);
		var strAssetActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var strInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Inactive&quot;);
		var strSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Suspended&quot;);

		var strBAStatus = &quot;&quot;;
		var strAccountId = &quot;&quot;;
		var strNewBAStatus = &quot;&quot;;
		var strBAId = &quot;&quot;;
		var strOrderTypeLic = &quot;&quot;;
		var strAssetIntegId = &quot;&quot;;
		var strFinalStatus = &quot;&quot;;
		var OrderSubType = &quot;&quot;;
		var strOrderReason = &quot;&quot;;
		var strOrderReasonLic = &quot;&quot;;
		var strOrderSubTypeLic = &quot;&quot;;
		var strRootAssetStatus = &quot;&quot;;
		var VFProductGroup = &quot;&quot;;
		var VFProductType = &quot;&quot;;
		var VFProductSubType = &quot;&quot;;
		var strPartNum = &quot;&quot;;
		var strBALevelProduct = &quot;&quot;;
		var ProductType = &quot;&quot;;		
		var bolIsRecord = false;
		var isConcurrent = &quot;N&quot;;
		var AssetBC : BusComp;

		with(OrderItemBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Billing Account Status&quot;);
			//ActivateField(&quot;Order Sub Type&quot;); WA#39 Order Sub Type has been replaced
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Asset Integration Id&quot;);
			ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;VF Product Type&quot;);
			//ActivateField(&quot;VF Order Header Reason&quot;); WA#39 Order Sub Type has been replaced
			ActivateField(&quot;Product Sub Type&quot;);
			ActivateField(&quot;Product Type&quot;);
			ActivateField(&quot;Part Number&quot;);
			//++WA#39
			ActivateField(&quot;TELCO Action Reason&quot;);
			ActivateField(&quot;TELCO Action Type&quot;);
			//++WA#39			
			SetSearchExpr (&quot;[Id] = &apos;&quot;+RootItemId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				strBAId = GetFieldValue(&quot;Billing Account Id&quot;);
				strAccountId = GetFieldValue(&quot;Account Id&quot;);
				strBAStatus = GetFieldValue(&quot;VF Billing Account Status&quot;);
				OrderSubType = GetFieldValue(&quot;TELCO Action Type&quot;); //WA#39 replaced Order Sub Type
				strAssetIntegId = GetFieldValue(&quot;Asset Integration Id&quot;);
				VFProductGroup = GetFieldValue(&quot;VF Product Group&quot;);
				VFProductType = GetFieldValue(&quot;VF Product Type&quot;);
				VFProductSubType = GetFieldValue(&quot;Product Sub Type&quot;);
				ProductType = GetFieldValue(&quot;Product Type&quot;);
				strPartNum = GetFieldValue(&quot;Part Number&quot;);
				if (OrderSubType != &quot;&quot;)
				{
					strOrderSubTypeLic = LookupName(&quot;ORDER_SUB_TYPE&quot;,OrderSubType);
				}
				else
				{
					strOrderReason = GetFieldValue(&quot;TELCO Action Reason&quot;); //WA#39 
					strOrderReasonLic = LookupName(&quot;ACS_ORDER_REASON&quot;,strOrderReason);
				}
				
				//++ WA#39
				if(strBAStatus == strCreated){
					if(strOrderSubTypeLic == &quot;&quot; || strOrderSubTypeLic == &quot;100&quot;)
						strNewBAStatus = strActive;
				}//-- WA#39
				else if(strBAStatus == strNoInvoice)
				{
					if(strOrderSubTypeLic == &quot;&quot; || strOrderSubTypeLic == &quot;106&quot; || strOrderSubTypeLic == &quot;100&quot;)
						strNewBAStatus = strActive;
					else if(strOrderSubTypeLic == &quot;117&quot; || strOrderSubTypeLic == &quot;118&quot; || strOrderSubTypeLic == &quot;119&quot; || strOrderSubTypeLic == &quot;130&quot; || strOrderSubTypeLic == &quot;132&quot;)
					{
						strBALevelProduct =  LookupDesc(strPartNum);
						//if (VFProductGroup == &quot;SRV&quot; &amp;&amp; VFProductType == &quot;MAIN&quot; &amp;&amp; VFProductSubType == &quot;MOBILE&quot; &amp;&amp; ProductType == &quot;Group&quot;)
						if(strBALevelProduct == &quot;Y&quot;)
						{
							if(strAssetIntegId != &quot;&quot; &amp;&amp; strAccountId != &quot;&quot;)
							{
								AssetBC = OrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
								with(AssetBC)
								{
									ClearToQuery();
									SetViewMode(AllView);
									ActivateField(&quot;VF Final Status&quot;);
									ActivateField(&quot;Status&quot;);
									ActivateField(&quot;VF Credit Status&quot;);
									ActivateField(&quot;VF Customer Status&quot;);
									ActivateField(&quot;VF Dunning Status&quot;);
									ActivateField(&quot;VF Fraud Status&quot;);
									ActivateField(&quot;VF Document Missing Status&quot;);
									SetSearchSpec (&quot;Integration Id&quot;, strAssetIntegId);
									ExecuteQuery(ForwardOnly);
									if (FirstRecord())
									{
										strFinalStatus = GetFieldValue(&quot;VF Final Status&quot;); //Reactivated during WA#39
										//strFinalStatus = FinalStatusCalc(AssetBC);
										if(strFinalStatus != &quot;Frozen&quot; &amp;&amp; strFinalStatus != &quot;Cancelled&quot;)
											strNewBAStatus = strActive;
									}
								}
								AssetBC = null;
							}
						}
					}
				}
				else if ((strBAStatus == strActive) &amp;&amp; (strOrderSubTypeLic == &quot;131&quot; || strOrderSubTypeLic == &quot;121&quot; || strOrderSubTypeLic == &quot;122&quot; || strOrderSubTypeLic == &quot;126&quot; || strOrderSubTypeLic == &quot;124&quot; || strOrderSubTypeLic == &quot;125&quot; || strOrderSubTypeLic == &quot;123&quot; || strOrderSubTypeLic == &quot;133&quot; || strOrderSubTypeLic == &quot;114&quot; || strOrderSubTypeLic == &quot;129&quot; || strOrderSubTypeLic == &quot;115&quot; || strOrderSubTypeLic == &quot;116&quot; || strOrderSubTypeLic == &quot;110&quot; || strOrderReasonLic == &quot;1020&quot;))
				{
					if (strAccountId != &quot;&quot; &amp;&amp; VFProductGroup == &quot;SRV&quot; &amp;&amp; VFProductType == &quot;MAIN&quot; &amp;&amp; VFProductSubType == &quot;MOBILE&quot; &amp;&amp; ProductType == &quot;Group&quot;)
					{
						AssetBC  = OrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
						with(AssetBC)
						{
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(&quot;[Id] = [Root Asset Id] AND [Status] = &apos;&quot;+strAssetActive+&quot;&apos; AND [VF Product Group] = &apos;SRV&apos; AND [VF Product Type] = &apos;MAIN&apos; AND [VF Product Sub Type] = &apos;MOBILE&apos; AND [Type] = &apos;Group&apos; AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								strNewBAStatus = &quot;&quot;;
							}
							else
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;VF Final Status&quot;);
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;VF Credit Status&quot;);
								ActivateField(&quot;VF Customer Status&quot;);
								ActivateField(&quot;VF Dunning Status&quot;);
								ActivateField(&quot;VF Fraud Status&quot;);
								ActivateField(&quot;VF Document Missing Status&quot;);
								SetSearchExpr(&quot;([Status] = &apos;&quot;+strSuspended+&quot;&apos; OR [Status] = &apos;&quot;+strInactive+&quot;&apos;) AND [Id] = [Root Asset Id] AND [VF Product Group] = &apos;SRV&apos; AND [VF Product Type] = &apos;MAIN&apos; AND [VF Product Sub Type] = &apos;MOBILE&apos; AND [Type] = &apos;Group&apos; AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);
								bolIsRecord = FirstRecord();
								while(bolIsRecord)
								{
									strRootAssetStatus = GetFieldValue(&quot;Status&quot;);
									if(strRootAssetStatus == &quot;Suspended&quot;)
									{
										strFinalStatus = GetFieldValue(&quot;VF Final Status&quot;); //Reactivated during WA#39
										//strFinalStatus = FinalStatusCalc(AssetBC);
										if(strFinalStatus != &quot;Frozen&quot; &amp;&amp; strFinalStatus != &quot;Cancelled&quot;)
										{
											strNewBAStatus = &quot;&quot;;
											break;
										}
										else
											strNewBAStatus = strNoInvoice;
									}
									else
										strNewBAStatus = strNoInvoice;
									bolIsRecord = NextRecord();
								}
							}
						}
						AssetBC = null;
						
					}
					else if (strAccountId != &quot;&quot;)
					{
					    AssetBC = OrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
						with(AssetBC)
						{
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(&quot;[Id] = [Root Asset Id] AND [Status] = &apos;&quot;+strAssetActive+&quot;&apos; AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								strNewBAStatus = &quot;&quot;;
							}
							else
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;VF Final Status&quot;);
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;VF Credit Status&quot;);
								ActivateField(&quot;VF Customer Status&quot;);
								ActivateField(&quot;VF Dunning Status&quot;);
								ActivateField(&quot;VF Fraud Status&quot;);
								ActivateField(&quot;VF Document Missing Status&quot;);
								SetSearchExpr(&quot;([Status] = &apos;&quot;+strSuspended+&quot;&apos; OR [Status] = &apos;&quot;+strInactive+&quot;&apos;) AND [Parent Asset Id] IS NULL AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;); //DEF-11383
								ExecuteQuery(ForwardOnly);
								bolIsRecord = FirstRecord();
								while(bolIsRecord)
								{
									strRootAssetStatus = GetFieldValue(&quot;Status&quot;);
									if(strRootAssetStatus == &quot;Suspended&quot;)
									{
										strFinalStatus = GetFieldValue(&quot;VF Final Status&quot;); //Reactivated during WA#39
										//strFinalStatus = FinalStatusCalc(AssetBC);
										if(strFinalStatus != &quot;Frozen&quot; &amp;&amp; strFinalStatus != &quot;Cancelled&quot;)
										{
											strNewBAStatus = &quot;&quot;;
											break;
										}
										else
											strNewBAStatus = strNoInvoice;
									}
									else
										strNewBAStatus = strNoInvoice;
									bolIsRecord = NextRecord();
								}
							}
						}	
					AssetBC = null;
					}
				}
				if(strNewBAStatus != &quot;&quot; &amp;&amp; strBAId != &quot;&quot;)
				{
					var AccountBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Account&quot;);
					with(AccountBC)
					{
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchSpec(&quot;Id&quot;, strAccountId);
						ExecuteQuery(ForwardOnly);
						if (FirstRecord())
						{
							var BillBO : BusObject = TheApplication().GetBusObject(&quot;VF Billing Account&quot;);
							var BillingBC : BusComp = BillBO.GetBusComp(&quot;Billing Account&quot;);
							with(BillingBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;Account Status Code&quot;);
								SetSearchSpec (&quot;Id&quot;, strBAId);
								ExecuteQuery(ForwardOnly);
								if (FirstRecord())
								{
									isConcurrent = &quot;Y&quot;;
									SetFieldValue(&quot;Account Status Code&quot;, strNewBAStatus);
									WriteRecord();
								}
							}
							BillingBC = null;
							BillBO	= null;
							
						}
					}
				AccountBC = null;						
				}
			}
		}
	}
	catch(e)
	{
		if (isConcurrent == &quot;Y&quot;) {
		
		}
		else{			
		
			throw(e);
		}
	}
	
	finally
	{	
		
		OrderItemBC = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="04/18/2017 10:57:55"
			   UPDATED_BY="JMARQUES"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBAStatusTWC"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBAStatusTWC (Inputs,Outputs)
{
	try
	{
		var OrderId = Inputs.GetProperty(&quot;Order Header Id&quot;);
		var RootItemId = Inputs.GetProperty(&quot;Root Item Id&quot;);
		var OrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var BillBO : BusObject = TheApplication().GetBusObject(&quot;VF Billing Account&quot;);
		var OrderItemBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var AccountBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Account&quot;);
		var BillingBC : BusComp = BillBO.GetBusComp(&quot;Billing Account&quot;);
		var AssetBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);

		var strCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;, &quot;90&quot;);
		var strActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;, &quot;100&quot;);
		var strNoInvoice = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;, &quot;130&quot;);
		var strAssetActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var strInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Inactive&quot;);
		var strSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Suspended&quot;);

		var strBAStatus = &quot;&quot;;
		var strAccountId = &quot;&quot;;
		var strNewBAStatus = &quot;&quot;;
		var strBAId = &quot;&quot;;
		var strOrderTypeLic = &quot;&quot;;
		var strAssetIntegId = &quot;&quot;;
		var strFinalStatus = &quot;&quot;;
		var OrderSubType = &quot;&quot;;
		var strOrderReason = &quot;&quot;;
		var strOrderReasonLic = &quot;&quot;;
		var strOrderSubTypeLic = &quot;&quot;;
		var strRootAssetStatus = &quot;&quot;;
		var VFProductGroup = &quot;&quot;;
		var VFProductType = &quot;&quot;;
		var VFProductSubType = &quot;&quot;;
		var strPartNum = &quot;&quot;;
		var strBALevelProduct = &quot;&quot;;
		var ProductType = &quot;&quot;;		
		var bolIsRecord = false;
		var itemIsRecord = false;

		with(OrderItemBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Billing Account Status&quot;);
			//ActivateField(&quot;Order Sub Type&quot;); WA#39 Order Sub Type has been replaced
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Asset Integration Id&quot;);
			ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;VF Product Type&quot;);
			//ActivateField(&quot;VF Order Header Reason&quot;); WA#39 Order Sub Type has been replaced
			ActivateField(&quot;Product Sub Type&quot;);
			ActivateField(&quot;Product Type&quot;);
			ActivateField(&quot;Part Number&quot;);
			//++WA#39
			ActivateField(&quot;TELCO Action Reason&quot;);
			ActivateField(&quot;TELCO Action Type&quot;);
			//++WA#39			
			SetSearchExpr (&quot;[Id] = [Root Order Item Id] AND [Order Header Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
			
			ExecuteQuery(ForwardOnly);
			
			itemIsRecord = FirstRecord();
			while(itemIsRecord)
			{
				strBAId = GetFieldValue(&quot;Billing Account Id&quot;);
				strAccountId = GetFieldValue(&quot;Account Id&quot;);
				strBAStatus = GetFieldValue(&quot;VF Billing Account Status&quot;);
				OrderSubType = GetFieldValue(&quot;TELCO Action Type&quot;); //WA#39 replaced Order Sub Type
				strAssetIntegId = GetFieldValue(&quot;Asset Integration Id&quot;);
				VFProductGroup = GetFieldValue(&quot;VF Product Group&quot;);
				VFProductType = GetFieldValue(&quot;VF Product Type&quot;);
				VFProductSubType = GetFieldValue(&quot;Product Sub Type&quot;);
				ProductType = GetFieldValue(&quot;Product Type&quot;);
				strPartNum = GetFieldValue(&quot;Part Number&quot;);
				if (OrderSubType != &quot;&quot;)
				{
					strOrderSubTypeLic = LookupName(&quot;ORDER_SUB_TYPE&quot;,OrderSubType);
				}
				else
				{
					strOrderReason = GetFieldValue(&quot;TELCO Action Reason&quot;); //WA#39 
					strOrderReasonLic = LookupName(&quot;ACS_ORDER_REASON&quot;,strOrderReason);
				}
				
				//++ WA#39
				if(strBAStatus == strCreated){
					if(strOrderSubTypeLic == &quot;&quot; || strOrderSubTypeLic == &quot;100&quot;)
						strNewBAStatus = strActive;
				}//-- WA#39
				else if(strBAStatus == strNoInvoice)
				{
					if(strOrderSubTypeLic == &quot;&quot; || strOrderSubTypeLic == &quot;106&quot; || strOrderSubTypeLic == &quot;100&quot;)
						strNewBAStatus = strActive;
					else if(strOrderSubTypeLic == &quot;117&quot; || strOrderSubTypeLic == &quot;118&quot; || strOrderSubTypeLic == &quot;119&quot; || strOrderSubTypeLic == &quot;127&quot; ||  strOrderSubTypeLic == &quot;128&quot; || strOrderSubTypeLic == &quot;130&quot; || strOrderSubTypeLic == &quot;132&quot;)
					{
						strBALevelProduct =  LookupDesc(strPartNum);
						//if (VFProductGroup == &quot;SRV&quot; &amp;&amp; VFProductType == &quot;MAIN&quot; &amp;&amp; VFProductSubType == &quot;MOBILE&quot; &amp;&amp; ProductType == &quot;Group&quot;)
						if(strBALevelProduct == &quot;Y&quot;)
						{
							if(strAssetIntegId != &quot;&quot; &amp;&amp; strAccountId != &quot;&quot;)
							{
								with(AssetBC)
								{
									ClearToQuery();
									SetViewMode(AllView);
									ActivateField(&quot;VF Final Status&quot;);
									ActivateField(&quot;Status&quot;);
									ActivateField(&quot;VF Credit Status&quot;);
									ActivateField(&quot;VF Customer Status&quot;);
									ActivateField(&quot;VF Dunning Status&quot;);
									ActivateField(&quot;VF Fraud Status&quot;);
									ActivateField(&quot;VF Document Missing Status&quot;);
									SetSearchSpec (&quot;Integration Id&quot;, strAssetIntegId);
									ExecuteQuery(ForwardOnly);
									if (FirstRecord())
									{
										strFinalStatus = GetFieldValue(&quot;VF Final Status&quot;); //Reactivated during WA#39
										//strFinalStatus = FinalStatusCalc(AssetBC);
										if(strFinalStatus != &quot;Frozen&quot; &amp;&amp; strFinalStatus != &quot;Cancelled&quot; &amp;&amp; strFinalStatus != &quot;Inactive&quot;)
											strNewBAStatus = strActive;
									}
								}
							}
						}
					}
				}
				else if ((strBAStatus == strActive) &amp;&amp; (strOrderSubTypeLic == &quot;131&quot; || strOrderSubTypeLic == &quot;121&quot; || strOrderSubTypeLic == &quot;127&quot; ||  strOrderSubTypeLic == &quot;128&quot; || strOrderSubTypeLic == &quot;122&quot; || strOrderSubTypeLic == &quot;126&quot; || strOrderSubTypeLic == &quot;124&quot; || strOrderSubTypeLic == &quot;125&quot; || strOrderSubTypeLic == &quot;123&quot; || strOrderSubTypeLic == &quot;133&quot; || strOrderSubTypeLic == &quot;114&quot; || strOrderSubTypeLic == &quot;129&quot; || strOrderSubTypeLic == &quot;115&quot; || strOrderSubTypeLic == &quot;116&quot; || strOrderSubTypeLic == &quot;110&quot; || strOrderReasonLic == &quot;1020&quot;))
				{
					
					if (strAccountId != &quot;&quot; &amp;&amp; VFProductGroup == &quot;SRV&quot; &amp;&amp; VFProductType == &quot;MAIN&quot; &amp;&amp; VFProductSubType == &quot;MOBILE&quot; &amp;&amp; ProductType == &quot;Group&quot;)
					{
						
						with(AssetBC)
						{
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(&quot;[Id] = [Root Asset Id] AND [Status] = &apos;&quot;+strAssetActive+&quot;&apos; AND [VF Product Group] = &apos;SRV&apos; AND [VF Product Type] = &apos;MAIN&apos; AND [VF Product Sub Type] = &apos;MOBILE&apos; AND [Type] = &apos;Group&apos; AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								strNewBAStatus = &quot;&quot;;
							}
							else
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;VF Final Status&quot;);
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;VF Credit Status&quot;);
								ActivateField(&quot;VF Customer Status&quot;);
								ActivateField(&quot;VF Dunning Status&quot;);
								ActivateField(&quot;VF Fraud Status&quot;);
								ActivateField(&quot;VF Document Missing Status&quot;);
								SetSearchExpr(&quot;([Status] = &apos;&quot;+strSuspended+&quot;&apos; OR [Status] = &apos;&quot;+strInactive+&quot;&apos;) AND [Id] = [Root Asset Id] AND [VF Product Group] = &apos;SRV&apos; AND [VF Product Type] = &apos;MAIN&apos; AND [VF Product Sub Type] = &apos;MOBILE&apos; AND [Type] = &apos;Group&apos; AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);
								bolIsRecord = FirstRecord();
								while(bolIsRecord)
								{
									strRootAssetStatus = GetFieldValue(&quot;Status&quot;);
									if(strRootAssetStatus == &quot;Suspended&quot;)
									{
										strFinalStatus = GetFieldValue(&quot;VF Final Status&quot;); //Reactivated during WA#39
										//strFinalStatus = FinalStatusCalc(AssetBC);
										if(strFinalStatus != &quot;Frozen&quot; &amp;&amp; strFinalStatus != &quot;Cancelled&quot;)
										{
											strNewBAStatus = &quot;&quot;;
											break;
										}
										else
											strNewBAStatus = strNoInvoice;
									}
									else
										strNewBAStatus = strNoInvoice;
									bolIsRecord = NextRecord();
								}
							}
						}
					}
					else if (strAccountId != &quot;&quot;)
					{
						with(AssetBC)
						{
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(&quot;[Id] = [Root Asset Id] AND [Status] = &apos;&quot;+strAssetActive+&quot;&apos; AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								strNewBAStatus = &quot;&quot;;
							}
							else
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;VF Final Status&quot;);
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;VF Credit Status&quot;);
								ActivateField(&quot;VF Customer Status&quot;);
								ActivateField(&quot;VF Dunning Status&quot;);
								ActivateField(&quot;VF Fraud Status&quot;);
								ActivateField(&quot;VF Document Missing Status&quot;);
								SetSearchExpr(&quot;([Status] = &apos;&quot;+strSuspended+&quot;&apos; OR [Status] = &apos;&quot;+strInactive+&quot;&apos;) AND [Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);
								bolIsRecord = FirstRecord();
								while(bolIsRecord)
								{
									strRootAssetStatus = GetFieldValue(&quot;Status&quot;);
									if(strRootAssetStatus == &quot;Suspended&quot;)
									{
										strFinalStatus = GetFieldValue(&quot;VF Final Status&quot;); //Reactivated during WA#39
										//strFinalStatus = FinalStatusCalc(AssetBC);
										if(strFinalStatus != &quot;Frozen&quot; &amp;&amp; strFinalStatus != &quot;Cancelled&quot;)
										{
											strNewBAStatus = &quot;&quot;;
											break;
										}
										else
											strNewBAStatus = strNoInvoice;
									}
									else
										strNewBAStatus = strNoInvoice;
									bolIsRecord = NextRecord();
								}
							}
						}					
					}
				}
				if(strNewBAStatus != &quot;&quot; &amp;&amp; strBAId != &quot;&quot;)
				{
					with(AccountBC)
					{
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchSpec(&quot;Id&quot;, strAccountId);
						ExecuteQuery(ForwardOnly);
						if (FirstRecord())
						{
							with(BillingBC)
							{
								ClearToQuery();
								SetViewMode(AllView);
								ActivateField(&quot;Account Status Code&quot;);
								SetSearchSpec (&quot;Id&quot;, strBAId);
								ExecuteQuery(ForwardOnly);
								if (FirstRecord())
								{
									SetFieldValue(&quot;Account Status Code&quot;, strNewBAStatus);
									WriteRecord();
								}
							}
						}
					}
				}
				
				itemIsRecord = NextRecord();
			}
		}
	}
	finally
	{	
		AccountBC = null;
		OrderItemBC = null;
		BillingBC = null;
		AssetBC = null;
		BillBO	= null;
		OrderBO = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="05/25/2016 22:18:41"
			   UPDATED_BY="SADMIN"
			   CREATED="05/11/2016 21:47:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckFutureFinalStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckFutureFinalStatus(strCreditStatus, strCustomerStatus, strDocumentStatus, strDunningStatus, strFraudStatus)
{
	var sInactive 	= &quot;Inactive&quot;;
	var sCancelled 	= &quot;Cancelled&quot;;
	var sFrozen 	= &quot;Frozen&quot;;
	var sClosed 	= &quot;Closed&quot;;
	var sLimited 	= &quot;Limited&quot;;
	var sActive 	= &quot;Active&quot;;

	var sCredStat 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strCreditStatus);
	var sCustStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strCustomerStatus);
	var sDunnStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strDunningStatus);
	var sFraudStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strFraudStatus);
	var sDocStatus	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, strDocumentStatus);

	if(sCredStat == sActive &amp;&amp; sFraudStat == sActive &amp;&amp; sCustStat == sActive &amp;&amp; sDunnStat == sActive &amp;&amp; sDocStatus == sActive)
		return true;
	else if(sCustStat == sCancelled || sDunnStat == sCancelled || sDocStatus == sCancelled)
		return false;
	else if (sCustStat == sFrozen || sDunnStat == sFrozen || sDocStatus == sFrozen)
		return false;
	else if(sCredStat == sClosed || sFraudStat == sClosed || sDunnStat == sClosed || sCustStat == sClosed || sDocStatus == sClosed)
		return true;
	else if((sCredStat == sLimited || sFraudStat == sLimited || sCustStat == sLimited || sDunnStat == sLimited || sDocStatus == sLimited)
		&amp;&amp; sFraudStat != sFrozen &amp;&amp; sFraudStat != sCancelled &amp;&amp; sFraudStat != sClosed)
		return true;
}"
			   SEQUENCE="4"
			   UPDATED="05/11/2016 21:47:08"
			   UPDATED_BY="SADMIN"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSVBResume"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSVBResume(Inputs, Outputs)
{
	try
	{
		var boOrder : BusObject       = TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);
		var bcOrder : BusComp         = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var bcItem : BusComp          = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var boRootItem : BusObject    = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcRootItem : BusComp      = boRootItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var boAsset : BusObject       = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var bcAsset : BusComp         = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
		var bsManager :Service        = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn :PropertySet  = TheApplication().NewPropertySet();
		var psManagerOut :PropertySet = TheApplication().NewPropertySet();

		var sOrderId            = Inputs.GetProperty(&quot;Object Id&quot;);
		var sBrowserScriptCheck = Inputs.GetProperty(&quot;BrowserScriptCheck&quot;);
		var sSearchExpr         = &quot;&quot;;
		var bHasSVBItem         = false;
		var sActionTypeLIC      = &quot;&quot;;
		var sRootItemId         = &quot;&quot;;
		var sSVBItemId          = &quot;&quot;;
		var sSVBAssetIntegId    = &quot;&quot;;
		var sCreditStatus       = &quot;&quot;;
		var sFraudStatus        = &quot;&quot;;
		var sDocumentStatus     = &quot;&quot;;
		var sDunningStatus      = &quot;&quot;;
		var sCustomerStatus     = &quot;&quot;;
		var bCheckFinalStatus   = false;
		var sSVBAssetId         = &quot;&quot;;
		var sSVBName            = &quot;&quot;;
		var sBA_NO_INVOICE      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;BILLING_ACCOUNT_STATUS&quot;, &quot;130&quot;);
		var sErrorText          = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;VF_RESUME_SVB&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcOrder.ClearToQuery();
		bcOrder.SetViewMode(AllView);
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		sSearchExpr = &quot;(([VF Product Type] = &apos;DATA&apos; AND [VF Product Group] = &apos;SVB&apos;) OR&quot; +
					  &quot; ([VF Product Type] = &apos;ALLINONE&apos; AND [VF Product Group] = &apos;SVB&apos;) OR&quot; +
					  &quot; ([VF Product Type] = &apos;NAT_VOICE&apos; AND [VF Product Group] = &apos;SVB&apos;) OR&quot; +
					  &quot; ([VF Product Type] = &apos;ROAMVOICE&apos; AND [VF Product Group] = &apos;SVB&apos;) OR&quot; +
					  &quot; ([VF Product Type] = &apos;ROAMDATA&apos; AND [VF Product Group] = &apos;SVB&apos;) OR&quot; +
					  &quot; ([VF Product Type] = &apos;NAT_SMS&apos; AND [VF Product Group] = &apos;SVB&apos;)) AND &quot; +
					  &quot;[VF Member Asset Id] IS NOT NULL AND [VF Billing Account Status]=&apos;&quot; + sBA_NO_INVOICE + &quot;&apos;&quot;;

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;TELCO Root Action Type LIC&quot;);
		bcItem.ActivateField(&quot;Root Order Item Id&quot;);
		bcItem.ActivateField(&quot;VF Member Asset Id&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		bHasSVBItem = bcItem.FirstRecord();

		while(bHasSVBItem)
		{
			sActionTypeLIC   = bcItem.GetFieldValue(&quot;TELCO Root Action Type LIC&quot;);
			sRootItemId      = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);
			sSVBItemId       = bcItem.GetFieldValue(&quot;Id&quot;);
			sSVBAssetIntegId = bcItem.GetFieldValue(&quot;VF Member Asset Id&quot;);

			if (sActionTypeLIC == &quot;&quot; || sActionTypeLIC == &quot;119&quot; || sActionTypeLIC == &quot;130&quot; || sActionTypeLIC == &quot;132&quot;)
			{
				bcRootItem.ClearToQuery();
				bcRootItem.SetViewMode(AllView);
				bcRootItem.ActivateField(&quot;VF Credit Status Final&quot;);
				bcRootItem.ActivateField(&quot;VF Fraud Status Final&quot;);
				bcRootItem.ActivateField(&quot;VF Document Missing Status Final&quot;);
				bcRootItem.ActivateField(&quot;VF Dunning Status Final&quot;);
				bcRootItem.ActivateField(&quot;VF Customer Status Final&quot;);
				bcRootItem.SetSearchSpec(&quot;Id&quot;, sRootItemId);
				bcRootItem.ExecuteQuery(ForwardOnly);

				if (bcRootItem.FirstRecord())
				{
					sCreditStatus     = bcRootItem.GetFieldValue(&quot;VF Credit Status Final&quot;);
					sFraudStatus      = bcRootItem.GetFieldValue(&quot;VF Fraud Status Final&quot;);
					sDocumentStatus   = bcRootItem.GetFieldValue(&quot;VF Document Missing Status Final&quot;);
					sDunningStatus    = bcRootItem.GetFieldValue(&quot;VF Dunning Status Final&quot;);
					sCustomerStatus   = bcRootItem.GetFieldValue(&quot;VF Customer Status Final&quot;);

					bCheckFinalStatus = CheckFutureFinalStatus(sCreditStatus, sCustomerStatus, sDocumentStatus,
															   sDunningStatus, sFraudStatus);

					if (bCheckFinalStatus)
					{
						bcAsset.ClearToQuery();
						bcAsset.SetViewMode(AllView);
						bcAsset.ActivateField(&quot;Product Name&quot;);
						bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sSVBAssetIntegId);
						bcAsset.ExecuteQuery(ForwardOnly);

						if (bcAsset.FirstRecord())
						{
							sSVBAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);
							sSVBName    = bcAsset.GetFieldValue(&quot;Product Name&quot;);

							if (sBrowserScriptCheck == &quot;OK&quot;)
							{
								sErrorText = sErrorText + &quot;\n\r&quot;;
								sErrorText = sErrorText + sSVBName + &quot;\n\r&quot;;

								Outputs.SetProperty(sSVBItemId, sSVBItemId);
								Outputs.SetProperty(&quot;ErrorMsg&quot;, sErrorText);
								Outputs.SetProperty(&quot;Result&quot;,   &quot;KO&quot;);
							}
							else
							{
								psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Async Call WF&quot;);
								psManagerIn.SetProperty(&quot;NameProcess&quot;, &quot;VF No Invoice BA Resume SVB&quot;);
								psManagerIn.SetProperty(&quot;Object Id&quot;,   sSVBAssetId);
								psManagerIn.SetProperty(&quot;Command&quot;,     &quot;CREATE&quot;);

								bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
							}
						}
					}
				}
			}

			bHasSVBItem = bcItem.NextRecord();
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		psManagerOut = null;
		psManagerIn  = null;
		bsManager    = null;
		bcAsset      = null;
		boAsset      = null;
		bcRootItem   = null;
		boRootItem   = null;
		bcItem       = null;
		bcOrder      = null;
		boOrder      = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="05/11/2016 21:47:08"
			   UPDATED_BY="SADMIN"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeleteSVBChild"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeleteSVBChild(Inputs, Outputs)
{
	try
	{
		var strOrderId = Inputs.GetProperty(&quot;Object Id&quot;);
		var DeleteActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);

		var OrderEntryBO		: BusObject = TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var OrderLineItemsBC	: BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var OrderLineItemsXABC	: BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);

		var strOrderItemId = &quot;&quot;;
		var bolNextRecord = false;
		var bolNextXARecord = false;

		with(OrderLineItemsBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Action Code&quot;);
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND (([VF Product Type] = &apos;DATA&apos; AND [VF Product Group] = &apos;SVB&apos;) OR ([VF Product Type] = &apos;ALLINONE&apos; AND [VF Product Group] = &apos;SVB&apos;) OR ([VF Product Type] = &apos;NAT_VOICE&apos; AND [VF Product Group] = &apos;SVB&apos;) OR ([VF Product Type] = &apos;ROAMVOICE&apos; AND [VF Product Group] = &apos;SVB&apos;) OR ([VF Product Type] = &apos;ROAMDATA&apos; AND [VF Product Group] = &apos;SVB&apos;) OR ([VF Product Type] = &apos;NAT_SMS&apos; AND [VF Product Group] = &apos;SVB&apos;))&quot;);
			ExecuteQuery(ForwardOnly);
			bolNextRecord = FirstRecord();
			while(bolNextRecord)
			{
				strOrderItemId = GetFieldValue(&quot;Id&quot;);
				SetFieldValue(&quot;Action Code&quot;, DeleteActionCode);
				WriteRecord();

				with(OrderLineItemsXABC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Action Code&quot;);
					SetSearchExpr(&quot;[Object Id] = &apos;&quot;+strOrderItemId+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					bolNextXARecord = FirstRecord();
					while(bolNextXARecord)
					{
						SetFieldValue(&quot;Action Code&quot;, DeleteActionCode);
						WriteRecord();
						bolNextXARecord = NextRecord();
					}
				}
				bolNextRecord = NextRecord();
			}
		}
	}
	finally
	{
		OrderEntryBO = null;
		OrderLineItemsBC = null;
		OrderLineItemsXABC = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="05/11/2016 21:47:08"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 16:14:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FinalStatusCalc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FinalStatusCalc(&amp;oBC)
{
	try
	{
	 	var sInactive 		= &quot;Inactive&quot;;
	    var sCancelled 		= &quot;Cancelled&quot;;
	    var sFrozen 		= &quot;Frozen&quot;;
	    var sClosed 		= &quot;Closed&quot;;
	    var sLimited 		= &quot;Limited&quot;;
	    var sActive 		= &quot;Active&quot;;

	  	var sStatus 		= oBC.GetFieldValue(&quot;Status&quot;);
		var sCredStatCode 	= oBC.GetFieldValue(&quot;VF Credit Status&quot;);
		var sCustStatCode	= oBC.GetFieldValue(&quot;VF Customer Status&quot;);
		var sDunnStatCode	= oBC.GetFieldValue(&quot;VF Dunning Status&quot;);
		var sFraudStatCode	= oBC.GetFieldValue(&quot;VF Fraud Status&quot;);
		var sDocStatusCode	= oBC.GetFieldValue(&quot;VF Document Missing Status&quot;);

		var sCredStat 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sCredStatCode);
		var sCustStat		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sCustStatCode);
		var sDunnStat		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sDunnStatCode);
		var sFraudStat		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sFraudStatCode);
		var sDocStatus		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sDocStatusCode);

		var sFinalStatus = &quot;&quot;;
		
		if(sStatus == sInactive)
			sFinalStatus = sInactive;
		
		else if(sCredStat == sActive &amp;&amp; sFraudStat == sActive &amp;&amp; sCustStat == sActive &amp;&amp; sDunnStat == sActive &amp;&amp; sDocStatus == sActive)
			sFinalStatus = sActive;
		
		else if(sCustStat == sCancelled || sDunnStat == sCancelled || sDocStatus == sCancelled)
			sFinalStatus = sCancelled;
		
		else if (sCustStat == sFrozen || sDunnStat == sFrozen || sDocStatus == sFrozen)
			sFinalStatus = sFrozen;
		
		else if(sCredStat == sClosed || sFraudStat == sClosed || sDunnStat == sClosed || sCustStat == sClosed || sDocStatus == sClosed)
			sFinalStatus = sClosed;
		
		else if((sCredStat == sLimited || sFraudStat == sLimited || sCustStat == sLimited || sDunnStat == sLimited || sDocStatus == sLimited)
			&amp;&amp; sFraudStat != sFrozen &amp;&amp; sFraudStat != sCancelled &amp;&amp; sFraudStat != sClosed)
			sFinalStatus = sLimited;
		
		oBC.SetFieldValue(&quot;VF Final Status&quot;,sFinalStatus);
		oBC.WriteRecord();
	}
	catch(e)
	{
		throw(e);
	}
	finally	{}

	return (sFinalStatus);
}"
			   SEQUENCE="7"
			   UPDATED="05/11/2016 21:47:08"
			   UPDATED_BY="SADMIN"
			   CREATED="03/03/2013 17:25:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupDesc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupDesc(strPartNum)
{
	try
	{
		var name = &quot;&quot;;
		var ActiveFlag = &quot;Y&quot;;
		var strParameterSrcExpr = &quot;[Type] = &apos;VF_BA_LEVEL_PRODUCT&apos; AND [Value] = &apos;&quot;+strPartNum+&quot;&apos; AND [Active] = &apos;&quot;+ ActiveFlag + &quot;&apos;&quot;;
		var boHPOrderEntry : BusObject = TheApplication().GetBusObject (&quot;HP Order Entry&quot;);
		var bcLOV : BusComp = boHPOrderEntry.GetBusComp (&quot;List Of Values&quot;);
		with(bcLOV)
		{
			SetViewMode(AllView);	
			ActivateField (&quot;Description&quot;);
			ClearToQuery();
			SetSearchExpr (strParameterSrcExpr);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord ())
			{
				name = GetFieldValue (&quot;Description&quot;);
			}
		}
		return(name);
	}
	finally
	{
		bcLOV = null;
		boHPOrderEntry = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="05/11/2016 21:47:08"
			   UPDATED_BY="SADMIN"
			   CREATED="01/27/2014 11:35:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupName(LovType, LovValue)
{
	try
	{
		var name = &quot;&quot;;
		var ActiveFlag = &quot;Y&quot;;
		var strParameterSrcExpr = &quot;[Type] = &apos;&quot;+LovType+&quot;&apos; AND [Value] = &apos;&quot;+LovValue+&quot;&apos; AND [Active] = &apos;&quot;+ ActiveFlag + &quot;&apos;&quot;;
		var boHPOrderEntry : BusObject = TheApplication().GetBusObject (&quot;HP Order Entry&quot;);
		var bcLOV : BusComp = boHPOrderEntry.GetBusComp (&quot;List Of Values&quot;);
		with(bcLOV)
		{
			SetViewMode(AllView);	
			ActivateField (&quot;Name&quot;);
			ActivateField (&quot;Language&quot;);
			ClearToQuery();
			SetSearchExpr (strParameterSrcExpr);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord ())
			{
				name = GetFieldValue (&quot;Name&quot;);
			}
		}
		return(name);
	}
	finally
	{
		bcLOV = null;
		boHPOrderEntry = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="05/11/2016 21:47:08"
			   UPDATED_BY="SADMIN"
			   CREATED="07/19/2013 21:49:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName) 
	{
		case &quot;CheckSVBResume&quot;:
			CheckSVBResume(Inputs, Outputs);
			return (CancelOperation);
		break;
		case &quot;CheckBAStatus&quot;:
			CheckBAStatus(Inputs, Outputs);
			return (CancelOperation);
		break;
		case &quot;CheckBAStatusTWC&quot;:
			CheckBAStatusTWC(Inputs, Outputs);
			return (CancelOperation);
		break;
			case &quot;CheckBAStatusTCC&quot;:
			CheckBAStatusTWC(Inputs, Outputs);
			return (CancelOperation);
		break;
		case &quot;CalucateSubtypeAndReason&quot;:
			CalucateSubtypeAndReason(Inputs, Outputs);
			return (CancelOperation);
		break;
		case &quot;DeleteSVBChild&quot;:
			DeleteSVBChild(Inputs, Outputs);
			return (CancelOperation);
		break;
	}
	return (ContinueOperation);
}"
			   SEQUENCE="10"
			   UPDATED="05/25/2016 22:18:41"
			   UPDATED_BY="SADMIN"
			   CREATED="02/19/2013 14:39:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



