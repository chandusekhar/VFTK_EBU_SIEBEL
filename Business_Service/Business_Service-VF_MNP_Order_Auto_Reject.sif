<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF MNP Order"
	   UI_FREEZE="N"
	   UPDATED="03/21/2017 12:33:40"
	   UPDATED_BY="RLOURENCO"
	   CREATED="10/21/2009 10:28:26"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="Created for checking MNP Order Auto Reject VF/AN -28.12.2010"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF MNP Order Auto Reject"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="03/21/2017 12:33:08"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="RLOURENCO"
		   UPDATED="03/21/2017 12:33:40"
		   UPDATED_BY="RLOURENCO"
		   CREATED="02/04/2010 12:15:58"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="MNP Order Auto Reject"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="02/04/2010 12:15:58"
			   UPDATED_BY="SADMIN"
			   CREATED="02/04/2010 12:15:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMNPOrder"
			   UPDATED="02/04/2010 12:15:58"
			   UPDATED_BY="SADMIN"
			   CREATED="02/04/2010 12:15:58"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ServiceRequestId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/04/2010 12:15:58"
				   UPDATED_BY="SADMIN"
				   CREATED="02/04/2010 12:15:58"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ServiceRequestId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="02/04/2010 12:15:58"
					   UPDATED_BY="SADMIN"
					   CREATED="02/04/2010 12:15:58"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckMNPOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/04/2010 12:15:58"
				   UPDATED_BY="SADMIN"
				   CREATED="02/04/2010 12:15:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="WA#18 | PSILVA"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMNPOrderCBU"
			   UPDATED="01/27/2015 18:03:38"
			   UPDATED_BY="PSILVA"
			   CREATED="01/27/2015 18:03:07"
			   CREATED_BY="PSILVA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ServiceRequestId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/27/2015 18:03:07"
				   UPDATED_BY="PSILVA"
				   CREATED="01/27/2015 18:03:07"
				   CREATED_BY="PSILVA">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ServiceRequestId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/27/2015 18:03:07"
					   UPDATED_BY="PSILVA"
					   CREATED="01/27/2015 18:03:07"
					   CREATED_BY="PSILVA">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckMNPOrderCBU"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/27/2015 18:03:27"
				   UPDATED_BY="PSILVA"
				   CREATED="01/27/2015 18:03:07"
				   CREATED_BY="PSILVA">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddtoDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddtoDate(myDate,days) 
{
/* Adds the number of Days specified in the input parameter ‘days’ 
 *  to the input parameter mydate and returns the new date
 * @param myDate,days
 * @return new Date
 
*
 */
	var vcreated = new Date(myDate);
    return new Date(vcreated.getTime() + days*24*60*60*1000);
}"
			   SEQUENCE="1"
			   UPDATED="12/16/2013 15:12:56"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2013 15:12:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAssetMetropolis"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAssetMetropolis(Inputs,Outputs)
{
	try
	{
		var strMSISDN = Inputs.GetProperty(&quot;MSISDN&quot;);
		var strReturn = false;
		
		var App = TheApplication();
		var boAsset : BusObject = App.GetBusObject(&quot;Asset Management&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var bcAssetMetro : BusComp   = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		
		var strProdSubType = App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;METROPOLIS&quot;);
		var strAssetStatus = App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var strRootAssetId = &quot;&quot;;
		
		var strSearchExpr = &quot;[Serial Number] = &apos;&quot;+ strMSISDN +&quot;&apos; and [Status] = &apos;&quot;+ strAssetStatus +&quot;&apos;&quot;;
		with(bcAsset)
		{
			ClearToQuery ();
			SetViewMode (AllView);
			ActivateField (&quot;Root Asset Id&quot;);
			ActivateField (&quot;Serial Number&quot;);
			ActivateField (&quot;Status&quot;);
			SetSearchExpr (strSearchExpr);
			ExecuteQuery (ForwardOnly);
		}
		
		if (bcAsset.FirstRecord ())
      	{
			strRootAssetId = bcAsset.GetFieldValue (&quot;Root Asset Id&quot;);
		
			var strSearchExprMetro = &quot;[Root Asset Id] = &apos;&quot;+ strRootAssetId +&quot;&apos; and [VF Product Sub Type] = &apos;&quot;+ strProdSubType +&quot;&apos; and [Status] = &apos;&quot;+ strAssetStatus +&quot;&apos;&quot;;
			with(bcAssetMetro)
			{
				ClearToQuery ();
				SetViewMode (AllView);
				ActivateField (&quot;Root Asset Id&quot;);
				ActivateField (&quot;VF Product Sub Type&quot;);
				ActivateField (&quot;Status&quot;);
				SetSearchExpr (strSearchExprMetro);
				ExecuteQuery (ForwardOnly);
			}
			
			if (bcAssetMetro.FirstRecord ())
				strReturn = true;
		}
		return (strReturn);
	}
	finally
	{
		bcAssetMetro = null;
		bcAsset = null;
		boAsset = null;
		App = null;
	}

}"
			   SEQUENCE="3"
			   UPDATED="04/06/2015 17:16:23"
			   UPDATED_BY="PSILVA"
			   CREATED="04/06/2015 17:16:23"
			   CREATED_BY="PSILVA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCancelSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCancelSR(assetId,Closed)
{
try
{
	var boVFSR : BusObject           = TheApplication().GetBusObject(&quot;Service Request&quot;);
	var bcServiceRequest : BusComp = boVFSR.GetBusComp (&quot;Service Request&quot;);
	var ret = false;
	
	var LOVProgress	=  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;In Progress&quot;);
	var LOVOpen	=  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;);
	var LOVClosed	=  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;);
	
	bcServiceRequest.ClearToQuery();
	bcServiceRequest.SetViewMode(AllView);
	bcServiceRequest.ActivateField(&quot;Sub-Area&quot;);
	bcServiceRequest.ActivateField(&quot;VF Customer GSM Id&quot;);
	bcServiceRequest.ActivateField(&quot;Status&quot;);
	//Begin - Scripting 15 - Input validation // Validating only OrderId since other inputs doesn&apos;t cause issue
	var inProp 	:PropertySet = TheApplication().NewPropertySet();
	var outProp	: PropertySet = TheApplication().NewPropertySet();
	var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;assetId&quot;,assetId);
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
	//End - Scripting 15
	bcServiceRequest.SetSearchSpec(&quot;Sub-Area&quot;,&quot;KRM. VF HAT IPTAL TALEBI&quot;);
	bcServiceRequest.SetSearchSpec(&quot;VF Customer GSM Id&quot;,assetId);
	if(Closed)
		bcServiceRequest.SetSearchSpec(&quot;Status&quot;,&quot;[Status] = &apos;&quot;+LOVClosed+&quot;&apos;&quot;);
	else
		bcServiceRequest.SetSearchSpec(&quot;Status&quot;,&quot;[Status] = &apos;&quot;+LOVOpen+&quot;&apos; OR [Status] = &apos;&quot;+LOVProgress+&quot;&apos;&quot;);
	bcServiceRequest.ExecuteQuery (ForwardOnly);
	if(bcServiceRequest.FirstRecord())
	{
		ret = true;
	}
	return (ret);
}
finally
{
	BS = null;
	outProp = null;
	inProp = null;
	bcServiceRequest=null;
	boVFSR=null;
}	
}"
			   SEQUENCE="4"
			   UPDATED="04/06/2015 17:16:23"
			   UPDATED_BY="PSILVA"
			   CREATED="11/16/2011 12:35:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMNPOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMNPOrder (Inputs, Outputs)
{
	try
	{
		var App = TheApplication();
		var strStartDate =&quot;&quot;;
		var strOrigStartDate =&quot;&quot;;
		var strInstallDate	= &quot;&quot;;
		var strAssetStatus = &quot;&quot;;
		var strAssetSrcExpr = &quot;&quot;;
		var strMSISDN = &quot;&quot;;
		var strAccountId = &quot;&quot;;
		var strCloseSRFlag = &quot;Y&quot;;
		var strMSISDNStatus = &quot;&quot;;
		var donorOperator = &quot;&quot;;
		var assetId = &quot;&quot;;
		var CustStatus = &quot;&quot;;
		var LastReason = &quot;&quot;;
		var booRecExists;
		var booMSISDNRecExists;
		var SysDate = GetCurrentDate(); 
		var SysMonth = SysDate.getMonth()+1;
		var SysYear = SysDate.getFullYear();
		var SysDay = SysDate.getDate();
		var SysHour = SysDate.getHours();
		var SysMin = SysDate.getMinutes()+1;
		var SysSec = SysDate.getSeconds()+1;
		var assetStatus = &quot;&quot;;
		var psKPIin: PropertySet = App.NewPropertySet();
		var psKPIout : PropertySet = App.NewPropertySet();
		var kpiStatus = &quot;OK&quot;;
		var today = GetCurrentDate();  
		var timestampStart = ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());  	
		var boVFSR : BusObject = App.GetBusObject(&quot;Service Request&quot;);
		var bcSR : BusComp = boVFSR.GetBusComp (&quot;Service Request&quot;);
		var strSRId = Inputs.GetProperty (&quot;ServiceRequestId&quot;);
		var sIsConsumerRequest = Inputs.GetProperty(&quot;IsConsumerRequest&quot;);
		var BS : Service = TheApplication().GetService(&quot;VF TRK Utilities&quot;);	
		var inProp :PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		inProp.SetProperty(&quot;strSRId&quot;,strSRId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);			
		var strMSISDNSrcExpr = &quot;[VF Status] &lt;&gt; &apos;&quot;+App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;)+&quot;&apos;&quot;;
		var noTaxId = App.InvokeMethod(&quot;lookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;);
		var strSRSrcExpr = &quot;[Id] = &apos;&quot;+strSRId+&quot;&apos;&quot;;
		var bcVFMNPPortOut : BusComp = boVFSR.GetBusComp (&quot;VF MNP Port Out MSISDN&quot;);
		var strSRTaxId = &quot;&quot;;
		var strACCTaxId = &quot;&quot;;
		var Active = App.InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var Suspended = App.InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);

		var boAsset	:BusObject = App.GetBusObject (&quot;Asset Management&quot;);
		var bcAsset :BusComp = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var bcAssetXA :BusComp = boAsset.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);
		var strCancelledStatus = App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var strCompleteStatus = App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var RsnTranferCross = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strMSISDNChange = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;229&quot;);
		var strLimitedVoluntary = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;205&quot;);
		var strClosedVoluntary = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;208&quot;);
		var strFrozenVoluntary = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;210&quot;);
		var strCancelledDunning = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;211&quot;);
		var strCancelledCustomerReq = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;212&quot;);
		var strResumeFromClosed = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;213&quot;);
		var strResumeFromFrozen = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;214&quot;);
		var strCancMissingDocumentS = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2005&quot;);
		var strCancMissingDocument = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;220&quot;);
		var strHATSAHKUL = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2200&quot;);//CR 756
		var autoRejectDate = new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;MNP_Block_Date&quot;));//CR756 31.12.2013
		var decisionDate = new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;BTK_Dec&quot;));
		var timeCheck = App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_X_DAYS_AUTOREJECT&quot;,&quot;Time_in_days&quot;);	
		var boOrderHP :BusObject = App.GetBusObject(&quot;X Order Entry&quot;);
		var bcOrderItemHP :BusComp	= boOrderHP.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		//var searchOrderExpr = &quot;&quot;;//Code Review Jan 2014
		var searchOrderExpr2 = &quot;&quot;;//CR 756
		var IntegId = &quot;&quot;;
		var strOrderReason = &quot;&quot;;
		var strOrderReason2 = &quot;&quot;;//CR 756
		var strOrderType = &quot;&quot;;

		psKPIin.SetProperty(&quot;SrId&quot;,strSRId);
		psKPIin.SetProperty(&quot;timestampStart&quot;,timestampStart);
		psKPIin.SetProperty(&quot;timestampEnd&quot;,&quot;&quot;);
		psKPIin.SetProperty(&quot;rootTransactionId&quot;,strSRId + today.toString());
		psKPIin.SetProperty(&quot;kpiStatus&quot;,kpiStatus);		
		bcSR.ClearToQuery ();
		bcSR.SetViewMode (AllView);
		bcSR.ActivateField (&quot;Account Id&quot;);
		bcSR.ActivateField (&quot;Status&quot;);
		bcSR.ActivateField (&quot;Sub-Status&quot;);
		bcSR.ActivateField (&quot;Tax ID&quot;);
		bcSR.SetSearchExpr (strSRSrcExpr);
		bcVFMNPPortOut.ClearToQuery ();
		bcVFMNPPortOut.SetViewMode (AllView);
		bcVFMNPPortOut.ActivateField (&quot;VF MSISDN&quot;);
		bcVFMNPPortOut.ActivateField (&quot;VF Reason&quot;);
		bcVFMNPPortOut.ActivateField (&quot;VF Status&quot;);    		  	
		bcVFMNPPortOut.ActivateField(&quot;Asset Id&quot;);

		bcSR.ExecuteQuery (ForwardOnly);//VFTK Lilanath 25042012 : No changes as per Oracle script 15 review since strSRId is a mandatory input

		if (bcSR.FirstRecord ())
		{
			strAccountId = bcSR.GetFieldValue(&quot;Account Id&quot;);
			strSRTaxId   = bcSR.GetFieldValue(&quot;Tax ID&quot;);
			booRecExists = bcVFMNPPortOut.FirstRecord();
			while (booRecExists)
			{
				if(sIsConsumerRequest == &quot;Y&quot;)
				{
					bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
					bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002013&quot;));
					bcVFMNPPortOut.WriteRecord();
				}
				else
				{
					strMSISDN = bcVFMNPPortOut.GetFieldValue (&quot;VF MSISDN&quot;);
					strAssetSrcExpr = &quot;[Serial Number] = &apos;&quot;+strMSISDN+&quot;&apos; AND ([Status] = &apos;&quot;+Active+&quot;&apos; OR [Status] = &apos;&quot;+Suspended+&quot;&apos;) AND [Product Part Number] = &apos;1000&apos;&quot;;

					with(bcAsset)
					{
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;Serial Number&quot;);
						ActivateField(&quot;Status&quot;);
						ActivateField(&quot;VF Customer Status&quot;);//CR171c
						ActivateField(&quot;Owner Account Id&quot;);
						ActivateField(&quot;Install Date&quot;);
						ActivateField(&quot;Reason Code&quot;);
						ActivateField(&quot;Integration Id&quot;);
						ActivateField(&quot;Start Date&quot;);
						//ActivateField(&quot;HATSAH KUL flg&quot;);//CR756
						ActivateField(&quot;VF Tax Id Number&quot;);
						SetSearchExpr(strAssetSrcExpr);
					}
					with(bcAssetXA)
					{
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;Name&quot;);
						ActivateField(&quot;Text Value&quot;);
						SetSearchSpec(&quot;Name&quot;,&quot;Donor Operator&quot;);
					}
					bcAsset.ExecuteQuery (ForwardOnly);

					if (bcAsset.FirstRecord())
					{	
						assetStatus = bcAsset.GetFieldValue(&quot;Status&quot;);
						LastReason = bcAsset.GetFieldValue(&quot;Reason Code&quot;);
						assetId = bcAsset.GetFieldValue(&quot;Id&quot;);
						IntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
						CustStatus = bcAsset.GetFieldValue(&quot;VF Customer Status&quot;);
						strStartDate = bcAsset.GetFieldValue(&quot;Start Date&quot;);
						strOrigStartDate = bcAsset.GetFieldValue(&quot;VF Orig Start Date&quot;);
						strInstallDate = bcAsset.GetFieldValue(&quot;Install Date&quot;);//CR171c
						strACCTaxId = bcAsset.GetFieldValue(&quot;VF Tax Id Number&quot;);
						var checkDate = (strOrigStartDate != &quot;&quot;) ? strOrigStartDate : strInstallDate;
						if (bcAssetXA.FirstRecord())
							donorOperator = bcAssetXA.GetFieldValue(&quot;Text Value&quot;);

						searchOrderExpr2 = &quot;[Asset Integration Id]=&apos;&quot;+IntegId+&quot;&apos;AND [Status] &lt;&gt; &apos;&quot;+strCancelledStatus+&quot;&apos;&quot;; //CR756
						with(bcOrderItemHP)
						{
							ClearToQuery();
							SetViewMode(AllView);
							// JIRA-13858 20150717 Begin:WA#18-MNP: Field &quot;VF Order Header Reason&quot; deprecated in WA#39, replaced by &quot;Order Sub Type&quot;
							ActivateField(&quot;Order Sub Type&quot;); //&quot;VF Order Header Reason&quot;
							// JIRA-13858 20150717 End
							ActivateField(&quot;Order Type&quot;);
							SetSearchExpr(searchOrderExpr2);//Code Review Jan 2014
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
						    	// JIRA-13858 Begin
								strOrderReason2 = GetFieldValue(&quot;Order Sub Type&quot;); //&quot;VF Order Header Reason&quot;
						    	// JIRA-13858 End
								if(GetFieldValue(&quot;Status&quot;) != strCancelledStatus &amp;&amp; GetFieldValue(&quot;Status&quot;) != strCompleteStatus)//Code Review Jan 2014
								{
									strOrderType = GetFieldValue(&quot;Order Type&quot;);
						    		// JIRA-13858 Begin
									strOrderReason = GetFieldValue(&quot;Order Sub Type&quot;); //&quot;VF Order Header Reason&quot;
						    		// JIRA-13858 End
								}
							}
						}
						if (bcAsset.GetFieldValue(&quot;Owner Account Id&quot;) == strAccountId || (strSRTaxId == noTaxId || strSRTaxId == &quot;&quot;))
						{
							bcAsset.ActivateField(&quot;VF Dunning Status&quot;);
							var dunningStatus = bcAsset.GetFieldValue(&quot;VF Dunning Status&quot;);
							var docStatus = bcAsset.GetFieldValue(&quot;VF Document Missing Status&quot;);

							if ( donorOperator == &quot;&quot;)
							//Date Comparison Code
							{
								var sInstallDate = new Date(checkDate);
								var dToday = GetCurrentDate(); 
								var iTodaySec = dToday.getTime()/1000;
								var iDateSec = sInstallDate.getTime()/1000;
								var iDiff = Clib.difftime(iTodaySec,iDateSec);
								var iDiffDays = ((iDiff/60)/60)/24;
								if(sInstallDate&gt;decisionDate)
									autoRejectDate=AddtoDate(sInstallDate,90);
									
									autoRejectDate=new Date(autoRejectDate);
								if((strOrderReason2==strHATSAHKUL) &amp;&amp; assetStatus == Active &amp;&amp; dToday &lt;= autoRejectDate)//CR756 
								{
									 bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
									 bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002042&quot;));
								}
								//else if (iDiffDays &lt;= timeCheck) - ITSL2030
								else if (iDiffDays &lt;= timeCheck &amp;&amp; strOrigStartDate == &quot;&quot;)
								{
									bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
									bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002036&quot;));
								}
								else if(assetStatus == Active &amp;&amp; strOrderReason == RsnTranferCross)
								{
									bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
									bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002035&quot;));
								}
								else if(assetStatus == Active &amp;&amp; strOrderReason == strMSISDNChange)
								{
									bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
									bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002031&quot;));
								}	
							}
							if(assetStatus==Suspended &amp;&amp; (LastReason == strCancelledDunning || LastReason == strCancelledCustomerReq || LastReason == strResumeFromClosed || LastReason == strResumeFromFrozen || LastReason == strCancMissingDocumentS || LastReason == strCancMissingDocument))
							{
								bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
								bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
							}
							else if(strSRTaxId != strACCTaxId)
							{
								bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
				                bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002003&quot;));
							}
							//CR171c
							else if(CustStatus == &quot;212&quot; || dunningStatus == &quot;211&quot; || docStatus == &quot;220&quot;|| docStatus == &quot;2005&quot;)
							{
								bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;)); //Modified from Reject as per defect C_MSP00001257. Ask Safak.Bilmez for more information
								bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
							}
							// this is inactiveted for TLG-3253
							//else if(CheckCancelSR(assetId,true))
							//{
							//		bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
							//		bcVFMNPPortOut.SetFieldValue (&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002034&quot;));
							//}	
						}
						else
						{
							bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
							bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002030&quot;));
						}
						bcVFMNPPortOut.SetFieldValue(&quot;Asset Id&quot;,assetId);
						bcVFMNPPortOut.WriteRecord();
					}
					else
					{
						strAssetSrcExpr = &quot;[Serial Number] = &apos;&quot;+strMSISDN+&quot;&apos; AND [Status] = &apos;&quot;+App.InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;)+&quot;&apos;&quot;;
						bcAsset.ClearToQuery ();
						bcAsset.SetViewMode(AllView);
						bcAsset.ActivateField(&quot;Serial Number&quot;);
						bcAsset.ActivateField(&quot;Status&quot;);
						bcAsset.ActivateField(&quot;Owner Account Id&quot;);
						bcAsset.ActivateField(&quot;Install Date&quot;);
						bcAsset.ActivateField(&quot;Reason Code&quot;);
						bcAsset.SetSearchExpr(strAssetSrcExpr);
						bcAsset.ExecuteQuery(ForwardOnly);
						if (bcAsset.FirstRecord())
						{
							assetStatus = bcAsset.GetFieldValue(&quot;Status&quot;);
							LastReason = bcAsset.GetFieldValue(&quot;Reason Code&quot;);
							if(assetStatus == App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;) &amp;&amp; LastReason == &quot;1020&quot;)
							{
								bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
								bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;SBL000005&quot;));
								bcVFMNPPortOut.WriteRecord();
							}
							else
							{
								bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
								bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
								bcVFMNPPortOut.WriteRecord();
							}
						}
						else
						{
							bcVFMNPPortOut.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
							bcVFMNPPortOut.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
							bcVFMNPPortOut.WriteRecord();
						}
					}
				}
				booRecExists = bcVFMNPPortOut.NextRecord ();
			}
			bcVFMNPPortOut.ClearToQuery ();
			bcVFMNPPortOut.SetViewMode (AllView);
			bcVFMNPPortOut.ActivateField (&quot;VF Status&quot;);
			bcVFMNPPortOut.ExecuteQuery (ForwardOnly);
			booMSISDNRecExists = bcVFMNPPortOut.FirstRecord ();
			while (booMSISDNRecExists)
			{
				strMSISDNStatus = bcVFMNPPortOut.GetFieldValue (&quot;VF Status&quot;);
				if (strMSISDNStatus != App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;))
				{
					strCloseSRFlag = &quot;N&quot;;
					break;
				}
				booMSISDNRecExists = bcVFMNPPortOut.NextRecord ();
			}
			if (strCloseSRFlag == &quot;Y&quot;)
			{
				bcSR.SetFieldValue(&quot;Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;));
				bcSR.SetFieldValue(&quot;Sub-Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;,&quot;Resolved&quot;));
				bcSR.WriteRecord();
			}
		}
	}
	catch (e)
	{
		kpiStatus = &quot;KO &quot; + e.errText ;
		throw(e);
	}
	finally
	{
		psKPIin.SetProperty(&quot;timestampEnd&quot;,((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds()));			 
		psKPIin.SetProperty(&quot;kpiStatus&quot;,kpiStatus);
		callKPI(psKPIin,psKPIout);
		BS = null;
		inProp = null;
		outProp = null;
		SysDate = null;
		SysMonth = null;
		SysYear = null;
		SysDay = null;
		SysHour = null;
		SysMin = null;
		SysSec = null;	
		bcOrderItemHP = null;
		boOrderHP = null;
		bcAssetXA = null;
		bcAsset = null;
		boAsset = null;
		bcVFMNPPortOut = null;
		bcSR = null;
		boVFSR = null;
		psKPIout = null;
		psKPIin = null;
		App = null;	
	}
}"
			   SEQUENCE="5"
			   UPDATED="04/01/2016 10:42:26"
			   UPDATED_BY="FGUEDES"
			   CREATED="02/04/2010 12:15:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMNPOrderCBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMNPOrderCBU (Inputs, Outputs)
{
	try
	{
		var App=TheApplication();
		var strStartDate=&quot;&quot;;
		var strOrigStartDate=&quot;&quot;;
		var strInstallDate=&quot;&quot;;
		var strAssetStatus=&quot;&quot;;
		var strAssetSrcExpr=&quot;&quot;;
		var strMSISDN=&quot;&quot;;
		var strAccountId=&quot;&quot;;
		var strCloseSRFlag=&quot;Y&quot;;
		var strMSISDNStatus=&quot;&quot;;
		var donorOperator=&quot;&quot;;
		var assetId=&quot;&quot;;
		var CustStatus=&quot;&quot;;
		var LastReason=&quot;&quot;;
		var booRecExists;
		var booMSISDNRecExists;
		var SysDate=GetCurrentDate();
		var SysMonth=SysDate.getMonth()+1;
		var SysYear=SysDate.getFullYear();
		var SysDay=SysDate.getDate();
		var SysHour=SysDate.getHours();
		var SysMin=SysDate.getMinutes()+1;
		var SysSec=SysDate.getSeconds()+1;
		var assetStatus=&quot;&quot;;
		var psKPIin:PropertySet=App.NewPropertySet();
		var psKPIout:PropertySet=App.NewPropertySet();
		var psMETROin:PropertySet=App.NewPropertySet();
		var psMETROout:PropertySet=App.NewPropertySet();
		var kpiStatus=&quot;OK&quot;;
		var today=GetCurrentDate();   
		var timestampStart=((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());  	
		var boVFSR:BusObject=App.GetBusObject(&quot;Service Request&quot;);
		var bcServiceRequest:BusComp=boVFSR.GetBusComp (&quot;Service Request&quot;);
		var strSRId=Inputs.GetProperty(&quot;ServiceRequestId&quot;);
		var strTATCId=Inputs.GetProperty (&quot;sNationalID&quot;);
		var sIsConsumerRequest=Inputs.GetProperty(&quot;IsConsumerRequest&quot;);
		var BS:Service=App.GetService(&quot;VF TRK Utilities&quot;);	
		var inProp:PropertySet=App.NewPropertySet();
		var outProp:PropertySet=App.NewPropertySet();
		inProp.SetProperty(&quot;strSRId&quot;,strSRId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);			
		var strMSISDNSrcExpr = &quot;[VF Status] &lt;&gt; &apos;&quot;+App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;)+&quot;&apos;&quot;;
		var noTaxId=App.InvokeMethod(&quot;lookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;);
		var strSRSrcExpr=&quot;[Id] = &apos;&quot;+strSRId+&quot;&apos;&quot;;
		var bcMNPPO:BusComp=boVFSR.GetBusComp(&quot;VF MNP Port Out MSISDN&quot;);
		var strSRTaxId=&quot;&quot;;
		var strACCTaxId=&quot;&quot;;
		var Active=App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var Suspended=App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);
		var strAutoRejectStatus=App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;)
		var strAutoAcceptStatus=App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autoaccepted&quot;)
		var bsWPRAsync:Service=App.GetService(&quot;Workflow Process Manager&quot;);
		var psWFIn:PropertySet=App.NewPropertySet();
		var psWFOut:PropertySet=App.NewPropertySet();
		var boAsset:BusObject=App.GetBusObject(&quot;Asset Management&quot;);
		var bcAsset:BusComp=boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var bcAssetXA :BusComp=boAsset.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);
		var strCancelledStatus=App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var strCompleteStatus=App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var RsnTranferCross=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strMSISDNChange=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;229&quot;);
		var strLimitedVoluntary=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;205&quot;);
		var strClosedVoluntary=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;208&quot;);
		var strFrozenVoluntary=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;210&quot;);
		var strCancelledDunning=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;211&quot;);
		var strCancelledCustomerReq=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;212&quot;);
		var strResumeFromClosed=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;213&quot;);
		var strResumeFromFrozen=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;214&quot;);
		var strCancMissingDocumentS=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2005&quot;);
		var strCancMissingDocument=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;220&quot;);
		var strHATSAHKUL=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2200&quot;);//CR 756
		var autoRejectDate=new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;MNP_Block_Date&quot;));//CR756 31.12.2013
		var decisionDate=new Date(App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_AUTOREJECT_DATE&quot;,&quot;BTK_Dec&quot;));
		var timeCheck=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_X_DAYS_AUTOREJECT&quot;,&quot;Time_in_days&quot;);	
		var boOrderHP:BusObject	=App.GetBusObject(&quot;X Order Entry&quot;);
		var bcOrderItemHP:BusComp=boOrderHP.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var searchOrderExpr2=&quot;&quot;;
		var IntegId=&quot;&quot;;
		var strOrderReason=&quot;&quot;;
		var strOrderReason2=&quot;&quot;;
		var strOrderType=&quot;&quot;;
		var strSRTCId=&quot;&quot;;
		var sTotAccept=0;
		psKPIin.SetProperty(&quot;SrId&quot;,strSRId);
		psKPIin.SetProperty(&quot;timestampStart&quot;,timestampStart);
		psKPIin.SetProperty(&quot;timestampEnd&quot;,&quot;&quot;);
		psKPIin.SetProperty(&quot;rootTransactionId&quot;,strSRId + today.toString());
		psKPIin.SetProperty(&quot;kpiStatus&quot;,kpiStatus);	
		with(bcServiceRequest)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Sub-Status&quot;);
			ActivateField(&quot;Tax ID&quot;);
			ActivateField(&quot;CF Contact SSN&quot;);
			SetSearchExpr(strSRSrcExpr);
		}
		bcMNPPO.ClearToQuery();
		bcMNPPO.SetViewMode(AllView);
		bcMNPPO.ActivateField(&quot;VF MSISDN&quot;);
		bcMNPPO.ActivateField(&quot;VF Reason&quot;);
		bcMNPPO.ActivateField(&quot;VF Status&quot;);    		  	
		bcMNPPO.ActivateField(&quot;Asset Id&quot;);

		bcServiceRequest.ExecuteQuery(ForwardOnly);//VFTK Lilanath 25042012 : No changes as per Oracle script 15 review since strSRId is a mandatory input

		if (bcServiceRequest.FirstRecord())
      	{
			strAccountId=bcServiceRequest.GetFieldValue(&quot;Account Id&quot;);
			strSRTaxId=bcServiceRequest.GetFieldValue(&quot;Tax ID&quot;);
			strSRTCId=bcServiceRequest.GetFieldValue(&quot;CF Contact SSN&quot;);
			booRecExists=bcMNPPO.FirstRecord();
			while(booRecExists)
			{
				strMSISDN=bcMNPPO.GetFieldValue(&quot;VF MSISDN&quot;);
				strAssetSrcExpr=&quot;[Serial Number] = &apos;&quot;+strMSISDN+&quot;&apos; AND ([Status] = &apos;&quot;+Active+&quot;&apos; OR [Status] = &apos;&quot;+Suspended+&quot;&apos;) AND [Product Part Number] = &apos;70000&apos;&quot;;

				with(bcAsset)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Serial Number&quot;);
					ActivateField(&quot;Status&quot;);
					ActivateField(&quot;VF Customer Status&quot;);//CR171c
					ActivateField(&quot;Owner Account Id&quot;);
					ActivateField(&quot;Install Date&quot;);
					ActivateField(&quot;Reason Code&quot;);
					ActivateField(&quot;Integration Id&quot;);
					ActivateField(&quot;Start Date&quot;);
					ActivateField(&quot;VF Donor Operator&quot;);//JIRA-30715:20160627:Add
					ActivateField(&quot;VF Tax Id Number&quot;);
					SetSearchExpr(strAssetSrcExpr);
				}
				with(bcAssetXA)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Name&quot;);
					ActivateField(&quot;Text Value&quot;);
					SetSearchSpec(&quot;Name&quot;,&quot;Donor Operator&quot;);
				}
				bcAsset.ExecuteQuery(ForwardOnly);				
				if (strSRTCId==strTATCId)//WA#18-Compare TCId between Vodafone and TA 
				{
					bcMNPPO.SetFieldValue(&quot;VF Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autoaccepted&quot;));
					bcMNPPO.WriteRecord();
				}
				else
				{
					bcMNPPO.SetFieldValue(&quot;VF Status&quot;, strAutoRejectStatus);
					bcMNPPO.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002009&quot;));
					bcMNPPO.WriteRecord();
				}//End
				if (bcAsset.FirstRecord ())
				{	
					assetStatus= bcAsset.GetFieldValue(&quot;Status&quot;);
					LastReason= bcAsset.GetFieldValue(&quot;Reason Code&quot;);
					assetId= bcAsset.GetFieldValue(&quot;Id&quot;);
					IntegId= bcAsset.GetFieldValue(&quot;Integration Id&quot;);
					CustStatus=bcAsset.GetFieldValue(&quot;VF Customer Status&quot;);
					strStartDate=bcAsset.GetFieldValue(&quot;Start Date&quot;);
					strOrigStartDate=bcAsset.GetFieldValue(&quot;VF Orig Start Date&quot;);
					strInstallDate=bcAsset.GetFieldValue(&quot;Install Date&quot;);//CR171c
					strACCTaxId=bcAsset.GetFieldValue(&quot;VF Tax Id Number&quot;);
					var checkDate=(strOrigStartDate != &quot;&quot;) ? strOrigStartDate : strInstallDate;
					if (bcAssetXA.FirstRecord())
						donorOperator=bcAssetXA.GetFieldValue(&quot;Text Value&quot;);

					if (donorOperator == null || donorOperator == &quot;&quot;)//JIRA-30715:20160627:Add
                        donorOperator=bcAsset.GetFieldValue(&quot;VF Donor Operator&quot;);

					searchOrderExpr2	= &quot;[Asset Integration Id]=&apos;&quot;+IntegId+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strCancelledStatus+&quot;&apos;&quot;; //CR756
					searchOrderExpr2 = searchOrderExpr2 + &quot; AND ([TELCO Action Reason] = &apos;&quot;+strHATSAHKUL+&quot;&apos; OR [TELCO Action Reason] = &apos;&quot;+RsnTranferCross+&quot;&apos; OR [TELCO Action Reason] = &apos;&quot;+strMSISDNChange+&quot;&apos;)&quot;; //VFTRCBU-24578

					with(bcOrderItemHP)
					{
						ClearToQuery();
						SetViewMode(AllView);	
						ActivateField(&quot;TELCO Action Reason&quot;); //&quot;Order Sub Type&quot;//VFTRCBU-24578
						ActivateField(&quot;Order Type&quot;);
						SetSearchExpr(searchOrderExpr2);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							strOrderReason2 = GetFieldValue(&quot;TELCO Action Reason&quot;); //&quot;Order Sub Type&quot;//VFTRCBU-24578

						    if(GetFieldValue(&quot;Status&quot;) != strCancelledStatus &amp;&amp; GetFieldValue(&quot;Status&quot;) != strCompleteStatus)
							{
								strOrderType = GetFieldValue(&quot;Order Type&quot;);
								strOrderReason = GetFieldValue(&quot;TELCO Action Reason&quot;); //&quot;Order Sub Type&quot;//VFTRCBU-24578
							}
						}
					}
					psMETROin.SetProperty(&quot;MSISDN&quot;,strMSISDN);
					var MetroExist = CheckAssetMetropolis(psMETROin,psMETROout);
					if (bcAsset.GetFieldValue (&quot;Owner Account Id&quot;) == strAccountId) //WA#18Remove Tax Validation
					{
						bcAsset.ActivateField(&quot;VF Dunning Status&quot;);
						var dunningStatus = bcAsset.GetFieldValue(&quot;VF Dunning Status&quot;);
						var docStatus	= bcAsset.GetFieldValue(&quot;VF Document Missing Status&quot;);
						if ( donorOperator == &quot;&quot;)						
						{//Date Comparison Code
							var sInstallDate = new Date(checkDate);
							var dToday = GetCurrentDate();
							var iTodaySec = dToday.getTime()/1000;
							var iDateSec = sInstallDate.getTime()/1000;
							var iDiff = Clib.difftime(iTodaySec,iDateSec);
							var iDiffDays = ((iDiff/60)/60)/24;
							if(sInstallDate&gt;decisionDate)
								autoRejectDate=AddtoDate(sInstallDate,90);
								autoRejectDate=new Date(autoRejectDate);
							if((strOrderReason2==strHATSAHKUL) &amp;&amp; assetStatus == Active &amp;&amp; dToday &lt;= autoRejectDate)//CR756 
							{
								 bcMNPPO.SetFieldValue (&quot;VF Status&quot;, strAutoRejectStatus);
								 bcMNPPO.SetFieldValue (&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002042&quot;));
							}
							//JIRA-30715:20160711:Add OrigStartDate condition
							else if (iDiffDays &lt;= timeCheck &amp;&amp; MetroExist == false &amp;&amp; strOrigStartDate == &quot;&quot;)
							{
								bcMNPPO.SetFieldValue (&quot;VF Status&quot;, strAutoRejectStatus);
								bcMNPPO.SetFieldValue (&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002036&quot;));
							}
							else if(assetStatus == Active &amp;&amp; strOrderReason == RsnTranferCross)
							{
								bcMNPPO.SetFieldValue (&quot;VF Status&quot;, AstrAutoRejectStatus);
								bcMNPPO.SetFieldValue (&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002035&quot;));
							}
							else if(assetStatus == Active &amp;&amp; strOrderReason == strMSISDNChange)
							{
								bcMNPPO.SetFieldValue (&quot;VF Status&quot;, strAutoRejectStatus);
								bcMNPPO.SetFieldValue (&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002031&quot;));
							}	
						}
						if(assetStatus==Suspended &amp;&amp; (LastReason == strCancelledDunning || LastReason == strCancelledCustomerReq || LastReason == strResumeFromClosed || LastReason == strResumeFromFrozen || LastReason == strCancMissingDocumentS || LastReason == strCancMissingDocument))
						{
							bcMNPPO.SetFieldValue (&quot;VF Status&quot;, strAutoRejectStatus);
							bcMNPPO.SetFieldValue (&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
						}
						else if(CustStatus == &quot;212&quot; || dunningStatus == &quot;211&quot; || docStatus == &quot;220&quot;|| docStatus == &quot;2005&quot;)
						{
							bcMNPPO.SetFieldValue(&quot;VF Status&quot;, strAutoRejectStatus);
							bcMNPPO.SetFieldValue (&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
						}
					}
					else
					{
						bcMNPPO.SetFieldValue(&quot;VF Status&quot;, strAutoRejectStatus);
						bcMNPPO.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR002030&quot;));
					}
					bcMNPPO.SetFieldValue(&quot;Asset Id&quot;,assetId);
					bcMNPPO.WriteRecord();
				}
				else
				{
					strAssetSrcExpr= &quot;[Serial Number] = &apos;&quot;+strMSISDN+&quot;&apos; AND [Status] = &apos;&quot;+App.InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;)+&quot;&apos;&quot;;
					with(bcAsset){
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;Serial Number&quot;);
						ActivateField(&quot;Status&quot;);
						ActivateField(&quot;Owner Account Id&quot;);
						ActivateField(&quot;Install Date&quot;);
						ActivateField(&quot;Reason Code&quot;);
						SetSearchExpr(strAssetSrcExpr);
						ExecuteQuery(ForwardOnly);
					}
					if (bcAsset.FirstRecord())
					{
						assetStatus= bcAsset.GetFieldValue(&quot;Status&quot;);
						LastReason= bcAsset.GetFieldValue(&quot;Reason Code&quot;);
						if(assetStatus==App.InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;) &amp;&amp; LastReason==&quot;1020&quot;)
						{
							bcMNPPO.SetFieldValue(&quot;VF Status&quot;, strAutoRejectStatus);
							bcMNPPO.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;SBL000005&quot;));
							bcMNPPO.WriteRecord();
						}
						else
						{
							bcMNPPO.SetFieldValue(&quot;VF Status&quot;, strAutoRejectStatus);
							bcMNPPO.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
							bcMNPPO.WriteRecord();
						}
					}
					else
					{
						bcMNPPO.SetFieldValue(&quot;VF Status&quot;, strAutoRejectStatus);
						bcMNPPO.SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,&quot;OPR001001&quot;));
						bcMNPPO.WriteRecord();
					}
				}

				if (bcMNPPO.GetFieldValue(&quot;VF Status&quot;) != strAutoRejectStatus)
					sTotAccept = sTotAccept+1;

			booRecExists = bcMNPPO.NextRecord();
		}
		with(bcMNPPO)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Status&quot;);
			ExecuteQuery(ForwardOnly);
		} //ALINO CR129 START RETROFIT
		var autoAcceptCount=0;
		var autoRejectCount=0;
		var strTotalCount=0;

		booMSISDNRecExists=bcMNPPO.FirstRecord();
		while (booMSISDNRecExists)
		{
			strMSISDNStatus = bcMNPPO.GetFieldValue (&quot;VF Status&quot;);
			if(strMSISDNStatus == strAutoRejectStatus)
			{
				autoRejectCount++;
			}
			else if(strMSISDNStatus == strAutoAcceptStatus)
			{
				autoAcceptCount++;
			}
			if (strMSISDNStatus != strAutoRejectStatus &amp;&amp; strMSISDNStatus != strAutoAcceptStatus)
			{
				strCloseSRFlag = &quot;N&quot;;
				break;
			}
			strTotalCount++;
			booMSISDNRecExists = bcMNPPO.NextRecord ();
		}
		if(strTotalCount=autoAcceptCount+autoRejectCount)
		{
			strCloseSRFlag=&quot;Y&quot;;
		}
		if (strCloseSRFlag == &quot;Y&quot;)
		{
			//ESANTOS - VFTRCBU-37166 - setfieldValue sequence changed
			bcServiceRequest.InvokeMethod(&quot;RefreshBusComp&quot;);
			bcServiceRequest.SetFieldValue (&quot;Sub-Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;,&quot;Resolved&quot;));
			bcServiceRequest.SetFieldValue (&quot;Status&quot;, App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;));
			bcServiceRequest.WriteRecord ();
		} //ALINO CR129 END RETROFIT

		with(psWFIn)
		{
			SetProperty(&quot;CurDate&quot;,SysDate)
			SetProperty(&quot;Counter&quot;,sTotAccept)
			SetProperty(&quot;AccountId&quot;,strAccountId);								
			SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU MNP Sales Team Notification&quot;);
		}
		bsWPRAsync.InvokeMethod(&quot;RunProcess&quot;, psWFIn, psWFOut);
	}
	}
	catch(e)
	{
		kpiStatus = &quot;KO &quot; + e.errText ;
		throw(e);
	}
	finally
	{
		psKPIin.SetProperty(&quot;timestampEnd&quot;,((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds()));			 
		psKPIin.SetProperty(&quot;kpiStatus&quot;,kpiStatus);
		callKPI(psKPIin,psKPIout);
		psWFIn=null;
		psWFOut=null;
		bsWPRAsync=null;
		BS=null;
		inProp=null;
		outProp=null;
		SysDate=null;
		SysMonth=null;
		SysYear=null;
		SysDay=null;
		SysHour=null;
		SysMin=null;
		SysSec=null;	
		bcOrderItemHP=null;
		boOrderHP=null;
		bcAssetXA=null;
		bcAsset=null;
		boAsset=null;
		bcMNPPO=null;
		bcServiceRequest=null;
		boVFSR=null;
		psKPIout=null;
		psKPIin=null;
		psMETROout=null;
		psMETROin=null;
		App=null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="03/21/2017 12:33:40"
			   UPDATED_BY="RLOURENCO"
			   CREATED="01/27/2015 18:05:12"
			   CREATED_BY="PSILVA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCurrentDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCurrentDate() {
	//Created due to Oracle Bug 10589024 : [CR#12-1XHF9OH][FR#12-1XHF9P2] CLIB LIBRARY AND DATE OBJECT HAVE DIFFERENT RESUL
	//Date constructor does not work properly in HP-UX

	var currentDate : chars;
	Clib.strftime(currentDate, &apos;%m/%d/%Y %H:%M:%S&apos;, Clib.localtime(Clib.time()));
	 
	return new Date(currentDate);
}"
			   SEQUENCE="7"
			   UPDATED="03/31/2016 12:10:49"
			   UPDATED_BY="FGUEDES"
			   CREATED="03/31/2016 12:09:35"
			   CREATED_BY="FGUEDES">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;CheckMNPOrder&quot;)
	{				
		CheckMNPOrder (Inputs, Outputs);				
		return (CancelOperation);		
	}//Method
	
	if (MethodName == &quot;CheckMNPOrderCBU&quot;)
	{				
		CheckMNPOrderCBU (Inputs, Outputs);				
		return (CancelOperation);		
	}//Method
	return (ContinueOperation);
}//Function"
			   SEQUENCE="8"
			   UPDATED="03/31/2016 12:09:35"
			   UPDATED_BY="FGUEDES"
			   CREATED="02/04/2010 12:15:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="callKPI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function callKPI(Inputs,Outputs)
{
	try
	{
		var SrId = Inputs.GetProperty(&quot;SrId&quot;);
		var timestampStart = Inputs.GetProperty(&quot;timestampStart&quot;);
		var timestampEnd = Inputs.GetProperty(&quot;timestampEnd&quot;);
		var today = GetCurrentDate();				
		var rootTransactionId = Inputs.GetProperty(&quot;rootTransactionId&quot;);
		var kpiStatus = Inputs.GetProperty(&quot;kpiStatus&quot;);
		var bsACSGeneralOp:Service;
		var bsIn:PropertySet;
		var bsOut:PropertySet;
			if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;C&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;O&quot;)){			
				bsACSGeneralOp = TheApplication().GetService(&quot;ACS General Operations&quot;);
				bsIn = TheApplication().NewPropertySet();
				bsOut= TheApplication().NewPropertySet();
				var processName = &quot;VF MNP Order Auto Reject&quot;;
				var status = &quot;OK&quot;;
				var task = &quot;BS_VF MNP Order Auto Reject_2&quot;;
				var userId = TheApplication().LoginName();
				
				bsIn.SetProperty(&quot;UserId&quot;,userId);
				bsIn.SetProperty(&quot;description&quot;,&quot;VF MNP Order Auto Reject&quot;);
				bsIn.SetProperty(&quot;kpiRef&quot;,SrId);
				bsIn.SetProperty(&quot;processName&quot;,processName);
				bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
				bsIn.SetProperty(&quot;status&quot;,kpiStatus);
				bsIn.SetProperty(&quot;task&quot;,task);
				bsIn.SetProperty(&quot;timestampEnd&quot;,timestampEnd);
				bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);	
				bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
				var output = bsOut.GetProperty(&quot;result&quot;);
									
					
			}	
	}
	finally
	{
		bsOut = null;
		bsIn = null;
		bsACSGeneralOp = null;
	}

}"
			   SEQUENCE="2"
			   UPDATED="04/01/2016 10:43:33"
			   UPDATED_BY="FGUEDES"
			   CREATED="07/02/2010 17:30:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



