<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="20140703 - VFTRCBU Project for WP#18 objects"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VFTRCBU EBU Conversion_Promotions"
	   UI_FREEZE="N"
	   UPDATED="05/19/2017 18:13:37"
	   UPDATED_BY="MLUIS"
	   CREATED="07/03/2014 14:23:37"
	   CREATED_BY="RLOURENCO"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="WA#39:20140926:functions from old ACNSubmitOrder applet server script"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VFTREBU Convertion Server II BS"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="05/19/2017 18:13:57"
		   UPDATED_BY="MLUIS"
		   CREATED="11/21/2014 19:35:30"
		   CREATED_BY="MSOUSA">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Call_BS_Create_SR"
			   UPDATED="01/22/2015 16:50:56"
			   UPDATED_BY="MSOUSA"
			   CREATED="01/22/2015 16:50:34"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/22/2015 16:50:42"
				   UPDATED_BY="MSOUSA"
				   CREATED="01/22/2015 16:50:42"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckCancelFlg"
			   UPDATED="11/21/2014 19:35:30"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:30"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:30"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckCancellationDocuments"
			   UPDATED="11/21/2014 19:35:30"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:30"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:30"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:30"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckCompatibilityRulesForFraud"
			   UPDATED="07/04/2016 18:01:48"
			   UPDATED_BY="MSOUSA"
			   CREATED="07/04/2016 17:53:24"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="fraud"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/04/2016 18:01:38"
				   UPDATED_BY="MSOUSA"
				   CREATED="07/04/2016 18:01:38"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2016 17:54:03"
				   UPDATED_BY="MSOUSA"
				   CREATED="07/04/2016 17:54:03"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckDealerCode"
			   UPDATED="11/21/2014 19:35:30"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:30"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderDealerCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:30"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOrderConfiguredOrNot"
			   UPDATED="11/21/2014 19:35:30"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:30"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/21/2014 19:35:30"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GIBOrderMgmt"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strVFGIBAccountStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="NewCheckDonorOperator"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="NewCheckEligDisc"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="NewUpdateOrderPendingAndCreateSR"
			   UPDATED="10/22/2015 15:31:54"
			   UPDATED_BY="SADMIN"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="JIRA16405"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/22/2015 15:31:54"
				   UPDATED_BY="SADMIN"
				   CREATED="10/22/2015 15:31:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderVFDocWillBeFaxed"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="JIRA16405"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/22/2015 15:31:54"
				   UPDATED_BY="SADMIN"
				   CREATED="10/22/2015 15:31:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="NewUpdateOrderWaitingAndCreateSR"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateBillCycle"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderVFIsMBA"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateParentOrderOpen"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateParentOrderWaiting"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkTAFields"
			   UPDATED="11/21/2014 19:35:31"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strAccountMarketClass"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strVFFlagCustomerPF"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strVFTACertifyCircular"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strVFTACircularOn"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strVFTAName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strVFTATcId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strX_Primary_contact"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/21/2014 19:35:31"
				   UPDATED_BY="MSOUSA"
				   CREATED="11/21/2014 19:35:31"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Call_BS_Create_SR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Call_BS_Create_SR(Inputs:PropertySet, Outputs:PropertySet)
//function Call_BS_Create_SR(orderId : String)
{
  try
  {	

//	var thisBC = this.BusComp();												//WA39:MSS
//	var orderId = thisBC.GetFieldValue(&quot;Order Id&quot;);								//WA39:MSS
	var orderId = Inputs.GetProperty(&quot;orderId&quot;) 								//WA18:MSS
   
	var TheApp = TheApplication();
	var oBOOrder : BusObject = TheApp.GetBusObject(&quot;Order Entry (Sales)&quot;);		//WA39:MSS
    var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);		//WA39:MSS

    oBCOrder.SetViewMode(AllView);												//WA39:MSS
	oBCOrder.ClearToQuery();  													//WA39:MSS
	oBCOrder.ActivateField(&quot;Acquisition Date&quot;);									//WA39:MSS
	oBCOrder.ActivateField(&quot;Service Request Id&quot;);								//WA39:MSS
	oBCOrder.ActivateField(&quot;Account Id&quot;);										//WA39:MSS
	oBCOrder.ActivateField(&quot;Port Id&quot;);										    //WA39:MSS
//	oBCOrder.SetSearchSpec(&quot;Id&quot;, orderId);										//WA39:MSS
	oBCOrder.SetSearchSpec(&quot;Id&quot;, orderId);										//WA39:MSS
	oBCOrder.ExecuteQuery(ForwardOnly);											//WA39:MSS
	if(!oBCOrder.FirstRecord())													//WA39:MSS
	{																			//WA39:MSS
	  TheApp.RaiseErrorText(TheApp.LookupMessage(&quot;VF Message Category&quot;, &quot;SBL-DMN-001&quot;));   //WA39:MSS
	}																			//WA39:MSS	
	
//	var orderAcqDate = thisBC.GetFieldValue(&quot;Acquisition Date&quot;);				//WA39:MSS
    var orderAcqDate = oBCOrder.GetFieldValue(&quot;Acquisition Date&quot;);				//WA39:MSS
//	var StrSrOrder = thisBC.GetFieldValue(&quot;Service Request Id&quot;);				//WA39:MSS
	var StrSrOrder = oBCOrder.GetFieldValue(&quot;Service Request Id&quot;);				//WA39:MSS
    var sPortId = oBCOrder.GetFieldValue(&quot;Port Id&quot;);							//WA39:MSS

	var boServiceReq:BusObject;
	var bcServiceReq:BusComp;
	var psInputs:PropertySet;
	var psOutputs:PropertySet;
	var bsGeneralOperations:Service; 	

	//++PSANTOS VFTRCBU-31442	
	var bSubDealerFlag = &quot;&quot;;			

	if(StrSrOrder != &quot;&quot;)
	{		
		boServiceReq = TheApp.GetBusObject(&quot;Service Request&quot;);
		bcServiceReq = boServiceReq.GetBusComp(&quot;Service Request&quot;);
		
		bcServiceReq.SetViewMode(AllView);
		bcServiceReq.ClearToQuery ();
		bcServiceReq.ActivateField (&quot;VFTRCBU Sub Dealer SR Flag&quot;);
		bcServiceReq.SetSearchSpec (&quot;Id&quot;, StrSrOrder);
		bcServiceReq.ExecuteQuery (ForwardOnly);
		
		if(bcServiceReq.FirstRecord())
			bSubDealerFlag = bcServiceReq.GetFieldValue(&quot;VFTRCBU Sub Dealer SR Flag&quot;);
	}//--PSANTOS VFTRCBU-31442		
	if(StrSrOrder == &quot;&quot; || bSubDealerFlag == &quot;Y&quot;) //PSANTOS VFTRCBU-31442 - Added bSubDealerFlag to allow the SR Creation for PRM Sub Dealer SRs
	{
//	  var strAccountId = thisBC.GetFieldValue(&quot;Account Id&quot;);					//WA39:MSS
	  var strAccountId = oBCOrder.GetFieldValue(&quot;Account Id&quot;);					//WA39:MSS

	  var strType = &quot;&quot;;
	  var strArea = &quot;&quot;;
	  var strSubArea = &quot;&quot;;
	  var strSubStatus = &quot;&quot;;
	  var strSRCategory = &quot;&quot;;
	  var strOwnerGroup = &quot;&quot;;
	  var strDescription = &quot;&quot;;
	  var strStatus	= &quot;&quot;;						
		
	  strType = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP Port In SR&quot;,&quot;Type&quot;);//&quot;İŞLEM&quot;;
	  strArea = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP Port In SR&quot;,&quot;Area&quot;);//&quot;MNP&quot;;
	  strSubArea = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP Port In SR&quot;,&quot;SubArea&quot;);//&quot;PORT-IN BAŞVURU KONTROL&quot;;
	  strSubStatus = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;,&quot;Assigned&quot;);
	  strSRCategory = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR_CATEGORY&quot;,&quot;MNP IN&quot;);
	  strOwnerGroup = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR _MNP_IN_DIVISION&quot;,&quot;DKT Port In&quot;);
	  strStatus = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;);
	  strDescription = &quot;PROCESS ORDER MNP PORT-IN&quot;;				
			
	  psInputs			= 	TheApp.NewPropertySet();
	  psOutputs			= 	TheApp.NewPropertySet();
	  bsGeneralOperations	=	TheApp.GetService (&quot;ACS General Operations&quot;);
		       
	  psInputs.SetProperty (&quot;Order Id&quot;, orderId);
	  psInputs.SetProperty (&quot;Type&quot;, strType); 
	  psInputs.SetProperty (&quot;Area&quot;, strArea);
	  psInputs.SetProperty (&quot;Sub Area&quot;, strSubArea);
	  psInputs.SetProperty (&quot;Status&quot;, strStatus);
	  psInputs.SetProperty (&quot;Sub Status&quot;, strSubStatus);
	  psInputs.SetProperty (&quot;Description&quot;, strDescription);
	  psInputs.SetProperty (&quot;VF SR Category&quot;, strSRCategory);
	  psInputs.SetProperty (&quot;Account Id&quot;, strAccountId);
	  psInputs.SetProperty (&quot;Owner Group&quot;, strOwnerGroup);
	  psInputs.SetProperty (&quot;Port Id&quot;, sPortId);
		
	  bsGeneralOperations.InvokeMethod (&quot;CreateSR&quot;, psInputs, psOutputs);
		
	  var strSRId = psOutputs.GetProperty(&quot;Service Request Id&quot;);
	
	  boServiceReq = TheApp.GetBusObject(&quot;Service Request&quot;);
	  bcServiceReq = boServiceReq.GetBusComp(&quot;Service Request&quot;);
	  // var strWaiting	= TheApp.InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Waiting&quot;);
	  bcServiceReq.SetViewMode(AllView);  // JIRA-14364: Added to to &quot;see&quot; the SR created by OSM   
	  bcServiceReq.ClearToQuery ();
	  bcServiceReq.ActivateField (&quot;Owned By Id&quot;);
	  bcServiceReq.ActivateField (&quot;VFTRCBU User Id&quot;);  // JIRA-VFTRCBU-14863
	  bcServiceReq.ActivateField (&quot;Order Id&quot;);
	  bcServiceReq.ActivateField (&quot;VF Acquisition Date MNP In&quot;);
	  bcServiceReq.SetSearchSpec (&quot;Id&quot;, strSRId);
	  bcServiceReq.ExecuteQuery (ForwardOnly);
		
	  if(bcServiceReq.FirstRecord())
	  {		    	    
		bcServiceReq.SetFieldValue (&quot;VFTRCBU User Id&quot;, oBCOrder.GetFieldValue(&quot;Created By&quot;));  // JIRA-VFTRCBU-14863
		bcServiceReq.SetFieldValue (&quot;Owned By Id&quot;,&quot;&quot;);
		// bcServiceReq.SetFieldValue (&quot;Order Id&quot;,orderId); // JIRA-14364 Commented. Field already contains the value of Order Id (and if not commented, an error is returned because field is RO at this point)
		bcServiceReq.SetFieldValue (&quot;VF Acquisition Date MNP In&quot;,orderAcqDate);
		bcServiceReq.WriteRecord ();	
	  }
	  
	  oBCOrder.InvokeMethod(&quot;RefreshRecord&quot;); //VFTRCBU-12194
//	  thisBC.SetFieldValue (&quot;Service Request Id&quot;,strSRId);				//WA39:MSS
	  if(bSubDealerFlag != &quot;Y&quot;) //PSANTOS VFTRCBU-31442 - The Order is already assoicated with the original SR from PRM Sub Dealer 
		  oBCOrder.SetFieldValue (&quot;Service Request Id&quot;,strSRId);			//WA39:MSS
//	  thisBC.WriteRecord();												//WA39:MSS
	  oBCOrder.WriteRecord();											//WA39:MSS
	}
	else
	{
	  /**** JIRA-VFTRCBU-10814:20150529:MS - Begin 
	  // Due to response delay in siebel while creating a SR MNP Port In, a timeout in EAI can occur.
	  // To avoid errors in OSM due to the republishing mechanism, it is assumed 
	  // that if a SR was already created, no exception/error code/error message should be sent to EAI. 
	  // In this case, the response message should be exactly the same as if the SR had just been created.
	  // Commented out the next block of code accordingly.
	  var strMessageCategory = &quot;VF Message Category&quot;;
	  var strCode			 = &quot;070&quot;;
	  var sMsg				 = TheApp.LookupMessage(strMessageCategory, strCode);
	  TheApp.RaiseErrorText(sMsg);
	  return (CancelOperation);
	  **** JIRA-VFTRCBU-10814 - End ****/
	}
  }
  catch(e)
  {
	throw(e);
  }
  finally
  {	
	TheApp 				= null;
//	thisBC				= null;									//WA39:MSS
	psInputs			= null;
	psOutputs			= null;
	bsGeneralOperations	= null;
	bcServiceReq 		= null;
	boServiceReq 		= null;
	oBOOrder			= null;									//WA39:MSS
	oBCOrder			= null;									//WA39:MSS
  }

}"
			   SEQUENCE="1"
			   UPDATED="07/14/2016 22:40:01"
			   UPDATED_BY="PSANTOS"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBA(strOrderId,strMNPPortIn)
{
  try
  {
	var ControlBS: Service;
	var InputsBS: PropertySet;
	var OutputsBS: PropertySet;
	var Appl  : Application = TheApplication();
		
	InputsBS = Appl.NewPropertySet();
	OutputsBS = Appl.NewPropertySet();
		
	InputsBS.SetProperty(&quot;OrderId&quot;,strOrderId);
	InputsBS.SetProperty(&quot;SubType&quot;,strMNPPortIn);
	ControlBS = TheApplication().GetService(&quot;VF Controls&quot;);
	ControlBS.InvokeMethod(&quot;CheckBAStatus&quot;, InputsBS, OutputsBS);
		
	var strResult = OutputsBS.GetProperty(&quot;Result&quot;);
	var strMessage = OutputsBS.GetProperty(&quot;Message&quot;);
	if(strResult == &quot;1&quot;)
	{
	  TheApplication().RaiseErrorText(strMessage);
	}
  }
  finally
  {
	ControlBS = null;
	InputsBS = null;
	OutputsBS = null;
	Appl = null;
  }
}"
			   SEQUENCE="2"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="07/06/2016 15:09:59"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCancelFlg"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCancelFlg (Inputs:PropertySet, Outputs:PropertySet)
{

  try
  {

	var BoOrderEntry  : BusObject			= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	var BcOrderEntryRevisedLI : BusComp 	= BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);			
//	var strOrderId		= this.BusComp().GetFieldValue(&quot;Id&quot;);     	//WA39:MSS
   	var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);				//WA39:MSS
	var strMessageCategory 	= &quot;VF Message Category&quot;;		
	var strCode				= &quot;&quot;;
	var sMsg				= &quot;&quot;;
    var countCancelled = 0;

	BcOrderEntryRevisedLI.SetViewMode(AllView);
	BcOrderEntryRevisedLI.ClearToQuery();
	BcOrderEntryRevisedLI.ActivateField(&quot;Order Header Id&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Line Number&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;VF Cancel Flag&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;VF Cancellation Reason&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Status&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;IsRootItem&quot;);
	BcOrderEntryRevisedLI.SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
	BcOrderEntryRevisedLI.ExecuteQuery(ForwardOnly);	
	   
	var recordExistsOnLineItems = BcOrderEntryRevisedLI.FirstRecord();  	    
    while(recordExistsOnLineItems)
	{
      if (BcOrderEntryRevisedLI.GetFieldValue(&quot;VF Cancel Flag&quot;) == &quot;Y&quot; &amp;&amp; BcOrderEntryRevisedLI.GetFieldValue(&quot;IsRootItem&quot;) == &quot;Y&quot;)
      {
          	
        if (BcOrderEntryRevisedLI.GetFieldValue(&quot;VF Cancellation Reason&quot;) == &quot;&quot; || BcOrderEntryRevisedLI.GetFieldValue(&quot;VF Cancellation Reason&quot;) == null)
      	{
		  strCode  = &quot;033&quot;;
		  sMsg	   = TheApplication().LookupMessage(strMessageCategory, strCode);
		  TheApplication().RaiseErrorText(sMsg);
		}      	
      	else 
      	  countCancelled = countCancelled +1;
      }
          
      recordExistsOnLineItems = BcOrderEntryRevisedLI.NextRecord();
    }// !while

	if (countCancelled == 0)
	{
	  strCode	= &quot;033&quot;;
	  sMsg		= TheApplication().LookupMessage(strMessageCategory, strCode);
	  TheApplication().RaiseErrorText(sMsg);
	}
  }// !try
  catch(e)
  {
	throw(e);
  }
  finally
  {
	BcOrderEntryRevisedLI	= null;
	BoOrderEntry		= null;
  }

} // !function"
			   SEQUENCE="3"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCancellationDocuments"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCancellationDocuments (Inputs:PropertySet, Outputs:PropertySet)
{

  try
  {
	var TheApp = TheApplication();
//  var thisBC = this.BusComp();									//WA39:MSS
//	var StrOrder		= thisBC.GetFieldValue(&quot;Id&quot;);				//WA39:MSS
   	var StrOrder 		= Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
//	var strOrderStatus	= thisBC.GetFieldValue(&quot;Status&quot;);			//WA39:MSS
   	var strOrderStatus  = Inputs.GetProperty(&quot;strOrderStatus&quot;);		//WA39:MSS

	var boDocumentum : BusObject	= TheApp.GetBusObject(&quot;VF Mnp Documentum&quot;);
	var bcDocumentum : BusComp	= boDocumentum.GetBusComp(&quot;VF Mnp Documentum&quot;);
					
	bcDocumentum.SetViewMode(AllView);
	bcDocumentum.ClearToQuery();
   	bcDocumentum.SetSearchSpec (&quot;Order Id&quot;, StrOrder);
 	bcDocumentum.ExecuteQuery(ForwardOnly);  
  		
   	var ItemBCExists     = bcDocumentum.FirstRecord();
 	var allVerifyYes     = true;	
	var strVerifyFlag    = null;
	
	while(ItemBCExists)
	{
	  strVerifyFlag = bcDocumentum.GetFieldValue(&quot;Verification&quot;);
				
	  if ( strVerifyFlag == &quot;N&quot;)
	  {
		allVerifyYes = false;
	  }
				
	  ItemBCExists = bcDocumentum.NextRecord();
	} 
			    
	if (allVerifyYes == false ||  strVerifyFlag == null )
	{
	  var strMessageCategory 	= &quot;VF Message Category&quot;;
	  var strCode				= &quot;008&quot;;
	  var sMsg				= TheApp.LookupMessage(strMessageCategory, strCode);
	  TheApp.RaiseErrorText(sMsg);					
	  return (CancelOperation);
	}		
  }
  catch(e)
  {
	throw(e);
  }
  finally
  {
	TheApp = null;
//	thisBC = null;						//WA39:MSS
	bcDocumentum	= null;
	boDocumentum	= null;
	StrOrder	= null;
	strOrderStatus	= null;
  }
}"
			   SEQUENCE="4"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCompatibilityRulesForFraud"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCompatibilityRulesForFraud (Inputs:PropertySet, Outputs:PropertySet)
{
/* +++ 
  a) Checks if a product (AddOn NRC associated to an order line item in a Swap Tariff Order) has Compatibility rules having this 
  AddOn NRC as Subject. 
  b) According to the Type of Rule (Excludes/Requires), it tries to find the New Tariff and Old Tariff products respctively, 
  inside the declared Product Line of the rule. 
  c) Not finding them, means that the configurator didn&apos;t force the user to delete the AddOn NRC =&gt; it&apos;s considered fraud. 
  ****2016/12/06****MLUIS
  d) Added logic preform validations for Compatibility Rule that are Product orientated instead of Product Line orientated.
  e) Altered the logic to validate all the Compatibility Rules for a Deleting Addon
  Code will validate the existence of a rule (requires or excludes) in order to verify if the reason to delete the Addon is valid
  If one rule to deleted is valid it will not be considered Fraud. Added temporary variables sTempFraudRequires &amp; sTempFraudExclude
  VFTRCBU-37597
  ****24-04-2017**** RBERTELO
   
--- */ 
  try
  {  
    var cFraud = &quot;N&quot;;
    var sTempFraudRequires = &quot;N&quot;;
	var sTempFraudExclude = &quot;N&quot;;
	
    var iRecord;
    var sActionCode = &quot;&quot;;
    var sProductId = &quot;&quot;;
    var sServiceLengthType = &quot;&quot;;
	var sProductGroup = &quot;&quot;;
    var sDeletedAddOnProdId = &quot;&quot;;
    var sAddedAddOnProdId = &quot;&quot;; //VFTRCBU-32549 - JFONSECA
    var sDeletedTariffProdId = &quot;&quot;;
    var sAddedTariffProdId = &quot;&quot;;
    var sTypeReqExc = &quot;&quot;;
    var sRelProdLineId = &quot;&quot;;
    var sRelProdId = &quot;&quot;;    //VFTRCBU-35285 - MLUIS
    var cExists = &quot;&quot;;
        
    var orderId = Inputs.GetProperty(&quot;orderId&quot;);
	var boOELI:BusObject = TheApplication().GetBusObject(&quot;Order Entry - Line Items&quot;);
	var bcOELI:BusComp = boOELI.GetBusComp(&quot;Order Entry - Line Items&quot;);  

	var boISSProdDef:BusObject = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
	var bcProdISSAdmin:BusComp = boISSProdDef.GetBusComp(&quot;Internal Product - ISS Admin&quot;);  
	var bcProdCompatSubj:BusComp = boISSProdDef.GetBusComp(&quot;Product Compatibility - Subject&quot;);  
	   	 
	with (bcOELI)
	{
	  SetViewMode(AllView);
	  ClearToQuery();
	  ActivateField(&quot;Order Id&quot;);
	  ActivateField(&quot;TELCO Root Action Type LIC&quot;);
	  ActivateField(&quot;Action Code LIC&quot;);	//ACAMBAS: VFTRCBU-32549 - Replaced &apos;Action Code&apos; by &apos;Action Code LIC&apos;
	  ActivateField(&quot;VFTRCBU Service Length Type&quot;);
	  ActivateField(&quot;VF Product Group&quot;);
	  ActivateField(&quot;Product Id&quot;);
	  ActivateField(&quot;Product Number&quot;);
	  SetSearchSpec(&quot;Order Id&quot;, orderId );
	  SetSearchSpec(&quot;TELCO Root Action Type LIC&quot;, &quot;111&quot;);
	  ExecuteQuery(ForwardOnly);
	  iRecord = FirstRecord();
      while(iRecord)
	  {
	    sActionCode=GetFieldValue(&quot;Action Code LIC&quot;);	//ACAMBAS: VFTRCBU-32549 - Replaced &apos;Action Code&apos; by &apos;Action Code LIC&apos;
	    sProductId = GetFieldValue(&quot;Product Id&quot;);
		sServiceLengthType = GetFieldValue(&quot;VFTRCBU Service Length Type&quot;);
	    sProductGroup = GetFieldValue(&quot;VF Product Group&quot;);

	    if (sActionCode == &quot;Deleted&quot; &amp;&amp; sProductGroup == &quot;ADDON&quot; &amp;&amp; sServiceLengthType == &quot;One-Time&quot;)	//ACAMBAS: VFTRCBU-32549 - Replaced &apos;Delete&apos; by &apos;Deleted&apos;
	    {
	       sDeletedAddOnProdId = sProductId;
	    }
	    else if (sActionCode == &quot;Deleted&quot; &amp;&amp; sProductGroup == &quot;TARIFF&quot;)	//ACAMBAS: VFTRCBU-32549 - Replaced &apos;Delete&apos; by &apos;Deleted&apos;
	    {
    	   sDeletedTariffProdId = sProductId;	        
	    }
	    else if (sActionCode == &quot;New&quot; &amp;&amp; sProductGroup == &quot;TARIFF&quot;)	//ACAMBAS: VFTRCBU-32549 - Replaced &apos;Add&apos; by &apos;New&apos;
	    {
    	   sAddedTariffProdId = sProductId;	        	        
	    }
	    //VFTRCBU-32549 - JFONSECA - START
	    else if (sActionCode == &quot;New&quot; &amp;&amp; sProductGroup == &quot;ADDON&quot; &amp;&amp; sServiceLengthType == &quot;Recurring&quot;) //ACAMBAS: VFTRCBU-32549 - Replaced &apos;Add&apos; by &apos;New&apos;
	    {
	    	sAddedAddOnProdId = sProductId;
	    }
	    //VFTRCBU-32549 - JFONSECA - END
	   	iRecord = NextRecord();
	  }
	  
	  //if (sDeletedAddOnProdId ==&quot;&quot; || sDeletedTariffProdId==&quot;&quot; || sAddedTariffProdId ==&quot;&quot;) //VFTRCBU-32549 - JFONSECA - Commented
	  //if ((sDeletedTariffProdId==&quot;&quot; &amp;&amp; sAddedTariffProdId ==&quot;&quot;) || sAddedAddOnProdId ==&quot;&quot;) //VFTRCBU-32549 - JFONSECA - Added, //VFTRCBU-33998 - FCARRIL Commented
	  if (sDeletedTariffProdId==&quot;&quot; &amp;&amp; sAddedTariffProdId ==&quot;&quot; &amp;&amp; sAddedAddOnProdId ==&quot;&quot;) //VFTRCBU-32549 - JFONSECA - Added //VFTRCBU-33998 - FCARRIL Added
	  {
	  		cFraud = &quot;Y&quot;; //VFTRCBU-32549 - JFONSECA - Added
	  	    return;
	  }  
	  else
	  {
	     with (bcProdISSAdmin)
         {
           SetViewMode(AllView);
	  	   ClearToQuery();
	       ActivateField(&quot;Product Id&quot;);
	  	   SetSearchSpec(&quot;Id&quot;, sDeletedAddOnProdId);
	  	   ExecuteQuery(ForwardOnly);
	  	   if (FirstRecord()) 
	  	   {
			 with(bcProdCompatSubj)
			 {
			   SetViewMode(AllView);
			   ClearToQuery();
			   ActivateField(&quot;Rel Product Id&quot;); //VFTRCBU-35285 - MLUIS
			   ActivateField(&quot;Rel Product Line Id&quot;);
	       	   ActivateField(&quot;Type&quot;);			  
	       	   ActivateField(&quot;Rel Product Line&quot;); 
			   SetSearchExpr(&quot;([Rel Product Id] is not null or [Rel Product Line] is not null) AND ([Effective End Date] is null OR [Effective End Date] &gt;= TimeStamp())&quot;);
			   ExecuteQuery(ForwardOnly); 

               if (!FirstRecord()) //if the AddOn has no associated CompatibilityRules records to eventually justify its removal =&gt; it&apos;s fraud
               {
                 cFraud = &quot;Y&quot;;
                 return; 
               }
               else //check existence of Added/Deleted Tariffs and Added Add Ons products inside the Product relations defined in the CompatibilityRule
               {               			   
	  		     iRecord = FirstRecord();
                 while (iRecord)
                 {
                   sTypeReqExc = GetFieldValue(&quot;Type&quot;);
                   sRelProdLineId = GetFieldValue(&quot;Rel Product Line Id&quot;);
                   sRelProdId = GetFieldValue(&quot;Rel Product Id&quot;);//VFTRCBU-35285 - MLUIS
                   
                   if (sTypeReqExc == &quot;Requires&quot;)
                   {
                   		//VFTRCBU-35285 - MLUIS Product Id and Product Line Id will not be simultaneously filled, validation should be run accordably
                   	
                   		if(sRelProdId != &quot;&quot;)
						{
							 if(sAddedTariffProdId == sRelProdId)
							 {
							   sTempFraudRequires = sTempFraudRequires + &quot;Y&quot;;							   
							 }
							 else if(sDeletedTariffProdId != sRelProdId)
							 {
							   sTempFraudRequires = sTempFraudRequires + &quot;Y&quot;; 
							 }
							 else
							 {
							   sTempFraudRequires = sTempFraudRequires + &quot;N&quot;; 
							 }
						}
					   	else
					   	{                  		
	                         cExists = CheckTariffExistsinRelProdLine( sDeletedTariffProdId , sRelProdLineId);
		                     if (cExists == &quot;N&quot;) 
		                     {
		                       sTempFraudRequires = sTempFraudRequires + &quot;Y&quot;; 
		                     }
		                     else //VFTRCBU-35285 - MLUIS Start 
		                     {
		                     	 sTempFraudRequires = sTempFraudRequires + &quot;N&quot;; 
		                     } //VFTRCBU-35285 - MLUIS End
		                     cExists = CheckTariffExistsinRelProdLine( sAddedTariffProdId , sRelProdLineId);
		                     if (cExists == &quot;Y&quot;) 
		                     {
		                       sTempFraudRequires = sTempFraudRequires + &quot;Y&quot;;
		                     }
		                     else
							 {
								sTempFraudRequires = sTempFraudRequires + &quot;N&quot;;
							 }
	                  	}
                   }
                   else 
                   {
						if(sRelProdId != &quot;&quot; &amp;&amp; sAddedAddOnProdId != sRelProdId &amp;&amp; sAddedTariffProdId != sRelProdId)
						{
							sTempFraudExclude = sTempFraudExclude + &quot;Y&quot;; 
						}
						else if (sRelProdId == &quot;&quot;)
		    			{
							cExists = CheckTariffExistsinRelProdLine( sAddedTariffProdId , sRelProdLineId);                     
		                     if (cExists == &quot;N&quot;) 
		                     {
		                       sTempFraudExclude =  sTempFraudExclude + &quot;Y&quot;; 
		                     }
		                     else
		                     {
		                        sTempFraudExclude =  sTempFraudExclude + &quot;N&quot;;
	                     	 }
	                     	 //VFTRCBU-35285 - MLUIS 
							cExists = CheckTariffExistsinRelProdLine( sAddedAddOnProdId , sRelProdLineId);                     
	                 	    if (cExists == &quot;N&quot;) 
	                   		{
		                       sTempFraudExclude = sTempFraudExclude + &quot;Y&quot;;
	                     	} //VFTRCBU-35285 - MLUIS End
	                     	else
							{
								sTempFraudExclude = sTempFraudExclude + &quot;N&quot;;
							}
	                   	}  
	                  }// End sTypeReqExc                                                                          
	   			   iRecord = NextRecord();
                 } //End while
                 var cFraudRequires = sTempFraudRequires.indexOf(&quot;N&quot;,1);
                 var cFraudExcludes = sTempFraudExclude.indexOf(&quot;N&quot;,1);
                 
                 if ((cFraudRequires &lt; 0) &amp;&amp; (cFraudExcludes &lt; 0))
				 {
					 cFraud = &quot;Y&quot;;
					 return;
				 }
				 else
				 {
					 cFraud = &quot;N&quot;;
					 return;
				 }
               } //End else check existence of Added/Deleted etc               
	  	     } //End with bcProdCompatSubj
	  	   } //End if FirstRecord	  	   
         } //End with bcProdISSAdmin
	  }	//End else 		  
	}  // End with bcOELI   	
  }  // End try
  finally
  {
    bcOELI = null;
    boOELI = null;
    bcProdCompatSubj = null;
    bcProdISSAdmin = null;
    boISSProdDef = null;
    Outputs.SetProperty(&quot;fraud&quot;,cFraud); 
  }
}"
			   SEQUENCE="5"
			   UPDATED="05/19/2017 18:13:36"
			   UPDATED_BY="MLUIS"
			   CREATED="07/04/2016 18:03:58"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDealerCode"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckDealerCode(Inputs:PropertySet, Outputs:PropertySet) {
	/*29/03/2011, VDF Davut&amp;Dursun: Release 1.4, Created new for CR #217*/

//  var strDealerCode = BusComp().GetFieldValue(&quot;VF Dealer Code&quot;);		//WA39:MSS
   	var strDealerCode = Inputs.GetProperty(&quot;strOrderDealerCode&quot;);		//WA39:MSS

    var strActiveView = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);
    if (strActiveView == &quot;VF MNP Order&quot; || strActiveView == &quot;VF MNP Order Document&quot; || strActiveView == &quot;VF MNP Order Display Document&quot;) {
        if (strDealerCode == &quot;&quot; || strDealerCode == null) {
            var strMessageCategory = &quot;CRM VF Message Category&quot;;
            var strCode = &quot;0001&quot;;
            var sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
            TheApplication().RaiseErrorText(sMsg);
        }
    }
}"
			   SEQUENCE="6"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrderConfiguredOrNot"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrderConfiguredOrNot(Inputs:PropertySet, Outputs:PropertySet)
{
   try
   {
   		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
   
		var BoOrderEntry  	: BusObject	= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var BcOrderEntryLI 	: BusComp 	= BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
				
		if (strOrderId != null &amp;&amp; strOrderId != &quot;&quot;)
	  	{
			with(BcOrderEntryLI)
			{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Cfg State Code&quot;);
					SetSearchSpec(&quot;Order Header Id&quot;, strOrderId);
					SetSearchSpec(&quot;Part Number&quot;, &quot;1000&quot;);
					SetSearchSpec(&quot;Cfg State Code&quot;, &quot;New Item&quot;);
					ExecuteQuery(ForwardOnly);
				    if(FirstRecord()){
				    	//there is at least one item waiting to configure...
				    	    var sampleMsisdn = GetFieldValue(&quot;MSISDN&quot;);	
	                   		TheApplication().RaiseErrorText(&quot;Order icerisinde tamamlanmamis MSISDN var, Lutfen butun MSISDN leri tamamlayiniz.Ornek MSISDN: &quot; + sampleMsisdn); 
	                   		return (CancelOperation);				    		
				    }				
		     }
		}
   }
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
   finally
   {
		BcOrderEntryLI 	= null;
		BoOrderEntry 	= null;
   }
}"
			   SEQUENCE="8"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTariffExistsinRelProdLine"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckTariffExistsinRelProdLine( sTariffId, sRelProdLineId )
{
  try
  {
    var cExists = &quot;N&quot;;
    
	var boVFInternProd:BusObject = TheApplication().GetBusObject(&quot;VF Internal Product&quot;);
	var bcVFProdLineProd:BusComp = boVFInternProd.GetBusComp(&quot;VF Product Line - Products&quot;);  

    with (bcVFProdLineProd)
    {
      SetViewMode(AllView); 
	  ClearToQuery();
	  SetSearchSpec(&quot;Product Line Id&quot;, sRelProdLineId);
	  SetSearchSpec(&quot;Product Id&quot;, sTariffId);
	  ExecuteQuery(ForwardOnly);
      if (FirstRecord()) cExists = &quot;Y&quot;;
    }
    return(cExists);
  }
  finally
  {    
	bcVFProdLineProd = null;
	boVFInternProd = null;
  }
}"
			   SEQUENCE="10"
			   UPDATED="07/08/2016 11:25:49"
			   UPDATED_BY="MSOUSA"
			   CREATED="07/05/2016 17:27:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloseChildItem"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloseChildItem(RootItemID) 
{ 
  try 
  {						
	var BoOrderEntry  : BusObject		= TheApplication().GetBusObject(&quot;Order Entry&quot;);
	var BCOLISimple : BusComp = BoOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);  
			
	BCOLISimple.SetViewMode(AllView);
	BCOLISimple.ClearToQuery();
	//BCOLISimple.ActivateField(&quot;Status&quot;); Removed
	BCOLISimple.ActivateField(&quot;Action Code&quot;);
	BCOLISimple.ActivateField(&quot;VF Cancel Flag&quot;);
	BCOLISimple.ActivateField(&quot;Ship Complete Flag&quot;);
	BCOLISimple.SetSearchExpr(&quot;[Root Order Item Id] = &apos;&quot; + RootItemID + &quot;&apos; AND [Root Order Item Id] &lt;&gt; [Id]&quot;); //VFTRCBU-16745
	//BCOLISimple.SetSearchSpec (&quot;Root Order Item Id&quot;, RootItemID);
	BCOLISimple.ExecuteQuery(ForwardOnly);	
		      
	//for each line items child about RootItemId as input argument close the child line items.
	var recordExistsOnLineItems = BCOLISimple.FirstRecord();
	var strAction		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
	//var strCancelledStatus	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;); Removed
	while(recordExistsOnLineItems) 
	{
	  CloseChildItemXA(BCOLISimple.GetFieldValue(&quot;Id&quot;));
	  BCOLISimple.SetFieldValue(&quot;Action Code&quot;, strAction);
	  //BCOLISimple.SetFieldValue(&quot;Status&quot;, strCancelledStatus ); Removed
	  BCOLISimple.SetFieldValue(&quot;VF Cancel Flag&quot;, &quot;Y&quot; );		
	  BCOLISimple.WriteRecord();
		                
	  recordExistsOnLineItems = BCOLISimple.NextRecord();
	}
	
    TheApplication().Trace(&quot;End Method : CloseChildItem&quot;);
  }
  
  catch(e)
  {
	throw(e);
  }
  finally
  {
    BCOLISimple	= null;
	BoOrderEntry	= null;
  }
	
}"
			   SEQUENCE="12"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloseChildItemNOFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloseChildItemNOFlag(RootItemID) 
{ 
  try 
  {						
	var BoOrderEntry  : BusObject		= TheApplication().GetBusObject(&quot;Order Entry&quot;);
	var BCOLISimple : BusComp = BoOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);  
			
	BCOLISimple.SetViewMode(AllView);
	BCOLISimple.ClearToQuery();
	//BCOLISimple.ActivateField(&quot;Status&quot;); Removed
	BCOLISimple.ActivateField(&quot;Action Code&quot;);
	BCOLISimple.ActivateField(&quot;VF Cancel Flag&quot;);
	BCOLISimple.ActivateField(&quot;Ship Complete Flag&quot;);
	BCOLISimple.SetSearchExpr(&quot;[Root Order Item Id] = &apos;&quot; + RootItemID + &quot;&apos; AND [Root Order Item Id] &lt;&gt; [Id]&quot;); //VFTRCBU-16745
	//BCOLISimple.SetSearchSpec (&quot;Root Order Item Id&quot;, RootItemID);
	BCOLISimple.ExecuteQuery(ForwardOnly);	
		      
	//for each line items child about RootItemId as input argument close the child line items.
	var recordExistsOnLineItems = BCOLISimple.FirstRecord();
	var strAction		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Existing&quot;);
	//var strCancelledStatus	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;); Removed
	while(recordExistsOnLineItems) 
	{
	  CloseChildItemXANOFlag(BCOLISimple.GetFieldValue(&quot;Id&quot;));
	  BCOLISimple.SetFieldValue(&quot;Action Code&quot;, strAction);
	  //BCOLISimple.SetFieldValue(&quot;Status&quot;, strCancelledStatus );
	  BCOLISimple.SetFieldValue(&quot;VF Cancel Flag&quot;, &quot;N&quot; );		
	  BCOLISimple.WriteRecord();
		                
	  recordExistsOnLineItems = BCOLISimple.NextRecord();
	}
	
    TheApplication().Trace(&quot;End Method : CloseChildItem&quot;);
  }
  
  catch(e)
  {
	throw(e);
  }
  finally
  {
    BCOLISimple	= null;
	BoOrderEntry	= null;
  }
	
}"
			   SEQUENCE="13"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="04/13/2015 16:24:33"
			   CREATED_BY="JSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloseChildItemWaiting"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloseChildItemWaiting(RootItemID) 
{ 
  try 
  {
				
									
	var BoOrderEntry  : BusObject		= TheApplication().GetBusObject(&quot;Order Entry&quot;);
	var BCOLISimple  : BusComp = BoOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);		  
					
	BCOLISimple.SetViewMode(AllView);
	BCOLISimple.ClearToQuery();
	BCOLISimple.ActivateField(&quot;Status&quot;);
	BCOLISimple.ActivateField(&quot;Action Code&quot;);
	BCOLISimple.ActivateField(&quot;VF Cancel Flag&quot;);
	BCOLISimple.ActivateField(&quot;Warranty Recovery Flag&quot;);
	BCOLISimple.SetSearchSpec (&quot;Root Order Item Id&quot;, RootItemID);
	BCOLISimple.ExecuteQuery(ForwardOnly);	
				      
	//for each line items child about RootItemId as input argument close the child line items.
	var recordExistsOnLineItems = BCOLISimple.FirstRecord();
	var strAction		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
	var strCancelledStatus	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
	while(recordExistsOnLineItems) 
	{			   			
	  CloseChildItemXA(BCOLISimple.GetFieldValue(&quot;Id&quot;));
	  BCOLISimple.SetFieldValue(&quot;Action Code&quot;, strAction);
	  BCOLISimple.SetFieldValue(&quot;Status&quot;, strCancelledStatus );
	  BCOLISimple.SetFieldValue(&quot;VF Cancel Flag&quot;, &quot;Y&quot; );
	  /*flag to control multiple port in cancellation after 1°submit
	    this flag avoid to send line item already deleted during waiting status
	  */
	  BCOLISimple.SetFieldValue(&quot;Warranty Recovery Flag&quot;,&quot;Y&quot;);
	  BCOLISimple.WriteRecord();
	  recordExistsOnLineItems = BCOLISimple.NextRecord();
	}
  }// !try
  
  catch(e)
  {
	throw(e);
  }
  finally
  {
	BCOLISimple	= null;
	BoOrderEntry	= null;
  }

}// !function"
			   SEQUENCE="14"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloseChildItemXA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloseChildItemXA(ChildItemID) 
{ 
  try 
  {
	var strAction	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);	
	var BoOrderEntry  : BusObject		= TheApplication().GetBusObject(&quot;Order Entry&quot;);
	var bcOrderItemXA   : BusComp  = BoOrderEntry.GetBusComp (&quot;Order Item XA (Simple)&quot;);

	bcOrderItemXA.ActivateField (&quot;Action Code&quot;);
	bcOrderItemXA.ClearToQuery ();
	bcOrderItemXA.SetViewMode (AllView);
	bcOrderItemXA.SetSearchSpec (&quot;Object Id&quot;, ChildItemID);
					
	bcOrderItemXA.ExecuteQuery (ForwardOnly);
				
	var	booRecordExists1 = bcOrderItemXA.FirstRecord ();
	while (booRecordExists1)
	{
	  bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;,strAction);
	  bcOrderItemXA.WriteRecord ();
	  booRecordExists1 = bcOrderItemXA.NextRecord();
	}	
  }
  catch(e)
  {
	throw(e);
  }
  finally
  {
	bcOrderItemXA	= null;
	BoOrderEntry	= null;
  }
}"
			   SEQUENCE="15"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloseChildItemXANOFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloseChildItemXANOFlag(ChildItemID) 
{ 
  try 
  {
	var strAction	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Existing&quot;);	
	var BoOrderEntry  : BusObject		= TheApplication().GetBusObject(&quot;Order Entry&quot;);
	var bcOrderItemXA   : BusComp  = BoOrderEntry.GetBusComp (&quot;Order Item XA (Simple)&quot;);

	bcOrderItemXA.ActivateField (&quot;Action Code&quot;);
	bcOrderItemXA.ClearToQuery ();
	bcOrderItemXA.SetViewMode (AllView);
	bcOrderItemXA.SetSearchSpec (&quot;Object Id&quot;, ChildItemID);
					
	bcOrderItemXA.ExecuteQuery (ForwardOnly);
				
	var	booRecordExists1 = bcOrderItemXA.FirstRecord ();
	while (booRecordExists1)
	{
	  bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;,strAction);
	  bcOrderItemXA.WriteRecord ();
	  booRecordExists1 = bcOrderItemXA.NextRecord();
	}	
  }
  catch(e)
  {
	throw(e);
  }
  finally
  {
	bcOrderItemXA	= null;
	BoOrderEntry	= null;
  }
}"
			   SEQUENCE="16"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="04/13/2015 16:25:04"
			   CREATED_BY="JSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GIBOrderMgmt"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GIBOrderMgmt(Inputs:PropertySet, Outputs:PropertySet)
{
	try
	{
	
		var TheApp = TheApplication();
//		var thisBC = this.BusComp();											//WA39:MSS
		//Added for WP17
		var strCallWF = TheApp.GetProfileAttr(&quot;CALLWF&quot;);
//		var strOrderId      =   thisBC.GetFieldValue(&quot;Id&quot;);						//WA39:MSS
   		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);						//WA39:MSS
   		var strAccountId = Inputs.GetProperty(&quot;strAccountId&quot;);					//WA39:MSS

		var BoOrderEntry  : BusObject;		
		var bcAccount  : BusComp;
		var WFOutputs  : PropertySet;
		var WFInputs  : PropertySet;
		var bsWfrMgr  : Service;
		if(strCallWF==&quot;Y&quot;)
		{						
			TheApp.SetProfileAttr(&quot;CALLWF&quot;,&quot;N&quot;);
			bsWfrMgr = TheApp.GetService(&quot;Workflow Process Manager&quot;);
	      	WFInputs = TheApp.NewPropertySet(); 
	      	WFOutputs = TheApp.NewPropertySet(); 
//	      	WFInputs.SetProperty(&quot;Account Id&quot;,thisBC.GetFieldValue(&quot;Account Id&quot;));	//WA39:MSS
	      	WFInputs.SetProperty(&quot;Account Id&quot;, strAccountId);						//WA39:MSS

	      	WFInputs.SetProperty(&quot;Order Id&quot;,strOrderId);
	      	WFInputs.SetProperty(&quot;Message Type&quot;,&quot;VF Message Type 05&quot;);        
	      	WFInputs.SetProperty(&quot;InquiryType&quot;,&quot;Undetailed&quot;);
	      	WFInputs.SetProperty(&quot;ProcessName&quot;,&quot;VF New GIB WF&quot;);
	      	bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;,WFInputs,WFOutputs);
	      	var strRejected = TheApp.GetProfileAttr(&quot;UserRejected&quot;);
	      	if(strRejected==&quot;Y&quot;)
	      	{
	      		TheApp.SetProfileAttr(&quot;UserRejected&quot;,&quot;N&quot;);
	      		return (CancelOperation);
	      	}					
		}					
		var strLog55 = TheApp.GetProfileAttr(&quot;Log55&quot;);
		var strLog54 = TheApp.GetProfileAttr(&quot;Log54&quot;);
		var enable_logging =   TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);
		var strGIBUnverified = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;);
		var bsGIBLogging : Service = TheApp.GetService(&quot;VF Logging BS&quot;);
		var psBSInput  : PropertySet = TheApp.NewPropertySet();
        var psBSOutput  : PropertySet = TheApp.NewPropertySet();
//      var strAccountId  =  thisBC.GetFieldValue(&quot;Account Id&quot;);					//WA39:MSS
        var strCompanyStatusActive = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;Y&quot;);
		var strCompanyStatusPassive = TheApp.InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;N&quot;);
//		var strGIBCompStatus = thisBC.GetFieldValue(&quot;VF GIB Account Status&quot;); 		//WA39:MSS
   		var strGIBCompStatus = Inputs.GetProperty(&quot;strVFGIBAccountStatus&quot;);			//WA39:MSS

		if(strLog55==&quot;Y&quot;)
		{					
			BoOrderEntry 		= TheApp.GetBusObject(&quot;X Order Entry&quot;);
			bcAccount           = BoOrderEntry.GetBusComp(&quot;HP Submit - Account&quot;);					
			TheApp.SetProfileAttr(&quot;Log55&quot;,&quot;N&quot;);
			var strProfileAttr = TheApp.GetProfileAttr(&quot;Log55&quot;);
			TheApp.Trace(&quot;strProfileAttr::&quot;+strProfileAttr);
			bcAccount.SetViewMode(AllView);
			bcAccount.ClearToQuery();
			bcAccount.ActivateField(&quot;VF GIB Ver Status&quot;);
			bcAccount.SetSearchSpec(&quot;Id&quot;,strAccountId);
			bcAccount.ExecuteQuery(ForwardOnly);
			if(bcAccount.FirstRecord())
			{
				bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,strGIBUnverified);
				bcAccount.WriteRecord();
				if(enable_logging==&quot;Y&quot;)
				{
					if(strGIBCompStatus==strCompanyStatusActive){
						psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L55&quot;);
					}else if (strGIBCompStatus==strCompanyStatusPassive){
						psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L78&quot;);
					}else{
						psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L79&quot;);
					}
					psBSInput.SetProperty(&quot;Customer Code&quot;,strAccountId);
					psBSInput.SetProperty(&quot;Order Id&quot;,strOrderId);
					psBSInput.SetProperty(&quot;Profile Mode&quot;,&quot;GIBOrder&quot;);
					bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
					var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);							
				}	
			}
		}
		if(strLog54==&quot;Y&quot;)
		{
			TheApp.SetProfileAttr(&quot;Log54&quot;,&quot;N&quot;);
			if(enable_logging==&quot;Y&quot;)
			{
				if(strGIBCompStatus==strCompanyStatusActive){
					psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L54&quot;);
				}else if (strGIBCompStatus==strCompanyStatusPassive){
					psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L76&quot;);
				}else{
					psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L77&quot;);
				}
				psBSInput.SetProperty(&quot;Customer Code&quot;,strAccountId);
				psBSInput.SetProperty(&quot;Order Id&quot;,strOrderId);
				psBSInput.SetProperty(&quot;Profile Mode&quot;,&quot;GIBOrder&quot;);
				bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
				var strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);						
				return (CancelOperation);
			}					
		}//Mamta-Added for WP17
	}
	finally
	{
		TheApp = null;
//		thisBC = null;				//WA39:MSS
		bsWfrMgr	= null;
		WFInputs	= null;
		WFOutputs	= null;
		bcAccount	= null;
		BoOrderEntry = null;
		psBSOutput	= null;
		psBSInput	= null;
		bsGIBLogging = null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NewCheckDonorOperator"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NewCheckDonorOperator(Inputs:PropertySet, Outputs:PropertySet)
{

/* +++ 
  WA39: New function equivalent to a piece of legacy code inside server script method PreInvokeMethod in
  Applet &quot;VF MNP Order Header Form Applet_2&quot; Server
--- */     

  try
  {
    var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);
   
    var BoOrderEntry  	: BusObject	= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
    var BcOrderEntryLI 	: BusComp 	= BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
    var strMessageCategory 	= &quot;VF Message Category&quot;;
    var strCode;
    var sMsg;
    
    
	BcOrderEntryLI.SetViewMode(AllView);
	BcOrderEntryLI.ClearToQuery();
	BcOrderEntryLI.ActivateField(&quot;Donor Operator&quot;); 
//	BcOrderEntryLI.SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);							//WA39:MSS
//	BcOrderEntryLI.SetSearchExpr(&quot;[Part Number] = &apos;1000&apos; OR [Part Number] = &apos;50000&apos;&quot;); 		//WA39:MSS
	BcOrderEntryLI.SetSearchExpr(&quot; ([Part Number] = &apos;1000&apos; OR [Part Number] = &apos;50000&apos; OR [Part Number] = &apos;70000&apos;) AND [Order Header Id] = &apos;&quot; + strOrderId + &quot;&apos;&quot;);  //WA39:MSS; RCRISPIM:VFTRCBU-12028, added PartNumber 70000.
	
	BcOrderEntryLI.ExecuteQuery(ForwardBackward);
	var DonorOrderExists = BcOrderEntryLI.FirstRecord();
	var strFirstDonorOperator = &quot;&quot;;
	if (DonorOrderExists)
	{
	  strFirstDonorOperator = BcOrderEntryLI.GetFieldValue(&quot;Donor Operator&quot;);
	  strCode = &quot;071&quot;;
	  sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	   if (strFirstDonorOperator == &quot;&quot; || strFirstDonorOperator == null)
	   {
		   	TheApplication().RaiseErrorText(sMsg);
	   }
	   
	  DonorOrderExists = BcOrderEntryLI.NextRecord();
	  while(DonorOrderExists)
	  {
		if (strFirstDonorOperator != BcOrderEntryLI.GetFieldValue(&quot;Donor Operator&quot;))
		{
		  TheApplication().RaiseErrorText(sMsg);
		}
		DonorOrderExists = BcOrderEntryLI.NextRecord();
	  }
	}
  }
  catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
}
  finally
  {
	BcOrderEntryLI 	= null;
	BoOrderEntry 	= null;
  }
}"
			   SEQUENCE="18"
			   UPDATED="01/18/2017 17:32:06"
			   UPDATED_BY="MLUIS"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NewCheckEligDisc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NewCheckEligDisc(Inputs:PropertySet, Outputs:PropertySet)
{

/* +++ 
  WA39: New function equivalent to a piece of legacy code inside server script method PreInvokeMethod in
  Applet &quot;VF MNP Order Header Form Applet_2&quot; Server
--- */      

  try 
  {
    var TheApp = TheApplication();
    var BoOrderEntry:BusObject = TheApp.GetBusObject(&quot;TELCO Order - Simple&quot;);
    var BcOrderEntryOrders:BusComp = BoOrderEntry.GetBusComp(&quot;TELCO Orders - Simple&quot;);
    var BcOrderEntryLI:BusComp = BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
   	var strMessageCategory 	= &quot;VF Message Category&quot;;

    var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);
    var strReason = Inputs.GetProperty(&quot;strOrderReason&quot;);

    BcOrderEntryOrders.SetViewMode(AllView);
    BcOrderEntryOrders.ClearToQuery();
    BcOrderEntryOrders.ActivateField(&quot;Agreement Name&quot;);
    BcOrderEntryOrders.ActivateField(&quot;Submit Date&quot;);
    BcOrderEntryOrders.ActivateField(&quot;Order Type LIC&quot;);
    BcOrderEntryOrders.ActivateField(&quot;Billing Account Id&quot;);
    BcOrderEntryOrders.SetSearchSpec (&quot;Id&quot;, strOrderId);
    BcOrderEntryLI.SetViewMode(AllView);
    BcOrderEntryLI.ClearToQuery();
    BcOrderEntryLI.ActivateField(&quot;Display Name&quot;);
    BcOrderEntryLI.ActivateField(&quot;Order Header Id&quot;);
    BcOrderEntryLI.ActivateField(&quot;Part Number&quot;);
    BcOrderEntryLI.ActivateField(&quot;Billing Account Id&quot;);
    BcOrderEntryLI.ActivateField(&quot;Eligibility Status&quot;);
    BcOrderEntryLI.ActivateField(&quot;Eligibility Reason&quot;);
    BcOrderEntryLI.SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);  // VFTK Diva 20120405: Scripting 31 - moved script
    BcOrderEntryOrders.ExecuteQuery(ForwardBackward);//C_MSP00000807 Lilanath: Made ForwardBackward to Fix an SQL Error

    if (BcOrderEntryOrders.FirstRecord ()) 
    {
      var ordBA = BcOrderEntryOrders.GetFieldValue(&quot;Billing Account Id&quot;);
      checkVodamoney15_25(strOrderId, ordBA);
      if(strReason.length &lt;=0)
      {
        strCode = &quot;067&quot;;
	    sMsg = TheApp.LookupMessage(strMessageCategory, strCode);
	    TheApp.RaiseErrorText(sMsg);
      }

      //BcOrderEntryLI.ExecuteQuery(ForwardBackward);//C_MSP00000807 Lilanath: Made ForwardBackward to Fix an SQL Error
      var BcOrderEntryLIExist = BcOrderEntryLI.FirstRecord();	
      while (BcOrderEntryLIExist)
      {
        var LineItemName = BcOrderEntryLI.GetFieldValue(&quot;Display Name&quot;);
	    var LineItemID = BcOrderEntryLI.GetFieldValue(&quot;Id&quot;);
        var LineItemPartNum = BcOrderEntryLI.GetFieldValue(&quot;Part Number&quot;);
        var BillingAccountId= BcOrderEntryLI.GetFieldValue(&quot;Billing Account Id&quot;);									
        var checkDiscountResult = null;	
        var eligFlg = BcOrderEntryLI.GetFieldValue(&quot;Eligibility Status&quot;);
						
        if (eligFlg == &quot;N&quot; || eligFlg == &quot;H&quot;)
	    {
	      var eligMsg = BcOrderEntryLI.GetFieldValue(&quot;Eligibility Reason&quot;);
	      TheApp.RaiseErrorText(eligMsg);
	    }			
 	    if (LineItemPartNum == &quot;5000&quot;)
	    {
	      checkDiscountResult = checkDiscountMethod(strOrderId, BillingAccountId);
	      if (checkDiscountResult == &quot;JokerFound&quot;)
	      {
	        strCode = &quot;230&quot;;
	        sMsg = TheApp.LookupMessage(strMessageCategory, strCode);
	        TheApp.RaiseErrorText(sMsg);	
	      }

//	      if (result == &quot;KO&quot;)								//WA39:MSS  - fixing legacy bug
	      if (checkDiscountResult == &quot;MoreDiscountFound&quot;)	//WA39:MSS  - fixing legacy bug
	      {
	        strCode = &quot;060&quot;;
	        sMsg = TheApp.LookupMessage(strMessageCategory, strCode);
	        TheApp.RaiseErrorText(sMsg);
	      }
	    }
	    if (LineItemPartNum == &quot;11000&quot;) 
	    {
	      checkDiscountResult = checkDiscountMethod(strOrderId, BillingAccountId);
	      if (checkDiscountResult==&quot;JokerFound&quot;)
	      {
	        strCode = &quot;229&quot;;
	        sMsg = TheApp.LookupMessage(strMessageCategory, strCode);
	        TheApp.RaiseErrorText(sMsg);	
	      }
	    }
	    BcOrderEntryLIExist = BcOrderEntryLI.NextRecord();	
      } // !while
    } // !if 
  } // !try				

  finally
  {
    BoOrderEntry = null;
    BcOrderEntryOrders = null;
    BcOrderEntryLI = null;
  } 
}// !function"
			   SEQUENCE="19"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NewUpdateOrderPendingAndCreateSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NewUpdateOrderPendingAndCreateSR (Inputs:PropertySet, Outputs:PropertySet) 
{

/* +++ 
  WA39: New function equivalent to a piece of legacy code inside server script method PreInvokeMethod in
  Applet &quot;VF MNP Order Header Form Applet_2&quot; 
--- */    

  try
  {
	var psInOne  :PropertySet = TheApplication().NewPropertySet();
	var psOutOne :PropertySet = TheApplication().NewPropertySet();

	var boDocumentum = TheApplication().GetBusObject(&quot;VF Mnp Documentum&quot;);
	var bcDocumentum = boDocumentum.GetBusComp(&quot;VF Mnp Documentum&quot;);
	var StrOrder = Inputs.GetProperty(&quot;strOrderId&quot;);	
	var strWillFaxed = Inputs.GetProperty(&quot;strOrderVFDocWillBeFaxed&quot;);	

    var strMNPPortIn = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;); 				    
    var strVerifyFlag;
    var strCode;
    var sMsg;
    var boHP;
    var bcOrdersHP;
    var strMessageCategory 	= &quot;VF Message Category&quot;;

	CheckBA(StrOrder,strMNPPortIn);

	bcDocumentum.SetViewMode(AllView);
	bcDocumentum.ClearToQuery();
	bcDocumentum.SetSearchSpec (&quot;Order Id&quot;, StrOrder);
	bcDocumentum.ExecuteQuery(ForwardOnly);
	var ItemBCExists = bcDocumentum.FirstRecord();
	var allVerifyYes = true;
	var strVerifyFlag = null;
	while(ItemBCExists)
	{
	  strVerifyFlag = bcDocumentum.GetFieldValue(&quot;Verification&quot;);
	  if ( strVerifyFlag == &quot;N&quot;) 
	  {
		allVerifyYes = false;
	  }
	  
	  ItemBCExists = bcDocumentum.NextRecord();
	}

	if (allVerifyYes)
	{
/*** WA#18:MNP:20150126:MS: Begin-The next statements inside this if block are no longer needed due to. 
	    a)) Order status waiting is deprecated within the OM framework  
	    b) The Port In SR will now be created via inboubd request by EAI 
	
	  boHP = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
	  bcOrdersHP = boHP.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
	  bcOrdersHP.SetViewMode(AllView);
	  bcOrdersHP.ClearToQuery();
//	  bcOrdersHP.SetSearchSpec (&quot;Id&quot;, this.BusComp().GetFieldValue(&quot;Id&quot;));	//WA39:MSS
	  bcOrdersHP.SetSearchSpec (&quot;Id&quot;, StrOrder);							//WA39:MSS
	  
	  bcOrdersHP.ExecuteQuery(ForwardOnly);  	
	  bcOrdersHP.SetFieldValue(&quot;Status&quot; , TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Waiting&quot;));
	  bcOrdersHP.WriteRecord();
	  
//	  this.BusComp().InvokeMethod(&quot;RefreshBusComp&quot;);		// Replaced by the command below
	  TheApplication().GetService(&quot;FINS Teller UI Navigation&quot;).InvokeMethod (&quot;RefreshCurrentApplet&quot;, TheApplication(). NewPropertySet(), TheApplication().NewPropertySet());
	  	
   	  // Call_BS_Create_SR(StrOrder);     // old signature
      psInOne.SetProperty(&quot;orderId&quot;, StrOrder);
      Call_BS_Create_SR(psInOne,psOutOne);
	  
      strCode = &quot;069&quot;;
	  sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	  TheApplication().RaiseErrorText(sMsg);  // sMsg=&quot;The Mnp Service Request has been created!&quot;&quot;
	  
*** WA#18:MNP:20150126:MS: End ***/
	  
	  return (CancelOperation);
	}
	
	else if (strWillFaxed == &quot;Y&quot;) 
	{

/*** WA#18:MNP:20150126:MS: Begin-The next statements inside this if block are no longer needed due to. 
	    a)) Order status waiting is deprecated within the OM framework  
	    b) The Port In SR will now be created via inboubd request by EAI 

	  boHP = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
	  bcOrdersHP = boHP.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);

	  bcOrdersHP.SetViewMode(AllView);
	  bcOrdersHP.ClearToQuery();
//	  bcOrdersHP.SetSearchSpec (&quot;Id&quot;, this.BusComp().GetFieldValue(&quot;Id&quot;));		//WA39:MSS
	  bcOrdersHP.SetSearchSpec (&quot;Id&quot;, StrOrder);								//WA39:MSS

	  bcOrdersHP.ExecuteQuery(ForwardOnly);
	  bcOrdersHP.SetFieldValue(&quot;Status&quot; , TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Waiting&quot;));
	  bcOrdersHP.WriteRecord();

//	  this.BusComp().InvokeMethod(&quot;RefreshBusComp&quot;);   // Replaced by the command below
	  TheApplication().GetService(&quot;FINS Teller UI Navigation&quot;).InvokeMethod (&quot;RefreshCurrentApplet&quot;, TheApplication(). NewPropertySet(), TheApplication().NewPropertySet());

	  // Call_BS_Create_SR(StrOrder);     // old signature
      psInOne.SetProperty(&quot;orderId&quot;, StrOrder);
	  Call_BS_Create_SR(psInOne,psOutOne);

	  strCode = &quot;069&quot;;
	  sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	  TheApplication().RaiseErrorText(sMsg);   // sMsg=&quot;The Mnp Service Request has been created!&quot;

*** WA#18:MNP:20150126:MS: End ***/

	  return (CancelOperation);
	}
	else
	{
	  strCode = &quot;008&quot;;
	  sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	  TheApplication().RaiseErrorText(sMsg);  // sMsg=&quot;The document is not completed. Please check it the view Display Document&quot;
	  // return (CancelOperation);	JIRA16405: Legacy code ... statement doing nothing 
	}

  }
  //WA39:VFM.START   	//JIRA16405:Begin:Added this block
  catch (e){  
	var err=e;
	if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
	  Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
	else
	  throw(err);
  }
  //WA39:VFM.END        //JIRA16405:End
  finally 
  {
  	psInOne = null;
	psOutOne = null
	boDocumentum = null;
	bcDocumentum = null;	  
	boHP = null;
	bcOrdersHP = null;
  }
}"
			   SEQUENCE="20"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NewUpdateOrderWaitingAndCreateSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NewUpdateOrderWaitingAndCreateSR (Inputs:PropertySet, Outputs:PropertySet) 
{

/* +++ 
  WA39: New function equivalent to a piece of legacy code inside server script method PreInvokeMethod in
  Applet &quot;VF MNP Order Header Form Applet_2&quot; Server
--- */    

  try
  {
	var boDocumentum = TheApplication().GetBusObject(&quot;VF Mnp Documentum&quot;);
	var bcDocumentum = boDocumentum.GetBusComp(&quot;VF Mnp Documentum&quot;);
	var StrOrder = Inputs.GetProperty(&quot;strOrderId&quot;);				
    var strMNPPortIn = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;); 				    
    var strVerifyFlag;
    var strApprovedFlag;
    var strCode;
    var sMsg;
	var allVerifyYes     = true;
	var allApprovedYes   = true;
	var strVerifyFlag    = null;
	var strApprovedFlag  = null;					   										   
	var strMessageCategory = &quot;VF Message Category&quot;;
			
	bcDocumentum.SetViewMode(AllView);
	bcDocumentum.ClearToQuery();
	bcDocumentum.SetSearchSpec (&quot;Order Id&quot;, StrOrder);
	bcDocumentum.ExecuteQuery(ForwardOnly);  				  		
	var ItemBCExists     = bcDocumentum.FirstRecord();

	while(ItemBCExists)
	{
	  strVerifyFlag = bcDocumentum.GetFieldValue(&quot;Verification&quot;);
	  strApprovedFlag = bcDocumentum.GetFieldValue(&quot;Approved&quot;);
	  if ( strVerifyFlag == &quot;N&quot;)
	  {
		allVerifyYes = false;
	  }
	  if ( strApprovedFlag == &quot;N&quot;)
	  {
		allApprovedYes = false;
	  }
	  
	  ItemBCExists = bcDocumentum.NextRecord();
	}
						    
	if (allVerifyYes == false || allApprovedYes==false || strVerifyFlag == null || strApprovedFlag == null)
	{
	  strCode = &quot;102&quot;;
	  sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);  
	  TheApplication().RaiseErrorText(sMsg);  // sMsg=&quot;Please check documents&quot;
	  return (CancelOperation);
	}

//	bsOrderMng = TheApplication().GetService(&quot;ACS Order Management&quot;);			//WA39:MSS
//	Inputs  = TheApplication().NewPropertySet();								//WA39:MSS
//	Outputs = TheApplication().NewPropertySet();				        		//WA39:MSS
//	Inputs.SetProperty(&quot;OrderId&quot;, thisBC.GetFieldValue(&quot;Id&quot;));					//WA39:MSS
//	Inputs.SetProperty(&quot;OrderType&quot;, orderType);				        			//WA39:MSS
	//  bsOrderMng.InvokeMethod(&quot;UpdateItemPriceListNew&quot;, Inputs, Outputs);				       
//	return (ContinueOperation);													//WA39:MSS
	
  }// !try
  
  finally 
  { 
	boDocumentum = null;
	bcDocumentum = null;	
  }

}"
			   SEQUENCE="21"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName:chars, Inputs:PropertySet, Outputs:PropertySet)
{
try
{
	switch(MethodName)
	{
		case &quot;CheckOrderConfiguredOrNot&quot;:
			CheckOrderConfiguredOrNot(Inputs,Outputs);	 	//1		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);						
			break;	
		case &quot;UpdateBillCycle&quot;:
			UpdateBillCycle(Inputs,Outputs);	 			//2		ReadOnly: No
			//Inputs.GetProperty(&quot;strOrderId&quot;);	
			//Inputs.GetProperty(&quot;strOrderVFIsMBA&quot;);	
			break;									
		case &quot;CheckDealerCode&quot;:
			CheckDealerCode(Inputs,Outputs);	 			//3		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderDealerCode&quot;);	
			break;									
		case &quot;GIBOrderMgmt&quot;:
			GIBOrderMgmt (Inputs,Outputs);					//4		ReadOnly: No
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			//Inputs.GetProperty(&quot;strAccountId&quot;);
			//Inputs.GetProperty(&quot;strVFGIBAccountStatus&quot;);
			break;
//		case &quot;checkVodamoney15_25&quot;:
//			checkVodamoney15_25(orderId, billingAccountID);	//5		ReadOnly: Yes   (BS internal function. used by NewCheckEligDisc)
//			break;															
//		case &quot;checkDiscountMethod&quot;:
//			checkDiscountMethod(orderId, billingAccountID)	//6		ReadOnly: Yes   (BS internal function. used by NewCheckEligDisc)
//			break;															
		case &quot;NewCheckEligDisc&quot;:							//7 	ReadOnly: Y
			NewCheckEligDisc(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			//Inputs.GetProperty(&quot;strOrderReason&quot;);
			break;
		case &quot;checkTAFields&quot;:								//8 	ReadOnly: Y
			checkTAFields(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strVFFlagCustomerPF&quot;);
			//Inputs.GetProperty(&quot;strAccountMarketClass&quot;);
			//Inputs.GetProperty(&quot;strX_Primary_contact&quot;);
			//Inputs.GetProperty(&quot;strVFTAName&quot;);
			//Inputs.GetProperty(&quot;strVFTATcId&quot;);
			//Inputs.GetProperty(&quot;strVFTACertifyCircular&quot;);
			//Inputs.GetProperty(&quot;strVFTACircularOn&quot;);
			break;
		case &quot;NewCheckDonorOperator&quot;:						//9 	ReadOnly: Y
			NewCheckDonorOperator(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;CheckCancelFlg&quot;:								//10 	ReadOnly: Y
			CheckCancelFlg(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;CheckCancellationDocuments&quot;:					//11 	ReadOnly: Y
			CheckCancellationDocuments(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			//Inputs.GetProperty(&quot;strOrderStatus&quot;);
			break;
//		case &quot;UpdateParentOrderWaiting&quot;:					//12 	ReadOnly: N (WA#18 Method was depreciated)
//			UpdateParentOrderWaiting(Inputs,Outputs);
//			//Inputs.GetProperty(&quot;strOrderId&quot;);				
//			//Inputs.GetProperty(&quot;strOrderNumber&quot;);			
//			break;
//		case &quot;CloseChildItem&quot;:
//			CloseChildItem(RootItemID) 						//13	ReadOnly: N   (BS internal function. used by UpdateParentOrderWaiting)
//			break;															
//		case &quot;CloseChildItemXA&quot;:
//			CloseChildItemXA(ChildItemID) 					//14	ReadOnly: N   (BS internal function. used by UpdateParentOrderWaiting and CloseChildItem)
//			break;															
//		case &quot;CloseChildItemWaiting&quot;:
//			CloseChildItemWaiting(RootItemID)  				//15	ReadOnly: N   (BS internal function. used by UpdateParentOrderWaiting )
//			break;															
		case &quot;UpdateParentOrderOpen&quot;:						//16 	ReadOnly: N (WA#18 Method was changed to support new process 20150402)
			UpdateParentOrderOpen(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strOrderId&quot;);				
			//Inputs.GetProperty(&quot;strOrderNumber&quot;);			
			break;
		case &quot;NewUpdateOrderPendingAndCreateSR&quot;:			//17 	ReadOnly: N
			NewUpdateOrderPendingAndCreateSR(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strOrderId&quot;);	
			//Inputs.GetProperty(&quot;strOrderVFDocWillBeFaxed&quot;);	
			break;
		case &quot;NewUpdateOrderWaitingAndCreateSR&quot;:			//18 	ReadOnly: N
			NewUpdateOrderWaitingAndCreateSR(Inputs,Outputs);
			//Inputs.GetProperty(&quot;strOrderId&quot;);	
			break;
//		case &quot;CheckBA&quot;:
//			CheckBA(strOrderId,strMNPPortIn)   				//19	ReadOnly: N   (BS internal function. used by NewUpdateOrderPendingAndCreateSR)
//			break;															
//		case &quot;Call_BS_Create_SR&quot;:
//			Call_BS_Create_SR()   							//20	ReadOnly: N   (BS internal function. used by NewUpdateOrderPendingAndCreateSR)
//			break;											
		case &quot;Call_BS_Create_SR&quot;:
			Call_BS_Create_SR(Inputs,Outputs);   			//20	ReadOnly: N   (BS internal function. used by NewUpdateOrderPendingAndCreateSR)
			break;
		case &quot;CheckCompatibilityRulesForFraud&quot;:			
			CheckCompatibilityRulesForFraud(Inputs,Outputs);
			break;
													

		default:
			return (ContinueOperation);						
	}
	return (CancelOperation);
}
catch(e)
{
	var err=e;
	TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorCode&quot;, &quot;SBL-EXL-00151&quot;);
	TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;, err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;));
	throw(err);
}
}"
			   SEQUENCE="25"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateBillCycle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateBillCycle(Inputs:PropertySet, Outputs:PropertySet)   // WP1 Metroplois YGhazi 14/07/2011
{
	try
	{	
		var TheApp = TheApplication();
		var BillingAccountCode = &quot;&quot;;
		
//		var thisBC = this.BusComp();								//WA39:MSS
//		var strOrdeId = thisBC.GetFieldValue(&quot;Id&quot;);					//WA39:MSS
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
//		var strIsMultiple = thisBC.GetFieldValue(&quot;VF Is MBA&quot;);		//WA39:MSS
		var strIsMultiple = Inputs.GetProperty(&quot;strOrderVFIsMBA&quot;);	//WA39:MSS

		var strAdd = TheApp.InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;); 
		var str1 = TheApp.InvokeMethod(&quot;LookupValue&quot;, &quot;VF_BC_DISPLAY&quot;,&quot;1&quot;);
		var str6 = TheApp.InvokeMethod(&quot;LookupValue&quot;, &quot;VF_BC_DISPLAY&quot;,&quot;6&quot;);
		var str15 = TheApp.InvokeMethod(&quot;LookupValue&quot;, &quot;VF_BC_DISPLAY&quot;,&quot;15&quot;);
		var str21 = TheApp.InvokeMethod(&quot;LookupValue&quot;, &quot;VF_BC_DISPLAY&quot;,&quot;21&quot;);
		
		var strNewBillCyc = &quot;&quot;;
		var strBillCyc = &quot;&quot;;
		var strDisplay =&quot;&quot;;
		
		var Today = new Date();
		var strGiorno = Today.getDate();
	
		var oBOAccount  : BusObject = TheApp.GetBusObject(&quot;Account&quot;);
		var oBCPaymProf : BusComp = oBOAccount.GetBusComp(&quot;Com Invoice Profile&quot;);
		
		var AssetBO : BusObject	 = TheApp.GetBusObject(&quot;X Order Entry&quot;);
		var BcOrderEntryLI : BusComp    = AssetBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		
		with(BcOrderEntryLI)
			{
			ClearToQuery();
			SetViewMode(AllView);
		 	ActivateField(&quot;Order Header Id&quot;); 
		 	ActivateField(&quot;Part Number&quot;);
		 	ActivateField(&quot;Billing Account&quot;);
	 		SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
	 		SetSearchSpec (&quot;Part Number&quot;, &quot;14100&quot;); 
	 		SetSearchSpec (&quot;Action Code&quot;, strAdd); 
	 		ExecuteQuery(ForwardOnly);
	 		var next = FirstRecord();
	 		while (next)
	 		{	 		
				BillingAccountCode = GetFieldValue(&quot;Billing Account&quot;);
				with(oBCPaymProf)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Bill Cycle&quot;);
					ActivateField(&quot;Bill Cycle Displayed&quot;);
					SetSearchSpec(&quot;Billing Account Code&quot;,BillingAccountCode);
					ExecuteQuery(ForwardOnly); 
					if(FirstRecord())
					{
						strBillCyc = GetFieldValue(&quot;Bill Cycle&quot;); 
						TheApp.SetProfileAttr(&quot;Bill Cycle&quot;,strBillCyc);
					if (strGiorno &gt;&quot;1&quot; &amp;&amp; strGiorno &lt;= &quot;6&quot;)
					{
					if (strBillCyc != &quot;1&quot;){
							strNewBillCyc = &quot;1&quot;;
							strDisplay = str1;
						}
					}
					else
						if (strGiorno &gt; &quot;6&quot; &amp;&amp; strGiorno &lt;= &quot;15&quot;)
							{
								if (strBillCyc != &quot;6&quot;)
								{
									strNewBillCyc = &quot;6&quot;;
									strDisplay = str6;
								}
							}
						else
							if (strGiorno &gt; &quot;15&quot; &amp;&amp; strGiorno &lt;= &quot;21&quot;)
								{
								if (strBillCyc != &quot;15&quot;)
									{
										strNewBillCyc = &quot;15&quot;;
										strDisplay = str15;
									}
								}
								else
									if (strGiorno &gt; &quot;21&quot; )
									{
										if (strBillCyc != &quot;21&quot;)
										{
											strNewBillCyc = &quot;21&quot;;
											strDisplay = str21;
										}
									}
				
					if(strNewBillCyc != &quot;&quot;){
						SetFieldValue(&quot;Bill Cycle&quot;, strNewBillCyc);
						SetFieldValue(&quot;Bill Cycle Displayed&quot;, strDisplay);
						WriteRecord();
						}
					}
				}
				next = NextRecord();
				if(strIsMultiple == &quot;False&quot;)
					next = false;
			}
			} 
		}
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	finally
	{
		oBCPaymProf = null;
		oBOAccount = null;
		AssetBO = null;
		BcOrderEntryLI = null;
		TheApp = null;
//		thisBC = null;			//WA39:MSS
	}
}"
			   SEQUENCE="22"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateParentOrderOpen"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateParentOrderOpen (Inputs:PropertySet, Outputs:PropertySet) 
{ 
  try 
  {
	var sysdate = new Date();
	var sysdatestring = ((sysdate.getMonth() + 1) + &quot;/&quot; + sysdate.getDate() + &quot;/&quot; + sysdate.getFullYear()+ &quot; &quot;+ sysdate.getHours() + &quot;:&quot; + sysdate.getMinutes()+&quot;:&quot; + sysdate.getSeconds());

	var lineItemsCancelled  : PropertySet = TheApplication().NewPropertySet();
	var BoOrderEntry  : BusObject		= TheApplication().GetBusObject(&quot;Order Entry&quot;);

//	var bcOrderRevised : BusComp = this.BusComp()						//WA39:MSS
//	var idRevisedOrder = bcOrderRevised.GetFieldValue(&quot;Id&quot;);			//WA39:MSS
   	var idRevisedOrder = Inputs.GetProperty(&quot;strOrderId&quot;);				//WA39:MSS
//	var orderNumber = bcOrderRevised.GetFieldValue(&quot;Order Number&quot;);		//WA39:MSS
    var orderNumber = Inputs.GetProperty(&quot;strOrderNumber&quot;);				//WA39:MSS

    //retrieve all line items about header order
  	var BcOrderEntryRevisedLI  : BusComp = BoOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);			
	BcOrderEntryRevisedLI.SetViewMode(AllView);
	BcOrderEntryRevisedLI.ClearToQuery();
	BcOrderEntryRevisedLI.ActivateField(&quot;Order Header Id&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Line Number&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;IsRootItem&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Action Code&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Completed Date&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;VF Cancel Flag&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Status&quot;);
	BcOrderEntryRevisedLI.SetSearchSpec (&quot;Order Header Id&quot;, idRevisedOrder);
	BcOrderEntryRevisedLI.ExecuteQuery(ForwardOnly);	

	//for each line items verify if is selected the VF Cancel Flag in this case the line item should be sent
	var recordExistsOnLineItems = BcOrderEntryRevisedLI.FirstRecord();
	var strCancelFlg = null;
	var strActionCode = null;	
	var strActionDeleted	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
	var strActionExisting	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Existing&quot;);
	var strOLIStatusCancelled	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);
	while(recordExistsOnLineItems) 
	{
	  var isRoot = BcOrderEntryRevisedLI.GetFieldValue(&quot;IsRootItem&quot;);
	  strCancelFlg = BcOrderEntryRevisedLI.GetFieldValue(&quot;VF Cancel Flag&quot;);
	  strActionCode = BcOrderEntryRevisedLI.GetFieldValue(&quot;Action Code&quot;);
	            
	  /* WA#18: Old Code
	  if (strCancelFlg == &quot;N&quot;) 
	  {          	
		CloseChildItemXA(BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;));
	    BcOrderEntryRevisedLI.SetFieldValue(&quot;Action Code&quot;, strAction);
	    BcOrderEntryRevisedLI.SetFieldValue(&quot;Completed Date&quot;, sysdatestring);
	    BcOrderEntryRevisedLI.WriteRecord();
	  }
	  // CR034 - MNP Reject SimCard
	  else if(strCancelFlg == &quot;Y&quot; &amp;&amp; isRoot == &quot;Y&quot;)
	  {
		var svc	= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psInput	= TheApplication().NewPropertySet();
		var psOutput= TheApplication().NewPropertySet();
					
		psInput.SetProperty(&quot;Object Id&quot;,BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;));
		psInput.SetProperty(&quot;ProcessName&quot;, &quot;VF Check Attribute Values WF&quot;);
			   		
		psInput.SetProperty(&quot;AttrName&quot;,&quot;IMSI&quot;);   		
		svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
	  }
	  */
	  if(strCancelFlg == &quot;Y&quot; &amp;&amp; isRoot == &quot;Y&quot;)
	  {
	  	
		CloseChildItem(BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;)); // Added
		CloseChildItemXA(BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;));//VFTRCBU-16745
	    BcOrderEntryRevisedLI.SetFieldValue(&quot;Action Code&quot;, strActionDeleted);
	    //BcOrderEntryRevisedLI.SetFieldValue(&quot;Completed Date&quot;, sysdatestring); Removed 
 	    BcOrderEntryRevisedLI.WriteRecord();
		/* WA#18 - removed
		var svc	= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psInput	= TheApplication().NewPropertySet();
		var psOutput= TheApplication().NewPropertySet();
					
		psInput.SetProperty(&quot;Object Id&quot;,BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;));
		psInput.SetProperty(&quot;ProcessName&quot;, &quot;VF Check Attribute Values WF&quot;);
			   		
		psInput.SetProperty(&quot;AttrName&quot;,&quot;IMSI&quot;);   		
		svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
		*/
	  }
	  //Added
	  if(strCancelFlg == &quot;N&quot; &amp;&amp; isRoot == &quot;Y&quot; &amp;&amp; strActionCode == strActionDeleted)
	  {
		CloseChildItemNOFlag(BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;)); 
		CloseChildItemXANOFlag(BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;)); //VFTRCBU-16745
	    BcOrderEntryRevisedLI.SetFieldValue(&quot;Action Code&quot;, strActionExisting);
	    //BcOrderEntryRevisedLI.SetFieldValue(&quot;Completed Date&quot;, sysdatestring); Removed 
 	    BcOrderEntryRevisedLI.WriteRecord();
	  }
	  //End of added 
		   
	  recordExistsOnLineItems = BcOrderEntryRevisedLI.NextRecord();
	}// !while
  }//!try
		
  finally
  {
	BcOrderEntryRevisedLI	= null;
//	bcOrderRevised		= null;						//WA39:MSS
	BoOrderEntry		= null;
	lineItemsCancelled	= null;}
	//svc		= null;
	//psInput	= null;
  }"
			   SEQUENCE="23"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateParentOrderWaiting"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateParentOrderWaiting(Inputs:PropertySet, Outputs:PropertySet) 
{ 
// WA#18 the code was depreciated entirey with new process 20150402
/*  try 
  {
 	var strAction = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
    var strOLIStatusCancelled = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
    var strOrderStatusComplete = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);
    var strClosed = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;);
	var lineItemsCancelled : PropertySet = TheApplication().NewPropertySet();
	var BoOrderEntry : BusObject = TheApplication().GetBusObject(&quot;Order Entry&quot;);
	var BcOrderEntryRevisedLI : BusComp;
	var BCParentOrder : BusComp;
	var BcOrderEntryParentLI : BusComp; 
	var boServiceReq : BusObject;
	var bcServiceReq : BusComp;
	var BcCurrentContext : BusComp;
	var svc : Service;
	var psInput : PropertySet;
	var psOutput : PropertySet;
	
//  var bcOrderRevised : BusComp = this.BusComp();						//WA39:MSS
//  var idRevisedOrder = bcOrderRevised.GetFieldValue(&quot;Id&quot;);			//WA39:MSS
   	var idRevisedOrder = Inputs.GetProperty(&quot;strOrderId&quot;);				//WA39:MSS
//  var orderNumber = bcOrderRevised.GetFieldValue(&quot;Order Number&quot;);		//WA39:MSS
    var orderNumber = Inputs.GetProperty(&quot;strOrderNumber&quot;);				//WA39:MSS
      
    //retrieve all line items about header order
    var integOrderId;
    var sOliId;
    var sMSISDN;
	BcOrderEntryRevisedLI   = BoOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);			
    BcOrderEntryRevisedLI.SetViewMode(AllView); 
	BcOrderEntryRevisedLI.ClearToQuery();
	BcOrderEntryRevisedLI.ActivateField(&quot;Order Header Id&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Line Number&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;VF Cancel Flag&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Status&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;MSISDN&quot;);
	BcOrderEntryRevisedLI.ActivateField(&quot;Asset Integration Id&quot;);
	BcOrderEntryRevisedLI.SetSearchSpec(&quot;Order Header Id&quot;, idRevisedOrder);
	BcOrderEntryRevisedLI.ExecuteQuery(ForwardOnly);	
	    
	//for each line items verify if is selected the VF Cancel Flag and make the lineItemsCancelled table that stores the flag selection.
	var recordExistsOnLineItems = BcOrderEntryRevisedLI.FirstRecord();
	   
	while(recordExistsOnLineItems) 
	{
      lineItemsCancelled.SetProperty(BcOrderEntryRevisedLI.GetFieldValue(&quot;Line Number&quot;), BcOrderEntryRevisedLI.GetFieldValue(&quot;VF Cancel Flag&quot;))
            				            
      if (BcOrderEntryRevisedLI.GetFieldValue(&quot;VF Cancel Flag&quot;) == &quot;Y&quot; &amp;&amp; BcOrderEntryRevisedLI.GetFieldValue(&quot;IsRootItem&quot;) == &quot;Y&quot;)
      {
		integOrderId = 	BcOrderEntryRevisedLI.GetFieldValue(&quot;Asset Integration Id&quot;);
		sOliId 		 = 	BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;);
		sMSISDN      =  BcOrderEntryRevisedLI.GetFieldValue(&quot;MSISDN&quot;);
		svc			 =  TheApplication().GetService(&quot;Workflow Process Manager&quot;);
        BcOrderEntryRevisedLI.SetFieldValue(&quot;Status&quot;, strOLIStatusCancelled);
        BcOrderEntryRevisedLI.WriteRecord();
        //CR034 MNP Port In Cancellation
        psInput 	= TheApplication().NewPropertySet();
		psOutput 	= TheApplication().NewPropertySet();
		psInput.SetProperty(&quot;pi_msisdn&quot;,sMSISDN);
		psInput.SetProperty(&quot;Order Id&quot;,idRevisedOrder);
		psInput.SetProperty(&quot;Object Id&quot;,sOliId);
		psInput.SetProperty(&quot;Integration Id&quot;,integOrderId);
		psInput.SetProperty(&quot;ProcessName&quot;, &quot;VF Check Attribute Values WF&quot;);
		psInput.SetProperty(&quot;Bulk&quot;,&quot;Y&quot;);
		svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);	
		   		
        CloseChildItem(BcOrderEntryRevisedLI.GetFieldValue(&quot;Id&quot;));
      }
            
      recordExistsOnLineItems = BcOrderEntryRevisedLI.NextRecord();
	}// ! while

    BCParentOrder  = BoOrderEntry.GetBusComp(&quot;Order Entry - Orders&quot;);
    BCParentOrder.ActivateField(&quot;Status&quot;);
	BCParentOrder.ActivateField(&quot;Revision&quot;);
	BCParentOrder.ActivateField(&quot;Revising&quot;);
		
	BCParentOrder.SetViewMode(AllView);
	BCParentOrder.ClearToQuery();
	BCParentOrder.SetSearchSpec (&quot;Order Number&quot;, orderNumber);
	BCParentOrder.SetSearchSpec (&quot;Revision&quot;, &quot;1&quot;);
	BCParentOrder.ExecuteQuery(ForwardOnly);
	  	
	if(BCParentOrder.FirstRecord())
	{
	  var idParentOrder = BCParentOrder.GetFieldValue(&quot;Id&quot;);
	  //retrieve line item about parent order
	  BcOrderEntryParentLI 		= BoOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
	  BcOrderEntryParentLI.SetViewMode(AllView);
	  BcOrderEntryParentLI.ClearToQuery();
	  BcOrderEntryParentLI.ActivateField(&quot;Order Header Id&quot;);
	  BcOrderEntryParentLI.ActivateField(&quot;Line Number&quot;);
	  BcOrderEntryParentLI.ActivateField(&quot;IsRootItem&quot;);
	  BcOrderEntryParentLI.ActivateField(&quot;Action Code&quot;);
			
	  BcOrderEntryParentLI.ActivateField(&quot;Status&quot;);
	  BcOrderEntryParentLI.ActivateField(&quot;VF Cancel Flag&quot;);
	  BcOrderEntryParentLI.SetSearchSpec (&quot;Order Header Id&quot;,idParentOrder);
	  BcOrderEntryParentLI.ExecuteQuery(ForwardOnly);	
										
	  var recordExistsOnParentLineItems = BcOrderEntryParentLI.FirstRecord();
	  var allParentLineItemsCancelled =&quot;true&quot;;
	  //update flag cancel and status on line item about parent order 
	  while(recordExistsOnParentLineItems) 
	  {
		var lineNumber = BcOrderEntryParentLI.GetFieldValue(&quot;Line Number&quot;);
	    var cancelledFlag = lineItemsCancelled.GetProperty(lineNumber); 
	    var isRoot = BcOrderEntryParentLI.GetFieldValue(&quot;IsRootItem&quot;);
	           
	    if (cancelledFlag == &quot;Y&quot; &amp;&amp; isRoot == &quot;Y&quot;)
	    {     
          CloseChildItemXA(BcOrderEntryParentLI.GetFieldValue(&quot;Id&quot;));
//        this.CloseChildItemWaiting(BcOrderEntryParentLI.GetFieldValue(&quot;Id&quot;));         //WA39:MSS
          CloseChildItemWaiting(BcOrderEntryParentLI.GetFieldValue(&quot;Id&quot;));              //WA39:MSS 	  	 
        }
                    
	    else if (cancelledFlag == &quot;N&quot; &amp;&amp; isRoot == &quot;Y&quot;)
	    {
	      allParentLineItemsCancelled=&quot;false&quot;;
	    }
	    
        recordExistsOnParentLineItems = BcOrderEntryParentLI.NextRecord();
	  }// !while
	     
	  //if all parent line items have been cancelled, set to cancelled also the order parent. 
		    
	  if (allParentLineItemsCancelled == &quot;true&quot;)
	  {	
		BCParentOrder.SetFieldValue(&quot;Status&quot;, strOLIStatusCancelled );
		BCParentOrder.WriteRecord();
				
		//close service request
					
		var strSRStatusClosed    = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;, &quot;Closed&quot;);
		var strSRSubStatusCompleted   = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;, &quot;Completed&quot;);
		var strSubArea   = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;MNP Port In SR&quot;, &quot;SubArea&quot;);
		boServiceReq = TheApplication().GetBusObject(&quot;Service Request&quot;);
		bcServiceReq = boServiceReq.GetBusComp(&quot;Service Request&quot;);
			
		bcServiceReq.ClearToQuery ();
		bcServiceReq.ActivateField (&quot;Status&quot;);
		bcServiceReq.ActivateField (&quot;Sub-Status&quot;);
		bcServiceReq.ActivateField (&quot;Sub-Area&quot;);
		bcServiceReq.ActivateField (&quot;Order Id&quot;);				
		bcServiceReq.SetSearchSpec (&quot;Order Id&quot;, idParentOrder );
		bcServiceReq.SetSearchSpec (&quot;Sub-Area&quot;, strSubArea );
			
		bcServiceReq.ExecuteQuery (ForwardOnly);
		var srStatus = null;
				
		var bcSRExist = bcServiceReq.FirstRecord();
		if(bcSRExist)
		{	
					
		  srStatus = bcServiceReq.GetFieldValue(&quot;Status&quot;);
		  if (srStatus != strClosed ) 
		  {
			bcServiceReq.SetFieldValue (&quot;Status&quot;, strSRStatusClosed);
			bcServiceReq.SetFieldValue (&quot;Sub-Status&quot;, strSRSubStatusCompleted);
			bcServiceReq.WriteRecord ();
						
		  }		
		}
	  }
	 
	  BCParentOrder.SetFieldValue(&quot;Revising&quot;,&quot;N&quot;);
	  BCParentOrder.WriteRecord();
	        
	  //recupera contesto
	  BcCurrentContext		= this.BusComp();
	  BcCurrentContext.SetViewMode(AllView);
	  BcCurrentContext.ClearToQuery();
	  BcCurrentContext.SetSearchSpec(&quot;Id&quot;,idRevisedOrder );
	  BcCurrentContext.ExecuteQuery(ForwardBackward); //Vaibhav 27/03/2012: Added parameter for oracle review
	  BcCurrentContext.SetFieldValue(&quot;Status&quot;, strOrderStatusComplete);
	  BcCurrentContext.WriteRecord();
	  BcCurrentContext.SetSearchSpec(&quot;Id&quot;,idRevisedOrder );
	  BcCurrentContext.ExecuteQuery(ForwardBackward); //Vaibhav 27/03/2012: Added parameter for oracle review
  	}// ! if(BCParentOrder.FirstRecord())
	
  }// ! try
   	
  catch(e)
  {
	throw(e);
  }	
  finally
  {
	BcCurrentContext 	= null;
	bcServiceReq  	= null;
	boServiceReq  	= null;
	BcOrderEntryParentLI  	= null;
	BCParentOrder  	= null;
	BcOrderEntryRevisedLI   	= null;
	BoOrderEntry  	= null;
//	bcOrderRevised 	= null;								//WA39:MSS
	lineItemsCancelled	= null;
	svc = null;
	psInput  = null;
	psOutput = null;
  } */ 
}"
			   SEQUENCE="24"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkDiscountMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkDiscountMethod(orderId, billingAccountID)
{
	try
	{
	  // Use High Performance Business Component
	  var OrderBO   : BusObject    =  TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	  var accountBO  : BusObject   =   TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
 	  var OrderItemBC  : BusComp =  OrderBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
 	  var assetItemBC  : BusComp =  accountBO.GetBusComp(&quot;TELCO Asset - Simple&quot;);
  	  
  	  var lookupStatusPending  = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);
  	  var lookupStatusOpen  = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Open&quot;);
   	  var lookupStatusInstalled  = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Installed&quot;);
   	  var lookupStatusCompleted = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);
   	  var lookupStatusCancelled = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
   	  var lookupStatusActiveAsset = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
   	  var lookupStatusSuspendedAsset = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Suspended&quot;);
   	  var lookupNewActionCode = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
   	  
//	  var result = false;        //WA39:MSS  - fixing legacy bug
	  var result = &quot;&quot;;			 //WA39:MSS  - fixing legacy bug
	  OrderItemBC.SetViewMode(AllView);
      OrderItemBC.ClearToQuery();
	 
	 
 	  OrderItemBC.ActivateField(&quot;Billing Account Id&quot;);
 	  OrderItemBC.ActivateField(&quot;Part Number&quot;);
 	  OrderItemBC.ActivateField(&quot;Status&quot;);
 	  OrderItemBC.ActivateField(&quot;Action Code&quot;);
 	  OrderItemBC.SetSearchSpec(&quot;Order Id&quot;, orderId);
 	  OrderItemBC.SetSearchSpec(&quot;Billing Account Id&quot;, billingAccountID);
 	  
	  OrderItemBC.ExecuteQuery(ForwardOnly);
	  
	  var OrderItemBCExists = OrderItemBC.FirstRecord();
	  var moreDiscountOnOrder = false;
	  var DiscountJokerOnOrder = false;
	  
	  var countDiscount = 0 ;
	  var countJoker = 0;
	  var partNum    = null;
	  var statusItem = null;
	  var actionCode = null ;
	  while(OrderItemBCExists &amp;&amp; moreDiscountOnOrder == false &amp;&amp; DiscountJokerOnOrder == false ) {
	 	
	 	    partNum = OrderItemBC.GetFieldValue(&quot;Part Number&quot;);
	 	    statusItem =  OrderItemBC.GetFieldValue(&quot;Status&quot;);
	 	    actionCode =  OrderItemBC.GetFieldValue(&quot;Action Code&quot;);
	 		if ( partNum == &quot;5000&quot; &amp;&amp; actionCode == lookupNewActionCode) 
	 		{
	 			countDiscount = countDiscount + 1;
	 		}
	 		
	 		if ( partNum == &quot;11000&quot; &amp;&amp; actionCode == lookupNewActionCode) 
	 		{
	 			countJoker = countJoker + 1;
	 		
	 		}
		  	
		  	if (countDiscount &gt; 1)
		  	{
		  		moreDiscountOnOrder = true;
		  	
		  	}
		  	
		  	if (countDiscount&gt;=1 &amp;&amp; countJoker&gt;=1)
		  	{
		  		DiscountJokerOnOrder = true;
		  	
		  	}
		  	OrderItemBCExists = OrderItemBC.NextRecord();
		}		 
	
	
	  var moreDiscountOnBA = false;
	  var DiscountJokerOnBA = false;
  	 
	  if (countDiscount == 1 &amp;&amp; DiscountJokerOnOrder != true &amp;&amp; moreDiscountOnOrder != true)
	  {
	  		  var searchst = &quot;[Billing Account Id] = &apos;&quot; + billingAccountID + &quot;&apos; AND [Status] = &apos;&quot; + lookupStatusActiveAsset + &quot;&apos; AND ([Product Part Number] = &apos;5000&apos; OR [Product Part Number] = &apos;11000&apos;)&quot;;//Modified for build 1.4
			  assetItemBC.SetViewMode(AllView);
		      assetItemBC.ClearToQuery();
		 	  assetItemBC.ActivateField(&quot;Billing Account Id&quot;);
		 	  assetItemBC.ActivateField(&quot;Product Part Number&quot;);
 	 		  assetItemBC.ActivateField(&quot;Status&quot;);
 	 		  assetItemBC.SetSearchExpr(searchst);//Modified for build 1.4
			  assetItemBC.ExecuteQuery(ForwardOnly);
			  
			  var assetItemBCExists = assetItemBC.FirstRecord();
			  countDiscount = 0 ;
			  countJoker = 0;
			  partNum = null;
			  statusItem = null;
			  while(assetItemBCExists &amp;&amp; moreDiscountOnBA == false &amp;&amp; DiscountJokerOnBA == false ) 
			  {
			 	    partNum = assetItemBC.GetFieldValue(&quot;Product Part Number&quot;);
			 	    statusItem =  assetItemBC.GetFieldValue(&quot;Status&quot;);
			 		if ( partNum == &quot;5000&quot; &amp;&amp; (statusItem == lookupStatusActiveAsset ) )
			 		{
			 			countDiscount = countDiscount + 1;
			 		}
			 		
			 		if ( partNum == &quot;11000&quot; &amp;&amp; (statusItem == lookupStatusActiveAsset ) )
			 		{
			 			countJoker = countJoker + 1;
			 		}
				  	
				  	if (countDiscount &gt;= 1)
				  	{
				  		moreDiscountOnBA = true;
				  	}
				  	
				  	if (countJoker &gt;= 1)
				  	{
				  		DiscountJokerOnBA = true;
				  	}
				  	assetItemBCExists = assetItemBC.NextRecord();
			   } 	
	   }
	   
	   if (countJoker &gt;= 1 &amp;&amp; DiscountJokerOnOrder != true &amp;&amp; moreDiscountOnOrder != true &amp;&amp; DiscountJokerOnBA != true &amp;&amp; moreDiscountOnBA != true)//Added for build 1.4
	  {
	  		  var searchst = &quot;[Billing Account Id] = &apos;&quot; + billingAccountID + &quot;&apos; AND [Status] = &apos;&quot; + lookupStatusActiveAsset + &quot;&apos; AND [Product Part Number] = &apos;5000&apos;&quot;;
			  assetItemBC.SetViewMode(AllView);
		      assetItemBC.ClearToQuery();
		 	  assetItemBC.ActivateField(&quot;Billing Account Id&quot;);
		 	  assetItemBC.ActivateField(&quot;Product Part Number&quot;);
 	 		  assetItemBC.ActivateField(&quot;Status&quot;);
		 	  assetItemBC.SetSearchExpr(searchst);
			  assetItemBC.ExecuteQuery(ForwardOnly);
			  
			  var assetItemBCExists = assetItemBC.FirstRecord();
			  countDiscount = 0 ;
			  countJoker = 0;
			  partNum = null;
			  statusItem = null;
			  while(assetItemBCExists &amp;&amp; moreDiscountOnBA == false &amp;&amp; DiscountJokerOnBA == false ) 
			  {
			 	    partNum = assetItemBC.GetFieldValue(&quot;Product Part Number&quot;);
			 	    statusItem =  assetItemBC.GetFieldValue(&quot;Status&quot;);
			 		if ( partNum == &quot;5000&quot; &amp;&amp; (statusItem == lookupStatusActiveAsset ) )
			 		{
			 			countDiscount = countDiscount + 1;
			 		}				  	
				  	if (countDiscount &gt;= 1)
				  	{
				  		DiscountJokerOnBA = true;
				  	}
				  	assetItemBCExists = assetItemBC.NextRecord();
			   } 	
	   }
	   
	  if (moreDiscountOnBA == true || moreDiscountOnOrder == true)
	  {
	    // result = true;						//WA39:MSS  - fixing legacy bug
		result = &quot;MoreDiscountFound&quot;;			//WA39:MSS  - fixing legacy bug
	  }
	  
	  if (DiscountJokerOnBA == true || DiscountJokerOnOrder == true)
 	  {
		result = &quot;JokerFound&quot;;
	  }
	}	
		
   	catch(e)
	{
		throw (e);
	}
	finally
	{
		assetItemBC	= null;
		OrderItemBC	= null;
		accountBO	= null;
		OrderBO		= null;
	}
  return result;
}"
			   SEQUENCE="7"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkTAFields"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkTAFields(Inputs:PropertySet, Outputs:PropertySet)
{
	try
	{
//		var thisBC = this.BusComp();															//WA39:MSS
//		var bcContact  : BusComp = TheApplication().ActiveBusObject().GetBusComp(&quot;Contact&quot;);	//WA39:MSS
//		var IndividualFlag = thisBC.GetFieldValue(&quot;VF Flag Customer PF&quot;);						//WA39:MSS
//		var accountType   = thisBC.GetFieldValue(&quot;Account Market Class&quot;);						//WA39:MSS
//		var ContactId	=	thisBC.GetFieldValue(&quot;X_Primary_contact&quot;);							//WA39:MSS
		
		var IndividualFlag = Inputs.GetProperty(&quot;strVFFlagCustomerPF&quot;);							//WA39:MSS
		var accountType = Inputs.GetProperty(&quot;strAccountMarketClass&quot;);							//WA39:MSS
		var ContactId = Inputs.GetProperty(&quot;strX_Primary_contact&quot;);								//WA39:MSS
		var vfTaName = Inputs.GetProperty(&quot;strVFTAName&quot;);										//WA39:MSS
		var vftatcid = Inputs.GetProperty(&quot;strVFTATcId&quot;);										//WA39:MSS
		var vftaCertCirc = Inputs.GetProperty(&quot;strVFTACertifyCircular&quot;);						//WA39:MSS
		var vftaCircOn = Inputs.GetProperty(&quot;strVFTACircularOn&quot;);								//WA39:MSS

		var strCorporate = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;, &quot;101&quot;);
		var Turkey = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;X_CITIZENSHIP&quot;,&quot;Turkish&quot;);

		var boContact : BusObject = TheApplication().GetBusObject(&quot;VF Contact Light&quot;);
		var bcContact : BusComp = boContact.GetBusComp(&quot;VF Contact Light&quot;);

		with(bcContact)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Citizenship&quot;);
			SetSearchSpec(&quot;Id&quot;, ContactId);
		    ExecuteQuery(ForwardOnly);
		    if(FirstRecord())
		    	var Country = GetFieldValue(&quot;Citizenship&quot;); 
		}
		if(IndividualFlag==&quot;N&quot; &amp;&amp; Country == Turkey)
		{
//			var vfTaName = thisBC.GetFieldValue(&quot;VF TA Name&quot;);									//WA39:MSS
//			var vftatcid = thisBC.GetFieldValue(&quot;VF TA Tc Id&quot;);									//WA39:MSS
//			var vftaCertCirc = thisBC.GetFieldValue(&quot;VF TA Certify Circular&quot;);					//WA39:MSS
//			var vftaCircOn = thisBC.GetFieldValue(&quot;VF TA Circular On&quot;);							//WA39:MSS
			
			if(vfTaName.length &lt;= 0 || vftatcid.length &lt;=0 )		
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;108&quot;));
			
			if (accountType == strCorporate){
				if (vftaCertCirc.length &lt;= 0 || vftaCircOn.length &lt;= 0)
				  TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;108&quot;));
			}
		}
	}
	finally
	{
		bcContact = null;
		bcContact = null;
//		thisBC = null;																			//WA39:MSS
	}
}"
			   SEQUENCE="9"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkVodamoney15_25"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkVodamoney15_25(orderId, billingAccountID)
{
	try
	{
		var bsCheckOrders  : Service = TheApplication().GetService(&quot;VF Check Order&quot;);
		var Inputs  : PropertySet= TheApplication().NewPropertySet();
		var Outputs  : PropertySet= TheApplication().NewPropertySet();
			
		var strMessageCategory 	= &quot;VF Message Category&quot;;
		var strCode				= &quot;&quot;;
		var sMsg				= &quot;&quot;;
			
		Inputs.SetProperty(&quot;Billing Account Id&quot;,billingAccountID);
		Inputs.SetProperty(&quot;Order Id&quot;,orderId);
		bsCheckOrders.InvokeMethod(&quot;checkProduct&quot;,Inputs,Outputs);
		
		var res = Outputs.GetProperty(&quot;result&quot;);
		
		if(res == &quot;15StandardandDiscount&quot;)
		{
			strCode				= &quot;254&quot;;
			sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return (CancelOperation);
		}

		if(res == &quot;25StandardandDiscount&quot;)
		{
			strCode				= &quot;255&quot;;
			sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return (CancelOperation);
		} 
		
		if(res == &quot;MoreDiscount&quot;)
		{
			strCode				= &quot;098&quot;;
			sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return (CancelOperation);
		} 
					
		if(res == &quot;MoreSVBDiscount&quot;)
		{
			strCode				= &quot;217&quot;;
			sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return (CancelOperation);
		} 
			
		if(res == &quot;bothDiscount&quot;)
		{
			strCode				= &quot;218&quot;;
			sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return (CancelOperation);
		} 
		
		if(res == &quot;DiscountandJoker&quot;)
		{
			strCode				= &quot;230&quot;;
			sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return (CancelOperation);
		} 
			
		if(res == &quot;JokerandDiscount&quot;)
		{
			strCode				= &quot;229&quot;;
			sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return (CancelOperation);
		} 
	}
	finally
	{
		Outputs		= null;
		Inputs		= null;
		bsCheckOrders	= null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="07/06/2016 15:09:59"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/21/2014 19:35:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



