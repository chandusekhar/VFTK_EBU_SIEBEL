<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="PRM VF TR Project"
	   UI_FREEZE="N"
	   UPDATED="01/16/2018 15:15:40"
	   UPDATED_BY="IBM_TFERREIRA"
	   CREATED="08/24/2011 19:18:30"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="PRM VF TR Utility Service"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="01/16/2018 14:55:40"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="IBM_TFERREIRA"
		   UPDATED="01/16/2018 15:15:11"
		   UPDATED_BY="IBM_TFERREIRA"
		   CREATED="10/25/2011 18:19:35"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="PRM Utility Service"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="10/25/2011 18:19:35"
			   UPDATED_BY="SADMIN"
			   CREATED="10/25/2011 18:19:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AssignCrossCA"
			   UPDATED="02/16/2012 07:54:32"
			   UPDATED_BY="SADMIN"
			   CREATED="02/16/2012 07:54:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/16/2012 07:54:32"
				   UPDATED_BY="SADMIN"
				   CREATED="02/16/2012 07:54:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/16/2012 07:54:32"
				   UPDATED_BY="SADMIN"
				   CREATED="02/16/2012 07:54:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AssignCrossCA"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/16/2012 07:54:32"
				   UPDATED_BY="SADMIN"
				   CREATED="02/16/2012 07:54:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AssignWithinCA"
			   UPDATED="03/06/2012 10:11:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/06/2012 10:11:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/06/2012 10:11:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/06/2012 10:11:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/06/2012 10:11:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/06/2012 10:11:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AssignWithinCA"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/06/2012 10:11:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/06/2012 10:11:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckBillAcc"
			   UPDATED="05/17/2012 12:09:24"
			   UPDATED_BY="SADMIN"
			   CREATED="01/26/2012 18:25:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/17/2012 12:09:24"
				   UPDATED_BY="SADMIN"
				   CREATED="01/26/2012 18:25:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckBillAcc"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/26/2012 18:25:43"
				   UPDATED_BY="SADMIN"
				   CREATED="01/26/2012 18:25:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateOrderLineItem"
			   UPDATED="02/01/2013 17:51:13"
			   UPDATED_BY="SADMIN"
			   CREATED="02/01/2013 17:51:13"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/01/2013 17:51:13"
				   UPDATED_BY="SADMIN"
				   CREATED="02/01/2013 17:51:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/01/2013 17:51:13"
				   UPDATED_BY="SADMIN"
				   CREATED="02/01/2013 17:51:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateOrderLineItem"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/01/2013 17:51:13"
				   UPDATED_BY="SADMIN"
				   CREATED="02/01/2013 17:51:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GIBCalledOnPlayBar"
			   UPDATED="01/27/2014 11:35:38"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2011 19:29:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GotoOrderView"
			   UPDATED="12/16/2011 18:50:39"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2011 18:50:39"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GotoOrderView"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/16/2011 18:50:39"
				   UPDATED_BY="SADMIN"
				   CREATED="12/16/2011 18:50:39"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="OrderUpdate"
			   UPDATED="10/25/2011 18:19:35"
			   UPDATED_BY="SADMIN"
			   CREATED="10/25/2011 18:19:35"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Billing Account Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/25/2011 18:19:35"
				   UPDATED_BY="SADMIN"
				   CREATED="10/25/2011 18:19:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/25/2011 18:19:35"
				   UPDATED_BY="SADMIN"
				   CREATED="10/25/2011 18:19:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="OrderUpdate"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/25/2011 18:19:35"
				   UPDATED_BY="SADMIN"
				   CREATED="10/25/2011 18:19:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UngroupPRMCleanXA"
			   UPDATED="01/19/2012 13:19:34"
			   UPDATED_BY="SADMIN"
			   CREATED="01/19/2012 13:19:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Root Level Item Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/19/2012 13:19:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/19/2012 13:19:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UngroupPRMCleanXA"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/19/2012 13:19:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/19/2012 13:19:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ValidateContactAndCustomer"
			   UPDATED="12/16/2011 18:50:39"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2011 18:50:39"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ValidateContactAndCustomer"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/16/2011 18:50:39"
				   UPDATED_BY="SADMIN"
				   CREATED="12/16/2011 18:50:39"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkFuncOnView"
			   UPDATED="01/13/2012 13:49:54"
			   UPDATED_BY="SADMIN"
			   CREATED="01/13/2012 13:49:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkFuncOnView"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/13/2012 13:49:54"
				   UPDATED_BY="SADMIN"
				   CREATED="01/13/2012 13:49:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="setOwnerAccountId"
			   UPDATED="04/14/2013 12:12:40"
			   UPDATED_BY="SADMIN"
			   CREATED="04/14/2013 12:12:39"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/14/2013 12:12:40"
				   UPDATED_BY="SADMIN"
				   CREATED="04/14/2013 12:12:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/14/2013 12:12:40"
				   UPDATED_BY="SADMIN"
				   CREATED="04/14/2013 12:12:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="GroupNum"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/14/2013 12:12:40"
				   UPDATED_BY="SADMIN"
				   CREATED="04/14/2013 12:12:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="setOwnerAccountId"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/14/2013 12:12:40"
				   UPDATED_BY="SADMIN"
				   CREATED="04/14/2013 12:12:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AssignCrossCA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AssignCrossCA(Inputs,Outputs)
{ 
	try
	{
		var OrderId = Inputs.GetProperty(&quot;Order Id&quot;);
		var BO : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var BCo : BusComp = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
	
		var strMessageCategory = &quot;&quot;;
		var strCode = &quot;&quot;;
		var sMsg = &quot;&quot;;
		var strOrderReason = &quot;&quot;;
		var CrossType = &quot;&quot;;
		var VFBulkSMS = &quot;&quot;;
		var strAccontId = &quot;&quot;;
		var strNewAccountId = &quot;&quot;;
		var strOrderReasonCode = &quot;&quot;;
		var strOrderSubType = &quot;&quot;;
		var strBillAccId = &quot;&quot;;
		var strSiBillAcc = &quot;&quot;;
		var strNewAccountNumber= &quot;&quot;;
		
		with(BCo)
		{
			SetViewMode(AllView);
	   		ClearToQuery();
			ActivateField(&quot;SI Account Id&quot;);
			ActivateField(&quot;VF Is MBA&quot;);
			ActivateField(&quot;VF SI Bulk SMS&quot;);
			ActivateField(&quot;Order Sub Type Calc&quot;);
			ActivateField(&quot;Order Reason Code&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
	   		SetSearchSpec(&quot;Id&quot;,OrderId);
	   		ExecuteQuery(ForwardOnly);
	   		if(FirstRecord())
	   		{
	   			VFBulkSMS = GetFieldValue(&quot;VF SI Bulk SMS&quot;);	
				strAccontId = GetFieldValue(&quot;Account Id&quot;);
				strNewAccountId = GetFieldValue(&quot;SI Account Id&quot;);
				strOrderReason = GetFieldValue(&quot;Order Reason&quot;);
				strSiBillAcc = GetFieldValue(&quot;SI Billing Account Id&quot;);
				strBillAccId = GetFieldValue(&quot;Billing Account Id&quot;);
				strOrderSubType = GetFieldValue(&quot;Order Sub Type Calc&quot;);
				strOrderReasonCode = GetFieldValue(&quot;Order Reason Code&quot;);
				strNewAccountNumber = GetFieldValue(&quot;SI Account Number&quot;);
				
			
				if (strOrderReason == &quot;&quot; || strOrderReason == null)
				{
					strMessageCategory = &quot;VF Message Category&quot;;
					strCode = &quot;R21_133&quot;;
					sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);		 		
					TheApplication().RaiseErrorText(sMsg);
					return(CancelOperation);						
				}
				//if (strOrderReasonCode == &quot;2200&quot; || strOrderReasonCode == &quot;2201&quot;)//TC-5029:MNPRED
				if (strOrderReasonCode == &quot;2200&quot;)//TC-5029:MNPRED
				{
					if(TheApplication().GetProfileAttr(&quot;hatsahKulOTPVerified&quot;)!=&quot;Y&quot;)
						{
						strMessageCategory = &quot;VF Message Category&quot;;
						strCode = &quot;VF_MNPRED_007&quot;;
						sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);		 		
						TheApplication().RaiseErrorText(sMsg);
						return(CancelOperation);
						}						
				}
				if (strAccontId == strNewAccountId)
				{
					strMessageCategory = &quot;VF Message Category&quot;;
					strCode = &quot;147&quot;;
					sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
					TheApplication().RaiseErrorText(sMsg);
					return(CancelOperation);
				}
				if (VFBulkSMS == &quot;Y&quot;)
				{
					strMessageCategory = &quot;VF Message Category&quot;;
					strCode = &quot;R142_375&quot;;
					sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
					TheApplication().RaiseErrorText(sMsg);
					return(CancelOperation);
				}
				if (TheApplication().GetProfileAttr(&quot;SingleOrMultipleBA&quot;) == &quot;Multiple&quot;)
				{
		  				SetFieldValue(&quot;VF Is MBA&quot;, &quot;True&quot;);
		  				WriteRecord();
		 		}
		 	}
		}
		
		var InAccnt : PropertySet = TheApplication().NewPropertySet();
		var OutAccnt : PropertySet = TheApplication().NewPropertySet();
		InAccnt.SetProperty(&quot;OldAcc&quot;,strAccontId);
		InAccnt.SetProperty(&quot;NewAcc&quot;,strNewAccountId);
		InAccnt.SetProperty(&quot;OrderReason&quot;,strOrderReason);
		InAccnt.SetProperty(&quot;VF MSISDN&quot;,TheApplication().GetProfileAttr(&quot;Old_MSISDN&quot;));//MNPRed: TC-5029
		checkAccntType(InAccnt,OutAccnt);
		CrossType = OutAccnt.GetProperty(&quot;CrossType&quot;);
		InAccnt.SetProperty(&quot;NewAcc&quot;,strNewAccountNumber);//MNPRed: TC-5029
		var mnpService = TheApplication().GetService(&quot;VF MNPRED Transfer&quot;);//MNPRed: TC-5029
		mnpService.InvokeMethod(&quot;CheckHatsahKul&quot;,InAccnt,OutAccnt);//MNPRed: TC-5029
		//Check if the MSISDN is in the Hatsah_Kul Period
			if(TheApplication().GetProfileAttr(&quot;InHatsahKulPeriod&quot;)==&quot;&quot;)
			{
				mnpService.InvokeMethod(&quot;CheckHatsahKulForTransfers&quot;,InAccnt,OutAccnt);
			}
			if(TheApplication().GetProfileAttr(&quot;InHatsahKulPeriod&quot;)==&quot;Y&quot;&amp;&amp;(strOrderReasonCode!=&quot;2200&quot;&amp;&amp;strOrderReasonCode!=&quot;2201&quot;))
			{
				strMessageCategory = &quot;VF Message Category&quot;;
		 		strCode = &quot;VF_MNPRED_010&quot;;
				sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
		 		TheApplication().RaiseErrorText(sMsg);
		 		return(CancelOperation);
			}
		//Check if the MSISDN is in the Hatsah_Kul Period END
		ManagePhoneDirectory(OrderId);
		
		var bsACSOrdMgm : Service = TheApplication().GetService(&quot;VF Orders&quot;);
		var bsInputs : PropertySet= TheApplication().NewPropertySet();
		var bsOutputs : PropertySet= TheApplication().NewPropertySet();
		bsInputs.SetProperty(&quot;orderId&quot;,OrderId); 
		bsInputs.SetProperty(&quot;CrossType&quot;,CrossType);  
		bsInputs.SetProperty(&quot;SI Billing Account Id&quot;,strSiBillAcc);
		bsInputs.SetProperty(&quot;SI Account Id&quot;, strNewAccountId);
		bsInputs.SetProperty(&quot;Billing Account Id&quot;,strBillAccId);
		bsInputs.SetProperty(&quot;Order Sub Type&quot;,strOrderSubType);
		bsInputs.SetProperty(&quot;Order Reason&quot;,strOrderReasonCode);
		bsACSOrdMgm.InvokeMethod(&quot;transfer&quot;,bsInputs,bsOutputs);
		
		if (bsOutputs.GetProperty(&quot;Result&quot;) == &quot;KO&quot;)
		{
			strMessageCategory = &quot;VF Message Category&quot;;
	 		strCode = &quot;139&quot;;
			sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	 		TheApplication().RaiseErrorText(sMsg);
	 		return(CancelOperation);
		}
	
		if (bsOutputs.GetProperty(&quot;Result&quot;) == &quot;Same Bill Cycle&quot;)
		{
			strMessageCategory = &quot;VF Message Category&quot;;
	 		strCode = &quot;166&quot;;
			sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	 		TheApplication().RaiseErrorText(sMsg);
	 		return(CancelOperation);
		}	
		
		Outputs.SetProperty(&quot;OrderId&quot;,bsOutputs.GetProperty(&quot;Order Id&quot;));
		return(CancelOperation);
		
	}
	finally
	{
		bsACSOrdMgm = null;
		bsInputs	= null;
		bsOutputs	= null;
		InAccnt		= null;
		OutAccnt	= null;
		BCo 	= null;
		BO 		= null;
		inProp	= null;
		outProp	= null;
		BS		= null;		
	}
}"
			   SEQUENCE="1"
			   UPDATED="01/27/2014 11:35:38"
			   UPDATED_BY="SADMIN"
			   CREATED="02/16/2012 07:54:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AssignWithinCA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AssignWithinCA(Inputs,Outputs)
{ 
//Vaibhav 01/03/2012: Copied the function from &quot;AssignCrossCA&quot; except the check for same customer - PROD00029973s
	try
	{
		var OrderId = Inputs.GetProperty(&quot;Order Id&quot;);
		var BO : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var BCo : BusComp = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
	
		var strMessageCategory = &quot;&quot;;
		var strCode = &quot;&quot;;
		var sMsg = &quot;&quot;;
		var strOrderReason = &quot;&quot;;
		var CrossType = &quot;&quot;;
		var VFBulkSMS = &quot;&quot;;
		var strAccontId = &quot;&quot;;
		var strNewAccountId = &quot;&quot;;
		var strOrderReasonCode = &quot;&quot;;
		var strOrderSubType = &quot;&quot;;
		var strBillAccId = &quot;&quot;;
		var strSiBillAcc = &quot;&quot;;
		
		with(BCo)
		{
			SetViewMode(AllView);
	   		ClearToQuery();
			ActivateField(&quot;SI Account Id&quot;);
			ActivateField(&quot;VF Is MBA&quot;);
			ActivateField(&quot;VF SI Bulk SMS&quot;);
			ActivateField(&quot;Order Sub Type Calc&quot;);
			ActivateField(&quot;Order Reason Code&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
	   		SetSearchSpec(&quot;Id&quot;,OrderId);
	   		ExecuteQuery(ForwardOnly);
	   		if(FirstRecord())
	   		{
	   			VFBulkSMS = GetFieldValue(&quot;VF SI Bulk SMS&quot;);	
				strAccontId = GetFieldValue(&quot;Account Id&quot;);
				strNewAccountId = GetFieldValue(&quot;SI Account Id&quot;);
				strOrderReason = GetFieldValue(&quot;Order Reason&quot;);
				strSiBillAcc = GetFieldValue(&quot;SI Billing Account Id&quot;);
				strBillAccId = GetFieldValue(&quot;Billing Account Id&quot;);
				strOrderSubType = GetFieldValue(&quot;Order Sub Type Calc&quot;);
				strOrderReasonCode = GetFieldValue(&quot;Order Reason Code&quot;);
			
				if (strOrderReason == &quot;&quot; || strOrderReason == null)
				{
					strMessageCategory = &quot;VF Message Category&quot;;
					strCode = &quot;R21_133&quot;;
					sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);		 		
					TheApplication().RaiseErrorText(sMsg);
					return(CancelOperation);						
				}
				if (VFBulkSMS == &quot;Y&quot;)
				{
					strMessageCategory = &quot;VF Message Category&quot;;
					strCode = &quot;R142_375&quot;;
					sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
					TheApplication().RaiseErrorText(sMsg);
					return(CancelOperation);
				}
				if (TheApplication().GetProfileAttr(&quot;SingleOrMultipleBA&quot;) == &quot;Multiple&quot;)
				{
		  				SetFieldValue(&quot;VF Is MBA&quot;, &quot;True&quot;);
		  				WriteRecord();
		 		}
		 	}
		}
		
		var InAccnt  : PropertySet = TheApplication().NewPropertySet();
		var OutAccnt  : PropertySet = TheApplication().NewPropertySet();
		InAccnt.SetProperty(&quot;OldAcc&quot;,strAccontId);
		InAccnt.SetProperty(&quot;NewAcc&quot;,strNewAccountId);
		InAccnt.SetProperty(&quot;OrderReason&quot;,strOrderReason);
		checkAccntType(InAccnt,OutAccnt);
		CrossType = OutAccnt.GetProperty(&quot;CrossType&quot;);
		
		ManagePhoneDirectory(OrderId);
		
		var bsACSOrdMgm : Service = TheApplication().GetService(&quot;VF Orders&quot;);
		var bsInputs : PropertySet = TheApplication().NewPropertySet();
		var bsOutputs : PropertySet = TheApplication().NewPropertySet();
		bsInputs.SetProperty(&quot;orderId&quot;,OrderId); 
		bsInputs.SetProperty(&quot;CrossType&quot;,CrossType);  
		bsInputs.SetProperty(&quot;SI Billing Account Id&quot;,strSiBillAcc);
		bsInputs.SetProperty(&quot;SI Account Id&quot;, strNewAccountId);
		bsInputs.SetProperty(&quot;Billing Account Id&quot;,strBillAccId);
		bsInputs.SetProperty(&quot;Order Sub Type&quot;,strOrderSubType);
		bsInputs.SetProperty(&quot;Order Reason&quot;,strOrderReasonCode);
		bsACSOrdMgm.InvokeMethod(&quot;transfer&quot;,bsInputs,bsOutputs);
		
		if (bsOutputs.GetProperty(&quot;Result&quot;) == &quot;KO&quot;)
		{
		
			strMessageCategory = &quot;VF Message Category&quot;;
	 		strCode = &quot;139&quot;;
			sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	 		TheApplication().RaiseErrorText(sMsg);
	 		return(CancelOperation);
		}
	
		if (bsOutputs.GetProperty(&quot;Result&quot;) == &quot;Same Bill Cycle&quot;)
		{
			strMessageCategory = &quot;VF Message Category&quot;;
	 		strCode = &quot;166&quot;;
			sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
	 		TheApplication().RaiseErrorText(sMsg);
	 		return(CancelOperation);
		}		
		Outputs.SetProperty(&quot;OrderId&quot;,bsOutputs.GetProperty(&quot;Order Id&quot;));
		return(CancelOperation);	
	}
	finally
	{
		bsACSOrdMgm = null;
		bsInputs = null;
		bsOutputs = null;
		InAccnt = null;
		OutAccnt = null;
		BCo = null ;
		BO = null ;
		inProp	= null ;
		outProp	= null ;
		BS	= null ;
	}
}"
			   SEQUENCE="2"
			   UPDATED="10/02/2012 11:42:47"
			   UPDATED_BY="SADMIN"
			   CREATED="03/06/2012 10:11:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBillAcc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBillAcc(Inputs,Outputs)
{ 
	try
	{
	var BO : BusObject = TheApplication().ActiveBusObject();
	var BABO: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
	var BCLI : BusComp = BO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
	var BCE : BusComp = BO.GetBusComp(&quot;Employee&quot;);
	var BCBA : BusComp = BABO.GetBusComp(&quot;HP Submit - Billing Account&quot;);
	var ShopId = TheApplication().GetProfileAttr(&quot;ShopID&quot;);
	var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
	var pausedtask = OrderId+&quot;Paused&quot;;
	var BA1 = &quot;&quot;;
	var BA;
	var updatedby;
	var updated;
	var ShopId1;
	var timing;
	
	//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
	//get BAs from the order
	BCLI.ClearToQuery();
	BCLI.SetViewMode(AllView);
	BCLI.SetSearchSpec(&quot;Order Header Id&quot;,OrderId);
	BCLI.SetSearchSpec(&quot;IsRootItem&quot;,&quot;Y&quot;);
	BCLI.ExecuteQuery(ForwardBackward);
	
	var record = BCLI.FirstRecord();
	while (record)
	{
		BA = BCLI.GetFieldValue(&quot;Billing Account Id&quot;);
		//if BA is different from the previous and task has been paused
		if ((BA != BA1) &amp;&amp; (TheApplication().GetProfileAttr(&quot;OrderPaused&quot;)==pausedtask))
		{
			//get last user that modified BA
			BCBA.ClearToQuery();
			BCBA.SetViewMode(AllView);
			BCBA.SetSearchSpec(&quot;Id&quot;,BA);
			BCBA.ExecuteQuery(ForwardBackward);
			updatedby = BCBA.GetFieldValue(&quot;Updated By&quot;);
			updated = BCBA.GetFieldValue(&quot;Updated&quot;);
			timing = TheApplication().GetProfileAttr(&quot;PauseTiming&quot;);
			var sTimeupdated =  new Date(updated);
			sTimeupdated = sTimeupdated.toSystem();
			if(sTimeupdated &gt; timing)
			{
				//get shop id of the last user that modified BA
				BCE.ClearToQuery();
				BCE.SetViewMode(AllView);
				BCE.ActivateField(&quot;VF Shop Id&quot;);
				BCE.SetSearchSpec(&quot;Id&quot;,updatedby);
				BCE.ExecuteQuery(ForwardBackward);
				if (BCE.FirstRecord())
				{
					ShopId1 = BCE.GetFieldValue(&quot;VF Shop Id&quot;);
					if (ShopId1 != ShopId)
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_PRM_006&quot;));	
				}//if BCE
			}//if sTimeupdated
		}//if BA1
		BA1 = BA;
		record = BCLI.NextRecord();
		}//while
	}//try
	finally
	{
		BCBA 		= null;
		BCE 		= null;
		BCLI 		= null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		BABO		= null;
		BO 			= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}	
}"
			   SEQUENCE="4"
			   UPDATED="01/16/2018 14:57:40"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/26/2012 18:25:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateOrderLineItem"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateOrderLineItem (Inputs,Outputs) {
	try
	{
      var boOrder  : BusObject =  TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
      var boOrder2  : BusObject =  TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
	  var TaskType= TheApplication().GetProfileAttr(&quot;VFPA_TaskInitiated&quot;); 	
	  var HPOli = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
	  var ReasonBC: BusComp;
	  
	  // IDC Mob_Line 20/3/2013
	  var VpnProductPartNumber;
	  var pType = Inputs.GetProperty(&quot;Product Type&quot;);
	  
	  if (pType == &quot;VPN&quot;)
	  VpnProductPartNumber	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;VPN_TYPE&quot;, &quot;3000&quot;);
	  else if (pType == &quot;Group&quot;)
	  VpnProductPartNumber	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;VPN_TYPE&quot;, &quot;3300&quot;);
	  else if (pType == &quot;MobileLine&quot;)
	  VpnProductPartNumber = &quot;1000&quot;;
	  else
	  TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;PRM_STA_10&quot;));
	  // IDC Mob_Line 20/3/2013
	  
	  var strAddAction			= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);	
	  var NewAct = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;, &quot;228&quot;);	
	  
	  //Context Query:
	  var OrderId = Inputs.GetProperty(&quot;Order Id&quot;);
	  var bcOrder : BusComp = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);	
	  var bcOrderEntryLineItem: BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
	  var bcOrderItemXA : BusComp = boOrder.GetBusComp (&quot;Order Item XA&quot;); //[OR 2013]
	  
	  var bcOrder2 : BusComp = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);	
	  var bcOrderEntryLineItem2: BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
	  var bcOrderItemXA2 : BusComp = boOrder.GetBusComp (&quot;Order Item XA&quot;);
	  
	  bcOrder.SetSearchSpec(&quot;Id&quot;,OrderId);		
	  bcOrder.SetViewMode(AllView);
	  bcOrder.ActivateField(&quot;Order Type&quot;);
	  bcOrder.ActivateField(&quot;VF Originating User&quot;);
	  bcOrder.ActivateField(&quot;VF Is MBA&quot;);
	  bcOrderEntryLineItem.ActivateField(&quot;Part Number&quot;);
	  bcOrder.ClearToQuery();
	  bcOrder.ExecuteQuery(ForwardOnly);
	  //Add the VPN Product
	  if(!bcOrder.FirstRecord()){
	  		TheApplication().RaiseErrorText(&quot;Order not found&quot;);
	  }
	  
	  /* Setting Order properties*/
	 //  bcOrder.SetFieldValue(&quot;VF Originating User&quot;, TheApplication().LoginName());
	  if (TheApplication().GetProfileAttr(&quot;SingleOrMultipleBA&quot;) == &quot;Multiple&quot;)
					{
		   			bcOrder.SetFieldValue(&quot;VF Is MBA&quot;, &quot;True&quot;);
		   			}
		bcOrder.WriteRecord();
	  /*---*/
	 
	  bcOrderEntryLineItem.NewRecord(NewAfter);
	  bcOrderEntryLineItem.SetFieldValue(&quot;Line Number&quot;,&quot;1&quot;);
	  bcOrderEntryLineItem.InvokeMethod(&quot;EnableCopyExtAttr&quot;);
	  bcOrderEntryLineItem.InvokeMethod(&quot;EnableConfigCxProd&quot;);
	  bcOrderEntryLineItem.SetUserProperty(&quot;Skip Loading Default Cfg Instance&quot;,&quot;N&quot;);
	  var bcOrderPick = bcOrderEntryLineItem.GetPicklistBusComp(&quot;Order Number&quot;);
	  bcOrderPick.SetSearchSpec(&quot;Id&quot;,&quot;&apos;&quot;+OrderId+&quot;&apos;&quot;);
	  bcOrderPick.ExecuteQuery(ForwardOnly);			
	  if(bcOrderPick.FirstRecord()){
	  	bcOrderPick.Pick();
	  }
	  	
	  var ObjPick = bcOrderEntryLineItem.GetPicklistBusComp(&quot;Product Translated&quot;);
      var oliId 	= bcOrderEntryLineItem.GetFieldValue(&quot;Id&quot;);
	  with(ObjPick)
	  {	
		ClearToQuery();
		ActivateField(&quot;Part #&quot;);
		SetSearchExpr(&quot;[Part #] = &apos;&quot;+VpnProductPartNumber+&quot;&apos;&quot;);
		ExecuteQuery(ForwardOnly);
		if (FirstRecord())
			Pick();
	  }
	  	  /*--- Prset Field Value for 89002*/
	  bcOrderEntryLineItem.WriteRecord();
	 	  /*---refresh context order*/
      bcOrder2.ClearToQuery();
      bcOrder2.SetSearchSpec(&quot;Id&quot;,OrderId);
      bcOrder2.SetViewMode(AllView);
	  bcOrderEntryLineItem2.SetSearchExpr(&quot;[Root Order Item Id]=[Id] AND [Order Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
	  bcOrderItemXA2.ActivateField (&quot;Action Code&quot;);
	  bcOrder2.ExecuteQuery(ForwardOnly);
	     /*--------------------*/

		if (TaskType == &quot;MNPActTask&quot; &amp;&amp; bcOrderEntryLineItem2.FirstRecord()){
				bcOrderEntryLineItem2.SetFieldValue(&quot;ICCID&quot;, &quot;899002&quot;);
		 }
	  /*--------------------------------*/
   	  var	booRecordExists1 = bcOrderItemXA2.FirstRecord ();
	  
	  while (booRecordExists1)
	  {
	  	bcOrderItemXA2.SetFieldValue (&quot;Action Code&quot;,strAddAction);
		bcOrderItemXA2.WriteRecord ();
		booRecordExists1 = bcOrderItemXA2.NextRecord();
	  }
	  
	  // IDC Mob_Line 20/3/2013
	    // Order configuration Completion – This script was present on playbar applet of cartview that it has been removed and so must betriggered here:
	    var svc_VFTRKPRMCopyBA		: Service	 = TheApplication().GetService(&quot;VF TRK PRM Copy BA&quot;);
   		var psInputs : PropertySet = TheApplication().NewPropertySet();
		var psOutputs : PropertySet = TheApplication().NewPropertySet();
		psInputs.SetProperty(&quot;Order Id&quot;, OrderId);
		svc_VFTRKPRMCopyBA.InvokeMethod(&quot;CompleteOrderConfig&quot;,psInputs,psOutputs);
		
		// IDC Mob_Line 20/3/2013
		Outputs.SetProperty(&quot;LineItemId&quot;,oliId);
	 }
	 catch(e){
	 Outputs.SetProperty(&quot;ErrorMessage&quot;,e.toString());
	 return;
	 }
	 finally
	 {
	 	//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
	 	psOutputs 				= null;
	 	psInputs 				= null;
	 	ObjPick					= null;
	 	bcOrderEntryLineItem	= null;
		/*boOrder					= null;
		ObjPick					= null;*/
		bcOrderItemXA			= null;
		bcOrder2				= null;	
	    bcOrderEntryLineItem2	= null;
	    bcOrderItemXA2			= null;
	    HPOli					= null;
	    ReasonBC				= null;
	    bcOrder					= null;
	    boOrder					= null;
	    boOrder2				= null;
	 }    
}"
			   SEQUENCE="6"
			   UPDATED="01/16/2018 15:03:47"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="02/01/2013 17:51:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DateToString"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DateToString(dDate) 
{ 
	// Parameters : 
	// dDate  :  Date object
	// Returns : A string with the format &quot;mm/dd/yyyy&quot; or &quot;mm/dd/yyyy hh:mm s&quot;
	var sMonth = ToString(dDate.getMonth() + 1);
	if (sMonth.length == 1) {sMonth = &quot;0&quot; + sMonth;}
	var sDay = ToString(dDate.getDate());
	if (sDay.length == 1) {sDay = &quot;0&quot; + sDay;}
	var sHours = ToString(dDate.getHours());
	if (sHours.length == 1) {sHours = &quot;0&quot; + sHours;}
	var sMinutes = ToString(dDate.getMinutes());
	if (sMinutes.length == 1) {sMinutes = &quot;0&quot; + sMinutes;}
	var sSeconds = ToString(dDate.getSeconds());
	if (sSeconds.length == 1) {sSeconds = &quot;0&quot; + sSeconds;}
	if (sHours == &quot;00&quot; &amp;&amp; sMinutes == &quot;00&quot; &amp;&amp; sSeconds == &quot;00&quot;)
	   return (sMonth +&quot;/&quot;+  sDay +&quot;/&quot; + dDate.getFullYear())
	else
	   return (sMonth +&quot;/&quot;+  sDay +&quot;/&quot; + dDate.getFullYear() +&quot; &quot;+sHours+&quot;:&quot;+sMinutes+&quot;:&quot;+sSeconds);
}"
			   SEQUENCE="7"
			   UPDATED="02/01/2013 17:51:13"
			   UPDATED_BY="SADMIN"
			   CREATED="02/24/2012 18:24:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Documents"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Documents (orderId, strbillId)
{
    	
	try
	{
 		var BOOrderEntry		: BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var BcBillingAccount	: BusComp = BOOrderEntry.GetBusComp(&quot;VF PRM Billing Account&quot;);
		var boList  	   		: BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var bcList		 		: BusComp = boList.GetBusComp(&quot;List Of Values&quot;);
		var boProposal			: BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderDocument		: BusComp = boProposal.GetBusComp(&quot;VF Mnp Documentum&quot;);
		var booExists			= &quot;&quot;;
		var i					= &quot;&quot;;
		var LIC					= &quot;&quot;;
		var draftName			= &quot;&quot;;
				
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strbillId&quot;,strbillId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
			
		with(BcBillingAccount)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Id&quot;,strbillId);
			ExecuteQuery(ForwardOnly); 
			
			if(FirstRecord())
			{		
			 var TypeAccount = GetFieldValue(&quot;Flag PF&quot;);
	        }
        }
 		if(TypeAccount == &quot;Y&quot;)
		{
		//search values into LOV
		    with(bcList)
		    {
		     ClearToQuery();
		     ActivateField(&quot;Name&quot;);
		     ActivateField(&quot;Value&quot;);
		   	 SetSearchSpec(&quot;Type&quot;,&quot;VF_MNP_DOCUMENTS&quot;);
		   	 SetSearchSpec(&quot;Language Name&quot;,&quot;Turkish&quot;);
		   	 SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);
			 ExecuteQuery(ForwardOnly);//VFTK Lilanath 24032012 : No changes as per Oracle Script Review  31 since LOV BC has no direct relation with Billing Account
			}
			
			booExists = bcList.FirstRecord();
	
				for (i=0; i&lt;3; i++)
				{    
					LIC			= bcList.GetFieldValue(&quot;Name&quot;);
					draftName	= bcList.GetFieldValue(&quot;Value&quot;);
					with(bcOrderDocument)
					{					 
			         NewRecord(NewAfter);
			         SetFieldValue(&quot;Template Name&quot;, LIC);
			         SetFieldValue(&quot;Draft Name&quot;, draftName);
			         SetFieldValue(&quot;Order Id&quot;, orderId); 
			         SetFieldValue(&quot;VF Generate Template&quot;,&quot;MnpIndividualStand&quot;);
			         WriteRecord();
			        }	
			        booExists = bcList.NextRecord();
			       
				}
		}
		
		else if(TypeAccount == &quot;N&quot;)
		{	
		//search values into LOV
		    with(bcList)
		    {
		     bcList.ClearToQuery();
		     ActivateField(&quot;Name&quot;);
		     ActivateField(&quot;Value&quot;);
		   	 SetSearchSpec(&quot;Type&quot;,&quot;VF_MNP_DOCUMENTS&quot;);
		   	 SetSearchSpec(&quot;Language Name&quot;,&quot;Turkish&quot;);
			 ExecuteQuery(ForwardOnly);
			}
			
			booExists = bcList.FirstRecord();
	
				for (i=0; i&lt;3; i++)
				{    
					LIC			= bcList.GetFieldValue(&quot;Name&quot;);
					draftName	= bcList.GetFieldValue(&quot;Value&quot;);
					with(bcOrderDocument)
					{					 
			         NewRecord(NewAfter);
			         SetFieldValue(&quot;Template Name&quot;, LIC);
			         SetFieldValue(&quot;Draft Name&quot;, draftName);
			         SetFieldValue(&quot;Order Id&quot;, orderId);
			         SetFieldValue(&quot;VF Generate Template&quot;,&quot;MnpCorporateStand&quot;);
			         WriteRecord();	
			        }
			        booExists = bcList.NextRecord();
				}
		}
	}  

	finally
	{
		bcOrderDocument		= null;
		BcBillingAccount	= null;
		bcList				= null;
		boProposal			= null;
		boList				= null;
		BOOrderEntry		= null;
		inProp 	= null;
		outProp = null;
		BS	= null;
	}

}"
			   SEQUENCE="8"
			   UPDATED="04/26/2013 19:01:20"
			   UPDATED_BY="SADMIN"
			   CREATED="10/25/2011 18:19:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GIBCalledOnPlayBar"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GIBCalledOnPlayBar(Inputs, Outputs)
{
  try
   {  
      var BCAcc : BusComp = TheApplication().ActiveBusObject().GetBusComp(&quot;Account&quot;);
      var strPositionName	= TheApplication().PositionName();   
	  var strTaxId = BCAcc.GetFieldValue(&quot;VF Tax Number&quot;);
	  var strTaxLookup = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;);	
      var strGIBStatus = BCAcc.GetFieldValue(&quot;VF GIB Ver Status&quot;);
      var strGIBAppr 	=  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBApproved&quot;);
	  var strGIBVer		=  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerified&quot;);	
	  var strGIBENABLED = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_ABLE_LOV&quot;,&quot;GIBEnabled&quot;);
	  if((strTaxId!=strTaxLookup)&amp;&amp;(strGIBENABLED==&quot;Y&quot;) &amp;&amp; ((strGIBStatus != strGIBAppr) &amp;&amp; (strGIBStatus != strGIBVer)))
	  {
		  var strProfile = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_SCENARIO&quot;,&quot;GIBCustomerVer&quot;);
		  var bsWfrMgr : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	      var WFInputs : PropertySet = TheApplication ().NewPropertySet (); 
	      var WFOutputs : PropertySet = TheApplication ().NewPropertySet (); 
	      WFInputs.SetProperty(&quot;Account Id&quot;,BCAcc.GetFieldValue(&quot;Id&quot;));
	      WFInputs.SetProperty(&quot;Message Type&quot;,&quot;VF Multiple Button Test&quot;);
	      WFInputs.SetProperty(&quot;Profile Mode&quot;,strProfile);
	      WFInputs.SetProperty(&quot;InquiryType&quot;,&quot;Undetailed&quot;);
	      WFInputs.SetProperty(&quot;GIB Actual Company Name&quot;, BCAcc.GetFieldValue(&quot;Name&quot;));
	      WFInputs.SetProperty(&quot;GIB Actual Tax Office&quot;, BCAcc.GetFieldValue(&quot;VF Tax Office&quot;));
	      WFInputs.SetProperty(&quot;GIB Actual Company Type&quot;, BCAcc.GetFieldValue(&quot;Flag PF&quot;));
	      WFInputs.SetProperty(&quot;GIB Actual Verification Status&quot;, BCAcc.GetFieldValue(&quot;VF GIB Ver Status&quot;));
	      WFInputs.SetProperty(&quot;DCA Profile&quot;, BCAcc.GetFieldValue(&quot;VF Authorized Profile&quot;));
	      WFInputs.SetProperty(&quot;ProcessName&quot;,&quot;VF New GIB WF&quot;);
	      bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;,WFInputs,WFOutputs);
	      TheApplication().SetProfileAttr(&quot;GIB Done&quot;,&quot;Y&quot;);
	  }
	 else if ((strTaxId!=strTaxLookup)&amp;&amp;(strGIBENABLED==&quot;Y&quot;) &amp;&amp; strPositionName == &quot;Doc. Control Agent&quot; &amp;&amp; ((strGIBStatus == strGIBAppr) || (strGIBStatus == strGIBVer)))
	 {
		  	var strGIB_Status = BCAcc.GetFieldValue(&quot;VF GIB Account Status&quot;);
		  	var strAccountId = BCAcc.GetFieldValue(&quot;Id&quot;);
		  	var StrGIBActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;Y&quot;);
		  	var svc_ACSNIGeneralOperations : Service = TheApplication().GetService (&quot;ACS NI General Operations&quot;);
		  	var pset_Inputs  : PropertySet = TheApplication().NewPropertySet();
			var pset_Outputs : PropertySet = TheApplication().NewPropertySet();
		  	if(strGIB_Status == StrGIBActive)	
		    {
				pset_Inputs.SetProperty(&quot;Logging Id&quot;, &quot;L24&quot;);
				pset_Inputs.SetProperty(&quot;Customer Code&quot;,strAccountId);	
				svc_ACSNIGeneralOperations.InvokeMethod (&quot;LoggingBS&quot;, pset_Inputs, pset_Outputs);
			}
			else
			{
				pset_Inputs.SetProperty(&quot;Logging Id&quot;, &quot;L23&quot;);
				pset_Inputs.SetProperty(&quot;Customer Code&quot;,strAccountId);	
				svc_ACSNIGeneralOperations.InvokeMethod (&quot;LoggingBS&quot;, pset_Inputs, pset_Outputs);
			}
			var strCode				= &quot;159&quot;;
			var strMessageCategory 	= &quot;VF Message Category&quot;;
			var sMsg				= TheApplication().LookupMessage(strMessageCategory, strCode);
			TheApplication().RaiseErrorText(sMsg);
			return(CancelOperation);
  
 	}
	 			
	 			Outputs.SetProperty(&quot;ErrorMessage&quot;,&quot;NULL&quot;);
			    return(CancelOperation);
			      
  
  }
  catch(e)
  {
 	 Outputs.SetProperty(&quot;ErrorMessage&quot;,e.toString());
  }
  finally
  {
	  BCAcc = null;
	  bsWfrMgr=null;
	  WFInputs=null;
	  WFOutputs=null;
	  svc_ACSNIGeneralOperations=null;
	  pset_Inputs=null;
	  pset_Outputs=null;
  }
 
 return(CancelOperation);
     
}"
			   SEQUENCE="9"
			   UPDATED="02/01/2013 17:51:13"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2011 19:29:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GotoOrderView"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GotoOrderView(Inputs, Outputs)
{
  try
  {
     var oBO1 : BusObject = TheApplication().ActiveBusObject();
     var oBC1 : BusComp = oBO1.GetBusComp(&quot;Account&quot;);
     var BOaccount : BusObject;
	 var BCorder : BusComp;
     if(oBC1 != &quot;&quot; &amp;&amp; oBC1 != null)
     {
		 var acc_id = oBC1.GetFieldValue(&quot;Id&quot;);
		 BOaccount = TheApplication().GetBusObject(&quot;VF TRK PRM Account&quot;);
		 BCorder = BOaccount.GetBusComp(&quot;Account&quot;);
			
		 BCorder.ClearToQuery ();
		 BCorder.SetViewMode (AllView);
		 BCorder.SetSearchSpec(&quot;Id&quot;,acc_id);//VFTK Lilanath : No changes done as per Oracle Script Review 15 since Id cannot be null
		 BCorder.ExecuteQuery (ForwardOnly);
		
		 TheApplication().GotoView(&quot;PRM VF TR Account Detail View (Orders)&quot;,  BOaccount);
	}							
	return(CancelOperation);
  }
  finally
  {
  	oBC1 = null;
  	BCorder = null;
  	BOaccount = null;
  	oBO1 = null;
  }
 return(CancelOperation);     
}"
			   SEQUENCE="10"
			   UPDATED="02/01/2013 17:51:13"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2011 18:50:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManagePhoneDirectory"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManagePhoneDirectory(strOrderId)   
{
	try
	{
		var BoOrderEntry 		: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var BcOrderEntryXA 		: BusComp = BoOrderEntry.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var PhoneDirectory = &quot;Phone Directory&quot;;    
		var DirectoryFlag  = &quot;&quot;;
		
		if (strOrderId != null &amp;&amp; strOrderId != &quot;&quot;)
		{
		    with(BcOrderEntryXA) 
			{
				SetViewMode(AllView);  
				ActivateField(&quot;Order Header Id&quot;);
				ActivateField(&quot;Name&quot;);
				ActivateField(&quot;Value&quot;);
				ActivateField(&quot;Data Type&quot;);  
				ClearToQuery();
				//Begin - Scripting 15 - Input validation
				var inProp 	:PropertySet = TheApplication().NewPropertySet();
				var outProp	: PropertySet = TheApplication().NewPropertySet();
				var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
				inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				//End - Scripting 15
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Name] = &apos;&quot;+PhoneDirectory+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
				var existingMobileLine = FirstRecord();	
			
				while (existingMobileLine)
				{
					SetFieldValue(&quot;Value&quot;,&quot;N&quot;);
					WriteRecord();  
					existingMobileLine = NextRecord();
				}
			}
		}
   }       
   finally
   {
		BcOrderEntryXA 	= null;
		BoOrderEntry 	= null;
		inProp			= null;
		outProp			= null;
		BS				= null;
   }
}"
			   SEQUENCE="11"
			   UPDATED="02/01/2013 17:51:13"
			   UPDATED_BY="SADMIN"
			   CREATED="02/16/2012 07:54:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="OrderUpdate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function OrderUpdate(Inputs,Outputs)
{
 try
	{
	    var orderId   = Inputs.GetProperty(&quot;Order Id&quot;);
	    var strbillId = Inputs.GetProperty(&quot;Billing Account Id&quot;);   
	//Date 
		var today		= new Date;		
 		var daysToAdd	= 2;
 		var dDate		= new Date(today.getTime() + daysToAdd*24*60*60*1000);
		var PortDate	= DateToString(dDate);
		var BOOrderEntry		: BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var BcOrderEntryOrders	: BusComp = BOOrderEntry.GetBusComp(&quot;Order Entry - Orders&quot;);		
	//Create Port Id Sequences
		var myBS	: Service = TheApplication().GetService (&quot;ACS Sequence Generator&quot;);
 		var inputs	: PropertySet = TheApplication().NewPropertySet ();
 		var outputs	: PropertySet = TheApplication().NewPropertySet ();
       
		// Search Order Id
		with(BcOrderEntryOrders)
		{
			SetViewMode(AllView);  
			ClearToQuery();	
			ActivateField(&quot;VF Originating User&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;orderId&quot;,orderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchSpec(&quot;Id&quot;,orderId);
			ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
			var sRecord = FirstRecord();
			if(sRecord)
			{
			//insert Porting Date
				SetFieldValue(&quot;VF Originating User&quot;,TheApplication().LoginName());	   	
				SetFieldValue(&quot;Porting Date Time&quot;, PortDate);    	
				WriteRecord();
			// Call Business Service with MNP unique sequence
				inputs.SetProperty (&quot;SequenceType&quot;, &quot;MNP&quot;);
				myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
				var Out		= outputs.GetProperty(&quot;Sequence&quot;);		
					
				SetFieldValue(&quot;Port Id&quot;, Out);				
				WriteRecord();
				
			// Function Create Records of Documents from CAPTIVA
				Documents (orderId, strbillId);
			// Call Business Service with REQ unique sequence	
				inputs.SetProperty (&quot;SequenceType&quot;, &quot;REQ&quot;);
				myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
				var Out1		= outputs.GetProperty(&quot;Sequence&quot;);
				var anno	 = dDate.getFullYear();	 
			
				SetFieldValue(&quot;Reference Number&quot;, &quot;VODAFONE-&quot;+anno+&quot;-&quot;+Out1);		
				WriteRecord();
				inputs.SetProperty (&quot;SequenceType&quot;, &quot;OrderRootTransaction&quot;);
				myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
				var Out2		= outputs.GetProperty(&quot;Sequence&quot;);				
				while (Out2.length &lt; 13)
				{
					Out2 = &quot;0&quot;+Out2;
				}
				SetFieldValue(&quot;Transaction Id&quot;, &quot;SBL&quot;+Out2);	
				WriteRecord();
				
	 		 }	// end of if sRecord	
		}//end of with
    }  //end of try
	finally
	{
		inputs = null;
		outputs = null;
		BcOrderEntryOrders	= null;
		BOOrderEntry 		= null;
		myBS = null;
		inProp				= null;  
		outProp				= null; 
		BS  				= null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="03/13/2013 20:14:23"
			   UPDATED_BY="SADMIN"
			   CREATED="10/25/2011 18:19:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs,Outputs)
{
    if(MethodName == &quot;OrderUpdate&quot;)
    {
     OrderUpdate(Inputs,Outputs);
     return (CancelOperation);
    }
    
    if(MethodName == &quot;GIBCalledOnPlayBar&quot;)
    {
     GIBCalledOnPlayBar(Inputs,Outputs);
     return (CancelOperation);
    }
    
    if (MethodName == &quot;GotoOrderView&quot;)
    {
    	GotoOrderView(Inputs, Outputs);
    	return(CancelOperation);
    }
    
    if (MethodName == &quot;ValidateContactAndCustomer&quot;)
    {
    	ValidateContactAndCustomer(Inputs, Outputs);
    	return(CancelOperation);
    }
    
    if (MethodName == &quot;checkFuncOnView&quot;)
    {
    	checkFuncOnView(Inputs, Outputs);
    	return(CancelOperation);
    }
    
    if (MethodName == &quot;UngroupPRMCleanXA&quot;)
    {
    	UngroupPRMCleanXA(Inputs, Outputs);
    	return(CancelOperation);
    }
    
    if(MethodName == &quot;CheckBillAcc&quot;)
    {
     CheckBillAcc(Inputs,Outputs);
     return (CancelOperation);
    }
    
    if(MethodName == &quot;AssignCrossCA&quot;)
    {
     AssignCrossCA(Inputs,Outputs);
     return (CancelOperation);
    }

    if(MethodName == &quot;AssignWithinCA&quot;)
    {
	     AssignWithinCA(Inputs,Outputs);
	     return (CancelOperation);
    }  	
    
    if(MethodName == &quot;CreateOrderLineItem&quot;)
    {
    	CreateOrderLineItem(Inputs, Outputs);
    	return (CancelOperation);
    }

    if(MethodName == &quot;setOwnerAccountId&quot;)
    {
    	setOwnerAccountId(Inputs, Outputs);
    	return (CancelOperation);
    }
	return (ContinueOperation);
}"
			   SEQUENCE="16"
			   UPDATED="04/14/2013 12:12:40"
			   UPDATED_BY="SADMIN"
			   CREATED="10/25/2011 18:19:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UngroupPRMCleanXA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UngroupPRMCleanXA(Inputs,Outputs)
{ 
try
	{
	var InitialLI = Inputs.GetProperty(&quot;Root Level Item Id&quot;);
	var BO : BusObject = TheApplication().GetBusObject(&quot;Order Item&quot;);
	var BCLine : BusComp = BO.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
	var BCXA : BusComp = BO.GetBusComp(&quot;Order Item XA (Simple)&quot;);
	var OrderHeaderId = TheApplication().GetProfileAttr(&quot;VFPA_OrderId&quot;);
	var Id;
	var AttributeName;
	var VPN = &quot;&quot;;
	var MSISDN = &quot;&quot;;
	var ICCID = &quot;&quot;;
	var sGroupNo = &quot;&quot;;
	var sMainNo = &quot;&quot;;
	var sBlackId = &quot;&quot;;
	var sWhiteId = &quot;&quot;;
	var searchst = &quot;[Root Order Item Id] = &apos;&quot;+InitialLI+&quot;&apos; AND [Part Number] = &apos;3001&apos;&quot;;
	
	//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;InitialLI&quot;,InitialLI);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
	//set context
	BCLine.SetViewMode(AllView);
	BCLine.ClearToQuery();
	BCLine.SetSearchExpr(searchst);
	BCLine.ExecuteQuery(ForwardOnly);
	var isRecord = BCLine.FirstRecord();
	
	while(isRecord)
	{
		if(BCLine.GetFieldValue(&quot;Part Number&quot;) == &quot;3001&quot;){
			var strvpnId = BCLine.GetFieldValue(&quot;Id&quot;);
			BCXA.SetViewMode(AllView);
			BCXA.ClearToQuery();
			BCXA.ExecuteQuery(ForwardOnly);
			var record = BCXA.FirstRecord();
			while(record)
			{
				AttributeName = BCXA.GetFieldValue(&quot;Name&quot;);
					if(AttributeName == &quot;Short Number&quot;){
						VPN = BCXA.GetFieldValue(&quot;Text Value&quot;);
					}
					else if(AttributeName == &quot;Group #&quot;){
						sGroupNo = BCXA.GetFieldValue(&quot;Text Value&quot;);
					}
					else if(AttributeName == &quot;Main Number&quot;){
						sMainNo = BCXA.GetFieldValue(&quot;Text Value&quot;);
					}
					else if(AttributeName == &quot;WhiteList Profile ID&quot;){
						sWhiteId = BCXA.GetFieldValue(&quot;Text Value&quot;);
					}
					else if(AttributeName == &quot;BlackList Profile ID&quot;){
						sBlackId = BCXA.GetFieldValue(&quot;Text Value&quot;);
					}
					record = BCXA.NextRecord();
			}				 
		}
		isRecord = BCLine.NextRecord();
	}
	//query Attributes from original LI to avoid cleaning attributes of orders not ungrouped
	BCLine.SetViewMode(AllView);
	BCLine.ClearToQuery();
	BCLine.SetSearchSpec(&quot;Id&quot;,InitialLI);
	BCLine.ExecuteQuery(ForwardOnly);
	var isRecord = BCLine.FirstRecord();
	if(isRecord){
			var OrderHeaderId = BCLine.GetFieldValue(&quot;Order Header Id&quot;);
			var record = BCXA.FirstRecord();
			while(record)
			{
				AttributeName = BCXA.GetFieldValue(&quot;Name&quot;);
				if(AttributeName == &quot;MSISDN&quot;) MSISDN = BCXA.GetFieldValue(&quot;Text Value&quot;);
				if(AttributeName == &quot;ICCI&quot;) ICCID = BCXA.GetFieldValue(&quot;Text Value&quot;);
				record = BCXA.NextRecord();
			}				 
	}
	//avoid cleaning code when attributes not yet inserted
	if (((VPN != null) &amp;&amp; (VPN != &quot;&quot;)) || ((MSISDN != null) &amp;&amp; (MSISDN != &quot;&quot;)) || ((ICCID != null) &amp;&amp; (ICCID != &quot;&quot;)) || ((sGroupNo != null) &amp;&amp; (sGroupNo != &quot;&quot;)) || ((sWhiteId != null) &amp;&amp; (sWhiteId != &quot;&quot;)) || ((sMainNo != null) &amp;&amp; (sMainNo != &quot;&quot;)) || ((sBlackId != null) &amp;&amp; (sBlackId != &quot;&quot;)))
	{
		//query LineItems for that Order, excluding the original for ungroup
		var searchst = &quot;[Order Header Id] = &apos;&quot;+OrderHeaderId+&quot;&apos; AND [Root Order Item Id] &lt;&gt; &apos;&quot;+InitialLI+&quot;&apos; AND ([Part Number] = &apos;1000&apos; OR [Part Number] = &apos;50000&apos; OR [Part Number] = &apos;3001&apos;)&quot;;
		BCLine.SetViewMode(AllView);
		BCLine.ClearToQuery();
		BCLine.ActivateField(&quot;Order Header Id&quot;);
		BCLine.ActivateField(&quot;MSISDN&quot;);
		BCLine.ActivateField(&quot;ICCID&quot;);
		BCLine.SetSearchExpr(searchst);
		BCLine.ExecuteQuery(ForwardOnly);
		var LIrecord = BCLine.FirstRecord();
		while (LIrecord)
			{
			Id = BCLine.GetFieldValue(&quot;Id&quot;);
			if ((BCLine.GetFieldValue(&quot;MSISDN&quot;) == MSISDN) &amp;&amp; (MSISDN != &quot;&quot;) &amp;&amp; (MSISDN != null))
				{
				BCLine.SetFieldValue(&quot;MSISDN&quot;,&quot;&quot;);
				if ( BCLine.GetFieldValue(&quot;ICCID&quot;) != &quot;899002&quot; )
									BCLine.SetFieldValue(&quot;ICCID&quot;,&quot;899002&quot;); // PRM ID 72
				BCLine.WriteRecord();
				}
			var XArecord = BCXA.FirstRecord();
			while (XArecord)
				{
				AttributeName = BCXA.GetFieldValue(&quot;Name&quot;);
				// consider only attributes to be blanked and only for copy of original line item
				if(((AttributeName == &quot;Short Number&quot;) &amp;&amp; (VPN == BCXA.GetFieldValue(&quot;Text Value&quot;))) || ((AttributeName == &quot;MSISDN&quot;) &amp;&amp; (MSISDN == BCXA.GetFieldValue(&quot;Text Value&quot;))) || ((AttributeName == &quot;ICCI&quot;) &amp;&amp; (ICCID == BCXA.GetFieldValue(&quot;Text Value&quot;))) || ((AttributeName == &quot;Group #&quot;) &amp;&amp; (sGroupNo == BCXA.GetFieldValue(&quot;Text Value&quot;))) || ((AttributeName == &quot;BlackList Profile ID&quot;) &amp;&amp; (sBlackId == BCXA.GetFieldValue(&quot;Text Value&quot;))) || ((AttributeName == &quot;Main Number&quot;) &amp;&amp; (sMainNo == BCXA.GetFieldValue(&quot;Text Value&quot;))) || ((AttributeName == &quot;WhiteList Profile ID&quot;) &amp;&amp; (sWhiteId == BCXA.GetFieldValue(&quot;Text Value&quot;))))
					{
					//Clear Attribute Values
					BCXA.SetFieldValue(&quot;Numeric Value&quot;,&quot;&quot;);
					BCXA.SetFieldValue(&quot;Text Value&quot;,&quot;&quot;);
					BCXA.SetFieldValue(&quot;Previous Numeric Value&quot;,&quot;&quot;);
					BCXA.SetFieldValue(&quot;Previous Text Value&quot;,&quot;&quot;);
					BCXA.WriteRecord();
					}//if Attribute found
				XArecord = BCXA.NextRecord();
				}//while XArecord
			LIrecord = BCLine.NextRecord();
			}//while LIrecord
		}//initial if
	}//try
	finally
	{	
		BCXA = null;
		BCLine = null;
		BO = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}	
}"
			   SEQUENCE="14"
			   UPDATED="12/20/2013 09:20:52"
			   UPDATED_BY="SADMIN"
			   CREATED="01/19/2012 13:19:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateContactAndCustomer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function 	ValidateContactAndCustomer(Inputs, Outputs)
{

try{
	// No Mernis COntrol (demanded to Workflow)
     TheApplication().SetProfileAttr(&quot;VFMernisControl&quot;,&quot;N&quot;);

// If Dealer goes Previous and Next Again does not run anything if Customer = Active
     var BCAcc : BusComp =  TheApplication().ActiveBusObject().GetBusComp(&quot;Account&quot;);
     var AccType = BCAcc.GetFieldValue(&quot;Market Class&quot;);
     var AccCorp = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);
     var PRMUtil : Service = TheApplication().GetService(&quot;PRM VF TR Utility Service&quot;);
     var CustStatus = BCAcc.GetFieldValue(&quot;Account Status&quot;);
     var CustStatActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_STATUS&quot;, &quot;95&quot;);
     var ContactCitizenship = BCAcc.GetFieldValue(&quot;VF Contact Citizenship&quot;);
     
     
     if(CustStatus ==  CustStatActive){
             return(ContinueOperation);
         }
            // Save the Record++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      //Just a WA for PROD00028319, to be understood why on Task the WriteRecord is not triggered if the record is not modifed
      var Phone = BCAcc.GetFieldValue(&quot;Main Phone Number&quot;);
      BCAcc.SetFieldValue(&quot;Main Phone Number&quot;, &quot;902215212563&quot;);
      BCAcc.SetFieldValue(&quot;Main Phone Number&quot;,Phone);
      //--------------------------------------------------------------------------------------------
      //--------------------------------------------------------------------------------------------
      //WriteRecord Pre Invoke Account-----------------
         var mernisCheck = BCAcc.GetFieldValue(&quot;VF Mernis Internal Flag&quot;);
		 TheApplication().SetProfileAttr(&quot;MernisCheck&quot;,mernisCheck);
	   	 TheApplication().SetProfileAttr(&quot;CheckValidations&quot;,&quot;YES&quot;);
	   	 //VFTK Diva R2.1 20111123: WP01 - start
		 var PrimContId = BCAcc.GetFieldValue(&quot;Primary Contact Id&quot;);
		 TheApplication().SetProfileAttr(&quot;PA_PrimContId&quot;, PrimContId);//this value will be used by browserScript to POP-UP warning
		 // WP01 End
	   	 var curRowIdAcc = BCAcc.GetFieldValue(&quot;Id&quot;);
	   	 //WriteRecord Pre Invoke Contact-----------------
	   	 TheApplication().SetProfileAttr(&quot;paExplicitSaveRecord&quot;,&quot;YES&quot;);
	   	 
      //Write Record--------------------
        BCAcc.WriteRecord();
        
       // Contact Validation (Code on MVG Applet)+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     var BcContact = BCAcc.GetMVGBusComp(&quot;Contact Last Name&quot;);
     
     var MernisStatus = BcContact.GetFieldValue(&quot;VF Mernis Status&quot;);
     var B_G_List = BcContact.GetFieldValue(&quot;VF BlackList Validate Flg&quot;);
 	 if(MernisStatus != &quot;Y&quot; || B_G_List != &quot;Y&quot;){ //in case the dealer did not insert all the data to set the customer Active and it is blocked and click on next again
     //PreInvoke---------------------------------------------
     var curRowIdCont = BcContact.GetFieldValue(&quot;Id&quot;);
     BcContact.ActivateField(&quot;VF Mernis Internal Flag&quot;);
     BcContact.SetFieldValue(&quot;VF Mernis Internal Flag&quot;,&quot;Y&quot;);
     	
     //Invoke Method Mernis on Contact-----------------------
     //Vaibhav: As per WP01, this check should be executed only for Turkish Contact - PROD00029301
     if(ContactCitizenship == &quot;Türkiye&quot;)
       BcContact.InvokeMethod(&quot;checkMernis&quot;);
     else	//Vaibhav: perform this check for primary foreign contact to perform BG and CEP Aran check - PROD00029618
     {
     	var IP 					= TheApplication().NewPropertySet();
     	var OP 					= TheApplication().NewPropertySet();
     	var bsWorkflowProcess 	= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		IP.SetProperty(&quot;ProcessName&quot;, &quot;VF Verify Consumer Customer Data&quot;);
		IP.SetProperty(&quot;Primary Contact Id&quot;, curRowIdCont);
		bsWorkflowProcess.InvokeMethod(&quot;RunProcess&quot;, IP, OP);     
     }
       
     //Invoke Method Post Processing ------------------------
    if(ContactCitizenship == &quot;Türkiye&quot;)//Excluded this query for foreign contact for defect--PROD00029831
		with (BcContact)
		{
			SetViewMode(AllView);//Venakt-Removed Literal Constants according to oracle review comment
			ClearToQuery();
			SetSearchSpec(&quot;Id&quot;,curRowIdCont);
			ExecuteQuery (ForwardOnly);
		}
	}
	
	 // Contact Validated, go on with customer--------------------------------------------
      // Write record Post Invoke (Browser on CRM)----------------CONTACT VALIDATION AND DUPLICITY CHECK		    			
		var pset_Inputs  = TheApplication().NewPropertySet();
		var pset_Outputs = TheApplication().NewPropertySet();
		
		var strSuspect = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;80&quot;);
		var  strProspect  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;90&quot;);
		var strStatusCode = BCAcc.GetFieldValue(&quot;Account Status Code&quot;);
		
		if(strStatusCode == strSuspect || strStatusCode == strProspect)
		{
			PrimContId = BCAcc.GetFieldValue(&quot;Primary Contact Id&quot;);
			var strCustType = BCAcc.GetFieldValue(&quot;Market Class&quot;);
			var svc = TheApplication().GetService(&quot;VF Account General Operations&quot;);
			pset_Inputs.SetProperty(&quot;rowId&quot;, curRowIdAcc);
			pset_Inputs.SetProperty(&quot;PrimContId&quot;, PrimContId);
			pset_Inputs.SetProperty(&quot;MarketClass&quot;, strCustType);						
			svc.InvokeMethod(&quot;ContactValidations&quot;, pset_Inputs,pset_Outputs);
			var Result = pset_Outputs.GetProperty(&quot;isDuplicated&quot;);
			if(Result != &quot;N&quot;)
			{
				var Prompt_Msg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,Result);
				TheApplication().RaiseErrorText(Prompt_Msg);
				return(CancelOperation);
			}
		}
      
      
      // --------------------------------------------GIB if Corporate --------------------------------------
      if(AccType == AccCorp){
          var svc_ACSNIGeneralOperations = TheApplication().GetService(&quot;ACS NI General Operations&quot;);
          var pset_Inputs_GIB  = TheApplication().NewPropertySet();
		  var pset_Outputs_GIB = TheApplication().NewPropertySet();
		  svc_ACSNIGeneralOperations.InvokeMethod(&quot;VFGIBCall&quot;, pset_Inputs_GIB, pset_Outputs_GIB);
		  TheApplication().SetProfileAttr(&quot;GIBVERPROF&quot;,&quot;Y&quot;);
		  TheApplication().SetProfileAttr(&quot;SkipBGForeignCheck&quot;,&quot;Y&quot;);
		  var GIBInputs = TheApplication ().NewPropertySet (); 
	      var GIBOutputs = TheApplication ().NewPropertySet (); 
	      PRMUtil.InvokeMethod(&quot;GIBCalledOnPlayBar&quot;,GIBInputs,GIBOutputs);//leave as is to maintain structured code also if the function is inBS itself
	      var Err = GIBOutputs.GetProperty(&quot;ErrorMessage&quot;);
	      if(Err != &quot;NULL&quot;)
	        TheApplication().RaiseErrorText(Err);
	  }	
      
      //----------------------------------------MERNIS/OKS-------------------------------------------------
      //Simulates the Behaviour of VF Customer High Details Corporate Form Applet
       MernisStatus = BCAcc.GetFieldValue(&quot;VF Mernis Status&quot;);
       B_G_List =  BCAcc.GetFieldValue(&quot;VF BlackList Validate Flg&quot;);
 	     if(MernisStatus != &quot;Y&quot; || B_G_List != &quot;Y&quot;){
      // --- PRE Invoke Method on Applet--------------------------------------------------------------------
      
           BCAcc.SetFieldValue(&quot;VF Mernis Internal Flag&quot;,&quot;Y&quot;);
		 
 	 // --- Call Method on Account BC-----------------------------------------------------------------------
 	     
	       BCAcc.InvokeMethod(&quot;checkMernis&quot;);
	       
	     
	 // --- Invoke Method on Applet (Post Processing)-------------------------------------------------------
	     		    			
			 with (BCAcc)
						   {						   		
						   		ActivateField(&quot;VF BG Contact Control&quot;);
						   		SetViewMode(AllView);//Mamta-Removed Literal Constants as per Oracle Review
						   		ClearToQuery();
						   		SetSearchSpec(&quot;Id&quot;,curRowIdAcc);
						   		ExecuteQuery(ForwardBackward);
						   		if(FirstRecord())
						   		{
						   			var BGCode = GetFieldValue (&quot;VF BG Contact Control&quot;);
						   			TheApplication().SetProfileAttr(&quot;BGCustActive&quot;,BGCode);					   			
						   			SetFieldValue(&quot;VF BG Verification Code&quot;,BGCode);
						   			InvokeMethod(&quot;RefreshBusComp&quot;);
						   		}						   		
						     }	
		  }					    
      //-----------------------------------------------------------------------------------------------------
      //--------------------------------------------------------------------------------------------
            //-----------------------------------------------------------------------------------------------------
      // ------------------------Trigs Account Write Record to set the Account to Active--------------------
       //Just a WA for PROD00028319, to be understood why on Task the WriteRecord is not triggered if the record is not modifed
      Phone = BCAcc.GetFieldValue(&quot;Main Phone Number&quot;);
      BCAcc.SetFieldValue(&quot;Main Phone Number&quot;, &quot;902215212563&quot;);
      BCAcc.SetFieldValue(&quot;Main Phone Number&quot;,Phone);
      //--------------------------------------------------------------------------------------------
       BCAcc.WriteRecord();
       BCAcc.InvokeMethod(&quot;RefreshBusComp&quot;);
      
 }//try
 catch(e)
 {
 	throw(e);
 }
 finally
 {
	IP = null;
	OP = null;
	BcContact = null;
	bsWorkflowProcess = null;
	svc = null;
	pset_Inputs = null;
	pset_Outputs = null;
	pset_Outputs_GIB = null;
	pset_Inputs_GIB = null;
	BCAcc = null;   
	GIBOutputs = null;
	GIBInputs = null;
	pset_Outputs = null;
	pset_Inputs = null;
	svc_ACSNIGeneralOperations = null;
	PRMUtil = null;
 }

}"
			   SEQUENCE="15"
			   UPDATED="04/14/2013 12:12:40"
			   UPDATED_BY="SADMIN"
			   CREATED="12/16/2011 18:50:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkAccntType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkAccntType(InAccnt, OutAccnt)
{
	try
	{
		var OldCust = InAccnt.GetProperty(&quot;OldAcc&quot;);
		var NewCust = InAccnt.GetProperty(&quot;NewAcc&quot;);
		var OrderReason = InAccnt.GetProperty(&quot;OrderReason&quot;);
		var oBO : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var oBCAccount : BusComp = oBO.GetBusComp(&quot;Account&quot;);
		var strCustType = &quot;&quot;;
		var msg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_044&quot;);
		var msg2 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_194&quot;);
		with(oBCAccount)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Market Class&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OldCust&quot;,OldCust);
			inProp.SetProperty(&quot;NewCust&quot;,NewCust);	
			inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(&quot;[Id] = &apos;&quot;+OldCust+&quot;&apos; OR [Id] = &apos;&quot;+NewCust+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				strCustType = GetFieldValue(&quot;Market Class&quot;);
			if(NextRecord())
			{
				if(strCustType != GetFieldValue(&quot;Market Class&quot;))
				{
					if (OrderReason != TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;252&quot;))
					{
						TheApplication().RaiseErrorText(msg);
						return(CancelOperation);
					}
					else
					{
						OutAccnt.SetProperty(&quot;CrossType&quot;,&quot;CrossSegment&quot;);	
					}
				}
				else
				{
					if (OrderReason == TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;252&quot;))
					{
						TheApplication().RaiseErrorText(msg2);
						return(CancelOperation);
					}
					else
					{
						OutAccnt.SetProperty(&quot;CrossType&quot;,&quot;SameSegment&quot;);
					}
				}
			}
		}
	}
	finally
	{
		oBCAccount 	= null;
		oBO 		= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="07/11/2012 16:29:07"
			   UPDATED_BY="SADMIN"
			   CREATED="02/16/2012 07:54:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkFuncOnView"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkFuncOnView(Inputs,Outputs)
{

	try
	{
	   var ActiveViewName = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);
	   var ViewBo : BusObject  = TheApplication().GetBusObject(&quot;View Access&quot;);
	   var ViewBC : BusComp = ViewBo.GetBusComp(&quot;Feature Access&quot;);
	   var RespBC : BusComp = ViewBo.GetBusComp(&quot;Responsibility&quot;);
	   
	  //+++++++++++++++++++++++++++++++++QUERY PRIMARY BC FOR VIEW++++++++++++++++++++++++++++++++
	   ViewBC.ClearToQuery();
	   ViewBC.SetViewMode(AllView);
	   ViewBC.SetSearchSpec(&quot;Name&quot;,&quot;&apos;&quot;+ActiveViewName+&quot;&apos;&quot;);
	   
	   RespBC.ClearToQuery();
	   RespBC.SetViewMode(AllView);
	   RespBC.SetSearchSpec(&quot;Name&quot;,&quot;CCVTrafficLightResp&quot;);
	   
	   ViewBC.ExecuteQuery(ForwardOnly);
		if(!ViewBC.FirstRecord()) 
		{
			TheApplication().RaiseErrorText(&quot;FATAL ERROR: View not found on application&quot;);
			return(CancelOperation);
		}
		if(RespBC.FirstRecord())
		{
			Outputs.SetProperty(&quot;StartCAC&quot;,&quot;Y&quot;);
			return(CancelOperation);
		}
		else
		{
			Outputs.SetProperty(&quot;StartCAC&quot;,&quot;N&quot;);
			return(CancelOperation);
		}	     
	}
	catch(e)
	{
		throw(e);
		return(CancelOperation);
	}
	finally
	{
		ViewBC = null;
		RespBC = null;
		ViewBo = null;
	}
 
return(CancelOperation);
}"
			   SEQUENCE="5"
			   UPDATED="07/11/2012 16:36:54"
			   UPDATED_BY="SADMIN"
			   CREATED="01/13/2012 13:49:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="setOwnerAccountId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function setOwnerAccountId(Inputs,Outputs)
{

	try{
	
	
	var groupsBO : BusObject = TheApplication().GetBusObject(&quot;VF Groups BO&quot;);
	var groupsAccountBC : BusComp = groupsBO.GetBusComp(&quot;VF Group Products BC&quot;);
	var groupsBC : BusComp = groupsBO.GetBusComp(&quot;VF Groups BC&quot;);
	var accountBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
	var accountBC : BusComp = accountBO.GetBusComp(&quot;HP Submit - Account&quot;);

	var strAcquired = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_STATUS&quot;, &quot;100&quot;); 
	var GroupNum = Inputs.GetProperty(&quot;GroupNum&quot;);
	
	with(groupsBC){
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(&quot;VF Group Num&quot;,GroupNum);
		ExecuteQuery(ForwardOnly);
		if(groupsBC.FirstRecord())
			var groupID = GetFieldValue(&quot;VF Int Id&quot;);
	}
	
	

	var accntId = &quot;&quot;;
	
	groupsAccountBC.ClearToQuery();
	groupsAccountBC.SetViewMode(AllView);
	groupsAccountBC.SetSearchSpec(&quot;VF VPN Group Id&quot;, groupID);
	groupsAccountBC.ExecuteQuery(ForwardOnly);
	
	
	
	if (groupsAccountBC.FirstRecord()){
		accntId = groupsAccountBC.GetFieldValue(&quot;VF Account Id&quot;);
	}else
	{
	
	accountBC.ClearToQuery();
	accountBC.SetViewMode(AllView);
	accountBC.SetSearchSpec(&quot;Account Status Code&quot;, strAcquired);
	accountBC.ExecuteQuery(ForwardOnly);
	
		if (accountBC.FirstRecord())
		accntId = accountBC.GetFieldValue(&quot;Id&quot;);
	
	
	}
	
    groupsBC.SetFieldValue(&quot;VF Owner Account Id&quot;, accntId);
	groupsBC.WriteRecord();
	Outputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);
	Outputs.SetProperty(&quot;Error Message&quot;,&quot;&quot;);
	return;
	}
	catch(e){
	  Outputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);
	  Outputs.SetProperty(&quot;Error Message&quot;,&quot;PRM VF TR Utility Service: setOwnerAccountId --&gt; &quot; + e.toString());
	}
	finally{
		accountBC  = null;
		groupsAccountBC  = null;
		groupsBC = null;
		groupsBO = null;
		accountBO  = null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		//groupsBC = null;
	}

}"
			   SEQUENCE="13"
			   UPDATED="01/16/2018 15:15:11"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="04/14/2013 12:12:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



