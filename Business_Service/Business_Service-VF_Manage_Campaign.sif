<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF Manage Campaign"
	   UI_FREEZE="N"
	   UPDATED="09/09/2016 15:32:18"
	   UPDATED_BY="EFONSECA"
	   CREATED="08/18/2011 13:05:23"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="CR152: used to collect informations and manage the actions on the campaign"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Manage Campaign"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="09/02/2016 15:27:29"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="EFONSECA"
		   UPDATED="09/09/2016 15:29:27"
		   UPDATED_BY="EFONSECA"
		   CREATED="08/18/2011 13:05:23"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Manage Campaign"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="08/18/2011 13:05:23"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2011 13:05:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AssignTheVoucher"
			   UPDATED="08/18/2011 13:05:24"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2011 13:05:23"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:23"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if RootOrderLineItemId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if OrderId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootOrderLineItemId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="popupMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AssignTheVoucher"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckTheVoucher"
			   UPDATED="09/02/2016 18:12:33"
			   UPDATED_BY="EFONSECA"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CustomerType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/02/2016 18:12:33"
				   UPDATED_BY="EFONSECA"
				   CREATED="09/02/2016 18:06:12"
				   CREATED_BY="EFONSECA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if RootOrderLineItemId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if OrderId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootOrderLineItemId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: VoucherSerialNumber"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VoucherSerialNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VoucherStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="popupMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckTheVoucher"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UnassignTheVoucher"
			   UPDATED="08/18/2011 13:05:24"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: mandatory if action is UNASSIGN, 1 is reusable, 0 is not reusable, default 1"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IsReusable"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if RootOrderLineItemId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if OrderId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootOrderLineItemId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="popupMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UnassignTheVoucher"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ifThereIsSubsidyAssignIt"
			   UPDATED="08/18/2011 13:05:24"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if RootOrderLineItemId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="CR152: optional if OrderId is set"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootOrderLineItemId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="popupMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ifThereIsSubsidyAssignIt"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/18/2011 13:05:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2011 13:05:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CollectInfos"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CollectInfos(psInputs, psOutputs)
{
	try
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,            &quot;0&quot;);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;,         &quot;&quot;);
		psOutputs.SetProperty(&quot;Action&quot;,               &quot;&quot;);
		psOutputs.SetProperty(&quot;OrderId&quot;,              &quot;&quot;);
		psOutputs.SetProperty(&quot;RootOrderLineItemId&quot;,  &quot;&quot;);
		psOutputs.SetProperty(&quot;MSISDN&quot;,               &quot;&quot;);
		psOutputs.SetProperty(&quot;BP Part #&quot;,            &quot;&quot;);
		psOutputs.SetProperty(&quot;CampaignName&quot;,         &quot;&quot;);
		psOutputs.SetProperty(&quot;HS Part#&quot;,             &quot;&quot;);
		psOutputs.SetProperty(&quot;VoucherSN&quot;,            &quot;&quot;);
		psOutputs.SetProperty(&quot;VoucherStatus&quot;,        &quot;&quot;);
		psOutputs.SetProperty(&quot;Duration&quot;,             &quot;&quot;);
		psOutputs.SetProperty(&quot;Payment Method&quot;,       &quot;&quot;);
		psOutputs.SetProperty(&quot;DiscountAmount&quot;,       &quot;&quot;);
		psOutputs.SetProperty(&quot;HandsetSubsidyAmount&quot;, &quot;&quot;);
		psOutputs.SetProperty(&quot;Model&quot;,                &quot;&quot;);
		psOutputs.SetProperty(&quot;Type&quot;,                 &quot;&quot;);

		var boOrder : BusObject          = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcItem : BusComp             = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA : BusComp           = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var bsControls : Service         = TheApplication().GetService(&quot;VF Controls&quot;);
		var psControlsIn : PropertySet   = TheApplication().NewPropertySet();
		var psControlsOut : PropertySet  = TheApplication().NewPropertySet();
		var bsManager : Service          = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn : PropertySet    = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet   = TheApplication().NewPropertySet();
		var psFieldListIn : PropertySet  = TheApplication().NewPropertySet();
		var psAttrListIn : PropertySet   = TheApplication().NewPropertySet();
		var psFieldListOut : PropertySet = null;
		var psAttrListOut : PropertySet  = null;

		var sAction           = psInputs.GetProperty(&quot;Action&quot;);
		var sOrderId          = psInputs.GetProperty(&quot;OrderId&quot;);
		var sRootItemId       = psInputs.GetProperty(&quot;RootOrderLineItemId&quot;);
		var sActionNew        = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sActionValue      = &quot;&quot;;
		var sHandsetItemId    = &quot;&quot;;
		var sHandsetPartNum   = &quot;&quot;;
		var sVoucherSN        = &quot;&quot;;
		var sVoucherStatus    = &quot;&quot;;
		var sBundleIntegId    = &quot;&quot;;
		var sBundlePartNum    = &quot;&quot;;
		var sBundleName       = &quot;&quot;;
		var sMSISDN           = &quot;&quot;;
		var iChild            = 0;
		var bHAsAttrib        = false;
		var sAttribName       = &quot;&quot;;
		var sAttribValue      = &quot;&quot;;

		if (sAction == &quot;info&quot; || sAction == &quot;check&quot; || sAction == &quot;assign&quot; || sAction == &quot;unassign&quot;)
		{
			sActionValue = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_VOUCHER_ACTION&quot;, sAction);
		}
		else
		{
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;wrong action: &apos;&quot; + sAction + &quot;&apos;\nAccepted values: info|check|assign|unassign&quot;);
			return;
		}

		if ((sOrderId == null || sOrderId == &quot;&quot;) &amp;&amp; (sRootItemId == null || sRootItemId == &quot;&quot;))
		{
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;missing input specify the RootOrderLineItemId or OrderId&quot;);
			return;
		}

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Order Header Id&quot;);
		bcItem.ActivateField(&quot;Root Order Item Id&quot;);
		bcItem.ActivateField(&quot;Part Number&quot;);
		bcItem.ActivateField(&quot;VF Voucher Serial Number&quot;);
		bcItem.ActivateField(&quot;VF Voucher Status&quot;);
		bcItem.SetSearchSpec(&quot;VF Product Type&quot;,  &quot;HANDSET PROMO&quot;);
		bcItem.SetSearchSpec(&quot;Product Sub Type&quot;, &quot;SUBSIDY&quot;);
		bcItem.SetSearchSpec(&quot;Action Code&quot;,      sActionNew);

		if (sOrderId != null &amp;&amp; sOrderId != &quot;&quot;)
		{
			bcItem.SetSearchSpec(&quot;Order Header Id&quot;,  sOrderId);
		}

		if (sRootItemId != null &amp;&amp; sRootItemId != &quot;&quot;)
		{
			bcItem.SetSearchSpec(&quot;Root Order Item Id&quot;,  sRootItemId);
		}
		
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;Subsidy campaign product not found&quot;);
			return;
		}

		sOrderId        = bcItem.GetFieldValue(&quot;Order Header Id&quot;);
		sRootItemId     = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);
		sHandsetItemId  = bcItem.GetFieldValue(&quot;Id&quot;);
		sHandsetPartNum = bcItem.GetFieldValue(&quot;Part Number&quot;);
		sVoucherSN      = bcItem.GetFieldValue(&quot;VF Voucher Serial Number&quot;);
		sVoucherStatus  = bcItem.GetFieldValue(&quot;VF Voucher Status&quot;);

		if (bcItem.NextRecord())
		{
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;More than one new Subsidy campaign found&quot;);
			return;
		}

		psControlsIn.SetProperty(&quot;OrderId&quot;, sOrderId);

		bsControls.InvokeMethod(&quot;GetBundlePromoInfoFromOrder&quot;, psControlsIn, psControlsOut);

		sBundleIntegId = psControlsOut.GetProperty(&quot;BundleIntegrationId&quot;);
		sBundlePartNum = psControlsOut.GetProperty(&quot;Product Number&quot;);
		sBundleName    = psControlsOut.GetProperty(&quot;BundleName&quot;);

		psManagerIn.SetProperty(&quot;ProcessName&quot;,        &quot;VF Get Bundle Promotion Components Data WF&quot;);
		psManagerIn.SetProperty(&quot;Header Id&quot;,          sOrderId);
		psManagerIn.SetProperty(&quot;Bundle Instance Id&quot;, sBundleIntegId);
		psManagerIn.SetProperty(&quot;Context&quot;,            &quot;Order&quot;);
		psManagerIn.SetProperty(&quot;Component Type&quot;,     &quot;Mobile&quot;);

		psFieldListIn.SetType(&quot;Field List&quot;);
		psFieldListIn.SetProperty(&quot;MSISDN&quot;, &quot;&quot;);
		psManagerIn.AddChild(psFieldListIn);

		psAttrListIn.SetType(&quot;Attribute List&quot;);
		psManagerIn.AddChild(psAttrListIn);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

		for (iChild = 0; iChild&lt;psManagerOut.GetChildCount(); iChild++)
		{
			if(psManagerOut.GetChild(iChild).GetType() == &quot;Field Output&quot;)
				psFieldListOut = psManagerOut.GetChild(iChild);
			else if (psManagerOut.GetChild(iChild).GetType() == &quot;Attribute Output&quot;)
				psAttrListOut = psManagerOut.GetChild(iChild);
		}

		sMSISDN = psFieldListOut.GetProperty(&quot;MSISDN&quot;);

		bcItemXA.ClearToQuery();
		bcItemXA.SetViewMode(AllView);
		bcItemXA.ActivateField(&quot;Name&quot;);
		bcItemXA.ActivateField(&quot;TELCO Value&quot;);
		bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sHandsetItemId);
		bcItemXA.ExecuteQuery(ForwardOnly);

		bHAsAttrib = bcItemXA.FirstRecord();

		while (bHAsAttrib)
		{
			sAttribName  = bcItemXA.GetFieldValue(&quot;Name&quot;);
			sAttribValue = bcItemXA.GetFieldValue(&quot;TELCO Value&quot;);

			if (sAttribName == &quot;Duration&quot;)
				psOutputs.SetProperty(&quot;Duration&quot;, sAttribValue);
			if (sAttribName == &quot;Payment Method&quot;)
				psOutputs.SetProperty(&quot;Payment Method&quot;, sAttribValue);
			if (sAttribName == &quot;Discount Amount&quot;)
				psOutputs.SetProperty(&quot;DiscountAmount&quot;, sAttribValue);
			if (sAttribName == &quot;Handset Subsidy Amount&quot;)
				psOutputs.SetProperty(&quot;HandsetSubsidyAmount&quot;, sAttribValue);
			if (sAttribName == &quot;Model&quot;)
				psOutputs.SetProperty(&quot;Model&quot;, sAttribValue);
			if (sAttribName == &quot;Type&quot;)
				psOutputs.SetProperty(&quot;Type&quot;, sAttribValue);

			bHAsAttrib = bcItemXA.NextRecord();
		}

		psOutputs.SetProperty(&quot;Action&quot;,              sActionValue);
		psOutputs.SetProperty(&quot;OrderId&quot;,             sOrderId);
		psOutputs.SetProperty(&quot;RootOrderLineItemId&quot;, sRootItemId);
		psOutputs.SetProperty(&quot;MSISDN&quot;,              sMSISDN);
		psOutputs.SetProperty(&quot;BP Part #&quot;,           sBundlePartNum);
		psOutputs.SetProperty(&quot;CampaignName&quot;,        sBundleName);
		psOutputs.SetProperty(&quot;HS Part#&quot;,            sHandsetPartNum);
		psOutputs.SetProperty(&quot;VoucherSN&quot;,           sVoucherSN);
		psOutputs.SetProperty(&quot;VoucherStatus&quot;,       sVoucherStatus);
	}
	catch(oException)
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    oException.errCode);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, oException.errText);
	}
	finally
	{
		psAttrListOut  = null;
		psFieldListOut = null;
		psAttrListIn   = null;
		psFieldListIn  = null;
		psManagerOut   = null;
		psManagerIn    = null;
		bsManager      = null;
		psControlsOut  = null;
		psControlsIn   = null;
		bsControls     = null;
		bcItemXA       = null;
		bcItem         = null;
		boOrder        = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="09/09/2016 14:22:54"
			   UPDATED_BY="EFONSECA"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RetrieveActivationPopupMessage"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveActivationPopupMessage(psInputs, psOutputs)
{
	try
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;0&quot;);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;&quot;);
		psOutputs.SetProperty(&quot;popupMessage&quot;, &quot;&quot;);
	
		var psInfoIn     : PropertySet = TheApplication().NewPropertySet ();
		var psInfoOut    : PropertySet = TheApplication().NewPropertySet ();
		var psReplaceIn  : PropertySet = TheApplication().NewPropertySet ();
		var psReplaceOut : PropertySet = TheApplication().NewPropertySet ();

		var sPopupMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;361&quot;);
		var sListOfValues = &quot;&quot;;
		
		if (psInputs.GetProperty(&quot;CampaignName&quot;) != &quot;&quot; &amp;&amp; psInputs.GetProperty(&quot;DiscountAmount&quot;) != &quot;&quot; &amp;&amp;
			psInputs.GetProperty(&quot;HandsetSubsidyAmount&quot;) != &quot;&quot;)
		{
			sListOfValues = psInputs.GetProperty(&quot;CampaignName&quot;) + &quot;,&quot; +
							psInputs.GetProperty(&quot;DiscountAmount&quot;) + &quot;,&quot; +
							psInputs.GetProperty(&quot;HandsetSubsidyAmount&quot;);
		}

		if (sListOfValues == &quot;&quot;)
		{
			psInfoIn.SetProperty(&quot;Action&quot;,              &quot;info&quot;);
			psInfoIn.SetProperty(&quot;OrderId&quot;,             psInputs.GetProperty(&quot;OrderId&quot;));
			psInfoIn.SetProperty(&quot;RootOrderLineItemId&quot;, psInputs.GetProperty(&quot;RootOrderLineItemId&quot;));
			
			CollectInfos(psInfoIn, psInfoOut);

			if (psInfoOut.GetProperty(&quot;ErrorCode&quot;) != &quot;0&quot;)
			{
				psOutputs.SetProperty(&quot;ErrorCode&quot;,    psInfoOut.GetProperty(&quot;ErrorCode&quot;));
				psOutputs.SetProperty(&quot;ErrorMessage&quot;, psInfoOut.GetProperty(&quot;ErrorMessage&quot;));
				return;
			}

			sListOfValues = psInfoOut.GetProperty(&quot;CampaignName&quot;) + &quot;,&quot; +
							psInfoOut.GetProperty(&quot;DiscountAmount&quot;) + &quot;,&quot; +
							psInfoOut.GetProperty(&quot;HandsetSubsidyAmount&quot;);
			
			if (sListOfValues.length &lt; 6)
			{
				psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
				psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;Campaign Attributes not completely setted&quot;);
				return;
			}
		}

		psReplaceIn.SetProperty(&quot;string&quot;,              sPopupMessage);
		psReplaceIn.SetProperty(&quot;ListOfSubstitutions&quot;, sListOfValues);
		psReplaceIn.SetProperty(&quot;delimiterChar&quot;,       &quot;###&quot;);

		replaceOccurrenceInString(psReplaceIn, psReplaceOut);
			
		psOutputs.SetProperty(&quot;popupMessage&quot;, psReplaceOut.GetProperty(&quot;newString&quot;));
	}
	catch(oException)
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    oException.errCode);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, oException.errText);
	}
	finally
	{
		psReplaceIn  = null;
		psReplaceOut = null;
		psInfoOut    = null;	
		psInfoIn     = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="12/30/2014 19:19:38"
			   UPDATED_BY="JCARVALHO"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		switch (MethodName)
		{
			case &quot;RetrievePopupMessage&quot;:
				RetrieveActivationPopupMessage(Inputs, Outputs);
				return (CancelOperation);
				break;

			case &quot;AssignTheVoucher&quot;:
				Inputs.SetProperty(&quot;Action&quot;,&quot;assign&quot;);
				VoucherRequest(Inputs, Outputs);
				return (CancelOperation);
				break;

			case &quot;UnassignTheVoucher&quot;:
				if(Inputs.GetProperty(&quot;IsReusable&quot;) == &quot;&quot;)
				{
					Inputs.SetProperty(&quot;IsReusable&quot;,&quot;1&quot;)
				}
				Inputs.SetProperty(&quot;Action&quot;,&quot;unassign&quot;);
				VoucherRequest (Inputs, Outputs);
				return (CancelOperation);
				break;

			case &quot;CheckTheVoucher&quot;:
				Inputs.SetProperty(&quot;Action&quot;,&quot;check&quot;);
				VoucherRequest (Inputs, Outputs);
				return (CancelOperation);
				break;

			case &quot;ifThereIsSubsidyAssignIt&quot;:
				ifThereIsSubsidyAssignIt(Inputs, Outputs);	
				return (CancelOperation);
				break;

			case &quot;CollectInfos&quot;:
				CollectInfos(Inputs, Outputs);	
				return (CancelOperation);
				break;

			case &quot;UpdateVoucherStatus&quot;:
				UpdateVoucherStatus(Inputs, Outputs);	
				return (CancelOperation);
				break;
		}

		return (ContinueOperation);
	}
	finally
	{
	}
}"
			   SEQUENCE="7"
			   UPDATED="12/30/2014 21:31:59"
			   UPDATED_BY="JCARVALHO"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateVoucherStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateVoucherStatus(psInputs, psOutputs)
{
	try
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;0&quot;);
   		psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;&quot;);

		var boItem : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem : BusComp   = boItem.GetBusComp(&quot;Order Entry - Line Items&quot;);

		var sActionNew  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;)

		var sStatusCode  = psInputs.GetProperty(&quot;StatusCode&quot;);
		var sAction      = psInputs.GetProperty(&quot;Action&quot;);
		var sOrderId     = psInputs.GetProperty(&quot;OrderId&quot;);
		var sRootItemId  = psInputs.GetProperty(&quot;RootOrderLineItemId&quot;);
		var sStatus      = &quot;&quot;;
		var sStatusValue = &quot;&quot;;

		if (sStatusCode == &quot;0&quot;)
		{
			if (sAction == &quot;check&quot;) sStatus = &quot;Checked&quot;;
			else if (sAction == &quot;assign&quot;) sStatus = &quot;Assigned&quot;;
			else if (sAction == &quot;unassign&quot;) sStatus = &quot;Unassigned&quot;;
			else return;
		}
		else
		{
			if (sAction == &quot;check&quot;) sStatus = &quot;CheckFailed&quot;;
			else if (sAction == &quot;assign&quot;) sStatus = &quot;AssignFailed&quot;;
			else if (sAction == &quot;unassign&quot;) sStatus = &quot;UnassignFailed&quot;;
			else return;
		}

		sStatusValue = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_VOUCHER_STATUS&quot;,sStatus);

		psOutputs.SetProperty(&quot;VoucherStatus&quot;, sStatusValue);

		if (sAction == &quot;check&quot;)
		{
			return;
		}

		if ((sOrderId == null || sOrderId == &quot;&quot;) &amp;&amp; (sRootItemId == null || sRootItemId == &quot;&quot;))
		{
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;Voucher not found. Impossible to update the status of the Voucher&quot;);
			return;
		}

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;VF Voucher Status&quot;);

		if (sOrderId != null &amp;&amp; sOrderId != &quot;&quot;)
		{
			bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		}

		if (sRootItemId != null &amp;&amp; sRootItemId != &quot;&quot;)
		{
			bcItem.SetSearchSpec(&quot;Root Order Item Id&quot;, sRootItemId);
		}

		bcItem.SetSearchSpec(&quot;VF Product Type&quot;,  &quot;HANDSET PROMO&quot;);		
		bcItem.SetSearchSpec(&quot;Product Sub Type&quot;, &quot;SUBSIDY&quot;);
		bcItem.SetSearchSpec(&quot;Action Code&quot;,      sActionNew);
    	bcItem.ExecuteQuery(ForwardOnly);

	    if (!bcItem.FirstRecord())
	    {
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;Voucher not found. Impossible to update the status of the Voucher&quot;);
		}

	    bcItem.SetFieldValue(&quot;VF Voucher Status&quot;, sStatusValue);
	    bcItem.WriteRecord();
	}
	catch(oException)
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    oException.errCode);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, oException.errText);
	}
	finally
	{
		bcItem = null;
		boItem = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="09/09/2016 11:43:41"
			   UPDATED_BY="EFONSECA"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VoucherRequest"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VoucherRequest(psInputs, psOutputs)
{
	try
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;0&quot;);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;&quot;);
		psOutputs.SetProperty(&quot;popupMessage&quot;, &quot;&quot;);
		
		var psInfoIn     : PropertySet = TheApplication().NewPropertySet();
		var psInfoOut    : PropertySet = TheApplication().NewPropertySet();
		var bsManager    : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn  : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();
		var psUpdateIn   : PropertySet = TheApplication().NewPropertySet();
		var psUpdateOut  : PropertySet = TheApplication().NewPropertySet();
		var psPopupIn    : PropertySet = TheApplication().NewPropertySet();
		var psPopupOut   : PropertySet = TheApplication().NewPropertySet();

		var sStatusAssigned = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_VOUCHER_STATUS&quot;,&quot;Assigned&quot;);
		var sPopupMessage   = &quot;&quot;;
		var aSplitMessage   = null;

		psInfoIn.SetProperty(&quot;Action&quot;,              psInputs.GetProperty(&quot;Action&quot;));
		psInfoIn.SetProperty(&quot;RootOrderLineItemId&quot;, psInputs.GetProperty(&quot;RootOrderLineItemId&quot;));
		psInfoIn.SetProperty(&quot;OrderId&quot;,             psInputs.GetProperty(&quot;OrderId&quot;));
		
		CollectInfos(psInfoIn, psInfoOut);

		if (psInfoOut.GetProperty(&quot;ErrorCode&quot;) != &quot;0&quot;)
		{
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    psInfoOut.GetProperty(&quot;ErrorCode&quot;));
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, psInfoOut.GetProperty(&quot;ErrorMessage&quot;));
			psOutputs.SetProperty(&quot;popupMessage&quot;, psInfoOut.GetProperty(&quot;ErrorMessage&quot;));
			return;
		}

		if (psInfoOut.GetProperty(&quot;VoucherStatus&quot;) == sStatusAssigned &amp;&amp;
			(psInputs.GetProperty(&quot;Action&quot;) == &quot;check&quot; || psInputs.GetProperty(&quot;Action&quot;) == &quot;assign&quot;))
		{
			return;
		}

		//VFTRCBU-33134
		//psManagerIn.SetProperty(&quot;ProcessName&quot;,      &quot;VF Voucher Request&quot;);
		//psManagerIn.SetProperty(&quot;Action Type&quot;,      psInfoOut.GetProperty(&quot;Action&quot;));
		//psManagerIn.SetProperty(&quot;MSISDN&quot;,           psInfoOut.GetProperty(&quot;MSISDN&quot;));
		//psManagerIn.SetProperty(&quot;Prom Part Number&quot;, psInfoOut.GetProperty(&quot;BP Part #&quot;));
		//psManagerIn.SetProperty(&quot;HS Part Number&quot;,   psInfoOut.GetProperty(&quot;HS Part#&quot;));
		//psManagerIn.SetProperty(&quot;Duration&quot;,         psInfoOut.GetProperty(&quot;Duration&quot;));
		//psManagerIn.SetProperty(&quot;Payment Method&quot;,   psInfoOut.GetProperty(&quot;Payment Method&quot;));
		//psManagerIn.SetProperty(&quot;Model&quot;,            psInfoOut.GetProperty(&quot;Model&quot;));
		//psManagerIn.SetProperty(&quot;Type&quot;,             psInfoOut.GetProperty(&quot;Type&quot;));		
		psManagerIn.SetProperty(&quot;ProcessName&quot;,       &quot;VFTRCBU PMS Validate Voucher CBU WF&quot;);
		psManagerIn.SetProperty(&quot;Object Id&quot;,         psInfoOut.GetProperty(&quot;OrderId&quot;));
		psManagerIn.SetProperty(&quot;ACTIONTYPE&quot;,        psInfoOut.GetProperty(&quot;Action&quot;));
		psManagerIn.SetProperty(&quot;MSISDN&quot;,            psInfoOut.GetProperty(&quot;MSISDN&quot;));
		psManagerIn.SetProperty(&quot;PARTNUMBERBUNDLE&quot;,  psInfoOut.GetProperty(&quot;BP Part #&quot;));
		psManagerIn.SetProperty(&quot;PARTNUMBERHANDSET&quot;, psInfoOut.GetProperty(&quot;HS Part#&quot;));
		psManagerIn.SetProperty(&quot;DURATION&quot;,          psInfoOut.GetProperty(&quot;Duration&quot;));
		psManagerIn.SetProperty(&quot;PAYMENTMETHOD&quot;,     psInfoOut.GetProperty(&quot;Payment Method&quot;));
		psManagerIn.SetProperty(&quot;MODEL&quot;,             psInfoOut.GetProperty(&quot;Model&quot;));
		psManagerIn.SetProperty(&quot;TYPE&quot;,              psInfoOut.GetProperty(&quot;Type&quot;));	
		psManagerIn.SetProperty(&quot;CUSTOMERTYPE&quot;,      psInputs.GetProperty(&quot;CustomerType&quot;));	

		if (psInputs.GetProperty(&quot;VoucherSerialNumber&quot;) != &quot;&quot;)
		{
			psManagerIn.SetProperty(&quot;VOUCHERCODE&quot;, psInputs.GetProperty(&quot;VoucherSerialNumber&quot;));
		}
		else
		{
			psManagerIn.SetProperty(&quot;VOUCHERCODE&quot;, psInfoOut.GetProperty(&quot;VoucherSN&quot;));
		}

		if (psManagerIn.GetProperty(&quot;VOUCHERCODE&quot;) == null ||
			psManagerIn.GetProperty(&quot;VOUCHERCODE&quot;) == &quot;&quot;)
		{
			return;
		}

		bsManager.InvokeMethod(&quot;RunProcess&quot;,psManagerIn,psManagerOut);
		
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    psManagerOut.GetProperty(&quot;Error Code&quot;));
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, psManagerOut.GetProperty(&quot;Error Message&quot;));

		psUpdateIn.SetProperty(&quot;StatusCode&quot;,          psManagerOut.GetProperty(&quot;Error Code&quot;));
		psUpdateIn.SetProperty(&quot;Action&quot;,              psInputs.GetProperty(&quot;Action&quot;));
		psUpdateIn.SetProperty(&quot;OrderId&quot;,             psInfoOut.GetProperty(&quot;OrderId&quot;));
		psUpdateIn.SetProperty(&quot;RootOrderLineItemId&quot;, psInfoOut.GetProperty(&quot;RootOrderLineItemId&quot;));

		UpdateVoucherStatus(psUpdateIn, psUpdateOut);

		psOutputs.SetProperty(&quot;VoucherStatus&quot;, psUpdateOut.GetProperty(&quot;VoucherStatus&quot;));

		if (psUpdateOut.GetProperty(&quot;ErrorCode&quot;) != &quot;0&quot;)
		{
			if (psManagerOut.GetProperty(&quot;Error Code&quot;) == &quot;0&quot;)
			{
				psOutputs.SetProperty(&quot;ErrorCode&quot;,    psUpdateOut.GetProperty(&quot;ErrorCode&quot;));
				psOutputs.SetProperty(&quot;ErrorMessage&quot;, psUpdateOut.GetProperty(&quot;ErrorMessage&quot;));
			}

			psOutputs.SetProperty(&quot;popupMessage&quot;, psUpdateOut.GetProperty(&quot;ErrorMessage&quot;));
			return;
		}

		if (psManagerOut.GetProperty(&quot;Error Code&quot;) != &quot;0&quot; &amp;&amp; psManagerOut.GetProperty(&quot;Error Code&quot;) != &quot;&quot;)
		{
			if (psInputs.GetProperty(&quot;Action&quot;) == &quot;check&quot;)
			{
				psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
				psOutputs.SetProperty(&quot;popupMessage&quot;, TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD6003&quot;));
			}

			if (psInputs.GetProperty(&quot;Action&quot;) == &quot;assign&quot;)
			{
				psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
				psOutputs.SetProperty(&quot;popupMessage&quot;, TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;360&quot;));
			}

			return;
		}

		if (psInputs.GetProperty(&quot;Action&quot;) == &quot;assign&quot;)
		{
			psPopupIn.SetProperty(&quot;OrderId&quot;,              psInfoOut.GetProperty(&quot;OrderId&quot;));
			psPopupIn.SetProperty(&quot;RootOrderLineItemId&quot;,  psInfoOut.GetProperty(&quot;RootOrderLineItemId&quot;));
			psPopupIn.SetProperty(&quot;CampaignName&quot;,         psInfoOut.GetProperty(&quot;CampaignName&quot;));
			psPopupIn.SetProperty(&quot;DiscountAmount&quot;,       psInfoOut.GetProperty(&quot;DiscountAmount&quot;));
			psPopupIn.SetProperty(&quot;HandsetSubsidyAmount&quot;, psInfoOut.GetProperty(&quot;HandsetSubsidyAmount&quot;));
				
			RetrieveActivationPopupMessage(psPopupIn, psPopupOut);

			if (psPopupOut.GetProperty(&quot;ErrorCode&quot;) != &quot;0&quot;)
			{
				psOutputs.SetProperty(&quot;ErrorCode&quot;,    psPopupOut.GetProperty(&quot;ErrorCode&quot;));
				psOutputs.SetProperty(&quot;ErrorMessage&quot;, psPopupOut.GetProperty(&quot;ErrorMessage&quot;));
				psOutputs.SetProperty(&quot;popupMessage&quot;, psPopupOut.GetProperty(&quot;ErrorMessage&quot;));
				return;
			}

			sPopupMessage = psPopupOut.GetProperty(&quot;popupMessage&quot;);
			aSplitMessage = sPopupMessage.split(&quot;\\&quot;);

			if (aSplitMessage.length &gt; 0)
			{
				sPopupMessage = &quot;&quot;;

				for (var i = 0; i &lt; aSplitMessage.length; i++)
				{
					sPopupMessage = sPopupMessage + aSplitMessage[i] + &quot;\n\r&quot;;
				}
			}

			psOutputs.SetProperty(&quot;popupMessage&quot;, sPopupMessage);
		}
	}
	catch(oException)
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    oException.errCode);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, oException.errText);
		psOutputs.SetProperty(&quot;popupMessage&quot;, oException.errText);
	}
	finally
	{
		psPopupOut   = null;
		psPopupIn    = null;
		psUpdateOut  = null;
		psUpdateIn   = null;
		psManagerOut = null;
		psManagerIn  = null;
		bsManager    = null;
		psInfoIn     = null;
		psInfoOut    = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="09/09/2016 15:29:27"
			   UPDATED_BY="EFONSECA"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ifThereIsSubsidyAssignIt"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ifThereIsSubsidyAssignIt(psInputs, psOutputs)
{
	var sFullPopupMessage = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;0&quot;);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;&quot;);
		psOutputs.SetProperty(&quot;popupMessage&quot;, &quot;&quot;);

	 	var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcItem : BusComp    = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sOrderId          = psInputs.GetProperty(&quot;OrderId&quot;);
		var sActionNew        = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sStatusAssigned   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_VOUCHER_STATUS&quot;,&quot;Assigned&quot;);
		var sRootItemId       = &quot;&quot;;
		var sVoucherStatus    = &quot;&quot;;
		var sPopupMessage     = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			psOutputs.SetProperty(&quot;ErrorCode&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;Missing input specify the OrderId&quot;);
			psOutputs.SetProperty(&quot;popupMessage&quot;, &quot;Missing input specify the OrderId&quot;);
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Root Order Item Id&quot;);
		bcItem.ActivateField(&quot;VF Voucher Status&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;,  sOrderId);
		bcItem.SetSearchSpec(&quot;VF Product Type&quot;,  &quot;HANDSET PROMO&quot;);
		bcItem.SetSearchSpec(&quot;Product Sub Type&quot;, &quot;SUBSIDY&quot;);
		bcItem.SetSearchSpec(&quot;Action Code&quot;,      sActionNew);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		do
		{
			sRootItemId    = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);
			sVoucherStatus = bcItem.GetFieldValue(&quot;VF Voucher Status&quot;);

			if (sVoucherStatus == null || sVoucherStatus == &quot;&quot; || sVoucherStatus != sStatusAssigned)
			{
				psInputs.SetProperty(&quot;RootOrderLineItemId&quot;, sRootItemId);
				psInputs.SetProperty(&quot;Action&quot;,              &quot;assign&quot;);

				VoucherRequest(psInputs, psOutputs);

				sPopupMessage = psOutputs.GetProperty(&quot;popupMessage&quot;);

				if (sPopupMessage != null &amp;&amp; sPopupMessage != &quot;&quot;)
				{
					if (sFullPopupMessage == null || sFullPopupMessage == &quot;&quot;)
						sFullPopupMessage = sPopupMessage;
					else
						sFullPopupMessage = sFullPopupMessage + &quot;\n&quot; + sPopupMessage;
				}

				psOutputs.SetProperty(&quot;popupMessage&quot;, sFullPopupMessage);

				if (psOutputs.GetProperty(&quot;ErrorCode&quot;) != &quot;0&quot;)
				{
					return;
				}
			}
		}
		while (bcItem.NextRecord());
	}
	catch(oException)
	{
		psOutputs.SetProperty(&quot;ErrorCode&quot;,    oException.errCode);
		psOutputs.SetProperty(&quot;ErrorMessage&quot;, oException.errText);
		psOutputs.SetProperty(&quot;popupMessage&quot;, sFullPopupMessage + oException.errText);
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="09/09/2016 11:44:02"
			   UPDATED_BY="EFONSECA"
			   CREATED="12/24/2014 11:01:58"
			   CREATED_BY="JCARVALHO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="replaceOccurrenceInString"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function replaceOccurrenceInString(psInputs, psOutputs)
{
	try
	{
		var sMessage      = psInputs.GetProperty(&quot;string&quot;);
		var sListOfValues = psInputs.GetProperty(&quot;ListOfSubstitutions&quot;);
		var sPattern      = psInputs.GetProperty(&quot;delimiterChar&quot;);		

		var aNewValues = sListOfValues.split(&quot;,&quot;);
		var iLength    = aNewValues.length;
		
		for (var i = 0; i &lt; iLength; i++)
		{
			sMessage = sMessage.replace(sPattern, aNewValues[i]);
		}
		
		psOutputs.SetProperty(&quot;newString&quot;, sMessage);
	}
	finally
	{
	}
}"
			   SEQUENCE="3"
			   UPDATED="12/30/2014 19:25:45"
			   UPDATED_BY="JCARVALHO"
			   CREATED="08/18/2011 13:05:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



