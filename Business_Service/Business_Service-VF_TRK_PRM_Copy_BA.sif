<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="11/24/2016 17:14:00"
   UPDATED_BY="SADMIN"
   CREATED="11/24/2016 14:49:11"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="PRM VF TR Extension"
	   UI_FREEZE="N"
	   UPDATED="03/21/2017 17:45:21"
	   UPDATED_BY="EFONSECA"
	   CREATED="11/28/2011 18:43:00"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF TRK PRM Copy BA"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="03/21/2017 15:44:48"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="EFONSECA"
		   UPDATED="03/21/2017 17:44:08"
		   UPDATED_BY="EFONSECA"
		   CREATED="12/02/2011 12:30:47"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AssociateBAtoLI"
			   UPDATED="12/02/2011 12:30:47"
			   UPDATED_BY="SADMIN"
			   CREATED="12/02/2011 12:30:47"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Root Level Item Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/02/2011 12:30:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/02/2011 12:30:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AssociateBAtoLI"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/02/2011 12:30:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/02/2011 12:30:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="BeginUngroup"
			   UPDATED="12/02/2011 12:30:47"
			   UPDATED_BY="SADMIN"
			   CREATED="12/02/2011 12:30:47"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Root Level Item Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/02/2011 12:30:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/02/2011 12:30:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="BeginUngroup"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/02/2011 12:30:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/02/2011 12:30:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CompleteOrderConfig"
			   UPDATED="01/10/2012 12:31:10"
			   UPDATED_BY="SADMIN"
			   CREATED="01/10/2012 12:31:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/10/2012 12:31:10"
				   UPDATED_BY="SADMIN"
				   CREATED="01/10/2012 12:31:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CompleteOrderConfig"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/10/2012 12:31:10"
				   UPDATED_BY="SADMIN"
				   CREATED="01/10/2012 12:31:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="InsertBAintoLI"
			   UPDATED="12/02/2011 12:30:47"
			   UPDATED_BY="SADMIN"
			   CREATED="12/02/2011 12:30:47"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Billing Account Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/02/2011 12:30:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/02/2011 12:30:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="InsertBAintoLI"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/02/2011 12:30:47"
				   UPDATED_BY="SADMIN"
				   CREATED="12/02/2011 12:30:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AssociateBAtoLI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AssociateBAtoLI (Inputs, Outputs)
{
try
	{
	var SinMul = TheApplication().GetProfileAttr(&quot;SingleOrMultipleBA&quot;); //Single or Multiple
	var OrderId;
	var BO :BusObject;
	var BCOLI :BusComp;
	var found;
	var record;
	var BA ;
	var BOAcc:BusObject;
	var BCBA :BusComp;
	var barecord;
	var inProp 	:PropertySet	= TheApplication().NewPropertySet();
	var outProp :PropertySet	= TheApplication().NewPropertySet();
	var inProp1 :PropertySet	= TheApplication().NewPropertySet();
	var outProp1:PropertySet	= TheApplication().NewPropertySet();
	var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	
	if (SinMul == &quot;Multiple&quot;)
		{
		OrderId = Inputs.GetProperty(&quot;Root Level Item Id&quot;);
	
  
		BO	  = TheApplication().GetBusObject(&quot;Order Entry Reverse (Sales)&quot;);//ESANTOS VFTRCBU-29219 - BO changed to avoid ORder dependency
		BCOLI = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		BCOLI.SetViewMode(AllView);
		BCOLI.ClearToQuery();
   		BCOLI.ActivateField(&quot;Billing Account Id&quot;);
   		BCOLI.ActivateField(&quot;UngroupId&quot;);
   		BCOLI.SetSearchSpec(&quot;UngroupId&quot;,OrderId);
   		BCOLI.ExecuteQuery(ForwardOnly);
   		record = BCOLI.FirstRecord();
		while (record)
		{
			if (BCOLI.GetFieldValue(&quot;Id&quot;)==OrderId)
 			{
				BCOLI.SetFieldValue(&quot;UngroupId&quot;,&quot;&quot;); //Clean Ungroup field
			}//End if
			
			else
			{
	   			//create a copy of the BA
	   			BA = BCOLI.GetFieldValue(&quot;Billing Account Id&quot;);
	   			BOAcc = TheApplication().GetBusObject(&quot;Account&quot;);
	   			BCBA = BOAcc.GetBusComp(&quot;Billing Account&quot;);
	   			BCBA.SetViewMode(AllView);
		   		BCBA.ClearToQuery();
		   		// Review Input validation: Scripting 15 null check Added 10may2012 Udbhav IDC
				//*** Begin Validation Input Part ***/ 
				inProp1.SetProperty(&quot;BA&quot;,BA); //Id Validation
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp1, outProp1); // Query Input Validation
				//*** End ***/
		   		BCBA.SetSearchSpec(&quot;Id&quot;,BA);
		   		BCBA.ExecuteQuery(ForwardOnly);//Review Parent-Child Query: The query is only for one BC in BO,query cannot be removed 10may2012 Udbhav IDC VFTK
		   		barecord = BCBA.FirstRecord();
		   		if (barecord)
		   		{

		   			BCBA.NewRecord(NewAfterCopy);
		   			BCBA.WriteRecord();
		   			var NewBA = BCBA.GetFieldValue(&quot;Id&quot;);
		   			var In = TheApplication().NewPropertySet();
		   			var Out = TheApplication().NewPropertySet();
		   			var BusSer = TheApplication().GetService(&quot;VF Controls&quot;);
		   			
		   			In.SetProperty(&quot;BAId&quot;,NewBA);
		   			BusSer.InvokeMethod(&quot;CompleteBA&quot;,In,Out);
		   			//set new BA to main line item
			   		BCOLI.SetFieldValue(&quot;Billing Account Id&quot;,NewBA);
			   		BCOLI.SetFieldValue(&quot;UngroupId&quot;,&quot;&quot;); //Clean Ungroup field after execution
			   		BCOLI.WriteRecord();
		   		}//end if b
		   	}//end else
	   		record = BCOLI.NextRecord();
   		}//end while record
   		
   	}	
	return(CancelOperation);
	}//try

catch(e)
	{
	throw e;
	}

finally
{
	BCOLI 		= null;
	BCBA 		= null;
	BCBA 		= null;
	BO 			= null;
	BOAcc		= null;
	BOAcc 		= null;
	inProp 		= null;
	outProp 	= null;
	inProp1 	= null;
	outProp1	= null;
	In 			= null;
	Out 		= null;
	BusSer 		= null;
	BS 			= null;
}
}"
			   SEQUENCE="1"
			   UPDATED="05/20/2016 20:11:09"
			   UPDATED_BY="SADMIN"
			   CREATED="12/02/2011 12:30:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BeginUngroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BeginUngroup (Inputs, Outputs)
{
try
	{
		var OrderId;
		var BO : BusObject;
		var BCOLI : BusComp;
		var found;	
		
		OrderId = Inputs.GetProperty(&quot;Root Level Item Id&quot;);
		BO = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		BCOLI = BO.GetBusComp(&quot;Order Entry - Line Items for Ungroup&quot;);
		//query for MLI involved into ungrouping
		//Begin - Scripting 15 - Input validation: Null check
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End - Scripting 15 - Input validation: Null check	
		BCOLI.SetViewMode(AllView);
   		BCOLI.ClearToQuery();
   		BCOLI.ActivateField(&quot;UngroupId&quot;); 		
   		BCOLI.SetSearchSpec(&quot;Id&quot;,OrderId);
   		BCOLI.ExecuteQuery(ForwardOnly);
   		found = BCOLI.FirstRecord();
   		if(found)
   			{
			   		BCOLI.SetFieldValue(&quot;UngroupId&quot;,OrderId);
			   		BCOLI.WriteRecord();
   			}//end if found
	//return(CancelOperation); --ALINO VFTRADM-1463
	}//try

catch(e)
	{
	throw e;
	}

finally
	{
		BO 				= null;
		BCOLI 			= null;
		inProp			= null;
		outProp			= null;
		BS				= null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="03/21/2017 17:44:08"
			   UPDATED_BY="EFONSECA"
			   CREATED="12/02/2011 12:30:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CompleteOrderConfig"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CompleteOrderConfig (Inputs, Outputs)
{
try
	{
/*	var BO 		:BusObject= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
	var BCHead 	:BusComp  = BO.GetBusComp(&quot;Order Entry - Orders&quot;);
	var BCLI   	:BusComp  = BO.GetBusComp(&quot;Order Entry - Line Items&quot;);*/
	
	var BO :BusObject= TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
	var BCHead 	:BusComp  = BO.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
	var BCLI :BusComp  = BO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
	
	
	var OrderId = Inputs.GetProperty(&quot;Order Id&quot;);
	// Review Input validation: Scripting 15 null check Added 10may2012 Udbhav IDC
	/*** Begin Validation Input Part ***/ 
	var inProp 	:PropertySet	= TheApplication().NewPropertySet();
	var outProp :PropertySet	= TheApplication().NewPropertySet();
	var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;OrderId&quot;,OrderId); //Id Validation
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
	/*** End Validation Input part ***/
		
	BCHead.SetViewMode(AllView);
  	BCHead.ClearToQuery();
  	BCHead.SetSearchSpec(&quot;Id&quot;,&quot;&apos;&quot;+OrderId+&quot;&apos;&quot;);
  	BCHead.ActivateField(&quot;Billing Account Id&quot;);
  	BCHead.ExecuteQuery(ForwardOnly);
  	
	if(BCHead.FirstRecord()){
		BCLI.SetViewMode(AllView);
		BCLI.ClearToQuery();
		BCLI.SetSearchSpec(&quot;Order Header Id&quot;,&quot;&apos;&quot;+OrderId+&quot;&apos;&quot;);
	 	BCLI.ExecuteQuery(ForwardOnly);
		
		var BA = BCHead.GetFieldValue(&quot;Billing Account Id&quot;);
		TheApplication().SetProfileAttr(&quot;BABCHead&quot;,BA);
	
	 	if(BCLI.FirstRecord())
	 	{
	 		
	 		
	 		var record = BCLI.FirstRecord();
	 		while(record)
	  		{
		  		if ((BCLI.GetFieldValue(&quot;Billing Account Id&quot;) == &quot;&quot;) || (BCLI.GetFieldValue(&quot;Billing Account Id&quot;) == null));
		   		{
			   		BCLI.SetFieldValue(&quot;Billing Account Id&quot;,BA);
			   		BCLI.WriteRecord();
		   		}//end if
		   		record = BCLI.NextRecord();
		  	}//end while
	 	}//end if	
	}
	
	return(CancelOperation);
	}//try

	catch(e)
	{
		throw e;
	}
	finally
	{
		BCHead 	= null;
		BCLI   	= null;
		BO 		= null;
		inProp 	= null;
		outProp = null;
		BS 		= null;	
	}
}"
			   SEQUENCE="3"
			   UPDATED="07/20/2013 17:49:12"
			   UPDATED_BY="SADMIN"
			   CREATED="01/10/2012 12:31:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InsertBAintoLI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InsertBAintoLI (Inputs, Outputs)
{
try
	{
	var OrderId = TheApplication().GetProfileAttr(&quot;VFPA_OrderId&quot;);
	var record;
	var BA;
	var BOAcc :BusObject;
	var BCBA :BusComp;
	var barecord;
	
	var inProp 	:PropertySet	= TheApplication().NewPropertySet();
	var outProp :PropertySet	= TheApplication().NewPropertySet();
	var inProp1 :PropertySet	= TheApplication().NewPropertySet();
	var outProp1:PropertySet	= TheApplication().NewPropertySet();
	var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	
	var newBA = TheApplication().GetProfileAttr(&quot;OldOrNewBA&quot;); //YES or NO
	var SinMul = TheApplication().GetProfileAttr(&quot;SingleOrMultipleBA&quot;); //Single or Multiple
	
		var BillAcc = Inputs.GetProperty(&quot;Billing Account Id&quot;);
		var BO 	  :BusObject= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var BCOLI :BusComp	= BO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		//query for MLI
		BCOLI.SetViewMode(AllView);
   		BCOLI.ClearToQuery();
   		// Review Input validation: Scripting 15 null check Added 10may2012 Udbhav IDC
		/*** Begin ***/ 
		inProp.SetProperty(&quot;OrderId&quot;,OrderId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End **/ 
		
		BCOLI.SetSearchSpec(&quot;Order Header Id&quot;,OrderId);
   		BCOLI.SetSearchSpec(&quot;IsRootItem&quot;,&quot;Y&quot;);
   		BCOLI.ExecuteQuery(ForwardOnly);
   		var found = BCOLI.FirstRecord();
   		//populate BA field for each root with BA selected/created
   		while(found)
   			{
   			BCOLI.SetFieldValue(&quot;Billing Account Id&quot;,BillAcc);
   			BCOLI.WriteRecord();
   			found = BCOLI.NextRecord();
   			}
   			
   	if(SinMul == &quot;Multiple&quot;)
   			{
   			//query for MLI
			BCOLI.SetViewMode(AllView);
	   		BCOLI.ClearToQuery();
	   		BCOLI.SetSearchSpec(&quot;Order Header Id&quot;,OrderId);//checked above
	   		BCOLI.SetSearchSpec(&quot;IsRootItem&quot;,&quot;Y&quot;);
	   		BCOLI.ExecuteQuery(ForwardOnly);//query present for the same BC again
	   		found = BCOLI.FirstRecord();		
   			//go to second record, first one has already correct BA
   	
   		if (newBA == &quot;NO&quot;)
   		{
   			record = BCOLI.FirstRecord();
   		} else 	record = BCOLI.NextRecord();
   		
   			while (record)
	   			{
	   			//create a copy of the BA
	   			BA = BCOLI.GetFieldValue(&quot;Billing Account Id&quot;);
	   			BOAcc = TheApplication().GetBusObject(&quot;Account&quot;);
	   			BCBA = BOAcc.GetBusComp(&quot;Billing Account&quot;);
	   			BCBA.SetViewMode(AllView);
		   		BCBA.ClearToQuery();
		   		// Review Input validation: Scripting 15 null check Added 10may2012 Udbhav IDC
				/*** Begin ***/ 
				inProp1.SetProperty(&quot;BA&quot;,BA); //Id Validation
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp1, outProp1); // Query Input Validation
				/*** End ***/ 
		   		BCBA.SetSearchSpec(&quot;Id&quot;,BA);
		   		BCBA.ExecuteQuery(ForwardOnly);
		   		barecord = BCBA.FirstRecord();
		   		if (barecord)
		   			{
		   			BCBA.NewRecord(NewAfterCopy);
		   			BCBA.WriteRecord();
		   			var NewBA = BCBA.GetFieldValue(&quot;Id&quot;);
		   			var In 	:PropertySet= TheApplication().NewPropertySet();
		   			var Out :PropertySet= TheApplication().NewPropertySet();
		   			var BusSer :Service = TheApplication().GetService(&quot;VF Controls&quot;);
		   			In.SetProperty(&quot;BAId&quot;,NewBA);
		   			BusSer.InvokeMethod(&quot;CompleteBA&quot;,In,Out);
		   			//set new BA to main line item
			   		BCOLI.SetFieldValue(&quot;Billing Account Id&quot;,NewBA);
			   		BCOLI.WriteRecord();
		   			}//end if barecord
		   		record = BCOLI.NextRecord();
	   			}//end while record
   			}//end if
   		
	return(CancelOperation);
	}//try

	catch(e)
	{
		throw e	;
	}
	finally
	{
		BCBA = null;
		BCOLI = null;
		BOAcc = null;
		BO 	  = null;
		inProp 		= null;
		outProp 	= null;
		inProp1 	= null;
		outProp1	= null;
		In 	= null;
		Out = null;
		BusSer = null;
		BS 			= null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="07/20/2013 17:49:13"
			   UPDATED_BY="SADMIN"
			   CREATED="12/02/2011 12:30:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
    if(MethodName == &quot;AssociateBAtoLI&quot;)
	    {
	    AssociateBAtoLI(Inputs,Outputs);
	    return (CancelOperation);
	    }
    
    if(MethodName == &quot;BeginUngroup&quot;)
	    {
	    BeginUngroup(Inputs,Outputs);
	    return (CancelOperation);
	    }   
    
    if(MethodName ==&quot;InsertBAintoLI&quot;)
    	{
	    InsertBAintoLI(Inputs,Outputs);
	    return (CancelOperation);
	    }
	    
	if(MethodName ==&quot;CompleteOrderConfig&quot;) //defect PROD00028549 
	    {
	    CompleteOrderConfig(Inputs,Outputs);
	    return (CancelOperation);
	    }
	    
	return (ContinueOperation);
}"
			   SEQUENCE="5"
			   UPDATED="01/10/2012 12:31:10"
			   UPDATED_BY="SADMIN"
			   CREATED="12/02/2011 12:30:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



