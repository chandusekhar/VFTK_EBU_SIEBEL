<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="04/28/2018 18:51:18"
   UPDATED_BY="SADMIN"
   CREATED="04/28/2018 10:52:36"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF Carbon Copy"
	   UI_FREEZE="N"
	   UPDATED="05/21/2018 14:22:23"
	   UPDATED_BY="IBM_OZGEK"
	   CREATED="03/04/2014 08:01:21"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Carbon Copy Operation"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="05/21/2018 14:26:53"
		   UPDATED_BY="IBM_OZGEK"
		   CREATED="03/04/2014 08:02:05"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="Carbon Copy Operation"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="03/04/2014 08:02:05"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CancelBulkRequest"
			   UPDATED="03/20/2014 11:13:50"
			   UPDATED_BY="SADMIN"
			   CREATED="03/20/2014 11:13:50"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CancelBulkRequest"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/20/2014 11:13:50"
				   UPDATED_BY="SADMIN"
				   CREATED="03/20/2014 11:13:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckLineStatus"
			   UPDATED="05/04/2015 22:49:37"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:37"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckLineStatus"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/04/2015 22:49:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/04/2015 22:49:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMPBX_Del"
			   UPDATED="05/04/2015 22:49:37"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:37"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckMPBX_Del"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/04/2015 22:49:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/04/2015 22:49:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMsisdnOnAsset"
			   UPDATED="12/29/2014 11:31:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckMsisdnOnAsset"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/29/2014 11:31:18"
				   UPDATED_BY="SADMIN"
				   CREATED="12/29/2014 11:31:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckProdInInstance"
			   UPDATED="12/29/2014 11:31:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckProdInInstance"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/29/2014 11:31:18"
				   UPDATED_BY="SADMIN"
				   CREATED="12/29/2014 11:31:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeleteErrorLines"
			   UPDATED="03/19/2014 11:15:36"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2014 11:15:36"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeleteErrorLines"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/19/2014 11:15:36"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2014 11:15:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetActiveOrder"
			   UPDATED="12/29/2014 11:31:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetActiveOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/29/2014 11:31:18"
				   UPDATED_BY="SADMIN"
				   CREATED="12/29/2014 11:31:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetProductInfo"
			   UPDATED="12/29/2014 11:31:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetProductInfo"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/29/2014 11:31:18"
				   UPDATED_BY="SADMIN"
				   CREATED="12/29/2014 11:31:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ImportFromLocal"
			   UPDATED="03/19/2014 11:15:36"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2014 11:15:36"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ImportFromLocal"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/19/2014 11:15:36"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2014 11:15:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LaunchCarbonCopy"
			   UPDATED="03/04/2014 08:02:05"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:05"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LaunchCarbonCopy"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2014 08:02:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2014 08:02:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LaunchOrderItemValidation"
			   UPDATED="03/04/2014 08:02:05"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:05"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LaunchOrderItemValidation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2014 08:02:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2014 08:02:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LoadCarbonCopyItems"
			   UPDATED="03/19/2014 11:15:36"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2014 11:15:36"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LoadCarbonCopyItems"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/19/2014 11:15:36"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2014 11:15:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="NextProduct"
			   UPDATED="12/29/2014 11:31:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="NextProduct"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/29/2014 11:31:18"
				   UPDATED_BY="SADMIN"
				   CREATED="12/29/2014 11:31:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ParseCommands"
			   UPDATED="12/29/2014 11:31:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ParseCommands"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/29/2014 11:31:18"
				   UPDATED_BY="SADMIN"
				   CREATED="12/29/2014 11:31:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetAssetIntegrationIds"
			   UPDATED="11/02/2015 10:35:24"
			   UPDATED_BY="SADMIN"
			   CREATED="11/02/2015 10:35:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="HC Asset Integration Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/02/2015 10:35:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/02/2015 10:35:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="HC Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/02/2015 10:35:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/02/2015 10:35:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ML Asset Integration Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/02/2015 10:35:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/02/2015 10:35:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ML Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/02/2015 10:35:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/02/2015 10:35:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="11/02/2015 10:35:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/02/2015 10:35:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetAssetIntegrationIds"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/02/2015 10:35:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/02/2015 10:35:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SubmitOrder"
			   UPDATED="03/04/2014 08:02:05"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:05"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SubmitOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2014 08:02:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2014 08:02:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ValidateOrder"
			   UPDATED="03/04/2014 08:02:05"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:05"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ValidateOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2014 08:02:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2014 08:02:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="(declarations)"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="var strGlobalLineNumber = 0;
var strVPNInAttributes = false;
var bIsMNP = false;
var sProductList=&quot;&quot;;
var lovAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
var lovModify = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);
var lovDelete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);

var sStatusCCError = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Error&quot;);
var sStatusCCCompleted = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Completed&quot;);
var sSubmitError = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Submit Error&quot;);
var lovExpPartComp = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Express Partially Completed&quot;);
var lovExpError = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Express Error&quot;);
var lovExpInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Express In Progress&quot;);
var lovNew = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;New&quot;);

var sStatusSubmitting = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Submitting&quot;);
var sStatusCancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
var sStatusMACompleted = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Manual Action Completed&quot;);

var sSuccessMessage = TheApplication().LookupMessage(&quot;ACS Messages&quot;, &quot;025&quot;);

var SH1PATH1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_SHELL&quot;, &quot;SH1PATH1&quot;);
var SH1PATH2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_SHELL&quot;, &quot;SH1PATH2&quot;);
var SH1PATH3 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_SHELL&quot;, &quot;SH1PATH3&quot;);
var SH1RUN1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_SHELL&quot;, &quot;SH1RUN1&quot;);
var strShell = SH1PATH1 + SH1PATH2 + SH1PATH3;"
			   SEQUENCE="1"
			   UPDATED="06/14/2016 22:24:36"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Activation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Activation(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		
		var strCCHederId = Input.GetProperty(&quot;CC Header Id&quot;);
		var strRefOrderId=&quot;&quot;;
		var bCCLineItem = false;
		
		var iDefMaxLine = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_MAXLINE&quot;,&quot;MAX&quot;);
		var lovInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;In Progress&quot;);
		var lovCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Created&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);
				
		var iLineCount = 0;
		var strBillAccCode		= &quot;&quot;;
		var strCustomerCode		= &quot;&quot;;
		var strDealerCode	    = &quot;&quot;;
		var strAccountId		= &quot;&quot;;
		var strBillAccId		= &quot;&quot;;
		var strPrevBillAccCode	= &quot;&quot;;
		var strPrevCustomerCode	= &quot;&quot;;
		var strMSISDN 			= &quot;&quot;;
		var strICCID			= &quot;&quot;;
		var strRefOrderItemId	= &quot;&quot;;
		var strCommands			= &quot;&quot;;
		var iMaxLineItems		= &quot;&quot;;
		var strErrDesc			= &quot;&quot;;
		var strCreatedOrderId	= &quot;&quot;;
		var strCreRootItemID	= &quot;&quot;;
		var bSubErr 			= false;
		var bNewOrderHeader		= false;
		var strPrevRefOrderId	= &quot;&quot;;
		var strPrevDelarCode	= &quot;&quot;;
		var strPriContId 		= &quot;&quot;;
		var strPriAddrId 		= &quot;&quot;;
		var strOrderHeadCommands= &quot;&quot;; 
		var strActionType		= &quot;&quot;;
		var strActionReason 	= &quot;&quot;;
		var strActionSubReason 	= &quot;&quot;;
		var positionId 			= &quot;&quot;; //RCRISPIM: Retrofits 2015 February Minor
		
		var inHeadComm = TheApplication().NewPropertySet();
		var outHeadComm = TheApplication().NewPropertySet();
		//var strOrderSubType = &quot;&quot;;
		
		with(bcCarbonCopyH)
		{
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;); //RCRISPIM: Retrofits 2015 February Minor
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Ref Order Id&quot;);
			ActivateField(&quot;Max Line Items&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Commands&quot;);
			ActivateField(&quot;Position Id&quot;); //RCRISPIM: Retrofits 2015 February Minor
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				iMaxLineItems = GetFieldValue(&quot;Max Line Items&quot;);
				strOrderHeadCommands = GetFieldValue(&quot;Commands&quot;);
				positionId = GetFieldValue(&quot;Position Id&quot;); //RCRISPIM: Retrofits 2015 February Minor
				if(ToNumber(iMaxLineItems)&lt; 1 || ToNumber(iMaxLineItems) &gt; ToNumber(iDefMaxLine))
				{
					iMaxLineItems = iDefMaxLine;
				}
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				SetFieldValue(&quot;Status&quot;,lovInProgress);
				WriteRecord();
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				
				inHeadComm.SetProperty(&quot;Commands&quot;,strOrderHeadCommands);

				ParseCommands(inHeadComm,outHeadComm); // Parse Order Header Commands
				//strOrderSubType = outHeadComm.GetProperty(&quot;ORDER#Order Sub Type&quot;);
				inHeadComm.Reset();
				inHeadComm.SetProperty(&quot;OrderId&quot;,&quot;&quot;);
				inHeadComm.AddChild(outHeadComm);
				inHeadComm.GetChild(0).SetProperty(&quot;ORDER#VF Bulk Order Flg&quot;,&quot;Y&quot;);
				inHeadComm.GetChild(0).SetProperty(&quot;ORDER#VF CarbCopy Validated&quot;,&quot;N&quot;);
				
				with(bcCarbonCopyLI) //Start With 2
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos; AND [Created Order Id] IS NULL&quot;);
					SetSortSpec(&quot;Customer Code(ASCENDING),Dealer Code(ASCENDING),Ref Order Id(ASCENDING),Billing Account Code(ASCENDING)&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();
					
					while(bCCLineItem)
					{
						strBillAccCode		= GetFieldValue(&quot;Billing Account Code&quot;);
						strCustomerCode		= GetFieldValue(&quot;Customer Code&quot;);
						strMSISDN 			= GetFieldValue(&quot;MSISDN&quot;);
						strICCID			= GetFieldValue(&quot;ICCID&quot;);
						strRefOrderId 		= GetFieldValue(&quot;Ref Order Id&quot;);
						strRefOrderItemId	= GetFieldValue(&quot;Ref Order Item Id&quot;);
						strCommands			= GetFieldValue(&quot;Commands&quot;);
						strDealerCode		= GetFieldValue(&quot;Dealer Code&quot;);
						strActionType		= GetFieldValue(&quot;VFTRCBU Action Type&quot;);
						strActionReason		= GetFieldValue(&quot;VFTRCBU Action Reason&quot;);
						strActionSubReason	= GetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;);

						strErrDesc = &quot;&quot;;
						strVPNInAttributes = false;
						strCreRootItemID = &quot;&quot;;
						strCommands=&quot;1000.Bulk Order=Y;&quot;+strCommands; //RCRISPIM: Retrofits 2015 February Minor
						
						inHeadComm.GetChild(0).SetProperty(&quot;ORDER#VF Dealer Code&quot;,strDealerCode);
						
						if(strBillAccCode==&quot;&quot; || strBillAccCode == null)
						{
							strErrDesc = strErrDesc+&quot;HATA 1:&apos;Fatura Hesabı&apos; alanı Boş.||&quot;;
						}
						if(strCustomerCode==&quot;&quot; || strCustomerCode == null)
						{
							strErrDesc = strErrDesc+&quot;Launch Error 2: &apos;Müşteri Codu&apos; alanı boş.||&quot;;
						}
						if(strRefOrderId==&quot;&quot; || strRefOrderId == null)
						{
							strErrDesc = strErrDesc+&quot;Launch Error 3: &apos;Reference Order Id&apos; alanı boş.||&quot;;
						}
						if(strDealerCode==&quot;&quot; || strDealerCode == null)
						{
							strErrDesc = strErrDesc+&quot;Launch Error 4: &apos;Satışçı Kodu&apos; alanı boş.||&quot;;
						}
						if(strRefOrderItemId==&quot;&quot; || strRefOrderItemId == null)
						{
							strErrDesc = strErrDesc+&quot;Launch Error 5: &apos;Referance Order Item Id&apos; alanı boş.||&quot;;
						}
						
						if(strErrDesc!=&quot;&quot;)
						{
							SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 499));
							SetFieldValue(&quot;Status&quot;,lovError);
							bSubErr = true;
						}
						else
						{
							var inProp = TheApplication().NewPropertySet();
							var outProp = TheApplication().NewPropertySet();
							
							var inComm = TheApplication().NewPropertySet();
							var outComm = TheApplication().NewPropertySet();
							
							inProp.SetProperty(&quot;Ref Order Id&quot;,strRefOrderId);
							inProp.SetProperty(&quot;Ref Order Item Id&quot;,strRefOrderItemId);
							inProp.SetProperty(&quot;MSISDN&quot;,strMSISDN);
							inProp.SetProperty(&quot;ICCID&quot;,strICCID);							
							inProp.SetProperty(&quot;Dealer Code&quot;,strDealerCode);
							inProp.SetProperty(&quot;VFTRCBU Action Type&quot;,strActionType);
							inProp.SetProperty(&quot;VFTRCBU Action Reason&quot;,strActionReason);
							inProp.SetProperty(&quot;VFTRCBU Action Sub Reason&quot;,strActionSubReason);

							bNewOrderHeader = false;
							
							if(strRefOrderId!=strPrevRefOrderId || strDealerCode!= strPrevDelarCode)
							{								
								strPrevRefOrderId = strRefOrderId;
								strPrevDelarCode = strDealerCode;
								bNewOrderHeader = true;
							}

							if(strPrevCustomerCode!=strCustomerCode || strPrevBillAccCode!=strBillAccCode)
							{
								inProp.SetProperty(&quot;Customer Code&quot;,strCustomerCode);
								inProp.SetProperty(&quot;Billing Account Code&quot;,strBillAccCode);
								GetCustBillAccountId(inProp,outProp); // Get Customer and Biling Account Id
								strAccountId = outProp.GetProperty(&quot;AccountId&quot;);
								strBillAccId = outProp.GetProperty(&quot;BillAccountId&quot;);
								strPriContId = outProp.GetProperty(&quot;PriContId&quot;);
								strPriAddrId = outProp.GetProperty(&quot;PriAddrId&quot;);
								strErrDesc	 = outProp.GetProperty(&quot;ErrorMsg&quot;);
								
								if(strErrDesc !=&quot;&quot;)
								{
									bSubErr = true;
								}
								
								strPrevBillAccCode=strBillAccCode;
								
								if(strPrevCustomerCode!=strCustomerCode &amp;&amp; strErrDesc ==&quot;&quot;)
								{
									strPrevCustomerCode = strCustomerCode;
									bNewOrderHeader = true;
								}
							}
							
							if(strCommands!=&quot;&quot; &amp;&amp; strCommands!=null &amp;&amp; strErrDesc == &quot;&quot;)
							{
								inComm.SetProperty(&quot;Commands&quot;,strCommands);
								inComm.SetProperty(&quot;Carbon Copy LI&quot;,GetFieldValue(&quot;Id&quot;));
								ParseCommands(inComm,outComm);
								inComm.AddChild(outComm);
								inHeadComm.AddChild(outComm);
								CheckShortNumberVPN(inComm,outComm);
								strErrDesc=outComm.GetProperty(&quot;ErrorMsg&quot;);	
								inProp.AddChild(outComm);
								
								if(strErrDesc !=&quot;&quot;)
								{
									bSubErr = true;
								}
							}
							
							inProp.SetProperty(&quot;Account Id&quot;,strAccountId);
							inProp.SetProperty(&quot;Bill Account Id&quot;,strBillAccId);
							inProp.SetProperty(&quot;PriContId&quot;,strPriContId);
							inProp.SetProperty(&quot;PriAddrId&quot;,strPriAddrId);
							inProp.SetProperty(&quot;OrderSubType&quot;,strActionType);

							if(((iLineCount%iMaxLineItems)==0 || bNewOrderHeader) &amp;&amp; strErrDesc==&quot;&quot;)
						    {
						    	
								CopyOrder(inProp,outProp); // Copy order from referace order
								strErrDesc			= outProp.GetProperty(&quot;ErrorMsg&quot;);
								strCreatedOrderId	= outProp.GetProperty(&quot;CreatedOrderId&quot;);
								if(strErrDesc == &quot;&quot; &amp;&amp; strCreatedOrderId != &quot;&quot;)
								{
									inHeadComm.SetProperty(&quot;OrderId&quot;,strCreatedOrderId);
									OperateOrderHeaderCommands(inHeadComm,outHeadComm);
									strErrDesc	= outHeadComm.GetProperty(&quot;ErrorMsg&quot;);
									
									if(strErrDesc !=&quot;&quot;)
									{
										bSubErr = true;
									}
								}
							}
							
							inProp.SetProperty(&quot;Created Order Id&quot;,strCreatedOrderId);
							inProp.SetProperty(&quot;Carbon Copy LI&quot;,GetFieldValue(&quot;Id&quot;));
							inProp.SetProperty(&quot;positionId&quot;,positionId);  //RCRISPIM: Retrofits 2015 February Minor
							if(strErrDesc==&quot;&quot; &amp;&amp; strCreatedOrderId !=&quot;&quot;)
							{
								CopyOrderItem(inProp,outProp); //Copy Order Item from Referance Order Item
								strErrDesc			= outProp.GetProperty(&quot;ErrorMsg&quot;);
								strCreRootItemID	= outProp.GetProperty(&quot;Root Order Item Id&quot;);
								
								if(strErrDesc !=&quot;&quot;)
								{
									bSubErr = true;
								}
							}
							
							if(strErrDesc!=&quot;&quot; || strCreatedOrderId ==&quot;&quot; || strCreRootItemID ==&quot;&quot;)
							{								
								SetFieldValue(&quot;Status&quot;,lovError);
								SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0,500));
								bSubErr = true;
								
								if(strVPNInAttributes == false)
								{
									ReleaseVPN(inProp,outProp);
								}
							}
							else
							{								
								SetFieldValue(&quot;Status&quot;,lovCreated);
								SetFieldValue(&quot;Error Desc&quot;,&quot;&quot;);
							}
							
							if(strCreRootItemID!=&quot;&quot; &amp;&amp; strCreRootItemID!=null)
							{
								iLineCount = iLineCount+1;
							}
							SetFieldValue(&quot;Created Order Id&quot;,strCreatedOrderId);
							SetFieldValue(&quot;Created Order Item Id&quot;,strCreRootItemID);
							
							if(bIsMNP){SetFieldValue(&quot;OrderType&quot;,&quot;MNP&quot;);}
						}
						WriteRecord();
						bCCLineItem = NextRecord();
					}
				}//End With 2
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);

				if(bSubErr)
				{
					SetFieldValue(&quot;Status&quot;,lovError);
					//SetFieldValue(&quot;Button Flag&quot;,1); HSOUSA 29.04.2015 Rollback
				}
				else
				{
					SetFieldValue(&quot;Status&quot;,lovCreated);
					SetFieldValue(&quot;Button Flag&quot;,2);
				}
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				WriteRecord();
			}
		}
	}
	catch(e)
	{
		Output.SetProperty(&quot;Error&quot;,e.toString()); //RCRISPIM: Retrofits 2015 February Minor
		bSubErr = true;
		e.toString()
	}
	finally
	{
		bcCarbonCopyLI	= null;
		bcCarbonCopyH	= null;
		boCarbonCopy	= null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="08/16/2016 01:07:09"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Call_eConfigurator"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Call_eConfigurator(Inputs,Outputs)
{
	try
	{
		var sPartNumber			= Inputs.GetProperty(&quot;PartNumber&quot;); 
		var sOrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
		var sDealerCode			= Inputs.GetProperty(&quot;DealerCode&quot;);
		
		var bsWfProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		
		var psInput    : PropertySet = TheApplication().NewPropertySet();
		var psOutput   : PropertySet = TheApplication().NewPropertySet();
		var sErrMsg =&quot;&quot;;
		
		Outputs.SetProperty(&quot;ErrMsg&quot;,&quot;&quot;);
		
		psInput.SetProperty(&quot;Object Id&quot;,Inputs.GetProperty(&quot;Active Quote Id&quot;));
		psInput.SetProperty(&quot;AssetIntegId&quot;,Inputs.GetProperty(&quot;Asset Integration Id&quot;));
		psInput.SetProperty(&quot;ProductList&quot;,sProductList);
		psInput.SetProperty(&quot;ProcessName&quot;,&quot;VF Carbon Copy eConfigurator&quot;);
		
		bsWfProcMng.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
		
		sErrMsg = psOutput.GetProperty(&quot;ExplanationMsg0&quot;);

	}
	catch(e)
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,e.toString());
	}
	finally{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,sErrMsg);
		bsWfProcMng = null;
		psInput    	= null;
		psOutput	= null;	
	}
}"
			   SEQUENCE="3"
			   UPDATED="05/17/2016 09:57:03"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CancelBulkRequest"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CancelBulkRequest(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var bcOrderH		= boCarbonCopy.GetBusComp(&quot;Order Entry - Orders&quot;);
		
		var strCCHederId = Input.GetProperty(&quot;CC Header Id&quot;);
		var bCCLineItem = false;
		
		var iLineCount = 0;
		var strErrDesc			= &quot;&quot;;
		var strCreatedOrderId	= &quot;&quot;;
		var strPrevCreatedOrderId	= &quot;&quot;;
		var strCusrrStatus = &quot;&quot;;
		//var lovSubmitError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Submit Error&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);
		var lovCompleted = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Completed&quot;);
		var lovCanceld = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Canceld&quot;);
		var bSubErr = false;
		
		with(bcCarbonCopyH)
		{	
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Status&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				with(bcCarbonCopyLI) // Start With 2
				{
					TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos; and [Status]&lt;&gt;&apos;&quot;+lovCompleted+&quot;&apos;&quot;);
					SetSortSpec(&quot;Created Order Id&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();
					while(bCCLineItem)
					{
						strCreatedOrderId	= GetFieldValue(&quot;Created Order Id&quot;);
						if(strPrevCreatedOrderId!=strCreatedOrderId)
						{
							strPrevCreatedOrderId=strCreatedOrderId;
							try
							{
								with(bcOrderH)
								{
									SetViewMode(AllView);
									ClearToQuery();
									SetSearchExpr(&quot;[Id]=&apos;&quot;+strCreatedOrderId+&quot;&apos;&quot;);
									ExecuteQuery(ForwardOnly);
									if(FirstRecord())
									{
										SetFieldValue(&quot;VF Prevent Automatic Cancellation&quot;,&quot;Y&quot;);
										WriteRecord(); 
									}
								}
								strCusrrStatus =lovCanceld;
								strErrDesc = &quot;&quot;;								
							}
							catch(e)
							{
								strErrDesc = e.toString();
								bSubErr = true;
								strCusrrStatus =lovError;
							}							
						}
							
						SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 499));
						SetFieldValue(&quot;Status&quot;,strCusrrStatus);
						WriteRecord();
						bCCLineItem = NextRecord();
					}
				}// End With 2
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				if(bSubErr)
				{
					SetFieldValue(&quot;Status&quot;,lovError);
				}
				else{
					SetFieldValue(&quot;Status&quot;,lovCanceld);
				}
				WriteRecord();
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
			}
		}
	}
	catch(e)
	{
		strErrDesc = e.toString();
	}
	finally
	{
		bcOrderH		= null;
		bcCarbonCopyLI	= null;
		bcCarbonCopyH	= null;
		boCarbonCopy	= null;
	}

}"
			   SEQUENCE="4"
			   UPDATED="08/09/2015 23:43:13"
			   UPDATED_BY="SADMIN"
			   CREATED="03/20/2014 11:13:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CancelOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CancelOrder(sOrderId)
{
	try
	{
		var boOrder      : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);
		var bcOrder      : BusComp     = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var bcItem       : BusComp     = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var bsManager    : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn  : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();

		var sOrderStatus     = &quot;&quot;;
		var sOrderOMId       = &quot;&quot;;
		var sItemSearchExpr  = &quot;&quot;;
		var sStatusCancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Status LIC&quot;);
		bcOrder.ActivateField(&quot;TELCO OM Order Public Id&quot;);
		bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sOrderId + &quot;&apos;&quot;);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		sOrderStatus = bcOrder.GetFieldValue(&quot;Status LIC&quot;);
		sOrderOMId   = bcOrder.GetFieldValue(&quot;TELCO OM Order Public Id&quot;);

		if (sOrderStatus == &quot;Cancelled&quot; || sOrderStatus == &quot;Submitting&quot; ||
			(sOrderOMId != null &amp;&amp; sOrderOMId != &quot;&quot;))
		{
			return;
		}

		sItemSearchExpr = &quot;[Id]=[Root Order Item Id] AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled +
						  &quot;&apos; AND ([VF Product Group] IS NULL OR ([VF Product Group]&lt;&gt;&apos;CHARGE&apos;&quot; +
						  &quot; AND [VF Product Group]&lt;&gt;&apos;CAMP PROMO&apos; AND [VF Product Group]&lt;&gt;&apos;CAMP CONTAINER&apos;))&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
		{
			return;
		}

		psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Cancel Order Interface WF&quot;);
		psManagerIn.SetProperty(&quot;Object Id&quot;,   sOrderId);
		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
	}
	finally
	{
		psManagerOut = null;
		psManagerIn  = null;
		bsManager    = null;
		bcItem       = null;
		bcOrder      = null;
		boOrder      = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="02/05/2016 08:43:27"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CancelRootItem"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CancelRootItem(sRootItemId)
{
	try
	{
		var boItem       : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem       : BusComp     = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var bsManager    : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn  : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();
		var psCancelList : PropertySet = TheApplication().NewPropertySet();

		var sOrderId         = &quot;&quot;;
		var sPromInstId      = &quot;&quot;;
		var sOldPromInstId   = &quot;&quot;;
		var sSearchExpr      = &quot;&quot;;
		var sPromoSearchExpr = &quot;&quot;;
		var sItemId          = &quot;&quot;;
		var sStatusCancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);

		if (sRootItemId == null || sRootItemId == &quot;&quot;)
		{
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Order Header Id&quot;);
		bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcItem.ActivateField(&quot;VF Old Prod Prom Instance Id&quot;);
		bcItem.SetSearchExpr(&quot;[Id]=&apos;&quot; + sRootItemId + &quot;&apos;&quot;);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sOrderId       = bcItem.GetFieldValue(&quot;Order Header Id&quot;);
		sPromInstId    = bcItem.GetFieldValue(&quot;Prod Prom Instance Id&quot;);
		sOldPromInstId = bcItem.GetFieldValue(&quot;VF Old Prod Prom Instance Id&quot;);

		if ((sPromInstId != null &amp;&amp; sPromInstId != &quot;&quot;) ||
			(sOldPromInstId != null &amp;&amp; sOldPromInstId != &quot;&quot;))
		{
			sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Id]=[Root Order Item Id]&quot; +
						  &quot; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled + &quot;&apos; AND &quot;;

			if (sPromInstId != null &amp;&amp; sPromInstId != &quot;&quot;)
			{
				sPromoSearchExpr = &quot;[Prod Prom Instance Id]=&apos;&quot; + sPromInstId +
								   &quot;&apos; OR [Asset Integration Id]=&apos;&quot; + sPromInstId + &quot;&apos;&quot;;
			}

			if (sOldPromInstId != null &amp;&amp; sOldPromInstId != &quot;&quot;)
			{
				if (sPromoSearchExpr != null &amp;&amp; sPromoSearchExpr != &quot;&quot;)
					sPromoSearchExpr = sPromoSearchExpr + &quot; OR &quot;;

				sPromoSearchExpr = sPromoSearchExpr +
								   &quot;[VF Old Prod Prom Instance Id]=&apos;&quot; + sOldPromInstId +
								   &quot;&apos; OR [Prod Prom Instance Id]=&apos;&quot; + sOldPromInstId +
								   &quot;&apos; OR [Asset Integration Id]=&apos;&quot; + sOldPromInstId + &quot;&apos;&quot;;
			}

			sSearchExpr = sSearchExpr + &quot;(&quot; + sPromoSearchExpr + &quot;)&quot;;

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.SetSearchExpr(sSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);

			if (!bcItem.FirstRecord())
			{
				return;
			}
		}
	
		do
		{
			sItemId = bcItem.GetFieldValue(&quot;Id&quot;);

			psCancelList.SetProperty(sItemId, sItemId);
		}
		while (bcItem.NextRecord());

		sItemId = psCancelList.GetFirstProperty();

		while (sItemId != null &amp;&amp; sItemId != &quot;&quot;)
		{
			psManagerIn.SetProperty(&quot;ProcessName&quot;,          &quot;TELCO Update Order Item Status&quot;);
			psManagerIn.SetProperty(&quot;Object Id&quot;,            sOrderId);
			psManagerIn.SetProperty(&quot;TELCORootOrderItemId&quot;, sItemId);
			psManagerIn.SetProperty(&quot;NewStatus&quot;,            &quot;Cancelled&quot;);
			bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

			sItemId = psCancelList.GetNextProperty();
		}
	}
	finally
	{
		psCancelList = null;
		psManagerOut = null;
		psManagerIn  = null;
		bsManager    = null;
		bcItem       = null;
		boItem       = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="12/28/2015 12:44:09"
			   UPDATED_BY="SADMIN"
			   CREATED="12/28/2015 12:44:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCompatibility"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCompatibility(Input,Output) //Created for DEF-4670
{
	try{
		var strResult = &quot;OK&quot;;
		var strMessageCategory = &quot;&quot;;
		var ProdBO  : BusObject ;
		var ProdBC  : BusComp ;
		var boMCADOrder			= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcMCADOrderLI		= boMCADOrder.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		var strReqProd = &quot;&quot;; 
		var strReqProdName = &quot;&quot;;
		var strRootOrderItemId	= Input.GetProperty(&quot;Root Order Item Id&quot;);
	//	var sysdate =  new Date();
		var strSysdate = new Date();
		var bNextProd = &quot;&quot;;
		var	bNextLI = true;
		//ProdBO  =  TheApplication().GetBusObject(&quot;ISS Promotion&quot;);
		ProdBO  =  TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
		ProdBC  =  ProdBO.GetBusComp(&quot;Product Compatibility - Object&quot;);
			
			with(ProdBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Rel Product] = &apos;VF_VPN&apos; AND [Type] = &apos;Requires&apos; AND [Effective End Date] is null OR [Effective End Date] &gt;= TimeStamp()&quot;);
				ActivateField(&quot;Product Id&quot;);
				ActivateField(&quot;Product&quot;);
				ExecuteQuery(ForwardOnly);
				bNextProd=FirstRecord();
				while(bNextProd &amp;&amp; bNextLI)
							{
								strReqProd=GetFieldValue(&quot;Product Id&quot;);
								strReqProdName=GetFieldValue(&quot;Product&quot;);
								
								with(bcMCADOrderLI)
									{
										SetViewMode(AllView);
										ClearToQuery();
										ActivateField(&quot;Product Id&quot;);
										ActivateField(&quot;Eligibility Reason&quot;);
										ActivateField(&quot;Eligibility Status&quot;);
										SetSearchExpr(&quot;[Root Order Item Id]=&apos;&quot;+strRootOrderItemId+&quot;&apos;&quot;);	
										ExecuteQuery(ForwardOnly);
										bNextLI = FirstRecord();
											while(bNextLI) 
											{
												if(strReqProd==GetFieldValue(&quot;Product Id&quot;))
												{
													SetFieldValue(&quot;Eligibility Reason&quot;,strReqProdName+&quot; requires VPN&quot;);
													SetFieldValue(&quot;Eligibility Status&quot;,&quot;N&quot;);
													WriteRecord();
													bNextLI=false;
												}
												else
													bNextLI = NextRecord();
												
											}
									
									}
									
								bNextProd=NextRecord();
							}
			}
			

	}
	catch(e)
	{
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Error on Method CheckCompatibility &quot;+e.toString());
	}
	finally{
	
		ProdBC = null;
		ProdBO = null;
		bcMCADOrderLI =null;
		boMCADOrder	= null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="02/05/2016 08:43:27"
			   UPDATED_BY="SADMIN"
			   CREATED="09/21/2015 13:37:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckForTransfer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckForTransfer(strHeadOrderId)
{
	try
		{	
			var bsGenOperations:Service;
			var bcOrder:BusComp;
			var boOrderEntry:BusObject;
			var psOutputs:PropertySet;
			var psInputs:PropertySet;
			var bsOrderPortal:Service;
			var bcOrderManagement:BusComp;
			var bcOrderEntryParent:BusComp;
			var boOrderManagement:BusObject;
			var bcOrderLineItemManagement:BusComp;
			var boOrderMan:BusObject;
				
			var strStatusCancelled = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
			var strTransSame = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;127&quot;);
			var strTransNew = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;128&quot;);
		
			var strTransSameDis = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;125&quot;);
			var strTransNewDis = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;124&quot;);
		 	
		 	var boMCADOrder	= TheApplication().GetBusObject(&quot;MACD Performance Order&quot;);
			var bcOrderH		= boMCADOrder.GetBusComp(&quot;MACD Order Entry - Orders&quot;);
			
			var strOrderSubType = &quot;&quot;;
			var strOrderNum = &quot;&quot;;

			bcOrderH.SetViewMode(AllView);
			bcOrderH.ActivateField(&quot;Status&quot;);
			bcOrderH.ActivateField(&quot;Order Sub Type&quot;);
			bcOrderH.ActivateField(&quot;Order Number&quot;);
			bcOrderH.ClearToQuery();
			bcOrderH.SetSearchExpr(&quot;[Id]=&apos;&quot;+strCreatedOrderId+&quot;&apos;&quot;);
			bcOrderH.ExecuteQuery(ForwardOnly);
			if(bcOrderH.FirstRecord())
			{
				strOrderNum	=bcOrderH.GetFieldValue(&quot;Order Number&quot;);
				strOrderSubType=bcOrderH.GetFieldValue(&quot;Order Sub Type&quot;);
			}
				
			
			boOrderMan = TheApplication ().GetBusObject (&quot;X Order Entry - Orders (Customer Portal)&quot;);
			bcOrderLineItemManagement = boOrderMan.GetBusComp (&quot;X Order Entry - Orders (Customer Portal)X Order Entry - Orders (Customer Portal)&quot;);
			bcOrderLineItemManagement.SetViewMode(AllView);
			bcOrderLineItemManagement.ClearToQuery();
			bcOrderLineItemManagement.SetSearchSpec(&quot;Id&quot;, strHeadOrderId);
			bcOrderLineItemManagement.ExecuteQuery(ForwardOnly);
					
			var recordExistsOnLineItems = bcOrderLineItemManagement.FirstRecord();
				
			if(recordExistsOnLineItems )
			{
				var strParentOrderId    =	bcOrderLineItemManagement.GetFieldValue (&quot;Parent Order Id&quot;);
				var strOrderId       = bcOrderLineItemManagement.GetFieldValue (&quot;Id&quot;);
				
				var istransfer = false;
			
				if (strOrderSubType==strTransSame || strOrderSubType==strTransNew || strOrderSubType==strTransSameDis || strOrderSubType==strTransNewDis) 
				{
					istransfer = true;
					boOrderManagement  = TheApplication ().GetBusObject (&quot;X Order Entry&quot;);
					bcOrderEntryParent = boOrderManagement.GetBusComp (&quot;HP Submit - Order Entry - Orders&quot;);
					bcOrderEntryParent.SetViewMode(AllView);
					bcOrderEntryParent.ClearToQuery();
					bcOrderEntryParent.ActivateField(&quot;Status&quot;);
					bcOrderEntryParent.SetSearchSpec(&quot;Order Number&quot;, strOrderNum);
					
					bcOrderEntryParent.ExecuteQuery(ForwardOnly);
					var recordExist = bcOrderEntryParent.FirstRecord();
					var order = null;
					var count = 0;
					var status = null;
					while(recordExist)
					{
						order  = bcOrderEntryParent.GetFieldValue(&quot;Id&quot;);
						status = bcOrderEntryParent.GetFieldValue(&quot;Status&quot;);
						ptInput.SetProperty(&quot;Order&quot;+count,order);
						ptInput.SetProperty(&quot;Status&quot;+count,status);
						recordExist = bcOrderEntryParent.NextRecord();
						count = count+1;
					}
				}
			}
	 }	
		catch(e)
		{
			//HSOUSA 30/04 - Inactive and throw exception
			//TheApplication().Trace (&quot;SIS OM Order Entry - Orders List Applet - Tiny - Poste :: CheckForTransfer :: Error :: &quot;+e.toString ());
			throw (e);
		}
		finally
		{
		strStatusCancelled        = null;
		bcOrderEntryParent        = null;
		boOrderManagement	= null;
		bcOrderLineItemManagement	= null;
		boOrderMan	= null;
		strHeadOrderId = null;
		bcOrderH = null;
		boMCADOrder = null;
		}
		return istransfer;	
}"
			   SEQUENCE="8"
			   UPDATED="02/20/2016 15:24:59"
			   UPDATED_BY="SADMIN"
			   CREATED="02/01/2016 09:19:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLineStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLineStatus(Input)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCc_DistLI		= boCarbonCopy.GetBusComp(&quot;VF CC List Items Distinct Status&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		
		var boOrderHP		= TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcOrderHead		= boOrderHP.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);

		var strCCHederId = Input.GetProperty(&quot;CC Header Id&quot;);
		var strOrderSubType = Input.GetProperty(&quot;OrderSubType&quot;);
		var strLineOrderType= Input.GetProperty(&quot;OrderType&quot;); 
		
		// Jira VFTRCBU-20985
		var strHeaderOrderType = Input.GetProperty(&quot;CC HeaderOrderType&quot;); 
	
		var bCCLineItem = false;
		var strErrDesc			= &quot;&quot;;
		
		var strCusrrStatus = &quot;&quot;;
		var strStatusSeq = 100;
		var strCreatedOrderId = &quot;&quot;;
		
		var bBtnFlg = &quot;&quot;;
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);
		var pStatus = TheApplication().NewPropertySet();
		
		
		with(bcCarbonCopyH)
		{	
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);	
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Commands&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				with(bcCc_DistLI) // Start With 2
				{	
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Status&quot;);
					ActivateField(&quot;StatusSeq&quot;);
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
					ExecuteQuery(ForwardBackward);
					bCCLineItem = FirstRecord();
					while(bCCLineItem)
					{	
						if(ToNumber(strStatusSeq)&gt;ToNumber(GetFieldValue(&quot;StatusSeq&quot;)))
						{
							strStatusSeq = GetFieldValue(&quot;StatusSeq&quot;);
							strCusrrStatus	= GetFieldValue(&quot;Status&quot;);
							
						}
						
						bCCLineItem		= NextRecord();
					}
				}// End With 2
				
				SetFieldValue(&quot;Status&quot;,strCusrrStatus);
									
				if(strStatusSeq==&quot;2&quot;)
				{				
					SetFieldValue(&quot;Button Flag&quot;,1);
					
				}
				else if(strStatusSeq==&quot;3&quot;)
				{	
					if((strOrderSubType == &quot;Suspend - Credit&quot; || strOrderSubType == &quot;Suspend - Fraud&quot; || strOrderSubType == &quot;Suspend - Voluntary&quot; || strOrderSubType == &quot;Suspend - Missing Document&quot; || strOrderSubType == &quot;Suspend Order&quot;
					 || strOrderSubType == &quot;Resume - Credit&quot; || strOrderSubType == &quot;Resume - Fraud&quot; || strOrderSubType == &quot;Resume - Voluntary&quot; || strOrderSubType == &quot;Resume - Missing Document&quot; || strOrderSubType == &quot;Resume Order&quot;) 
					 || strHeaderOrderType == &quot;Suspend&quot; || strHeaderOrderType == &quot;Resume&quot; || strHeaderOrderType == &quot;Delete&quot;) // VFTRCBU-20985 //DEF-11261
					{
						SetFieldValue(&quot;Button Flag&quot;,4);	
					}
					else
					{
						SetFieldValue(&quot;Button Flag&quot;,2);
					}
				}
				else if(strStatusSeq==&quot;4&quot;)
				{					
					with(bcCarbonCopyLI) // Start With 2
					{
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
						SetSortSpec(&quot;Created Order Id&quot;);
						ExecuteQuery(ForwardOnly);
						bCCLineItem = FirstRecord();
						while(bCCLineItem)
						{
							if(strCreatedOrderId!=GetFieldValue(&quot;Created Order Id&quot;) &amp;&amp; GetFieldValue(&quot;Created Order Id&quot;)!=&quot;&quot;)
							{
								strCreatedOrderId=GetFieldValue(&quot;Created Order Id&quot;);
								
								with(bcOrderHead)
								{
									SetViewMode(AllView);
									ClearToQuery();
									ActivateField(&quot;VF CarbCopy Validated&quot;);
									SetSearchExpr(&quot;[Id] =&apos;&quot;+strCreatedOrderId+&quot;&apos;&quot;);
									ExecuteQuery(ForwardOnly);
									if(FirstRecord())
									{	
										SetFieldValue(&quot;VF CarbCopy Validated&quot;,&quot;Y&quot;);
										WriteRecord();
									}
								}
							}
							bCCLineItem		= NextRecord();
						}
					}
					if(strLineOrderType!=&quot;MNP&quot;)
					{
						SetFieldValue(&quot;Button Flag&quot;,3);
					}
				}
				WriteRecord();
			}
		}
	}
	catch(e)
	{
		strErrDesc = e.toString();
	}
	finally
	{	
		bcOrderHead		= null;
		bcCc_DistLI		= null;
		bcCarbonCopyLI	= null;
		bcCarbonCopyH	= null;
		boCarbonCopy	= null;
		boOrderHP		= null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="08/18/2016 01:10:58"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:37"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMPBX"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMPBX(Input,Output)
{
	try{
		var strResult = &quot;OK&quot;;
		var strMessageCategory = &quot;&quot;;
		var OrderBO  : BusObject ;
		var AssetBC  : BusComp ;

		var strActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var ownerAccountId = Input.GetProperty(&quot;AccountId&quot;);
		var prodPartNum = Input.GetProperty(&quot;PartNum&quot;);
		var AssetIntegrationId = Input.GetProperty(&quot;IntegrationId&quot;);
		var RootAsset	= Input.GetProperty(&quot;RootAssetId&quot;);
		var assetId = Input.GetProperty(&quot;RootAssetId&quot;);
		var action = Input.GetProperty(&quot;OrderSubType&quot;);	

		if(action==&quot;Deactivate - Transfer New&quot;) 
		{
		  	OrderBO  =  TheApplication().GetBusObject(&quot;Asset Management&quot;);
			AssetBC  =  OrderBO.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
			
			with(AssetBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Root Asset Id] = &apos;&quot;+assetId+&quot;&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos; AND [Product Part Number] = &apos;1601&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
				{
					Output.SetProperty(&quot;ErrorMsg&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_REQ_666_2&quot;));
				}
			}
			
		} 
		if(action==&quot;Deactivate - Transfer Same&quot; || action==&quot;Deactivate - Transfer New&quot; || action==&quot;Modify MSISDN&quot; || action==&quot;Suspend - Voluntary&quot; || action==&quot;Suspend - Credit&quot; || action==&quot;Suspend - Fraud&quot; || action==&quot;Suspend - Missing Document&quot; || action==&quot;Deactivate - Voluntary&quot; || action==&quot;Deactivate - Credit&quot; || action==&quot;Deactivate - Fraud&quot; || action==&quot;Deactivate-Backward Migration&quot;)
		{
			if(prodPartNum == &quot;1600&quot; || prodPartNum == &quot;1000&quot;)
			{
				if(prodPartNum == &quot;1600&quot;)
				{
					strResult = CheckMPBX_WF(ownerAccountId, &quot;1601&quot;,AssetIntegrationId,RootAsset);
				}
				else
				{
					strResult = CheckMPBX_WF(ownerAccountId, &quot;9080&quot;,AssetIntegrationId, RootAsset);
				}
				if(strResult==&quot;KO&quot;)	
				{
					if(prodPartNum == &quot;1600&quot;)
					{
						Output.SetProperty(&quot;ErrorMsg&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_REQ_666_4&quot;));
					}
					else
					{
						Output.SetProperty(&quot;ErrorMsg&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_REQ_666_3&quot;));
					}
				}
			}
		}
	}
	catch(e)
	{
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Error on Method CheckMPBX &quot;+e.toString());
	}
	finally{
	
		AssetBC = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="07/28/2016 16:32:29"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMPBX_Del"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMPBX_Del(Inputs, Outputs)
{
	try	
	{
		var strOrderId = Inputs.GetProperty(&quot;Order Id&quot;);
		var strCustomerId = Inputs.GetProperty(&quot;Customer Id&quot;);
	
		var strResult = &quot;OK&quot;;
		var strActive = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var DelActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);

		var AssetBO  : BusObject =  TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var AssetBC  : BusComp   =  AssetBO.GetBusComp(&quot;HP Asset Service&quot;);
		var AssetBCXA  : BusComp =  AssetBO.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);
		
		var boMCADOrder  : BusObject  =  TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcMCADOrderLI  : BusComp  =  boMCADOrder.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		var bcMCADOrderXA  : BusComp  =  boMCADOrder.GetBusComp(&quot;VF Carbon Copy Order Item XA&quot;);
		
		var strServicePartNum = &quot;1601&quot;;
		var strAccessPartNum = &quot;9080&quot;;
		var MPSer;
		var Par_Xa;
		var XARecord;
		var AccessNumber;
		var AttrName;
		
		var AccessNumMPBX  :PropertySet	= TheApplication().NewPropertySet();

		with(bcMCADOrderLI)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Part Number] = &apos;&quot;+strAccessPartNum+&quot;&apos; AND [Action Code] = &apos;&quot;+DelActionCode+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			MPSer = FirstRecord();
			while (MPSer)
			{
				Par_Xa = GetFieldValue(&quot;Id&quot;);
				with(bcMCADOrderXA)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Name&quot;);
					ActivateField(&quot;Value&quot;);
					SetSearchExpr(&quot;[Object Id] = &apos;&quot;+Par_Xa+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					XARecord = FirstRecord();				
					while (XARecord)
					{
						AttrName = bcMCADOrderXA.GetFieldValue(&quot;Name&quot;);
						if (AttrName ==&quot;Access Number&quot;)
						{
							AccessNumber =bcMCADOrderXA.GetFieldValue(&quot;Value&quot;);
							AccessNumMPBX.SetProperty(AccessNumber,AccessNumber);
						}
						XARecord = bcMCADOrderXA.NextRecord();
					}
				}
				MPSer = bcMCADOrderLI.NextRecord();
			}
		}
		
		with(AssetBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Status] = &apos;&quot;+strActive+&quot;&apos; AND [Product Part Number] = &apos;&quot;+strServicePartNum+&quot;&apos; AND [Owner Account Id] = &apos;&quot;+strCustomerId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			MPSer = FirstRecord();
			while (MPSer)
			{
				Par_Xa = GetFieldValue(&quot;Id&quot;);
				with(AssetBCXA)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Name&quot;);
					ActivateField(&quot;Value&quot;);
					SetSearchSpec(&quot;Object Id&quot;,Par_Xa);
					ExecuteQuery(ForwardOnly);
					var MPSerXa =FirstRecord();
					while (MPSerXa)
					{
						AttrName =GetFieldValue(&quot;Name&quot;);
						if (AttrName ==&quot;Access Number&quot;)
							AccessNumber = AssetBCXA.GetFieldValue(&quot;Value&quot;);
						if (AccessNumber ==  AccessNumMPBX.GetProperty(AccessNumber))
							strResult = &quot;KO&quot;;
						MPSerXa = AssetBCXA.NextRecord();
					}
				}
				MPSer = AssetBC.NextRecord();
			}
		}
		Outputs.SetProperty(&quot;OutputMsg&quot;,strResult);
	}
	finally
	{
		AssetBO = null;
		AssetBC = null;
		AssetBCXA = null;
		boMCADOrder = null;
		bcMCADOrderLI = null;
		bcMCADOrderXA = null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="07/28/2016 16:32:29"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMPBX_WF"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMPBX_WF(ownerAccountId, strPartNumber,IntegId,RootAsset)
{
	try	
	{
		var strResult = &quot;OK&quot;;
		var sIntegrationId = &quot;&quot;;
		var strActive = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);

		var OrderBO  : BusObject    =  TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var AssetBC  : BusComp  =  OrderBO.GetBusComp(&quot;HP Asset Service&quot;);
		var AssetBCXA  : BusComp  =  OrderBO.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);
		var AssetLineBC  : BusComp;

		var AccessNumMPBX  :PropertySet	= TheApplication().NewPropertySet();

		if  (strPartNumber==&quot;1601&quot;)
		{
			with(AssetBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Product Part Number&quot;);
				SetSearchSpec(&quot;Root Asset Id&quot;,RootAsset);
				SetSearchSpec(&quot;Status&quot;,strActive);
				SetSearchSpec(&quot;Owner Account Id&quot;,ownerAccountId);
				ExecuteQuery(ForwardOnly);	
				var RootRecord = FirstRecord();
				while (RootRecord)
				{	
					var part_num = GetFieldValue(&quot;Product Part Number&quot;);
					var Par_Xa = GetFieldValue(&quot;Id&quot;);
					if (part_num ==&quot;9080&quot;)
					{
						with(AssetBCXA)
						{
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;Name&quot;);
							ActivateField(&quot;Value&quot;);
							SetSearchExpr(&quot;[Object Id] = &apos;&quot;+Par_Xa+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							var XARecord = FirstRecord();
							while (XARecord)
							{
								var Access = AssetBCXA.GetFieldValue(&quot;Name&quot;);
								if (Access ==&quot;Access Number&quot;)
								{
									var AccessNumber =AssetBCXA.GetFieldValue(&quot;Value&quot;);
									AccessNumMPBX.SetProperty(AccessNumber,AccessNumber);
								}
								XARecord = NextRecord();
							}
						}
					}
					RootRecord = AssetBC.NextRecord();
				}

			}	
			with(AssetBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Status] = &apos;&quot;+strActive+&quot;&apos; AND [Product Part Number] = &apos;&quot;+strPartNumber+&quot;&apos; AND [Owner Account Id] = &apos;&quot;+ownerAccountId+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				var MPSer = FirstRecord();
				while (MPSer)
				{
					var IdXa = GetFieldValue(&quot;Id&quot;);
					with(AssetBCXA)
					{
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Name&quot;);
						ActivateField(&quot;Value&quot;);
						SetSearchSpec(&quot;Object Id&quot;,IdXa);
						ExecuteQuery(ForwardOnly);
						var MPSerXa =FirstRecord();
						while (MPSerXa)
						{
							var AttrName =GetFieldValue(&quot;Name&quot;);
							if (AttrName ==&quot;Access Number&quot;)
							var AccessNumberServ = AssetBCXA.GetFieldValue(&quot;Value&quot;);
							if (AccessNumberServ ==  AccessNumMPBX.GetProperty(AccessNumberServ))
							{
								strResult = &quot;KO&quot;;
							}
							MPSerXa = NextRecord();
						}
					}
					MPSer = NextRecord();
				}
			}
		}
		else
		{ // NDC TLGA-4892 end
			with(AssetBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[VF Member Asset Id] = &apos;&quot;+IntegId+&quot;&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos; AND [Product Part Number] = &apos;&quot;+strPartNumber+&quot;&apos; AND [Owner Account Id] = &apos;&quot;+ownerAccountId+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
				{
					strResult = &quot;KO&quot;;
				}
			}
		}

		return strResult;
	}
	finally
	{
		AssetBC = null;
		AssetBCXA = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="07/28/2016 16:32:29"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckModifyOption"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckModifyOption(Input,Output)
{
	try{
			var strResult = &quot;OK&quot;;
			var CXParamBO  : BusObject ;
			var CXParameterBC  : BusComp ;
	
			var strActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
			var prodPartNum = Input.GetProperty(&quot;PartNum&quot;);
			var action = Input.GetProperty(&quot;OrderSubType&quot;);	
			if(action==&quot;Suspend - Voluntary&quot;)
			{
				action=&quot;Suspend-Voluntary&quot;;
			}
			var actionTL =TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ASSET_POST_SELL_ACT&quot;, action);
	
				CXParamBO  =  TheApplication().GetBusObject(&quot;VF EMT Parameter (Simple)&quot;);
				CXParameterBC  =  CXParamBO.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
				
				with(CXParameterBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Function] = &apos;ModifyOptions&apos; AND [Name] = &apos;&quot;+action+&quot;&apos; AND [Condition1] = &apos;&quot;+prodPartNum+&quot;&apos; AND [Condition2] = &apos;Active&apos;&quot;)
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
					{
						strResult = &quot;OK&quot;;
					}
					else
					{
						Output.SetProperty(&quot;ErrorMsg&quot;,&quot;&apos;&quot;+actionTL+&quot;&apos; işlemi &apos;&quot;+prodPartNum+&quot;&apos; numaralı ürün için geçerli değildir.&quot; );
						//The action is not valid for that related product
					}
				}
			
			}	
	catch(e)
	{
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Error on Method CheckModifyOption &quot;+e.toString());
	}
	finally{
	
		CXParameterBC = null;
		CXParamBO = null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="07/28/2016 16:32:29"
			   UPDATED_BY="SADMIN"
			   CREATED="08/02/2015 21:18:45"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMsisdnOnAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMsisdnOnAsset(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcAsset	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Asset&quot;);
		
		var strCustomerCode = Input.GetProperty(&quot;Customer Code&quot;);
		var strBillAccCode  = Input.GetProperty(&quot;Billing Account Code&quot;);
		var strMSISDN		= Input.GetProperty(&quot;MSISDN&quot;);
		var strRootAssetId	= Input.GetProperty(&quot;RootAssetId&quot;);
		var strInactive		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;); 
		
		with(bcAsset)
		{
			
			SetViewMode(AllView);
			ActivateField(&quot;Owner Account Id&quot;);
			ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;Service Account Id&quot;);
			ActivateField(&quot;Compound Product Number&quot;);
			ActivateField(&quot;ToDay&quot;);
			ActivateField(&quot;Integration Id&quot;);
			ActivateField(&quot;Root Asset Id&quot;);
			ActivateField(&quot;Old Group Reason LIC&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Price List Id&quot;);
			ActivateField(&quot;VFTRCBU Prod Prom Id&quot;); // HSOUSA - Added for Handset Campaings
			ClearToQuery();
			if(strRootAssetId!=&quot;&quot; &amp;&amp; strRootAssetId!=null)
			{
				SetSearchExpr(&quot;[Id]=&apos;&quot;+strRootAssetId+&quot;&apos; AND [Owner Account Code] = &apos;&quot;+strCustomerCode+&quot;&apos; AND [Billing Account Code]=&apos;&quot;+strBillAccCode+&quot;&apos; AND [Status]&lt;&gt;&apos;&quot;+strInactive+&quot;&apos;&quot;);
			}
			else
			{
				SetSearchExpr(&quot;[Id]=[Root Asset Id] AND [Owner Account Code] = &apos;&quot;+strCustomerCode+&quot;&apos; AND [Billing Account Code]=&apos;&quot;+strBillAccCode+&quot;&apos; AND [Status]&lt;&gt;&apos;&quot;+strInactive+&quot;&apos; AND [Serial Number]=&apos;&quot;+strMSISDN+&quot;&apos;&quot;);
			}
			ExecuteQuery(ForwardOnly);
		
			if(FirstRecord())
			{
				Output.SetProperty(&quot;AccountId&quot;,GetFieldValue(&quot;Owner Account Id&quot;));
				Output.SetProperty(&quot;BillAccountId&quot;,GetFieldValue(&quot;Billing Account Id&quot;));
				Output.SetProperty(&quot;ServiceAccountId&quot;,GetFieldValue(&quot;Service Account Id&quot;));
				Output.SetProperty(&quot;CompoundProductNumber&quot;,GetFieldValue(&quot;Compound Product Number&quot;));
				Output.SetProperty(&quot;ToDay&quot;,GetFieldValue(&quot;ToDay&quot;));
				Output.SetProperty(&quot;IntegrationId&quot;,GetFieldValue(&quot;Integration Id&quot;));
				Output.SetProperty(&quot;RootAssetId&quot;,GetFieldValue(&quot;Root Asset Id&quot;));
				Output.SetProperty(&quot;OldGroupReasonLIC&quot;,GetFieldValue(&quot;Old Group Reason LIC&quot;));
				Output.SetProperty(&quot;PartNum&quot;,GetFieldValue(&quot;Part Number&quot;));
				Output.SetProperty(&quot;Price List Id&quot;,GetFieldValue(&quot;Price List Id&quot;));
				Output.SetProperty(&quot;VFTRCBU Prod Prom Id&quot;,GetFieldValue(&quot;VFTRCBU Prod Prom Id&quot;)); // HSOUSA - Added for Handset Campaings
				
				Output.SetProperty(&quot;OrderSubType&quot;,Input.GetProperty(&quot;Action Type&quot;));
				var pOutOutput = TheApplication().NewPropertySet();
				CheckMPBX(Output,pOutOutput);
				if(Input.GetProperty(&quot;OrderSubType&quot;)==&quot;Suspend - Voluntary&quot;)//DEF-3817 //VFTR Retrofits | TiagoRocha
				{
					CheckModifyOption(Output,pOutOutput);
				}
				Output.SetProperty(&quot;ErrorMsg&quot;,pOutOutput.GetProperty(&quot;ErrorMsg&quot;));
			}
			else
			{
				if(strRootAssetId!=&quot;&quot; &amp;&amp; strRootAssetId!=null)
				{
					Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata CheckMsisdnOnAsset: Müşteri Kodu &quot;+strCustomerCode+&quot;,Fatura Hesabı &quot;+strBillAccCode+&quot;, Varlık No &quot;+strRootAssetId+&quot; olan Asset Bulunamadı.&quot;);
				}
				else
				{
					Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata CheckMsisdnOnAsset: Müşteri Kodu &quot;+strCustomerCode+&quot;,Fatura Hesabı &quot;+strBillAccCode+&quot;,GSM No &quot;+strMSISDN+&quot; olan Asset Bulunamadı.&quot;);
				}

			}
		}
	}
	catch(e)
	{
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata CheckMsisdnOnAsset:&quot;+e.toString());
	}
	finally
	{
		bcAsset		= null;
		boCarbonCopy= null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="02/20/2016 15:24:59"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckProdInInstance"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckProdInInstance(Inputs,Outputs)
{
	try{
		var strProductId = Inputs.GetProperty(&quot;ProductId&quot;);
		var strNestedCall = Inputs.GetProperty(&quot;NestedCall&quot;);
		var temp = &quot;&quot;;
		var sActionCode = &quot;&quot;; //HSOUSA Added 14.05.2015
		var psIn = TheApplication().NewPropertySet();
		var psOut = TheApplication().NewPropertySet();
		Outputs.SetProperty(&quot;IntegrationId&quot;,&quot;&quot;);
		if(strNestedCall ==&quot;Y&quot;)
		{
			temp = Inputs.Copy();
		}
		else
		{
			temp = Inputs.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
		}
			
		//HSOUSA 14.05.2015 - Fix
		if (temp.PropertyExists(&quot;Action Code&quot;))
		{
			sActionCode = GetLICfromLOV(&quot;DELTA_ACTION_CODE&quot;, temp.GetProperty(&quot;Action Code&quot;)); 	
		}
		
		//if(temp.GetType() == &quot;Line Item&quot; &amp;&amp; temp.GetProperty(&quot;Product Id&quot;) ==strProductId &amp;&amp; (temp.GetProperty(&quot;Action Code&quot;) == &quot;Add&quot; || temp.GetProperty(&quot;Action Code&quot;) == &quot;Existing&quot;)
		if(temp.GetType() == &quot;Line Item&quot; &amp;&amp; temp.GetProperty(&quot;Product Id&quot;) ==strProductId &amp;&amp; (sActionCode == &quot;New&quot; || sActionCode == &quot;Existing&quot; || sActionCode == &quot;Modified&quot;))
		{
			Outputs.SetProperty(&quot;IntegrationId&quot;,temp.GetProperty(&quot;Integration Id&quot;));
		}
		else
		{
			for (var i = 0; i &lt; temp.GetChildCount(); i++)
			{
				if (temp.GetChild(i).GetType() == &quot;Line Item&quot;)
				{

					psIn=temp.GetChild(i);
					psIn.SetProperty(&quot;ProductId&quot;,strProductId);
					psIn.SetProperty(&quot;NestedCall&quot;,&quot;Y&quot;);
					CheckProdInInstance(psIn,psOut);
					Outputs.SetProperty(&quot;IntegrationId&quot;,psOut.GetProperty(&quot;IntegrationId&quot;));
					if(psOut.GetProperty(&quot;IntegrationId&quot;)!=&quot;&quot;)
						break;
				/*
					if(temp.GetChild(i).GetProperty(&quot;Product Id&quot;) == Inputs.GetProperty(&quot;ProductId&quot;))
					{
						Outputs.SetProperty(&quot;IntegrationId&quot;,temp.GetChild(i).GetProperty(&quot;Integration Id&quot;));
						break;
					}
				*/
				}
			}
		}
	}
	finally{
		temp = null;
	}
}"
			   SEQUENCE="15"
			   UPDATED="02/20/2016 15:24:59"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckShortNumberVPN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckShortNumberVPN(Input,Output)
{	
	try{
	
		var cntCommandExist = Input.GetChildCount();
		var sCarbonCopyLineId = Input.GetProperty(&quot;Carbon Copy LI&quot;);
		var strShortNumber = &quot;&quot;;
		var strGroupId = &quot;&quot;;
		
		var oBOVPNGroup:BusObject = TheApplication().GetBusObject(&quot;VF VPN Groups BO&quot;);
		var oBCVPNGroup:BusComp = oBOVPNGroup.GetBusComp(&quot;VF VPN Group BC&quot;);
		var oBCVPNGroupXA:BusComp = oBOVPNGroup.GetBusComp(&quot;VF PRM VPN Group Attribute BC&quot;);
		
		//var sCustomerId = TheApplication().GetProfileAttr(&quot;OrdLineAccountId&quot;);
		var bUnRecord = null;
		var sShortNumLen : chars = &quot;&quot;;
		var sInputShortNumLen : chars = &quot;&quot;;
		var sCount = 0; 	
		var sGroupNum =&quot;&quot;;
		var sActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var sErrorMessage = &quot;&quot;;
		var sShortNumber = &quot;&quot;;
		var psInputs : PropertySet = TheApplication().NewPropertySet();
		var psOutputs : PropertySet = TheApplication().NewPropertySet();
		var oServiceShortNum : Service = TheApplication().GetService(&quot;VF ManageVPNShortNumber BS&quot;);
			
		if(cntCommandExist&gt;0)
		{
			strShortNumber = Input.GetChild(0).GetProperty(&quot;3001.Short Number&quot;);
			strGroupId = Input.GetChild(0).GetProperty(&quot;3001.Group #&quot;);
			
			if(strShortNumber!=&quot;&quot; &amp;&amp; strGroupId !=&quot;&quot;)
			{
		
				with(oBCVPNGroup)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;VF Status&quot;);
					ActivateField(&quot;VF Type&quot;);
					ActivateField(&quot;VF Group Num&quot;);
					ActivateField(&quot;VF Group Name&quot;);
					ActivateField(&quot;VF Int Id&quot;);
					SetSearchExpr(&quot;[VF Status] = &apos;&quot;+sActive+&quot;&apos; AND [VF Group Num]=&apos;&quot;+strGroupId+&quot;&apos;&quot;);

					ExecuteQuery(ForwardOnly);			
					if(FirstRecord())
					{	
						Output.SetProperty (&quot;3001.VPN Group Id&quot;, GetFieldValue(&quot;VF Int Id&quot;));
						Output.SetProperty (&quot;3001.Group Name&quot;, GetFieldValue(&quot;VF Group Name&quot;));
						Output.SetProperty (&quot;3001.Short Number&quot;, strShortNumber);
						Output.SetProperty (&quot;3001.Group #&quot;, strGroupId);
						Output.SetProperty (&quot;3001#VF Member Asset Id&quot;, GetFieldValue(&quot;VF Int Id&quot;));
						Output.SetProperty (&quot;3001.Group Name&quot;, GetFieldValue(&quot;VF Group Name&quot;));
						Output.SetProperty (&quot;1000#VF Short Number&quot;, strShortNumber);
						Output.SetProperty (&quot;3001#VF Short Number&quot;, strShortNumber);

						
						with(oBCVPNGroupXA)
						{
							ClearToQuery();
							SetViewMode(AllView);
							ActivateField(&quot;Value&quot;);
							SetSearchSpec(&quot;Name&quot;, &quot;Short Number Length&quot;);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
								sShortNumLen = GetFieldValue(&quot;Value&quot;);
						}
						Output.SetProperty (&quot;3001.Short Number Length&quot;, sShortNumLen);
					
					    sInputShortNumLen=strShortNumber.length;
						
						/*if (sShortNumLen != sInputShortNumLen) 
						{
						
							if (sInputShortNumLen==&quot;4&quot; &amp;&amp; sShortNumLen ==&quot;5&quot;)
						
							{
						        TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VPN_SHORT_NUM_VAL_4&quot;));
							}
						
						
						    if (sInputShortNumLen==&quot;5&quot; &amp;&amp; sShortNumLen ==&quot;4&quot;)
						
							{
						        TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VPN_SHORT_NUM_VAL_5&quot;));
							}
						
						}*/
						if (sInputShortNumLen != &quot;5&quot; &amp;&amp; sInputShortNumLen != &quot;4&quot;)
						{
							TheApplication().RaiseErrorText(&quot;Girmiş olduğunuz Kısa Numara geçersizdir. Lütfen 4 veya 5 haneli bir değer giriniz.&quot;);
						}
							
						psInputs.SetProperty(&quot;ReservationEntity&quot;, &quot;ORDER&quot;);
						psInputs.SetProperty(&quot;ActionType&quot;, &quot;Lock&quot;);
						psInputs.SetProperty(&quot;ShortNumber&quot;, strShortNumber);
						psInputs.SetProperty(&quot;VPNGroupId&quot;,strGroupId);
						psInputs.SetProperty(&quot;RootAssetIntegId&quot;,sCarbonCopyLineId);
						
						oServiceShortNum.InvokeMethod(&quot;ManageVPNShortNumber&quot;, psInputs, psOutputs);
						
						sShortNumber = psOutputs.GetProperty(&quot;ShortNumber&quot;);
						sErrorMessage = psOutputs.GetProperty(&quot;ErrorMessage&quot;);
						if(sErrorMessage != &quot;&quot;)
						{
							//TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;VF_VPN_SHORT_NUM_KO&quot;));
							TheApplication().RaiseErrorText(&quot;Girmiş olduğunuz Kısa Numara geçersizdir. Lütfen farklı bir değer giriniz.&quot;);							
						}
					}
					else
					{
						TheApplication().RaiseErrorText(&quot;Girmiş olduğunuz VPN Gurubu bulunamadı&quot;);
					}			
				}
			}
			else
			{
				Output.RemoveProperty (&quot;3001.VPN Group Id&quot;);						
				Output.RemoveProperty (&quot;3001.Group Name&quot;);
				Output.RemoveProperty (&quot;3001.Short Number&quot;);
				Output.RemoveProperty (&quot;3001.Group #&quot;);
				Output.RemoveProperty(&quot;3001#VF Member Asset Id&quot;);
				Output.RemoveProperty(&quot;1000#VF Short Number&quot;);
				Output.RemoveProperty(&quot;3001#VF Short Number&quot;);
				
			}
		}				
	}
	catch(e)
	{
		Output.Reset();
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata CheckShortNumberVPN: &quot;+e.toString());
	}
	finally 
	{
		oBCVPNGroup = null;
		oBCVPNGroupXA = null;
		oBOVPNGroup = null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="03/01/2016 22:08:35"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2014 11:15:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CopyOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CopyOrder(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcOrderH		= boCarbonCopy.GetBusComp(&quot;Order Entry - Orders&quot;);
		
		var strRefOrderId	= Input.GetProperty(&quot;Ref Order Id&quot;);
		var strAccountId	= Input.GetProperty(&quot;Account Id&quot;);
		var strBillAccntId	= Input.GetProperty(&quot;Bill Account Id&quot;);
		var strPriContId	= Input.GetProperty(&quot;PriContId&quot;);
		var strPriAddrId	= Input.GetProperty(&quot;PriAddrId&quot;);
		var strDealerCode	= Input.GetProperty(&quot;Dealer Code&quot;);
		var strOrderSubType = Input.GetProperty(&quot;OrderSubType&quot;);
		var lovPending		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;);
		
		strGlobalLineNumber  = 0;
	
		with(bcOrderH)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;Bill To Account Id&quot;);
			ActivateField(&quot;Customer Id&quot;);
			ActivateField(&quot;Bill To Contact Id&quot;);
			ActivateField(&quot;Bill To Address Id&quot;);
			ActivateField(&quot;Order Sub Type&quot;);
			ActivateField(&quot;Service Request Id&quot;); //RCRISPIM: Retrofits 2015 February Minor
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strRefOrderId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
		        NewRecord(NewAfterCopy);
		        Output.SetProperty(&quot;CreatedOrderId&quot;,GetFieldValue(&quot;Id&quot;));
		        if(strOrderSubType!=&quot;&quot;)
		        {
		        	SetFieldValue(&quot;Order Sub Type&quot;,strOrderSubType);
		        }
		        SetFieldValue(&quot;Status&quot;,lovPending);
		        SetFieldValue(&quot;Account Id&quot;,strAccountId);
		        SetFieldValue(&quot;VF Prevent Automatic Cancellation&quot;,&quot;Y&quot;);
		        //SetFieldValue(&quot;VF Dealer Code&quot;,strDealerCode);
		        var oBCPick = GetPicklistBusComp(&quot;VF Dealer Code&quot;);
				with (oBCPick)
				{
				    ClearToQuery();
				    SetSearchSpec(&quot;VF Dealer Code&quot;, strDealerCode);
				    ExecuteQuery(ForwardOnly);
				    if (FirstRecord())
				    	Pick();
				}
				oBCPick = null;
				SetFieldValue(&quot;Service Request Id&quot;,&quot;&quot;);	//RCRISPIM: Retrofits 2015 February Minor
		        SetFieldValue(&quot;VF Orig Start Date&quot;,&quot;&quot;);
		        SetFieldValue(&quot;Bill To Account Id&quot;,strAccountId);
				SetFieldValue(&quot;Customer Id&quot;,strAccountId);
				SetFieldValue(&quot;Billing Account Id&quot;,strBillAccntId);
				SetFieldValue(&quot;Bill To Address Id&quot;,strPriAddrId);
				SetFieldValue(&quot;Bill To Contact Id&quot;,strPriContId);
				SetFieldValue(&quot;Acquisition Date&quot;,GetFieldValue(&quot;Created&quot;)); //DEF-5233 | TiagoRocha RETROFIT
				//VFTRCBU-8551
				SetFieldValue(&quot;TELCO OM Order Public Id&quot;,&quot;&quot;);
				SetFieldValue(&quot;VFTRCBU TELCO FDO OM Public Id&quot;,&quot;&quot;);
		        WriteRecord();
	        }
	        else
	        {
	        	//throw(&quot;Given Order Id :&quot;+strRefOrderId+&quot; did not find&quot;);
	        	throw(&quot;Girilen Referance Order Id:&quot;+strRefOrderId+&quot; bulunamadı&quot;);
	        }
	    }
	}
	catch(e)
	{
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata &apos;CopyOrder&apos;: &quot;+e.toString());
		Output.SetProperty(&quot;CreatedOrderId&quot;,&quot;&quot;);
	}
	finally 
	{
		bcOrderH		= null;
		boCarbonCopy	= null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="02/20/2016 15:24:59"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CopyOrderItem"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CopyOrderItem(Input,Output)
{
	try
	{
		var boOrderEntry	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrgOrder		= boOrderEntry.GetBusComp(&quot;Order Entry - Orders&quot;); 	
		var bcOrgOrderLI	= boOrderEntry.GetBusComp(&quot;Order Entry - Line Items&quot;);
		 
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcOrderLI		= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		
		var boCarbonCopy2	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcOrderLI2		= boCarbonCopy2.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		var bcParameter		= boOrderEntry.GetBusComp(&quot;ACS NI Parameter&quot;);

		var strRefOrderItemId	= Input.GetProperty(&quot;Ref Order Item Id&quot;);
		var strBillAccountId	= Input.GetProperty(&quot;Bill Account Id&quot;);
		var strCreatedOrderId	= Input.GetProperty(&quot;Created Order Id&quot;);
		var strMSISDN			= Input.GetProperty(&quot;MSISDN&quot;);
		var strICCID			= Input.GetProperty(&quot;ICCID&quot;);
		var strActionType		= Input.GetProperty(&quot;VFTRCBU Action Type&quot;);
		var strActionReason		= Input.GetProperty(&quot;VFTRCBU Action Reason&quot;);
		var strActionSubReason	= Input.GetProperty(&quot;VFTRCBU Action Sub Reason&quot;);
		
		//RCRISPIM: Retrofits 2015 February Minor - START
		var strCCHederId 		= Input.GetProperty(&quot;strCCHederId&quot;);
		var positionId 			= Input.GetProperty(&quot;positionId&quot;);
		var strDelarCode		= Input.GetProperty(&quot;Dealer Code&quot;);	//HSOUSA 30.04 - Retrofits fix
		//RCRISPIM: Retrofits 2015 February Minor - END

		var bIsRoot			= &quot;N&quot;;
		var bNextRec		= false;
		var pNextRec 		= false; //RCRISPIM: Retrofits 2015 February Minor	
		var strCurrLI_Id	= &quot;&quot;;
		var strRootOrderItemId = &quot;&quot;;
		var strRefParOrderItemId = &quot;&quot;;
		var strLineNumber	= &quot;&quot;;
		var strRefLineNumber	= &quot;&quot;;
		var strNewParId		= &quot;&quot;;		
		var pParId = TheApplication().NewPropertySet();
		var pInput = TheApplication().NewPropertySet();
		var pOutput = TheApplication().NewPropertySet();
		
		var lovPending		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;);
		//var lovDelete	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		
		bcOrderLI.SetViewMode(AllView);
		bcOrderLI.ClearToQuery();
		bcOrderLI.ActivateField(&quot;Line Number&quot;);
		bcOrderLI.ActivateField(&quot;IsRootItem&quot;);
		bcOrderLI.SetSearchExpr(&quot;[Root Order Item Id]=&apos;&quot;+strRefOrderItemId+&quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot;+lovDelete+&quot;&apos;&quot;);
		bcOrderLI.ExecuteQuery(ForwardOnly);
		bNextRec = bcOrderLI.FirstRecord();
		
		if(!bNextRec)
		{
			throw(&quot;Girilen Referance Order Item :&quot;+strRefOrderItemId+&quot; bulunamadı&quot;);
		}
		
		while(bNextRec)
		{
			strCurrLI_Id = bcOrderLI.GetFieldValue(&quot;Id&quot;);
			strLineNumber= bcOrderLI.GetFieldValue(&quot;Line Number&quot;);
			pParId.SetProperty(strCurrLI_Id,&quot;L&quot;+strLineNumber);
			strRefParOrderItemId = bcOrderLI.GetFieldValue(&quot;Parent Order Item Id&quot;);
	 		bIsRoot = (bcOrderLI.GetFieldValue(&quot;Id&quot;)==bcOrderLI.GetFieldValue(&quot;Root Order Item Id&quot;));
			
			bcOrderLI2.SetViewMode(AllView);
			bcOrderLI2.ClearToQuery();
			bcOrderLI2.ActivateField(&quot;Line Number&quot;);
			bcOrderLI2.ActivateField(&quot;Status&quot;);
			bcOrderLI2.ActivateField(&quot;MSISDN&quot;);
			bcOrderLI2.ActivateField(&quot;Or Calc Read Only Plus&quot;);
			
			bcOrderLI2.SetSearchExpr(&quot;[Id]=&apos;&quot;+strCurrLI_Id+&quot;&apos;&quot;);
			bcOrderLI2.ExecuteQuery(ForwardOnly);
			
			if(bcOrderLI2.FirstRecord())
			{	
				strGlobalLineNumber = ToNumber(strGlobalLineNumber)+1;
		        bcOrderLI2.NewRecord(NewAfterCopy);
		        bcOrderLI2.SetFieldValue(&quot;Status&quot;,lovPending);
		        pParId.SetProperty(&quot;L&quot;+strLineNumber,bcOrderLI2.GetFieldValue(&quot;Id&quot;));
		        bcOrderLI2.SetFieldValue(&quot;Order Header Id&quot;,strCreatedOrderId);
				bcOrderLI2.SetFieldValue(&quot;Billing Account Id&quot;,strBillAccountId);
				bcOrderLI2.SetFieldValue(&quot;TELCO Auto Asset Flag&quot;,&quot;Y&quot;);
				
				if(strRefParOrderItemId!=&quot;&quot;)
				{
					strRefLineNumber = pParId.GetProperty(strRefParOrderItemId);
					strNewParId = pParId.GetProperty(strRefLineNumber);
				}
				
				bcOrderLI2.SetFieldValue(&quot;Parent Order Item Id&quot;,strNewParId);
				bcOrderLI2.SetFieldValue(&quot;Line Number&quot;,strGlobalLineNumber);
			
				if(bIsRoot)
				{
					strRootOrderItemId = bcOrderLI2.GetFieldValue(&quot;Id&quot;);
				}
				bcOrderLI2.SetFieldValue(&quot;Root Order Item Id&quot;,strRootOrderItemId);
		        bcOrderLI2.WriteRecord();
		        
		     }
	         bNextRec = bcOrderLI.NextRecord();
        }
        pInput.SetProperty(&quot;Root Order Item Id&quot;,strRootOrderItemId);
        Output.SetProperty(&quot;Root Order Item Id&quot;,strRootOrderItemId);
        
        if(Input.GetChildCount()&gt;0)
        {
        	pInput.AddChild(Input.GetChild(0));
        }
        OperateOrderItemCommands(pInput,pOutput);
	
		if(pOutput.GetProperty(&quot;ErrorMsg&quot;) != &quot;&quot;)
		{
			throw(pOutput.GetProperty(&quot;ErrorMsg&quot;));
		}		
		
		if(strMSISDN !=&quot;&quot; &amp;&amp; strMSISDN != null)   
		{
			//RCRISPIM: Retrofits 2015 February Minor - START
			var loginPosition = GetPosition(positionId);
			
			var userId = GetUserId(strDelarCode);
			
			bcParameter.SetViewMode(AllView);
			bcParameter.ClearToQuery();
			bcParameter.ActivateField(&quot;Function&quot;);
			bcParameter.ActivateField(&quot;Condition1&quot;);
			bcParameter.SetSearchExpr(&quot;[Function]=&apos;GolfProject_SimCard&apos; AND [Condition1] =&apos;&quot;+loginPosition+&quot;&apos;&quot;);
			bcParameter.ExecuteQuery(ForwardOnly);
			pNextRec = bcParameter.FirstRecord();
			
			if(pNextRec)
			{
				TheApplication().SetProfileAttr(&quot;CrbCpy Batch User&quot;, userId);
			}

			//RCRISPIM: Retrofits 2015 February Minor - END
	     	with(bcOrgOrder)
	     	{
	     		SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Id]=&apos;&quot;+strCreatedOrderId+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				
				if(FirstRecord())
				{
					bcOrgOrderLI.SetViewMode(AllView);
					bcOrgOrderLI.ClearToQuery();
					//bcOrgOrderLI.ActivateField(&quot;TELCO Action Type&quot;)
					//bcOrgOrderLI.ActivateField(&quot;TELCO Action Reason&quot;)
					//bcOrgOrderLI.ActivateField(&quot;VFTRCBU Action Sub Reason&quot;)
					bcOrgOrderLI.ActivateField(&quot;MSISDN&quot;);
					bcOrgOrderLI.ActivateField(&quot;DONOR OPERATOR&quot;);
					bcOrgOrderLI.SetSearchExpr(&quot;[Id]=&apos;&quot;+strRootOrderItemId+&quot;&apos;&quot;);
					bcOrgOrderLI.ExecuteQuery(ForwardOnly);
					bNextRec = bcOrgOrderLI.FirstRecord();
					
					if(bNextRec)
					{
						bcOrgOrderLI.SetFieldValue(&quot;MSISDN&quot;,strMSISDN);
					/*	bcOrgOrderLI.SetFieldValue(&quot;TELCO Action Type&quot;,strActionType);
                       //bcOrgOrderLI.SetFieldValue(&quot;TELCO Action Reason&quot;,strActionReason);
                         //WA#19 - Pick Action Reason
                         if (strActionReason != &quot;&quot;)
                         {
	                         var oBCPick = GetPicklistBusComp(&quot;TELCO Action Reason&quot;);
	                         with (oBCPick)
	                         {
	                              ClearToQuery();
	                              SetSearchSpec(&quot;Translated Name&quot;, strActionReason);
	                              ExecuteQuery(ForwardOnly);
	                              var req = FirstRecord();
	                              while (req)
	                              {
	                                if(GetFieldValue(&quot;Translated Name&quot;)== strActionReason)
	                                {
	                                    Pick();
	                                    reason = true;
	                                }
	                              req = NextRecord();
	                              }
	                         }
	                         if(reason)
	                         {
	                         	oBCPick = null;
	                         }
	                         else
	                         {
	                         	throw(&quot;Given Action Reason :&quot;+strActionReason+&quot; not found&quot;);
	                         }
                         }
                         //WA#19 - Pick Action Reason

						bcOrgOrderLI.SetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;,strActionSubReason);*/ 
						if(strICCID!=&quot;&quot; &amp;&amp; strICCID != null)
						{
							bcOrgOrderLI.SetFieldValue(&quot;ICCID&quot;,strICCID);
						}
						bcOrgOrderLI.WriteRecord();
					}
				}
	     	}
     	}     	
	}
	catch(e)
	{
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata &apos;CopyOrderItem&apos;:&quot;+strRootOrderItemId+&quot; - &quot;+e.toString());
	}
	finally 
	{
		bcOrderLI		= null;
		bcOrderLI2		= null;
		boCarbonCopy	= null;
		boCarbonCopy2	= null;
		
		bcOrgOrder		= null;
		bcOrgOrderLI	= null;
		boOrderEntry	= null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="02/20/2016 15:24:59"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DateToString"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DateToString(dDate)
{ 
	// Parameters :
	// dDate  :  Date object
	// Returns : A string with the format &quot;mm/dd/yyyy&quot; or &quot;mm/dd/yyyy hh:mm s&quot;
	var sMonth = ToString(dDate.getMonth() + 1);
	if (sMonth.length == 1) {sMonth = &quot;0&quot; + sMonth;}
	var sDay = ToString(dDate.getDate());
	if (sDay.length == 1) {sDay = &quot;0&quot; + sDay;}
	var sHours = ToString(dDate.getHours());
	if (sHours.length == 1) {sHours = &quot;0&quot; + sHours;}
	var sMinutes = ToString(dDate.getMinutes());
	if (sMinutes.length == 1) {sMinutes = &quot;0&quot; + sMinutes;}
	var sSeconds = ToString(dDate.getSeconds());
	if (sSeconds.length == 1) {sSeconds = &quot;0&quot; + sSeconds;}
	if (sHours == &quot;00&quot; &amp;&amp; sMinutes == &quot;00&quot; &amp;&amp; sSeconds == &quot;00&quot;)
	   return (sMonth +&quot;/&quot;+  sDay +&quot;/&quot; + dDate.getFullYear())
	else
	   return (sMonth +&quot;/&quot;+  sDay +&quot;/&quot; + dDate.getFullYear() +&quot; &quot;+sHours+&quot;:&quot;+sMinutes+&quot;:&quot;+sSeconds);
}"
			   SEQUENCE="19"
			   UPDATED="02/20/2016 15:24:59"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 22:19:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Deactivation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Deactivation(Input, Output) {
	try {
		var boCarbonCopy = TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var bcOrderLI = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		var strCCHeaderId = Input.GetProperty(&quot;CC Header Id&quot;);
		var bCCLineItem = false;
		var iDefMaxLine = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_MAXLINE&quot;, &quot;MAX&quot;);
		var lovInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;In Progress&quot;);
		var lovCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Created&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_STATUS&quot;, &quot;Error&quot;);
		var iLineCount = 0;
		var strBillAccCode = &quot;&quot;;
		var strCustomerCode = &quot;&quot;;
		var strAccountId = &quot;&quot;;
		var strBillAccId = &quot;&quot;;
		var strPrevBillAccCode = &quot;&quot;;
		var strPrevCustomerCode = &quot;&quot;;
		var strMSISDN = &quot;&quot;;
		var strCommands = &quot;&quot;;
		var iMaxLineItems = &quot;&quot;;
		var strErrDesc = &quot;&quot;;
		var strCreatedOrderId = &quot;&quot;;
		var strCreRootItemID = &quot;&quot;;
		var bSubErr = false;
		var strDealerCode = &quot;&quot;;
		var strPrevDealerCode = &quot;&quot;;
		var strOrderHeadCommands = &quot;&quot;;
		var inHeadComm = TheApplication().NewPropertySet();
		var outHeadComm = TheApplication().NewPropertySet();
		var strErrorInOrderHeader = false;
		var strRootAssetId = &quot;&quot;;
		//VFTRCBU WA#19 - Begin
		var sActionReasonLIC = &quot;&quot;;
		var strCreatedBy = &quot;&quot;;
		var strActionTypeLIC = &quot;&quot;;
		var strActionType = &quot;&quot;;
		var strActionReason = &quot;&quot;;
		var strActionSubReason = &quot;&quot;;
		var strReuseActiveOrder = &quot;N&quot;;
		//VFTRCBU WA#19 - End
		var strDueDate = &quot;&quot;; //WA#19 Drop2
		var strFutureOrder = &quot;&quot;;

		with (bcCarbonCopyH) //Start With 1
		{
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;); //HSOUSA PROD Retrofit
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Ref Order Id&quot;);
			ActivateField(&quot;Max Line Items&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Order Type&quot;);
			ActivateField(&quot;Commands&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot; + strCCHeaderId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);

			if (FirstRecord()) {
				iMaxLineItems = GetFieldValue(&quot;Max Line Items&quot;);
				strOrderHeadCommands = GetFieldValue(&quot;Commands&quot;);

				if (ToNumber(iMaxLineItems) &lt; 1 || ToNumber(iMaxLineItems) &gt; ToNumber(iDefMaxLine)) {
					iMaxLineItems = iDefMaxLine;
				}
				iMaxLineItems = 1;

				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;, &quot;Y&quot;);
				SetFieldValue(&quot;Status&quot;, lovInProgress);
				strCreatedBy = GetFieldValue(&quot;Created By&quot;);
				WriteRecord();
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;, &quot;N&quot;);
				inHeadComm.SetProperty(&quot;Commands&quot;, strOrderHeadCommands);

				ParseCommands(inHeadComm, outHeadComm); //Parse Order Header Commands

				inHeadComm.Reset();
				inHeadComm.SetProperty(&quot;OrderId&quot;, &quot;&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Prevent Automatic Cancellation&quot;, &quot;Y&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Bulk Order Flg&quot;, &quot;Y&quot;);
				inHeadComm.AddChild(outHeadComm);

				with (bcCarbonCopyLI) //Start With 2
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot; + strCCHeaderId + &quot;&apos; AND [Created Order Id] IS NULL&quot;);
					SetSortSpec(&quot;Customer Code(ASCENDING),Dealer Code(ASCENDING),Billing Account Code(ASCENDING)&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();

					//while(bCCLineItem) //FTOSCANO Old Expression: while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false)
					while (bCCLineItem &amp;&amp; strErrorInOrderHeader == false) //PROD Retrofit 28/08
					{
						strBillAccCode = GetFieldValue(&quot;Billing Account Code&quot;);
						strCustomerCode = GetFieldValue(&quot;Customer Code&quot;);
						strMSISDN = GetFieldValue(&quot;MSISDN&quot;);
						strCommands = GetFieldValue(&quot;Commands&quot;);
						strDealerCode = GetFieldValue(&quot;Dealer Code&quot;);
						strRootAssetId = GetFieldValue(&quot;Asset Id&quot;);
						strActionType = GetFieldValue(&quot;VFTRCBU Action Type&quot;);
						strActionReason = GetFieldValue(&quot;VFTRCBU Action Reason&quot;);
						strActionSubReason = GetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;);
						strDueDate = GetFieldValue(&quot;VFTRCBU Due Date&quot;); // WA#19 Drop2
						strFutureOrder = GetFieldValue(&quot;VFTRCBU Future Order&quot;); // WA#19 Drop2

						var inProp = TheApplication().NewPropertySet();
						inProp.SetProperty(&quot;MSISDN&quot;, strMSISDN);
						inProp.SetProperty(&quot;Dealer Code&quot;, strDealerCode);
						inProp.SetProperty(&quot;Customer Code&quot;, strCustomerCode);
						inProp.SetProperty(&quot;Billing Account Code&quot;, strBillAccCode);
						inProp.SetProperty(&quot;RootAssetId&quot;, strRootAssetId);
						inProp.SetProperty(&quot;Action Type&quot;, strActionType);
						inProp.SetProperty(&quot;Action Reason&quot;, strActionReason);

						strErrDesc = &quot;&quot;;
						strErrDesc = ValidateInputs(inProp);

						if (strErrDesc != &quot;&quot;) {
							SetFieldValue(&quot;Error Desc&quot;, strErrDesc.substring(0, 499));
							SetFieldValue(&quot;Status&quot;, lovError);
							bSubErr = true;
						} else {
							var outProp = TheApplication().NewPropertySet();

							inHeadComm.GetChild(0).SetProperty(&quot;ORDER#VF Dealer Code&quot;, strDealerCode);

							//WA#19 Drop2 – Begin
							if (strFutureOrder != &quot;&quot; &amp;&amp; strFutureOrder != null &amp;&amp; strFutureOrder != &quot;N&quot;) {
								if (strDueDate != &quot;&quot; &amp;&amp; strDueDate != null) {
									outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;, strFutureOrder)
									outHeadComm.SetProperty(&quot;ORDER#Requested Ship Date&quot;, strDueDate);
								} else {
									outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;, strFutureOrder);
								}
							}
							//WA#19 Drop2 - End
							inProp.SetProperty(&quot;OrderSubType&quot;, strActionType);

							CheckMsisdnOnAsset(inProp, outProp); // Check msisdn for account in assets

							strAccountId = outProp.GetProperty(&quot;AccountId&quot;);
							strBillAccId = outProp.GetProperty(&quot;BillAccountId&quot;);
							strErrDesc = outProp.GetProperty(&quot;ErrorMsg&quot;);

							var inComm = TheApplication().NewPropertySet();
							var outComm = TheApplication().NewPropertySet();
							var bsWFProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
							inComm.AddChild(outHeadComm); // Added WA#19

							if (strErrDesc == &quot;&quot;) {
								inComm.SetProperty(&quot;RowId&quot;, strAccountId);
								inComm.SetProperty(&quot;Asset Integration Id&quot;, outProp.GetProperty(&quot;IntegrationId&quot;));

								if ((iLineCount % iMaxLineItems) == 0 || strPrevCustomerCode != strCustomerCode || strDealerCode != strPrevDealerCode) {
									strPrevCustomerCode = strCustomerCode;
									strPrevDealerCode = strDealerCode;
									strReuseActiveOrder = &quot;N&quot;;
								} else {
									strReuseActiveOrder = &quot;Y&quot;;
								}

								if (strErrDesc == &quot;&quot;) {
									try {
										//FTOSCANO
										strActionTypeLIC = GetLICfromLOV(&quot;ORDER_SUB_TYPE&quot;, strActionType);
										sActionReasonLIC = GetLICfromLOV(&quot;ACS_ORDER_REASON&quot;, strActionReason);

										outComm.Reset();
										inComm.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Process Account Root Asset Action&quot;);
										inComm.SetProperty(&quot;Asset Action Type&quot;, strActionTypeLIC);
										inComm.SetProperty(&quot;Asset Action&quot;, &quot;Deleted&quot;);
										inComm.SetProperty(&quot;Reuse Active Order&quot;, strReuseActiveOrder);
										inComm.SetProperty(&quot;Asset Integration Id&quot;, outProp.GetProperty(&quot;IntegrationId&quot;));
										inComm.SetProperty(&quot;SkipGUINavigation&quot;, &quot;Y&quot;);
										bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;, inComm, outComm);

										strErrDesc = outComm.GetProperty(&quot;Error Message&quot;);
										strCreatedOrderId = outComm.GetProperty(&quot;Order Id&quot;);
										strCreRootItemID = outComm.GetProperty(&quot;Root Item Id&quot;);

										if (strErrDesc == &quot;&quot;) {
											inHeadComm.SetProperty(&quot;OrderId&quot;, strCreatedOrderId);
											OperateOrderHeaderCommands(inHeadComm, outHeadComm);
											strErrDesc = outHeadComm.GetProperty(&quot;ErrorMsg&quot;);

											if (strErrDesc != &quot;&quot;) {
												strErrorInOrderHeader = true;
											} else {
												//WA#19 Added
												var inAction = TheApplication().NewPropertySet();
												var outAction = TheApplication().NewPropertySet();
												inAction.SetProperty(&quot;VFTRCBU Action Reason&quot;, strActionReason);
												inAction.SetProperty(&quot;VFTRCBU Action Sub Reason&quot;, strActionSubReason);
												inAction.SetProperty(&quot;Root Id&quot;, strCreRootItemID);
												//FTOSCANO
												inAction.SetProperty(&quot;Action Type LIC&quot;, strActionTypeLIC);
												inAction.SetProperty(&quot;Action Reason LIC&quot;, sActionReasonLIC);

												SetActions(inAction, outAction);
												//End
												strErrDesc = outAction.GetProperty(&quot;ErrorMsg&quot;);

												if (strErrDesc != &quot;&quot;) {
													bSubErr = true;
												}
											}
										} else {
											strCreatedOrderId = &quot;&quot;;
											strCreRootItemID = &quot;&quot;;
											bSubErr = true;
										}
									} catch (ex) {
										strErrDesc = ex.toString();
										strCreatedOrderId = &quot;&quot;;
										strCreRootItemID = &quot;&quot;;
									}
									finally {
										inComm = null;
										outComm = null;
										bsWFProcMng = null;
									}
								}

								if (strErrDesc != &quot;&quot;) {
									SetFieldValue(&quot;Status&quot;, lovError);
									SetFieldValue(&quot;Error Desc&quot;, strErrDesc.substring(0, 499));
									bSubErr = true;
									SetFieldValue(&quot;Created Order Id&quot;, &quot;&quot;);
									SetFieldValue(&quot;Created Order Item Id&quot;, &quot;&quot;);
								} else {
									SetFieldValue(&quot;Status&quot;, lovCreated);
									SetFieldValue(&quot;Error Desc&quot;, &quot;&quot;);
									SetFieldValue(&quot;Created Order Id&quot;, strCreatedOrderId);
									SetFieldValue(&quot;Created Order Item Id&quot;, strCreRootItemID);
									iLineCount = iLineCount + 1;
								}
							}
							if (strErrDesc != &quot;&quot;) {
								SetFieldValue(&quot;Status&quot;, lovError);
								SetFieldValue(&quot;Error Desc&quot;, strErrDesc.substring(0, 499));
								bSubErr = true;
								SetFieldValue(&quot;Created Order Id&quot;, &quot;&quot;);
								SetFieldValue(&quot;Created Order Item Id&quot;, &quot;&quot;);
							}
						}
						bCCLineItem = NextRecord();
					}
					WriteRecord();
				} // End With 2
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;, &quot;Y&quot;);

				if (bSubErr == true) {
					SetFieldValue(&quot;Status&quot;, lovError);
				} else {
					SetFieldValue(&quot;Status&quot;, lovCreated);
					SetFieldValue(&quot;Button Flag&quot;, 4); //ACAMBAS: VFTRCBU-29934 - Changed from 2 to 4
				}
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;, &quot;N&quot;);
				WriteRecord(); //PROD 28/08
			}
		} // End With 1
	} catch (e) {
		Output.SetProperty(&quot;Error&quot;, e.toString()); //PROD Retrofit 28/08
	}
	finally {
		bcCarbonCopyLI = null;
		bcCarbonCopyH = null;
		boCarbonCopy = null;

	}
}"
			   SEQUENCE="20"
			   UPDATED="01/19/2017 01:28:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeactvOldAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeactvOldAsset(RootAssetId)
{
	try
	{
		var AssetBO = TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var AssetBC = AssetBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var InactiveStat = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var endDt;
		var sysdate = new Date();
		sysdate = sysdate.getTime();
		with(AssetBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;VF Product Sub Type&quot;);
			ActivateField(&quot;Product Part Number&quot;);
			ActivateField(&quot;Effective End Date&quot;);
			SetSearchExpr(&quot;[Status] &lt;&gt; &apos;&quot;+InactiveStat+&quot;&apos; AND [Root Asset Id] = &apos;&quot;+RootAssetId+&quot;&apos; AND ([VF Product Sub Type] = &apos;NONRECW&apos; OR [VF Product Sub Type] = &apos;NONRECD&apos; OR [Product Part Number] = &apos;51012&apos; OR [Product Part Number] = &apos;51014&apos; OR [Product Part Number] = &apos;51017&apos;)&quot;);
			ExecuteQuery(ForwardOnly);
			var iNext = FirstRecord();
			while(iNext)
			{
				var EffEndDt = GetFieldValue(&quot;Effective End Date&quot;)
				
				if((EffEndDt != null) &amp;&amp; (EffEndDt != &quot;&quot;) &amp;&amp; (EffEndDt != &quot;undefined&quot;)){ 
				endDt = new Date(EffEndDt);
				endDt = endDt.getTime();
				if(endDt &lt; sysdate)
				{
					SetFieldValue(&quot;Status&quot;,InactiveStat);
					WriteRecord();
				}
				}
				iNext = NextRecord();
			}
		}
	}
	finally
	{
		AssetBO = null;
		AssetBC = null;
	}
}"
			   SEQUENCE="21"
			   UPDATED="02/20/2016 15:24:59"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeleteErrorLines"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeleteErrorLines(Input,Output)
{
	try
	{
		var boCarbonCopy  : BusObject   = TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);		
		var bcCCHeader    : BusComp     = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCCItem      : BusComp     = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var psFunctionIn  : PropertySet = TheApplication().NewPropertySet();
		var psFunctionOut : PropertySet = TheApplication().NewPropertySet();
		var boOrder       : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);
		var bcOrder       : BusComp     = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var bcItem        : BusComp     = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var psDeleteList  : PropertySet = TheApplication().NewPropertySet();

		var sCCHeaderId      = Input.GetProperty(&quot;CC Header Id&quot;);
		var sHeaderCommands  = &quot;&quot;;
		var sHeaderOrderType = &quot;&quot;;
		var sOrderSubType    = &quot;&quot;;
		var bWithCCItem      = false;
		var sCCItemId        = &quot;&quot;;
		var sOrderId         = &quot;&quot;;
		var sRootItemId      = &quot;&quot;;
		var sItemOrderType   = &quot;&quot;;
		var bDeleteItem      = false;
		var bCancelRoot      = false;
		var sItemStatus      = &quot;&quot;;
		var sOrderStatus     = &quot;&quot;;
		var sOrderOMId       = &quot;&quot;;
		var sStatusError     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);

		if (sCCHeaderId == null || sCCHeaderId == &quot;&quot;)
		{
			return;
		}

		bcCCHeader.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);	
		bcCCHeader.SetViewMode(AllView);
		bcCCHeader.ClearToQuery();
		bcCCHeader.ActivateField(&quot;Commands&quot;);
		bcCCHeader.ActivateField(&quot;Order Type&quot;);
		bcCCHeader.SetSearchExpr(&quot;[Id]=&apos;&quot; + sCCHeaderId + &quot;&apos;&quot;);
		bcCCHeader.ExecuteQuery(ForwardOnly);

		if (!bcCCHeader.FirstRecord())
		{
			return;
		}

		sHeaderCommands  = bcCCHeader.GetFieldValue(&quot;Commands&quot;);
		sHeaderOrderType = bcCCHeader.GetFieldValue(&quot;Order Type&quot;);

		if (sHeaderCommands!=&quot;&quot; &amp;&amp; sHeaderCommands!=null)
		{
			psFunctionIn.SetProperty(&quot;Commands&quot;, sHeaderCommands);
			ParseCommands(psFunctionIn, psFunctionOut);
			sOrderSubType = psFunctionOut.GetProperty(&quot;ORDER#Order Sub Type&quot;);
		}

		bcCCItem.SetViewMode(AllView);
		bcCCItem.ClearToQuery();
		bcCCItem.ActivateField(&quot;Created Order Id&quot;);
		bcCCItem.ActivateField(&quot;Created Order Item Id&quot;);
		bcCCItem.ActivateField(&quot;OrderType&quot;);
		bcCCItem.SetSearchExpr(&quot;[Carbon Header Id]=&apos;&quot; + sCCHeaderId + &quot;&apos; AND [Status]=&apos;&quot; + sStatusError + &quot;&apos;&quot;);
		bcCCItem.SetSortSpec(&quot;Created Order Id(ASCENDING)&quot;);
		bcCCItem.ExecuteQuery(ForwardOnly); 

		if (!bcCCItem.FirstRecord())
		{
			return;
		}

		do
		{
			sCCItemId      = bcCCItem.GetFieldValue(&quot;Id&quot;);
			sOrderId       = bcCCItem.GetFieldValue(&quot;Created Order Id&quot;);
			sRootItemId    = bcCCItem.GetFieldValue(&quot;Created Order Item Id&quot;);
			sItemOrderType = bcCCItem.GetFieldValue(&quot;OrderType&quot;);

			bDeleteItem = true;
			bCancelRoot = (sOrderId != null &amp;&amp; sOrderId != &quot;&quot; &amp;&amp; sRootItemId != null &amp;&amp; sRootItemId != &quot;&quot;);

			if (bCancelRoot)
			{
				bcOrder.SetViewMode(AllView);
				bcOrder.ClearToQuery();
				bcOrder.ActivateField(&quot;Status LIC&quot;);
				bcOrder.ActivateField(&quot;TELCO OM Order Public Id&quot;);
				bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sOrderId + &quot;&apos;&quot;);
				bcOrder.ExecuteQuery(ForwardOnly);

				bCancelRoot = bcOrder.FirstRecord();
			}

			if (bCancelRoot)
			{
				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.ActivateField(&quot;TELCO Status LIC&quot;);
				bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
				bcItem.SetSearchExpr(&quot;[Id]=&apos;&quot; + sRootItemId + &quot;&apos;&quot;);
				bcItem.ExecuteQuery(ForwardOnly);

				bCancelRoot = bcItem.FirstRecord();
			}

			if (bCancelRoot)
			{
				sItemStatus = bcItem.GetFieldValue(&quot;TELCO Status LIC&quot;);
				bCancelRoot = (sItemStatus != &quot;Cancelled&quot; &amp;&amp; sItemStatus != &quot;Rejected&quot;);
			}

			if (bCancelRoot)
			{
				sOrderStatus = bcOrder.GetFieldValue(&quot;Status LIC&quot;);
				sOrderOMId   = bcOrder.GetFieldValue(&quot;TELCO OM Order Public Id&quot;);

				if (sOrderStatus == &quot;Submitting&quot; || (sOrderOMId != null &amp;&amp; sOrderOMId != &quot;&quot;))
				{
					bDeleteItem = false;
					bCancelRoot = false;

					bcCCItem.SetFieldValue(&quot;Error Desc&quot;, &quot;Olusturulmus olan siparisin statüsü Beklemede statüsünden farkli.&quot;);
					bcCCItem.WriteRecord();
				}
			}

			/*if (bCancelRoot)
			{
				CancelRootItem(sRootItemId);
			}

			CancelOrder(sOrderId);*/ //DEF-11018
			
		

			if (bDeleteItem)
			{
				psDeleteList.SetProperty(sCCItemId, sCCItemId);
				
				DeleteOrderItems(sRootItemId); //DEF-11018 //DEF-14469
			}
		}
		while (bcCCItem.NextRecord());

		sCCItemId = psDeleteList.GetFirstProperty();

		while (sCCItemId != null &amp;&amp; sCCItemId != &quot;&quot;)
		{
			bcCCItem.SetViewMode(AllView);
			bcCCItem.ClearToQuery();
			bcCCItem.SetSearchSpec(&quot;Id&quot;, sCCItemId);
			bcCCItem.ExecuteQuery(ForwardOnly);
			
			if (bcCCItem.FirstRecord())
			{
				bcCCItem.DeleteRecord();
			}

			sCCItemId = psDeleteList.GetNextProperty();
		}
				
		psFunctionIn.Reset();
		psFunctionIn.SetProperty(&quot;OrderSubType&quot;,       sOrderSubType);
		psFunctionIn.SetProperty(&quot;OrderType&quot;,          sItemOrderType);
		psFunctionIn.SetProperty(&quot;CC Header Id&quot;,       sCCHeaderId);
		psFunctionIn.SetProperty(&quot;CC HeaderOrderType&quot;, sHeaderOrderType);

		CheckLineStatus(psFunctionIn);
	}
	finally
	{
		psDeleteList  = null;
		bcItem        = null;
		bcOrder       = null;
		boOrder       = null;
		psFunctionOut = null;
		psFunctionIn  = null;
		bcCCItem      = null;
		bcCCHeader    = null;
		boCarbonCopy  = null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="01/19/2017 01:28:55"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2014 11:15:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeleteOrderItems"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeleteOrderItems(sRootItemId)
{
	try
	{
		//VF_SJOAO - DEF-11018
		var boOrder      : BusObject   = TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var bcItem       : BusComp     = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var sItemSearchExpr = &quot;[Root Order Item Id] = &apos;&quot; + sRootItemId + &quot;&apos;&quot;; 
		
		//if order does not exist
		if (sRootItemId == null || sRootItemId == &quot;&quot;)
		{	
			return;
		}
		
		bcItem.SetViewMode(AllView);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardBackward);
		
		while(bcItem.FirstRecord())
		{
			bcItem.DeleteRecord();
		}
		
	}
	finally
	{
		bcItem       = null;
		boOrder      = null;
	}
}"
			   SEQUENCE="23"
			   UPDATED="08/21/2016 01:41:02"
			   UPDATED_BY="SADMIN"
			   CREATED="08/21/2016 01:41:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DocumentUpload"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DocumentUpload(OrderId)
{
	try
	{
		var OrderEntryBO		: BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var OrderEntryBC		: BusComp	= OrderEntryBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var AccountId = &quot;&quot;;
		var k;
		
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
		
		OrderEntryBC.ClearToQuery();
		OrderEntryBC.SetViewMode(AllView);
		OrderEntryBC.ActivateField(&quot;Account Id&quot;);
		OrderEntryBC.SetSearchSpec(&quot;Id&quot;,OrderId);
		OrderEntryBC.ExecuteQuery(ForwardOnly);
		if (OrderEntryBC.FirstRecord())
		{
			AccountId = OrderEntryBC.GetFieldValue(&quot;Account Id&quot;);
		}
				
		var LIC			= &quot;&quot;;
		var draftName	= &quot;&quot;;
		var TypeAccount = &quot;&quot;;
		var booExists	= &quot;&quot;;
 		var AccountBO	: BusObject	= TheApplication().GetBusObject(&quot;Account&quot;);
 		var AccountBC	: BusComp	= AccountBO.GetBusComp(&quot;Account&quot;);
 		
 		AccountBC.ClearToQuery();
		AccountBC.SetViewMode(AllView);
		AccountBC.ActivateField(&quot;Flag PF&quot;);
		AccountBC.SetSearchSpec(&quot;Id&quot;,AccountId);
		AccountBC.ExecuteQuery(ForwardOnly)
		if (AccountBC.FirstRecord())
		{
			TypeAccount = AccountBC.GetFieldValue(&quot;Flag PF&quot;);
		}

		var boList  : BusObject	    = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var bcList	: BusComp	 	= boList.GetBusComp(&quot;List Of Values&quot;);
			
		var boProposal	: BusObject		= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderDocument	: BusComp	= boProposal.GetBusComp(&quot;VF Mnp Documentum&quot;);
 		
 		if(TypeAccount == &quot;Y&quot;)
		{
	 	//created 3 records for MNP Documents
		//search values into LOV
		    bcList.ClearToQuery();
		    bcList.SetViewMode(AllView);
		    bcList.ActivateField(&quot;Name&quot;);
		    bcList.ActivateField(&quot;Value&quot;);
		   	bcList.SetSearchSpec(&quot;Type&quot;,&quot;VF_MNP_DOCUMENTS&quot;);
		   	bcList.SetSearchSpec(&quot;Language Name&quot;,&quot;Turkish&quot;);
			bcList.ExecuteQuery(ForwardOnly);
			
			booExists = bcList.FirstRecord();
	
			for (k=0; k&lt;3; k++)
			{    
				LIC			= bcList.GetFieldValue(&quot;Name&quot;);
				draftName	= bcList.GetFieldValue(&quot;Value&quot;);
									 
				bcOrderDocument.NewRecord(NewAfter);
				bcOrderDocument.SetFieldValue(&quot;Template Name&quot;, LIC);
				bcOrderDocument.SetFieldValue(&quot;Draft Name&quot;, draftName);
				bcOrderDocument.SetFieldValue(&quot;Order Id&quot;, OrderId); 
				bcOrderDocument.SetFieldValue(&quot;VF Generate Template&quot;,&quot;MnpIndividualStand&quot;);
				bcOrderDocument.WriteRecord();	
				booExists = bcList.NextRecord();
			}
		}
		
		else if(TypeAccount == &quot;N&quot;)
		{
	 	//created 3 records for MNP Documents	
		//search values into LOV
		    bcList.ClearToQuery();
		    bcList.SetViewMode(AllView);
		    bcList.ActivateField(&quot;Name&quot;);
		    bcList.ActivateField(&quot;Value&quot;);
		   	bcList.SetSearchSpec(&quot;Type&quot;,&quot;VF_MNP_DOCUMENTS&quot;);
		   	bcList.SetSearchSpec(&quot;Language Name&quot;,&quot;Turkish&quot;);
			bcList.ExecuteQuery(ForwardOnly);
			
			booExists = bcList.FirstRecord();
	
			for (k=0; k&lt;3; k++)
			{    
				LIC			= bcList.GetFieldValue(&quot;Name&quot;);
				draftName	= bcList.GetFieldValue(&quot;Value&quot;);
				bcOrderDocument.NewRecord(NewAfter);
				bcOrderDocument.SetFieldValue(&quot;Template Name&quot;, LIC);
				bcOrderDocument.SetFieldValue(&quot;Draft Name&quot;, draftName);
				bcOrderDocument.SetFieldValue(&quot;Order Id&quot;, OrderId);
				bcOrderDocument.SetFieldValue(&quot;VF Generate Template&quot;,&quot;MnpCorporateStand&quot;);
				bcOrderDocument.WriteRecord();	
				booExists = bcList.NextRecord();
			}
		}
	}
	finally
	{
		OrderEntryBC = null;
		OrderEntryBO = null;
 		AccountBC = null;
		bcList = null;
		boList = null;
		bcOrderDocument = null;
        boProposal = null;
   		AccountBO = null;
   		BS = null;
		outProp = null;
		inProp = null;
	}
}"
			   SEQUENCE="24"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 22:19:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetActiveOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetActiveOrder(Inputs,Outputs)
{
	try
	{
		var psOut = TheApplication().NewPropertySet();
		var psIn = TheApplication().NewPropertySet();
		var BS = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		
		if(Inputs.GetProperty(&quot;OrSuTpFLG&quot;)==&quot;BarUnbar&quot;)		
		{
			psIn.SetProperty(&quot;Old Group Reason&quot;,Inputs.GetProperty(&quot;Old Group Reason&quot;));
		}
		
		psIn.SetProperty(&quot;RowId&quot;,Inputs.GetProperty(&quot;RowId&quot;));
		psIn.SetProperty(&quot;Billing Account Id&quot;,Inputs.GetProperty(&quot;Billing Account Id&quot;));
		psIn.SetProperty(&quot;Service Account Id&quot;,Inputs.GetProperty(&quot;Service Account Id&quot;));
		psIn.SetProperty(&quot;Root Asset Id&quot;,Inputs.GetProperty(&quot;Root Asset Id&quot;));
		psIn.SetProperty(&quot;Order Sub Type&quot;, Inputs.GetProperty(&quot;Order Subtype&quot;));
		psIn.SetProperty(&quot;Order Type&quot;,Inputs.GetProperty(&quot;Order Type&quot;));
		psIn.SetProperty(&quot;OrSuTpFLG&quot;,Inputs.GetProperty(&quot;OrSuTpFLG&quot;));
		psIn.SetProperty(&quot;ProcessName&quot;,&quot;VF Get Active Order&quot;);
		BS.InvokeMethod(&quot;RunProcess&quot;,psIn,psOut);
		psOut.GetProperty(&quot;Error Message&quot;);		
		Outputs.SetProperty(&quot;ErrorMsg&quot;,psOut.GetProperty(&quot;Error Message&quot;));
		Outputs.SetProperty(&quot;Active Order Id&quot;,psOut.GetProperty(&quot;Active Order Id&quot;));
		
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,e.toString());		
	}
	finally
	{
		BS = null;
		psOut = null;
		psIn = null;
	}
}"
			   SEQUENCE="25"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCustBillAccountId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCustBillAccountId(Input,Output)
{
	try{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var boAcc_BillAcc	= boCarbonCopy.GetBusComp(&quot;VF Account - Billing Account&quot;);
		var strCustomerCode = Input.GetProperty(&quot;Customer Code&quot;);
		var strBillAccCode  = Input.GetProperty(&quot;Billing Account Code&quot;);	
			
		with(boAcc_BillAcc)
		{
			SetViewMode(AllView);
			ClearToQuery();
			//ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;Parent Account Id&quot;);
			ActivateField(&quot;Acc Primary Contact Id&quot;);
			ActivateField(&quot;Acc Primary Address Id&quot;);
			SetSearchExpr(&quot;[Customer Code]=&apos;&quot;+strCustomerCode+&quot;&apos; AND [Billing Account Code]=&apos;&quot;+strBillAccCode+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
					
			if(FirstRecord())
			{
				Output.SetProperty(&quot;AccountId&quot;,GetFieldValue(&quot;Parent Account Id&quot;));
				//Output.SetProperty(&quot;BillAccountId&quot;,GetFieldValue(&quot;Billing Account Id&quot;));
				Output.SetProperty(&quot;BillAccountId&quot;,GetFieldValue(&quot;Id&quot;));
				Output.SetProperty(&quot;PriContId&quot;,GetFieldValue(&quot;Acc Primary Contact Id&quot;));
				Output.SetProperty(&quot;PriAddrId&quot;,GetFieldValue(&quot;Acc Primary Address Id&quot;));
			}
			else {
				//Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Error on Method &apos;GetCustBillAccountId&apos;: There is no found customer for Customer Code: &quot;+strCustomerCode+&quot; and  Billing Accound Code:&quot;);
				Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata GetCustBillAccountId: Müşteri Kodu &quot;+strCustomerCode+&quot; ve Fatura Hesabı &quot;+strBillAccCode+&quot; olan bir kayıt bulunamadı.&quot;);
			}
	    }
	}
	catch(e){
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Error on Method &apos;GetCustBillAccountId&apos;: &quot;+e.toString());
	}
	finally
	{
		boAcc_BillAcc	= null;
		boCarbonCopy	= null;
	}
}"
			   SEQUENCE="26"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCustomerAssetInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCustomerAssetInfo (Inputs, Outputs)
{
	//VFTRCBU-15961
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAcc	= boCarbonCopy.GetBusComp(&quot;Account&quot;);
		var strCustomerCode = Inputs.GetProperty(&quot;strCustomerCode&quot;);
			
		with(bcAcc)
		{
			bcAcc.SetViewMode(AllView);
			bcAcc.ClearToQuery();
			bcAcc.ActivateField(&quot;CSN&quot;);
			bcAcc.ActivateField(&quot;Market Class&quot;);
			bcAcc.SetSearchExpr(&quot;[CSN]=&apos;&quot;+strCustomerCode+&quot;&apos;&quot;);
			bcAcc.ExecuteQuery(ForwardOnly);
					
			if(bcAcc.FirstRecord())
			{
				Outputs.SetProperty(&quot;CustomerId&quot;, bcAcc.GetFieldValue(&quot;Id&quot;));
				Outputs.SetProperty(&quot;CustomerMarketClass&quot;, bcAcc.GetFieldValue(&quot;Market Class&quot;));
				Outputs.SetProperty(&quot;CustomerMarketClassLIC&quot;, GetLICfromLOV(&quot;ACCOUNT_TYPE&quot;, bcAcc.GetFieldValue(&quot;Market Class&quot;)));
			}
			else
			{
				Outputs.SetProperty(&quot;CustomerId&quot;, &quot;&quot;);
			}
	    }
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;Error on Method &apos;GetCustomerAssetInfo&apos;: &quot;+e.toString());
	}
	finally
	{
		bcAcc	= null;
		boCarbonCopy = null;
	}

}"
			   SEQUENCE="27"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="09/21/2015 13:37:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetHighFromLOV"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetHighFromLOV(sType:String, sName:String)
{
	var oBO:BusObject;
	var oBC:BusComp;
	var bRecord;
	var sOutput:String = &quot;&quot;;

	oBO = TheApplication().GetBusObject(&quot;List Of Values&quot;);
	oBC = oBO.GetBusComp(&quot;List Of Values&quot;);
							
	with(oBC)
	{
		SetViewMode(AllView);
	    ActivateField(&quot;Type&quot;);
   		ActivateField(&quot;High&quot;);
   		ActivateField(&quot;Name&quot;);
		ClearToQuery();
		SetSearchSpec(&quot;Type&quot;, sType);
		SetSearchSpec(&quot;Name&quot;, sName);
		ExecuteQuery(ForwardOnly);
		
		bRecord = FirstRecord();		
		if(bRecord)
		{
			sOutput = GetFieldValue(&quot;High&quot;);
		}
	}

	oBC=null;
	oBO=null;
 	
	return sOutput;

}"
			   SEQUENCE="28"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="06/06/2016 10:03:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetLICfromLOV"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetLICfromLOV(sType:String, sValue:String)
{
	var oBO:BusObject;
	var oBC:BusComp;
	var bRecord;
	var sOutput:String = &quot;&quot;;

	oBO = TheApplication().GetBusObject(&quot;List Of Values&quot;);
	oBC = oBO.GetBusComp(&quot;List Of Values&quot;);
							
	with(oBC)
	{
		SetViewMode(AllView);
	    ActivateField(&quot;Type&quot;);
   		ActivateField(&quot;Name&quot;);
   		ActivateField(&quot;Value&quot;);
		ClearToQuery();
		SetSearchSpec(&quot;Type&quot;, sType);
		SetSearchSpec(&quot;Value&quot;, sValue);
		ExecuteQuery(ForwardOnly);
		
		bRecord = FirstRecord();		
		if(bRecord)
		{
			sOutput = GetFieldValue(&quot;Name&quot;);
		}
	}

	oBC=null;
	oBO=null;
 	
	return sOutput;

}"
			   SEQUENCE="29"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="04/09/2015 23:33:37"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetOrganization"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetOrganization(Position_id)
{
	try{
		var boPosition = TheApplication().GetBusObject(&quot;Position&quot;);
		var bcPosition = boPosition.GetBusComp(&quot;Position&quot;);
		var bu_id = &quot;&quot;;
		if(Position_id !=&quot;&quot;)
		{
			with(bcPosition)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Organization Id&quot;);
				SetSearchExpr(&quot;[Id]=&apos;&quot;+Position_id+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					bu_id = GetFieldValue(&quot;Organization Id&quot;);
				}
			}
		}
		return bu_id;
	}
	finally
	{
		bcPosition = null;
		boPosition = null;
	}
}"
			   SEQUENCE="30"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetPosition"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetPosition(positionId)
{
	try{
			
		var boPosition = TheApplication().GetBusObject(&quot;Position&quot;);
		var bcPosition = boPosition.GetBusComp(&quot;Position&quot;);
		
		var positionName = &quot;&quot;;
		
		with(bcPosition)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Name&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot;+positionId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				positionName = GetFieldValue(&quot;Name&quot;);
			}
		}
		
		return positionName;
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		boPosition = null;
		bcPosition = null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetProductInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetProductInfo(Input,Output)
{
	try
	{
		var sPartNumber			= Input.GetProperty(&quot;PartNumber&quot;); 
		var sRootProduct		= Input.GetProperty(&quot;RootProductId&quot;); 
		
		var boIntProd				: BusObject = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
		var bcProduct				: BusComp = boIntProd.GetBusComp(&quot;ISS Product Versions BusComp&quot;);
		var bcRelShip				: BusComp = boIntProd.GetBusComp(&quot;ISS Product Direct Relationship&quot;);
		
		var boIntProd2				: BusObject = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
		var bcProduct2				: BusComp = boIntProd2.GetBusComp(&quot;ISS Product Versions BusComp&quot;);
		var sPortId		= &quot;&quot;;
		var sProdItemId = &quot;&quot;;
		var sProdName	=&quot;&quot;;
		var sProductId	= &quot;&quot;;
		var sParProdId  = &quot;&quot;;
		var ISSsearch	= &quot;&quot;;
		var bIsRec = &quot;&quot;;
		
		var pInput = TheApplication().NewPropertySet();
		var pOutput = TheApplication().NewPropertySet();
		
		Output.SetProperty(&quot;CorrectPath&quot;,&quot;KO&quot;);
		
		with(bcProduct)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Parent Object Id&quot;);
			ActivateField(&quot;Product Name&quot;);
			SetSearchExpr (&quot;[Product Part #]=&apos;&quot;+sPartNumber+&quot;&apos;&quot;);
			
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				sProductId = GetFieldValue(&quot;Parent Object Id&quot;);
				sProdName = GetFieldValue(&quot;Product Name&quot;);
				ISSsearch = &quot;[Product Id] =&apos;&quot;+sProductId+&quot;&apos; AND [Last Version] = &apos;999999999&apos;&quot;;
				//Determine PROD PORT ID
				with(bcRelShip)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Orig Id&quot;);
					ActivateField(&quot;Port Id&quot;);
					ActivateField(&quot;SF_VodObjNum&quot;);
					SetSearchExpr (ISSsearch);
					ExecuteQuery(ForwardOnly);
					bIsRec=FirstRecord();
					while (bIsRec) 
					{

						sProdItemId = GetFieldValue(&quot;Orig Id&quot;); 
						sPortId		= GetFieldValue(&quot;Port Id&quot;);
						sParProdId	= GetFieldValue(&quot;SF_VodObjNum&quot;);
						if(sPortId==&quot;&quot;)
						{
							sPortId = sProdItemId;
						}
						
						Output.SetProperty(&quot;ProductName&quot;,sProdName);
						Output.SetProperty(&quot;ProdItemId&quot;,sProdItemId);
						Output.SetProperty(&quot;ProductId&quot;,sProductId);
						Output.SetProperty(&quot;PortId&quot;,sPortId);
						Output.SetProperty(&quot;ParentProductId&quot;,sParProdId);

						if(sParProdId==sRootProduct)
						{	
							Output.SetProperty(&quot;CorrectPath&quot;,&quot;OK&quot;);
							break;
						}
						else
						{
							with(bcProduct2)
							{
								SetViewMode(AllView);
								ClearToQuery();
								ActivateField(&quot;Product Part #&quot;);
								SetSearchExpr (&quot;[Parent Object Id]=&apos;&quot;+sParProdId+&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);
								if(FirstRecord())
								{
									pInput.SetProperty(&quot;PartNumber&quot;,GetFieldValue(&quot;Product Part #&quot;));
								}
							}
							
							if(pInput.GetProperty(&quot;PartNumber&quot;) !=&quot;&quot;)
							{
								pInput.SetProperty(&quot;RootProductId&quot;,sRootProduct);
								GetProductInfo(pInput,pOutput);
							}
							
							if(pOutput.GetProperty(&quot;CorrectPath&quot;) == &quot;OK&quot;)
							{
								Output.SetProperty(&quot;CorrectPath&quot;,&quot;OK&quot;);
								break;
							}
						}
						
						bIsRec=NextRecord();
					}
				}
			}
		}
	}
	catch(e)
	{
		Output.SetProperty(&quot;ErrMsg&quot;,&quot;Hata GetProductInfo:&quot;+e.toString());
	}
	finally{
		bcProduct		= null;
		bcRelShip		= null;
		boIntProd 		= null;
	}
}"
			   SEQUENCE="32"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetUserId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetUserId(strDelarCode)
{
	try{
			
		var boEmployee = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee = boEmployee.GetBusComp(&quot;Employee&quot;);
		
		var user_id = &quot;&quot;;
		
		with(bcEmployee)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Login Name&quot;);
			SetSearchSpec(&quot;VF Dealer Code&quot;,strDelarCode);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
			    user_id = GetFieldValue(&quot;Login Name&quot;);
		    }
		}
		
		return user_id;
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		boEmployee = null;
		bcEmployee = null;
	}
}"
			   SEQUENCE="33"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="HandsetCampaign"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function HandsetCampaign(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var strCCHeaderId = Input.GetProperty(&quot;CC Header Id&quot;);
		var bCCLineItem = false;
		var iDefMaxLine = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_MAXLINE&quot;,&quot;MAX&quot;);
		var lovInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;In Progress&quot;);
		var lovCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Created&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);
		var iLineCount = 0;
		var strBillAccCode	= &quot;&quot;;
		var strCustomerCode	= &quot;&quot;;
		var strPrevBillAccCode	= &quot;&quot;;
		var strPrevCustomerCode   = &quot;&quot;;
		var strMSISDN = &quot;&quot;;
		var strOrderType = &quot;&quot;;
		var strCommands	= &quot;&quot;;
		var iMaxLineItems	= &quot;&quot;;
		var strErrDesc	= &quot;&quot;;
		var strCreatedOrderId	= &quot;&quot;;
		var strCreRootItemID	= &quot;&quot;;
		var bSubErr		= false;
		var strDealerCode	= &quot;&quot;;
		var strPrevDealerCode	= &quot;&quot;;
		var strOrderHeadCommands	= &quot;&quot;;
		var inHeadComm = TheApplication().NewPropertySet();
		var outHeadComm = TheApplication().NewPropertySet();
		var strErrorInOrderHeader = false;
		var strRootAssetId = &quot;&quot;;
		var strActionType		= &quot;&quot;;
		var strActionReason	= &quot;&quot;;
		var strActionSubReason	= &quot;&quot;;
		var strReuseActiveOrder	= &quot;N&quot;;
		var strDueDate   = new Date();
		var strBundlePromoCode = &quot;&quot;;
		var strHandsetCommands = &quot;&quot;;
		var strIntegrationId = &quot;&quot;;
		var strFutureOrder = &quot;&quot;;
		var strIMEI = &quot;&quot;; //HSOUSA 09.10
		var strUserId = &quot;&quot;; //HSOUSA 09.10
		var strProductsSearchSpec = &quot;&quot;; //HSOUSA 09.10
		var strCheckPromotion; //HSOUSA 09.10
		var iStrLength;

		with(bcCarbonCopyH)
		{   
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Ref Order Id&quot;);
			ActivateField(&quot;Max Line Items&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Order Type&quot;);
			ActivateField(&quot;Commands&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHeaderId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);

			if(FirstRecord())
			{
				iMaxLineItems = GetFieldValue(&quot;Max Line Items&quot;);
				strOrderHeadCommands = GetFieldValue(&quot;Commands&quot;);
				strOrderType = GetFieldValue(&quot;Order Type&quot;);
		
				if(ToNumber(iMaxLineItems) &lt; 1 || ToNumber(iMaxLineItems) &gt; ToNumber(iDefMaxLine))
				{
					iMaxLineItems = iDefMaxLine;
				}
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				SetFieldValue(&quot;Status&quot;,lovInProgress);
				WriteRecord();
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				inHeadComm.SetProperty(&quot;Commands&quot;,strOrderHeadCommands);
				
				ParseCommands(inHeadComm,outHeadComm); //Parse Order Header Commands                   
	
				with(bcCarbonCopyLI) //Start With 2
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHeaderId+&quot;&apos; AND [Created Order Id] IS NULL&quot;);
					SetSortSpec(&quot;Customer Code(ASCENDING),Dealer Code(ASCENDING),Billing Account Code(ASCENDING)&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();
	
					//while(bCCLineItem) //FTOSCANO Old Expression: while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false)
					while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false)
					{
						strBillAccCode		= GetFieldValue(&quot;Billing Account Code&quot;);
						strCustomerCode		= GetFieldValue(&quot;Customer Code&quot;);
						strMSISDN			= GetFieldValue(&quot;MSISDN&quot;);
						strCommands			= GetFieldValue(&quot;Commands&quot;);
						strDealerCode		= GetFieldValue(&quot;Dealer Code&quot;);
						strActionType		= GetFieldValue(&quot;VFTRCBU Action Type&quot;);
						strActionReason 	= GetFieldValue(&quot;VFTRCBU Action Reason&quot;);
						strActionSubReason	= GetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;);	
						strDueDate 			= GetFieldValue(&quot;VFTRCBU Due Date&quot;);
						strBundlePromoCode	= GetFieldValue(&quot;VFTRCBU Promotion Code&quot;);
						strHandsetCommands	= GetFieldValue(&quot;VFTRCBU Device Commands&quot;);
						strFutureOrder 		= GetFieldValue(&quot;VFTRCBU Future Order&quot;);
						strIMEI 			= GetFieldValue(&quot;VFTRCBU IMEI&quot;); //HSOUSA 09.10
						strUserId 			= GetFieldValue(&quot;Created By&quot;);//HSOUSA 09.10
						
						
						var inProp = TheApplication().NewPropertySet();
						inProp.SetProperty(&quot;MSISDN&quot;,strMSISDN);
						inProp.SetProperty(&quot;Dealer Code&quot;,strDealerCode);
						inProp.SetProperty(&quot;Customer Code&quot;,strCustomerCode);
						inProp.SetProperty(&quot;Billing Account Code&quot;,strBillAccCode);
						inProp.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);
						inProp.SetProperty(&quot;Action Type&quot;, strActionType);
						inProp.SetProperty(&quot;Action Reason&quot;, strActionReason);
						inProp.SetProperty(&quot;Commands&quot;, strCommands);
						inProp.SetProperty(&quot;Order Type&quot;, strOrderType);
						inProp.SetProperty(&quot;Promotion Code&quot;, strBundlePromoCode);
						inProp.SetProperty(&quot;Handset Commands&quot;, strHandsetCommands);
						inProp.SetProperty(&quot;IMEI&quot;, strIMEI); //HSOUSA 09.10
						inProp.SetProperty(&quot;User Id&quot;, strUserId); //HSOUSA 09.10
						
						strErrDesc = ValidateInputs(inProp);
		
						if(strErrDesc==&quot;&quot;)
						{
							var outProp = TheApplication().NewPropertySet();
							
							inProp.SetProperty(&quot;OrderSubType&quot;,strActionType);
							
							CheckMsisdnOnAsset(inProp,outProp); // Check msisdn for account in assets
							strErrDesc    = outProp.GetProperty(&quot;ErrorMsg&quot;);
							strIntegrationId = outProp.GetProperty(&quot;IntegrationId&quot;);
							strRootAssetId = outProp.GetProperty(&quot;RootAssetId&quot;);
							strCheckPromotion = outProp.GetProperty(&quot;VFTRCBU Prod Prom Id&quot;);
							
							//HSOUSA - Added 15.10
							if (strErrDesc == &quot;&quot; &amp;&amp; strCheckPromotion != &quot;&quot;)
							{
								strErrDesc = &quot;Abonenin mevcut cihaz kampanyasi bulunmaktadir.&quot;;
							}
							//HSOUSA - Added 15.10
							
							if(strErrDesc==&quot;&quot;)
							{										
								if((iLineCount%iMaxLineItems)==0 || strPrevCustomerCode!=strCustomerCode || strDealerCode != strPrevDealerCode)
								{
									strPrevCustomerCode = strCustomerCode;
									strPrevDealerCode = strDealerCode;
									strReuseActiveOrder = &quot;N&quot;;
								}
								else
								{
									strReuseActiveOrder = &quot;Y&quot;;
								}
		
								try
								{
									var bsWFProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
									var bsInputs = TheApplication().NewPropertySet();
									var bsOuputs = TheApplication().NewPropertySet();
									bsOuputs.Reset();
									bsInputs.SetProperty(&quot;Customer Code&quot;, strCustomerCode);
									bsInputs.SetProperty(&quot;Billing Account&quot;, strBillAccCode);
									bsInputs.SetProperty(&quot;Asset Integration Id&quot;, strIntegrationId);
									bsInputs.SetProperty(&quot;Action Type&quot;, GetLICfromLOV(&quot;ORDER_SUB_TYPE&quot;, strActionType)); //VFTRCBU-17963
									bsInputs.SetProperty(&quot;Action Reason&quot;, GetLICfromLOV(&quot;ACS_ORDER_REASON&quot;, strActionReason)); //VFTRCBU-17963
									bsInputs.SetProperty(&quot;Action Sub Reason&quot;, GetLICfromLOV(&quot;VF_SUB_REASON&quot;, strActionSubReason)); //VFTRCBU-17963
									bsInputs.SetProperty(&quot;Reuse Active Order&quot;, strReuseActiveOrder);

									if (strFutureOrder != &quot;&quot; &amp;&amp; strFutureOrder != null &amp;&amp; strFutureOrder != &quot;N&quot;)
		 	                        {
										if (strDueDate != &quot;&quot; &amp;&amp; strDueDate != null)
										{
											bsInputs.SetProperty(&quot;Future Order Flag&quot;, strFutureOrder);
											bsInputs.SetProperty(&quot;Requested Ship Date&quot;, strDueDate);
									    }
										else
										{	
											bsInputs.SetProperty(&quot;Future Order Flag&quot;, strFutureOrder);											                                              
										}
									}
									//Manage additional items and attributes - INI
									bsOuputs.Reset();
									var bsEmptyPS = TheApplication().GetService(&quot;PRM ANI Utility Service&quot;);
									var bsEmptyInputs = TheApplication().NewPropertySet();
									var bsEmptyOuputs = TheApplication().NewPropertySet();
									bsEmptyInputs.SetProperty(&quot;Hierarchy Name&quot;, &quot;TELCO Order Interfaces IO&quot;);
									bsEmptyPS.InvokeMethod(&quot;CreateEmptyPropSet&quot;, bsEmptyInputs, bsEmptyOuputs);
																		
									//Process Handset Commands
									bsOuputs = ManageAdditionalProducts(inProp.GetProperty(&quot;Handset Commands&quot;), bsEmptyOuputs, &quot;Y&quot;);
									if(inProp.GetProperty(&quot;Commands&quot;) != &quot;&quot;)
									{
										//Process Commands
										bsOuputs = ManageAdditionalProducts(inProp.GetProperty(&quot;Commands&quot;), bsOuputs, &quot;N&quot;);
									}
									strProductsSearchSpec = bsOuputs.GetProperty(&quot;Asset Search Spec&quot;);
									bsOuputs.RemoveProperty(&quot;Asset Search Spec&quot;);
									iStrLength = strProductsSearchSpec.lastIndexOf(&quot;OR&quot;);
									strProductsSearchSpec = strProductsSearchSpec.substring(0, iStrLength);
									//Manage additional items and attributes - END
									
									var arrCommands = strHandsetCommands.split(&quot;;&quot;);
									var arrFieldValue = arrCommands[0].split(&quot;=&quot;);
									var strHandsetPartNum = arrFieldValue[0];
									bsInputs.SetProperty(&quot;Handset Part Num&quot;,strHandsetPartNum);
									bsInputs.SetProperty(&quot;Promotion Part Num&quot;,strBundlePromoCode);
									bsInputs.SetProperty(&quot;IMEI&quot;,strIMEI); //HSOUSA 09.10
									bsInputs.SetProperty(&quot;User Id&quot;,strUserId); //HSOUSA 09.10
									bsInputs.SetProperty(&quot;AddProductsSearchSpec&quot;,strProductsSearchSpec); //HSOUSA 09.10
									bsInputs.AddChild(bsOuputs.Copy());//HSOUSA 09.10
									bsInputs.SetProperty(&quot;ProcessName&quot;,&quot;VFTRCBU Create Handset Campaigns Bulk Orders WF&quot;);
									
									bsOuputs.Reset();
									bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;,bsInputs,bsOuputs);
									
									strErrDesc = bsOuputs.GetProperty(&quot;Error Message&quot;);
		
									if(strErrDesc==&quot;&quot;)
									{   
										strCreatedOrderId = bsOuputs.GetProperty(&quot;Order Id&quot;);
										strCreRootItemID = bsOuputs.GetProperty(&quot;Root Item Id&quot;);
										inHeadComm.Reset();
										
										outHeadComm.SetProperty(&quot;ORDER#VF Dealer Code&quot;,strDealerCode);
										inHeadComm.AddChild(outHeadComm);
										inHeadComm.SetProperty(&quot;OrderId&quot;,strCreatedOrderId); 
										
										OperateOrderHeaderCommands(inHeadComm,outHeadComm);                                                                                                                           
										
										strErrDesc = outHeadComm.GetProperty(&quot;ErrorMsg&quot;);
		
										if (strErrDesc==&quot;&quot;)
										{
											if(sProductList!=&quot;&quot; &amp;&amp; sProductList!=null)
											{	
												inProp.Reset()
												outProp.Reset()
												inProp.SetProperty(&quot;Active Quote Id&quot;,strCreatedOrderId);
												inProp.SetProperty(&quot;Asset Integration Id&quot;,strIntegrationId);
												Call_eConfigurator(inProp,outProp);
												strErrDesc=outProp.GetProperty(&quot;ErrorMsg&quot;);   
												
												if(strErrDesc!=&quot;&quot;)
												{
													bSubErr = true;
												}
												
												if(strCommands!=&quot;&quot; &amp;&amp; strCommands!=null &amp;&amp; strErrDesc == &quot;&quot;)
												{
													var inComm = TheApplication().NewPropertySet();
													var outComm = TheApplication().NewPropertySet();
													inProp.Reset();
													outProp.Reset();
													
													inProp.SetProperty(&quot;Commands&quot;,strCommands);
													inProp.SetProperty(&quot;Carbon Copy LI&quot;,GetFieldValue(&quot;Id&quot;));
													inProp.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);								
													ParseCommands(inProp,outProp);
													inProp.AddChild(outProp);
													CheckShortNumberVPN(inProp,outProp);
													strErrDesc=outProp.GetProperty(&quot;ErrorMsg&quot;);
													
													if(strErrDesc==&quot;&quot;)
													{
														SearchApnInAssetAndGetStaticIp(inProp,outProp);
														strErrDesc=outProp.GetProperty(&quot;ErrorMsg&quot;);
														
														if(strErrDesc!=&quot;&quot;)
														{
															bSubErr = true;
														}
													}
													else
													{
														bSubErr = true;
													}
													
													var jjj = outProp.Copy();
													inComm.AddChild(jjj);	
													inComm.SetProperty(&quot;Carbon Copy LI&quot;,GetFieldValue(&quot;Id&quot;));													
													inComm.SetProperty(&quot;OrSuTpFLG&quot;,&quot;ModifyOption&quot;);
													inComm.SetProperty(&quot;Root Order Item Id&quot;,strCreRootItemID);
													OperateOrderItemCommands(inComm,outComm);
													strErrDesc=outComm.GetProperty(&quot;ErrorMsg&quot;);
													
													if(strErrDesc!=&quot;&quot;)
													{
														bSubErr = true;
													}
												}
											}
										}									
										else
										{
											strErrorInOrderHeader = true;
											strCreatedOrderId = &quot;&quot;;
											strCreRootItemID = &quot;&quot;;
										}
									}
									else
									{
										strCreatedOrderId = &quot;&quot;;
										strCreRootItemID = &quot;&quot;;
										bSubErr = true;
									}
								} 								
								catch(ex)
								{
									strErrDesc = ex.toString();
									strCreatedOrderId = &quot;&quot;;
									strCreRootItemID = &quot;&quot;;
								}
								finally
								{
									inComm 		= null;
									outComm 		= null;
									bsWFProcMng 	= null;
									//inHeadComm	= null;
									//outHeadComm	= null;
								}
							}
						}
		
						if(strErrDesc!=&quot;&quot;)
						{
							SetFieldValue(&quot;Status&quot;,lovError);
							SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 999));  //20160606:Retrofit9.3.3:value 999 prevailed over retrofit.
							SetFieldValue(&quot;Created Order Id&quot;,&quot;&quot;);
							SetFieldValue(&quot;Created Order Item Id&quot;,&quot;&quot;);
							bSubErr = true;
						}
						else
						{
							SetFieldValue(&quot;Status&quot;,lovCreated);
							SetFieldValue(&quot;Error Desc&quot;,&quot;&quot;);
							SetFieldValue(&quot;Created Order Id&quot;,strCreatedOrderId);
							SetFieldValue(&quot;Created Order Item Id&quot;,strCreRootItemID);
							iLineCount = iLineCount+1;					  
						}
						strRootAssetId	= &quot;&quot;; // Clean Prop VFTRCBU-33854 (Fails for multiple msisdn lines)
						bCCLineItem = NextRecord();  	
								
					}//End While
					WriteRecord();
				}// End With 2
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
	
				if(bSubErr)
				{
					SetFieldValue(&quot;Status&quot;,lovError);
					SetFieldValue(&quot;Button Flag&quot;,1);
				}
				else
				{
					SetFieldValue(&quot;Status&quot;,lovCreated);
					SetFieldValue(&quot;Button Flag&quot;,2);
				}
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
			}
			WriteRecord();
		}//End With 1
	}//End Try	
	catch(e)
	{
		TheApplication().RaiseErrorText(e.toString());
	}
	finally
	{
		var boCarbonCopy	= null;
		var bcCarbonCopyH	= null;
		var bcCarbonCopyLI	= null;
		var inHeadComm 		= null;
		var outHeadComm 	= null;
		var inProp 			= null;
		var outProp 		= null;
		var bsEmptyInputs 	= null;
		var bsEmptyOuputs 	= null;
		var bsEmptyPS 		= null;							
	}
}"
			   SEQUENCE="34"
			   UPDATED="10/17/2016 23:48:19"
			   UPDATED_BY="SADMIN"
			   CREATED="02/20/2015 01:31:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ImportFromLocal"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ImportFromLocal (Inputs, Outputs)
{
	try 
	{
		var strFileName =Inputs.GetProperty(&quot;FileName&quot;);
		var strCaCoHeadId = TheApplication().GetProfileAttr(&quot;CaCoHeadId&quot;);		
		var fpReadReadyFile		= &quot;&quot;;		
		var strCurrLnReadyFile	=&quot;&quot;;		
		var arrSplitLine        = new Array;
		var boCarbonCopy = TheApplication().ActiveBusObject();

		var boCaCopHead = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var boCaCopLine = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
	
		//RETROFIT - HSOUSA 29042015
		var strCustomerCode = &quot;&quot;;
		var strBillAccCode = &quot;&quot;;
		var strMSISDN = &quot;&quot;;
		var strICCID = &quot;&quot;; 
		var Commands = &quot;&quot;; //PROD Retrofit
		var strRefOrderItemId = &quot;&quot;;
		var strErrDesc  = &quot;&quot;;
		var strUploaded = &quot;&quot;;
		var strDealerCode = &quot;&quot;;
		var strRefOrderId = &quot;&quot;;
	
		var bTxtFirstLine		= true;
		var strOrderType	= &quot;&quot;;
		var strAssetId = &quot;&quot;;
		var In = TheApplication().NewPropertySet();
		var Out = TheApplication().NewPropertySet();
		
		var bsDateTimeUtlis = TheApplication().GetService(&quot;TELCO DateTime Utils&quot;);
		var dateIn = TheApplication().NewPropertySet();
		var dateOut = TheApplication().NewPropertySet();
		
		if(boCarbonCopy.Name()!=&quot;VF Carbon Copy BO&quot;)
		{
			throw(&quot;Active Bus Object is not &apos;VF Carbon Copy BO&apos;!!!&quot;);
		}

		with(boCaCopHead)
		{
			if(FirstRecord())
			{
				fpReadReadyFile = Clib.fopen(strFileName,&quot;rt&quot;);
				strCurrLnReadyFile = Clib.fgets(fpReadReadyFile);
							
				while(strCurrLnReadyFile!=&quot;&quot; &amp;&amp; strCurrLnReadyFile!=null)
				{
							
					if(bTxtFirstLine)
					{
						arrSplitLine = strCurrLnReadyFile.split (&quot;|&quot;);
						//DEF-11547 - Start
						if (arrSplitLine[0]!=&quot;Activation&quot; &amp;&amp; arrSplitLine[0]!=&quot;Modify Order&quot; &amp;&amp; arrSplitLine[0]!=&quot;Handset Campaign&quot; &amp;&amp; arrSplitLine[0]!=&quot;Suspend&quot; &amp;&amp; arrSplitLine[0]!=&quot;Resume&quot; &amp;&amp; arrSplitLine[0]!=&quot;Delete&quot;  &amp;&amp; arrSplitLine[0]!=&quot;Transfer Post to Pre&quot;)
						{
							var sErrMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;Stab_004&quot;);
							TheApplication().RaiseErrorText(sErrMessage);
						
						}
						else
						{ //DEF-11547
							SetFieldValue(&quot;Order Type&quot;,arrSplitLine[0]);
							strOrderType = arrSplitLine[0]; // WA#19 Drop 2
							SetFieldValue(&quot;Commands&quot;,arrSplitLine[1]);
							bTxtFirstLine = false;
							strCurrLnReadyFile = Clib.fgets(fpReadReadyFile);
							continue;
						} //DEF-11547 - End
					
					}
					else
					{
						//PROD - Retrofit 28/08
						arrSplitLine = strCurrLnReadyFile.split (&quot;|&quot;);
						strCustomerCode		= arrSplitLine[0];
						strBillAccCode		= arrSplitLine[1];
						strMSISDN			= arrSplitLine[2];
						strICCID			= arrSplitLine[3];
						strRefOrderId		= arrSplitLine[4];
						strRefOrderItemId	= arrSplitLine[5];
						strDealerCode		= arrSplitLine[6];
						strAssetId			= arrSplitLine[7];
						Commands			= arrSplitLine[8];
					
						// WA#14 – Drop 2 Begin    
						In.SetProperty(&quot;OrderType&quot;,strOrderType);
						In.SetProperty(&quot;strCurrLnReadyFile&quot;, strCurrLnReadyFile);
						SetInputsByType(In, Out);
					}
					
					
					with(boCaCopLine)
					{
						NewRecord (NewAfter);
						In.SetProperty(&quot;OrderType&quot;,strOrderType);
						In.SetProperty(&quot;strCurrLnReadyFile&quot;, strCurrLnReadyFile);
						SetInputsByType(In, Out);
						SetFieldValue(&quot;Billing Account Code&quot;, Out.GetProperty(&quot;strBillAccCode&quot;));
						SetFieldValue(&quot;Customer Code&quot;, Out.GetProperty(&quot;strCustomerCode&quot;));
						SetFieldValue(&quot;MSISDN&quot;, Out.GetProperty(&quot;strMSISDN&quot;));
						SetFieldValue(&quot;ICCID&quot;, Out.GetProperty(&quot;strICCID&quot;));
						SetFieldValue(&quot;Ref Order Id&quot;, Out.GetProperty(&quot;strRefOrderId&quot;));
						SetFieldValue(&quot;Ref Order Item Id&quot;, Out.GetProperty(&quot;strRefOrderItemId&quot;));
						SetFieldValue(&quot;Dealer Code&quot;, Out.GetProperty(&quot;strDealerCode&quot;));
						SetFieldValue(&quot;VFTRCBU Action Type&quot;, Out.GetProperty(&quot;strActionType&quot;));
						SetFieldValue(&quot;VFTRCBU Action Reason&quot;, Out.GetProperty(&quot;strActionReason&quot;));
						SetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;, Out.GetProperty(&quot;strActionSubReason&quot;));
						SetFieldValue(&quot;Commands&quot;, Out.GetProperty(&quot;Commands&quot;));	
						SetFieldValue(&quot;Asset Id&quot;, Out.GetProperty(&quot;strAssetId&quot;));	
						SetFieldValue(&quot;VFTRCBU Future Order&quot;, Out.GetProperty(&quot;strFutureOrder&quot;));
                        if(Out.GetProperty(&quot;strDueDate&quot;) != &quot;&quot; &amp;&amp; Out.GetProperty(&quot;strDueDate&quot;) != null)
                        {
							SetFieldValue(&quot;VFTRCBU Due Date&quot;, Out.GetProperty(&quot;strDueDate&quot;));	
                        }
						SetFieldValue(&quot;VFTRCBU Promotion Code&quot;, Out.GetProperty(&quot;strPromotionCode&quot;));	
						SetFieldValue(&quot;VFTRCBU Device Commands&quot;, Out.GetProperty(&quot;DeviceCommands&quot;));
						SetFieldValue(&quot;VFTRCBU IMEI&quot;, Out.GetProperty(&quot;strIMEI&quot;));//HSOUSA 09.10.2015						
						WriteRecord();
					}
					
					In.Reset();
					Out.Reset();
					// WA#14 – Drop2 End
					strCurrLnReadyFile = Clib.fgets(fpReadReadyFile);
				}		
				Clib.fclose (fpReadReadyFile);
				SetFieldValue(&quot;Button Flag&quot;,1);
				WriteRecord();
			}	
		}
	}








	catch (e)
	{
		var error = e.toString();
		Outputs.SetProperty (&quot;CurrentLine&quot;, error);
	}
	finally
	{		
		Out = null;
		In = null;
		boCaCopHead = null;
		boCaCopLine = null;
		boCarbonCopy = null;
	}
}"
			   SEQUENCE="35"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2014 11:15:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LaunchCarbonCopy"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LaunchCarbonCopy(Input,Output)
{
	try
	{
		var boCarbonCopy = TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		
		var strCCHederId = Input.GetProperty(&quot;CC Header Id&quot;);
		
		var strOrderType		= &quot;&quot;;
		//var strOrderSubType		= &quot;&quot;;
		var strActionType		= &quot;&quot;;
		var strCommands = &quot;&quot;;
		
		var inComm = TheApplication().NewPropertySet();
		var outComm = TheApplication().NewPropertySet();
		
        //20160606:Retrofit9.3.3:Comment block below 
		/* var SH1PATH1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_SHELL&quot;,&quot;SH1PATH1&quot;);
		var SH1PATH2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_SHELL&quot;,&quot;SH1PATH2&quot;);
		var SH1PATH3 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_SHELL&quot;,&quot;SH1PATH3&quot;);
		var SH1RUN1  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_SHELL&quot;,&quot;SH1RUN1&quot;);
		var strShell = SH1PATH1+SH1PATH2+SH1PATH3;
        */
		var strError = &quot;&quot;; //RCRISPIM: Retrofits 2015 February Minor		
		with(bcCarbonCopyH)
		{
            InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;); //20160606:Retrofit9.3.3:Added 
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Ref Order Id&quot;);
			ActivateField(&quot;Max Line Items&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Order Type&quot;);
			ActivateField(&quot;Commands&quot;);
			ActivateField(&quot;Created By Login&quot;);			
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strOrderType = GetFieldValue(&quot;Order Type&quot;);
				Input.SetProperty(&quot;Order Type&quot;, strOrderType); //VFTRCBU WA#19
				strCommands = GetFieldValue(&quot;Commands&quot;);
				TheApplication().SetProfileAttr(&quot;CrbCpy Batch User&quot;,GetFieldValue(&quot;Created By Login&quot;));
				if(strCommands!=&quot;&quot; &amp;&amp; strCommands!=null)
				{	
					inComm.SetProperty(&quot;Commands&quot;,strCommands);
					ParseCommands(inComm,outComm);
				}
				//strOrderSubType = outComm.GetProperty(&quot;ORDER#Order Sub Type&quot;);
				//strActionType = GetFieldValue(&quot;ActionType&quot;);
				//strOrderType = &quot;Bar&quot;;
			//	strActionType = outComm.GetProperty(&quot;ORDER#Order Sub Type&quot;); //VFMTESTE
				
				if(strOrderType == &quot;Activation&quot;)
				{
					Activation(Input,Output);
					strError = Output.GetProperty(&quot;Error&quot;); //RCRISPIM: Retrofits 2015 February Minor
				}
				//VFTRCBU WA#19 - Begin
				/*else if(strOrderSubType == &quot;Suspend - Credit&quot; || strOrderSubType == &quot;Suspend - Fraud&quot; || strOrderSubType == &quot;Suspend - Voluntary&quot; || strOrderSubType == &quot;Suspend - Missing Document&quot; || strOrderSubType == &quot;Suspend Order&quot;
					 || strOrderSubType == &quot;Resume - Credit&quot; || strOrderSubType == &quot;Resume - Fraud&quot; || strOrderSubType == &quot;Resume - Voluntary&quot; || strOrderSubType == &quot;Resume - Missing Document&quot; || strOrderSubType == &quot;Resume Order&quot;)*/
				else if(strOrderType == &quot;Suspend&quot; || strOrderType == &quot;Resume&quot;)
				//VFTRCBU WA#19 - End
				{
					SuspendResume(Input,Output);
					strError = Output.GetProperty(&quot;Error&quot;); //RCRISPIM: Retrofits 2015 February Minor
				}
				else if(strOrderType==&quot;Modify Order&quot;)
				{
					ModifyOption(Input,Output);
					strError = Output.GetProperty(&quot;Error&quot;); //RCRISPIM: Retrofits 2015 February Minor
				}				
				//VFTRCBU WA#19 - Begin
				else if (strOrderType==&quot;Delete&quot;)
				{
					Deactivation(Input,Output);
				}
				//VFTRCBU WA#19 - End
				//VFTRCBU WA#19 Drop2 - Begin
				else if (strOrderType==&quot;Transfer Post to Pre&quot;)
				{
					TransferPos2Pre(Input,Output);
				}
				else if (strOrderType==&quot;Handset Campaign&quot;)
				{
					HandsetCampaign(Input,Output);
				}
				//VFTRCBU WA#19 Drop2- End

				//RCRISPIM: Retrofits 2015 February Minor - START
				if(strError!=&quot;&quot;)
				{
					InvokeMethod(&quot;RefreshBusComp&quot;);				
					SetFieldValue(&quot;Status&quot;,strError);
					WriteRecord();
				}
				//RCRISPIM: Retrofits 2015 February Minor - END	
				//20160606:Retrofit9.3.3:Commented block below
				/*if(SH1RUN1==&quot;OK&quot;)
				{
					Clib.system(strShell+&quot;/Upd_Order_CreatedBy.sh &quot;+strCCHederId);
				}
				*/
				UpdateOrderSystemField(strCCHederId);//20160606:Retrofit9.3.3:Added
			}
		}
	}
	catch(e)
	{
		e.toString();
	}
	finally
	{
		bcCarbonCopyH	= null;
		boCarbonCopy	= null;
		inComm 			= null;
		outComm			= null;
		TheApplication().SetProfileAttr(&quot;CrbCpy Batch User&quot;,&quot;&quot;);
	}
}"
			   SEQUENCE="36"
			   UPDATED="08/21/2016 01:41:03"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LaunchOrderItemValidation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LaunchOrderItemValidation(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		
		var strCCHederId = Input.GetProperty(&quot;CC Header Id&quot;);
		var bCCLineItem = false;
		var iDefMaxLine = 100;
		var iLineCount = 0;
		var strErrDesc			= &quot;&quot;;
		var strCreatedOrderId	= &quot;&quot;;
		var strCreRootItemID	= &quot;&quot;;
		var bSubErr 			= false;
		var pInput = TheApplication().NewPropertySet();
		var pOutput = TheApplication().NewPropertySet();
		var pOrderIds = TheApplication().NewPropertySet();
		var strCusrrStatus = &quot;&quot;;
		var strLineOrderType = &quot;&quot;;

		var lovInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;In Progress&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);
		var lovValidated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Validated&quot;);
		var lovCompleted = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Completed&quot;);
		
		var MNP			= false;
		var strOrderType = &quot;&quot;;
		
		with(bcCarbonCopyH)
		{
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;); //RCRISPIM: Retrofits 2015 February Minor
			TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Order Type&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strOrderType = GetFieldValue(&quot;Order Type&quot;);
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				SetFieldValue(&quot;Status&quot;,lovInProgress);
				WriteRecord();
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				with(bcCarbonCopyLI) // Start With 2
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos; and [Status]&lt;&gt;&apos;&quot;+lovCompleted+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();
					while(bCCLineItem)
					{
						strCreatedOrderId	= GetFieldValue(&quot;Created Order Id&quot;);
						strCreRootItemID	= GetFieldValue(&quot;Created Order Item Id&quot;);
						strLineOrderType	= GetFieldValue(&quot;OrderType&quot;);
						strErrDesc = &quot;&quot;;
						
						if(strLineOrderType==&quot;MNP&quot; &amp;&amp; !MNP) {MNP = true;}
						
						pOutput.Reset();
						pInput.Reset();
						
						if(strCreatedOrderId==&quot;&quot; || strCreRootItemID==&quot;&quot;)
						{
							bSubErr = true;
							strCusrrStatus = lovError;
						}
						else
						{
							pInput.SetProperty(&quot;OHeadId&quot;,strCreatedOrderId);
							pInput.SetProperty(&quot;OItemId&quot;,strCreRootItemID);
							pInput.SetProperty(&quot;OrderType&quot;,strOrderType);
														
							ValidateOrder(pInput,pOutput);
							strErrDesc = pOutput.GetProperty(&quot;ErrorMsg&quot;);
							
							if(strErrDesc!=&quot;&quot; &amp;&amp; strErrDesc != null)
							{
								bSubErr = true;
								strCusrrStatus = lovError;
								pOrderIds.SetProperty(strCreatedOrderId,&quot;N&quot;);
							}
							else
							{
								strCusrrStatus =lovValidated;
							}
							
							if(pOrderIds.GetProperty(strCreatedOrderId)!=&quot;N&quot;)
							{
								pOrderIds.SetProperty(strCreatedOrderId,&quot;Y&quot;);
							}
						}						
						SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0,500));
						SetFieldValue(&quot;Status&quot;,strCusrrStatus);
						WriteRecord();
						bCCLineItem = NextRecord();
					}
				}// End With 2
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				if(bSubErr)
				{
					SetFieldValue(&quot;Status&quot;,lovError);
				}
				else
				{
					SetFieldValue(&quot;Status&quot;,lovValidated);
					SetFieldValue(&quot;Button Flag&quot;,3); 
										
					if(!MNP)
					{
						SetFieldValue(&quot;Button Flag&quot;,3);
					}
				}
				WriteRecord();
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				
				var cntCommandExist = pOrderIds.GetPropertyCount(); //HSOUSA PROD Retrofit
					
				//RCRISPIM: Retrofits 2015 February Minor - START
				if(cntCommandExist&gt;0)
				{
					var propName = pOrderIds.GetFirstProperty();
					while(propName!=&quot;&quot;)
					{
						pOutput.Reset();
						pInput.Reset();
						pInput.SetProperty(&quot;OrderId&quot;,propName);
						pInput.SetProperty(&quot;ORDER#VF CarbCopy Validated&quot;,pOrderIds.GetProperty(propName));
						pInput.AddChild(pInput);
						OperateOrderHeaderCommands(pInput,pOutput);						
						propName = pOrderIds.GetNextProperty();
					}
				}
				//RCRISPIM: Retrofits 2015 February Minor - END
			}
		}
	}
	catch(e)
	{
		bSubErr = true;
		strErrDesc = e.toString();
	}
	finally
	{
		bcCarbonCopyLI	= null;
		bcCarbonCopyH	= null;
		boCarbonCopy	= null;
	}
}"
			   SEQUENCE="37"
			   UPDATED="05/21/2018 10:37:31"
			   UPDATED_BY="IBM_OZGEK"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LoadCarbonCopyItems"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LoadCarbonCopyItems (Inputs, Outputs)
{
try 
	{
		var strCaCoHeadId = Inputs.GetProperty(&quot;CC Header Id&quot;);
		var strPath = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_FILE&quot;, &quot;READY&quot;);
		var cmdUnixS = &quot;ls &quot; + strPath + &quot;*_ACTIVATION* &gt; &quot; + strPath + &quot;FilesToProcessS.txt&quot;;
		var filestoprocessS = &quot;FilesToProcessS.txt&quot;;
		var fileUS = &quot;&quot; ;		
		var fpReadFileName		= &quot;&quot;;
		var fpReadReadyFile		= &quot;&quot;;
		var strCurrLnFileName	=&quot;&quot;;
		var strCurrLnReadyFile	=&quot;&quot;;
		var strFileNameN		= &quot;&quot;;
		var arrSplitLine        = new Array;
		var boCarbonCopy = TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var boCaCopHead = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var boCaCopLine = boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		
		var strCustomerCode = &quot;&quot;;
		var strBillAccCode	= &quot;&quot;;
		var strMSISDN		= &quot;&quot;;
		var strICCID		= &quot;&quot;;
		var Commands		= &quot;&quot;;
		var strErrDesc  = &quot;&quot;;
		var strUploaded = &quot;&quot;;
		var strRefOrderItemId	= &quot;&quot;;
		var strDealerCode		= &quot;&quot;;
		/*var strActionType		= &quot;&quot;;
		var strActionReason 	= &quot;&quot;;
		var strActionSubReason	= &quot;&quot;;*/
	
		
		with(boCaCopHead)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCaCoHeadId+&quot;&apos;&quot;);
			//SetSortSpec(sSortSpec);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				fileUS = Clib.system(cmdUnixS);		
		
				if(fileUS==0)
				{
					fpReadFileName = Clib.fopen(strPath+filestoprocessS,&quot;rt&quot;);
					strCurrLnFileName = Clib.fgets(fpReadFileName);
					if(strCurrLnFileName!=&quot;&quot; &amp;&amp; strCurrLnFileName!=null)
					{
						strFileNameN = strCurrLnFileName.substring(strCurrLnFileName.lastIndexOf (&quot;/&quot;)+1);
						strFileNameN = strFileNameN.substring(0,strFileNameN.lastIndexOf (&quot;t&quot;)+1);

						fpReadReadyFile = Clib.fopen(strPath+strFileNameN,&quot;rt&quot;);
						strCurrLnReadyFile = Clib.fgets(fpReadReadyFile);
						while(strCurrLnReadyFile!=&quot;&quot; &amp;&amp; strCurrLnReadyFile!=null)
						{

							arrSplitLine = strCurrLnReadyFile.split (&quot;,&quot;);
							strCustomerCode		= arrSplitLine[0];
							strBillAccCode		= arrSplitLine[1];
							strMSISDN			= arrSplitLine[2];
							strICCID			= arrSplitLine[3];
							strRefOrderId		= arrSplitLine[4];
							strRefOrderItemId	= arrSplitLine[5];
							strDealerCode		= arrSplitLine[6];
							/*strActionType		= arrSplitLine[7];
							strActionReason		= arrSplitLine[8];
							strActionSubReason	= arrSplitLine[9];*/
							Commands	    	= arrSplitLine[7];

							
							with(boCaCopLine)
							{
								NewRecord (NewAfter);
								SetFieldValue(&quot;Billing Account Code&quot;,strBillAccCode);
								SetFieldValue(&quot;Customer Code&quot;,strCustomerCode);
								SetFieldValue(&quot;MSISDN&quot;,strMSISDN);
								SetFieldValue(&quot;ICCID&quot;,strICCID);
								SetFieldValue(&quot;Ref Order Id&quot;,strRefOrderId);
								SetFieldValue(&quot;Ref Order Item Id&quot;,strRefOrderItemId);
								SetFieldValue(&quot;Dealer Code&quot;,strDealerCode);
								/*SetFieldValue(&quot;VFTRCBU Action Type&quot;, strActionType);
								SetFieldValue(&quot;VFTRCBU Action Reason&quot;, strActionReason);
								SetFieldValue(&quot;VFTRCBU Action Sub Reason &quot;, strActionSubReason);*/
								SetFieldValue(&quot;Commands&quot;,Commands);
								WriteRecord();
							}
							strCurrLnReadyFile = Clib.fgets(fpReadReadyFile);
						}
						strCurrLnFileName = Clib.fgets(fpReadFileName);
						Clib.fclose (fpReadReadyFile);
						
						strUploaded  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_CARBON_COPY_FILE&quot;, &quot;UPLOADED&quot;);
						Clib.system(&quot;cp &quot;+ strPath+strFileNameN+ &quot; &quot; + strUploaded + strFileNameN);
						Clib.system(&quot;rm &quot;+ strPath+strFileNameN);
					}
					Clib.fclose (fpReadFileName);	
				}
			}
		}
	}
	catch (e)
	{
		var error = e.toString();
		Outputs.SetProperty (&quot;CurrentLine&quot;, error);
	}
	finally
	{		
		boCaCopHead = null;
		boCaCopLine = null;
		boCarbonCopy = null;
	}
}"
			   SEQUENCE="38"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageAdditionalProducts"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageAdditionalProducts(strCommands, InputPS, strFirstExecution)
{
	var pOrderLI;
	var pOrderLIAttr;
	var auxLIProp;
	var OutputsPS;
	var auxHeader;
	
	var arrCommands = strCommands.split(&quot;;&quot;);
	var arrLengthLI = arrCommands.length -1; //remove last empty value
	var arrLIFieldValue = &quot;&quot;;
	var strLIPartNum = &quot;&quot;;
	var strLIActionCode = &quot;&quot;;
	var strControl = &quot;N&quot;;
	var strAssetIntegIdSearchSpec = &quot;&quot;;
	var strLastIdGen = &quot;&quot;;
	
	if (InputPS.PropertyExists(&quot;Asset Search Spec&quot;))
	{
		strAssetIntegIdSearchSpec = InputPS.GetProperty(&quot;Asset Search Spec&quot;);
	}
	
	if (InputPS.PropertyExists(&quot;Last Id Generated&quot;))
	{
		strLastIdGen = InputPS.GetProperty(&quot;Last Id Generated&quot;);
	}
	
	pOrderLI = InputPS.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
	//pOrderLI = InputPS.GetChild(0).GetChild(0).GetChild(0);
	auxLIProp = pOrderLI.Copy();
	
	if(InputPS.GetType() == &quot;SiebelMessage&quot;)
	{
		OutputsPS = InputPS.Copy();
	}
	else
	{
		OutputsPS = InputPS.GetChild(0).Copy();
	}
	
	var a=0;
	/*if (strFirstExecution == &quot;Y&quot;)
	{
		//OutputsPS.GetChild(0).RemoveChild(0);
		OutputsPS.GetChild(0).GetChild(0).GetChild(0).RemoveChild(0);
	}*/
	
	while(a&lt;arrLengthLI)
	{	
		//Handle LI products to add
		arrLIFieldValue = arrCommands[a].split(&quot;=&quot;);
		strLIPartNum = arrLIFieldValue[0];
		strLIActionCode = arrLIFieldValue[1];
		
		if (strLIActionCode.toUpperCase() == &quot;ADD&quot;)
		{
			strLIActionCode = &quot;Add&quot;;
		}
		else if (strLIActionCode.toUpperCase() == &quot;REMOVE&quot;)
		{
			strLIActionCode = &quot;Delete&quot;;
		}
		else
		{
			strLIActionCode = &quot;Update&quot;;
		}
	
		//Create Search Spec of all items to be added in the order
		if (strLastIdGen != &quot;&quot; || strLastIdGen != null)
		{
			strLastIdGen = strLastIdGen+1;
			strAssetIntegIdSearchSpec = strAssetIntegIdSearchSpec + &quot;[Asset Integration Id] = &apos;&quot; + strLastIdGen.toString() + &quot;&apos; OR &quot;;	
		}
		else
		{
			strAssetIntegIdSearchSpec = strAssetIntegIdSearchSpec + &quot;[Asset Integration Id] = &apos;&quot; + a.toString() + &quot;&apos; OR &quot;;
			strLastIdGen = a.toString();
		}
		
		pOrderLI.SetProperty(&quot;Part Number&quot;, strLIPartNum);
		pOrderLI.SetProperty(&quot;Action Code&quot;, strLIActionCode);
		pOrderLI.SetProperty(&quot;Asset Integration Id&quot;, strLastIdGen); //Dummy Asset Integation Id
			
		//Handle Atributes
		pOrderLIAttr = pOrderLI.GetChild(0).GetChild(0);
		while(pOrderLI.GetChild(0).GetChildCount() &gt; 0)
		{
			pOrderLI.GetChild(0).RemoveChild(0);
		}
		var iCounter = a+1;
		var arrAttrFieldValue = arrCommands[iCounter].split(&quot;=&quot;);
		var arrAttrFieldName = arrAttrFieldValue[0].split(&quot;.&quot;);
		while (arrAttrFieldName[0] == strLIPartNum &amp;&amp; strControl ==&quot;N&quot;)
		{
			//Same Product - Add all attributes
			pOrderLIAttr.SetProperty(&quot;Name&quot;, arrAttrFieldName[1]);
			pOrderLIAttr.SetProperty(&quot;Value&quot;, arrAttrFieldValue[1]);
			pOrderLIAttr.SetProperty(&quot;Action Code&quot;, strLIActionCode);
			pOrderLI.GetChild(0).AddChild(pOrderLIAttr.Copy());
			iCounter++;
			if (iCounter &lt; arrLengthLI)
			{
				arrAttrFieldValue = arrCommands[iCounter].split(&quot;=&quot;);
				arrAttrFieldName = arrAttrFieldValue[0].split(&quot;.&quot;);	
			}
			else
			{
				strControl = &quot;Y&quot;;
			}
		}
		//Next Product to check
		auxHeader = OutputsPS.GetChild(0).GetChild(0).GetChild(0).GetChild(0).Copy();
		var propName = auxHeader.GetFirstProperty();
		while (propName != &quot;&quot;) 
		{
			auxHeader.RemoveProperty(propName);
			propName = auxHeader.GetFirstProperty();
		}
		//for(var c=0;c&lt;OutputsPS.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();c++)
		while (auxHeader.GetChildCount() &gt; 0) 
		{
			auxHeader.RemoveChild(0);
		}
		if(strFirstExecution == &quot;Y&quot;)
		{
			OutputsPS.GetChild(0).GetChild(0).GetChild(0).RemoveChild(0);
		}
		auxHeader.SetProperty(&quot;Asset Integration Id&quot;, &quot;&quot;);
		auxHeader.SetProperty(&quot;Id&quot;, &quot;&quot;);
		auxHeader.AddChild(pOrderLI);
		//OutputsPS.GetChild(0).GetChild(0).GetChild(0).AddChild(pOrderLI);
		//OutputsPS.GetChild(0).GetChild(0).GetChild(0).GetChild(0).SetProperty(&quot;Asset Integration Id&quot;, &quot;&quot;);
		//OutputsPS.GetChild(0).GetChild(0).GetChild(0).GetChild(0).AddChild(pOrderLI);
		OutputsPS.GetChild(0).GetChild(0).GetChild(0).AddChild(auxHeader);
		OutputsPS.SetProperty(&quot;Asset Search Spec&quot;, strAssetIntegIdSearchSpec);
		OutputsPS.SetProperty(&quot;Last Id Generated&quot;, strLastIdGen);
		pOrderLI = auxLIProp;
		a = iCounter;
	}
	
	//Clear Vars
	pOrderLIAttr = null;
	pOrderLI = null;
	auxLIProp = null;
	auxHeader = null;
	
	return OutputsPS;

}"
			   SEQUENCE="39"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="11/02/2015 10:35:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="MaskOrderSubType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function MaskOrderSubType(sOrderId, sMaskSubType, bRestore)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;VF Order Light&quot;);
		var bcOrder : BusComp   = boOrder.GetBusComp(&quot;VF Order Light&quot;);

		var sOrderSubType = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return false;
		}

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Order Sub Type&quot;);
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return false;
		}

		sOrderSubType = bcOrder.GetFieldValue(&quot;Order Sub Type&quot;);

		if (bRestore)
		{
			if (sOrderSubType != null &amp;&amp; sOrderSubType != &quot;&quot;)
			{
				return false;
			}

			sOrderSubType = sMaskSubType;
		}
		else
		{
			if (sOrderSubType == null || sOrderSubType == &quot;&quot; || sOrderSubType != sMaskSubType)
			{
				return false;
			}

			sOrderSubType = &quot;&quot;;
		}

		bcOrder.SetFieldValue(&quot;Order Sub Type&quot;, sOrderSubType);
		bcOrder.WriteRecord();

		return true;
	}
	catch(oExcep)
	{
		return false;
	}
	finally
	{
		bcOrder = null;
		boOrder = null;
	}
}"
			   SEQUENCE="40"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/28/2015 12:44:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyOption"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyOption(Input,Output)
{
	try
	{
        var app=TheApplication();
		var boCarbonCopy=app.GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH=boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI=boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var bcOrderLI=boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);

		var strCCHederId=Input.GetProperty(&quot;CC Header Id&quot;);
		var strRefOrderId=&quot;&quot;;
		var bCCLineItem=false;

		var iDefMaxLine=app.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_MAXLINE&quot;,&quot;MAX&quot;);
		var lovInProgress=app.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;In Progress&quot;);
		var lovCreated=app.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Created&quot;);
		//var lovError=app.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);//20160606:Retrofit9.3.3:Comment
		var lovError=sStatusCCError;//20160606:Retrofit9.3.3:Add

		var iLineCount=0;
		var strBillAccCode=&quot;&quot;;
		var strCustomerCode=&quot;&quot;;
		var strAccountId=&quot;&quot;;
		var strBillAccId=&quot;&quot;;
		var strPrevBillAccCode=&quot;&quot;;
		var strPrevCustomerCode=&quot;&quot;;
		var strMSISDN=&quot;&quot;;
		var strICCID=&quot;&quot;;
		var strCommands=&quot;&quot;;
		var strOrderType=&quot;&quot;;
		var iMaxLineItems=&quot;&quot;;
		var strErrDesc=&quot;&quot;;
		var strCreatedOrderId=&quot;&quot;;
		var strCreRootItemID=&quot;&quot;;
		var bSubErr=false;
		var strDelarCode=&quot;&quot;;
		var strPrevDelarCode=&quot;&quot;;
		var strPrevCreatedOrderId=&quot;&quot;;
		var strServiceAccountId=&quot;&quot;;
		var strAssetIntegId=&quot;&quot;;
		var strRootAssetId=&quot;&quot;;

		var strOrderHeadCommands=&quot;&quot;;
		var strOrderSubType=&quot;&quot;;//RCRISPIM: Retrofits 2015 Feb Minor

		var inHeadComm=app.NewPropertySet();
		var outHeadComm=app.NewPropertySet();
		var strCreatedBy=&quot;&quot;;
		var strErrorInOrderHeader=false;
		//VFTRCBU WA#19-Begin
     	var strActionType=&quot;&quot;;
        var strActionReason=&quot;&quot;;
        var strActionSubReason=&quot;&quot;;
        var strReuseActiveOrder=&quot;N&quot;;
        //VFTRCBU WA#19-End
        var strDueDate=&quot;&quot;;//WA#19 Drop2
        var strFutureOrder=&quot;&quot;;
		var strBtnFlg=&quot;&quot;;//20160606:Retrofit9.3.3:Add
		var strExprPartialComp=false;//20160606:Retrofit9.3.3:Add

		with(bcCarbonCopyH)//Start With 1
		{
			InvokeMethod(&quot;SetAdminMode&quot;,&quot;TRUE&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Ref Order Id&quot;);
			ActivateField(&quot;Max Line Items&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Order Type&quot;);
			ActivateField(&quot;Commands&quot;);
			ActivateField(&quot;Button Flag&quot;);//20160606:Retrofit9.3.3:Add
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);

			if(FirstRecord()) {
				iMaxLineItems=GetFieldValue(&quot;Max Line Items&quot;);
				strOrderHeadCommands=GetFieldValue(&quot;Commands&quot;);
				strBtnFlg=GetFieldValue(&quot;Button Flag&quot;);//20160606:Retrofit9.3.3:Add

				if(ToNumber(iMaxLineItems)&lt; 1 || ToNumber(iMaxLineItems)&gt; ToNumber(iDefMaxLine)) {
					iMaxLineItems=iDefMaxLine;
				}

				//20160606:Retrofit9.3.3:Add block				
				if(GetFieldValue(&quot;Status&quot;)==lovExpPartComp) {
					strExprPartialComp=true;
				} //GENTLE VF SCALISKAN

				//RCRISPIM:Retrofits 2015 Feb Minor-START
				iMaxLineItems=1;
				//app.SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				//20160606:Retrofit9.3.3:Add block
				if (strBtnFlg==&quot;E&quot;) {
					lovInProgress=lovExpInProgress;
				} //GENTLE VF SCALISKAN
				//SetFieldValue(&quot;Status&quot;,lovInProgress);//20160606:Retrofit9.3.3:Comment
				//RCRISPIM: Retrofits 2015 Feb Minor-END

				//20160606:Retrofit9.3.3:Add block below
				var oBCPick=GetPicklistBusComp(&quot;Status&quot;);
				with(oBCPick) {
					ClearToQuery();
					SetSearchSpec(&quot;Value&quot;,lovInProgress);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
						Pick();
				}
				//oBCPick = null;
				strCreatedBy=GetFieldValue(&quot;Created By&quot;);
				WriteRecord();

				//app.SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;); //RCRISPIM:Retrofits 2015 Feb Minor

				inHeadComm.SetProperty(&quot;Commands&quot;,strOrderHeadCommands);

				ParseCommands(inHeadComm,outHeadComm);//Parse Order Header Commands

				strOrderSubType=outHeadComm.GetProperty(&quot;ORDER#Order Sub Type&quot;);//RCRISPIM:Retrofits 2015 Feb Minor
				inHeadComm.Reset();
				inHeadComm.SetProperty(&quot;OrderId&quot;,&quot;&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Prevent Automatic Cancellation&quot;,&quot;Y&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Bulk Order Flg&quot;,&quot;Y&quot;);
				//outHeadComm.SetProperty(&quot;ORDER#VF CarbCopy Validated&quot;,&quot;N&quot;);//RCRISPIM:Retrofits 2015 Feb Minor //20160606:Retrofit9.3.3:Comment
				//20160606:Retrofit9.3.3:Added block
				if (strBtnFlg != &quot;E&quot;) {
					outHeadComm.SetProperty(&quot;ORDER#VF CarbCopy Validated&quot;, &quot;N&quot;);
				} //GENTLE VF SCALISKAN
				inHeadComm.AddChild(outHeadComm);

				with(bcCarbonCopyLI)//Start With 2
				{
					SetViewMode(AllView);
					ClearToQuery();
					//SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos; AND [Created Order Id] IS NULL&quot;);//20160606:Retrofit9.3.3:Replaced by code below
					if (strBtnFlg==&quot;E&quot;) { //GENTLE VF SCALISKAN
						SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot; + strCCHederId + &quot;&apos; AND ([Status]=&apos;&quot; + lovNew + &quot;&apos; OR [Status]=&apos;&quot; + lovError + &quot;&apos;)&quot;);
					} else {
						SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot; + strCCHederId + &quot;&apos; AND [Created Order Id] IS NULL&quot;);
					}
					//SetSortSpec(&quot;Customer Code(ASCENDING),Dealer Code(ASCENDING),Billing Account Code(ASCENDING)&quot;); //20160606:Retrofit9.3.3:Comment
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();

					//while(bCCLineItem) //FTOSCANO Old Expression: while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false)
					while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false) //HSOUSA PROD Retrofits 28/08
					{
						strBillAccCode=GetFieldValue(&quot;Billing Account Code&quot;);
						strCustomerCode=GetFieldValue(&quot;Customer Code&quot;);
						strMSISDN=GetFieldValue(&quot;MSISDN&quot;);
						strICCID=GetFieldValue(&quot;ICCID&quot;);
						strCommands=GetFieldValue(&quot;Commands&quot;);
						strDelarCode=GetFieldValue(&quot;Dealer Code&quot;);
						strRootAssetId=GetFieldValue(&quot;Asset Id&quot;);
						sProductList=&quot;&quot;;
						strErrDesc=&quot;&quot;;

						//VFTRCBU WA#19-Begin
                  		strActionType=GetFieldValue(&quot;VFTRCBU Action Type&quot;);
               			strActionReason=GetFieldValue(&quot;VFTRCBU Action Reason&quot;);
                  		strActionSubReason=GetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;);

						strDueDate=GetFieldValue(&quot;VFTRCBU Due Date&quot;);//WA#19 Drop2
	                    strFutureOrder=GetFieldValue(&quot;VFTRCBU Future Order&quot;);//WA#19 Drop2
                        
						var inComm=app.NewPropertySet();
                 		inComm.SetProperty(&quot;MSISDN&quot;,strMSISDN);
                  		inComm.SetProperty(&quot;ICCID&quot;,strICCID);
                  		inComm.SetProperty(&quot;Dealer Code&quot;,strDelarCode);
                  		inComm.SetProperty(&quot;Customer Code&quot;,strCustomerCode);
                  		inComm.SetProperty(&quot;Billing Account Code&quot;,strBillAccCode);
                  		inComm.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);
  						inComm.SetProperty(&quot;Action Type&quot;,strActionType);
  	   					inComm.SetProperty(&quot;Action Reason&quot;,strActionReason);

                  		strErrDesc=ValidateInputs(inComm);

						if(strErrDesc!=&quot;&quot;)
						{
							SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 499));
							SetFieldValue(&quot;Status&quot;,lovError);
							bSubErr=true;
						}
						else
						{
							var inComm=app.NewPropertySet(); //RCRISPIM: Retrofits 2015 February Minor
							var outComm=app.NewPropertySet();
							var inProp=app.NewPropertySet();
							var outProp=app.NewPropertySet();
							var bsWFProcMng=app.GetService(&quot;Workflow Process Manager&quot;);

							//RCRISPIM:Retrofits 2015 Feb Minor-START
							inComm.SetProperty(&quot;MSISDN&quot;,strMSISDN);
							inComm.SetProperty(&quot;ICCID&quot;,strICCID);
							inComm.SetProperty(&quot;Dealer Code&quot;,strDelarCode);
							inComm.SetProperty(&quot;Customer Code&quot;,strCustomerCode);
							inComm.SetProperty(&quot;Billing Account Code&quot;,strBillAccCode);
							inComm.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);
							//RCRISPIM:Retrofits 2015 Feb Minor-END
							inHeadComm.GetChild(0).SetProperty(&quot;ORDER#VF Dealer Code&quot;,strDelarCode);

							//WA#19 Drop2-Begin
							if (strFutureOrder!=&quot;&quot; &amp;&amp; strFutureOrder!=null &amp;&amp; strFutureOrder!=&quot;N&quot;)
 							{
								if (strDueDate!=&quot;&quot; &amp;&amp; strDueDate!=null)
								{
									outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;,strFutureOrder);
									outHeadComm.SetProperty(&quot;ORDER#Requested Ship Date&quot;,strDueDate);
								}
								else
								{
									outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;,strFutureOrder);											                                            
								}
							}
							//WA#19 Drop2-End

							CheckMsisdnOnAsset(inComm,outComm);// Check msisdn for account in assets

							strAccountId=outComm.GetProperty(&quot;AccountId&quot;);
							strBillAccId=outComm.GetProperty(&quot;BillAccountId&quot;);
							strErrDesc=outComm.GetProperty(&quot;ErrorMsg&quot;);
							strServiceAccountId=outComm.GetProperty(&quot;ServiceAccountId&quot;);
							strAssetIntegId=outComm.GetProperty(&quot;IntegrationId&quot;);	
							strRootAssetId=outComm.GetProperty(&quot;RootAssetId&quot;);

							if(strErrDesc!=&quot;&quot;)//DEF-3868 VFTR Retofits|TiagoRocha
							{
								strCreatedOrderId=&quot;&quot;;
								strCreRootItemID=&quot;&quot;;
							}

							if(strCommands!=&quot;&quot; &amp;&amp; strCommands!=null &amp;&amp; strErrDesc==&quot;&quot;)
							{
								inComm.Reset();
								outComm.Reset();
								inProp.SetProperty(&quot;Commands&quot;,strCommands);
								inProp.SetProperty(&quot;Carbon Copy LI&quot;,GetFieldValue(&quot;Id&quot;));
								inProp.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);			
								inComm.SetProperty(&quot;Carbon Copy LI&quot;,GetFieldValue(&quot;Id&quot;));
								ParseCommands(inProp,outProp);
								inProp.AddChild(outProp);
								CheckShortNumberVPN(inProp,outProp);
								strErrDesc=outProp.GetProperty(&quot;ErrorMsg&quot;);

								if(strErrDesc==&quot;&quot;)
								{
									SearchApnInAssetAndGetStaticIp(inProp,outProp);
									strErrDesc=outProp.GetProperty(&quot;ErrorMsg&quot;);

									if(strErrDesc!=&quot;&quot;)
									{
										bSubErr=true;
									}
								}
								var jjj=outProp.Copy();
								inComm.AddChild(jjj);
							}

							if(strErrDesc==&quot;&quot;)
							{
								inProp.Reset();
								outProp.Reset();
								//HSOUSA-Retrofit 30.04
								inProp.SetProperty(&quot;RowId&quot;,strAccountId);
								inProp.SetProperty(&quot;Asset Integration Id&quot;,strAssetIntegId);
								inProp.SetProperty(&quot;Billing Account Id&quot;,strBillAccId);
								inProp.SetProperty(&quot;Service Account Id&quot;,strServiceAccountId);
								inProp.SetProperty(&quot;Root Asset Id&quot;,strRootAssetId);
								//inProp.SetProperty(&quot;Order Sub Type&quot;,strOrderSubType);
								//inProp.SetProperty(&quot;Order Subtype&quot;,strOrderSubType);
								inProp.SetProperty(&quot;Order Type&quot;,app.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Modify Product &amp; Service&quot;));
								inProp.SetProperty(&quot;Quote Price List Id&quot;,&quot;Price List Id&quot;);
								inProp.SetProperty(&quot;BC Context&quot;,&quot;Asset&quot;);
								inProp.SetProperty(&quot;Skip Goto View&quot;,&quot;Y&quot;);
								inProp.SetProperty(&quot;ExtCal&quot;,&quot;Y&quot;);
								inProp.SetProperty(&quot;SkipOpenConfigurator&quot;,&quot;Y&quot;);
								inProp.SetProperty(&quot;OrSuTpFLG&quot;,&quot;ModifyOption&quot;);
								var strActionTypeENU=app.InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,strActionType);
								inProp.SetProperty(&quot;Action Type&quot;,strActionType);//HSOUSA 30.04 Added
								inProp.SetProperty(&quot;Action Reason&quot;,strActionReason);//HSOUSA 30.04 Added
								inProp.SetProperty(&quot;Action Sub Reason&quot;,strActionSubReason);//HSOUSA 30.04 Added
								inProp.SetProperty(&quot;Reuse Active Order&quot;,strReuseActiveOrder);//HSOUSA 30.04 Added

								DeactvOldAsset(inProp.GetProperty(&quot;Root Asset Id&quot;));//Deactivate Old Assets

								if((iLineCount%iMaxLineItems)==0 || strPrevCustomerCode!=strCustomerCode || strDelarCode!=strPrevDelarCode)
							    {
							    	strPrevCustomerCode=strCustomerCode;
									strPrevDelarCode=strDelarCode;
                           			strReuseActiveOrder=&quot;N&quot;;
								}
								else
								{
									strReuseActiveOrder=&quot;Y&quot;;
									strCreatedOrderId=strPrevCreatedOrderId; //RCRISPIM: Retrofits 2015 February Minor
								}

								if(strErrDesc==&quot;&quot;)
								{
									//HSOUSA-Added because function reached limit
									SubModifyOptions(inProp,outProp,inComm,outComm,inHeadComm,outHeadComm);

									//++IMARTINS 16052016 Added to get error from outHeadComm, e.g. when there are errors setting the FDO duedate
									strErrDesc=outHeadComm.GetProperty(&quot;ErrorMsg&quot;);
									if(strErrDesc==&quot;&quot;)
									{
										strErrDesc=outComm.GetProperty(&quot;ErrorMsg&quot;);
									}
									//--IMARTINS
									strCreatedOrderId=outProp.GetProperty(&quot;Order Id&quot;);
									strCreRootItemID=outProp.GetProperty(&quot;Root Item Id&quot;);
								}
							}
							if(strErrDesc!=&quot;&quot;)
							{
								SetFieldValue(&quot;Status&quot;,lovError);
								SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0,500));
								bSubErr=true;
								SetFieldValue(&quot;Created Order Id&quot;,strCreatedOrderId);
								SetFieldValue(&quot;Created Order Item Id&quot;,strCreRootItemID);
                                
								if(strVPNInAttributes==false)
								{
									ReleaseVPN(inComm,outComm);
								}
							}
							else
							{
								if (strBtnFlg==&quot;E&quot;)//GENTLE VF SCALISKAN
								{
									inProp.Reset();
									outProp.Reset();
									inProp.SetProperty(&quot;OHeadId&quot;,strCreatedOrderId);
									inProp.SetProperty(&quot;OItemId&quot;,strCreRootItemID);
									inProp.SetProperty(&quot;OrderType&quot;,&quot;Modify Order&quot;);//EBU Retrofit DEF-11226

									ValidateOrder(inProp, outProp);
									strErrDesc=outProp.GetProperty(&quot;ErrorMsg&quot;);
									UpdateOrderSystemField(strCCHederId+&quot;^&quot;+bcCarbonCopyLI.GetFieldValue(&quot;Id&quot;));
									if (strErrDesc == &quot;&quot; || strErrDesc == null) {
										outProp.Reset();
										SubmitOrderExpress(inProp, outProp);
										strErrDesc=outProp.GetProperty(&quot;Error Desc&quot;);
										lovCreated=outProp.GetProperty(&quot;Status&quot;);
										if (strErrDesc==&quot;&quot;) {
											strExprPartialComp=true;
										} else {
											strErrDesc =  + &quot;Submit Error: &quot; + strErrDesc;
										}
									}
									if (strErrDesc!=&quot;&quot;) {
										bSubErr=true;
										lovCreated=lovError;
										try {
											CancelRootItem(strCreRootItemID);
											CancelOrder(strCreatedOrderId);
										} catch (e) {
											strErrDesc = strErrDesc + &quot;\n &quot; + e.toString();
										}
									}
								}

								SetFieldValue(&quot;Status&quot;,lovCreated);
								SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 500));//20160606:Retrofit9.3.3:replaces previous SetField
								SetFieldValue(&quot;Created Order Id&quot;,strCreatedOrderId);
								SetFieldValue(&quot;Created Order Item Id&quot;,strCreRootItemID);
								iLineCount=iLineCount+1;
							}
						}
						WriteRecord();//RCRISPIM:Retrofits 2015 Feb Minor
						bCCLineItem=NextRecord();
					}
					//WriteRecord();//RCRISPIM:Retrofits 2015 Feb Minor
				}//End With 2
				
				//HSOUSA-Rollback 30.04
				//app.SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);

				if (strBtnFlg==&quot;E&quot;) {
					lovError=lovExpError;
				}//GENTLE VF SCALISKAN

				//20160606:Retrofit9.3.3:Add block below 				
				with(oBCPick) {
					ClearToQuery();
					if(bSubErr) {
						if(strExprPartialComp)//GENTLE VF SCALISKAN
						{
							//SetFieldValue(&quot;Status&quot;,lovExpPartComp);
							SetSearchSpec(&quot;Value&quot;,lovExpPartComp);
						} else {
							//SetFieldValue(&quot;Status&quot;,lovError);
							SetSearchSpec(&quot;Value&quot;,lovError);
						}
						//SetFieldValue(&quot;Button Flag&quot;,1); HSOUSA Rollback 29.04
					} else {
						if (strBtnFlg==&quot;E&quot;)//GENTLE VF SCALISKAN
						{
							//SetFieldValue(&quot;Status&quot;,sStatusCCCompleted);
							bcCarbonCopyH.SetFieldValue(&quot;Button Flag&quot;,0);
							SetSearchSpec(&quot;Value&quot;,sStatusCCCompleted);
						} else {
							//SetFieldValue(&quot;Status&quot;,lovCreated);
							bcCarbonCopyH.SetFieldValue(&quot;Button Flag&quot;,2);
							SetSearchSpec(&quot;Value&quot;,lovCreated);
						}
					}
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
						Pick();
				}
				oBCPick=null;

				//HSOUSA-Rollback 30.04
				//app.SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				WriteRecord();
			}

		}// End With 1
	}
	catch(e)
	{
		bSubErr=true;
		Output.SetProperty(&quot;Error&quot;,e.toString());//RCRISPIM: Retrofits 2015 Feb Minor
	}
	finally
	{
		bcCarbonCopyLI=null;
		bcCarbonCopyH=null;
		boCarbonCopy=null;
	}
}"
			   SEQUENCE="41"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NextProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NextProduct(Inputs,Outputs)
{
	try
	{
		var sProdList	= Inputs.GetProperty(&quot;ProdList&quot;);
		var sProduct	= sProdList.split(&quot;;&quot;);
			sProduct	= sProduct[0].split(&quot;=&quot;);
		var sPartNum	= sProduct[0];
		var sOpr		= sProduct[1];
		sProdList		= sProdList.substring(sProdList.indexOf(&quot;;&quot;)+1);
		Outputs.SetProperty(&quot;ProductList&quot;,sProdList);
		Outputs.SetProperty(&quot;PartNum&quot;,sPartNum);
		Outputs.SetProperty(&quot;eConfOpr&quot;,sOpr);
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;err&quot;,e.toString());
		Outputs.SetProperty(&quot;eConfOpr&quot;,e.toString());
	}
	finally
	{
	}
}"
			   SEQUENCE="42"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="OperateOrderHeaderCommands"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function OperateOrderHeaderCommands(Input,Output)
{
	try
	{
		/* IMARTINS VFTRCBU-33970 10072016 | clear ErrorMsg in Output propertyset
		   ErrorMsg property was never cleared after each CarbonCopyItem execution, so it was updating each line
		   with the same error message */
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;&quot;);
		
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcOrderH		= boCarbonCopy.GetBusComp(&quot;Order Entry - Orders&quot;);
		
		var strOrderId	= Input.GetProperty(&quot;OrderId&quot;);
		var cntCommandExist = Input.GetChildCount();
		
		var propName = &quot;&quot;;
		var propVal = &quot;&quot;;
		var bIsMatch = false;
		var patt = /ORDER#/;
		bIsMNP = false;
		TheApplication().SetProfileAttr(&quot;reasonOrderId&quot;,strOrderId);
		if(cntCommandExist&gt;0)
		{
			with(bcOrderH)
			{
				SetViewMode(AllView);
				ClearToQuery();
				for(var i = 0;i&lt;cntCommandExist;i++)
				{
					propName = Input.GetChild(i).GetFirstProperty();
					while(propName!=&quot;&quot;)
					
					{
						var rExp = new RegExp(patt);
						bIsMatch = rExp.test(propName);
						if(bIsMatch) 
						{
							propName = propName.substring(6);
							ActivateField(propName);
						}
						propName = Input.GetChild(i).GetNextProperty();
					}
				}
				
				SetSearchExpr(&quot;[Id]=&apos;&quot;+strOrderId+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					for(var i = 0;i&lt;cntCommandExist;i++)
					{
						propName = Input.GetChild(i).GetFirstProperty();
						while(propName!=&quot;&quot;)
						{
							var rExp = new RegExp(patt);
							bIsMatch = rExp.test(propName);
							if(bIsMatch) 
							{
								propVal = Input.GetChild(i).GetProperty(propName);
								propName = propName.substring(6);
								if(propName == &quot;Order Sub Type&quot; &amp;&amp; propVal==&quot;MNP Port In&quot;)
								{
									bIsMNP = true;
								}
								if(propName==&quot;VF Dealer Code&quot;)
								{
									var oBCPick = GetPicklistBusComp(&quot;VF Dealer Code&quot;);
									with (oBCPick)
									{
									   ClearToQuery();
									   SetSearchSpec(&quot;VF Dealer Code&quot;, propVal);
									   ExecuteQuery(ForwardOnly);
									   if (FirstRecord())
									      Pick();
									}
									oBCPick = null;
									propName = Input.GetChild(i).GetNextProperty();
									continue;
								}
								if(propName==&quot;Order Reason&quot;)
								{
									var reason=false;
									var oBCPick = GetPicklistBusComp(&quot;Order Reason&quot;);
									with (oBCPick)
									{
									   ClearToQuery();
									   SetSearchSpec(&quot;Translated Name&quot;, propVal);
									   ExecuteQuery(ForwardOnly);
									   var req = FirstRecord();
									   while (req)
									   {
									   	if(GetFieldValue(&quot;Translated Name&quot;)== propVal)
									   	{
									   		Pick();
									   		reason = true;
									   	}
									    req = NextRecord();
									   }
									}
									if(reason)
									{
										oBCPick = null;
										propName = Input.GetChild(i).GetNextProperty();
										continue;
									}
									else
									{
										throw(&quot;Given Order Reason :&quot;+propVal+&quot; did not find&quot;);
									}
								}								
								if(propName==&quot;VF Future Order Flag&quot;)
								{
									WriteRecord();
									InvokeMethod(&quot;RefreshRecord&quot;);
								}
								SetFieldValue(propName,propVal);
							}
							propName = Input.GetChild(i).GetNextProperty();							
						}
					}

					WriteRecord();
					if(bIsMNP) 
					{
						DocumentUpload(strOrderId);
						RefNumPortId(strOrderId);
					}
				}
				else
				{
					throw(&quot;Given Order Id :&quot;+strOrderId+&quot; did not find&quot;);
				}
			}
		}
	}
	catch(e)
	{
		var rExp = new RegExp(&quot;An invalid assignment error has occurred.&quot;);
		bIsMatch = rExp.test(e.toString());
		if(bIsMatch)
		{
			Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata &apos;OperateOrderHeaderCommands&apos;: &quot;+propName+&quot; a girdiğiniz değer &quot;+propVal+&quot; için hata oluştu.&quot;);
		}
		else
		{
			Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata &apos;OperateOrderHeaderCommands&apos;: &quot;+e.toString());
		}
		Output.SetProperty(&quot;CreatedOrderId&quot;,&quot;&quot;);
	}
	finally 
	{
		bcOrderH		= null;
		boCarbonCopy	= null;
	}
}"
			   SEQUENCE="43"
			   UPDATED="10/13/2016 00:45:05"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="OperateOrderItemCommands"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function OperateOrderItemCommands(Input,Output)
{
	try
	{	
	
		var boMCADOrder			= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcMCADOrderLI		= boMCADOrder.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		var bcMCADOrderLIXA		= boMCADOrder.GetBusComp(&quot;VF Carbon Copy Order Item XA&quot;);
		
		var strRootOrderItemId	= Input.GetProperty(&quot;Root Order Item Id&quot;);
		var strBillAccId	= Input.GetProperty(&quot;BillAccId&quot;);
	
		var bNextLI = false;
		var bNextOrderLI = false;
		var bNextLIXA = false;
		
		var propName = &quot;&quot;;
		var propVal = &quot;&quot;;
		var bIsMatch = false;
		var pattItem = &quot;&quot;; //&quot;1000#&quot;;
		var pattDelItem = &quot;&quot;; //&quot;3001@&quot;;
		var pattItemXA =&quot;&quot;; //&quot;1000.&quot;;
		var pattItemIdx = &quot;&quot;; //&quot;1000[idx]#;
		var pattItemXAIdx =&quot;&quot;; //&quot;1000[idx].&quot;;
		var pattOrder = /ORDER#/;
		var indxOF =&quot;&quot;;
		var strAttrName = &quot;&quot;;
		var strAttrDataType = &quot;&quot;;
		var strCurrPartNum = &quot;&quot;;
		var cntCommandExist = Input.GetChildCount();
		var pProdCount = TheApplication().NewPropertySet();
		var nPrdInx=&quot;&quot;;
		var sOrderSubType = Input.GetProperty(&quot;OrSuTpFLG&quot;);
		var strActionCode = lovAdd;
		var strPrevAttrValue=&quot;&quot;;
		var bAttribChanged = &quot;&quot;;
		var sOrderSubTypeLIC=&quot;&quot;;
				
		with(bcMCADOrderLI)
		{
			SetViewMode(AllView);
			ClearToQuery();
			if(cntCommandExist&gt;0)
			{
				propName = Input.GetChild(0).GetFirstProperty();
				while(propName!=&quot;&quot;)
				{
					var rExp = new RegExp(pattOrder);
					
					bIsMatch = rExp.test(propName);
					indxOF = propName.indexOf(&quot;#&quot;);
					if(!bIsMatch &amp;&amp; indxOF &gt; -1) 
					{
						propName = propName.substring(indxOF+1);
						ActivateField(propName);
					}
					propName = Input.GetChild(0).GetNextProperty();
				}
			}
			
			ActivateField(&quot;MSISDN&quot;);
			ActivateField(&quot;IMSI&quot;);
			ActivateField(&quot;ICCID&quot;);
			ActivateField(&quot;Due Date&quot;);
			ActivateField(&quot;Service Id&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Action Code&quot;);
			ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;VF Order Sub Type LIC&quot;);			
			SetSearchExpr(&quot;[Root Order Item Id]=&apos;&quot;+strRootOrderItemId+&quot;&apos;&quot;);	
			ExecuteQuery(ForwardOnly);
			bNextLI = FirstRecord();
			
			while(bNextLI) //Line Item Operations
			{
				sOrderSubTypeLIC = GetFieldValue(&quot;VF Order Sub Type LIC&quot;);
				strCurrPartNum = GetFieldValue(&quot;Part Number&quot;);
				bAttribChanged =false;
				nPrdInx=pProdCount.GetProperty(strCurrPartNum);
				
				if(nPrdInx==&quot;&quot;)
				{
					nPrdInx = 1;
				}
				else
				{
					nPrdInx = ToNumber(nPrdInx)+1;
				}
				
				pProdCount.SetProperty(strCurrPartNum,nPrdInx);
				if(sOrderSubType!=&quot;ModifyOption&quot;)
				{
					if(strCurrPartNum == &quot;3001&quot; &amp;&amp; (Input.GetChild(0).GetProperty(&quot;3001.Short Number&quot;) == &quot;&quot; || Input.GetChild(0).GetProperty(&quot;3001.Group Name&quot;) == &quot;&quot;))
					{
						DeleteRecord();
						CheckCompatibility(Input,Output);//DEF-4670 | TiagoRocha RETROFITS
						continue;
					}
					
					SetFieldValue(&quot;MSISDN&quot;,&quot;&quot;);
					SetFieldValue(&quot;IMSI&quot;,&quot;&quot;);
					SetFieldValue(&quot;ICCID&quot;,&quot;&quot;);
					SetFieldValue(&quot;Due Date&quot;,&quot;&quot;);
					SetFieldValue(&quot;Service Id&quot;,&quot;&quot;);
					SetFieldValue(&quot;Action Code&quot;,lovAdd);
				}
				if(cntCommandExist&gt;0)
				{
					pattItem = &quot;&quot;+strCurrPartNum+&quot;#&quot;;
					pattItemXA = &quot;&quot;+strCurrPartNum+&quot;\\.&quot;;
					pattItemIdx = &quot;&quot;+strCurrPartNum+&quot;[&quot;+nPrdInx+&quot;]#&quot;;
					pattItemXAIdx = &quot;&quot;+strCurrPartNum+&quot;\\[&quot;+nPrdInx+&quot;\\]\\.&quot;;
					propName = Input.GetChild(0).GetFirstProperty();
					if(sOrderSubType==&quot;ModifyOption&quot;)
					{
						if(GetFieldValue(&quot;Action Code&quot;)==lovAdd)
						{SetFieldValue(&quot;Billing Account Id&quot;,strBillAccId);}
						strActionCode = lovModify;
						if(sProductList.indexOf(strCurrPartNum+&quot;=ADD&quot;) &gt; -1)
						{
							if(GetFieldValue(&quot;Action Code&quot;)!=lovAdd)
							{
								bNextLI = NextRecord();
								continue;
							}
							strActionCode = lovAdd;
						}
					}
					while(propName!=&quot;&quot;)
					{
						var rExp = new RegExp(pattItemIdx);

						bIsMatch = rExp.test(propName);
						indxOF = propName.indexOf(&quot;#&quot;);
						if(!bIsMatch) 
						{
							rExp = new RegExp(pattItem);
							bIsMatch = rExp.test(propName);
						}
						if(bIsMatch) 
						{
							propVal = Input.GetChild(0).GetProperty(propName);
							propName = propName.substring(indxOF+1);
							SetFieldValue(propName,propVal);
							if(sOrderSubType==&quot;ModifyOption&quot;)
							{
								SetFieldValue(&quot;Action Code&quot;,strActionCode);
							}
						}
						propName = Input.GetChild(0).GetNextProperty();
					}
				}
				WriteRecord();

				with(bcMCADOrderLIXA)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Action Code&quot;);
					ActivateField(&quot;Cfg State Code&quot;);
										
					SetSearchExpr(&quot;[Object Id]=&apos;&quot;+bcMCADOrderLI.GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					bNextLIXA = FirstRecord();
					while(bNextLIXA) // Attribute operations
					{
						strAttrName = GetFieldValue(&quot;Name&quot;);
						strAttrDataType = GetFieldValue(&quot;Data Type&quot;);
						if(sOrderSubType!=&quot;ModifyOption&quot;)
						{
							SetFieldValue(&quot;Action Code&quot;,lovAdd);
						}
						if(strAttrName!=&quot;TaxType&quot; &amp;&amp; strAttrName!=&quot;Bulk Order&quot; &amp;&amp; strAttrName!=&quot;Segmentation Field&quot; &amp;&amp; strAttrName!=&quot;Phone Directory&quot; &amp;&amp; strCurrPartNum == &quot;1000&quot; &amp;&amp; sOrderSubType!=&quot;ModifyOption&quot; )
						{
							SetFieldValue(&quot;Text Value&quot;,&quot;&quot;);	
							SetFieldValue(&quot;Date Value&quot;,&quot;&quot;);
							SetFieldValue(&quot;Numeric Value&quot;,&quot;&quot;);
							SetFieldValue(&quot;Previous Date Value&quot;,&quot;&quot;);
							SetFieldValue(&quot;Previous Text Value&quot;,&quot;&quot;);
							SetFieldValue(&quot;Previous Numeric Value&quot;,&quot;&quot;);
							WriteRecord();
						}
						if(cntCommandExist&gt;0)
						{
							propName = Input.GetChild(0).GetFirstProperty();
							while(propName!=&quot;&quot;)
							{
								var rExp = new RegExp(pattItemXAIdx);
								
								bIsMatch = rExp.test(propName);
								indxOF = propName.indexOf(&quot;.&quot;);
								
								if(!bIsMatch)
								{
									rExp = new RegExp(pattItemXA);
									bIsMatch = rExp.test(propName);
								}
								
								if(bIsMatch) 
								{
									propVal = Input.GetChild(0).GetProperty(propName);
									propName = propName.substring(indxOF+1);
									if(propName == strAttrName)
									{
										if(strAttrName == &quot;Short Number&quot; )
										{
											strVPNInAttributes = true;
										}
										//DEF-6734
										//bAttribChanged =true;
										strPrevAttrValue = propVal;
										if(strAttrDataType==&quot;Text&quot; || strAttrDataType==&quot;Metin&quot;)
										{	
											if(sOrderSubType==&quot;ModifyOption&quot; &amp;&amp; sProductList.indexOf(strCurrPartNum+&quot;=ADD&quot;) &lt; 0)
											{
												strPrevAttrValue = GetFieldValue(&quot;Previous Text Value&quot;);
											}
											//DEF-6734
											if(GetFieldValue(&quot;Previous Text Value&quot;)!=propVal)
                                            {
                                            	bAttribChanged =true;
                                            }
                                            else
                                            {
                                            	propName = Input.GetChild(0).GetNextProperty();
                                                continue;
                                            }
											SetFieldValue(&quot;Text Value&quot;,propVal);
											SetFieldValue(&quot;Previous Text Value&quot;,strPrevAttrValue);
										}
										else if(strAttrDataType==&quot;Number&quot; || strAttrDataType== &quot;Tam Sayı&quot; || strAttrDataType==&quot;Integer&quot; || strAttrDataType== &quot;Numara&quot;)
										{	
											if(sOrderSubType==&quot;ModifyOption&quot; &amp;&amp; sProductList.indexOf(strCurrPartNum+&quot;=ADD&quot;) &lt; 0)
											{
												strPrevAttrValue = GetFieldValue(&quot;Previous Numeric Value&quot;);
											}
											//DEF-6734
											if(GetFieldValue(&quot;Previous Numeric Value&quot;)!=propVal)
                              				{
                                               	bAttribChanged =true;
                               				}
                               				else
                               				{
                                               propName = Input.GetChild(0).GetNextProperty();
                                               continue;
                               				}
                               				//DEF-6734
											if(GetFieldValue(&quot;Previous Date Value&quot;)!=propVal)
                              				{
                                               	bAttribChanged =true;
                               				}
                               				else
                               				{
                                               propName = Input.GetChild(0).GetNextProperty();
                                               continue;
                               				}

											SetFieldValue(&quot;Numeric Value&quot;,propVal);
											SetFieldValue(&quot;Previous Numeric Value&quot;,strPrevAttrValue);
										}
										else if(strAttrDataType==&quot;Date&quot; || strAttrDataType==&quot;Tarih&quot;)
										{
											if(sOrderSubType==&quot;ModifyOption&quot; &amp;&amp; sProductList.indexOf(strCurrPartNum+&quot;=ADD&quot;) &lt; 0)
											{
												strPrevAttrValue = GetFieldValue(&quot;Previous Date Value&quot;);
											}
                                           
											SetFieldValue(&quot;Date Value&quot;,propVal);
											SetFieldValue(&quot;Previous Date Value&quot;,strPrevAttrValue);
										}
										SetFieldValue(&quot;Action Code&quot;,strActionCode);
										SetFieldValue(&quot;Cfg State Code&quot;,&quot;User Requested Item&quot;);									
									}
								}
								propName = Input.GetChild(0).GetNextProperty();
							}
						}
						if (strAttrName == &quot;OrderSubType&quot; &amp;&amp; sOrderSubTypeLIC != null &amp;&amp; sOrderSubTypeLIC != &quot;&quot;)
						{
							SetFieldValue(&quot;Text Value&quot;, sOrderSubTypeLIC);
							if (GetFieldValue(&quot;Action Code&quot;) == lovAdd)
								SetFieldValue(&quot;Previous Text Value&quot;, sOrderSubTypeLIC);
						}
						WriteRecord();
						bNextLIXA = NextRecord();
					}
				}
				if(bAttribChanged==true &amp;&amp; sOrderSubType==&quot;ModifyOption&quot;)
				{
					SetFieldValue(&quot;Action Code&quot;,strActionCode);
				}
				bNextLI = NextRecord();
			}
		}
	}
	catch(e)
	{
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata: &apos;OperateOrderItemCommands&apos;:&quot;+strRootOrderItemId+&quot; - &quot;+e.toString());
	}
	finally 
	{	
		bcMCADOrderLI =null;
		bcMCADOrderLIXA =null;
		boMCADOrder	= null;
	}
}"
			   SEQUENCE="44"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ParseCommands"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ParseCommands(Input,Output)
{
	var strCommands = Input.GetProperty(&quot;Commands&quot;);
	var arrCommands = strCommands.split(&quot;;&quot;);

	for (var i = 0;i&lt;arrCommands.length;i++)
	{
		var arrFieldValue = arrCommands[i].split(&quot;=&quot;);
		if(arrFieldValue.lenght=2)
		{
			if(arrFieldValue[1]!= &quot;&quot; &amp;&amp; arrFieldValue[1]!= null &amp;&amp; arrFieldValue[1]!=&quot;&lt;EMPTY&gt;&quot;)
			{
				if(arrFieldValue[1] == &quot;ADD&quot; || arrFieldValue[1]==&quot;REMOVE&quot;)
				{
					sProductList = sProductList+&quot;&quot;+arrFieldValue[0]+&quot;=&quot;+arrFieldValue[1]+&quot;;&quot;;
				}
				else
				{
					Output.SetProperty(arrFieldValue[0],arrFieldValue[1]);
				}
			}
			else if(arrFieldValue[1]==&quot;&lt;EMPTY&gt;&quot;)
			{
				Output.SetProperty(arrFieldValue[0],&quot;&quot;);
			}
		}
	}
}"
			   SEQUENCE="45"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RefNumPortId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RefNumPortId(OrderId)
{
	try
	{
   		var OrderEntryBO	: BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var OrderEntryBC	: BusComp	= OrderEntryBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var AccountId		= &quot;&quot;;
		 //Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
   		with (OrderEntryBC)
   		{
	   		ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account Id&quot;);
			SetSearchSpec(&quot;Id&quot;,OrderId);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				AccountId = GetFieldValue(&quot;Account Id&quot;);
			}//Scripting 15: Account Id is required field at BC level, hence null check is not required.
		}
 		var AccountBO	: BusObject	= TheApplication().GetBusObject(&quot;Account&quot;);
 		var AccountBC	: BusComp	= AccountBO.GetBusComp(&quot;Account&quot;);
 		with (AccountBC)
 		{
	 		ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Contact SSN&quot;);
			ActivateField(&quot;Contact Last Name&quot;);
			ActivateField(&quot;Contact First Name&quot;);
			ActivateField(&quot;VF Tax Number&quot;);
			ActivateField(&quot;Name&quot;);
			SetSearchSpec(&quot;Id&quot;,AccountId);
			ExecuteQuery(ForwardOnly)
			if (FirstRecord())
			{
			    var strTcId				= GetFieldValue(&quot;Contact SSN&quot;);
			    var strContactName		= GetFieldValue(&quot;Contact Last Name&quot;);
			    var strContactSurname 	= GetFieldValue(&quot;Contact First Name&quot;);
	    		var strMNPTaxId			= GetFieldValue(&quot;VF Tax Number&quot;);
	    		var strMNPCorpName		= GetFieldValue(&quot;Name&quot;);
			}
		}
	//Date 
		var today		= new Date;		
 		var daysToAdd	= 2;
 		var dDate		= new Date(today.getTime() + daysToAdd*24*60*60*1000);
		var PortDate	= DateToString(dDate);
				
	//Create Port Id Sequences
		var BOOrderEntry	: BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var BcOrderEntryOrders	: BusComp = BOOrderEntry.GetBusComp(&quot;Order Entry - Orders&quot;);
		var Out = &quot;&quot;;
		var myBS : Service	= TheApplication().GetService (&quot;ACS Sequence Generator&quot;);
 		var inputs : PropertySet	= TheApplication().NewPropertySet ();
 		var outputs : PropertySet	= TheApplication().NewPropertySet ();
       
    // Search Order Id
    	BcOrderEntryOrders.ClearToQuery();
    	BcOrderEntryOrders.SetViewMode(AllView);//TLG-5312
    	BcOrderEntryOrders.ActivateField(&quot;VF TA Tc Id&quot;);
    	BcOrderEntryOrders.ActivateField(&quot;VF TA Name&quot;);
    	BcOrderEntryOrders.ActivateField(&quot;VF MNP Corporate Name&quot;);
    	BcOrderEntryOrders.ActivateField(&quot;VF MNP Tax Id&quot;);
		BcOrderEntryOrders.SetSearchSpec(&quot;Id&quot;,OrderId);
		BcOrderEntryOrders.ExecuteQuery(ForwardOnly); //Diva 27/03/2012: Added parameter for oracle review
		if (BcOrderEntryOrders.FirstRecord())
		{
	//insert Porting Date
    		BcOrderEntryOrders.SetFieldValue(&quot;VF TA Tc Id&quot;,strTcId);
    		BcOrderEntryOrders.SetFieldValue(&quot;VF TA Name&quot;,strContactName+&quot; &quot;+strContactSurname);
	   		BcOrderEntryOrders.SetFieldValue(&quot;VF MNP Corporate Name&quot;, strMNPCorpName);
	   		BcOrderEntryOrders.SetFieldValue(&quot;VF MNP Tax Id&quot;, strMNPTaxId);    		
   			BcOrderEntryOrders.WriteRecord();
   // Call Business Service with MNP unique sequence
	 		inputs.SetProperty (&quot;SequenceType&quot;, &quot;MNP&quot;);
	 		myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
	 		Out		= outputs.GetProperty(&quot;Sequence&quot;);
			
	// SetField MNP Sequence
			BcOrderEntryOrders.SetFieldValue(&quot;Port Id&quot;, Out);
	 		BcOrderEntryOrders.WriteRecord(); 		
	
	// Call Business Service with REQ unique sequence	
	   		inputs.SetProperty (&quot;SequenceType&quot;, &quot;REQ&quot;);
	 		myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
	 		Out		= outputs.GetProperty(&quot;Sequence&quot;);
			var anno	= dDate.getFullYear();
  	// SetField REQ Sequence
			BcOrderEntryOrders.SetFieldValue(&quot;Reference Number&quot;, &quot;VODAFONE-&quot;+anno+&quot;-&quot;+Out);
	 		BcOrderEntryOrders.WriteRecord();
	   		
	   		inputs.SetProperty (&quot;SequenceType&quot;, &quot;OrderRootTransaction&quot;);
			myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
	 		Out		= outputs.GetProperty(&quot;Sequence&quot;);

	 		while (Out.length &lt; 13)
	 		{
	 			Out = &quot;0&quot;+Out;
	 		}
	// SetField REQ Sequence
			BcOrderEntryOrders.SetFieldValue(&quot;Transaction Id&quot;, &quot;SBL&quot;+Out);
			BcOrderEntryOrders.WriteRecord();
		}
	}
	finally
	{
		OrderEntryBC = null;
		OrderEntryBO = null;
 		AccountBC = null;
 		AccountBO = null;
 		BcOrderEntryOrders = null;
		BOOrderEntry = null;
	 	inputs = null;
	 	outputs = null;
	 	myBS = null;	
	 	inProp = null;
	 	outProp = null; 
	 	BS	= null;	
	}
}"
			   SEQUENCE="46"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 22:19:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ReleaseVPN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ReleaseVPN(Inputs,Outputs)
{try{
	
		var cntCommandExist = Inputs.GetChildCount();
		var sCarbonCopyLineId = Inputs.GetProperty(&quot;Carbon Copy LI&quot;);
		var strShortNumber = &quot;&quot;;
		var strGroupId = &quot;&quot;;
		var sErrorMessage = &quot;&quot;;
		var psInputs : PropertySet = TheApplication().NewPropertySet();
		var psOutputs : PropertySet = TheApplication().NewPropertySet();
		var oServiceShortNum : Service = TheApplication().GetService(&quot;VF ManageVPNShortNumber BS&quot;);
			
		if(cntCommandExist&gt;0)
		{
			strShortNumber = Inputs.GetChild(0).GetProperty(&quot;3001.Short Number&quot;);
			strGroupId = Inputs.GetChild(0).GetProperty(&quot;3001.Group #&quot;);
			
			if(strShortNumber!=&quot;&quot; &amp;&amp; strGroupId !=&quot;&quot;)
			{
				psInputs.SetProperty(&quot;ReservationEntity&quot;, &quot;ORDER&quot;);
				psInputs.SetProperty(&quot;ActionType&quot;, &quot;Release&quot;);
				psInputs.SetProperty(&quot;ShortNumber&quot;, strShortNumber);
				psInputs.SetProperty(&quot;VPNGroupId&quot;,strGroupId);
				psInputs.SetProperty(&quot;RootAssetIntegId&quot;,sCarbonCopyLineId);
				
				oServiceShortNum.InvokeMethod(&quot;ManageVPNShortNumber&quot;, psInputs, psOutputs);
				
				strShortNumber = psOutputs.GetProperty(&quot;ShortNumber&quot;);
				sErrorMessage = psOutputs.GetProperty(&quot;ErrorMessage&quot;);
				if(sErrorMessage != &quot;&quot;)
				{
					//TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;VF_VPN_SHORT_NUM_KO&quot;));
					TheApplication().RaiseErrorText(&quot;Girmiş olduğunuz Kısa Numara geçersizdir. Lütfen farklı bir değer giriniz.&quot;);
				}
			}
		}				
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata &apos;ReleaseVPN&apos;: &quot;+e.toString());
	}
	finally 
	{		
	}
}"
			   SEQUENCE="47"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 22:19:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SearchApnInAssetAndGetStaticIp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SearchApnInAssetAndGetStaticIp(Inputs,Outputs)
{
	try
	{	var strMSISDN		= Inputs.GetProperty(&quot;MSISDN&quot;);
		var strRootAssetId	= Inputs.GetProperty(&quot;RootAssetId&quot;);
		var strInactive		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var strAssetId 		= &quot;&quot;;
		var bNextAssetXA	= &quot;&quot;;
		var strApnVal		= &quot;&quot;;
		var strApnNum		= &quot;&quot;;
		var strApn			= &quot;&quot;;
		var strStaticIdVal	= &quot;&quot;;
		var strAPN_Products	= &quot;&quot;;
		
		var cntCommandExist = Inputs.GetChildCount();
	
		var boAssetNoLink	= TheApplication().GetBusObject(&quot;Asset Mgmt - Asset (NoLink)&quot;);
		var bcAssetHP		= boAssetNoLink.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var bcAssetXaHP		= boAssetNoLink.GetBusComp(&quot;HP Submit - X Asset Mgmt - Asset XA&quot;);
		var strPartNum =&quot;&quot;;
		if(strRootAssetId!=&quot;&quot; &amp;&amp; strRootAssetId!=null &amp;&amp; cntCommandExist&gt;0)
		{
			
			if(Inputs.GetChild(0).GetProperty(&quot;1103.APN&quot;)!=&quot;&quot;)
			{
				strAPN_Products = strAPN_Products+&quot; OR [Product Part Number]=&apos;1103&apos;&quot;;
			}
			if(Inputs.GetChild(0).GetProperty(&quot;1108.APN&quot;)!=&quot;&quot;)
			{
				strAPN_Products = strAPN_Products+&quot; OR [Product Part Number]=&apos;1108&apos;&quot;;
			}
			if(Inputs.GetChild(0).GetProperty(&quot;1109.APN&quot;)!=&quot;&quot;)
			{
				strAPN_Products = strAPN_Products+&quot; OR [Product Part Number]=&apos;1109&apos;&quot;;
			}
			if(Inputs.GetChild(0).GetProperty(&quot;1116.APN&quot;)!=&quot;&quot;)
			{
				strAPN_Products = strAPN_Products+&quot; OR [Product Part Number]=&apos;1116&apos;&quot;;
			}
			if(Inputs.GetChild(0).GetProperty(&quot;16012.APN&quot;)!=&quot;&quot;)
			{
				strAPN_Products = strAPN_Products+&quot; OR [Product Part Number]=&apos;16012&apos;&quot;;
			}
			
			if(strAPN_Products!=&quot;&quot;)
			{
				strAPN_Products  = strAPN_Products.substring(strAPN_Products.indexOf(&quot;OR&quot;)+2);

				with(bcAssetHP)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Product Part Number&quot;);
					SetSearchExpr(&quot;[Root Asset Id]=&apos;&quot;+strRootAssetId+&quot;&apos; AND [Status]&lt;&gt; &apos;&quot;+strInactive+&quot;&apos; AND (&quot;+strAPN_Products+&quot;)&quot;);
					ExecuteQuery(ForwardOnly);
					var bNextAsset = FirstRecord();
					while(bNextAsset )
					{
						strPartNum = GetFieldValue(&quot;Product Part Number&quot;);
						strAssetId = GetFieldValue(&quot;Id&quot;);
						strApnVal = Inputs.GetChild(0).GetProperty(GetFieldValue(&quot;Product Part Number&quot;)+&quot;.APN&quot;);
						strStaticIdVal = Inputs.GetChild(0).GetProperty(GetFieldValue(&quot;Product Part Number&quot;)+&quot;.STATICIP&quot;);
						with(bcAssetXaHP)
						{
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;Name&quot;);
							ActivateField(&quot;Text Value&quot;);
							SetSearchExpr(&quot;[Object Id]=&apos;&quot;+strAssetId+&quot;&apos; AND ([Name] LIKE &apos;APN*&apos;)&quot;);
							ExecuteQuery(ForwardOnly);
							bNextAssetXA=FirstRecord();
							while(bNextAssetXA)
							{
								if(GetFieldValue(&quot;Text Value&quot;) == strApnVal)
								{
									strApnNum = GetFieldValue(&quot;Name&quot;).substring(3);
									Outputs.SetProperty(strPartNum+&quot;.STATICIP&quot;+strApnNum,strStaticIdVal);
								}
								bNextAssetXA=NextRecord();
							}
						}
							bNextAsset=NextRecord();
					}
				}
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata: &apos;SearchApnInAssetAndGetStaticIp&apos;: Asset Id-&quot;+strRootAssetId+&quot; - &quot;+e.toString());
	}
	finally
	{
		bcAssetHP		= &quot;&quot;;
		bcAssetXaHP		= &quot;&quot;;
		boAssetNoLink	= &quot;&quot;;
	}
}"
			   SEQUENCE="48"
			   UPDATED="08/21/2016 01:41:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName==&quot;LaunchCarbonCopy&quot;)
	{
		LaunchCarbonCopy(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;ValidateOrder&quot;)
	{
		ValidateOrder(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;LoadCarbonCopyItems&quot;)
	{
		LoadCarbonCopyItems(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;LaunchOrderItemValidation&quot;)
	{
		LaunchOrderItemValidation(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;SubmitOrder&quot;)
	{
		SubmitOrder(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;ImportFromLocal&quot;)
	{
		ImportFromLocal(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;DeleteErrorLines&quot;)
	{
		DeleteErrorLines(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;CancelBulkRequest&quot;)
	{
		CancelBulkRequest(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;GetProductInfo&quot;)
	{
		GetProductInfo(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;NextProduct&quot;)
	{
		NextProduct(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;CheckProdInInstance&quot;)
	{
		CheckProdInInstance(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;ParseCommands&quot;)
	{
		ParseCommands(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;GetActiveOrder&quot;)
	{
		GetActiveOrder(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;CheckMsisdnOnAsset&quot;)
	{
		CheckMsisdnOnAsset(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;CheckMPBX_Del&quot;)
	{
		CheckMPBX_Del(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;CheckLineStatus&quot;)
	{
		CheckLineStatus(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;CheckCompatibility&quot;) // TiagoRocha RETROFITS
	{
		CheckCompatibility(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;SetAssetIntegrationIds&quot;) // HSOUSA - Bundle Promotions
	{
		SetAssetIntegrationIds(Inputs,Outputs);
		return (CancelOperation);
	}
	if(MethodName==&quot;MaskOrderSubType&quot;)
	{
		MaskOrderSubType(Inputs.GetProperty(&quot;OrderId&quot;), Inputs.GetProperty(&quot;MaskSubType&quot;), Inputs.GetProperty(&quot;Restore&quot;)==&quot;true&quot;);
		return (CancelOperation);
	}
	if(MethodName==&quot;SetOrderSubTypeAttrib&quot;)
	{
		SetOrderSubTypeAttrib(Inputs.GetProperty(&quot;RootItemId&quot;));
		return (CancelOperation);
	}
	if(MethodName==&quot;CancelRootItem&quot;)
	{
		CancelRootItem(Inputs.GetProperty(&quot;RootItemId&quot;));
		return (CancelOperation);
	}
	if(MethodName==&quot;CancelOrder&quot;)
	{
		CancelOrder(Inputs.GetProperty(&quot;OrderId&quot;));
		return (CancelOperation);
	}

	return (ContinueOperation);
}"
			   SEQUENCE="65"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetActions"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetActions(Input, Output)
{
try
{
		//WA#19 08.04 Fix
		//var boOrderEntry	= TheApplication().GetBusObject(&quot;Order Item&quot;);
		//var bcOrderLI		= boOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var boOrderEntry	= TheApplication().GetBusObject(&quot;Order Entry - Line Items&quot;);
		var bcOrderLI		= boOrderEntry.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var boParameter     = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter     = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		 
		var strActionReason		= Input.GetProperty(&quot;VFTRCBU Action Reason&quot;);
		var strActionSubReason	= Input.GetProperty(&quot;VFTRCBU Action Sub Reason&quot;);
		var srtRootId 			= Input.GetProperty(&quot;Root Id&quot;);
		//FTOSCANO
		var strActionReasonLIC	= Input.GetProperty(&quot;Action Reason LIC&quot;);
		var srtActionTypeLIC 	= Input.GetProperty(&quot;Action Type LIC&quot;);
		var strICCBTargetTariff = Input.GetProperty(&quot;iCCB Target Tariff&quot;); //VFTRCBU-29765 RPIRES
		var strICCBGroupId		= Input.GetProperty(&quot;iCCB Group Id&quot;); //VFTRCBU-29765 RPIRES
		
		var strTransActionReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,strActionReasonLIC); // Input in TRK but Lang in ENU
				
		var reason = false;
		var srtCustomerTypeCalc = &quot;&quot;;
		var sLogicalReason = &quot;&quot;;

		var bIsRoot			= &quot;N&quot;;
		var bNextRec		= false;
				
		bcOrderLI.SetViewMode(AllView);
		bcOrderLI.ClearToQuery();
		bcOrderLI.ActivateField(&quot;VFTRCBU Action Sub Reason&quot;);
		bcOrderLI.ActivateField(&quot;VF Logical Reason&quot;);
		bcOrderLI.ActivateField(&quot;Account Market Class LIC&quot;);
		bcOrderLI.ActivateField(&quot;TELCO Action Reason&quot;);	
		bcOrderLI.ActivateField(&quot;TELCO Action Type&quot;);	
		bcOrderLI.ActivateField(&quot;VFTRCBU iCCB Tariff Plan&quot;);//VFTRCBU-29765 RPIRES	
		bcOrderLI.ActivateField(&quot;VFTRCBU iCCB Group Id&quot;);	//VFTRCBU-29765 RPIRES	
		bcOrderLI.ActivateField(&quot;VFTRCBU iCCB Bill Cycle&quot;);	//VFTRCBU-29765 RPIRES	
		bcOrderLI.ActivateField(&quot;VFTRCBU iCCB Tax Profile&quot;);//VFTRCBU-29765 RPIRES	
		bcOrderLI.SetSearchExpr(&quot;[Id]=&apos;&quot;+srtRootId+&quot;&apos;&quot;);
		bcOrderLI.ExecuteQuery(ForwardOnly);
		bNextRec = bcOrderLI.FirstRecord();
		if(!bNextRec)
		{
			throw(&quot;Girilen Referance Order Item :&quot;+srtRootId+&quot; bulunamadi&quot;);
		}
		else
		{
			//WA#19 - Select value without pick - Remove Comments by FTOSCANO
		 	var oBCPick = bcOrderLI.GetPicklistBusComp(&quot;TELCO Action Reason&quot;);
	     	with (oBCPick)
	        {
	        	ClearToQuery();
	            SetSearchSpec(&quot;Translated Name&quot;, strTransActionReason);
	            ExecuteQuery(ForwardOnly);
	            var req = FirstRecord();
	            while (req)
	            {
	            	if(GetFieldValue(&quot;Translated Name&quot;)== strTransActionReason)
	            	{
	            		Pick();
	            		reason = true;
	            	}
	            	req = NextRecord();
	            }
	       }
	       if(reason)
	       {
	           oBCPick = null;
	       }
	       else
	       {
	            throw(&quot;Given Action Reason :&quot;+strTransActionReason+&quot; not found&quot;);
	       }
	       //End - Remove Comments by FTOSCANO
	       //FTOSCANO
	       srtCustomerTypeCalc = bcOrderLI.GetFieldValue(&quot;Account Market Class LIC&quot;);
	       
	       var strActionTypeENU = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,srtActionTypeLIC);
	       bcOrderLI.SetFieldValue(&quot;TELCO Action Type&quot;,strActionTypeENU);
	       
	       //VFTRCBU-15961
	       var sActionReasonENU = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,strActionReasonLIC);
	       bcOrderLI.SetFieldValue(&quot;TELCO Action Reason&quot;,sActionReasonENU);
	       
			//VFTRCBU -  Fix to only insert Sub Reason if needed
			if (strActionSubReason != &quot;&quot;)
			{
				 //VFTRCBU-15961
				TheApplication().SetProfileAttr(&quot;TELCO Is Order External Interface&quot;, &quot;Y&quot;); //VFTRCBU-25360
				var sActionSubReasonLIC = GetLICfromLOV(&quot;VF_SUB_REASON&quot;, strActionSubReason);
				var sActionSubReasonENU = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,sActionSubReasonLIC);
				bcOrderLI.SetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;,sActionSubReasonENU);
				TheApplication().SetProfileAttr(&quot;TELCO Is Order External Interface&quot;, &quot;&quot;); //VFTRCBU-25360
			}
			
			bcParameter.SetViewMode(AllView);
			bcParameter.ClearToQuery();
			bcParameter.ActivateField(&quot;Condition6&quot;);
			bcParameter.SetSearchSpec(&quot;Function&quot;, &quot;VF Reason&quot;);
			bcParameter.SetSearchSpec(&quot;Attrib02&quot;, srtCustomerTypeCalc);
			bcParameter.SetSearchSpec(&quot;Condition2&quot;, srtActionTypeLIC);
			bcParameter.SetSearchSpec(&quot;Condition1&quot;, strActionReasonLIC);
			bcParameter.ExecuteQuery(ForwardOnly);
			
			if (bcParameter.FirstRecord())
			{
				sLogicalReason = bcParameter.GetFieldValue(&quot;Condition6&quot;);
				bcOrderLI.SetFieldValue(&quot;VF Logical Reason&quot;,sLogicalReason);
			}
			
			//++VFTRCBU-29765 RPIRES
			if(strICCBTargetTariff != &quot;&quot; &amp;&amp; strICCBTargetTariff != null)
			{
				bcOrderLI.SetFieldValue(&quot;VFTRCBU iCCB Tariff Plan&quot;,strICCBTargetTariff);
				bcOrderLI.SetFieldValue(&quot;VFTRCBU iCCB Group Id&quot;,strICCBGroupId);
				bcOrderLI.SetFieldValue(&quot;VFTRCBU iCCB Bill Cycle&quot;,&quot;11&quot;);
				if(srtCustomerTypeCalc != &quot;102&quot;)
					bcOrderLI.SetFieldValue(&quot;VFTRCBU iCCB Tax Profile&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TARGET_VIP_CODE&quot;,&quot;11912&quot;));
				else bcOrderLI.SetFieldValue(&quot;VFTRCBU iCCB Tax Profile&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TARGET_VIP_CODE&quot;,&quot;11900&quot;));	
			}
			//--VFTRCBU-29765 RPIRES
			
			bcOrderLI.WriteRecord();
		}
	}
	catch(e)
	{
		TheApplication().SetProfileAttr(&quot;TELCO Is Order External Interface&quot;, &quot;&quot;); //VFTRCBU-25360
		Output.SetProperty(&quot;ErrorMsg&quot;,&quot;Hata &apos;SetActions&apos;:&quot;+srtRootId+&quot; - &quot;+e.toString());
	}
	finally 
	{
		bcParameter     = null;
		boParameter     = null;
		bcOrderLI		= null;
		boOrderEntry	= null;
	}	
}"
			   SEQUENCE="49"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetAssetIntegrationIds"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetAssetIntegrationIds(Inputs,Outputs)
{
	// Changes: VFTRCBU-19089 -&gt; Reason: Corrections to Dynamics Changes after apply the Promotions´s Default Product
	var pOrder;
	var pOrderLI;
	var MLId = Inputs.GetProperty(&quot;ML Id&quot;);
	var MLAssetIntegrationId = Inputs.GetProperty(&quot;ML Asset Integration Id&quot;);
	var HCId = Inputs.GetProperty(&quot;HC Id&quot;);
	var HCAssetIntegrationId = Inputs.GetProperty(&quot;HC Asset Integration Id&quot;);
	var strRootAssetItemId = &quot;&quot;;
	
	var boOrderEntry	= TheApplication().GetBusObject(&quot;Order Item&quot;); // JIRA VFTRCBU-19089
	var bcOrderLI		= boOrderEntry.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;); // JIRA VFTRCBU-19089

	try
	{	
		pOrder = Inputs.GetChild(0);
		
		for(var b=0;b&lt;pOrder.GetChild(0).GetChildCount();b++)
		{
			pOrderLI = pOrder.GetChild(0).GetChild(b).GetChild(0);
			for(var c=0;c&lt;pOrderLI.GetChildCount();c++)
			{	
				for(var d=0;d&lt;pOrderLI.GetChild(c).GetChildCount();d++)
				{
					if (pOrderLI.GetChild(c).GetChild(d).PropertyExists(&quot;Root Order Item Id&quot;))
					{
						strRootAssetItemId = pOrderLI.GetChild(c).GetChild(d).GetProperty(&quot;Root Order Item Id&quot;);
						
						/****** Correct Template Products with Promotion Default Products Applied Ids - JIRA VFTRCBU-19089*/ 
						/* Dynamic Product Level of Message */
						if (pOrderLI.GetChild(c).GetChild(d).PropertyExists(&quot;Asset Integration Id&quot;))
						{
							var bFoundDefault	= false;
							
							var vActionCode = pOrderLI.GetChild(c).GetChild(d).GetProperty(&quot;Action Code&quot;);
							var vPartNumber = pOrderLI.GetChild(c).GetChild(d).GetProperty(&quot;Part Number&quot;);
									
							bcOrderLI.SetViewMode(AllView);
							bcOrderLI.ClearToQuery();
							bcOrderLI.ActivateField(&quot;Root Order Item Id&quot;);
							bcOrderLI.ActivateField(&quot;Action Code&quot;);
							bcOrderLI.ActivateField(&quot;Part Number&quot;);
							bcOrderLI.ActivateField(&quot;Cfg Type&quot;);
							bcOrderLI.ActivateField(&quot;Cfg State Code&quot;);
							bcOrderLI.ActivateField(&quot;Asset Integration Id&quot;);							
							bcOrderLI.SetSearchExpr(&quot;[Root Order Item Id]=&apos;&quot;+strRootAssetItemId+&quot;&apos; AND [Action Code]=&apos;&quot;+vActionCode+&quot;&apos; AND [Part Number]=&apos;&quot;+vPartNumber+&quot;&apos; &quot;);
							bcOrderLI.ExecuteQuery(ForwardOnly);
							bFoundDefault = bcOrderLI.FirstRecord();
							if(bFoundDefault)
							{
								pOrderLI.GetChild(c).GetChild(d).SetProperty(&quot;Cfg Type&quot;,bcOrderLI.GetFieldValue(&quot;Cfg Type&quot;));
								pOrderLI.GetChild(c).GetChild(d).SetProperty(&quot;Cfg State Code&quot;,bcOrderLI.GetFieldValue(&quot;Cfg State Code&quot;));							
								pOrderLI.GetChild(c).GetChild(d).SetProperty(&quot;Asset Integration Id&quot;,bcOrderLI.GetFieldValue(&quot;Asset Integration Id&quot;));
							}							
						}
						/******* Finish JIRA VFTRCBU-19089*/
						
						if (strRootAssetItemId == HCId)
						{
							pOrderLI.GetChild(c).SetProperty(&quot;Id&quot;, HCId);
							pOrderLI.GetChild(c).SetProperty(&quot;Asset Integration Id&quot;, HCAssetIntegrationId);
						}
						else if (strRootAssetItemId == MLId)
						{
							pOrderLI.GetChild(c).SetProperty(&quot;Id&quot;, MLId);
							pOrderLI.GetChild(c).SetProperty(&quot;Asset Integration Id&quot;, MLAssetIntegrationId);
						}
					}
				}	
			}
		}
		pOrder.SetType(&quot;SiebelMessage&quot;);
		Outputs.AddChild(pOrder.Copy());	
		
		//Clear vars
		pOrderLI = null;
		pOrder = null;
	}
	catch(e)
	{
		TheApplication().RaiseErrorText(&quot;Method: SetAssetIntegrationIds&quot;);
	}
	finally 
	{
		bcOrderLI		= null;
		boOrderEntry	= null;
	}	
		
}"
			   SEQUENCE="50"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="11/02/2015 10:35:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetCarbonCopyPA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetCarbonCopyPA(sOrderId)
{
	try
	{	
		var bo:BusObject = TheApplication().GetBusObject(&quot;Users&quot;);
		var bcPostn:BusComp = bo.GetBusComp(&quot;Position&quot;);
		var bcPostnProfile:BusComp = bo.GetBusComp(&quot;TELCO Position Profiles&quot;);
		var searchExpr = &quot;&quot;;
		var eligSearchExpr = &quot;[VF Position Type] IS NULL&quot;;
		var bcRec;
		
		var oOrderBO : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oOrderBC : BusComp = oOrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var sPosId = &quot;&quot;;

		with (oOrderBC) 
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;VF Created Position Id&quot;);
			SetSearchExpr(&quot;[Id] = &apos;&quot; + sOrderId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
				sPosId = GetFieldValue(&quot;VF Created Position Id&quot;);
		}
		
		if(sPosId != null &amp;&amp; sPosId != &quot;&quot;)
			searchExpr = &quot;[Id] = &apos;&quot; + sPosId + &quot;&apos;&quot;;
		else 
		{
			TheApplication().SetProfileAttr(&quot;TELCO.CarbonCopy.Eligibility&quot;,eligSearchExpr);
			return;
		}
		
		bcPostn.SetViewMode(AllView);
		bcPostn.ActivateField(&quot;Name&quot;);
		bcPostn.SetSearchExpr(searchExpr);
		bcPostn.ExecuteQuery(ForwardOnly);
		if(bcPostn.FirstRecord())
		{
			bcPostnProfile.SetViewMode(AllView);
			bcPostnProfile.ActivateField(&quot;TELCO Category&quot;);
			bcPostnProfile.ActivateField(&quot;TELCO Attribute Value&quot;);
			bcPostnProfile.ActivateField(&quot;TELCO Attribute&quot;);
			bcPostnProfile.SetSearchExpr(&quot;[TELCO Category] = &apos;Role&apos; AND [TELCO Attribute Value] = &apos;Y&apos;&quot;);
			bcPostnProfile.ExecuteQuery(ForwardOnly);
			bcRec = bcPostnProfile.FirstRecord();
			
			while(bcRec)
			{
				eligSearchExpr = eligSearchExpr + &quot; OR [VF Position Type] = &apos;&quot; + bcPostnProfile.GetFieldValue(&quot;TELCO Attribute&quot;) + &quot;&apos;&quot;;
				bcRec = bcPostnProfile.NextRecord();
			}
		}
		
		TheApplication().SetProfileAttr(&quot;TELCO.CarbonCopy.Eligibility&quot;,eligSearchExpr);
	}
	catch(e)
	{
		TheApplication().SetProfileAttr(&quot;TELCO.CarbonCopy.Eligibility&quot;,eligSearchExpr);
	}
	finally
	{
		bcPostnProfile = null;
		bcPostn = null;
		bo = null;
		oOrderBC = null;
		oOrderBO = null;
	}
}"
			   SEQUENCE="51"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="12/28/2015 12:44:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="WA#19: AROSA 16-01-2015 added"
			   INACTIVE="N"
			   NAME="SetInputsByType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetInputsByType (Inputs, Outputs)
{
	try 
	{
		var strCurrLnReadyFile	= Inputs.GetProperty(&quot;strCurrLnReadyFile&quot;);	
		var strOrderType		= Inputs.GetProperty(&quot;OrderType&quot;);
		var arrSplitLine		= new Array;
		arrSplitLine = strCurrLnReadyFile.split (&quot;|&quot;); //PROD Retrofits 2808
		
			if (strOrderType == &quot;Transfer Post to Pre&quot;)
			{
				Outputs.SetProperty(&quot;strCustomerCode&quot;, arrSplitLine[0]);
				Outputs.SetProperty(&quot;strBillAccCode&quot;, arrSplitLine[1]);
				Outputs.SetProperty(&quot;strMSISDN&quot;, arrSplitLine[2]);
				Outputs.SetProperty(&quot;strDealerCode&quot;, arrSplitLine[3]);
				Outputs.SetProperty(&quot;strAssetId&quot;, arrSplitLine[4]);
				Outputs.SetProperty(&quot;strActionType&quot;, arrSplitLine[5]);
				Outputs.SetProperty(&quot;strActionReason&quot;, arrSplitLine[6]);
				Outputs.SetProperty(&quot;strActionSubReason&quot;, arrSplitLine[7]);
				Outputs.SetProperty(&quot;strFutureOrder&quot;, arrSplitLine[8]);
				Outputs.SetProperty(&quot;strDueDate&quot;, arrSplitLine[9]);
				Outputs.SetProperty(&quot;Commands&quot;, arrSplitLine[10]);	 
			}
			else if (strOrderType == &quot;Handset Campaign&quot;)
			{
				Outputs.SetProperty(&quot;strCustomerCode&quot;, arrSplitLine[0]);
				Outputs.SetProperty(&quot;strBillAccCode&quot;, arrSplitLine[1]);
				Outputs.SetProperty(&quot;strMSISDN&quot;, arrSplitLine[2]);
				Outputs.SetProperty(&quot;strDealerCode&quot;, arrSplitLine[3]);
				Outputs.SetProperty(&quot;strActionType&quot;, arrSplitLine[4]);
				Outputs.SetProperty(&quot;strActionReason&quot;, arrSplitLine[5]);
				Outputs.SetProperty(&quot;strActionSubReason&quot;, arrSplitLine[6]);
				Outputs.SetProperty(&quot;strFutureOrder&quot;, arrSplitLine[7]);
				Outputs.SetProperty(&quot;strDueDate&quot;, arrSplitLine[8]);
				Outputs.SetProperty(&quot;strPromotionCode&quot;, arrSplitLine[9]);
				Outputs.SetProperty(&quot;strIMEI&quot;, arrSplitLine[10]); //HSOUSA 09.10
				Outputs.SetProperty(&quot;Commands&quot;, arrSplitLine[11]); //HSOUSA 09.10
				Outputs.SetProperty(&quot;DeviceCommands&quot;, arrSplitLine[12]); //HSOUSA 09.10
									
			}
			else 
			{
				Outputs.SetProperty(&quot;strCustomerCode&quot;, arrSplitLine[0]);
				Outputs.SetProperty(&quot;strBillAccCode&quot;, arrSplitLine[1]);
				Outputs.SetProperty(&quot;strMSISDN&quot;,arrSplitLine[2]);
				Outputs.SetProperty(&quot;strICCID&quot;, arrSplitLine[3]);
				Outputs.SetProperty(&quot;strRefOrderId&quot;, arrSplitLine[4]);
				Outputs.SetProperty(&quot;strRefOrderItemId&quot;, arrSplitLine[5]);
				Outputs.SetProperty(&quot;strDealerCode&quot;, arrSplitLine[6]);
				Outputs.SetProperty(&quot;strAssetId&quot;, arrSplitLine[7]);
				if (arrSplitLine[8].indexOf(&quot;=&quot;)==-1 &amp;&amp; 
				(arrSplitLine[9]!=undefined ||  arrSplitLine[10]!=undefined || arrSplitLine[11] != undefined || arrSplitLine[12] != undefined))
				{
					Outputs.SetProperty(&quot;strActionType&quot;, arrSplitLine[8]);
					Outputs.SetProperty(&quot;strActionReason&quot;, arrSplitLine[9]);
					Outputs.SetProperty(&quot;strActionSubReason&quot;, arrSplitLine[10]);
					Outputs.SetProperty(&quot;strFutureOrder&quot;, arrSplitLine[11]);
					Outputs.SetProperty(&quot;strDueDate&quot;, arrSplitLine[12]);
					Outputs.SetProperty(&quot;Commands&quot;, arrSplitLine[13]);  
				}
				else
				{
					Outputs.SetProperty(&quot;Commands&quot;, arrSplitLine[8]);
				}					 
			}
			
			// ++ IMARTINS VFTRCBU-24897 01032016 Validate command for EBU/CBU
			var strCommand = Outputs.GetProperty(&quot;Commands&quot;);
			var strCustomerCode = arrSplitLine[0];
			
			if (strCommand != &quot;&quot; || strCommand != null)	
			{			
				var boAccount = TheApplication().GetBusObject(&quot;Account&quot;);
				var bcAccount = boAccount.GetBusComp(&quot;VF Account Light&quot;);
				
				with (bcAccount)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Market Class&quot;);
					SetSearchSpec(&quot;CSN&quot;, strCustomerCode);
					ExecuteQuery(ForwardOnly);
					
					if (FirstRecord())
					{					
						if (GetFieldValue(&quot;Market Class&quot;) == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;)) // Consumer scenario, search for 12007=ADD; in command	
						{
							strCommand = strCommand.replace(/12007=ADD;/g, &quot;&quot;); 							
							Outputs.SetProperty(&quot;Commands&quot;, strCommand);  
						}
					}
				}
			}			
			// -- IMARTINS
						
				
	}
	catch (e)
	{
		var error = e.toString();
		Outputs.SetProperty (&quot;CurrentLine&quot;, error);
	}
	finally
	{		
		var strCurrLnReadyFile	= null;
		var strOrderType		= null;
		var strCustomerCode 	= null;
		var strBillAccCode		= null;
		var strMSISDN			= null;
		var strICCID			= null; 
		var Commands			= null;
		var strActionType		= null;
		var strActionReason		= null;
		var strActionSubReason	= null;
		var strRefOrderItemId	= null;
		var strDealerCode		= null;
		var strRefOrderId		= null;
		var strAssetId			= null;
		var strICCIBCustomerCode= null;
		var strICCBBillCylce	= null;
		var strICCBTaxProfile	= null;
		var strICCBTariff		= null;
		var strDueDate			= null;
		var arrSplitLine		= null;
	}
}"
			   SEQUENCE="52"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="02/20/2015 01:31:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOrderSubTypeAttrib"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetOrderSubTypeAttrib(sRootItemId)
{
	try
	{
		var boItem   : BusObject = TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcItem   : BusComp   = boItem.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		var bcItemXA : BusComp   = boItem.GetBusComp(&quot;VF Carbon Copy Order Item XA&quot;);

		var sSearchExpr      = &quot;&quot;;
		var sOrderSubTypeLIC = &quot;&quot;;
		var sItemXAAction    = &quot;&quot;;
		var sItemXAValue     = &quot;&quot;;

		if (sRootItemId == null || sRootItemId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Root Order Item Id]=&apos;&quot;+ sRootItemId + &quot;&apos; AND [Part Number]&apos;1103&apos; AND &quot;
					  &quot;[Action Code]&lt;&gt;&apos;&quot; + lovDelete + &quot;&apos;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Order Sub Type LIC&quot;);	
		bcItem.SetSearchExpr(sSearchExpr);

		sSearchExpr = &quot;[Name]=&apos;OrderSubType&apos; AND [Action Code]&lt;&gt;&apos;&quot; + lovDelete + &quot;&apos;&quot;;

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Action Code&quot;);
		bcItemXA.ActivateField(&quot;Text Value&quot;);
		bcItemXA.ActivateField(&quot;Previous Text Value&quot;);
		bcItemXA.SetSearchExpr(sSearchExpr);

		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord() &amp;&amp; bcItemXA.FirstRecord())
		{
			sOrderSubTypeLIC = bcItem.GetFieldValue(&quot;VF Order Sub Type LIC&quot;);	
			sItemXAAction    = bcItemXA.GetFieldValue(&quot;Action Code&quot;);
			sItemXAValue     = bcItemXA.GetFieldValue(&quot;Text Value&quot;);

			if (sItemXAAction == lovAdd)
			{
				if (sOrderSubTypeLIC != null &amp;&amp; sOrderSubTypeLIC != &quot;&quot;)
				{
					bcItemXA.SetFieldValue(&quot;Text Value&quot;,          sOrderSubTypeLIC);
					bcItemXA.SetFieldValue(&quot;Previous Text Value&quot;, sOrderSubTypeLIC);
					bcItemXA.WriteRecord();
				}

				return;
			}

			if (((sItemXAValue == null || sItemXAValue == &quot;&quot;) &amp;&amp;
				 (sOrderSubTypeLIC != null &amp;&amp; sOrderSubTypeLIC != &quot;&quot;)) ||
				((sItemXAValue != null &amp;&amp; sItemXAValue != &quot;&quot;) &amp;&amp;
				 (sOrderSubTypeLIC == null || sOrderSubTypeLIC == &quot;&quot;)) ||
				((sItemXAValue != null &amp;&amp; sItemXAValue != &quot;&quot;) &amp;&amp;
				 (sOrderSubTypeLIC != null &amp;&amp; sOrderSubTypeLIC != &quot;&quot;) &amp;&amp;
				 (sItemXAValue != sOrderSubTypeLIC)))
			{
				bcItemXA.SetFieldValue(&quot;Text Value&quot;, sOrderSubTypeLIC);
				bcItemXA.WriteRecord();
			}
		}
	}
	finally
	{
		bcItemXA = null;
		bcItem   = null;
		boItem   = null;
	}
}"
			   SEQUENCE="53"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="12/28/2015 12:44:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubModifyOptions"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SubModifyOptions(inProp,outProp,inComm,outComm,inHeadComm,outHeadComm)
{ //HSOUSA - Created because &quot;ModifyOption&quot; function reached 16K of size
	try
	{	
		var bsWFProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var strErrDesc	= &quot;&quot;;
		var strCreatedOrderId = &quot;&quot;;
		var bSubErr = false;
		var strCreRootItemID = &quot;&quot;;
		var strErrorInOrderHeader = false;
		var strActionType = inProp.GetProperty(&quot;Action Type&quot;);
		var strActionTypeLIC = &quot;&quot;;
		var sActionReasonLIC = &quot;&quot;;
		var strActionReason = inProp.GetProperty(&quot;Action Reason&quot;);
		var strBillAccId = &quot;&quot;;
	
		outProp.Reset();
		inProp.SetProperty(&quot;ProcessName&quot;,&quot;TELCO Process Account Root Asset Action&quot;);
		inProp.SetProperty(&quot;Asset Action Type&quot;,strActionType);
    	inProp.SetProperty(&quot;Asset Action&quot;,&quot;Modify&quot;);
		inProp.SetProperty(&quot;Reuse Active Order&quot;, inProp.GetProperty(&quot;Reuse Active Order&quot;));
		inProp.SetProperty(&quot;SkipGUINavigation&quot;,&quot;Y&quot;);
	
		bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;,inProp,outProp);
		//VFTRCBU WA#19 - End
		strErrDesc = outProp.GetProperty(&quot;Error Message&quot;);
	    strCreatedOrderId = outProp.GetProperty(&quot;Order Id&quot;);
  		strCreRootItemID = outProp.GetProperty(&quot;Root Item Id&quot;);
	  	strBillAccId = inProp.GetProperty(&quot;Billing Account Id&quot;);
    	inProp.SetProperty(&quot;Active Quote Id&quot;,strCreatedOrderId);
		//VFTRCBU WA#19 - End
		
		if(strErrDesc==&quot;&quot;)
		{	                        
			inHeadComm.SetProperty(&quot;OrderId&quot;,strCreatedOrderId); 
			OperateOrderHeaderCommands(inHeadComm,outHeadComm);
			strErrDesc = outHeadComm.GetProperty(&quot;ErrorMsg&quot;);

			if(strErrDesc!=&quot;&quot;) 
			{
				strErrorInOrderHeader = true;
			}
			else 
			{
				if(strErrDesc==&quot;&quot;)
				{
					var inAction = TheApplication().NewPropertySet();
					var outAction = TheApplication().NewPropertySet();
					strActionTypeLIC = GetLICfromLOV(&quot;ORDER_SUB_TYPE&quot;, strActionType);
					sActionReasonLIC = GetLICfromLOV(&quot;ACS_ORDER_REASON&quot;, strActionReason);
					inAction.SetProperty (&quot;VFTRCBU Action Reason&quot;,strActionReason);
					inAction.SetProperty (&quot;VFTRCBU Action Sub Reason&quot;,inProp.GetProperty(&quot;Action Sub Reason&quot;));
					inAction.SetProperty (&quot;Root Id&quot;,strCreRootItemID);
					inAction.SetProperty (&quot;Action Type LIC&quot;,strActionTypeLIC);
					inAction.SetProperty (&quot;Action Reason LIC&quot;,sActionReasonLIC);

					SetActions(inAction,outAction);

					strErrDesc=outAction.GetProperty(&quot;ErrorMsg&quot;);
										
					if(strErrDesc!=&quot;&quot;) 
					{
						bSubErr = true;
						outComm.SetProperty(&quot;ErrorMsg&quot;, outAction.GetProperty(&quot;ErrorMsg&quot;));
					}
				}
				
				/* IMARTINS VFTRCBU-26557 17032016 | eConfigurator WF should always run to ensure that the order structure 
				is the correct, independently of having products to add/remove
				//if(sProductList!=&quot;&quot; &amp;&amp; sProductList!=null)
				{*/
					Call_eConfigurator(inProp,outProp);
					strErrDesc=outProp.GetProperty(&quot;ErrorMsg&quot;); 

					if(strErrDesc!=&quot;&quot;) 
					{
						bSubErr = true;
					}													 
				//} IMARTINS VFTRCBU-26557 17032016
					
				if(strErrDesc==&quot;&quot;)
				{
					inComm.SetProperty(&quot;OrSuTpFLG&quot;,&quot;ModifyOption&quot;);
					inComm.SetProperty(&quot;Root Order Item Id&quot;,strCreRootItemID);
					inComm.SetProperty(&quot;BillAccId&quot;,strBillAccId); //RCRISPIM: Retrofits 2015 February Minor
					OperateOrderItemCommands(inComm,outComm);

					strErrDesc=outComm.GetProperty(&quot;ErrorMsg&quot;);

					if(strErrDesc!=&quot;&quot;) 
					{
						bSubErr = true;
					}
				}
			}   
			//VFTRCBU WA#19 - End	
		}
		else
		{
			bSubErr = true;
			strCreatedOrderId = &quot;&quot;;
			strCreRootItemID = &quot;&quot;;
		}
	}
	catch(e)
	{
		bSubErr = true;
		outComm.SetProperty(&quot;ErrorMsg&quot;,e.toString()); //RCRISPIM: Retrofits 2015 February Minor
		strErrDesc = e.toString();
		strCreatedOrderId = &quot;&quot;;
		strCreRootItemID = &quot;&quot;;
	}
	finally
	{
		inAction	= null;
		outAction	= null;
		bsWFProcMng	= null;
	}
}"
			   SEQUENCE="56"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubmitOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SubmitOrder(Input,Output)
{
	try
	{
		var boCarbon       : BusObject   = TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonHeader : BusComp     = boCarbon.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonItem   : BusComp     = boCarbon.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var boOrder        : BusObject   = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrder	       : BusComp     = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bsManager      : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn    : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut   : PropertySet = TheApplication().NewPropertySet();

		var sCCHeaderId         = Input.GetProperty(&quot;CC Header Id&quot;);
		var bWithCCHeader       = false;
		var bHasCCItem          = false;
		var sCCHeaderNewStatus  = &quot;&quot;;
		var sCCItemNewStatus    = &quot;&quot;;
		var sCCItemNewError     = &quot;&quot;;
		var sPrevCCItemOrderId	= &quot;&quot;;
		var sCCItemOrderId	    = &quot;&quot;;
		var bEmptyOrder         = false;
		var bSkipSubmit         = false;
		var bSubmitError        = false;

		var sOrderStatus        = &quot;&quot;;
		var sOrderOMId          = &quot;&quot;;
		var sLastUserError      = &quot;&quot;;
		/*var sStatusCCError      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);
		var sStatusCCCompleted  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Completed&quot;);
		var sStatusSubmitting   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submitting&quot;);
		var sStatusCancelled    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var sStatusMACompleted  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Manual Action Completed&quot;);
		var sSuccessMessage     = TheApplication().LookupMessage(&quot;ACS Messages&quot;,&quot;025&quot;);
		*/// //GENTLE VF SCALISKAN  Those variables defined in declaration;

		if (sCCHeaderId == null || sCCHeaderId == &quot;&quot;)
		{
			return;
		}

		bcCarbonHeader.SetViewMode(AllView);
		bcCarbonHeader.ClearToQuery();
		bcCarbonHeader.ActivateField(&quot;Status&quot;);
		bcCarbonHeader.ActivateField(&quot;Position Id&quot;);// EBU Retrofits DEF-11226
		bcCarbonHeader.SetSearchExpr(&quot;[Id]=&apos;&quot; + sCCHeaderId + &quot;&apos;&quot;);
		bcCarbonHeader.ExecuteQuery(ForwardOnly);

		bWithCCHeader = bcCarbonHeader.FirstRecord();

		if (!bWithCCHeader)
		{
			return;
		}

		var sCCOrderType = bcCarbonHeader.GetFieldValue(&quot;Order Type&quot;);// EBU Retrofits DEF-11226
		var sCCPositionID = bcCarbonHeader.GetFieldValue(&quot;Position Id&quot;);// EBU Retrofits DEF-11226
		
		sCCHeaderNewStatus = sStatusCCCompleted;
		sCCItemNewStatus   = sStatusCCCompleted;
		sCCItemNewError    = &quot;&quot;;

		TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
		bcCarbonItem.SetViewMode(AllView);
		bcCarbonItem.ClearToQuery();
		bcCarbonItem.ActivateField(&quot;Created Order Id&quot;);
		bcCarbonItem.SetSearchExpr(&quot;[Carbon Header Id]=&apos;&quot; + sCCHeaderId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCCCompleted + &quot;&apos;&quot;);
		bcCarbonItem.SetSortSpec(&quot;Created Order Id&quot;);
		bcCarbonItem.ExecuteQuery(ForwardOnly);

		bHasCCItem = bcCarbonItem.FirstRecord();

		while(bHasCCItem)
		{
			sCCItemOrderId = bcCarbonItem.GetFieldValue(&quot;Created Order Id&quot;);
			bEmptyOrder    = (sCCItemOrderId == null || sCCItemOrderId == &quot;&quot;);
			bSkipSubmit    = bEmptyOrder;
			bSubmitError   = false;

			if (!bSkipSubmit)
			{
				bSkipSubmit = (sCCItemOrderId == sPrevCCItemOrderId);
			}

			if (!bSkipSubmit)
			{
				sPrevCCItemOrderId = sCCItemOrderId;
				sCCItemNewStatus   = sStatusCCCompleted;
				sCCItemNewError    = &quot;&quot;;

				bcOrder.SetViewMode(AllView);
				bcOrder.ClearToQuery();
				bcOrder.ActivateField(&quot;Status&quot;);
				bcOrder.ActivateField(&quot;TELCO OM Order Public Id&quot;);
				bcOrder.ActivateField(&quot;TimeStamp&quot;);//EBU Retrofits
				bcOrder.ActivateField(&quot;Comments&quot;);//EBU Retrofits
				bcOrder.ActivateField(&quot;Hold Flag&quot;);
				bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sCCItemOrderId + &quot;&apos;&quot;);
				bcOrder.ExecuteQuery(ForwardOnly);

				bEmptyOrder = (!bcOrder.FirstRecord());
				bSkipSubmit = bEmptyOrder;
			}

			if (!bSkipSubmit)
			{
				sOrderStatus = bcOrder.GetFieldValue(&quot;Status&quot;);
				sOrderOMId   = bcOrder.GetFieldValue(&quot;TELCO OM Order Public Id&quot;);
				bSkipSubmit  = (sOrderStatus == sStatusSubmitting || sOrderStatus == sStatusCancelled ||
							    (sOrderOMId != null &amp;&amp; sOrderOMId != &quot;&quot;));
			}

			if (!bSkipSubmit)
			{
				if (TheApplication().GetProfileAttr(&quot;TELCOSubmitOrderSupport&quot;) == &quot;Y&quot;)
				{
					TheApplication().SetProfileAttr(&quot;TELCOSystemUpdate&quot;, &quot;Y&quot;);
					bcOrder.SetFieldValue(&quot;Hold Flag&quot;, &quot;N&quot;);
					TheApplication().SetProfileAttr(&quot;TELCOSystemUpdate&quot;, &quot;N&quot;);
				}

				if (sOrderStatus == sStatusMACompleted)
				{
					TheApplication().SetProfileAttr(&quot;TELCOCurrentOrderStatus&quot;, sOrderStatus);
				}

				if (sOrderStatus != sStatusSubmitting &amp;&amp; sOrderStatus != sStatusMACompleted)
				{
					//Store Status
					TheApplication().SetProfileAttr(&quot;TELCOCurrentOrderStatus&quot;, sOrderStatus);
					TheApplication().SetProfileAttr(&quot;TELCOGUISubmission&quot;,      &quot;N&quot;);

					psManagerIn.Reset();
					psManagerOut.Reset();
					psManagerIn.SetProperty(&quot;ProcessName&quot;,    &quot;TELCO Update Order Status&quot;);
					psManagerIn.SetProperty(&quot;RowId&quot;,          sCCItemOrderId);
					psManagerIn.SetProperty(&quot;NewStatusValue&quot;, sStatusSubmitting);
					bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
				}
				
				//++VFTRCBU-22018:RPIRES
				psManagerIn.Reset();
				psManagerOut.Reset();
				psManagerIn.SetProperty(&quot;ProcessName&quot;,    &quot;TELCO Set Order Requested Ship Date&quot;);
				psManagerIn.SetProperty(&quot;Object Id&quot;,          sCCItemOrderId);
				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
				//--VFTRCBU-22018:RPIRES
				
				try
				{
/*					inactivated in jira VFTRCBU-30567
					//EBU Retrofits DEF-11226
					if(sCCOrderType==&quot;Handset Campaign&quot;) // Activating control administrations for handsets 
					{
						TheApplication().SetProfileAttr(&quot;CARBON_COPY_SUBMISSION&quot;, &quot;Y&quot;);
						TheApplication().SetProfileAttr(&quot;CARBON_COPY_POSITION&quot;, sCCPositionID);
						TheApplication().SetProfileAttr(&quot;VFTREBU Skip Browser Validations&quot;, &quot;N&quot;);
						TheApplication().SetProfileAttr(&quot;TELCOSkipOrderSpecialLogic&quot;, &quot;N&quot;);
					}
					else
					{
						TheApplication().SetProfileAttr(&quot;VFTREBU Skip Browser Validations&quot;, &quot;Y&quot;);
						TheApplication().SetProfileAttr(&quot;TELCOSkipOrderSpecialLogic&quot;, &quot;Y&quot;);
					}//End EBU Retrofits DEF-11226*/	
					TheApplication().SetProfileAttr(&quot;CARBON_COPY_SUBMISSION&quot;, &quot;Y&quot;);
					TheApplication().SetProfileAttr(&quot;CARBON_COPY_POSITION&quot;, sCCPositionID);	

					TheApplication().SetProfileAttr(&quot;VFTREBU Skip Browser Validations&quot;, &quot;Y&quot;);

/*					inactivated in jira VFTRCBU-30567
					//20160606:Retrofit9.3.3:Added two SetProfileAttr below
					TheApplication().SetProfileAttr(&quot;TELCOSkipOrderSpecialLogic&quot;, &quot;Y&quot;);
					TheApplication().SetProfileAttr(&quot;TELCO Is Order External Interface&quot;, &quot;Y&quot;);
*/
					psManagerIn.Reset();
					psManagerOut.Reset();
					psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Process Order Submission WF&quot;);
					psManagerIn.SetProperty(&quot;Object Id&quot;,   sCCItemOrderId);
					bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
				}
				catch(oSubmitExcep)
				{
					//RCRISPIM: Retrofits 2015 February Minor - START
					var rExp = new RegExp(sSuccessMessage);

					if (!rExp.test(oSubmitExcep.toString()))
					{
						bSubmitError     = true;
						sCCItemNewStatus = sStatusCCError;
						sCCItemNewError  = oSubmitExcep.toString();
					}
					//RCRISPIM: Retrofits 2015 February Minor - END
				}

				sLastUserError = TheApplication().GetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;);

				if (sLastUserError != &quot;&quot; &amp;&amp; sLastUserError != null)
				{
					bSubmitError     = true;
					sCCItemNewStatus = sStatusCCError;
					sCCItemNewError  = sLastUserError;
				}

				if (bSubmitError)
				{
					sCCHeaderNewStatus = sStatusCCError;

					bcOrder.SetViewMode(AllView);
					bcOrder.ClearToQuery();
					bcOrder.SetSearchSpec(&quot;Id&quot;,     sCCItemOrderId);
					bcOrder.SetSearchSpec(&quot;Status&quot;, sStatusSubmitting);
					bcOrder.ExecuteQuery(ForwardOnly);

					if (bcOrder.FirstRecord())
					{
						psManagerIn.Reset();
						psManagerOut.Reset();
						psManagerIn.SetProperty(&quot;ProcessName&quot;,    &quot;TELCO Update Order Status&quot;);
						psManagerIn.SetProperty(&quot;RowId&quot;,          sCCItemOrderId);
						psManagerIn.SetProperty(&quot;NewStatusValue&quot;, sOrderStatus);
						bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
					}
				}
			}

			if (bEmptyOrder)
			{
				bcCarbonItem.SetFieldValue(&quot;Error Desc&quot;, &quot;&quot;);
				bcCarbonItem.SetFieldValue(&quot;Status&quot;,     sStatusCCCompleted);
				bcCarbonItem.WriteRecord();
			}
			else
			{
				bcCarbonItem.SetFieldValue(&quot;Error Desc&quot;, sCCItemNewError.substring(0, 999)); //DEF-11772 -- Correction to limit length error description as BC and table 
				bcCarbonItem.SetFieldValue(&quot;Status&quot;,     sCCItemNewStatus);
				bcCarbonItem.WriteRecord();
			}
										
			bHasCCItem = bcCarbonItem.NextRecord();
		}
	}
	finally
	{
		if (bWithCCHeader)
		{
			TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;, &quot;Y&quot;);
			bcCarbonHeader.SetFieldValue(&quot;Status&quot;, sCCHeaderNewStatus);
			if (sCCHeaderNewStatus == sStatusCCCompleted)
				bcCarbonHeader.SetFieldValue(&quot;Button Flag&quot;, 0);
			bcCarbonHeader.WriteRecord();
			TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;, &quot;N&quot;);
		}

		TheApplication().SetProfileAttr(&quot;VFTREBU Skip Browser Validations&quot;, &quot;&quot;);
		
		TheApplication().SetProfileAttr(&quot;CARBON_COPY_SUBMISSION&quot;, &quot;&quot;);//EBU Retrofits DEF-11226
		TheApplication().SetProfileAttr(&quot;CARBON_COPY_POSITION&quot;, &quot;&quot;);//EBU Retrofits DEF-11226
	//	TheApplication().SetProfileAttr(&quot;TELCOSkipOrderSpecialLogic&quot;, &quot;Y&quot;);//EBU Retrofits DEF-11226


		psManagerOut   = null;
		psManagerIn    = null;
		bsManager      = null;
		bcOrder	       = null;
		boOrder        = null;
		bcCarbonItem   = null;
		bcCarbonHeader = null;
		boCarbon       = null;
	}
}"
			   SEQUENCE="54"
			   UPDATED="08/28/2016 00:03:23"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubmitOrderExpress"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SubmitOrderExpress(Input, Output) {
	try {
		var boCarbon : BusObject = TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcOrder : BusComp = boCarbon.GetBusComp(&quot;Order Entry - Orders&quot;);

		var bsManager : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();

		var sCCItemOrderId = Input.GetProperty(&quot;OHeadId&quot;);
		var bWithCCHeader = false;
		var bHasCCItem = false;

		var sCCItemNewStatus = &quot;&quot;;
		var sCCItemNewError = &quot;&quot;;

		var bEmptyOrder = false;
		var bSkipSubmit = false;
		var bSubmitError = false;

		var sOrderStatus = &quot;&quot;;
		var sOrderOMId = &quot;&quot;;
		var sLastUserError = &quot;&quot;;

		if (sCCItemOrderId == null || sCCItemOrderId == &quot;&quot;) {
			return;
		}

		sCCItemNewStatus = sStatusCCCompleted;
		sCCItemNewError = &quot;&quot;;

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Status&quot;);
		bcOrder.ActivateField(&quot;TELCO OM Order Public Id&quot;);
		bcOrder.ActivateField(&quot;Hold Flag&quot;);
		bcOrder.ActivateField(&quot;As Of Date&quot;);
		bcOrder.ActivateField(&quot;TimeStamp&quot;);
		bcOrder.ActivateField(&quot;Requested Ship Date&quot;);
		bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sCCItemOrderId + &quot;&apos;&quot;);
		bcOrder.ExecuteQuery(ForwardOnly);

		bEmptyOrder = (!bcOrder.FirstRecord());
		bSkipSubmit = bEmptyOrder;

		if (!bSkipSubmit) {
			sOrderStatus = bcOrder.GetFieldValue(&quot;Status&quot;);
			sOrderOMId = bcOrder.GetFieldValue(&quot;TELCO OM Order Public Id&quot;);
			bSkipSubmit = (sOrderStatus == sStatusSubmitting || sOrderStatus == sStatusCancelled ||
				(sOrderOMId != null &amp;&amp; sOrderOMId != &quot;&quot;));
		}

		if (!bSkipSubmit) {
			if (TheApplication().GetProfileAttr(&quot;TELCOSubmitOrderSupport&quot;) == &quot;Y&quot;) {
				TheApplication().SetProfileAttr(&quot;TELCOSystemUpdate&quot;, &quot;Y&quot;);
				bcOrder.SetFieldValue(&quot;Hold Flag&quot;, &quot;N&quot;);
				TheApplication().SetProfileAttr(&quot;TELCOSystemUpdate&quot;, &quot;N&quot;);
			}

			if (sOrderStatus == sStatusMACompleted) {
				TheApplication().SetProfileAttr(&quot;TELCOCurrentOrderStatus&quot;, sOrderStatus);
			}

			if (sOrderStatus != sStatusSubmitting &amp;&amp; sOrderStatus != sStatusMACompleted) {

				TheApplication().SetProfileAttr(&quot;TELCOCurrentOrderStatus&quot;, sOrderStatus);
				TheApplication().SetProfileAttr(&quot;TELCOGUISubmission&quot;, &quot;N&quot;);
				bcOrder.SetFieldValue(&quot;Status&quot;, sStatusSubmitting);
				bcOrder.SetFieldValue(&quot;As Of Date&quot;, bcOrder.GetFieldValue(&quot;TimeStamp&quot;));

			}

			if (bcOrder.GetFieldValue(&quot;Requested Ship Date&quot;) == &quot;&quot;) {
				bcOrder.SetFieldValue(&quot;Requested Ship Date&quot;, bcOrder.GetFieldValue(&quot;TimeStamp&quot;));
			}
			bcOrder.WriteRecord();
			sLastUserError = TheApplication().GetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;);
			try {
			
				TheApplication().SetProfileAttr(&quot;VFTREBU Skip Browser Validations&quot;, &quot;Y&quot;);

			/*	inactivated in jira VFTRCBU-30567
				TheApplication().SetProfileAttr(&quot;TELCOSkipOrderSpecialLogic&quot;, &quot;Y&quot;);
				TheApplication().SetProfileAttr(&quot;TELCO Is Order External Interface&quot;, &quot;Y&quot;);*/

				psManagerIn.Reset();
				psManagerOut.Reset();
				psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Process Order Submission WF&quot;);
				psManagerIn.SetProperty(&quot;Object Id&quot;, sCCItemOrderId);
				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
			} catch (oSubmitExcep) {
				//RCRISPIM: Retrofits 2015 February Minor - START
				var rExp = new RegExp(sSuccessMessage);

				if (!rExp.test(oSubmitExcep.toString())) {
					bSubmitError = true;
					sCCItemNewStatus = sSubmitError;
					sCCItemNewError = oSubmitExcep.toString();
				}
				//RCRISPIM: Retrofits 2015 February Minor - END
			}

			sLastUserError = TheApplication().GetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;);

			if (sLastUserError != &quot;&quot; &amp;&amp; sLastUserError != null) {
				bSubmitError = true;
				sCCItemNewStatus = sStatusCCError;
				sCCItemNewError = sLastUserError;
			}

			if (bSubmitError) {

				psManagerIn.Reset();
				psManagerOut.Reset();
				psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Update Order Status&quot;);
				psManagerIn.SetProperty(&quot;RowId&quot;, sCCItemOrderId);
				psManagerIn.SetProperty(&quot;NewStatusValue&quot;, sOrderStatus);
				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
			}
		}

		if (!bSubmitError) {
			Output.SetProperty(&quot;Error Desc&quot;, &quot;&quot;);
			Output.SetProperty(&quot;Status&quot;, sStatusCCCompleted);

		} else {
			Output.SetProperty(&quot;Error Desc&quot;, sCCItemNewError.substring(0, 999));  //DEF-11772 -- Correction to limit length error description as BC and table 
			Output.SetProperty(&quot;Status&quot;, sCCItemNewStatus);
		}

	} catch (e) {
		sCCItemNewError = e.toString();
		Output.SetProperty(&quot;Error Desc&quot;, sCCItemNewError.substring(0, 999));  //DEF-11772 -- Correction to limit length error description as BC and table 
		Output.SetProperty(&quot;Status&quot;, sCCItemNewStatus);
	}
	finally {

		TheApplication().SetProfileAttr(&quot;VFTREBU Skip Browser Validations&quot;, &quot;&quot;);

		psManagerOut = null;
		psManagerIn = null;
		bsManager = null;
		bcOrder = null;
		boCarbon = null;
	}
}"
			   SEQUENCE="55"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="06/14/2016 22:24:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SuspendResume"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SuspendResume(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var bcOrderLI		= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		
		var strCCHederId = Input.GetProperty(&quot;CC Header Id&quot;);
		var strRefOrderId=&quot;&quot;;
		var bCCLineItem = false;
		var strActionTypeLIC=&quot;&quot;;
		//FTOSCANO
		var sActionReasonLIC=&quot;&quot;;

		var iDefMaxLine = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_MAXLINE&quot;,&quot;MAX&quot;);
		var lovInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;In Progress&quot;);
		var lovCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Created&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);

		var iLineCount = 0;
		var strBillAccCode		= &quot;&quot;;
		var strCustomerCode		= &quot;&quot;;
		var strAccountId		= &quot;&quot;;
		var strBillAccId		= &quot;&quot;;
		var strPrevBillAccCode	= &quot;&quot;;
		var strPrevCustomerCode	= &quot;&quot;;
		var strMSISDN			= &quot;&quot;;
		var strICCID			= &quot;&quot;;
		var strCommands			= &quot;&quot;;
		var strOrderType		= &quot;&quot;;
		var iMaxLineItems		= &quot;&quot;;
		var strErrDesc			= &quot;&quot;;
		var strCreatedOrderId	= &quot;&quot;;
		var strCreRootItemID	= &quot;&quot;;
		var bSubErr 			= false;
		var strDelarCode		= &quot;&quot;;
		var strPrevDelarCode	= &quot;&quot;;
		var strPrevCreatedOrderId	= &quot;&quot;;	
		var strOrderHeadCommands=&quot;&quot;;
		var inHeadComm = TheApplication().NewPropertySet();
		var outHeadComm = TheApplication().NewPropertySet();
		var strCreatedBy = &quot;&quot;;
		var strErrorInOrderHeader = false;
		var strRootAssetId = &quot;&quot;;
      	var strActionType = &quot;&quot;;
      	var strActionReason = &quot;&quot;;
     	var strActionSubReason = &quot;&quot;;
     	var strReuseActiveOrder = &quot;N&quot;;
     	var strOrderType = Input.GetProperty(&quot;Order Type&quot;);
     	var strDueDate   = &quot;&quot;; //WA#19 Drop2
		var strFutureOrder = &quot;&quot;;

		with(bcCarbonCopyH)
		{	
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;); //HSOUSA PROD Retrofit		
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Ref Order Id&quot;);
			ActivateField(&quot;Max Line Items&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Order Type&quot;);
			ActivateField(&quot;Commands&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
				
			if(FirstRecord())
			{
				iMaxLineItems = GetFieldValue(&quot;Max Line Items&quot;);
				strOrderHeadCommands = GetFieldValue(&quot;Commands&quot;);
				
				if(ToNumber(iMaxLineItems)&lt; 1 || ToNumber(iMaxLineItems) &gt; ToNumber(iDefMaxLine))
				{
					iMaxLineItems = iDefMaxLine;
				}
				iMaxLineItems = 1;
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				SetFieldValue(&quot;Status&quot;,lovInProgress);
				strCreatedBy	= GetFieldValue(&quot;Created By&quot;);
				WriteRecord();
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				
				inHeadComm.SetProperty(&quot;Commands&quot;,strOrderHeadCommands);

				ParseCommands(inHeadComm,outHeadComm);
				
				inHeadComm.Reset();
				inHeadComm.SetProperty(&quot;OrderId&quot;,&quot;&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Prevent Automatic Cancellation&quot;,&quot;Y&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Bulk Order Flg&quot;,&quot;Y&quot;);
				inHeadComm.AddChild(outHeadComm);
				
				with(bcCarbonCopyLI) //Start With 2
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos; AND [Created Order Id] IS NULL&quot;);
					SetSortSpec(&quot;Customer Code(ASCENDING),Dealer Code(ASCENDING),Billing Account Code(ASCENDING)&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();
										
					//while(bCCLineItem) // FTOSCANO Old Expression: while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false)
					while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false) //HSOUSA PROD Retrofit 28/08
					{
						strBillAccCode		= GetFieldValue(&quot;Billing Account Code&quot;);
						strCustomerCode		= GetFieldValue(&quot;Customer Code&quot;);
						strMSISDN 			= GetFieldValue(&quot;MSISDN&quot;);
						strCommands			= GetFieldValue(&quot;Commands&quot;);
						strDelarCode		= GetFieldValue(&quot;Dealer Code&quot;);
						strRootAssetId		= GetFieldValue(&quot;Asset Id&quot;);
						
						strErrDesc = &quot;&quot;;
						//VFTRCBU WA#19-Begin
                  		strActionType       = GetFieldValue(&quot;VFTRCBU Action Type&quot;);
                  		strActionReason     = GetFieldValue(&quot;VFTRCBU Action Reason&quot;);
                  		strActionSubReason  = GetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;);
                  		
                  		strDueDate 		= GetFieldValue(&quot;VFTRCBU Due Date&quot;); // WA#19 Drop2
						strFutureOrder 		= GetFieldValue(&quot;VFTRCBU Future Order&quot;); // WA#19 Drop2
						
						var inProp = TheApplication().NewPropertySet();
                 		inProp.SetProperty(&quot;MSISDN&quot;,strMSISDN);
                		inProp.SetProperty(&quot;ICCID&quot;,strICCID);
                  		inProp.SetProperty(&quot;Dealer Code&quot;,strDelarCode);
                  		inProp.SetProperty(&quot;Customer Code&quot;,strCustomerCode);
                  		inProp.SetProperty(&quot;Billing Account Code&quot;,strBillAccCode);
                  		inProp.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);
  						inProp.SetProperty(&quot;Action Type&quot;, strActionType);
  	  					inProp.SetProperty(&quot;Action Reason&quot;, strActionReason);
                  		strErrDesc = ValidateInputs(inProp);

						if(strErrDesc!=&quot;&quot;)
						{
							SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 499));
							SetFieldValue(&quot;Status&quot;,lovError);
							bSubErr = true;
						}
						else
						{
							var outProp = TheApplication().NewPropertySet();

							inHeadComm.GetChild(0).SetProperty(&quot;ORDER#VF Dealer Code&quot;,strDelarCode);
							
							if (strFutureOrder != &quot;&quot; &amp;&amp; strFutureOrder != null &amp;&amp; strFutureOrder != &quot;N&quot;)
 	                        {
								if (strDueDate != &quot;&quot; &amp;&amp; strDueDate != null)
								{
									outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;, strFutureOrder);
									outHeadComm.SetProperty(&quot;ORDER#Requested Ship Date&quot;,strDueDate);
							    }
								else
								{	
									outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;, strFutureOrder);											                                              
								}
							}							
							inProp.SetProperty(&quot;OrderSubType&quot;, strActionType);
							CheckMsisdnOnAsset(inProp,outProp); //Check msisdn for account in assets
							
							var inComm = TheApplication().NewPropertySet();
							var outComm = TheApplication().NewPropertySet();
							var bsWFProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
							
							strAccountId = outProp.GetProperty(&quot;AccountId&quot;);
							strBillAccId = outProp.GetProperty(&quot;BillAccountId&quot;);
							strErrDesc	 = outProp.GetProperty(&quot;ErrorMsg&quot;);
														
							if(strErrDesc==&quot;&quot;)
							{
								inComm.SetProperty(&quot;RowId&quot;,strAccountId);
								
								if(strOrderType == &quot;Resume&quot;)
								{
									inComm.SetProperty(&quot;Resume Date&quot;,outProp.GetProperty(&quot;ToDay&quot;));
								}
								else
								{
									inComm.SetProperty(&quot;Suspend Date&quot;,outProp.GetProperty(&quot;ToDay&quot;));
								}
								
								//DeactvOldAsset(inComm.GetProperty(&quot;Root Asset Id&quot;)); // Deactivate Old Assets
								if((iLineCount%iMaxLineItems)==0 || strPrevCustomerCode!=strCustomerCode || strDelarCode != strPrevDelarCode)
							    {
							    	strPrevCustomerCode = strCustomerCode;
									strPrevDelarCode = strDelarCode;
                          			strReuseActiveOrder = &quot;N&quot;;								
								}
								else
								{
									strReuseActiveOrder = &quot;Y&quot;;
								}
								
								if(strErrDesc==&quot;&quot;)
								{
									try
									{
										outComm.Reset();
										//08.04 - WA#19 Fix
										strActionTypeLIC = GetLICfromLOV(&quot;ORDER_SUB_TYPE&quot;, strActionType);
										//FTOSCANO
										sActionReasonLIC = GetLICfromLOV(&quot;ACS_ORDER_REASON&quot;, strActionReason);
										
										inComm.SetProperty(&quot;Asset Action Type&quot;,strActionTypeLIC);
										inComm.SetProperty(&quot;Asset Action&quot;,strOrderType);
										inComm.SetProperty(&quot;Reuse Active Order&quot;,strReuseActiveOrder);
										inComm.SetProperty(&quot;Asset Integration Id&quot;,outProp.GetProperty(&quot;IntegrationId&quot;));
										inComm.SetProperty(&quot;SkipGUINavigation&quot;,&quot;Y&quot;);
										inComm.SetProperty(&quot;ProcessName&quot;,&quot;TELCO Process Account Root Asset Action&quot;);

										bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;,inComm,outComm);
										strCreatedOrderId = outComm.GetProperty(&quot;Order Id&quot;);
										strCreRootItemID = outComm.GetProperty(&quot;Root Item Id&quot;);

										strErrDesc = outComm.GetProperty(&quot;Error Message&quot;);

										if(strErrDesc==&quot;&quot;)
										{										
											
											inHeadComm.SetProperty(&quot;OrderId&quot;,strCreatedOrderId); 
                                 			inHeadComm.GetChild(0).SetProperty(&quot;ORDER#Old Group Reason LIC&quot;,outProp.GetProperty(&quot;OldGroupReasonLIC&quot;));
                                 			OperateOrderHeaderCommands(inHeadComm,outHeadComm);								
                                 			strErrDesc = outHeadComm.GetProperty(&quot;ErrorMsg&quot;);
                                 		 	
                                 		 	if(strErrDesc!=&quot;&quot;)
                                			{
                                   				strErrorInOrderHeader = true;
                                			}
											else
											{
												//strErrDesc =&quot;No Order Item&quot;;
												//strCreatedOrderId = &quot;&quot;;
												var inAction = TheApplication().NewPropertySet();
												var outAction = TheApplication().NewPropertySet();
												inAction.SetProperty (&quot;VFTRCBU Action Reason&quot;, strActionReason);
												inAction.SetProperty (&quot;VFTRCBU Action Sub Reason&quot;,strActionSubReason);
												inAction.SetProperty (&quot;Root Id&quot;,strCreRootItemID);
												//FTOSCANO
												inAction.SetProperty (&quot;Action Type LIC&quot;,strActionTypeLIC);
												inAction.SetProperty (&quot;Action Reason LIC&quot;,sActionReasonLIC);
												
												SetActions(inAction,outAction);
												strErrDesc=outAction.GetProperty(&quot;ErrorMsg&quot;);
												
												if(strErrDesc!=&quot;&quot;)
												{
													bSubErr = true;
												}
											}
                                		}
										else
										{
											strCreatedOrderId = &quot;&quot;;
											strCreRootItemID = &quot;&quot;;
											bSubErr = true;
										}
									}
									catch(ex)
									{
										strErrDesc = ex.toString();
										strCreatedOrderId = &quot;&quot;;
										strCreRootItemID = &quot;&quot;;
									}
									finally
									{
										inComm = null;
										outComm = null;
										bsWFProcMng = null;
									}
								}
							}
							if(strErrDesc!=&quot;&quot;)
							{
								SetFieldValue(&quot;Status&quot;,lovError);
								SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 499));
								bSubErr = true; //PROD 28/08
								SetFieldValue(&quot;Created Order Id&quot;,&quot;&quot;);
								SetFieldValue(&quot;Created Order Item Id&quot;,&quot;&quot;);
							}
							else
							{
								SetFieldValue(&quot;Status&quot;,lovCreated);
								SetFieldValue(&quot;Error Desc&quot;,&quot;&quot;);			
								SetFieldValue(&quot;Created Order Id&quot;,strCreatedOrderId);
								SetFieldValue(&quot;Created Order Item Id&quot;,strCreRootItemID);

								iLineCount = iLineCount+1;
							}
						}
						WriteRecord(); //PROD 28/08
						bCCLineItem = NextRecord();
					}//while	
				}// End With 2
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				
				//PROD Retrofit 20/08 Adapted
				if(bSubErr == true)
				{
					SetFieldValue(&quot;Status&quot;,lovError);
					//SetFieldValue(&quot;Button Flag&quot;,1);
				}
				else
				{
					SetFieldValue(&quot;Status&quot;,lovCreated);
					SetFieldValue(&quot;Button Flag&quot;,4); //ACAMBAS: VFTRCBU-29934 - Changed from 2 to 4
				}
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				WriteRecord();	//PROD 28/08
			}	
		}// End With 1
	}
	catch(e)
	{
		Output.SetProperty(&quot;Error&quot;,e.toString()); //PROD Retrofit 28/08
	}
	finally
	{
		bcCarbonCopyLI	= null;
		bcCarbonCopyH	= null;
		boCarbonCopy	= null;
	}
}"
			   SEQUENCE="57"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SuspentResume"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SuspentResume(Input,Output)
{
	//Not in use
	try
	{ 
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var bcOrderLI		= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		
		var strCCHederId = Input.GetProperty(&quot;CC Header Id&quot;);
		var strRefOrderId=&quot;&quot;;
		var bCCLineItem = false;

		var iDefMaxLine = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_MAXLINE&quot;,&quot;MAX&quot;);
		var lovInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;In Progress&quot;);
		var lovCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Created&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);

		var iLineCount = 0;
		var strBillAccCode		= &quot;&quot;;
		var strCustomerCode		= &quot;&quot;;
		var strAccountId		= &quot;&quot;;
		var strBillAccId		= &quot;&quot;;
		var strPrevBillAccCode	= &quot;&quot;;
		var strPrevCustomerCode	= &quot;&quot;;
		var strMSISDN 			= &quot;&quot;;
		var strICCID			= &quot;&quot;;
		var strCommands			= &quot;&quot;;
		var strOrderType		= &quot;&quot;;
		var iMaxLineItems		= &quot;&quot;;
		var strErrDesc			= &quot;&quot;;
		var strCreatedOrderId	= &quot;&quot;;
		var strCreRootItemID	= &quot;&quot;;
		var bSubErr 			= false;
		var strDelarCode		= &quot;&quot;;
		var strPrevDelarCode	= &quot;&quot;;
		var strPrevCreatedOrderId	= &quot;&quot;;
		
		var strOrderHeadCommands=&quot;&quot;;
		var strOrderSubType		= &quot;&quot;; 
		
		var inHeadComm = TheApplication().NewPropertySet();
		var outHeadComm = TheApplication().NewPropertySet();
		var strCreatedBy = &quot;&quot;;
		var strErrorInOrderHeader = false;
		var strRootAssetId = &quot;&quot;;
		with(bcCarbonCopyH)
		{
			InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Ref Order Id&quot;);
			ActivateField(&quot;Max Line Items&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Order Type&quot;);
			ActivateField(&quot;Commands&quot;);
			SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHederId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				iMaxLineItems = GetFieldValue(&quot;Max Line Items&quot;);
				strOrderHeadCommands = GetFieldValue(&quot;Commands&quot;);
				if(ToNumber(iMaxLineItems)&lt; 1 || ToNumber(iMaxLineItems) &gt; ToNumber(iDefMaxLine))
				{
					iMaxLineItems = iDefMaxLine;
				}
				iMaxLineItems = 1;
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				SetFieldValue(&quot;Status&quot;,lovInProgress);
				strCreatedBy	= GetFieldValue(&quot;Created By&quot;);
				WriteRecord();
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				
				inHeadComm.SetProperty(&quot;Commands&quot;,strOrderHeadCommands);

				ParseCommands(inHeadComm,outHeadComm); // Parse Order Header Commands
				
				strOrderSubType = outHeadComm.GetProperty(&quot;ORDER#Order Sub Type&quot;);
				
				inHeadComm.Reset();
				inHeadComm.SetProperty(&quot;OrderId&quot;,&quot;&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Prevent Automatic Cancellation&quot;,&quot;Y&quot;);
				outHeadComm.SetProperty(&quot;ORDER#VF Bulk Order Flg&quot;,&quot;Y&quot;);
				inHeadComm.AddChild(outHeadComm);
				
				with(bcCarbonCopyLI) // Start With 2
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHederId+&quot;&apos; AND [Created Order Id] IS NULL&quot;);
					SetSortSpec(&quot;Customer Code(ASCENDING),Dealer Code(ASCENDING),Billing Account Code(ASCENDING)&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();
					while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false)
					{
						strBillAccCode		= GetFieldValue(&quot;Billing Account Code&quot;);
						strCustomerCode		= GetFieldValue(&quot;Customer Code&quot;);
						strMSISDN 			= GetFieldValue(&quot;MSISDN&quot;);
						strCommands			= GetFieldValue(&quot;Commands&quot;);
						strDelarCode		= GetFieldValue(&quot;Dealer Code&quot;);
						strRootAssetId		= GetFieldValue(&quot;Asset Id&quot;);
						
						strErrDesc = &quot;&quot;;						
						if(strBillAccCode==&quot;&quot; || strBillAccCode == null)
						{
							strErrDesc = strErrDesc+&quot;HATA 1:&apos;Fatura Hesabı&apos; alanı Boş.||&quot;;
						}
						if(strCustomerCode==&quot;&quot; || strCustomerCode == null)
						{
							strErrDesc = strErrDesc+&quot;Launch Error 2: &apos;Müşteri Codu&apos; alanı boş.||&quot;;
						}						
						if((strMSISDN==&quot;&quot; || strMSISDN == null) &amp;&amp; (strRootAssetId==&quot;&quot; || strRootAssetId==null))
						{
							strErrDesc = strErrDesc+&quot;Error 3: GSM NO yada Asset Id alanlarından biri dolu olmalı.&quot;;
						}
						if(strDelarCode==&quot;&quot; || strDelarCode == null)
						{
							strErrDesc = strErrDesc+&quot;Launch Error 4: &apos;Satışçı Kodu&apos; alanı boş.||&quot;;
						}						
						if(strErrDesc!=&quot;&quot;)
						{
							SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 499));
							SetFieldValue(&quot;Status&quot;,lovError);
						}
						else
						{
							var inProp = TheApplication().NewPropertySet();
							var outProp = TheApplication().NewPropertySet();

							inProp.SetProperty(&quot;MSISDN&quot;,strMSISDN);
							inProp.SetProperty(&quot;ICCID&quot;,strICCID);
							inProp.SetProperty(&quot;Dealer Code&quot;,strDelarCode);
							inProp.SetProperty(&quot;Customer Code&quot;,strCustomerCode);
							inProp.SetProperty(&quot;Billing Account Code&quot;,strBillAccCode);
							inProp.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);
							inHeadComm.GetChild(0).SetProperty(&quot;ORDER#VF Dealer Code&quot;,strDelarCode);
							
							inProp.SetProperty(&quot;OrderSubType&quot;,strOrderSubType);
							CheckMsisdnOnAsset(inProp,outProp); // Check msisdn for account in assets

							var inComm = TheApplication().NewPropertySet();
							var outComm = TheApplication().NewPropertySet();
							var bsWFProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
							
							strAccountId = outProp.GetProperty(&quot;AccountId&quot;);
							strBillAccId = outProp.GetProperty(&quot;BillAccountId&quot;);
							strErrDesc	 = outProp.GetProperty(&quot;ErrorMsg&quot;);
							
							
							if(strErrDesc==&quot;&quot;)
							{
								inComm.SetProperty(&quot;RowId&quot;,strAccountId);
								inComm.SetProperty(&quot;Billing Account Id&quot;,strBillAccId);
								inComm.SetProperty(&quot;Service Account Id&quot;,outProp.GetProperty(&quot;ServiceAccountId&quot;));
								inComm.SetProperty(&quot;Compound Product Number&quot;,outProp.GetProperty(&quot;CompoundProductNumber&quot;));
								inComm.SetProperty(&quot;Asset Integration Id&quot;,outProp.GetProperty(&quot;IntegrationId&quot;));
								inComm.SetProperty(&quot;Root Asset Id&quot;,outProp.GetProperty(&quot;RootAssetId&quot;));
								inComm.SetProperty(&quot;Old Group Reason&quot;,outProp.GetProperty(&quot;OldGroupReasonLIC&quot;));
								//inComm.SetProperty(&quot;Order Subtype&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;, &quot;114&quot;));
								inComm.SetProperty(&quot;Order Subtype&quot;, strOrderSubType);
								inComm.SetProperty(&quot;Order Type&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Modify Product &amp; Service&quot;));
								inComm.SetProperty(&quot;BC Context&quot;,&quot;Asset&quot;);
								inComm.SetProperty(&quot;GoToView&quot;,&quot;N&quot;);
								inComm.SetProperty(&quot;ExtCall&quot;,&quot;Y&quot;);
								inComm.SetProperty(&quot;OrSuTpFLG&quot;,&quot;BarUnbar&quot;);
	
								if(strOrderSubType == &quot;Resume - Credit&quot; || strOrderSubType == &quot;Resume - Fraud&quot; || strOrderSubType == &quot;Resume - Voluntary&quot; || strOrderSubType == &quot;Resume - Missing Document&quot; || strOrderSubType == &quot;Resume Order&quot;)
								{
									inComm.SetProperty(&quot;Resume Date&quot;,outProp.GetProperty(&quot;ToDay&quot;));
								}
								else
								{
									inComm.SetProperty(&quot;Suspend Date&quot;,outProp.GetProperty(&quot;ToDay&quot;));
								}
							
								DeactvOldAsset(inComm.GetProperty(&quot;Root Asset Id&quot;)); // Deactivate Old Assets
								
								if((iLineCount%iMaxLineItems)==0 || strPrevCustomerCode!=strCustomerCode || strDelarCode != strPrevDelarCode)
							    {
							    	strPrevCustomerCode = strCustomerCode;
									strPrevDelarCode = strDelarCode;
									GetActiveOrder(inComm,outComm);
									strErrDesc			= outComm.GetProperty(&quot;ErrorMsg&quot;);
									strCreatedOrderId = outComm.GetProperty(&quot;Active Order Id&quot;);
									strPrevCreatedOrderId= strCreatedOrderId;
									inHeadComm.SetProperty(&quot;OrderId&quot;,strCreatedOrderId);
									OperateOrderHeaderCommands(inHeadComm,outHeadComm);
									strErrDesc			= strErrDesc+outHeadComm.GetProperty(&quot;ErrorMsg&quot;);
									
									if(strErrDesc!=&quot;&quot;)
									{
										strErrDesc			= outComm.GetProperty(&quot;ErrorMsg&quot;);
										strErrDesc			= strErrDesc+&quot; - &quot;+outHeadComm.GetProperty(&quot;ErrorMsg&quot;);
										strErrorInOrderHeader = true;
									}									
								}
								else
								{
									strCreatedOrderId = strPrevCreatedOrderId;
								}
								
								if(strErrDesc==&quot;&quot;)
								{
									try{
										outComm.Reset();
										inComm.SetProperty(&quot;ProcessName&quot;,&quot;XWF SIS OM Suspend / Resume Products &amp; Services Process&quot;);
										inComm.SetProperty(&quot;Active Document Id&quot;,strCreatedOrderId);
										bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;,inComm,outComm);
										strErrDesc = outComm.GetProperty(&quot;CheckOrderErrMsg&quot;);
										
										if(strErrDesc==&quot;&quot;)
										{	
											bcOrderLI.SetViewMode(AllView);
											bcOrderLI.ClearToQuery();
											bcOrderLI.ActivateField(&quot;Line Number&quot;);
											bcOrderLI.ActivateField(&quot;IsRootItem&quot;);	
											bcOrderLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot;+strCreatedOrderId+&quot;&apos; AND [Asset Integration Id]=&apos;&quot;+outProp.GetProperty(&quot;IntegrationId&quot;)+&quot;&apos;&quot;);
											bcOrderLI.ExecuteQuery(ForwardOnly);
											if(bcOrderLI.FirstRecord())
											{
												strCreRootItemID =bcOrderLI.GetFieldValue(&quot;Root Order Item Id&quot;);
											}
											else 
											{
												strErrDesc =&quot;No Order Item&quot;;
												strCreatedOrderId = &quot;&quot;;
												strCreRootItemID = &quot;&quot;;
											}
										}
										else
										{
											strCreatedOrderId = &quot;&quot;;
											strCreRootItemID = &quot;&quot;;
										}
									}
									catch(ex)
									{
										strErrDesc = ex.toString();
										strCreatedOrderId = &quot;&quot;;
										strCreRootItemID = &quot;&quot;;
									}
									finally{
										inComm = null;
										outComm = null;
										bsWFProcMng = null;
									}
								}
							}

							if(strErrDesc!=&quot;&quot;)
							{
								SetFieldValue(&quot;Status&quot;,lovError);
								SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0,500));
								bSubErr = true;
								SetFieldValue(&quot;Created Order Id&quot;,&quot;&quot;);
								SetFieldValue(&quot;Created Order Item Id&quot;,&quot;&quot;);
							}
							else{
								SetFieldValue(&quot;Status&quot;,lovCreated);
								SetFieldValue(&quot;Error Desc&quot;,&quot;&quot;);
								SetFieldValue(&quot;Created Order Id&quot;,strCreatedOrderId);
								SetFieldValue(&quot;Created Order Item Id&quot;,strCreRootItemID);
								iLineCount = iLineCount+1;
							}
						}
						
						WriteRecord();
						bCCLineItem = NextRecord();
					}
				}// End With 2
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				if(bSubErr)
				{
					SetFieldValue(&quot;Status&quot;,lovError);
				}
				else{
					SetFieldValue(&quot;Status&quot;,lovCreated);
					SetFieldValue(&quot;Button Flag&quot;,4);
				}
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				WriteRecord();
			}
		}
	}
	catch(e)
	{
		Output.SetProperty(&quot;Error&quot;,e.toString());
	}
	finally
	{
		bcCarbonCopyLI	= null;
		bcCarbonCopyH	= null;
		boCarbonCopy	= null;
	}
}"
			   SEQUENCE="58"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:49:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="WA#19: AROSA 16-01-2015"
			   INACTIVE="N"
			   NAME="TransferPos2Pre"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function TransferPos2Pre(Input,Output)
{
	try
	{
		var boCarbonCopy	= TheApplication().GetBusObject(&quot;VF Carbon Copy BO&quot;);
		var bcCarbonCopyH	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk Header&quot;);
		var bcCarbonCopyLI	= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Bulk List Items&quot;);
		var bcOrderLI		= boCarbonCopy.GetBusComp(&quot;VF Carbon Copy Order Entry - Line Items&quot;);
		var strCCHeaderId = Input.GetProperty(&quot;CC Header Id&quot;);
		var bCCLineItem = false;
		var iDefMaxLine = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_MAXLINE&quot;,&quot;MAX&quot;);
		var lovInProgress = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;In Progress&quot;);
		var lovCreated = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Created&quot;);
		var lovError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CARBON_COPY_STATUS&quot;,&quot;Error&quot;);
		var iLineCount = 0;
		var strBillAccCode	= &quot;&quot;;
		var strCustomerCode	= &quot;&quot;;
		var strPrevBillAccCode	= &quot;&quot;;
		var strPrevCustomerCode   = &quot;&quot;; 
		var strMSISDN		= &quot;&quot;;
		var strCommands	= &quot;&quot;;
		var iMaxLineItems	= &quot;&quot;;
		var strErrDesc	= &quot;&quot;;
		var strCreatedOrderId	= &quot;&quot;;
		var strCreRootItemID	= &quot;&quot;;
		var bSubErr		= false;
		var strDealerCode	= &quot;&quot;;
		var strPrevDealerCode	= &quot;&quot;;
		var strOrderHeadCommands	= &quot;&quot;;
		var inHeadComm = TheApplication().NewPropertySet();
		var outHeadComm = TheApplication().NewPropertySet();
		var strErrorInOrderHeader = false;
		var strRootAssetId = &quot;&quot;;
		var strActionType = &quot;&quot;;
		var strActionTypeLIC=&quot;&quot;;
		var sActionReasonLIC=&quot;&quot;;
		var strActionReason	= &quot;&quot;;
		var strActionSubReason	= &quot;&quot;;
		var strReuseActiveOrder	= &quot;N&quot;;
		
		var strDueDate   = new Date();
		var strFutureOrder   = &quot;&quot;;
		var strOrderType = &quot;&quot;;
		
		with(bcCarbonCopyH)
		{         
			 SetViewMode(AllView);
			 ClearToQuery();
			 ActivateField(&quot;Ref Order Id&quot;);
			 ActivateField(&quot;Max Line Items&quot;);
			 ActivateField(&quot;Status&quot;);
			 ActivateField(&quot;Order Type&quot;);
			 ActivateField(&quot;Commands&quot;);
			 SetSearchExpr(&quot;[Id]=&apos;&quot;+strCCHeaderId+&quot;&apos;&quot;);
			 ExecuteQuery(ForwardOnly);
			 
			 if(FirstRecord())
			 {	 	
			     iMaxLineItems = GetFieldValue(&quot;Max Line Items&quot;);
				 strOrderHeadCommands = GetFieldValue(&quot;Commands&quot;);
				 strOrderType = GetFieldValue(&quot;Order Type&quot;);
				 
				 if(ToNumber(iMaxLineItems)&lt; 1 || ToNumber(iMaxLineItems) &gt; ToNumber(iDefMaxLine))
				 {
				 	iMaxLineItems = iDefMaxLine;
				 }
				 
				 TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				 SetFieldValue(&quot;Status&quot;,lovInProgress);
				 WriteRecord();
				
				 TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				 inHeadComm.SetProperty(&quot;Commands&quot;,strOrderHeadCommands);
				 ParseCommands(inHeadComm,outHeadComm); //Parse Order Header Commands                   

				 with(bcCarbonCopyLI) //Start With 2
				 {
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Carbon Header Id] =&apos;&quot;+strCCHeaderId+&quot;&apos; AND [Created Order Id] IS NULL&quot;);
					SetSortSpec(&quot;Customer Code(ASCENDING),Dealer Code(ASCENDING),Billing Account Code(ASCENDING)&quot;);
					ExecuteQuery(ForwardOnly);
					bCCLineItem = FirstRecord();
				   
				    while(bCCLineItem &amp;&amp; strErrorInOrderHeader==false) //PROD Retrofit 2808
				    {
						strBillAccCode		= GetFieldValue(&quot;Billing Account Code&quot;);
						strCustomerCode		= GetFieldValue(&quot;Customer Code&quot;);
						strMSISDN			= GetFieldValue(&quot;MSISDN&quot;);
						strCommands			= GetFieldValue(&quot;Commands&quot;);
						strDealerCode		= GetFieldValue(&quot;Dealer Code&quot;);
						strRootAssetId		= GetFieldValue(&quot;Asset Id&quot;);
						strActionType		= GetFieldValue(&quot;VFTRCBU Action Type&quot;);
						strActionReason 	= GetFieldValue(&quot;VFTRCBU Action Reason&quot;);
						strActionSubReason	= GetFieldValue(&quot;VFTRCBU Action Sub Reason&quot;);
								
						strDueDate 			= GetFieldValue(&quot;VFTRCBU Due Date&quot;);
						strFutureOrder   	= GetFieldValue(&quot;VFTRCBU Future Order&quot;);

						var inProp = TheApplication().NewPropertySet();
						inProp.SetProperty(&quot;MSISDN&quot;,strMSISDN);
						inProp.SetProperty(&quot;Dealer Code&quot;,strDealerCode);
						inProp.SetProperty(&quot;Customer Code&quot;,strCustomerCode);
						inProp.SetProperty(&quot;Billing Account Code&quot;,strBillAccCode);
						inProp.SetProperty(&quot;RootAssetId&quot;,strRootAssetId);
						inProp.SetProperty(&quot;Action Type&quot;, strActionType);
						inProp.SetProperty(&quot;Action Reason&quot;, strActionReason);
						
						inProp.SetProperty(&quot;Commands&quot;, strCommands);
						inProp.SetProperty(&quot;Order Type&quot;, strOrderType);

						strErrDesc = ValidateInputs(inProp);
						  
						if(strErrDesc==&quot;&quot;)
						{
							
							var outProp = TheApplication().NewPropertySet();
							
							inProp.SetProperty(&quot;OrderSubType&quot;,strActionType);
							
							CheckMsisdnOnAsset(inProp,outProp); // Check msisdn for account in assets
							strErrDesc    = outProp.GetProperty(&quot;ErrorMsg&quot;);
							
							if(strErrDesc==&quot;&quot;)
							{														
								
								if((iLineCount%iMaxLineItems)==0 || strPrevCustomerCode!=strCustomerCode || strDealerCode != strPrevDealerCode)
								{
									strPrevCustomerCode = strCustomerCode;
									strPrevDealerCode = strDealerCode;
									strReuseActiveOrder = &quot;N&quot;;
								}
								else
								{
									strReuseActiveOrder = &quot;Y&quot;;
								}
								
								try
								{
									var bsWFProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
									
									var inVal = TheApplication().NewPropertySet();
									var outVal = TheApplication().NewPropertySet();									
									inVal.SetProperty(&quot;AssetIntegrationId&quot;,outProp.GetProperty(&quot;IntegrationId&quot;));
									inVal.SetProperty(&quot;MSISDN&quot;,strMSISDN);
									inVal.SetProperty(&quot;ProcessName&quot;,&quot;VFTRCBU Validate Backward Migration WF&quot;); 
									
									bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;,inVal,outVal);
									
									strErrDesc = outVal.GetProperty(&quot;Error Message&quot;);
									
									if(strErrDesc==&quot;&quot;)
									{
										
										var inComm = TheApplication().NewPropertySet();
										var outComm = TheApplication().NewPropertySet();
										outComm.Reset();

										strActionTypeLIC = GetLICfromLOV(&quot;ORDER_SUB_TYPE&quot;, strActionType);
										sActionReasonLIC = GetLICfromLOV(&quot;ACS_ORDER_REASON&quot;, strActionReason);

										inComm.SetProperty(&quot;RowId&quot;,outProp.GetProperty(&quot;AccountId&quot;));
										inComm.SetProperty(&quot;Asset Integration Id&quot;,outProp.GetProperty(&quot;IntegrationId&quot;));
										inComm.SetProperty(&quot;ProcessName&quot;,&quot;TELCO Process Account Root Asset Action&quot;);
										inComm.SetProperty(&quot;Asset Action Type&quot;, strActionTypeLIC);
										inComm.SetProperty(&quot;Asset Action&quot;, &quot;Deleted&quot;);
										inComm.SetProperty(&quot;Reuse Active Order&quot;,strReuseActiveOrder);
										inComm.SetProperty(&quot;SkipGUINavigation&quot;,&quot;Y&quot;);
										
										bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;,inComm,outComm);
										
										strErrDesc = outComm.GetProperty(&quot;Error Message&quot;);

										//++VFTRCBU-29765 RPIRES
										var arrCommands = strCommands.split(&quot;;&quot;);
										var arrFieldValue = arrCommands[0].split(&quot;=&quot;);
										var strICCBtariff = arrFieldValue[0];
										arrFieldValue = arrCommands[1].split(&quot;=&quot;);
										var strICCBGroupId = arrFieldValue[1];
										
										if(strICCBtariff == &quot;&quot; || strICCBtariff == null)
											strErrDesc = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;,&quot;0181&quot;);
									
										if(GetHighFromLOV(&quot;VF_TARGET_TARIFF&quot;,strICCBtariff) == &quot;Y&quot; &amp;&amp; (strICCBGroupId == &quot;&quot; || strICCBGroupId == null))
											strErrDesc = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;,&quot;0182&quot;);
										//--VFTRCBU-29765 RPIRES
											
										if(strErrDesc==&quot;&quot;)
										{  	
											strCreatedOrderId = outComm.GetProperty(&quot;Order Id&quot;);
											strCreRootItemID = outComm.GetProperty(&quot;Root Item Id&quot;);
											
											var inAction = TheApplication().NewPropertySet();
											var outAction = TheApplication().NewPropertySet();
											inAction.SetProperty (&quot;VFTRCBU Action Reason&quot;,strActionReason);
											inAction.SetProperty (&quot;VFTRCBU Action Sub Reason&quot;,strActionSubReason);
											inAction.SetProperty (&quot;Root Id&quot;,strCreRootItemID);
											inAction.SetProperty (&quot;Action Type LIC&quot;,strActionTypeLIC);
											inAction.SetProperty (&quot;Action Reason LIC&quot;,sActionReasonLIC);
											inAction.SetProperty (&quot;iCCB Target Tariff&quot;,strICCBtariff); //VFTRCBU-29765 RPIRES
											inAction.SetProperty (&quot;iCCB Group Id&quot;,strICCBGroupId); //VFTRCBU-29765 RPIRES

											SetActions(inAction,outAction);

											strErrDesc=outAction.GetProperty(&quot;ErrorMsg&quot;);
											
											if(strErrDesc==&quot;&quot;)
											{
												inHeadComm.Reset();
												
												if (strFutureOrder != &quot;&quot; &amp;&amp; strFutureOrder != null &amp;&amp; strFutureOrder != &quot;N&quot;)
	 											{
													if (strDueDate != &quot;&quot; &amp;&amp; strDueDate != null)
												    {
														outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;, strFutureOrder);
														outHeadComm.SetProperty(&quot;ORDER#Requested Ship Date&quot;,strDueDate);
												    }
													else
													{
														outHeadComm.SetProperty(&quot;ORDER#VF Future Order Flag&quot;, strFutureOrder);											                                            
													}
												}
												outHeadComm.SetProperty(&quot;ORDER#VF Prevent Automatic Cancellation&quot;,&quot;Y&quot;);
												outHeadComm.SetProperty(&quot;ORDER#VF Bulk Order Flg&quot;,&quot;Y&quot;);
												outHeadComm.SetProperty(&quot;ORDER#VF Dealer Code&quot;,strDealerCode);
												inHeadComm.AddChild(outHeadComm);
												inHeadComm.SetProperty(&quot;OrderId&quot;,strCreatedOrderId); 
												
												OperateOrderHeaderCommands(inHeadComm,outHeadComm);  
												
												strErrDesc = outHeadComm.GetProperty(&quot;ErrorMsg&quot;);
											
												if(strErrDesc!=&quot;&quot;) 
												{
													strErrorInOrderHeader = true;
												}
											}
											else
											{
												bSubErr = true;
											}
										}
										//If Error on TELCO Process Account Root Asset Action
										else
										{	
											bSubErr = true;
										}																	
									}
									//If Error on VFTRCBU Validate Backward Migration WF
									else
									{
										bSubErr = true;
									}									
								}
								catch(ex)
								{
								  strErrDesc = ex.toString();
								  strCreatedOrderId = &quot;&quot;;
								  strCreRootItemID = &quot;&quot;;
								}
								finally
								{
								  inComm 		= null;
								  outComm 		= null;
								  inVal			= null;
								  inVal 		= null;
								  bsWFProcMng 	= null;
								}
							}
						}		
						if(strErrDesc!=&quot;&quot;)
						{
							bSubErr = true;
							SetFieldValue(&quot;Status&quot;,lovError);
							SetFieldValue(&quot;Error Desc&quot;,strErrDesc.substring(0, 499));
							SetFieldValue(&quot;Created Order Id&quot;,&quot;&quot;);
							SetFieldValue(&quot;Created Order Item Id&quot;,&quot;&quot;);
						}
						else
						{
							SetFieldValue(&quot;Status&quot;,lovCreated);
							SetFieldValue(&quot;Error Desc&quot;,&quot;&quot;);
							SetFieldValue(&quot;Created Order Id&quot;,strCreatedOrderId);
							SetFieldValue(&quot;Created Order Item Id&quot;,strCreRootItemID);
							iLineCount = iLineCount+1;					  
						}                                                
					WriteRecord();
					bCCLineItem = NextRecord();  				
					}
				}// End With 2
				
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;Y&quot;);
				
				if(bSubErr)
				{
				    SetFieldValue(&quot;Status&quot;,lovError);
				}
				else
				{
				    SetFieldValue(&quot;Status&quot;,lovCreated);
				    SetFieldValue(&quot;Button Flag&quot;,4); //ACAMBAS: VFTRCBU-29934 - Changed from 2 to 4
				}
				TheApplication().SetProfileAttr(&quot;CarbonCopyInProgress&quot;,&quot;N&quot;);
				WriteRecord();
			}
		}
	}
   catch(e)
   {
		TheApplication().RaiseErrorText(e.toString());
   }
   finally
   {
		var boCarbonCopy	= null;
		var bcCarbonCopyH	= null;
		var bcCarbonCopyLI	= null;
		var bcOrderLI		= null;
		var inHeadComm 		= null;
		var outHeadComm 	= null;
		var inProp 			= null;
		var outProp 		= null;
   }
}"
			   SEQUENCE="60"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="02/20/2015 01:31:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateOrderStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateOrderStatus(IInputs,OOutputs) 
{
	//FTOSCANO - Start
	var boOrderEntry2	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
	var bcOrderEntry2	= boOrderEntry2.GetBusComp(&quot;Order Entry - Orders&quot;);
	var strCreatedOrderId	= IInputs.GetProperty(&quot;strCreatedOrderId&quot;);
	var sSubmitting = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submitting&quot;);
	
	//++FCABRAL: 20151125-VFTRCBU-21299
	//var sSubError = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submission Error&quot;);
	var sRollBackStatus = IInputs.GetProperty(&quot;OriginalStatus&quot;);
	//--

	var oPSIn = TheApplication().NewPropertySet();
	var oPSOut = TheApplication().NewPropertySet();
	var oBS = TheApplication().GetService(&quot;Workflow Process Manager&quot;);

	with(bcOrderEntry2)
	{ 
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(&quot;Status&quot;);
		ActivateField(&quot;TELCO Error Description&quot;);
		SetSearchExpr(&quot;[Id]=&apos;&quot;+strCreatedOrderId+&quot;&apos;&quot;);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{
			var strStatusOrder = GetFieldValue(&quot;Status&quot;);
			//++FCABRAL: 20151125-VFTRCBU-21299, Disabled: Field is controled by Frame to OSM WorkFlows
			//SetFieldValue(&quot;TELCO Error Description&quot;,TheApplication().GetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;));
			//WriteRecord();
			//--
			if(strStatusOrder == sSubmitting)
			{
				//Restore Status
				oPSIn.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Update Order Status&quot;);
				oPSIn.SetProperty(&quot;RowId&quot;, strCreatedOrderId);
				//++FCABRAL: 20151125-VFTRCBU-21299				
				oPSIn.SetProperty(&quot;NewStatusValue&quot;, sRollBackStatus);
				//oPSIn.SetProperty(&quot;NewStatusValue&quot;, sSubError);
				//--
				oBS.InvokeMethod(&quot;RunProcess&quot;, oPSIn, oPSOut);
			}			
	   	}
	}							
	//FTOSCANO - End
}"
			   SEQUENCE="61"
			   UPDATED="08/21/2016 01:41:05"
			   UPDATED_BY="SADMIN"
			   CREATED="11/02/2015 10:35:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateOrderSystemField"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateOrderSystemField(strCCHederId, strCCLineId)
{
	if(SH1RUN1==&quot;OK&quot;)
	{
		Clib.system(strShell+&quot;/Upd_Order_CreatedBy.sh &quot;+strCCHederId+&quot; &quot;+strCCLineId);
	}
}"
			   SEQUENCE="62"
			   UPDATED="08/21/2016 01:41:06"
			   UPDATED_BY="SADMIN"
			   CREATED="06/14/2016 22:24:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateInputs"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateInputs(Inputs) 
{
	var strMSISDN			= Inputs.GetProperty(&quot;MSISDN&quot;);
	var strDealarCode 		= Inputs.GetProperty(&quot;Dealer Code&quot;);
	var strCustomerCode 	= Inputs.GetProperty(&quot;Customer Code&quot;);
	var strBillAccCode 		= Inputs.GetProperty(&quot;Billing Account Code&quot;);
	var strRootAssetId 		= Inputs.GetProperty(&quot;RootAssetId&quot;);
	var strActionType 		= Inputs.GetProperty(&quot;Action Type&quot;);
	var strActionReason 	= Inputs.GetProperty(&quot;Action Reason&quot;);
	
	//WA#19 drop2 start
	var strCommands			= Inputs.GetProperty(&quot;Commands&quot;);
	var strOrderType		= Inputs.GetProperty(&quot;Order Type&quot;);
	var strBundlePromoCode	= Inputs.GetProperty(&quot;Promotion Code&quot;);
	var strHandsetCommands	= Inputs.GetProperty(&quot;Handset Commands&quot;);
	//WA#19 drop2 end
	
	var strErrDesc	= &quot;&quot;;

	if(strBillAccCode==&quot;&quot; || strBillAccCode == null)
	{
		strErrDesc = strErrDesc+&quot;HATA 1:&apos;Fatura Hesabi&apos; alani Bos.||&quot;;
	}
	
	if(strCustomerCode==&quot;&quot; || strCustomerCode == null)
	{
		strErrDesc = strErrDesc+&quot;Launch Error 2: &apos;Müsteri Codu&apos; alani bos.||&quot;;
	}
	
    if((strMSISDN==&quot;&quot; || strMSISDN == null) &amp;&amp; (strRootAssetId==&quot;&quot; || strRootAssetId==null))
    {
		strErrDesc = strErrDesc+&quot;Error 3: GSM NO yada Asset Id alanlarindan biri dolu olmali.&quot;;
    }
    
    if(strDealarCode==&quot;&quot; || strDealarCode == null)
    {
		strErrDesc = strErrDesc+&quot;Launch Error 4: &apos;Satisçi Kodu&apos; alani bos.||&quot;;
	}
	
	if(strActionType ==&quot;&quot; || strActionType == null)
	{
		strErrDesc = strErrDesc+&quot;Launch Error 5: &apos;Eylem Tipi&apos; alani bos.||&quot;;
	}
	
	if(strActionReason ==&quot;&quot; || strActionReason == null)
	{
		strErrDesc = strErrDesc+&quot;Launch Error 6: &apos;İşlem Nedeni&apos; alani bos.||&quot;;
	}
	
	//WA#19 drop2 start
	if(strOrderType == &quot;Transfer Post to Pre&quot;)
	{
		if(	
			strCommands == &quot;&quot; || strCommands == null)
		{
			strErrDesc = strErrDesc+&quot;Launch Error 7: Tarife are mandatory fields for Post to Pre Migration Orders .||&quot;;
		}
	}

	if(strOrderType == &quot;Handset Campaign&quot;)
	{
		if(	strBundlePromoCode == &quot;&quot;	|| strBundlePromoCode == null ||
			strHandsetCommands == &quot;&quot;	|| strHandsetCommands == null)
		{
			strErrDesc = strErrDesc+&quot;Launch Error 8: Kampanyası ID and Cihaz Komutları are mandatory fields for Handset Campaings Orders .||&quot;;
		}
	}
	//WA#19 drop2 end
	
	return strErrDesc;
}"
			   SEQUENCE="63"
			   UPDATED="08/21/2016 01:41:06"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2014 11:31:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateOrder(Inputs,Outputs)
{
	try
	{
		var head = Inputs.GetProperty(&quot;OHeadId&quot;); //QuoteId
		var item = Inputs.GetProperty(&quot;OItemId&quot;); // Line Item Id
		var strOrderType = Inputs.GetProperty(&quot;OrderType&quot;); 
		
		//var io = &quot;7.7 Order Entry Integration Object&quot;; // Integration Object
	    var io = &quot;SIS OM Order&quot;; // Integration Object
		var sRCOIS = TheApplication().GetService(&quot;Remote Complex Object Instance Service&quot;);
		var sTelcoUtilities = TheApplication().GetService(&quot;TELCO Order Management Utilities&quot;);
		var bsWFProcMng = TheApplication().GetService(&quot;Workflow Process Manager&quot;);	
		var inp = TheApplication().NewPropertySet();
		var out = TheApplication().NewPropertySet();
		var inp1 = TheApplication().NewPropertySet(); //JMARQUES
		var out1 = TheApplication().NewPropertySet(); //JMARQUES
		var strErrorMsg = &quot;&quot;;
		//VFTR Retrofits | TiagoRocha	
		var strBatchVal = &quot;&quot;;
		var strBatchValMsg = TheApplication().NewPropertySet();
		var strBatchValMsgText = &quot;&quot;;
		
		
		
		if(strOrderType == &quot;Activation&quot;)
		{
			inp1.SetProperty(&quot;OrderId&quot;,head);
			inp1.SetProperty(&quot;ItemId&quot;,item);
			sTelcoUtilities.InvokeMethod(&quot;SetConfiguratorProfileAttributes&quot;,inp1,out1); //jmarques
		
			inp.SetProperty(&quot;Mode&quot;,&quot;Order&quot;);
			inp.SetProperty(&quot;IntObjName&quot;, io);
			inp.SetProperty(&quot;ObjId&quot;,head);
			inp.SetProperty(&quot;RootId&quot;,item);
			inp.SetProperty(&quot;DetailedExpl&quot;,&quot;Y&quot;); //VFTR Retrofits | TiagoRocha
			inp.SetProperty(&quot;DeltaQuote&quot;,&quot;N&quot;);
			sRCOIS.InvokeMethod(&quot;BatchValidate&quot;,inp,out);
			strErrorMsg = out.GetProperty(&quot;Error Message&quot;);
			strBatchVal = out.GetProperty(&quot;Batch Validation Status&quot;); //VFTR Retrofits | TiagoRocha
			
			if(strErrorMsg == &quot;Y&quot;)
			{
				strErrorMsg = out.GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Expl0&quot;);
				var rExp = new RegExp(&quot;&lt;p&gt;&lt;/p&gt;&quot;);
			
				while(rExp.test(strErrorMsg))
				{
					strErrorMsg = strErrorMsg.replace(&quot;&lt;p&gt;&lt;/p&gt;&quot;,&quot;&quot;);
				}
				Outputs.SetProperty(&quot;ErrorMsg&quot;,strErrorMsg);
			}
	
			else //if(strBatchVal==&quot;Incomplete&quot;)//DEF-4165 VFTR Retrofits | TiagoRocha
			{
				//strBatchVal = out.GetChild(0).GetChild(5); DEF-11217
				strBatchValMsg= out.GetChild(0).GetChild(5).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0); //DEF-11217
				for(var i=0; i&lt;strBatchValMsg.GetChildCount();i++)
					{
						if(strBatchVal==&quot;Incomplete&quot; &amp;&amp; strBatchValMsg.GetChild(i).PropertyExists(&quot;Expl1&quot;))
						{
							strBatchValMsgText=strBatchValMsg.GetChild(i).GetProperty(&quot;Expl1&quot;);
							break;
						}
						if(strBatchValMsg.GetChild(i).PropertyExists(&quot;Eligibility Reason&quot;))
						{	
							if(strBatchValMsg.GetChild(i).GetProperty(&quot;Eligibility Reason&quot;).length&gt;1)
								{
									strBatchValMsgText=strBatchValMsg.GetChild(i).GetProperty(&quot;Eligibility Reason&quot;);
									break;
								}
						}
					}
				if(strBatchValMsgText!=&quot;&quot;)
				{
					Outputs.SetProperty(&quot;ErrorMsg&quot;,strBatchValMsgText);
				}
				
			}//DEF-4165
		}
		else 
		{
			inp.SetProperty(&quot;ProcessName&quot;,&quot;VF Carbon Copy Validate Modifed Order&quot;);
			inp.SetProperty(&quot;Object Id&quot;,head);
			inp.SetProperty(&quot;RootItemId&quot;,item);
			bsWFProcMng.InvokeMethod(&quot;RunProcess&quot;,inp,out);
			strErrorMsg = out.GetProperty(&quot;ExplanationMsg0&quot;); //RCRISPIM: Retrofits 2015 February Minor
			if(strErrorMsg != &quot;&quot;)
			{
				strErrorMsg = out.GetProperty(&quot;ExplanationMsg0&quot;);
				Outputs.SetProperty(&quot;ErrorMsg&quot;,strErrorMsg); //RCRISPIM: Retrofits 2015 February Minor
			}
			//RCRISPIM: Retrofits 2015 February Minor - START
			else
			{						
			  //if(out.GetChildCount() &gt; 1)//FTOSCANO
				if(out.GetChildCount() &gt;= 1)//FTOSCANO  //MSS:ps &quot;out&quot; with one child only (SblMsg)
				{
					var psOut = TheApplication().NewPropertySet();
					psOut = out.GetChild(0).Copy();
					strErrorMsg = psOut.GetProperty(&quot;Error Message&quot;);
					var strBaValid	= psOut.GetProperty(&quot;Batch Validation Status&quot;);
					
					if(strErrorMsg != &quot;&quot;)
					{
						strErrorMsg = psOut.GetChild(0).GetChild(0).GetProperty(&quot;Expl0&quot;);
							
						var rExp = new RegExp(&quot;&lt;p&gt;&lt;/p&gt;&quot;);
					
						while(rExp.test(strErrorMsg))
						{
							strErrorMsg = strErrorMsg.replace(&quot;&lt;p&gt;&lt;/p&gt;&quot;,&quot;&quot;);
						}
						Outputs.SetProperty(&quot;ErrorMsg&quot;,strErrorMsg);
					}
					else if(strBaValid !=&quot;Valid&quot;)
					{
						Outputs.SetProperty(&quot;ErrorMsg&quot;,&quot;Oluşturmuş olduğunuz bu sipariş hatalı ürün yada özellik içermekte, siparişler ekranından hatanızı manuel düzeltebilirsiniz.&quot;);
					}
					//RCRISPIM: Retrofits 2015 February Minor - END
				}//FTOSCANO
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;,e.toString());
	}
	finally
	{
		sRCOIS = null;
		inp = null;
		out = null;
		inp1 = null;
		out1 = null;
		bsWFProcMng = null;
		strBatchValMsg = null;
		sTelcoUtilities = null;
	}
}"
			   SEQUENCE="64"
			   UPDATED="03/26/2017 00:30:59"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="testcommand"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function testcommand(inn,out)
{
/*
	var input =  TheApplication().NewPropertySet();
	var output =  TheApplication().NewPropertySet();
	
	ParseCommands(inn,output);
	
//	var input2 =  //TheApplication().NewPropertySet();
	//var cntProp = output.GetPropertyCount();
	var propName = output.GetFirstProperty();
	var propVal = &quot;&quot;;
	var iStartORDER =&quot;&quot;;
	var patt = /ORDER#/;
	var patt1 = &quot;&quot;+1000+&quot;\\.&quot;;
	var dj = 1000;
	//var patt1 = /&apos;dj&apos;\./;
	var inof =&quot;&quot;;
	
	while(propName!=&quot;&quot;)
	{
		propVal = output.GetProperty(propName);		
		var rExp = new RegExp(patt);
		iStartORDER = rExp.test(propName);
		if(iStartORDER) 
		{
			inof = propName.indexOf(&quot;!&quot;);
			propName = propName.substring(5);
			var lenn = propName.length;
		}
		propName = output.GetNextProperty();		
	}
	
	var aa =&quot;&quot;;
	*/
	try
	{
	var err = &quot;&quot;;
	var Bservice = TheApplication().GetService(&quot;EAI XML Converter&quot;);	
	var input =  TheApplication().NewPropertySet();
	var output =  TheApplication().NewPropertySet();
	input.SetProperty(&quot;1111&quot;,&quot;aaa&quot;);
	input.SetProperty(&quot;1112&quot;,&quot;bb&quot;);
	Bservice.InvokeMethod(&quot;PropSetToXML&quot;,input,output);
	}
	catch(e)
	{
		err = e.toString();
	}
	finally
	{
		err = null;
	}
}"
			   SEQUENCE="59"
			   UPDATED="08/21/2016 01:41:06"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2014 08:02:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



