<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF P2P Interfaces"
	   UI_FREEZE="N"
	   UPDATED="09/01/2016 12:42:58"
	   UPDATED_BY="ACAMBAS"
	   CREATED="10/06/2009 10:41:44"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Group By"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="09/01/2016 12:39:43"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="ACAMBAS"
		   UPDATED="09/01/2016 12:42:58"
		   UPDATED_BY="ACAMBAS"
		   CREATED="11/18/2010 19:29:33"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Group By"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="11/18/2010 19:29:33"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2010 19:29:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="(declarations)"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="var fromcase ;"
			   SEQUENCE="1"
			   UPDATED="07/11/2011 14:33:16"
			   UPDATED_BY="SADMIN"
			   CREATED="07/11/2011 14:33:16"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Init"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Init(Inputs, Outputs)
{
	Outputs.SetProperty (&quot;Product Name&quot;, &quot;&quot;);
	Outputs.SetProperty (&quot;Product Id&quot;, &quot;&quot;);
	Outputs.SetProperty (&quot;Subscription No&quot;, &quot;&quot;);
	Outputs.SetProperty (&quot;Subscription Status&quot;, &quot;&quot;);
	Outputs.SetProperty (&quot;CustomerCode&quot;, &quot;&quot;);
	Outputs.SetProperty (&quot;BillingAccountCode&quot;, &quot;&quot;);
	Outputs.SetProperty (&quot;MSISDN&quot;, &quot;&quot;);  
	return (CancelOperation);
}"
			   SEQUENCE="4"
			   UPDATED="06/30/2012 18:22:08"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2010 19:29:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Query"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Query (Inputs, Outputs)
{
	try
	{
		var newvarProductName = &quot;&quot;;
		var oldvarProductName = &quot;&quot;;
		var AccountBO : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var AccountBC : BusComp = AccountBO.GetBusComp(&quot;Asset Mgmt - Asset - Header - HP 3&quot;);
		var TariffBC : BusComp = AccountBO.GetBusComp(&quot;VF Product Add Assets&quot;);
		
		var searchString = Inputs.GetProperty(&quot;search-string&quot;);
        var sAccountId = &quot;&quot;;
        var indAccount;
        var indVirg;
        var indBilling = &quot;&quot;;
        var indMSISDN= &quot;&quot;;
        var indProduct = &quot;&quot;;
        var indStatus = &quot;&quot;;
        var fromcase = &quot;&quot;;
        var sProductId = &quot;&quot;;
        var sProductIdTemp = &quot;&quot;;
        var sTPlanSearchString = &quot;&quot;;
   		var productExist = &quot;&quot;;
        var VirgProduct;
        var sStatus = &quot;&quot;;
        var sTPlan = &quot;&quot;;
        var VirgStatus ;
        var psOutputs : PropertySet = TheApplication().NewPropertySet();
        var counter = 0;
        var tmpStr = &quot;&quot;;
		fromcase = &quot;&quot;;
		var x = 0;

		indAccount = searchString.indexOf(&quot;CustomerCode&quot;);
		indBilling = searchString.indexOf(&quot;BillingAccountCode&quot;);
		indMSISDN = searchString.indexOf(&quot;MSISDN&quot;);
		indProduct = searchString.indexOf(&quot;Product Id&quot;);
		if (indAccount &gt; 0)
		{
			sAccountId =  searchString.substring(indAccount);
			fromcase = &quot;Customer Code&quot;;
		}
		else if (indBilling &gt; 0 )
		{
			sAccountId =  searchString.substring(indBilling);
			fromcase = &quot;Billing Account Code&quot;;
		}
		else if (indMSISDN &gt; 0)
		{
			sAccountId =  searchString.substring(indMSISDN);
			fromcase = &quot;Root MSISDN&quot;;
		}
        if (indBilling &gt; 0 )
        {
	        sAccountId = &quot;=&quot;;
	        tmpStr =  searchString.substring(indBilling);
	        while (indBilling &gt; -1)
	        {
	            tmpStr =  tmpStr.substring(indBilling);
	            indVirg = tmpStr.indexOf(&apos;&quot;&apos;);   
	            tmpStr = tmpStr.substring(indVirg+1);
	            indVirg = tmpStr.indexOf(&apos;&quot;&apos;);
	            indBilling = tmpStr.indexOf(&quot;BillingAccountCode&quot;);
	            sAccountId = sAccountId + &quot;&apos;&quot; + tmpStr.substring(0,indVirg) + &quot;&apos;&quot;;
	            if(indBilling &gt; -1)
	            {
	            	sAccountId = sAccountId + &quot; OR [Billing Account Code] = &quot;;
	            }
	        }
       }
       else 
       {
	        indVirg = sAccountId.indexOf(&apos;&quot;&apos;);   
	        sAccountId = sAccountId.substring(indVirg+1);
	        indVirg = sAccountId.indexOf(&apos;&quot;&apos;);
	        sAccountId = sAccountId.substring(0,indVirg);
        }

        if (indProduct &gt; 0 )
		{
			sProductId = &quot;=&quot;;
			tmpStr =  searchString.substring(indProduct);
			VirgProduct = tmpStr.indexOf(&apos;&quot;&apos;);   
			tmpStr = tmpStr.substring(VirgProduct+1);
			VirgProduct = tmpStr.indexOf(&apos;&quot;&apos;);
			indProduct = tmpStr.indexOf(&quot;Product Id&quot;);
			sProductId  = sProductId  + &quot;&apos;&quot; + tmpStr.substring(0,VirgProduct) + &quot;&apos;&quot; ;
			sProductIdTemp  = tmpStr.substring(0,VirgProduct)
		    with(TariffBC)
			{
				  SetViewMode(AllView);
				  ActivateField(&quot;Product Number&quot;);
				  ActivateField(&quot;Product Name&quot;);
				  ActivateField(&quot;Product Name Translated All&quot;);
				  ClearToQuery();
				  //VFTK Junaid 20120519 - Scripting 15 not needed because checking index and then executing query
				  SetSearchSpec(&quot;Product Number&quot;,sProductIdTemp);
				  ExecuteQuery(ForwardOnly);
	  			  productExist = FirstRecord();
			      if(productExist)
			      {
			          newvarProductName = GetFieldValue(&quot;Product Name&quot;);			  
					  sTPlanSearchString = &quot;=&apos;&quot; + GetFieldValue(&quot;Product Name Translated All&quot;) +&quot;&apos;&quot;;  
					  sTPlanSearchString = sTPlanSearchString+ &quot; OR [VF Tariff Plan] = &apos;&quot; +newvarProductName+ &quot;&apos;&quot;;
					  oldvarProductName = newvarProductName;
					  productExist = NextRecord();
					  while(productExist)
					  {
					  	newvarProductName = GetFieldValue(&quot;Product Name&quot;);
						if (newvarProductName != oldvarProductName)
						{
							sTPlanSearchString = sTPlanSearchString + &quot; OR [VF Tariff Plan] = &apos;&quot; +newvarProductName+ &quot;&apos;&quot;;
							oldvarProductName = newvarProductName;
						}
 						sTPlanSearchString = sTPlanSearchString + &quot; OR [VF Tariff Plan] = &apos;&quot;+GetFieldValue(&quot;Product Name Translated All&quot;)+&quot;&apos;&quot;;
 						productExist = NextRecord();
				 	  }	
				  }
				  else
				  {
				      sTPlanSearchString = &quot;=&apos;&quot; + &quot;NO PRODUCT&apos;&quot;;  				  
				  }  
			}						
			while (indProduct &gt; -1)
			{
           		tmpStr =  tmpStr.substring(indProduct);
				VirgProduct = tmpStr.indexOf(&apos;&quot;&apos;);   
				tmpStr = tmpStr.substring(VirgProduct+1);
				VirgProduct = tmpStr.indexOf(&apos;&quot;&apos;);
				indProduct = tmpStr.indexOf(&quot;Product Id&quot;);
				sProductId = sProductId + &quot; OR [Product Number] = &quot;;
				sProductId  = sProductId  + &quot;&apos;&quot; + tmpStr.substring(0,VirgProduct) + &quot;&apos;&quot; ;			
			    sProductIdTemp  = tmpStr.substring(0,VirgProduct)
		        with(TariffBC)
			    {
				  SetViewMode(AllView);
				  ActivateField(&quot;Product Number&quot;);
  				  ActivateField(&quot;Product Name&quot;);
				  ActivateField(&quot;Product Name Translated All&quot;);
				  ClearToQuery();
				  //VFTK Junaid 20120519 - Scripting 15 not needed because checking index and then executing query
				  SetSearchSpec(&quot;Product Number&quot;,sProductIdTemp);
				  ExecuteQuery(ForwardOnly);
	  			  productExist = FirstRecord();
			      if(productExist)
			      {
			          newvarProductName = GetFieldValue(&quot;Product Name&quot;);			  
					  sTPlanSearchString = sTPlanSearchString+ &quot; OR [VF Tariff Plan] = &apos;&quot; +GetFieldValue(&quot;Product Name Translated All&quot;)+ &quot;&apos;&quot;;  
					  sTPlanSearchString = sTPlanSearchString+ &quot; OR [VF Tariff Plan] = &apos;&quot; +newvarProductName+ &quot;&apos;&quot;;
					  oldvarProductName = newvarProductName;
					  productExist = NextRecord();
					  while(productExist)
					  {
					  	newvarProductName = GetFieldValue(&quot;Product Name&quot;);
						if (newvarProductName != oldvarProductName)
						{
							sTPlanSearchString = sTPlanSearchString+&quot; OR [VF Tariff Plan] = &apos;&quot; +newvarProductName+ &quot;&apos;&quot;;
							oldvarProductName = newvarProductName;
						}
 						sTPlanSearchString = sTPlanSearchString + &quot; OR [VF Tariff Plan] = &apos;&quot;+GetFieldValue(&quot;Product Name Translated All&quot;)+&quot;&apos;&quot;;
 						productExist = NextRecord();
				 	  }	
			 	  }					
			    }
			 }
	 	}
		var currStatus = &quot;&quot;;
		var isRecord = false;
		if(sAccountId != &quot;&quot;)
		{
			with (AccountBC)
			{
				SetViewMode(AllView);
				ActivateField(&quot;Customer Code&quot;);
				ActivateField(&quot;Billing Account Code&quot;);
				ActivateField(&quot;Root MSISDN&quot;);
				ActivateField(&quot;Status&quot;);
				ActivateField(&quot;VF Tariff Plan&quot;);
				ClearToQuery();
				SetSearchSpec(fromcase, sAccountId);
				if (sTPlanSearchString != &quot;&quot;)
				{
				SetSearchSpec(&quot;VF Tariff Plan&quot;, sTPlanSearchString);
				}
				SetSortSpec(&quot;Status(DESCENDING)&quot;);
				ExecuteQuery(ForwardOnly);
				isRecord = FirstRecord();
				if(isRecord)
				{
					while(isRecord)
					{
						sStatus = GetFieldValue(&quot;Status&quot;);
						sTPlan = GetFieldValue(&quot;VF Tariff Plan&quot;);
						if(sStatus != currStatus)
						{
							groupByStatus(sProductId, fromcase, sTPlanSearchString, sAccountId, sStatus,Outputs);
						}
						currStatus = sStatus;
						isRecord = NextRecord();
					}
				}
			}
		}
	}
	finally
	{
		AccountBC = null;
		AccountBO = null;
		TariffBC  = null;
		psOutputs = null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="5"
			   UPDATED="11/21/2012 09:44:25"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2010 19:29:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/********************************************************************************
* Author : Maurizio Asaro                                                       *
* Date   : 09-11-2010                                                           *
********************************************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;Init&quot;)
	{
	  return (Init(Inputs,Outputs));
	}
	if (MethodName == &quot;Query&quot;)
	{
		return (Query (Inputs,Outputs));
	}
	return (ContinueOperation);
}"
			   SEQUENCE="6"
			   UPDATED="06/30/2012 18:20:14"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2010 19:29:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="groupByPlan"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function groupByPlan (sProductId, fromcase, sAccountId, sStatus, sTPlan,Outputs)
{
	try
	{
		var AccountBO : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var AccountBC : BusComp = AccountBO.GetBusComp(&quot;Asset Mgmt - Asset - Header - HP 3&quot;);
		var ProductBC : BusComp = AccountBO.GetBusComp(&quot;VF Product Add Assets&quot;);
		var Inactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var Transfersame = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1121&quot;);
		var Transferacross = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var productExist = &quot;&quot;;
		var indPart;
		var subnocount = 0;
	    var	nCount = 0;
		var isRecord = false;
		var sTPlanId = &quot;&quot;;
		var Reason  = &quot;&quot;; 
		var subType = &quot;&quot;;
		
		if(sAccountId != &quot;&quot; &amp;&amp; sStatus != &quot;&quot; &amp;&amp; sTPlan != &quot;&quot;)   
		{
			with(ProductBC)
			{
			  SetViewMode(AllView);
			  ActivateField(&quot;Product Number&quot;);
			  ActivateField(&quot;VF Payment Type&quot;);
			  ClearToQuery();
			  SetSearchExpr(&quot;[Product Name Translated All] = &apos;&quot;+sTPlan+&quot;&apos; OR [Product Name] = &apos;&quot;+sTPlan+&quot;&apos;&quot;);
			  ExecuteQuery(ForwardOnly);
			  productExist = FirstRecord();
			  if(productExist)
			  {
			  	sTPlanId = GetFieldValue(&quot;Product Number&quot;);
			  	subType=GetFieldValue(&quot;VF Payment Type&quot;);
			  }
			}
			with (AccountBC)
			{
			
				inProp.SetProperty(&quot;sAccountId&quot;,sAccountId); //Id Validation
				inProp.SetProperty(&quot;sTPlan&quot;,sTPlan); //Id Validation
				inProp.SetProperty(&quot;Validation Input Mode&quot;,&quot;AND&quot;);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
				SetViewMode(AllView);
				ActivateField(&quot;Customer Code&quot;);
				ActivateField(&quot;Billing Account Code&quot;);
				ActivateField(&quot;Root MSISDN&quot;);  
				ActivateField(&quot;Reason&quot;);
				ClearToQuery();
				SetSearchSpec(fromcase, sAccountId);
				SetSearchSpec(&quot;VF Tariff Plan&quot;, &quot;&apos;&quot; + sTPlan + &quot;&apos;&quot;); //ACAMBAS: VFTRCBU-33108 - Added &quot;&apos;&quot; before and after tariff plan name
				SetSearchSpec(&quot;Status&quot;, sStatus);
				ExecuteQuery(ForwardOnly);
				isRecord = FirstRecord();
				nCount = CountRecords();//shouldn&apos;t be removed since it is used for below logic
				if (isRecord)
				{
					while(isRecord &amp;&amp; sStatus == Inactive)
					{
				   		Reason = GetFieldValue(&quot;Reason&quot;);
						if (Reason == Transfersame || Reason == Transferacross)
						{
							nCount = nCount-1;
						}
						isRecord = NextRecord();
					}
			   	    var psOutputs = TheApplication().NewPropertySet();
					psOutputs.SetProperty(&quot;Product Name&quot;, sTPlan);
					psOutputs.SetProperty(&quot;Product Id&quot;,sTPlanId);
					psOutputs.SetProperty(&quot;Subscription No&quot;, ToInteger(nCount));
					psOutputs.SetProperty(&quot;Subscription Status&quot;, sStatus);
					Outputs.AddChild(psOutputs);
				}
			}
		}
	}
	finally
	{	
		ProductBC = null;
		AccountBC = null;
		AccountBO = null;
		psOutputs = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="2"
			   UPDATED="09/01/2016 12:42:58"
			   UPDATED_BY="ACAMBAS"
			   CREATED="11/18/2010 19:29:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="groupByStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function groupByStatus (sProductId, fromcase, sTPlanSearchString, sAccountId, sStatus, Outputs)
{
	try
	{
		var AccountBO : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var AccountBC : BusComp = AccountBO.GetBusComp(&quot;Asset Mgmt - Asset - Header - HP 3&quot;);
		var TariffBC : BusComp = AccountBO.GetBusComp(&quot;VF Product Add Assets&quot;);
		
		var sTPlan = &quot;&quot;;
		var sTPlanId = &quot;&quot;;
		var currTPlan = &quot;&quot;;
		var nCount = 0;
		var isRecord = false;
		
		if(sAccountId != &quot;&quot; &amp;&amp; sStatus != &quot;&quot;)
		{
			with (AccountBC)
			{
				SetViewMode(AllView);
				ActivateField(&quot;Customer Code&quot;);
				ActivateField(&quot;Billing Account Code&quot;);
				ActivateField(&quot;Root MSISDN&quot;); 
				ActivateField(&quot;Status&quot;);
				ActivateField(&quot;VF Tariff Plan&quot;);
				//VFTK Junaid 20120519 - Scripting 15 check not needed because fields are checked before callign searhspec
				SetSearchSpec(fromcase, sAccountId);
				if (sTPlanSearchString != &quot;&quot;)
				{				
				SetSearchSpec(&quot;VF Tariff Plan&quot;, sTPlanSearchString);
				}
				SetSearchSpec(&quot;Status&quot;, sStatus);
				SetSortSpec(&quot;VF Tariff Plan(DESCENDING)&quot;);
				ExecuteQuery(ForwardOnly);
				isRecord = FirstRecord();
				if(isRecord)
				{
					while(isRecord)
					{
						sTPlan = GetFieldValue(&quot;VF Tariff Plan&quot;);

						if(sTPlan != currTPlan)
						{
							groupByPlan(sProductId, fromcase, sAccountId, sStatus, sTPlan,Outputs);  
						}
						currTPlan = sTPlan;
						isRecord = NextRecord();
					}
				}
			}
		} 
	}
	finally
	{
		AccountBC = null;
		AccountBO = null;
		TariffBC = null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="3"
			   UPDATED="09/03/2012 17:44:10"
			   UPDATED_BY="SADMIN"
			   CREATED="11/23/2010 18:47:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



