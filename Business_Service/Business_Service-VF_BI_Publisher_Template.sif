<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="R2.1 - WP03-Order Management and Product Catalogue"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF WP03 Order Management"
	   UI_FREEZE="N"
	   UPDATED="02/03/2017 11:52:14"
	   UPDATED_BY="JSARMENTO"
	   CREATED="09/05/2011 12:47:00"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="R2.1 - Support BS to retrieve correct Template for BI Publisher"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF BI Publisher Template"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="02/03/2017 11:52:36"
		   UPDATED_BY="JSARMENTO"
		   CREATED="09/29/2011 13:06:07"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreditCardFormGnrt"
			   UPDATED="01/23/2012 13:46:18"
			   UPDATED_BY="SADMIN"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="AccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BACode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BACode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="BAId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BAId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CCExpMonth"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="CCExpMonth"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CCExpYear"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="CCExpYear"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CCNo"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="CCNo"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CCType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="CCType"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL1"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/23/2012 13:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2012 13:46:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL1"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/23/2012 13:46:18"
					   UPDATED_BY="SADMIN"
					   CREATED="01/23/2012 13:46:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetTemplate"
			   UPDATED="05/13/2015 19:26:43"
			   UPDATED_BY="FCARRIL"
			   CREATED="12/05/2011 13:06:48"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="MarketClass"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="OrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="OrderSubType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="OrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SIM"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="SIM"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/05/2011 13:06:48"
					   UPDATED_BY="SADMIN"
					   CREATED="12/05/2011 13:06:48"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL1"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL1"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/05/2011 13:06:48"
					   UPDATED_BY="SADMIN"
					   CREATED="12/05/2011 13:06:48"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL2"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/05/2011 13:06:48"
					   UPDATED_BY="SADMIN"
					   CREATED="12/05/2011 13:06:48"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL3"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/05/2011 13:06:48"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:48"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL3"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/05/2011 13:06:48"
					   UPDATED_BY="SADMIN"
					   CREATED="12/05/2011 13:06:48"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL4"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/16/2015 11:58:18"
				   UPDATED_BY="MSOUSA"
				   CREATED="03/16/2015 11:58:06"
				   CREATED_BY="MSOUSA">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL4"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/16/2015 11:58:17"
					   UPDATED_BY="MSOUSA"
					   CREATED="03/16/2015 11:58:06"
					   CREATED_BY="MSOUSA">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL5"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/16/2015 11:58:37"
				   UPDATED_BY="MSOUSA"
				   CREATED="03/16/2015 11:58:26"
				   CREATED_BY="MSOUSA">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL5"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/16/2015 11:58:37"
					   UPDATED_BY="MSOUSA"
					   CREATED="03/16/2015 11:58:26"
					   CREATED_BY="MSOUSA">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="VFTRCBU-9829"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL6"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/13/2015 18:29:04"
				   UPDATED_BY="FCARRIL"
				   CREATED="05/13/2015 18:21:47"
				   CREATED_BY="FCARRIL">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL6"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/13/2015 18:22:20"
					   UPDATED_BY="FCARRIL"
					   CREATED="05/13/2015 18:22:20"
					   CREATED_BY="FCARRIL">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="VFTRCBU-9829"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL7"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/13/2015 18:29:05"
				   UPDATED_BY="FCARRIL"
				   CREATED="05/13/2015 18:26:04"
				   CREATED_BY="FCARRIL">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL7"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/13/2015 18:27:00"
					   UPDATED_BY="FCARRIL"
					   CREATED="05/13/2015 18:27:00"
					   CREATED_BY="FCARRIL">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="VFTRCBU-9829"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL8"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/13/2015 18:29:05"
				   UPDATED_BY="FCARRIL"
				   CREATED="05/13/2015 18:27:04"
				   CREATED_BY="FCARRIL">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL8"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/13/2015 18:27:15"
					   UPDATED_BY="FCARRIL"
					   CREATED="05/13/2015 18:27:15"
					   CREATED_BY="FCARRIL">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="VFTRCBU-9829"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL9"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/13/2015 18:29:06"
				   UPDATED_BY="FCARRIL"
				   CREATED="05/13/2015 18:27:18"
				   CREATED_BY="FCARRIL">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL9"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/13/2015 18:28:00"
					   UPDATED_BY="FCARRIL"
					   CREATED="05/13/2015 18:28:00"
					   CREATED_BY="FCARRIL">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetTemplateOrder"
			   UPDATED="12/13/2011 16:18:44"
			   UPDATED_BY="SADMIN"
			   CREATED="12/13/2011 16:18:44"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MarketClass"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderSubType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="SIM"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="SIM"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/13/2011 16:18:44"
					   UPDATED_BY="SADMIN"
					   CREATED="12/13/2011 16:18:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL1"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL1"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/13/2011 16:18:44"
					   UPDATED_BY="SADMIN"
					   CREATED="12/13/2011 16:18:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL2"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/13/2011 16:18:44"
					   UPDATED_BY="SADMIN"
					   CREATED="12/13/2011 16:18:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="URL3"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/13/2011 16:18:44"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2011 16:18:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="URL3"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="12/13/2011 16:18:44"
					   UPDATED_BY="SADMIN"
					   CREATED="12/13/2011 16:18:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreditCardFormGnrt"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreditCardFormGnrt(Inputs, Outputs)
{
	try
	{
		var oBOAsset : BusObject = TheApplication().GetBusObject(&quot;Asset Mgmt - Asset (NoLink)&quot;);
		var oBOAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var oBOOLForms : BusObject = TheApplication().GetBusObject(&quot;VF Online Form&quot;);
		var oBOPayProf : BusObject = TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);
		var oBCAsset : BusComp = oBOAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var oBCOLForms : BusComp = oBOOLForms.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBCPayProf : BusComp = oBOPayProf.GetBusComp(&quot;Com Invoice Profile&quot;);
		var oBCHPBA : BusComp = oBOAccount.GetBusComp(&quot;HP Submit - Billing Account&quot;);
		var AccountInfo : PropertySet = TheApplication().NewPropertySet();
		var AccountId = &quot;&quot;;
		var BAId = &quot;&quot;;
		var BACode = Inputs.GetProperty(&quot;BACode&quot;);
		var CCType = Inputs.GetProperty(&quot;CCType&quot;);
		var CCNo = Inputs.GetProperty(&quot;CCNo&quot;);
		var CCExpMonth = Inputs.GetProperty(&quot;CCExpMonth&quot;);
		var CCExpYear = Inputs.GetProperty(&quot;CCExpYear&quot;);
		var CCFirstName = Inputs.GetProperty(&quot;CCFirstName&quot;);
		var CCLastName = Inputs.GetProperty(&quot;CCLastName&quot;);
		var strURL = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var VISA = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;CREDIT_CARD_TYPE&quot;,&quot;V&quot;);
		var Mastercard = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;CREDIT_CARD_TYPE&quot;,&quot;M&quot;);
		var Today = new Date();
		var SendDate = formatDate(Today);
		var strId = &quot;&quot;;
		var URL = &quot;&quot;;
		var Address = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var strBADistrict = &quot;&quot;;
		var strBACity = &quot;&quot;;
		var strBAZIPCode = &quot;&quot;;
 		var strBAProvince = &quot;&quot;;
		var strBAAddress = &quot;&quot;;
		var strCCTaxOffice = &quot;&quot;;
		var strCCMainPhoneNumber = &quot;&quot;;
		var strVFNeighborhoodVillage = &quot;&quot;;
		var strApartmentNumber = &quot;&quot;;
		var strAddressNum = &quot;&quot;;
		var strAddress = &quot;&quot;;
		var customertype = &quot;&quot;;
		var strConsClass = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;); //DG
		var strOrderId = Inputs.GetProperty(&quot;OrderId&quot;); //IMARTINS VFTRCBU-27157 29032016
		
		
		var strTest = CCFirstName + &quot;, &quot; + CCLastName;
		
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;BACode&quot;,BACode); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		
		
		
		
		with(oBCPayProf)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Account Client Id&quot;);
			ActivateField(&quot;Credit Card Number - Display_2&quot;);
			ActivateField(&quot;VFTRCBU Owner Account Type&quot;);
			SetSearchSpec(&quot;Billing Account Code&quot;, BACode);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				AccountId = GetFieldValue(&quot;Account Client Id&quot;);
				BAId = GetFieldValue(&quot;Account Id&quot;);
				customertype = GetFieldValue(&quot;VFTRCBU Owner Account Type&quot;); 
			}
		}
		
		with(oBCHPBA)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Bill To District&quot;);
			ActivateField(&quot;Bill To City&quot;);
			ActivateField(&quot;Bill To Postal Code&quot;);
			ActivateField(&quot;Bill To Province&quot;);
			ActivateField(&quot;Bill To Street Address&quot;);
			ActivateField(&quot;Account Code&quot;);
			ActivateField(&quot;VF Tax Office&quot;);
			ActivateField(&quot;Main Phone Number&quot;);
			ActivateField(&quot;VF Neighborhood/Village&quot;);
			ActivateField(&quot;Apartment Number&quot;);
			ActivateField(&quot;Address Num&quot;);
			SetSearchSpec(&quot;Account Code&quot;, BACode);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
	  			strBADistrict = GetFieldValue(&quot;VF Bill To District&quot;); // Semt
				strBACity = GetFieldValue(&quot;Bill To City&quot;); //İl
				strBAZIPCode = GetFieldValue(&quot;Bill To Postal Code&quot;);
 				strBAProvince = GetFieldValue(&quot;Bill To Province&quot;); //İlçe
				strBAAddress = GetFieldValue(&quot;Bill To Street Address&quot;);
				strCCTaxOffice = GetFieldValue(&quot;VF Tax Office&quot;);
				strCCMainPhoneNumber = GetFieldValue(&quot;Main Phone Number&quot;);
				strVFNeighborhoodVillage = GetFieldValue(&quot;VF Neighborhood/Village&quot;);
				strApartmentNumber = GetFieldValue(&quot;Apartment Number&quot;);
				strAddressNum = GetFieldValue(&quot;Address Num&quot;);
				strAddress = strVFNeighborhoodVillage +&quot;, &quot; +strBAAddress + &quot;, &quot; + strApartmentNumber + &quot;, &quot; + strAddressNum;			
			}
		}

		if(AccountId != &quot;&quot;)
		{
			getAccountInfo(AccountId, AccountInfo);
			Address = AccountInfo.GetProperty(&quot;Address&quot;)+&quot;, &quot;+AccountInfo.GetProperty(&quot;ApartmentNr&quot;);
			
			inProp.SetProperty(&quot;BAId&quot;,BAId); //Id Validation
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
			
			with(oBCAsset)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;Billing Account Id&quot;);
				ActivateField(&quot;VF MSISDN&quot;);
				SetSearchExpr(&quot;[Billing Account Id] = &apos;&quot;+BAId+&quot;&apos; AND [VF MSISDN] IS NOT NULL&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())//Replaced CountRecord() with FirstRecord() as per Oracle review comments
					MSISDN = GetFieldValue(&quot;VF MSISDN&quot;);
				else
					MSISDN = BACode;
			}
		}
		with(oBCOLForms)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF To Cust Name&quot;, AccountInfo.GetProperty(&quot;ContactFirstName&quot;) + &quot;, &quot; + AccountInfo.GetProperty(&quot;ContactLastName&quot;));
			SetFieldValue(&quot;VF Send Date&quot;, SendDate);
			SetFieldValue(&quot;VF Barcode&quot;, AccountInfo.GetProperty(&quot;CustomerCode&quot;));
			SetFieldValue(&quot;VF TX01&quot;, MSISDN);
			SetFieldValue(&quot;VF TX02&quot;, Address);
			SetFieldValue(&quot;VF TX03&quot;, AccountInfo.GetProperty(&quot;District&quot;));
			SetFieldValue(&quot;VF TX04&quot;, AccountInfo.GetProperty(&quot;City&quot;)); //Document tag is İlçe = Province. This is due to the switch done at applet level &quot;PLW Billing Account Form Applet&quot;
			SetFieldValue(&quot;VF TX05&quot;, AccountInfo.GetProperty(&quot;ZIP&quot;));
			SetFieldValue(&quot;VF TX06&quot;, AccountInfo.GetProperty(&quot;Province&quot;)); //Document tag is İl = City.
			SetFieldValue(&quot;VF TX07&quot;, AccountInfo.GetProperty(&quot;MainPhoneNr&quot;).substring(1));
			SetFieldValue(&quot;VF TX08&quot;, AccountInfo.GetProperty(&quot;TaxOffice&quot;));
			SetFieldValue(&quot;VF TX09&quot;, CCNo);
			if (CCExpMonth != &quot;&quot;)
			{
				SetFieldValue(&quot;VF TX10&quot;, CCExpMonth + &quot; / &quot; + CCExpYear);	
			}
			else
			{
				SetFieldValue(&quot;VF TX10&quot;, CCExpYear);
			}
			SetFieldValue(&quot;VF TX21&quot;, strAddress);
			SetFieldValue(&quot;VF TX31&quot;, strBADistrict);
			SetFieldValue(&quot;VF TX41&quot;, strBACity); //Document tag is İlçe = Province. 
			SetFieldValue(&quot;VF TX51&quot;, strBAZIPCode);
			SetFieldValue(&quot;VF TX61&quot;, strBAProvince); //Document tag is İl = City.
			SetFieldValue(&quot;VF TX71&quot;, strCCMainPhoneNumber.substring(1));
			SetFieldValue(&quot;VF TX81&quot;, strCCTaxOffice);
			SetFieldValue(&quot;VF To Cust Name CC&quot;, CCFirstName + &quot;, &quot; + CCLastName);
			
			if(strOrderId != &quot;&quot;)
				SetFieldValue(&quot;VF Order Id&quot;, strOrderId);
			
			if(CCType == VISA)
				SetFieldValue(&quot;VF CB01&quot;, &quot;X&quot;);
			else if(CCType == Mastercard)
				SetFieldValue(&quot;VF CB02&quot;, &quot;X&quot;);
			
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			if ( customertype == strConsClass)			//DG
				Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_Automatic_CC_Payment&quot;);
			else
				Inputs.SetProperty(&quot;Name&quot;, &quot;CreditCardForm&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			if ( customertype == strConsClass)					//DG
				URL = strURLPart1 + strURL + strURLPart2 + &quot;ROW_ID=&quot;+ strId + strURLPart3;
			else	
				URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			TheApplication().SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Outputs.SetProperty(&quot;URL1&quot;, URL);
		}
	}
	finally
	{	
		oBCOLForms = null;		 
		oBCAsset = null;
		oBCPayProf = null;
		oBCHPBA = null;
		AccountInfo = null;
		oBOAccount = null;
		oBOPayProf = null;
		oBOAsset = null;
		oBOOLForms = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="03/29/2016 20:57:16"
			   UPDATED_BY="IMARTINS"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FrozenCancel"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FrozenCancel(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var oBO : BusObject = oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject = oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var AccountInfo : PropertySet = oApp.NewPropertySet();
		getAccountInfo(AccountId, AccountInfo);
		var CustomerCode = AccountInfo.GetProperty(&quot;CustomerCode&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var URLout : PropertySet = oApp.NewPropertySet();
		var orderRsn = Inputs.GetProperty(&quot;OrderReason&quot;);
		var payPrepaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strRsnFrozen = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;210&quot;);
		var strRsnCanc = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;212&quot;);
		var strSRsnEcon = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Economical reasons&quot;);
		var strSRsnTaxes = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Expensive invoice/ taxes&quot;);
		var strSRsnDissat = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;General Dissatisfaction&quot;);
		var strSRsnOther = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Other&quot;);
		var strSRsnTariff = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Other op/ tariff plans&quot;);
		var strSRsnSvcProb = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Service area problem&quot;);
		var psUserData : PropertySet = oApp.NewPropertySet();
		var CustName = &quot;&quot;;
		var CustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var paymType = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var subReason = &quot;&quot;;
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;orderId&quot;,orderId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account First Name&quot;);		// 10570 - RCRISPIM
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;VF Sub Reason&quot;);				//Subreason
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
			with(oBCOLI)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;MSISDN&quot;);
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
			}
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				CustName = GetFieldValue(&quot;Account&quot;) + &quot;, &quot; + GetFieldValue(&quot;Account First Name&quot;); //10570 - RCRISPIM
				CustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				subReason = GetFieldValue(&quot;VF Sub Reason&quot;);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				if(oBCOLI.FirstRecord())
					MSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,CustomerCode);					//To be converted for BARCODE
			SetFieldValue(&quot;VF To Cust Name&quot;,CustName);
			SetFieldValue(&quot;VF MSISDN&quot;,&quot;0&quot;+MSISDN);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+CustNum);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			
			if(paymType == payPrepaid)
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
			
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			
			if(orderRsn == strRsnFrozen)
				SetFieldValue(&quot;VF Freeze Line Flg&quot;,&quot;X&quot;);
			else if(orderRsn == strRsnCanc)
				SetFieldValue(&quot;VF Cancel Line Flg&quot;,&quot;X&quot;);
			
			if(subReason == strSRsnEcon)
				SetFieldValue(&quot;VF Sub Econ Rsn Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnTaxes)
				SetFieldValue(&quot;VF Expensive invoice tax Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnDissat)
				SetFieldValue(&quot;VF General Dissatisfaction Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnOther)
				SetFieldValue(&quot;VF Other Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnTariff)
				SetFieldValue(&quot;VF Other opt tariff Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnSvcProb)
				SetFieldValue(&quot;VF Svc area problem Flg&quot;,&quot;X&quot;);
			
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;FrozenCancel&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			Outputs.SetProperty(&quot;URL1&quot;,URL);
			oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Outputs.SetProperty(&quot;URL2&quot;,&quot;&quot;);
			Outputs.SetProperty(&quot;URL3&quot;,&quot;&quot;);
		}
	}
	finally
	{
		oBC	= null;
		oBCOrder = null;
		oBCOLI	 = null;
		oBOOrder = null;
		oBO	= null;
		psUserData = null;
		URLout = null;
		AccountInfo = null;
		inProp = null;
		outProp = null;
		BS = null;
		oApp = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="06/11/2015 17:37:20"
			   UPDATED_BY="SADMIN"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FrozenCancelCBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FrozenCancelCBU(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var oBO : BusObject = oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject = oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var AccountInfo : PropertySet = oApp.NewPropertySet();
		getAccountInfo(AccountId, AccountInfo);
		var CustomerCode = AccountInfo.GetProperty(&quot;CustomerCode&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var URLout : PropertySet = oApp.NewPropertySet();
		var orderRsn = Inputs.GetProperty(&quot;OrderReason&quot;);
		var payPrepaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strRsnFrozen = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;210&quot;);
		var strRsnCanc = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;212&quot;);
		var strSRsnEcon = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Economical reasons&quot;);
		var strSRsnTaxes = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Expensive invoice/ taxes&quot;);
		var strSRsnDissat = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;General Dissatisfaction&quot;);
		var strSRsnOther = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Other&quot;);
		var strSRsnTariff = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Other op/ tariff plans&quot;);
		var strSRsnSvcProb = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUB_REASON&quot;,&quot;Service area problem&quot;);
		var psUserData : PropertySet = oApp.NewPropertySet();
		var CustName = &quot;&quot;;
		var CustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var paymType = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var subReason = &quot;&quot;;
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;orderId&quot;,orderId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		
		oBC.ClearToQuery();
		oBC.SetViewMode(AllView);
		oBC.SetSearchSpec(&quot;VF Order Id&quot;, orderId);
		oBC.ExecuteQuery(ForwardOnly);
	
		var RecordsToDel = oBC.FirstRecord();
		
		while (RecordsToDel)
		{
			oBC.DeleteRecord();
			oBC.ExecuteQuery(ForwardOnly);
			
			RecordsToDel = oBC.FirstRecord();
		}
		
		
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account First Name&quot;);		// 10570 - RCRISPIM
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;VF Sub Reason&quot;);				//Subreason
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
			with(oBCOLI)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;MSISDN&quot;);
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
			}
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				CustName = GetFieldValue(&quot;Account&quot;) + &quot;, &quot; + GetFieldValue(&quot;Account First Name&quot;); //10570 - RCRISPIM
				CustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				subReason = GetFieldValue(&quot;VF Sub Reason&quot;);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				if(oBCOLI.FirstRecord())
					MSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,orderId);					//To be converted for BARCODE
			SetFieldValue(&quot;VF To Cust Name&quot;,CustName);
			SetFieldValue(&quot;VF MSISDN&quot;,&quot;0&quot;+MSISDN);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+CustNum);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			
			if(paymType == payPrepaid)
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
			
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			
			if(orderRsn == strRsnFrozen)
				SetFieldValue(&quot;VF Freeze Line Flg&quot;,&quot;X&quot;);
			else if(orderRsn == strRsnCanc)
				SetFieldValue(&quot;VF Cancel Line Flg&quot;,&quot;X&quot;);
			
			if(subReason == strSRsnEcon)
				SetFieldValue(&quot;VF Sub Econ Rsn Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnTaxes)
				SetFieldValue(&quot;VF Expensive invoice tax Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnDissat)
				SetFieldValue(&quot;VF General Dissatisfaction Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnOther)
				SetFieldValue(&quot;VF Other Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnTariff)
				SetFieldValue(&quot;VF Other opt tariff Flg&quot;,&quot;X&quot;);
			if(subReason == strSRsnSvcProb)
				SetFieldValue(&quot;VF Svc area problem Flg&quot;,&quot;X&quot;);
			
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_Cancelation_Form&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + &quot;ORDER_ID=&quot;+ orderId + strURLPart3;
			Outputs.SetProperty(&quot;URL1&quot;,URL);
			oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Outputs.SetProperty(&quot;URL2&quot;,&quot;&quot;);
			Outputs.SetProperty(&quot;URL3&quot;,&quot;&quot;);
		}
	}
	finally
	{
		oBC	= null;
		oBCOrder = null;
		oBCOLI	 = null;
		oBOOrder = null;
		oBO	= null;
		psUserData = null;
		URLout = null;
		AccountInfo = null;
		inProp = null;
		outProp = null;
		BS = null;
		oApp = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="06/11/2015 17:37:20"
			   UPDATED_BY="SADMIN"
			   CREATED="02/25/2015 17:53:36"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetHSPromotionInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetHSPromotionInfo(Inputs, Outputs)	
{
	try
	{	

		var sRecordId = Inputs.GetProperty(&quot;strId&quot;);
		var sOrderId= Inputs.GetProperty(&quot;OrderId&quot;);
		var URL11 = &quot;&quot;;
		var oBS_Inputs  = TheApplication().NewPropertySet();
		var oBS_Outputs = TheApplication().NewPropertySet();
		var oBS;
		
		oBS = TheApplication().GetService (&quot;Workflow Process Manager&quot;);			
		oBS_Inputs  = TheApplication().NewPropertySet();
		oBS_Outputs = TheApplication().NewPropertySet();
				
		oBS_Inputs.SetProperty(&quot;Form Id&quot;, sRecordId);
		oBS_Inputs.SetProperty(&quot;Order Id&quot;, sOrderId); 
		oBS_Inputs.SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU HS Camp Activation Form Generation WF&quot;);
		oBS.InvokeMethod(&quot;RunProcess&quot;, oBS_Inputs, oBS_Outputs);
		
		URL11 = oBS_Outputs.GetProperty(&quot;HS URL&quot;);

	
	}		
	finally
	{
		Outputs.SetProperty(&quot;URL11&quot;, URL11);

	}
}"
			   SEQUENCE="12"
			   UPDATED="11/07/2016 12:40:06"
			   UPDATED_BY="JMARQUES"
			   CREATED="11/07/2016 12:40:06"
			   CREATED_BY="JMARQUES">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetIMEI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetIMEI(Inputs, Outputs)	
{
	try
	{	
		var oBOOrder : BusObject= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOLI : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var oBCAttr : BusComp= oBOOrder.GetBusComp(&quot;Order Item XA&quot;); //FCARRIL: VFTRCBU-23992
		var Parent_Id = &quot;&quot;;
		var IMEI = &quot;&quot;;
		var Campaign = &quot;&quot;;
		var BrandModel = &quot;&quot;;
		var sPromoId = Inputs.GetProperty(&quot;PromoId&quot;);
		var sOrderId = Inputs.GetProperty(&quot;OrderId&quot;); //ACAMBAS: VFTRCBU-22349
		var sOperation = Inputs.GetProperty(&quot;Operation&quot;); //FCARRIL: VFTRCBU-23992

		oBCOLI.ClearToQuery();
		oBCOLI.SetViewMode(AllView);
		oBCOLI.ActivateField(&quot;MSISDN&quot;);
		oBCOLI.ActivateField(&quot;Promotion Id&quot;);
		oBCOLI.ActivateField(&quot;Parent Order Item Id&quot;);
		oBCOLI.ActivateField(&quot;VF Product Type&quot;);
		if (sOperation == &quot;Resume&quot;){ //FCARRIL: VFTRCBU-23992
			oBCOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL AND [VF Product Type] = &apos;MAIN&apos; AND [Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos;&quot;);		
		}else{
		//ACAMBAS: VFTRCBU-22349 - start
		//oBCOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL AND [VF Product Type] = &apos;HANDSET CONTAINER&apos; AND [Promotion Id] = &apos;&quot; + sPromoId + &quot;&apos;&quot;);	
			oBCOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL AND [VF Product Type] = &apos;HANDSET CONTAINER&apos; AND [Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos; AND [Promotion Id] = &apos;&quot; + sPromoId + &quot;&apos;&quot;);		
		//ACAMBAS: VFTRCBU-22349 - end								
		}
		oBCOLI.ExecuteQuery(ForwardOnly);
		
		if(oBCOLI.FirstRecord()) 
		{
			Parent_Id = oBCOLI.GetFieldValue(&quot;Id&quot;);
			
			if (sOperation != &quot;Resume&quot;){ //FCARRIL: VFTRCBU-23992
			
				oBCOLI.ActivateField(&quot;VF IMEI&quot;);
				oBCOLI.ActivateField(&quot;Root Order Item Id&quot;);
				oBCOLI.ActivateField(&quot;Product Translated&quot;); //ACAMBAS: VFTRCBU-22349
				oBCOLI.ActivateField(&quot;Part Number&quot;); //ACAMBAS: VFTRCBU-22349
				oBCOLI.ClearToQuery();
				oBCOLI.SetSearchExpr(&quot;[Root Order Item Id] = &apos;&quot; + Parent_Id + &quot;&apos; AND [VF Product Type] = &apos;HANDSET&apos; AND [VF IMEI] IS NOT NULL&quot;);
				oBCOLI.ExecuteQuery(ForwardOnly);
				
				if(oBCOLI.FirstRecord()) {
					IMEI = oBCOLI.GetFieldValue(&quot;VF IMEI&quot;);
					//ACAMBAS: VFTRCBU-22349 - Start
					Campaign = oBCOLI.GetFieldValue(&quot;Product Translated&quot;).substring(0, 8) + &quot;/&quot; + oBCOLI.GetFieldValue(&quot;Part Number&quot;);
					BrandModel = oBCOLI.GetFieldValue(&quot;Product Translated&quot;);
					//ACAMBAS: VFTRCBU-22349 - End
				}
			} else { //FCARRIL: VFTRCBU-23992
				oBCAttr.ActivateField(&quot;Object Id&quot;);
				oBCAttr.ActivateField(&quot;Name&quot;);
				oBCAttr.ClearToQuery();
				oBCAttr.SetSearchExpr(&quot;[Object Id] = &apos;&quot; + Parent_Id + &quot;&apos; AND [Name] = &apos;OWN IMEI&apos;&quot;);
				oBCAttr.ExecuteQuery(ForwardOnly);
				
				if(oBCAttr.FirstRecord()){
					IMEI = oBCAttr.GetFieldValue(&quot;Value&quot;);
				}
			}
		}
	}		
	finally
	{
		Outputs.SetProperty(&quot;IMEI&quot;, IMEI);
		//ACAMBAS: VFTRCBU-22349 - Start
		Outputs.SetProperty(&quot;Campaign&quot;, Campaign);
		Outputs.SetProperty(&quot;BrandModel&quot;, BrandModel);
		//ACAMBAS: VFTRCBU-22349 - End
	}
}"
			   SEQUENCE="13"
			   UPDATED="11/07/2016 12:40:06"
			   UPDATED_BY="JMARQUES"
			   CREATED="02/20/2015 12:35:39"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetTemplate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetTemplate(Inputs, Outputs)
{
	try
	{
		var SIM = Inputs.GetProperty(&quot;SIM&quot;);
		var OrderInfo : PropertySet = TheApplication().NewPropertySet();
		OrderInfo = getOrderInfo(SIM);
		var MarketClass = OrderInfo.GetProperty(&quot;MarketClass&quot;);
		var OrderType = OrderInfo.GetProperty(&quot;OrderType&quot;);
		var OrderSubType = OrderInfo.GetProperty(&quot;OrderSubType&quot;);
		var OrderReason = OrderInfo.GetProperty(&quot;OrderReason&quot;);
		var AccountId = OrderInfo.GetProperty(&quot;AccountId&quot;);
		var OrderId = OrderInfo.GetProperty(&quot;OrderId&quot;);
		var ActionCode = OrderInfo.GetProperty(&quot;ActionCode&quot;); //FCARRIL
		var BillAccId = OrderInfo.GetProperty(&quot;BillingAccId&quot;); //FCARRIL
		var CustAccRLI = OrderInfo.GetProperty(&quot;CustAccRLI&quot;) //FCARRIL JIRA 11710
		var RLIAccInfo : PropertySet = TheApplication().NewPropertySet(); //FCARRIL JIRA 11710
		
		Inputs.SetProperty(&quot;AccountId&quot;, AccountId);
		Inputs.SetProperty(&quot;OrderReason&quot;, OrderReason);
		Inputs.SetProperty(&quot;OrderSubType&quot;, OrderSubType);
		Inputs.SetProperty(&quot;OrderType&quot;, OrderType);
		Inputs.SetProperty(&quot;MarketClass&quot;, MarketClass);
		Inputs.SetProperty(&quot;OrderId&quot;, OrderId);
		Inputs.SetProperty(&quot;BillingAccId&quot;, BillAccId);
		
		var booMod = false;
		var strAddNewSvc = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Add New Service&quot;);
		var strModPrdSvc= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Modify Product &amp; Service&quot;);
		var strDiscSvc = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Disconnect&quot;); //FCARRIL WA#13
		var strBsnsClass = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);
		var strConsClass = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;);
		var strSTTransfer = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;128&quot;);
		var strSTFwdMig = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;137&quot;); //WA#13 RPIRES
		var strSTBackMig = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;131&quot;); //WA#13 RPIRES
		var strSTModIMSI = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		var strSTModOpt = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;111&quot;);
		var strSTMNPIn = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
		var strSTMNPInCanc = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;112&quot;); // WA#18 FCABRAL
		var strSTSuspVol = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;116&quot;);
		var strRsnTranfser = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strRsnLost = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;201&quot;);
		var strRsnBroken = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;202&quot;);
		var strRsnFrozen = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;210&quot;);
		var strRsnCanc =TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;212&quot;);
		var strRsnLimCanReq = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1421&quot;); //FCARRIL:JIRA 11219
		var strResFraud = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;118&quot;); //FCARRIL:JIRA 11219
		var strRsnNew = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;225&quot;);
		var strRsnPortIN = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;226&quot;);
		var strRsnOther = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;231&quot;);
		var strRsnMod = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;232&quot;);
		var strRsnCustReq = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;248&quot;);
		var strRsnToRel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;249&quot;);
		var strRsnDueToGarn = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;250&quot;);
		var strRsnWithPers = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;251&quot;);
		var strRsnToComp = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;252&quot;);
		var strRsnFwdMigPrePost = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2014&quot;); //WA#13 RPIRES
		var strRsnFwdMigPostPost = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2012&quot;); //WA#13 RPIRES
		var strRsnFwdMigPrePostWithin = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2013&quot;); //WA#13 RPIRES
		var strRsnPostPreCross = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2011&quot;); //WA#13 RPIRES
		var strURL = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var strResume = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Resume&quot;); //DG
		var strCoupling = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;255&quot;);
		var strRsnLimVol = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;205&quot;); // JMARQUES
		var strRsnLstStl = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;201&quot;);  // JMARQUES
		
		//FCARRIL JIRA 11710
		if(OrderSubType == strSTTransfer)
		{
			getAccountTransferInfo(CustAccRLI,RLIAccInfo); 
			var MarketClassRLI = RLIAccInfo.GetProperty(&quot;MarketClass&quot;);
			Inputs.SetProperty(&quot;MarketClass&quot;, MarketClassRLI);
			MarketClass = MarketClassRLI; 
		}
		// End - FCARRIL
			
		//FCARRIL: VodafoneBR for CBU, Vodafone BR_KR for EBU
		if (MarketClass != strConsClass) {
				var BS:Service = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
				Inputs.SetProperty(&quot;Name&quot;, &quot;VodafoneBR_KR&quot;);
				BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
				var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
				var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
				var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
				var URL = strURLPart1 + strURL + strURLPart2;
		}
		//FCARRIL
		Outputs.SetProperty(&quot;BillAccId&quot;,BillAccId);
		
		switch(OrderType)
		{
			case strAddNewSvc:
				//++WA#13 RPIRES
				if(OrderSubType == strSTFwdMig &amp;&amp; MarketClass == strConsClass)
				{
					if(OrderReason == strRsnFwdMigPrePost || OrderReason == strRsnFwdMigPostPost)
					{
						VodafoneBR(Inputs, Outputs); // URL1, URL2, URL3, URL7
						TransferDevirCBU(Inputs, Outputs); // URL9
						//VodafoneBR(Inputs, Outputs); --FCARRIL: Jira VFTRCBU-9829
						//Outputs.SetProperty(&quot;URL3&quot;, URL);
					}
					else if(OrderReason == strRsnFwdMigPrePostWithin)
					{
						//New function created for Forward
						SebekeGecis(Inputs, Outputs); // URL1
						//Outputs.SetProperty(&quot;URL3&quot;, URL); -- FCARRIL: Jira VFTRCBU-9829
					}
				}
				//--WA#13 RPIRES                                                   -- WA#18-FCABRAL  
				else if(OrderSubType == strSTMNPIn || OrderReason == strRsnNew || OrderSubType == strSTMNPInCanc)
				{
					if(MarketClass == strBsnsClass)
					{
						Outputs.SetProperty(&quot;URL3&quot;, URL);
						VodafoneKR(Inputs, Outputs);
					}
					else if(MarketClass == strConsClass)
					{
						Outputs.SetProperty(&quot;URL3&quot;, URL);
						VodafoneBR(Inputs, Outputs);
					}
				}
			break;
			
			case strModPrdSvc:
				//++WA#13 RPIRES
				if(OrderSubType == strSTTransfer)
				{	
					if((OrderReason == strRsnTranfser || OrderReason == strRsnToRel || OrderReason == strRsnDueToGarn || OrderReason == strRsnWithPers || OrderReason == strRsnToComp) &amp;&amp; MarketClassRLI == strBsnsClass) //FCARRIL JIRA 11710
					{
						Outputs.SetProperty(&quot;URL3&quot;, URL); //FCARRIL: Fix
						VodafoneKR(Inputs, Outputs); // URL2
						TransferDevir(Inputs, Outputs); // URL1
						//VodafoneKR(Inputs, Outputs); -- FCARRIL: Jira VFTRCBU-9829
						//Outputs.SetProperty(&quot;URL3&quot;, URL); -- FCARRIL: Jira VFTRCBU-9829
					}
					else if(OrderReason == strRsnTranfser &amp;&amp; MarketClassRLI == strConsClass) //FCARRIL JIRA 11710
					{
						VodafoneBR(Inputs, Outputs); // URL1, URL2, URL3, URL7
						TransferDevirCBU(Inputs, Outputs); // URL9
						//VodafoneBR(Inputs, Outputs); -- FCARRIL: Jira VFTRCBU-9829
						//Outputs.SetProperty(&quot;URL3&quot;, URL); -- FCARRIL: Jira VFTRCBU-9829
					}
				}
				/*FCARRIL - Moved to Disconnect section
				else if(OrderSubType == strSTBackMig &amp;&amp; MarketClass == strConsClass)
				{
					if(OrderReason == strRsnPostPreCross)
					{
						TransferDevir(Inputs, Outputs);
						Outputs.SetProperty(&quot;URL3&quot;, URL);
					}	
				}*/
				//--WA#13 RPIRES
				
				
				else if(OrderSubType == strSTModIMSI &amp;&amp; MarketClass == strConsClass &amp;&amp; (OrderReason == strRsnLost || OrderReason == strRsnBroken || OrderReason == strRsnOther || OrderReason == strRsnCustReq || OrderReason == strCoupling))
					ModifyIMSICBU(Inputs, Outputs);
				else if(OrderSubType == strSTModIMSI &amp;&amp; MarketClass == strBsnsClass &amp;&amp; (OrderReason == strRsnLost || OrderReason == strRsnBroken || OrderReason == strRsnOther || OrderReason == strRsnCustReq))
					ModifyIMSI(Inputs, Outputs);
				else if (OrderSubType == strSTSuspVol &amp;&amp; (OrderReason == strRsnFrozen || OrderReason == strRsnCanc || OrderReason == strRsnLimCanReq || OrderReason == strRsnLstStl || OrderReason == strRsnLimVol)) //FCARRIL:JIRA 11219
				{
					if (MarketClass == strBsnsClass &amp;&amp; OrderReason != strRsnLimCanReq) //FCARRIL:JIRA 11219
					FrozenCancel(Inputs, Outputs);
					else if (MarketClass == strConsClass &amp;&amp; (OrderReason == strRsnLimCanReq || OrderReason == strRsnLstStl || OrderReason == strRsnLimVol)) //FCARRIL:JIRA 11219
					FrozenCancelCBU(Inputs, Outputs);
				}
				else if(OrderSubType == strSTModOpt &amp;&amp; OrderReason == strRsnMod &amp;&amp; checkModifyOpt(Inputs))
				{
					if ( MarketClass == strBsnsClass )
					ModifyOptions(Inputs, Outputs);
					else
					ModifyOptionsCBU(Inputs, Outputs);
				}	
				else if(ActionCode == strResume &amp;&amp; MarketClass == strConsClass &amp;&amp; (OrderSubType != strResFraud)) //DG  //FCARRIL:JIRA 11219
					ReActivationCBU(Inputs, Outputs); 
			break;
			case strDiscSvc: //FCARRIL WA#13
				if(OrderSubType == strSTBackMig &amp;&amp; MarketClass == strConsClass) //--WA#13 RPIRES
				{
					if(OrderReason == strRsnPostPreCross || OrderReason == strRsnFwdMigPostPost)
					{
						TransferDevirCBU(Inputs, Outputs); // URL1
						//Outputs.SetProperty(&quot;URL3&quot;, URL);
					}	
				}
				//--WA#13 RPIRES
			break;
		}
	}
	finally
	{
		RLIAccInfo		= null;
		OrderInfo		= null;
		BS				= null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="11/07/2016 12:40:06"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetTemplateOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetTemplateOrder(Inputs, Outputs)
{
	try
	{
		var MarketClass = Inputs.GetProperty(&quot;MarketClass&quot;);
		var OrderType = Inputs.GetProperty(&quot;OrderType&quot;);
		var OrderSubType = Inputs.GetProperty(&quot;OrderSubType&quot;);
		var OrderReason = Inputs.GetProperty(&quot;OrderReason&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		
		var booMod = false;
		var strBsnsClass = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);
		var strConsClass = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;);
		var strSTTransfer = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;128&quot;);
		var strSTModIMSI = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		var strSTModOpt = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;111&quot;);
		var strSTMNPIn = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
		var strSTSuspVol = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;116&quot;);
		var strRsnTranfser = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strRsnLost = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;201&quot;);
		var strRsnBroken = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;202&quot;);
		var strRsnFrozen = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;210&quot;);
		var strRsnCanc =TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;212&quot;);
		var strRsnLimCanReq = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1421&quot;); //FCARRIL:JIRA 11219
		var strResFraud = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;118&quot;); //FCARRIL:JIRA 11219
		var strRsnNew = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;225&quot;);
		var strRsnPortIN = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;226&quot;);
		var strRsnOther = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;231&quot;);
		var strRsnMod = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;232&quot;);
		var strRsnCustReq = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;248&quot;);
		var strRsnToRel = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;249&quot;);
		var strRsnDueToGarn = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;250&quot;);
		var strRsnWithPers = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;251&quot;);
		var strRsnToComp = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;252&quot;);
		var strURL = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var strAddNewSrvice = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Add New Service&quot;);
	 	var strModifyProdSrvice = TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Modify Product &amp; Service&quot;);
	 	var strResume = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Resume&quot;); //DG
	 	var strCoupling = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;255&quot;);
	 	var strDiscSvc = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Disconnect&quot;); //FCARRIL 12135
		var strSTBackMig = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;131&quot;); //FCARRIL 12135
		var strRsnPostPreCross = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2011&quot;); //FCARRIL 12135
		var strRsnFwdMigPostPost = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2012&quot;); //FCARRIL 12135
		var strSTFwdMig = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;137&quot;); //WA#13
		var strRsnFwdMigPrePost = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2014&quot;); //WA#13
		var strRsnFwdMigPrePostWithin = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2013&quot;); //WA#13
		var strRsnLimVol = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;205&quot;); // JMARQUES
		var strRsnLstStl = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;201&quot;);  // JMARQUES
		
		
		if (MarketClass != strConsClass) { //WA#13
			var BS:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;VodafoneBR_KR&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			var URL = strURLPart1 + strURL + strURLPart2;
		}
		if(OrderType == strAddNewSrvice)
		{
			//FCARRIL: WA#13 
			/*if(OrderSubType == strSTTransfer)
				{
					if((OrderReason == strRsnTranfser &amp;&amp; MarketClass == strBsnsClass) || OrderReason == strRsnToRel || OrderReason == strRsnDueToGarn || OrderReason == strRsnWithPers || OrderReason == strRsnToComp) */
					if(OrderSubType == strSTFwdMig &amp;&amp; MarketClass == strConsClass) //FCARRIL: WA#13
					{
						if(OrderReason == strRsnFwdMigPrePost || OrderReason == strRsnFwdMigPostPost)
						{
							VodafoneBR(Inputs, Outputs);
							TransferDevirCBU(Inputs, Outputs);
							//Outputs.SetProperty(&quot;URL3&quot;, URL); //FCARRIL: WA#13
						}
						else if(OrderReason == strRsnFwdMigPrePostWithin)
						{
							//New function created for Forward
							SebekeGecis(Inputs, Outputs);
						}
					}
				//} //End - FCARRIL: WA#13
				else if(OrderSubType == strSTMNPIn || OrderReason == strRsnNew)
				{
				//	if(MarketClass == strBsnsClass)
				//	{	
						Outputs.SetProperty(&quot;URL3&quot;, URL);
						VodafoneKR(Inputs, Outputs);
				//	}
				/*	else */if(MarketClass == strConsClass)
					{	
						Outputs.SetProperty(&quot;URL3&quot;, URL);
						VodafoneBR(Inputs, Outputs);
					}
				}
		}
			
		if(OrderType == strModifyProdSrvice)
		{		
				if(OrderSubType == strSTModIMSI &amp;&amp; MarketClass == strConsClass &amp;&amp; (OrderReason == strRsnLost || OrderReason == strRsnBroken || OrderReason == strRsnOther || OrderReason == strRsnCustReq || OrderReason == strCoupling))
					ModifyIMSICBU(Inputs, Outputs);
				else if(OrderSubType == strSTModIMSI &amp;&amp; MarketClass == strBsnsClass &amp;&amp; (OrderReason == strRsnLost || OrderReason == strRsnBroken || OrderReason == strRsnOther || OrderReason == strRsnCustReq))
					ModifyIMSI(Inputs, Outputs);
				else if (OrderSubType == strSTSuspVol &amp;&amp; (OrderReason == strRsnFrozen || OrderReason == strRsnCanc || OrderReason == strRsnLimCanReq || OrderReason == strRsnLstStl || OrderReason == strRsnLimVol)) //FCARRIL:JIRA 11219
				{
					if (MarketClass == strBsnsClass &amp;&amp; OrderReason != strRsnLimCanReq) //FCARRIL:JIRA 11219
					FrozenCancel(Inputs, Outputs);
					else if (MarketClass == strConsClass &amp;&amp; (OrderReason == strRsnLimCanReq || OrderReason == strRsnLstStl || OrderReason == strRsnLimVol)) //FCARRIL:JIRA 11219
					FrozenCancelCBU(Inputs, Outputs);
				}
				else if(OrderSubType == strSTModOpt &amp;&amp; OrderReason == strRsnMod &amp;&amp; checkModifyOpt(Inputs))
				{
					if ( MarketClass == strBsnsClass )
					ModifyOptions(Inputs, Outputs);
					else
					ModifyOptionsCBU(Inputs, Outputs);
				}
				//FCARRIL: WA#13
				else if(OrderSubType == strSTTransfer)
				{
					if((OrderReason == strRsnTranfser || OrderReason == strRsnToRel || OrderReason == strRsnDueToGarn || OrderReason == strRsnWithPers || OrderReason == strRsnToComp) &amp;&amp; MarketClassRLI == strBsnsClass)
					{
						Outputs.SetProperty(&quot;URL3&quot;, URL); //FCARRIL: Fix
						VodafoneKR(Inputs, Outputs);
						TransferDevir(Inputs, Outputs);
					}	
					else if(OrderReason == strRsnTranfser &amp;&amp; MarketClass == strConsClass)
					{
						VodafoneBR(Inputs, Outputs);
						TransferDevirCBU(Inputs, Outputs);
						//Outputs.SetProperty(&quot;URL3&quot;, URL); -- FCARRIL: Jira VFTRCBU-9829
					}
				}
				// End - FCARRIL
		}
		if (OrderType == strDiscSvc) //FCARRIL 12135
				if(OrderSubType == strSTBackMig &amp;&amp; MarketClass == strConsClass) 
				{
					if(OrderReason == strRsnPostPreCross || OrderReason == strRsnFwdMigPostPost)
					{
						TransferDevirCBU(Inputs, Outputs); // URL1
				}	
	    } // END - 12135
	}
	finally
	{
		BS = null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="11/07/2016 12:40:06"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/13/2011 16:18:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyIMSI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyIMSI(Inputs, Outputs)
{
try
	{
		var oApp = TheApplication();
		var oBO : BusObject = oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject = oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;); 
		var orderType = Inputs.GetProperty(&quot;OrderType&quot;);
		var orderST = Inputs.GetProperty(&quot;OrderSubType&quot;);
		var orderRsn = Inputs.GetProperty(&quot;OrderReason&quot;);
		var AccountInfo : PropertySet = oApp.NewPropertySet();
		getAccountInfo(AccountId, AccountInfo);
		var CustomerCode = AccountInfo.GetProperty(&quot;CustomerCode&quot;);
		var payPrepaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strSTModIMSI = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		var strRsnLost = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;201&quot;);
		var strRsnBroken = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;202&quot;);
		var strRsnOther = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;231&quot;);
		var strRsnCustReq = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;248&quot;);
		var strCoupling = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;255&quot;);
		var SIMTypeNO = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TWIN_SIM_TYPE&quot;,&quot;NO&quot;); // Normal
		var SIMTypeTW = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TWIN_SIM_TYPE&quot;,&quot;TW&quot;); // Twin
		var SIMTypeDU = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TWIN_SIM_TYPE&quot;,&quot;DU&quot;); // Dual
		var psUserData  : PropertySet = oApp.NewPropertySet();
		var CustName = &quot;&quot;;
		var CustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var paymType = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var SimType = &quot;&quot;;
		var ICCID = &quot;&quot;;
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		var conFstName = &quot;&quot;;
		var conLstName = &quot;&quot;;
		var skipPenality = &quot;&quot;;
		
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;orderId&quot;,orderId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
			with(oBCOLI)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;ICCID&quot;);
				ActivateField(&quot;MSISDN&quot;);					//MSISDN
				ActivateField(&quot;SIM Card Type&quot;);				//SIM Type
				ActivateField(&quot;Contact Last Name&quot;);		
				ActivateField(&quot;Contact First Name&quot;);
				ActivateField(&quot;VF Skip Penality&quot;);
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				oBCOLI.SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				oBCOLI.SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
			}
			ExecuteQuery(ForwardOnly);			
			if(FirstRecord())
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				CustName = GetFieldValue(&quot;Account&quot;);
				CustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				if(oBCOLI.FirstRecord())
				{
					SimType = oBCOLI.GetFieldValue(&quot;SIM Card Type&quot;);
					MSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);
					ICCID = oBCOLI.GetFieldValue(&quot;ICCID&quot;);
					conFstName = oBCOLI.GetFieldValue(&quot;Contact First Name&quot;);
	  				conLstName = oBCOLI.GetFieldValue(&quot;Contact Last Name&quot;);
	  				skipPenality = oBCOLI.GetFieldValue(&quot;VF Skip Penality&quot;);
				}
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,CustomerCode);					//Convertire per il BARCODE
			//SetFieldValue(&quot;VF To Cust Name&quot;,CustName);
			if ( skipPenality == &quot;Y&quot;)
	  			SetFieldValue(&quot;VF CB01&quot;, &quot;X&quot;);
	  		else
	  			SetFieldValue(&quot;VF CB02&quot;, &quot;X&quot;);
	  		SetFieldValue(&quot;VF To Cust Name&quot;,conFstName);
	  		SetFieldValue(&quot;VF TX01&quot;,conLstName);
			SetFieldValue(&quot;VF MSISDN&quot;,&quot;0&quot;+MSISDN);
			ICCID=ICCID.substring(&quot;6&quot;);
			SetFieldValue(&quot;VF ICCID&quot;,&quot;(899002)&quot;+ICCID);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+CustNum);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			if(paymType == payPrepaid)
			{
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
				//For R2.3 manage the logic for checkboxes on the basis of the new Reason &quot;Kart hatasi&quot;
			}
			else
			{
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
				//For R2.3 manage the logic for checkboxes on the basis of the new Reason &quot;Kart hatasi&quot;
			}
			
			//VF Ucretsiz Flg and VF Ucretsiz Flg planned to be managed in R2.3.
			// Now:
			SetFieldValue(&quot;VF Ucretsiz Flg&quot;, &quot;X&quot;);
			
			if(orderST == strSTModIMSI)
				SetFieldValue(&quot;VF SIM Degisikligi Flg&quot;,&quot;X&quot;);
			
			if(orderRsn == strRsnLost)
				SetFieldValue(&quot;VF Kayip Calinti Flg&quot;,&quot;X&quot;);
			else if(orderRsn == strRsnOther)
				SetFieldValue(&quot;VF Kullanici Hatasi Flg&quot;,&quot;X&quot;);
			else if (orderRsn == strRsnCustReq)
				SetFieldValue(&quot;VF Abone Istegi Flg&quot;,&quot;X&quot;);
			else if(orderRsn == strRsnBroken)
				SetFieldValue(&quot;VF Kart Hatasi Flg&quot;,&quot;X&quot;);
			
			if(SimType == SIMTypeNO)
				SetFieldValue(&quot;VF Normal Flg&quot;,&quot;X&quot;);
			else if(SimType == SIMTypeTW)
				SetFieldValue(&quot;VF Vodafone Ikili Kart Flg&quot;,&quot;X&quot;);
			else if(SimType == SIMTypeDU)
				SetFieldValue(&quot;VF Vodafone Ikili Hat Flg&quot;,&quot;X&quot;);
						
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;ModifyImsi&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			Outputs.SetProperty(&quot;URL1&quot;, URL);
			oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Outputs.SetProperty(&quot;URL2&quot;, &quot;&quot;);
			Outputs.SetProperty(&quot;URL3&quot;, &quot;&quot;);
		}
	}
	finally
	{
		oBC	= null;
		oBO	= null;
		oBCOrder = null;
		oBCOLI	 = null;
		psUserData = null;
		AccountInfo = null;
		oApp = null;
		oBOOrder = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="11/07/2016 12:40:06"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyIMSICBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyIMSICBU(Inputs, Outputs)
{
try
	{
		var oApp = TheApplication();
		var oBO : BusObject = oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject = oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var orderType = Inputs.GetProperty(&quot;OrderType&quot;);
		var orderST = Inputs.GetProperty(&quot;OrderSubType&quot;);
		var orderRsn = Inputs.GetProperty(&quot;OrderReason&quot;);
		var AccountInfo : PropertySet = oApp.NewPropertySet();
		getAccountInfo(AccountId, AccountInfo);
		var CustomerCode = AccountInfo.GetProperty(&quot;CustomerCode&quot;);
		var payPrepaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strSTModIMSI = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		var strRsnLost = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;201&quot;);
		var strRsnBroken = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;202&quot;);
		var strRsnOther = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;231&quot;);
		var strRsnCustReq = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;248&quot;);
		var strCoupling = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;255&quot;);
		var SIMTypeNO = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TWIN_SIM_TYPE&quot;,&quot;NO&quot;); // Normal
		var SIMTypeTW = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TWIN_SIM_TYPE&quot;,&quot;TW&quot;); // Twin
		var SIMTypeDU = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TWIN_SIM_TYPE&quot;,&quot;DU&quot;); // Dual
		var psUserData  : PropertySet = oApp.NewPropertySet();
		var CustName = &quot;&quot;;
		var CustLastName = &quot;&quot;;
		var CustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var paymType = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var SimType = &quot;&quot;;
		var ICCID = &quot;&quot;;
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		var conFstName = &quot;&quot;;
		var conLstName = &quot;&quot;;
		var skipPenality = &quot;&quot;;
		var sCoupledMSISDN = &quot;&quot;;
		

		
		
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;orderId&quot;,orderId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		
		oBC.ClearToQuery();
		oBC.SetViewMode(AllView);
		oBC.SetSearchSpec(&quot;VF Order Id&quot;, orderId);
		oBC.ExecuteQuery(ForwardOnly);
	
		var RecordsToDel = oBC.FirstRecord();
		
		while (RecordsToDel)
		{
			oBC.DeleteRecord();
			oBC.ExecuteQuery(ForwardOnly);
			
			RecordsToDel = oBC.FirstRecord();
		}
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account First Name&quot;); 		//VFTRCBU-36475
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
			with(oBCOLI)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;ICCID&quot;);
				ActivateField(&quot;MSISDN&quot;);					//MSISDN
				ActivateField(&quot;SIM Card Type&quot;);				//SIM Type
				ActivateField(&quot;Contact Last Name&quot;);		
				ActivateField(&quot;Contact First Name&quot;);
				ActivateField(&quot;VF Skip Penality&quot;);
				
				
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				oBCOLI.SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				oBCOLI.SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);

			}
			ExecuteQuery(ForwardOnly);			
			if(FirstRecord())
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				CustName = GetFieldValue(&quot;Account&quot;);
				CustLastName = GetFieldValue(&quot;Account First Name&quot;); 		//VFTRCBU-36475
				CustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				if(oBCOLI.FirstRecord())
				{
					SimType = oBCOLI.GetFieldValue(&quot;SIM Card Type&quot;);
					MSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);
					ICCID = oBCOLI.GetFieldValue(&quot;ICCID&quot;);
					conFstName = oBCOLI.GetFieldValue(&quot;Contact First Name&quot;);
	  				conLstName = oBCOLI.GetFieldValue(&quot;Contact Last Name&quot;);
	  				skipPenality = oBCOLI.GetFieldValue(&quot;VF Skip Penality&quot;);
				}
				if ( orderRsn == strCoupling )
				{	RetrieveCoupledMSISDN(orderId, Outputs);
					sCoupledMSISDN = Outputs.GetProperty(&quot;sCoupledMSISDN&quot;);
				}
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,CustomerCode);					//Convertire per il BARCODE
			//SetFieldValue(&quot;VF To Cust Name&quot;,CustName);
			if ( skipPenality == &quot;Y&quot;)
	  			SetFieldValue(&quot;VF CB01&quot;, &quot;X&quot;);
	  		else
	  			SetFieldValue(&quot;VF CB02&quot;, &quot;X&quot;);
	  		SetFieldValue(&quot;VF To Cust Name&quot;,CustName);//VFTRCBU-36475
	  		SetFieldValue(&quot;VF TX01&quot;,CustLastName);//VFTRCBU-36475
	  		SetFieldValue(&quot;VF TX02&quot;,sCoupledMSISDN);
			SetFieldValue(&quot;VF MSISDN&quot;, MSISDN);
			ICCID=ICCID.substring(&quot;6&quot;);
			SetFieldValue(&quot;VF ICCID&quot;,&quot;(899002)&quot;+ICCID);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+CustNum);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			if(paymType == payPrepaid)
			{
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
				//For R2.3 manage the logic for checkboxes on the basis of the new Reason &quot;Kart hatasi&quot;
			}
			else
			{
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
				//For R2.3 manage the logic for checkboxes on the basis of the new Reason &quot;Kart hatasi&quot;
			}
			
			//VF Ucretsiz Flg and VF Ucretsiz Flg planned to be managed in R2.3.
			// Now:
			SetFieldValue(&quot;VF Ucretsiz Flg&quot;, &quot;X&quot;);
			
			if(orderST == strSTModIMSI)
				SetFieldValue(&quot;VF SIM Degisikligi Flg&quot;,&quot;X&quot;);
			
			if(orderRsn == strRsnLost)
				SetFieldValue(&quot;VF Kayip Calinti Flg&quot;,&quot;X&quot;);
			else if(orderRsn == strRsnOther)
				SetFieldValue(&quot;VF Kullanici Hatasi Flg&quot;,&quot;X&quot;);
			else if (orderRsn == strRsnCustReq)
				SetFieldValue(&quot;VF Abone Istegi Flg&quot;,&quot;X&quot;);
			else if(orderRsn == strRsnBroken)
				SetFieldValue(&quot;VF Kart Hatasi Flg&quot;,&quot;X&quot;);
			
			if(SimType == SIMTypeNO)
				SetFieldValue(&quot;VF Normal Flg&quot;,&quot;X&quot;);
			else if(SimType == SIMTypeTW)
				SetFieldValue(&quot;VF Vodafone Ikili Kart Flg&quot;,&quot;X&quot;);
			else if(SimType == SIMTypeDU)
				SetFieldValue(&quot;VF Vodafone Ikili Hat Flg&quot;,&quot;X&quot;);
						
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			if ( orderRsn == strCoupling )
				Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_Coupling&quot;);
			else
				Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_SIM_Card_Change&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + &quot;ROW_ID=&quot;+ strId + strURLPart3;
			Outputs.SetProperty(&quot;URL1&quot;, URL);
			oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Outputs.SetProperty(&quot;URL2&quot;, &quot;&quot;);
			Outputs.SetProperty(&quot;URL3&quot;, &quot;&quot;);
		}
	}
	finally
	{
		oBC	= null;
		oBO	= null;
		oBCOrder = null;
		oBCOLI	 = null;
		psUserData = null;
		AccountInfo = null;
		oApp = null;
		oBOOrder = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
	
}"
			   SEQUENCE="21"
			   UPDATED="02/03/2017 11:52:14"
			   UPDATED_BY="JSARMENTO"
			   CREATED="02/26/2015 17:04:22"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyOptions"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyOptions(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var oBO : BusObject = oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject = oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI: BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var oBCOLIXA : BusComp= oBOOrder.GetBusComp(&quot;Order Item XA&quot;);
		var psUserData : PropertySet= oApp.NewPropertySet();
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var AccountInfo: PropertySet = oApp.NewPropertySet();
		getAccountInfo(AccountId, AccountInfo);
		var CustomerCode = AccountInfo.GetProperty(&quot;CustomerCode&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var Roaming = Inputs.GetProperty(&quot;Roaming&quot;);
		var TariffPlan = Inputs.GetProperty(&quot;TariffPlan&quot;);
		var delTariffPlan = Inputs.GetProperty(&quot;DelTariffPlan&quot;);
		var actAdd = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var payPrepaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var PhoneDirAttr = &quot;Phone Directory&quot;;
		var CustName = &quot;&quot;;
		var CustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var paymType = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var phoneDir = &quot;&quot;;
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		//End - Scripting 15
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
		}
		with(oBCOLI)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;MSISDN&quot;);					//MSISDN
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
		}
		with(oBCOLIXA)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(&quot;[Name]=&apos;Phone Directory&apos; AND [Calculated Value]=&apos;Y&apos;&quot;); // C_MSP00001611
		}//Amul - Scripting 31: Removed the Execute queries on Child BC&apos;s since there is link in the BO
		oBCOrder.ExecuteQuery(ForwardOnly);
		if(oBCOrder.FirstRecord())
		{
			with(oBCOrder)
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				CustName = GetFieldValue(&quot;Account&quot;);
				CustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				if(oBCOLI.FirstRecord())
				{
					MSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);						//Target MSISDN
					if(oBCOLIXA.FirstRecord())
						phoneDir = &quot;Y&quot;;
				}
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,CustomerCode);					//Convertire per il BARCODE
			SetFieldValue(&quot;VF MSISDN&quot;,&quot;0&quot;+MSISDN);
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			SetFieldValue(&quot;VF To Cust Name&quot;,CustName);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+CustNum);
			
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			
			if(paymType == payPrepaid)
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
			
			if(phoneDir == &quot;Y&quot;)
				SetFieldValue(&quot;VF Gecsin Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Gecmesin Flg&quot;,&quot;X&quot;);
			
			if(Roaming ==&quot;Y&quot;)
				SetFieldValue(&quot;VF Roaming Flg&quot;,&quot;X&quot;);
			
			if(delTariffPlan ==&quot;Y&quot;)
				SetFieldValue(&quot;VF Change Package Flg&quot;,&quot;X&quot;);
			if(TariffPlan != null)
				SetFieldValue(&quot;VF Target Package&quot;,TariffPlan);
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;ModifyOptions&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			Outputs.SetProperty(&quot;URL1&quot;, URL);
			oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Outputs.SetProperty(&quot;URL2&quot;, &quot;&quot;);
			Outputs.SetProperty(&quot;URL3&quot;, &quot;&quot;);
		}
	}
	finally
	{
		oBC	= null;
		oBCOrder = null;
		oBCOLIXA = null;
		oBCOLI	 = null;
		psUserData = null;
		oBOOrder = null;
		oBO	= null;
		AccountInfo	= null;
		inProp	= null;
		outProp	= null;
		BS	= null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyOptionsCBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyOptionsCBU(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var oBO : BusObject = oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject = oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI: BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var oBCOLIXA : BusComp= oBOOrder.GetBusComp(&quot;Order Item XA&quot;);
		var psUserData : PropertySet= oApp.NewPropertySet();
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var AccountInfo: PropertySet = oApp.NewPropertySet();
		getAccountInfo(AccountId, AccountInfo);
		var CustomerCode = AccountInfo.GetProperty(&quot;CustomerCode&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var Roaming = Inputs.GetProperty(&quot;Roaming&quot;);
		var TariffPlan = Inputs.GetProperty(&quot;TariffPlan&quot;);
		var delTariffPlan = Inputs.GetProperty(&quot;DelTariffPlan&quot;);
		var actAdd = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var payPrepaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var PhoneDirAttr = &quot;Phone Directory&quot;;
		var CustName = &quot;&quot;;
		var CustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var paymType = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var phoneDir = &quot;&quot;;
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		//End - Scripting 15
		
		oBC.ClearToQuery();
		oBC.SetViewMode(AllView);
		oBC.SetSearchSpec(&quot;VF Order Id&quot;, orderId);
		oBC.ExecuteQuery(ForwardOnly);
	
		var RecordsToDel = oBC.FirstRecord();
		
		while (RecordsToDel)
		{
			oBC.DeleteRecord();
			oBC.ExecuteQuery(ForwardOnly);
			
			RecordsToDel = oBC.FirstRecord();
		}
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
		}
		with(oBCOLI)
		{
			ClearToQuery();
			SetViewMode(AllView);
			//ActivateField(&quot;VF Tariff Plan&quot;); // VFTRCBU-20549	//ACAMBAS: VFTRCBU-23771 - Commented
			ActivateField(&quot;MSISDN&quot;);					//MSISDN
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
		}
		with(oBCOLIXA)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(&quot;[Name]=&apos;Phone Directory&apos; AND [Calculated Value]=&apos;Y&apos;&quot;); // C_MSP00001611
		}//Amul - Scripting 31: Removed the Execute queries on Child BC&apos;s since there is link in the BO
		
		oBCOrder.ExecuteQuery(ForwardOnly);
		
		if(oBCOrder.FirstRecord())
		{
			with(oBCOrder)
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				CustName = GetFieldValue(&quot;Account&quot;);
				CustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				if(oBCOLI.FirstRecord())
				{
					MSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);		//Target MSISDN
					//TariffPlan = oBCOLI.GetFieldValue(&quot;VF Tariff Plan&quot;); 	// VFTRCBU-20549 //ACAMBAS: VFTRCBU-23771 - Commented
					
					if(oBCOLIXA.FirstRecord())
						phoneDir = &quot;Y&quot;;
				}
			}
		}
		Inputs.SetProperty(&quot;InvokedFromModify&quot;, &quot;Y&quot;);
		VodafoneBR(Inputs, Outputs);
		strId = Outputs.GetProperty(&quot;strId&quot;); //JMARQUES
		
		
		with(oBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Orig Shop Cd&quot;);
			ActivateField(&quot;VF Send Date&quot;);
			ActivateField(&quot;VF To Cust Name&quot;); 
			ActivateField(&quot;VF To Cust Phone&quot;);
			ActivateField(&quot;VF Usr Login&quot;);
			ActivateField(&quot;VF Usr Last Name&quot;);
			ActivateField(&quot;VF On Odemeli Flg&quot;);
			ActivateField(&quot;VF Faturali Flg&quot;);
			ActivateField(&quot;VF Gecsin Flg&quot;);
			ActivateField(&quot;VF Gecmesin Flg&quot;);
			ActivateField(&quot;VF Roaming Flg&quot;);
			ActivateField(&quot;VF Change Package Flg&quot;);
			ActivateField(&quot;VF Target Package&quot;); 
			ActivateField(&quot;VF Order Id&quot;);
			SetSearchSpec(&quot;Id&quot;, strId);
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{		
				//J	NewRecord(NewAfter);
				//J	SetFieldValue(&quot;VF Order Id&quot;,orderId);
				//J	SetFieldValue(&quot;VF Barcode&quot;,orderId);					//Convertire per il BARCODE
				//J	SetFieldValue(&quot;VF MSISDN&quot;,MSISDN); // VFTRCBU-20549
					SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
					SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
					SetFieldValue(&quot;VF To Cust Name&quot;,AccountInfo.GetProperty(&quot;AccntFirstName&quot;) +&quot; &quot;+ AccountInfo.GetProperty(&quot;Name&quot;)); //VFTRCBU-20549
					SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;90&quot;+CustNum); // VFTRCBU-20549
					
					getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
					SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
					SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
					
					if(paymType == payPrepaid)
						SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
					else
						SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
					
					if(phoneDir == &quot;Y&quot;)
						SetFieldValue(&quot;VF Gecsin Flg&quot;,&quot;X&quot;);
					else
						SetFieldValue(&quot;VF Gecmesin Flg&quot;,&quot;X&quot;);
					
					if(Roaming ==&quot;Y&quot;)
						SetFieldValue(&quot;VF Roaming Flg&quot;,&quot;X&quot;);
					
					if(delTariffPlan ==&quot;Y&quot;)
						SetFieldValue(&quot;VF Change Package Flg&quot;,&quot;X&quot;);
					
					if(TariffPlan != null)
						SetFieldValue(&quot;VF Target Package&quot;,TariffPlan); //VFTRCBU-20549
					
					WriteRecord();
					//strId = GetFieldValue(&quot;Id&quot;); //JMARQUES
					Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_Modify_Options&quot;);
					BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
					var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
					var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
					var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
					URL = strURLPart1 + strURL + strURLPart2 + &quot;ROW_ID=&quot;+ strId + strURLPart3;
					Outputs.SetProperty(&quot;URL1&quot;, URL);
					oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
					Outputs.SetProperty(&quot;URL2&quot;, &quot;&quot;);
					Outputs.SetProperty(&quot;URL3&quot;, &quot;&quot;);
					}
		}
	}
	finally
	{
		oBC	= null;
		oBCOrder = null;
		oBCOLIXA = null;
		oBCOLI	 = null;
		psUserData = null;
		oBOOrder = null;
		oBO	= null;
		AccountInfo	= null;
		inProp	= null;
		outProp	= null;
		BS	= null;
	}
}"
			   SEQUENCE="23"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="02/25/2015 20:55:07"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ReActivationCBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ReActivationCBU(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var oBO : BusObject= oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp= oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject= oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);	
		var MarketClass = Inputs.GetProperty(&quot;MarketClass&quot;);
		var orderRsn = Inputs.GetProperty(&quot;OrderReason&quot;);
		var AccountInfo = oApp.NewPropertySet();
		var BAInfo = oApp.NewPropertySet();
		var OLIInfo = oApp.NewPropertySet();
		var ContactInfo : PropertySet = oApp.NewPropertySet();
		var DocVersion = &quot;06&quot;;
		var strBsnsClass = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);
		var strConsClass = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;);
		var strRsnTranfser = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strTariff = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var strBMTEmail = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_MEDIA_TYPE&quot;,&quot;102&quot;);
		var strBMTMail = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_MEDIA_TYPE&quot;,&quot;104&quot;);
		var strBTDetailed = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_TYPE&quot;,&quot;100&quot;);
		var strPassport = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type1&quot;);
		var strIdentityCard = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type2&quot;);
		var strIdentityCardCBU = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;TC ID Document&quot;); //VFTRCBU-27001
		var strDriverLic = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type3&quot;);
		var strELHighSchool = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;High School&quot;);
		var strELMasterDeg = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;Master Degree&quot;);
		var strELPrSchool = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;Primary School&quot;);
		var strELUniv = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;University&quot;);
		var strJSFarmer = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Farmer&quot;);
		var strJSHousewife = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Housewife&quot;);
		var strJSNotWork = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Not Working&quot;);
		var strJSPrivSect = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Private Sector&quot;);
		var strJSPubEmp = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Public Employee&quot;);
		var strJSRetired = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Retired&quot;);
		var strJSSelfEmp = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Self Employed&quot;);
		var strJSShopkeep = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Shopkeeper&quot;);
		var strJSStudent = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Student&quot;);
		var strFemale = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;GENDER&quot;,&quot;Female&quot;);
		var strMale = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;GENDER&quot;,&quot;Male&quot;);
		var strUnknown = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;GENDER&quot;,&quot;Unknown&quot;);
		var strAttorney = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_APPLICATION_INFO&quot;,&quot;Attorney&quot;);
		var strCurator = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_APPLICATION_INFO&quot;,&quot;Curator&quot;);
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		getAccountInfo(AccountId, AccountInfo);
		var DocumentType = AccountInfo.GetProperty(&quot;DocType&quot;);
		var Sector = AccountInfo.GetProperty(&quot;Sector&quot;);
		var JobStatus = AccountInfo.GetProperty(&quot;JobStatus&quot;);
		var AccntGender = AccountInfo.GetProperty(&quot;Gender&quot;);
		var EducationLv = AccountInfo.GetProperty(&quot;EducationLv&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		var AccntFirstName = &quot;&quot;;
		var AccntLastName = &quot;&quot;;
		var NotaryDoc = &quot;&quot;;
		var PubNotaryDoc = &quot;&quot;;
		var AppInfo = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var ICCID = &quot;&quot;;
		var IMEI = &quot;&quot;;
		var DelegName = &quot;&quot;;
		var DelegDate = &quot;&quot;;
		var delegName1 = &quot;&quot;;
		var delegName2 = &quot;&quot;;
		var contactId = &quot;&quot;;
		var conFstName = &quot;&quot;;
		var conLstName = &quot;&quot;;
		var conJobStatus = &quot;&quot;;
		var count =  &quot;&quot;;
		var dealer = &quot;&quot;;
		var Tariff = &quot;&quot;; // DG
		var psInputs : PropertySet = oApp.NewPropertySet();
		var psOutputs : PropertySet = oApp.NewPropertySet();
		
		oBC.ClearToQuery();
		oBC.SetViewMode(AllView);
		oBC.SetSearchSpec(&quot;VF Order Id&quot;, orderId);
		oBC.ExecuteQuery(ForwardOnly);
	
		var RecordsToDel = oBC.FirstRecord();
		
		while (RecordsToDel)
		{
			oBC.DeleteRecord();
			oBC.ExecuteQuery(ForwardOnly);
			
			RecordsToDel = oBC.FirstRecord();
		}
				
	
		oBCOrder.ClearToQuery();
		oBCOrder.SetViewMode(AllView);
		oBCOrder.ActivateField(&quot;Account First Name&quot;);
		oBCOrder.ActivateField(&quot;Account&quot;);
		oBCOrder.ActivateField(&quot;VF Application Info&quot;);
		oBCOrder.ActivateField(&quot;VF Delegate Name&quot;);
		oBCOrder.ActivateField(&quot;VF Delegation Date&quot;);
		oBCOrder.ActivateField(&quot;VF Notary Document No&quot;);
		oBCOrder.ActivateField(&quot;VF Doc Public Notary&quot;);
		oBCOrder.ActivateField(&quot;VF Dealer Code&quot;);
		oBCOrder.SetSearchSpec(&quot;Id&quot;, orderId);
		
		oBCOrder.ExecuteQuery(ForwardOnly);
			
		//Venkata 14/05/2012: Moved child query as per oracle review31-Start */
		oBCOLI.ClearToQuery();
		oBCOLI.SetViewMode(AllView);
		oBCOLI.ActivateField(&quot;MSISDN&quot;);
		oBCOLI.ActivateField(&quot;ICCID&quot;);
		oBCOLI.ActivateField(&quot;VF IMEI&quot;);
		oBCOLI.ActivateField(&quot;Contact Last Name&quot;);
		oBCOLI.ActivateField(&quot;Contact First Name&quot;);
		oBCOLI.ActivateField(&quot;Parent Order Item Id&quot;);
		oBCOLI.ActivateField(&quot;Promotion Id&quot;);
		oBCOLI.ActivateField(&quot;VF Tariff Plan&quot;); // DG							
		//Venkata 14/05/2012: Moved child query as per oracle review31-End */

		oBCOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL AND [MSISDN] IS NOT NULL AND [MSISDN] &lt;&gt; &apos; &apos;&quot;);										
		
		oBCOLI.ExecuteQuery(ForwardOnly);

		var isRecord = oBCOLI.FirstRecord();									
		//FCARRIL: JIRA 10518:
		MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
			
		while(isRecord)
		{
				//MLid = oBCOrder.GetFieldValue(&quot;Id&quot;); //FCARRIL: JIRA 10518
				AccntFirstName = oBCOrder.GetFieldValue(&quot;Account First Name&quot;);
				AccntLastName = oBCOrder.GetFieldValue(&quot;Account&quot;);
				dealer = oBCOrder.GetFieldValue(&quot;VF Dealer Code&quot;);
				DelegName = oBCOrder.GetFieldValue(&quot;VF Delegate Name&quot;);
				DelegDate = oBCOrder.GetFieldValue(&quot;VF Delegation Date&quot;);
				NotaryDoc = oBCOrder.GetFieldValue(&quot;VF Notary Document No&quot;);
				PubNotaryDoc = oBCOrder.GetFieldValue(&quot;VF Doc Public Notary&quot;);
				AppInfo = oBCOrder.GetFieldValue(&quot;VF Application Info&quot;);
				var lstId = ToNumber(DelegName.lastIndexOf(&quot; &quot;));
				if(lstId &gt; 0)
				{
					delegName1 = DelegName.substring(0, lstId+1);
					delegName2 = DelegName.substring(lstId+1);
				}
				else
					delegName1 = DelegName;
				
				
 
				MSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);
				ICCID = oBCOLI.GetFieldValue(&quot;ICCID&quot;);
				Tariff = oBCOLI.GetFieldValue(&quot;VF Tariff Plan&quot;); // DG
				//IMEI = oBCOLI.GetFieldValue(&quot;VF IMEI&quot;);
				/*if( oBCOLI.GetFieldValue(&quot;Promotion Id&quot;) == &quot;&quot; || oBCOLI.GetFieldValue(&quot;Promotion Id&quot;) == null )
				{
					IMEI = oBCOLI.GetFieldValue(&quot;VF IMEI&quot;);
				}
				else {

					psInputs.SetProperty(&quot;PromoId&quot;, oBCOLI.GetFieldValue(&quot;Promotion Id&quot;));
					psInputs.SetProperty(&quot;OrderId&quot;, orderId);	//ACAMBAS: VFTRCBU-22349
				*/ //FCARRIL: VFTRCBU-23992 - Commented
				psInputs.SetProperty(&quot;OrderId&quot;, orderId);
				psInputs.SetProperty(&quot;Operation&quot;, &quot;Resume&quot;);
				GetIMEI(psInputs, psOutputs );
				IMEI = psOutputs.GetProperty(&quot;IMEI&quot;);
				
				//}	//FCARRIL: VFTRCBU-23992 - Commented
	
				conFstName = oBCOLI.GetFieldValue(&quot;Contact First Name&quot;);
				conLstName = oBCOLI.GetFieldValue(&quot;Contact Last Name&quot;);
				contactId = oBCOLI.GetFieldValue(&quot;Contact Id&quot;);
				getBAInfo(oBCOLI.GetFieldValue(&quot;Billing Account Id&quot;), BAInfo);
				//FCARRIL - JIRA 10518
				//ACAMBAS: VFTRCBU-22349 - Start
				psInputs.SetProperty(&quot;MLid&quot;, MLid);	
	  			//getOLIInfoCBU(MLid, OLIInfo);
	  			getOLIInfoCBU(psInputs, OLIInfo);
	  			//ACAMBAS: VFTRCBU-22349 - End
				//getOLIInfo(MLid, OLIInfo);
				//End - FCARRIL
				getContactInfo(contactId,  AccountInfo, ContactInfo);
				
				
			
		
		
			oBC.NewRecord(NewAfter);

			oBC.SetFieldValue(&quot;VF Barcode&quot;, orderId);
			//oBC.SetFieldValue(&quot;VFTRCBU Barcode2&quot;, &quot;BRY06-&quot;+ orderId); //PSANTOS VFTRCBU-35225 - Changed to BRY07
			oBC.SetFieldValue(&quot;VFTRCBU Barcode2&quot;, &quot;BRY07-&quot;+ orderId);
			oBC.SetFieldValue(&quot;VF Order Id&quot;, orderId);
			oBC.SetFieldValue(&quot;VF To Cust Name&quot;, AccountInfo.GetProperty(&quot;AccntFirstName&quot;));
			oBC.SetFieldValue(&quot;VF ICCID&quot;, ICCID);
			oBC.SetFieldValue(&quot;VF MSISDN&quot;, MSISDN);
			oBC.SetFieldValue(&quot;VF Orig Shop Cd&quot;, dealer);
			oBC.SetFieldValue(&quot;VF TX01&quot;, AccountInfo.GetProperty(&quot;Name&quot;));
			oBC.SetFieldValue(&quot;VF TX02&quot;, AccountInfo.GetProperty(&quot;MernFatherName&quot;));
			oBC.SetFieldValue(&quot;VF TX03&quot;, AccountInfo.GetProperty(&quot;BirthPlace&quot;));
			oBC.SetFieldValue(&quot;VF TX04&quot;, AccountInfo.GetProperty(&quot;BirthDate&quot;));
			oBC.SetFieldValue(&quot;VF TX05&quot;, AccountInfo.GetProperty(&quot;Job&quot;));
			oBC.SetFieldValue(&quot;VF TX06&quot;, AccountInfo.GetProperty(&quot;Salary&quot;));
			oBC.SetFieldValue(&quot;VF TX07&quot;, AccountInfo.GetProperty(&quot;DocNumber&quot;) + &quot; / &quot; + AccountInfo.GetProperty(&quot;SeqNo&quot;));
			oBC.SetFieldValue(&quot;VF TX08&quot;, AccountInfo.GetProperty(&quot;TCId&quot;));
			oBC.SetFieldValue(&quot;VF TX09&quot;, AccountInfo.GetProperty(&quot;MotherMaidName&quot;));
			if(AccountInfo.GetProperty(&quot;CellNo&quot;) != &quot;&quot;)
				oBC.SetFieldValue(&quot;VF TX10&quot;, AccountInfo.GetProperty(&quot;CellNo&quot;));
			if(AccountInfo.GetProperty(&quot;MainPhoneNr&quot;))
				oBC.SetFieldValue(&quot;VF TX11&quot;, AccountInfo.GetProperty(&quot;MainPhoneNr&quot;));
			oBC.SetFieldValue(&quot;VF TX12&quot;, AccountInfo.GetProperty(&quot;Address&quot;));
			oBC.SetFieldValue(&quot;VF TX13&quot;, AccountInfo.GetProperty(&quot;ApartmentNr&quot;));
			oBC.SetFieldValue(&quot;VF TX14&quot;, AccountInfo.GetProperty(&quot;District&quot;));
			oBC.SetFieldValue(&quot;VF TX15&quot;, AccountInfo.GetProperty(&quot;City&quot;));
			oBC.SetFieldValue(&quot;VF TX16&quot;, AccountInfo.GetProperty(&quot;ZIP&quot;));
			oBC.SetFieldValue(&quot;VF TX17&quot;, AccountInfo.GetProperty(&quot;Province&quot;)); //DGUERREIRO
			oBC.SetFieldValue(&quot;VF TX18&quot;, delegName1);
			oBC.SetFieldValue(&quot;VF TX19&quot;, delegName2);
			oBC.SetFieldValue(&quot;VF TX20&quot;, DelegDate);
			oBC.SetFieldValue(&quot;VF TX21&quot;, NotaryDoc);
			oBC.SetFieldValue(&quot;VF TX22&quot;, PubNotaryDoc);
			oBC.SetFieldValue(&quot;VF TX23&quot;, &quot;&quot;); //FCARRIL:VFTRCBU-23992 - Removed: OLIInfo.GetProperty(&quot;BrandModel&quot;)
			oBC.SetFieldValue(&quot;VF TX24&quot;, IMEI);
			oBC.SetFieldValue(&quot;VF TX25&quot;, OLIInfo.GetProperty(&quot;Campaign&quot;));
			oBC.SetFieldValue(&quot;VF TX26&quot;, conFstName);
			oBC.SetFieldValue(&quot;VF TX27&quot;, conLstName);
			oBC.SetFieldValue(&quot;VF TX28&quot;, ContactInfo.GetProperty(&quot;BirthPlace&quot;));
			oBC.SetFieldValue(&quot;VF TX29&quot;, ContactInfo.GetProperty(&quot;BirthDate&quot;));
			oBC.SetFieldValue(&quot;VF TX30&quot;, ContactInfo.GetProperty(&quot;TCID&quot;));
			oBC.SetFieldValue(&quot;VF TX31&quot;, ContactInfo.GetProperty(&quot;Job&quot;));
			oBC.SetFieldValue(&quot;VF TX32&quot;, Tariff);   //DG
			oBC.SetFieldValue(&quot;VF TX33&quot;, AccountInfo.GetProperty(&quot;MainEmail&quot;));
			
			if(EducationLv == strELPrSchool)	//EDUCATION LEVEL
				oBC.SetFieldValue(&quot;VF CB01&quot;, &quot;X&quot;);
			else if(EducationLv == strELHighSchool)
				oBC.SetFieldValue(&quot;VF CB02&quot;, &quot;X&quot;);
			else if(EducationLv == strELUniv)
				oBC.SetFieldValue(&quot;VF CB03&quot;, &quot;X&quot;);
			else if(EducationLv == strELMasterDeg)
				oBC.SetFieldValue(&quot;VF CB04&quot;, &quot;X&quot;);
			
			if(JobStatus == strJSPrivSect)			//JOB STATUS
				oBC.SetFieldValue(&quot;VF CB05&quot;, &quot;X&quot;);
			else if(JobStatus == strJSSelfEmp)
				oBC.SetFieldValue(&quot;VF CB06&quot;, &quot;X&quot;);
			else if(JobStatus == strJSPubEmp)
				oBC.SetFieldValue(&quot;VF CB07&quot;, &quot;X&quot;);
			else if(JobStatus == strJSRetired)
				oBC.SetFieldValue(&quot;VF CB08&quot;, &quot;X&quot;);
			else if(JobStatus == strJSStudent)
				oBC.SetFieldValue(&quot;VF CB09&quot;, &quot;X&quot;);
			else if(JobStatus == strJSHousewife)
				oBC.SetFieldValue(&quot;VF CB10&quot;, &quot;X&quot;);
			else if(JobStatus == strJSFarmer)
				oBC.SetFieldValue(&quot;VF CB11&quot;, &quot;X&quot;);
			else if(JobStatus == strJSShopkeep)
				oBC.SetFieldValue(&quot;VF CB12&quot;, &quot;X&quot;);
			else if(JobStatus == strJSNotWork)
				oBC.SetFieldValue(&quot;VF CB13&quot;, &quot;X&quot;);
			
			if(AccntGender == strFemale)			//GENDER
				oBC.SetFieldValue(&quot;VF CB14&quot;, &quot;X&quot;);
			else if(AccntGender == strMale)
				oBC.SetFieldValue(&quot;VF CB15&quot;, &quot;X&quot;);
			
			if(DocumentType == strIdentityCard || DocumentType == strIdentityCardCBU)	//DOCUMENT TYPE - VFTRCBU-27001
				oBC.SetFieldValue(&quot;VF CB16&quot;, &quot;X&quot;);
			else if(DocumentType == strPassport)
				oBC.SetFieldValue(&quot;VF CB17&quot;, &quot;X&quot;);
			else if(DocumentType == strDriverLic)
				oBC.SetFieldValue(&quot;VF CB18&quot;, &quot;X&quot;);
			else
				oBC.SetFieldValue(&quot;VF CB19&quot;, &quot;X&quot;);
			
			if(AppInfo == &quot;&quot;)						//APPLICATION INFO
				oBC.SetFieldValue(&quot;VF CB20&quot;, &quot;X&quot;);
			else if(AppInfo == strAttorney)
				oBC.SetFieldValue(&quot;VF CB21&quot;, &quot;X&quot;);
			else if(AppInfo == strCurator)
				oBC.SetFieldValue(&quot;VF CB22&quot;, &quot;X&quot;);
			
			if(orderRsn == &quot;&quot;)						//REASON
				oBC.SetFieldValue(&quot;VF CB23&quot;, &quot;X&quot;);
			else if(orderRsn == strRsnTranfser)
				oBC.SetFieldValue(&quot;VF CB24&quot;, &quot;X&quot;);
			
			if(ContactInfo.GetProperty(&quot;Gender&quot;) == strFemale)		//CONTACT GENDER
				oBC.SetFieldValue(&quot;VF CB25&quot;, &quot;X&quot;);
			else if(ContactInfo.GetProperty(&quot;Gender&quot;) == strMale)
				oBC.SetFieldValue(&quot;VF CB26&quot;, &quot;X&quot;);
			
			conJobStatus = ContactInfo.GetProperty(&quot;JobStatus&quot;);
			if(conJobStatus == strJSPrivSect)			//CONTACT JOB STATUS
				oBC.SetFieldValue(&quot;VF CB27&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSSelfEmp)
				oBC.SetFieldValue(&quot;VF CB28&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSPubEmp)
				oBC.SetFieldValue(&quot;VF CB29&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSRetired)
				oBC.SetFieldValue(&quot;VF CB30&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSStudent)
				oBC.SetFieldValue(&quot;VF CB31&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSHousewife)
				oBC.SetFieldValue(&quot;VF CB32&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSFarmer)
				oBC.SetFieldValue(&quot;VF CB33&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSShopkeep)
				oBC.SetFieldValue(&quot;VF CB34&quot;, &quot;X&quot;);
			else if(conJobStatus == strJSNotWork)
				oBC.SetFieldValue(&quot;VF CB35&quot;, &quot;X&quot;);
			
			if(OLIInfo.GetProperty(&quot;1111&quot;) == &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB36&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1110&quot;) == &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB37&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1128&quot;) != &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB38&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1133&quot;) == &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB39&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;PhoneDirectory&quot;) == &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB40&quot;, &quot;X&quot;);
			if(BAInfo.GetProperty(&quot;MediaType&quot;) == strBMTEmail)
				oBC.SetFieldValue(&quot;VF CB41&quot;, &quot;X&quot;);
			if(BAInfo.GetProperty(&quot;MediaType&quot;) != strBMTMail)
				oBC.SetFieldValue(&quot;VF CB43&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1103&quot;) == &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB42&quot;, &quot;X&quot;);
			if(BAInfo.GetProperty(&quot;BillType&quot;) == strBTDetailed)
				oBC.SetFieldValue(&quot;VF CB44&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1129&quot;) == &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB45&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1132&quot;) == &quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF CB46&quot;, &quot;X&quot;);
			//VFTRCBU-32822	
			if(OLIInfo.GetProperty(&quot;71000&quot;)==&quot;Y&quot;)
				oBC.SetFieldValue(&quot;VF TX88&quot;,&quot;X&quot;);				
			
			oBC.WriteRecord();

				strId = oBC.GetFieldValue(&quot;Id&quot;);

			isRecord = oBCOLI.NextRecord();
		}
		
		
		Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_re_Activation_Form&quot;);
		BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
		var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
		var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
		var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
		URL = strURLPart1 + strURL + strURLPart2 + &quot;ROW_ID=&quot;+ strId + strURLPart3;
		oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
		Outputs.SetProperty(&quot;URL1&quot;, URL);
		
		Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_re_Activation_Form_KR&quot;);
		BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
		strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
		strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
		strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
		URL = strURLPart1 + strURL + strURLPart2 + strURLPart3;
		oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
		Outputs.SetProperty(&quot;URL2&quot;, URL);

		
	}
	finally
	{
		oBCOLI = null;
		oBCOrder = null;
		oBOOrder = null;
		oBC = null;
		oBO = null;
		ContactInfo = null;
		AccountInfo = null;
		BAInfo = null;
		OLIInfo  = null;		
		oApp = null;	
	}
}"
			   SEQUENCE="24"
			   UPDATED="12/05/2016 17:27:38"
			   UPDATED_BY="JSARMENTO"
			   CREATED="02/25/2015 12:59:31"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RetrieveCoupledMSISDN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveCoupledMSISDN(orderId, Outputs)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcItem : BusComp    = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var bcItemXA : BusComp  = boOrder.GetBusComp(&quot;Order Item XA&quot;);

		var sOrderId       = orderId;
		var sCoupledMSISDN = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return (sCoupledMSISDN);
		}

		bcItem.ClearToQuery();
		bcItem.SetViewMode (AllView);
		bcItem.SetSearchSpec(&quot;Order Id&quot;,    sOrderId);
		bcItem.SetSearchSpec(&quot;Part Number&quot;, &quot;15040&quot;);

		bcItemXA.ClearToQuery();
		bcItemXA.SetViewMode(AllView);
		bcItemXA.ActivateField(&quot;Value&quot;)
		bcItemXA.SetSearchSpec(&quot;Name&quot;, &quot;Coupled MSISDN&quot;);

		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
		{
			if (bcItemXA.FirstRecord())
			{
				sCoupledMSISDN = bcItemXA.GetFieldValue(&quot;Value&quot;);
			}
		}
		Outputs.SetProperty(&quot;sCoupledMSISDN&quot;, sCoupledMSISDN);
		//return (sCoupledMSISDN);
	}
	finally
	{
		bcItemXA = null;
		bcItem   = null;
		boOrder  = null;
	}
}"
			   SEQUENCE="25"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="07/02/2015 12:59:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SebekeGecis"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SebekeGecis(Inputs, Outputs)
{
//FCARRIL - WA#13: Forward Migrations form
	try
	{
		var oBO : BusObject= TheApplication().GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp= oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var OrdReason = Inputs.GetProperty(&quot;OrderReason&quot;);
		var psUserData : PropertySet = TheApplication().NewPropertySet();
		var strURL = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var strRsnToPostpaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;2013&quot;);
		var payPrepaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		//Variables
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		var toCustName = &quot;&quot;;
		var toCustNum = &quot;&quot;;
		var paymType = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var tgMSISDN = &quot;&quot;;
		var targetPackage = &quot;&quot;;
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Last Name
			ActivateField(&quot;Account First Name&quot;);		// to Cust First Name
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				toCustName = GetFieldValue(&quot;Account&quot;) + &quot;, &quot; + GetFieldValue(&quot;Account First Name&quot;);
				toCustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				
				//Root Line Item
				oBCOLI.ClearToQuery
				oBCOLI.SetViewMode(AllView);
				oBCOLI.ActivateField(&quot;MSISDN&quot;);	//To Cust MSISDN
				oBCOLI.ActivateField(&quot;VF Tariff Plan&quot;);
				if(MLid != &quot;&quot; &amp;&amp; MLid != null)
					oBCOLI.SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
				else
					oBCOLI.SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
				
				oBCOLI.ExecuteQuery(ForwardOnly);
				
				if (oBCOLI.FirstRecord())
				{
					MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
					tgMSISDN = oBCOLI.GetFieldValue(&quot;MSISDN&quot;);	//Target MSISDN
					targetPackage = oBCOLI.GetFieldValue(&quot;VF Tariff Plan&quot;); // Target Package
				}
			}
		}
		
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,orderId);					//Convertire per il BARCODE
			SetFieldValue(&quot;VF MSISDN&quot;,&quot;0&quot;+tgMSISDN);
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			SetFieldValue(&quot;VF To Cust Name&quot;,toCustName);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+toCustNum);
			SetFieldValue(&quot;VF Target Package&quot;,targetPackage);
			
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			
			if(paymType == payPrepaid)
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
				
			if(OrdReason == strRsnToPostpaid){
				SetFieldValue(&quot;VF TX01&quot;,&quot;X&quot;);
			}
			
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;Sebeke Ici Gecis Basvuru&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			Outputs.SetProperty(&quot;URL1&quot;, URL);
			TheApplication().SetProfileAttr(&quot;olf_rwid1&quot;,strId);
		}
	}
	finally
	{
		oBC			= null;
		oBCOrder	= null;
		oBCOLI		= null;
		oBO			= null;
		oBOOrder 	= null;
		psUserData  = null;
	}
}"
			   SEQUENCE="26"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="03/16/2015 16:02:09"
			   CREATED_BY="FCARRIL">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == &quot;GetTemplate&quot;)
	{
		GetTemplate(Inputs, Outputs);
	}
	
	if(MethodName == &quot;CreditCardFormGnrt&quot;)
	{
		CreditCardFormGnrt(Inputs, Outputs);
	}
	
	if(MethodName == &quot;GetTemplateOrder&quot;)
	{
		//method invoked from PRM application
		GetTemplateOrder(Inputs, Outputs);
	}

	return (CancelOperation);
}"
			   SEQUENCE="32"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="TransferDevir"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function TransferDevir(Inputs, Outputs)
{
	try
	{
		var oBO : BusObject= TheApplication().GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp= oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var OrdReason = Inputs.GetProperty(&quot;OrderReason&quot;);
		var payPrepaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strRsnTranfser = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strRsnToRel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;249&quot;);
		var psUserData : PropertySet = TheApplication().NewPropertySet();
		var toCustName = &quot;&quot;;
		var toCustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var fromCustNum = &quot;&quot;;
		var fromCustName = &quot;&quot;;
		var paymType = &quot;&quot;;
		var tgMSISDN = &quot;&quot;;
		var strURL = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		//FCARRIL - JIRA 10411
		var oApp = TheApplication();
		var AccountInfo : PropertySet = oApp.NewPropertySet();
		var sToBACustId = &quot;&quot;;
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account First Name&quot;);
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;VF Ship To Account Phone Num&quot;);	//from Cust Number
			ActivateField(&quot;Ship To Account&quot;);				//from Cust Name
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
			//Venkata 14/05/2012: Moved child query as per oracle review31-Start */
			oBCOLI.ClearToQuery
			oBCOLI.SetViewMode(AllView);
			oBCOLI.ActivateField(&quot;MSISDN&quot;);	//To Cust MSISDN
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				oBCOLI.SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				oBCOLI.SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
				oBCOLI.ActivateField(&quot;Billing Account Master Id&quot;); //FCARRIL - JIRA 10411
			//Venkata 14/05/2012: Moved child query as per oracle review31-End */
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				//FCARRIL - JIRA 10411
				sToBACustId = oBCOLI.GetFieldValue(&quot;Billing Account Master Id&quot;);
				getAccountInfo(sToBACustId, AccountInfo);
				/*toCustName*/ fromCustName = GetFieldValue(&quot;Account&quot;) + &quot;, &quot; + GetFieldValue(&quot;Account First Name&quot;);
				/*toCustNum*/  fromCustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				/*fromCustNum = GetFieldValue(&quot;VF Ship To Account Phone Num&quot;).substring(2);
				fromCustName = GetFieldValue(&quot;Ship To Account&quot;);*/
				toCustName = AccountInfo.GetProperty(&quot;Name&quot;) + &quot;, &quot; + AccountInfo.GetProperty(&quot;AccntFirstName&quot;);
				toCustNum = AccountInfo.GetProperty(&quot;MainPhoneNr&quot;).substring(2); //FCARRIL
				//End - FCARRIL - JIRA 10411
				
				with(oBCOLI)
				{
					if(FirstRecord())
					{
						tgMSISDN = GetFieldValue(&quot;MSISDN&quot;);						//Target MSISDN
					}
				}
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,orderId);					//Convertire per il BARCODE
			SetFieldValue(&quot;VF From Cust Name&quot;,fromCustName);
			SetFieldValue(&quot;VF From Cust Phone&quot;,&quot;0&quot;+fromCustNum);
			SetFieldValue(&quot;VF MSISDN&quot;,&quot;0&quot;+tgMSISDN);
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			SetFieldValue(&quot;VF To Cust Name&quot;,toCustName);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+toCustNum);
			
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			
			if(paymType == payPrepaid)
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
			
			if(OrdReason == strRsnToRel)
				SetFieldValue(&quot;VF Akrabaya Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Normal Flg&quot;,&quot;X&quot;);
			
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;TransferDevir&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			//FCARRIL - VFTRCBU-9829
			if (Outputs.GetProperty(&quot;URL1&quot;) == &quot;&quot; || Outputs.GetProperty(&quot;URL1&quot;) == null)
			{
				Outputs.SetProperty(&quot;URL1&quot;, URL);
			}
			else
			{
				Outputs.SetProperty(&quot;URL9&quot;, URL);
			} // End - FCARRIL
			TheApplication().SetProfileAttr(&quot;olf_rwid1&quot;,strId);
		}
	}
	finally
	{
		oBC			= null;
		oBCOrder	= null;
		oBCOLI		= null;
		oBO			= null;
		oBOOrder 	= null;
		psUserData	= null;
		AccountInfo = null; //FCARRIL
	}
}"
			   SEQUENCE="27"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="TransferDevirCBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function TransferDevirCBU(Inputs,Outputs)
{
	try
	{
		var oBO : BusObject= TheApplication().GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp= oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp= oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var OrdReason = Inputs.GetProperty(&quot;OrderReason&quot;);
		var payPrepaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var payPostpaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strRsnTranfser = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strRsnToRel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;249&quot;);
		var psUserData : PropertySet = TheApplication().NewPropertySet();
		var toCustName = &quot;&quot;;
		var toCustNum = &quot;&quot;;
		var OrderDate = &quot;&quot;;
		var OrigShopCode = &quot;&quot;;
		var fromCustNum = &quot;&quot;;
		var fromCustName = &quot;&quot;;
		var paymType = &quot;&quot;;
		var tgMSISDN = &quot;&quot;;
		var strURL = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		//FCARRIL - JIRA 10411
		var oApp = TheApplication();
		var AccountInfo : PropertySet = oApp.NewPropertySet();
		var sToBACustId = &quot;&quot;;
		
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account&quot;);					//to Cust Name
			ActivateField(&quot;Account First Name&quot;);
			ActivateField(&quot;Account Main Phone Number&quot;);	//to Cust Number
			ActivateField(&quot;Order Date&quot;);				//Send date
			ActivateField(&quot;VF Shop Code&quot;);				//Originating Shop Code
			ActivateField(&quot;VF Ship To Account Phone Num&quot;);	//from Cust Number
			ActivateField(&quot;Ship To Account&quot;);				//from Cust Name
			ActivateField(&quot;Billing Account Payment Modality&quot;);	//BA Payment Type
			SetSearchSpec(&quot;Id&quot;,orderId);
			//Venkata 14/05/2012: Moved child query as per oracle review31-Start */
			oBCOLI.ClearToQuery
			oBCOLI.SetViewMode(AllView);
			oBCOLI.ActivateField(&quot;MSISDN&quot;);	//To Cust MSISDN
			oBCOLI.ActivateField(&quot;Billing Account Master Id&quot;); //FCARRIL - JIRA 10411
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				oBCOLI.SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				oBCOLI.SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);
			//Venkata 14/05/2012: Moved child query as per oracle review31-End */
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				//FCARRIL - JIRA 10411
				sToBACustId = oBCOLI.GetFieldValue(&quot;Billing Account Master Id&quot;);
				getAccountInfo(sToBACustId, AccountInfo);
				/*toCustName*/ fromCustName = GetFieldValue(&quot;Account&quot;) + &quot;, &quot; + GetFieldValue(&quot;Account First Name&quot;);
				/*toCustNum*/ fromCustNum = GetFieldValue(&quot;Account Main Phone Number&quot;).substring(2);
				paymType = GetFieldValue(&quot;Billing Account Payment Modality&quot;);
				var OrderSendDate = new Date(GetFieldValue(&quot;Order Date&quot;));
				OrderDate = formatDate(OrderSendDate);
				OrigShopCode = GetFieldValue(&quot;VF Shop Code&quot;);
				/*fromCustNum = GetFieldValue(&quot;VF Ship To Account Phone Num&quot;).substring(2);
				fromCustName = GetFieldValue(&quot;Ship To Account&quot;); */
				toCustName = AccountInfo.GetProperty(&quot;Name&quot;) + &quot;, &quot; + AccountInfo.GetProperty(&quot;AccntFirstName&quot;);
				toCustNum = AccountInfo.GetProperty(&quot;MainPhoneNr&quot;).substring(2); //FCARRIL
				// End - FCARRIL - JIRA 10411
				
				with(oBCOLI)
				{
					if(FirstRecord())
					{
						tgMSISDN = GetFieldValue(&quot;MSISDN&quot;);						//Target MSISDN
					}
				}
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Order Id&quot;,orderId);
			SetFieldValue(&quot;VF Barcode&quot;,orderId);					//Convertire per il BARCODE
			SetFieldValue(&quot;VF From Cust Name&quot;,fromCustName);
			SetFieldValue(&quot;VF From Cust Phone&quot;,&quot;0&quot;+fromCustNum);
			SetFieldValue(&quot;VF MSISDN&quot;,&quot;0&quot;+tgMSISDN);
			SetFieldValue(&quot;VF Orig Shop Cd&quot;,OrigShopCode);
			SetFieldValue(&quot;VF Send Date&quot;,OrderDate);
			SetFieldValue(&quot;VF To Cust Name&quot;,toCustName);
			SetFieldValue(&quot;VF To Cust Phone&quot;,&quot;0&quot;+toCustNum);
			
			getUsrLastName(GetFieldValue(&quot;Created By&quot;),psUserData);
			SetFieldValue(&quot;VF Usr Login&quot;, psUserData.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF Usr Last Name&quot;, psUserData.GetProperty(&quot;LastName&quot;));
			
			if(paymType == payPrepaid)
				SetFieldValue(&quot;VF On Odemeli Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Faturali Flg&quot;,&quot;X&quot;);
			
			if(OrdReason == strRsnToRel)
				SetFieldValue(&quot;VF Akrabaya Flg&quot;,&quot;X&quot;);
			else
				SetFieldValue(&quot;VF Normal Flg&quot;,&quot;X&quot;);
			
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_MSISDN_Transfer&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			//FCARRIL - VFTRCBU-9829
			if (Outputs.GetProperty(&quot;URL1&quot;) == &quot;&quot; || Outputs.GetProperty(&quot;URL1&quot;) == null)
			{
				Outputs.SetProperty(&quot;URL1&quot;, URL);
			}
			else
			{
				Outputs.SetProperty(&quot;URL9&quot;, URL);
			} // End - FCARRIL
			TheApplication().SetProfileAttr(&quot;olf_rwid1&quot;,strId);
		}
	}
	finally
	{
		oBC			= null;
		oBCOrder	= null;
		oBCOLI		= null;
		oBO			= null;
		oBOOrder 	= null;
		psUserData	= null;
		AccountInfo = null; //FCARRIL
	}
}"
			   SEQUENCE="28"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="06/01/2015 14:30:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VodafoneBR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VodafoneBR(Inputs, Outputs)
{try
  { var App=TheApplication();
	var oBO:BusObject=App.GetBusObject(&quot;VF Online Form&quot;);
	var oBC:BusComp=oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
	var oBOOrder:BusObject=App.GetBusObject(&quot;Order Entry (Sales)&quot;);
	var oBCOrder:BusComp=oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
	var oBCOLI:BusComp=oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
	var orderId=Inputs.GetProperty(&quot;OrderId&quot;);
	var AccountId=Inputs.GetProperty(&quot;AccountId&quot;);
	var BillingAccId=Inputs.GetProperty(&quot;BillingAccId&quot;);
	var MLid=Inputs.GetProperty(&quot;SIM&quot;);
	var SIMPRM=Inputs.GetProperty(&quot;PRMSIM&quot;);	
	var MarketClass=Inputs.GetProperty(&quot;MarketClass&quot;);
	var OrderSubType=Inputs.GetProperty(&quot;OrderSubType&quot;);   // JIRA-15559
	var orderRsn=Inputs.GetProperty(&quot;OrderReason&quot;);
	var sInvokedFromModify = Inputs.GetProperty(&quot;InvokedFromModify&quot;); //JMARQUES
	var AccountInfo=App.NewPropertySet();
	var BAInfo=App.NewPropertySet();
	var OLIInfo=App.NewPropertySet();
	var ContactInfo:PropertySet=App.NewPropertySet();
	var ContactLegalInfo:PropertySet=App.NewPropertySet();  //JIRA 14339&lt;-&gt;JIRA 13228
	var DocVersion=&quot;06&quot;;
	var strBsnsClass=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);
	var strConsClass=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;);
	var strRsnTranfser=App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
	var strTariff=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
	var strBMTEmail=App.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_MEDIA_TYPE&quot;,&quot;102&quot;);
	var strBMTMail=App.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_MEDIA_TYPE&quot;,&quot;104&quot;);
	var strBTDetailed=App.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_TYPE&quot;,&quot;100&quot;);
	var strPassport=App.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type1&quot;);
	var strIdentityCard=App.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type2&quot;);
	var strDriverLic=App.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type3&quot;);
	var strIdentityCardCBU = App.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;TC ID Document&quot;); //VFTRCBU-27001
	var strELHighSchool=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;High School&quot;);
	var strELMasterDeg=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;Master Degree&quot;);
	var strELPrSchool=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;Primary School&quot;);
	var strELUniv=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_EDUCATION_LEVEL&quot;,&quot;University&quot;);
	var strJSFarmer=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Farmer&quot;);
	var strJSHousewife=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Housewife&quot;);
	var strJSNotWork=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Not Working&quot;);
	var strJSPrivSect=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Private Sector&quot;);
	var strJSPubEmp=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Public Employee&quot;);
	var strJSRetired=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Retired&quot;);
	var strJSSelfEmp=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Self Employed&quot;);
	var strJSShopkeep=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Shopkeeper&quot;);
	var strJSStudent=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_JOB_STATUS&quot;,&quot;Student&quot;);
	var strFemale=App.InvokeMethod(&quot;LookupValue&quot;,&quot;GENDER&quot;,&quot;Female&quot;);
	var strMale=App.InvokeMethod(&quot;LookupValue&quot;,&quot;GENDER&quot;,&quot;Male&quot;);
	var strUnknown=App.InvokeMethod(&quot;LookupValue&quot;,&quot;GENDER&quot;,&quot;Unknown&quot;);
	var strAttorney=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_APPLICATION_INFO&quot;,&quot;Attorney&quot;);
	var strCurator=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_APPLICATION_INFO&quot;,&quot;Curator&quot;);
	var strURL=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
	getAccountInfo(AccountId, AccountInfo);
	var DocumentType=AccountInfo.GetProperty(&quot;DocType&quot;);
	var Sector=AccountInfo.GetProperty(&quot;Sector&quot;);
	var JobStatus=AccountInfo.GetProperty(&quot;JobStatus&quot;);
	var AccntGender=AccountInfo.GetProperty(&quot;Gender&quot;);
	var EducationLv=AccountInfo.GetProperty(&quot;EducationLv&quot;);
	var URL=&quot;&quot;;
	var strId=&quot;&quot;;
	var AccntFirstName=&quot;&quot;;
	var AccntLastName=&quot;&quot;;
	var NotaryDoc=&quot;&quot;;
	var PubNotaryDoc=&quot;&quot;;
	var AppInfo=&quot;&quot;;
	var MSISDN=&quot;&quot;;
	var ICCID=&quot;&quot;;
	var IMEI=&quot;&quot;;
	var sDonorOperator=&quot;&quot;;
	var DelegName=&quot;&quot;;
	var DelegDate=&quot;&quot;;
	var delegName1=&quot;&quot;;
	var delegName2=&quot;&quot;;
	var contactId=&quot;&quot;;
	var conFstName=&quot;&quot;;
	var conMidName=&quot;&quot;;
	var conLstName=&quot;&quot;;
	var conJobStatus=&quot;&quot;;
	var count=&quot;&quot;;
	var dealer=&quot;&quot;;
	var Tariff=&quot;&quot;; // DG
	var shop=&quot;&quot;;
	var pin=&quot;&quot;;
	var puk=&quot;&quot;;
	var sTcId=&quot;&quot;;
	var psInputs:PropertySet=App.NewPropertySet();
	var psOutputs:PropertySet=App.NewPropertySet();
	oBC.ClearToQuery();
	oBC.SetViewMode(AllView);
	oBC.SetSearchSpec(&quot;VF Order Id&quot;,orderId);
	oBC.ExecuteQuery(ForwardOnly);
	var RecordsToDel=oBC.FirstRecord();
	while(RecordsToDel)
	{ oBC.DeleteRecord();
	  oBC.ExecuteQuery(ForwardOnly);
	  RecordsToDel=oBC.FirstRecord();
	}
	oBCOrder.ClearToQuery();
	oBCOrder.SetViewMode(AllView);
	oBCOrder.ActivateField(&quot;Account First Name&quot;);
	oBCOrder.ActivateField(&quot;Account&quot;);
	oBCOrder.ActivateField(&quot;VF Application Info&quot;);
	oBCOrder.ActivateField(&quot;VF Delegate Name&quot;);
	oBCOrder.ActivateField(&quot;VF Delegation Date&quot;);
	oBCOrder.ActivateField(&quot;VF Notary Document No&quot;);
	oBCOrder.ActivateField(&quot;VF Doc Public Notary&quot;);
	oBCOrder.ActivateField(&quot;VF Dealer Code&quot;);
	oBCOrder.ActivateField(&quot;VF Shop Code&quot;);//VFTRCBU-11154
	oBCOrder.ActivateField(&quot;Contact First Name&quot;);//VFTRCBU-28133 20042016
	oBCOrder.ActivateField(&quot;Contact Last Name&quot;);//VFTRCBU-28133 20042016
	oBCOrder.ActivateField(&quot;Contact TC ID&quot;);
	oBCOrder.SetSearchSpec(&quot;Id&quot;, orderId);
	oBCOrder.ExecuteQuery(ForwardOnly);
	oBCOLI.ClearToQuery();
	oBCOLI.SetViewMode(AllView);
	oBCOLI.ActivateField(&quot;MSISDN&quot;);
	oBCOLI.ActivateField(&quot;ICCID&quot;);
	oBCOLI.ActivateField(&quot;VF IMEI&quot;);
	oBCOLI.ActivateField(&quot;Donor Operator&quot;);
	oBCOLI.ActivateField(&quot;Contact Last Name&quot;);
	oBCOLI.ActivateField(&quot;Contact Mid Name&quot;);
	oBCOLI.ActivateField(&quot;Contact First Name&quot;);
	oBCOLI.ActivateField(&quot;Parent Order Item Id&quot;);
	oBCOLI.ActivateField(&quot;Promotion Id&quot;);
	oBCOLI.ActivateField(&quot;VF Tariff Plan&quot;); // DG
	oBCOLI.ActivateField(&quot;VFTRCBU PIN&quot;);//VFTRCBU-11154
	oBCOLI.ActivateField(&quot;VFTRCBU PUK&quot;);//VFTRCBU-11154
	oBCOLI.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL AND [MSISDN] IS NOT NULL AND [MSISDN] &lt;&gt; &apos; &apos;&quot;);
	oBCOLI.ExecuteQuery(ForwardOnly);
	var isRecord=oBCOLI.FirstRecord();
	MLid=oBCOLI.GetFieldValue(&quot;Id&quot;);
	count=1;
	while(isRecord)
	{ 
	  AccntFirstName=oBCOrder.GetFieldValue(&quot;Account First Name&quot;);
	  AccntLastName=oBCOrder.GetFieldValue(&quot;Account&quot;);
	  dealer=oBCOrder.GetFieldValue(&quot;VF Dealer Code&quot;);
	  shop=oBCOrder.GetFieldValue(&quot;VF Shop Code&quot;);
	  AppInfo=oBCOrder.GetFieldValue(&quot;VF Application Info&quot;);	  
	  getContactLegalInfo(orderId,OrderSubType,ContactLegalInfo);
	  delegName1=ContactLegalInfo.GetProperty(&quot;FstName&quot;);
	  delegName2=ContactLegalInfo.GetProperty(&quot;LstName&quot;);
	  DelegDate=ContactLegalInfo.GetProperty(&quot;DelegDate&quot;)
	  NotaryDoc=ContactLegalInfo.GetProperty(&quot;VFNotaryDocumentNo&quot;);
	  PubNotaryDoc=ContactLegalInfo.GetProperty(&quot;VFDocPublicNotary&quot;);	  
	  MSISDN=oBCOLI.GetFieldValue(&quot;MSISDN&quot;);
	  ICCID=oBCOLI.GetFieldValue(&quot;ICCID&quot;);
	  sDonorOperator=oBCOLI.GetFieldValue(&quot;Donor Operator&quot;);
	  Tariff=oBCOLI.GetFieldValue(&quot;VF Tariff Plan&quot;); // DG
	  pin=oBCOLI.GetFieldValue(&quot;VFTRCBU PIN&quot;);//VFTRCBU-11154
	  puk=oBCOLI.GetFieldValue(&quot;VFTRCBU PUK&quot;);//VFTRCBU-11154
	  if(oBCOLI.GetFieldValue(&quot;Promotion Id&quot;)==&quot;&quot; || oBCOLI.GetFieldValue(&quot;Promotion Id&quot;)==null)
	  {IMEI=oBCOLI.GetFieldValue(&quot;VF IMEI&quot;);}
	  else
	  {	psInputs.SetProperty(&quot;PromoId&quot;, oBCOLI.GetFieldValue(&quot;Promotion Id&quot;));
		psInputs.SetProperty(&quot;OrderId&quot;, orderId);//VFTRCBU-22349
		GetIMEI(psInputs,psOutputs );
		IMEI = psOutputs.GetProperty(&quot;IMEI&quot;);
	  }
	  conFstName=oBCOLI.GetFieldValue(&quot;Contact First Name&quot;);
	  conMidName=oBCOLI.GetFieldValue(&quot;Contact Mid Name&quot;);
	  conLstName=oBCOLI.GetFieldValue(&quot;Contact Last Name&quot;);
	  contactId=oBCOLI.GetFieldValue(&quot;Contact Id&quot;);
	  getBAInfo(oBCOLI.GetFieldValue(&quot;Billing Account Id&quot;),BAInfo);
	  //FCARRIL-JIRA 10518
	  if (MarketClass==strConsClass){
	  	psInputs.SetProperty(&quot;MLid&quot;, MLid);
	  	psInputs.SetProperty(&quot;OrderId&quot;,orderId); //FC
	  	getOLIInfoCBU(psInputs, OLIInfo); 	
	  }
	  else{
	  	getOLIInfo(MLid, OLIInfo); 
	  }
	  //End - FCARRIL
	  getContactInfo(contactId,AccountInfo,ContactInfo);
	  oBC.NewRecord(NewAfter);
	  oBC.SetFieldValue(&quot;VF Barcode&quot;,orderId);
	  //oBC.SetFieldValue(&quot;VFTRCBU Barcode2&quot;,&quot;BRY06-&quot;+orderId); //PSANTOS VFTRCBU-35225 - Changed to BRY07
	  oBC.SetFieldValue(&quot;VFTRCBU Barcode2&quot;,&quot;BRY07-&quot;+orderId);
	  oBC.SetFieldValue(&quot;VF Order Id&quot;,orderId);
	  oBC.SetFieldValue(&quot;VF To Cust Name&quot;,AccountInfo.GetProperty(&quot;AccntFirstName&quot;));
	  oBC.SetFieldValue(&quot;VF ICCID&quot;,ICCID);
	  oBC.SetFieldValue(&quot;VF MSISDN&quot;,MSISDN);
	  oBC.SetFieldValue(&quot;VF Orig Shop Cd&quot;,dealer);
	  oBC.SetFieldValue(&quot;VF TX01&quot;,AccountInfo.GetProperty(&quot;Name&quot;));
	  oBC.SetFieldValue(&quot;VF TX02&quot;,AccountInfo.GetProperty(&quot;MernFatherName&quot;));
	  oBC.SetFieldValue(&quot;VF TX03&quot;,AccountInfo.GetProperty(&quot;BirthPlace&quot;));
	  oBC.SetFieldValue(&quot;VF TX04&quot;,AccountInfo.GetProperty(&quot;BirthDate&quot;));
	  oBC.SetFieldValue(&quot;VF TX05&quot;,AccountInfo.GetProperty(&quot;Job&quot;));
	  oBC.SetFieldValue(&quot;VF TX06&quot;,AccountInfo.GetProperty(&quot;Salary&quot;));
	  oBC.SetFieldValue(&quot;VF TX07&quot;,AccountInfo.GetProperty(&quot;DocNumber&quot;) + &quot; / &quot; + AccountInfo.GetProperty(&quot;SeqNo&quot;));
	  oBC.SetFieldValue(&quot;VF TX08&quot;,AccountInfo.GetProperty(&quot;TCId&quot;));
	  oBC.SetFieldValue(&quot;VF TX09&quot;,AccountInfo.GetProperty(&quot;MotherMaidName&quot;));
	  if(AccountInfo.GetProperty(&quot;CellNo&quot;)!=&quot;&quot;)
		oBC.SetFieldValue(&quot;VF TX10&quot;,AccountInfo.GetProperty(&quot;CellNo&quot;));
	  if(AccountInfo.GetProperty(&quot;MainPhoneNr&quot;))
		oBC.SetFieldValue(&quot;VF TX11&quot;,AccountInfo.GetProperty(&quot;MainPhoneNr&quot;));
	  oBC.SetFieldValue(&quot;VF TX12&quot;,AccountInfo.GetProperty(&quot;Address&quot;));
	  oBC.SetFieldValue(&quot;VF TX13&quot;,AccountInfo.GetProperty(&quot;ApartmentNr&quot;));
	  oBC.SetFieldValue(&quot;VF TX14&quot;,AccountInfo.GetProperty(&quot;District&quot;));
	  oBC.SetFieldValue(&quot;VF TX15&quot;,AccountInfo.GetProperty(&quot;City&quot;));
	  oBC.SetFieldValue(&quot;VF TX16&quot;,AccountInfo.GetProperty(&quot;ZIP&quot;));
	  oBC.SetFieldValue(&quot;VF TX17&quot;,AccountInfo.GetProperty(&quot;Province&quot;)); //DGUERREIRO
	  oBC.SetFieldValue(&quot;VF TX18&quot;,delegName1);
	  oBC.SetFieldValue(&quot;VF TX19&quot;,delegName2);
	  oBC.SetFieldValue(&quot;VF TX20&quot;,DelegDate);
	  oBC.SetFieldValue(&quot;VF TX21&quot;,NotaryDoc);
	  oBC.SetFieldValue(&quot;VF TX22&quot;,PubNotaryDoc);
	  oBC.SetFieldValue(&quot;VF TX23&quot;,OLIInfo.GetProperty(&quot;BrandModel&quot;));
	  oBC.SetFieldValue(&quot;VF TX24&quot;,IMEI);
	  oBC.SetFieldValue(&quot;VF TX25&quot;,OLIInfo.GetProperty(&quot;Campaign&quot;));
	  sTcId=ContactInfo.GetProperty(&quot;TCID&quot;);
	  if(contactId == &quot;&quot; || contactId == null || contactId == &apos;No Match Row Id&apos;)
	  {conFstName=oBCOrder.GetFieldValue(&quot;Contact First Name&quot;); conLstName=oBCOrder.GetFieldValue(&quot;Contact Last Name&quot;); sTcId=oBCOrder.GetFieldValue(&quot;Contact TC ID&quot;);}
	  oBC.SetFieldValue(&quot;VF TX26&quot;,conFstName);
	  oBC.SetFieldValue(&quot;VF TX27&quot;,conLstName);
	  oBC.SetFieldValue(&quot;VF TX28&quot;,ContactInfo.GetProperty(&quot;BirthPlace&quot;));
	  oBC.SetFieldValue(&quot;VF TX29&quot;,ContactInfo.GetProperty(&quot;BirthDate&quot;));
	  oBC.SetFieldValue(&quot;VF TX30&quot;,sTcId);
	  oBC.SetFieldValue(&quot;VF TX31&quot;,ContactInfo.GetProperty(&quot;Job&quot;));
	  oBC.SetFieldValue(&quot;VF TX32&quot;,Tariff);   //DG
	  oBC.SetFieldValue(&quot;VF TX33&quot;,AccountInfo.GetProperty(&quot;MainEmail&quot;));
	  oBC.SetFieldValue(&quot;VF TX41&quot;,conMidName);
	  oBC.SetFieldValue(&quot;VF TX51&quot;,sDonorOperator);
	  oBC.SetFieldValue(&quot;VF TX81&quot;,shop); //VFTRCBU-11154
	  oBC.SetFieldValue(&quot;VF TX82&quot;,pin+&quot; / &quot;+puk); //VFTRCBU-11154
	  oBC.SetFieldValue(&quot;VF TX83&quot;,BAInfo.GetProperty(&quot;MediaType&quot;) ); //VFTRCBU-11154
	  oBC.SetFieldValue(&quot;VF TX84&quot;,BAInfo.GetProperty(&quot;BillCycle&quot;) ); //VFTRCBU-11154
	  if(EducationLv==strELPrSchool)//EDUCATION LEVEL
		oBC.SetFieldValue(&quot;VF CB01&quot;,&quot;X&quot;);
	  else if(EducationLv==strELHighSchool)
		oBC.SetFieldValue(&quot;VF CB02&quot;,&quot;X&quot;);
	  else if(EducationLv==strELUniv)
		oBC.SetFieldValue(&quot;VF CB03&quot;,&quot;X&quot;);
	  else if(EducationLv==strELMasterDeg)
		oBC.SetFieldValue(&quot;VF CB04&quot;,&quot;X&quot;);
	  if(JobStatus==strJSPrivSect)	//JOB STATUS
		oBC.SetFieldValue(&quot;VF CB05&quot;,&quot;X&quot;);
	  else if(JobStatus==strJSSelfEmp) //FC - JIRA 10515
		oBC.SetFieldValue(&quot;VF CB06&quot;,&quot;X&quot;);
	  else if(JobStatus==strJSPubEmp)
		oBC.SetFieldValue(&quot;VF CB07&quot;,&quot;X&quot;);
	  else if(JobStatus==strJSRetired)
		oBC.SetFieldValue(&quot;VF CB08&quot;,&quot;X&quot;);
	  else if(JobStatus==strJSStudent)
		oBC.SetFieldValue(&quot;VF CB09&quot;,&quot;X&quot;);
	  else if(JobStatus==strJSHousewife)
		oBC.SetFieldValue(&quot;VF CB10&quot;,&quot;X&quot;);
	  else if(JobStatus==strJSFarmer)
		oBC.SetFieldValue(&quot;VF CB11&quot;,&quot;X&quot;);
	  else if(JobStatus == strJSShopkeep)
		oBC.SetFieldValue(&quot;VF CB12&quot;,&quot;X&quot;);
	  else if(JobStatus==strJSNotWork)
		oBC.SetFieldValue(&quot;VF CB13&quot;,&quot;X&quot;);			
	  if(AccntGender==strFemale)  //GENDER
		oBC.SetFieldValue(&quot;VF CB14&quot;,&quot;X&quot;);
	  else if(AccntGender==strMale)
		oBC.SetFieldValue(&quot;VF CB15&quot;,&quot;X&quot;);
	  if(DocumentType == strIdentityCard || DocumentType == strIdentityCardCBU)	//DOCUMENT TYPE - VFTRCBU-27001
		oBC.SetFieldValue(&quot;VF CB16&quot;,&quot;X&quot;);
	  else if(DocumentType==strPassport)
		oBC.SetFieldValue(&quot;VF CB17&quot;,&quot;X&quot;);
	  else if(DocumentType==strDriverLic)
		oBC.SetFieldValue(&quot;VF CB18&quot;,&quot;X&quot;);
	  else
		oBC.SetFieldValue(&quot;VF CB19&quot;,&quot;X&quot;);
	  if(AppInfo==&quot;&quot;) //APPLICATION INFO
		oBC.SetFieldValue(&quot;VF CB20&quot;,&quot;X&quot;);
	  else if(AppInfo==strAttorney)
		oBC.SetFieldValue(&quot;VF CB21&quot;,&quot;X&quot;);
	  else if(AppInfo==strCurator)
		oBC.SetFieldValue(&quot;VF CB22&quot;,&quot;X&quot;);			
	  if(orderRsn==&quot;&quot;) //REASON
		oBC.SetFieldValue(&quot;VF CB23&quot;,&quot;X&quot;);
	  else if(orderRsn==strRsnTranfser)
		oBC.SetFieldValue(&quot;VF CB24&quot;,&quot;X&quot;);			
	  if(ContactInfo.GetProperty(&quot;Gender&quot;)==strFemale) //CONTACT GENDER
		oBC.SetFieldValue(&quot;VF CB25&quot;,&quot;X&quot;);
	  else if(ContactInfo.GetProperty(&quot;Gender&quot;)==strMale)
		oBC.SetFieldValue(&quot;VF CB26&quot;,&quot;X&quot;);			
	  conJobStatus=ContactInfo.GetProperty(&quot;JobStatus&quot;);
	  if(conJobStatus==strJSPrivSect)	//CONTACT JOB STATUS
		oBC.SetFieldValue(&quot;VF CB27&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSSelfEmp)
		oBC.SetFieldValue(&quot;VF CB28&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSPubEmp)
		oBC.SetFieldValue(&quot;VF CB29&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSRetired)
		oBC.SetFieldValue(&quot;VF CB30&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSStudent)
		oBC.SetFieldValue(&quot;VF CB31&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSHousewife)
		oBC.SetFieldValue(&quot;VF CB32&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSFarmer)
		oBC.SetFieldValue(&quot;VF CB33&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSShopkeep)
		oBC.SetFieldValue(&quot;VF CB34&quot;,&quot;X&quot;);
	  else if(conJobStatus==strJSNotWork)
		oBC.SetFieldValue(&quot;VF CB35&quot;,&quot;X&quot;);			
	  if(OLIInfo.GetProperty(&quot;1111&quot;)==&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB36&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;1110&quot;)==&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB37&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;1128&quot;)!=&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB38&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;1133&quot;)==&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB39&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;PhoneDirectory&quot;)==&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB40&quot;,&quot;X&quot;);
	  if(BAInfo.GetProperty(&quot;MediaType&quot;)==strBMTEmail)
		oBC.SetFieldValue(&quot;VF CB41&quot;,&quot;X&quot;);
	  if(BAInfo.GetProperty(&quot;MediaType&quot;)!=strBMTMail)
		oBC.SetFieldValue(&quot;VF CB43&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;1103&quot;)==&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB42&quot;,&quot;X&quot;);
	  if(BAInfo.GetProperty(&quot;BillType&quot;)==strBTDetailed)
		oBC.SetFieldValue(&quot;VF CB44&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;1129&quot;)==&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB45&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;1132&quot;)==&quot;Y&quot;)
		oBC.SetFieldValue(&quot;VF CB46&quot;,&quot;X&quot;);
	  //JIRA 11074
	  if(OLIInfo.GetProperty(&quot;71014&quot;)==&quot;Y&quot;)
	  	oBC.SetFieldValue(&quot;VF TX61&quot;,&quot;X&quot;);
	  if(OLIInfo.GetProperty(&quot;71021&quot;)==&quot;Y&quot;)
	  	oBC.SetFieldValue(&quot;VF TX71&quot;,&quot;X&quot;);
	  //VFTRCBU-32822	
	  if(OLIInfo.GetProperty(&quot;71000&quot;)==&quot;Y&quot;)
	  	oBC.SetFieldValue(&quot;VF TX88&quot;,&quot;X&quot;);		  		  	
	  oBC.WriteRecord();
	  if ( count==1)
		strId=oBC.GetFieldValue(&quot;Id&quot;);
	  count=count+1;
	  isRecord=oBCOLI.NextRecord();
	}	
	
	Inputs.SetProperty(&quot;strId&quot;, strId);
	Outputs.SetProperty(&quot;strId&quot;, strId); //JMARQUES
	
	if (sInvokedFromModify != &quot;Y&quot;){ //JMARQUES
		VodafoneBR_Ext(Inputs,Outputs);	
	}
	
	GetHSPromotionInfo(Inputs,Outputs);	  //JMARQUES
			
  }
  finally
  {oBCOLI=null;
	oBCOrder=null;
	oBOOrder=null;
	oBC=null;
	oBO=null;
	ContactInfo=null;
	ContactLegalInfo=null;
	AccountInfo=null;
	BAInfo=null;
	OLIInfo=null;		
	App=null;}
}"
			   SEQUENCE="29"
			   UPDATED="12/05/2016 17:15:31"
			   UPDATED_BY="PSANTOS"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VodafoneBR_Ext"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VodafoneBR_Ext(Inputs, Outputs)
{
  try
  {
	var oApp = TheApplication();
	var BS		: Service	 = oApp.GetService(&quot;VF TRK Utilities&quot;);
	var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
	var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
	var URL = &quot;&quot;;
	var strId = &quot;&quot;;
	var BillingAccId = Inputs.GetProperty(&quot;BillingAccId&quot;);
	var oBS;
	var oBS_Inputs, oBS_Outputs, sURL;
	var sComInvoice = &quot;&quot;;
	var oBO : BusObject= oApp.GetBusObject(&quot;VF Online Form&quot;);
	var oBC : BusComp= oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		
	var bo  : BusObject = TheApplication().GetBusObject(&quot;Billing Account&quot;);
	var bc1 : BusComp = bo.GetBusComp(&quot;Billing Account&quot;);
	var bc2 : BusComp= bo.GetBusComp(&quot;Com Invoice Profile&quot;);
	//var sBillingAccountId = Inputs.GetProperty(&quot;BillingAccId&quot;);
	var mailorder = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_PAYMENT_TYPE&quot;,&quot;Credit&quot;);	
	
	
	bc1.ClearToQuery(); 
	bc1.SetViewMode(AllView);
	bc1.SetSearchSpec (&quot;Id&quot;, BillingAccId ); 
	bc1.ExecuteQuery(ForwardOnly); 
			
	if(bc1.FirstRecord())
	{
	  bc2.ClearToQuery(); 
	  bc2.SetViewMode(AllView);
	  bc2.ActivateField(&quot;Payment Method&quot;);				
	  bc2.SetSearchSpec (&quot;Payment Method&quot;, mailorder); 
	  bc2.ExecuteQuery(ForwardOnly); 
				
	  if(bc2.FirstRecord())
	  {
		sComInvoice = bc2.GetFieldValue(&quot;Id&quot;);	
	  }
	}

    strId = Inputs.GetProperty(&quot;strId&quot;);

	Inputs.SetProperty(&quot;Name&quot;,&quot;CBU_VODAFONE_BR_O_N&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;,Inputs,Outputs);
	var strURLPart1=Outputs.GetProperty(&quot;URLPart1&quot;);
	var strURLPart2=Outputs.GetProperty(&quot;URLPart2&quot;);
	var strURLPart3=Outputs.GetProperty(&quot;URLPart3&quot;);
	URL = strURLPart1+strURL+strURLPart2+&quot;ROW_ID=&quot;+strId+strURLPart3;
	oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
	Outputs.SetProperty(&quot;URL1&quot;,URL);

	Inputs.SetProperty(&quot;Name&quot;,&quot;CBU_Multiple_Activations_Document&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;,Inputs,Outputs);
	strURLPart1=Outputs.GetProperty(&quot;URLPart1&quot;);
	strURLPart2=Outputs.GetProperty(&quot;URLPart2&quot;);
	strURLPart3=Outputs.GetProperty(&quot;URLPart3&quot;);
	URL=strURLPart1+strURL+strURLPart2+&quot;ORDER_ID=&quot;+orderId+strURLPart3;
	Outputs.SetProperty(&quot;URL2&quot;,URL);

	Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_Summary_Form&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
	strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
	strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
	strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
	URL = strURLPart1 + strURL + strURLPart2 + &quot;ORDER_ID=&quot;+ orderId + strURLPart3; //VFTRCBU-11154 
	Outputs.SetProperty(&quot;URL3&quot;, URL);
		
	Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_MNP_Activation&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
	strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
	strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
	strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
	URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
	Outputs.SetProperty(&quot;URL4&quot;, URL);

	Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_MNP_TA&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
	strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
	strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
	strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
	URL = strURLPart1 + strURL + strURLPart2 + orderId + strURLPart3;
	Outputs.SetProperty(&quot;URL5&quot;, URL);
	
	Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_MNP_Cancelation&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
	strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
	strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
	strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
	URL = strURLPart1 + strURL + strURLPart2 + orderId + strURLPart3;
	Outputs.SetProperty(&quot;URL6&quot;, URL);
	
	Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_VODAFONE_BR_O_N_KR&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
	strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
	strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
	strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
	URL = strURLPart1 + strURL + strURLPart2 + strURLPart3;
	Outputs.SetProperty(&quot;URL7&quot;, URL);
	
	Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_MNP_Activation_KR&quot;);
	BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
	strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
	strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
	strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
	URL = strURLPart1 + strURL + strURLPart2 + strURLPart3;
	Outputs.SetProperty(&quot;URL8&quot;, URL);
	
	
	if (sComInvoice != &quot;&quot;)
	{
		oBS = oApp.GetService (&quot;Workflow Process Manager&quot;);			
		oBS_Inputs  = oApp.NewPropertySet();
		oBS_Outputs = oApp.NewPropertySet();
				
		oBS_Inputs.SetProperty(&quot;CIPRowId&quot;, sComInvoice);
		oBS_Inputs.SetProperty(&quot;OrderId&quot;, orderId); // IMARTINS VFTRCBU-27157 29032016
		oBS_Inputs.SetProperty(&quot;ProcessName&quot;, &quot;VF CC Form Generation WF&quot;);
		oBS.InvokeMethod(&quot;RunProcess&quot;, oBS_Inputs, oBS_Outputs);
		
		//Inputs.SetProperty(&quot;Name&quot;, &quot;CBU_Automatic_CC_Payment&quot;);
		//BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
		//strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
		//strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
		//strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
		URL = oBS_Outputs.GetProperty(&quot;URL&quot;);
		
	//	strId = oBC.GetFieldValue(&quot;Id&quot;);

	//	URL = strURLPart1 + strURL + strURLPart2 + &quot;ROW_ID=&quot;+ strId + strURLPart3;
		Outputs.SetProperty(&quot;URL9&quot;, URL);
	}
	//&quot;URL9&quot; = CBU_Automatic_CC_Payment

		
	}
	finally
	{
		BS   = null;
		oApp = null;	
	}
}"
			   SEQUENCE="30"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="04/08/2015 17:10:37"
			   CREATED_BY="FCABRAL">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VodafoneKR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VodafoneKR(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var oBO : BusObject = oApp.GetBusObject(&quot;VF Online Form&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Online Forms BC&quot;);
		var oBOOrder : BusObject = oApp.GetBusObject(&quot;Order Entry (Sales)&quot;);
		var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var oBCOLI : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var orderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var MLid = Inputs.GetProperty(&quot;SIM&quot;);
		var SIMPRM= Inputs.GetProperty(&quot;PRMSIM&quot;);
		var MarketClass = Inputs.GetProperty(&quot;MarketClass&quot;);
		var orderRsn = Inputs.GetProperty(&quot;OrderReason&quot;);
		var AccountInfo : PropertySet = oApp.NewPropertySet();
		var BAInfo : PropertySet = oApp.NewPropertySet();
		var OLIInfo : PropertySet = oApp.NewPropertySet();
		var DocVersion = &quot;06&quot;;
		var strBsnsClass = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);
		var strConsClass = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;);
		var strRsnTranfser = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
		var strRsnNew = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;225&quot;);
		var strTariff = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var strBMTEmail = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_MEDIA_TYPE&quot;,&quot;102&quot;);
		var strBMTMail = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_MEDIA_TYPE&quot;,&quot;104&quot;);
		var strBTDetailed = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_TYPE&quot;,&quot;100&quot;);
		var strPSTN1 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;PSTN_COST&quot;,&quot;PSTN1&quot;);
		var strPSTN2 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;PSTN_COST&quot;,&quot;PSTN2&quot;);
		var strPSTN3 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;PSTN_COST&quot;,&quot;PSTN3&quot;);
		var strPSTN4 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;PSTN_COST&quot;,&quot;PSTN4&quot;);
		var strInternet1 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;INTERNET_COST&quot;,&quot;IntCost1&quot;);
		var strInternet2 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;INTERNET_COST&quot;,&quot;IntCost2&quot;);
		var strPassport = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type1&quot;);
		var strIdentityCard = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type2&quot;);
		var strDriverLic = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;DOC_TYPE&quot;,&quot;Type3&quot;);
		var strWC13 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;WORKER_COUNT&quot;,&quot;WCount1&quot;);
		var strWC410 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;WORKER_COUNT&quot;,&quot;WCount2&quot;);
		var strWC1150 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;WORKER_COUNT&quot;,&quot;WCount3&quot;);
		var strWC51100 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;WORKER_COUNT&quot;,&quot;WCount4&quot;);
		var strWC101250 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;WORKER_COUNT&quot;,&quot;WCount5&quot;);
		var strWC250 = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;WORKER_COUNT&quot;,&quot;WCount6&quot;);
		var strURL = oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BI_PUBLISHER&quot;,&quot;BI_PUBLISHER&quot;);
		getAccountInfo(AccountId, AccountInfo);
		var workerCount = AccountInfo.GetProperty(&quot;WorkerCount&quot;);
		var MonthlyPSTN = AccountInfo.GetProperty(&quot;MonthlyPSTN&quot;);
		var InternetCost = AccountInfo.GetProperty(&quot;InternetCost&quot;);
		var DocumentType = AccountInfo.GetProperty(&quot;DocType&quot;);
		var URL = &quot;&quot;;
		var strId = &quot;&quot;;
		var AccntFirstName = &quot;&quot;;
		var AccntLastName = &quot;&quot;;
		var DelegName = &quot;&quot;;
		var DelegDate = &quot;&quot;;
		var NotaryDoc = &quot;&quot;;
		var PubNotaryDoc = &quot;&quot;;
		var delegName1 = &quot;&quot;;
		var delegName2 = &quot;&quot;;
		var MSISDN = &quot;&quot;;
		var IMEI = &quot;&quot;;
		var ICCID = &quot;&quot;;
		with(oBCOrder)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account First Name&quot;);
			ActivateField(&quot;Account&quot;);
			ActivateField(&quot;VF Delegate Name&quot;);
			ActivateField(&quot;VF Delegation Date&quot;);
			ActivateField(&quot;VF Notary Document No&quot;);
			ActivateField(&quot;VF Doc Public Notary&quot;);
			SetSearchSpec(&quot;Id&quot;, orderId);
			//Venkata 14/05/2012: Moved child query as per oracle review31-Start */
			oBCOLI.ClearToQuery();
			oBCOLI.SetViewMode(AllView);
			oBCOLI.ActivateField(&quot;MSISDN&quot;);
			oBCOLI.ActivateField(&quot;VF IMEI&quot;);
			oBCOLI.ActivateField(&quot;ICCID&quot;);
			if(MLid != &quot;&quot; &amp;&amp; MLid != null)
				oBCOLI.SetSearchExpr(&quot;[Id] = &apos;&quot;+MLid+&quot;&apos;&quot;);
			else
				oBCOLI.SetSearchExpr(&quot;[MSISDN] = &apos;&quot;+SIMPRM+&quot;&apos;&quot;);

			//Venkata 14/05/2012: Moved child query as per oracle review31-End */
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				MLid = oBCOLI.GetFieldValue(&quot;Id&quot;);
				AccntFirstName = GetFieldValue(&quot;Account First Name&quot;);
				AccntLastName = GetFieldValue(&quot;Account&quot;);
				DelegName = GetFieldValue(&quot;VF Delegate Name&quot;);
				DelegDate = GetFieldValue(&quot;VF Delegation Date&quot;);
				NotaryDoc = GetFieldValue(&quot;VF Notary Document No&quot;);
				PubNotaryDoc = GetFieldValue(&quot;VF Doc Public Notary&quot;);
				var lstId = ToNumber(DelegName.lastIndexOf(&quot; &quot;));
				if(lstId &gt; 0)
				{
					delegName1 = DelegName.substring(0, lstId+1);
					delegName2 = DelegName.substring(lstId+1);
				}
				else
					delegName1 = DelegName;
				
				with(oBCOLI)
				{

					if(FirstRecord())
					{
						MSISDN = GetFieldValue(&quot;MSISDN&quot;);
						IMEI = GetFieldValue(&quot;VF IMEI&quot;);
						ICCID = GetFieldValue(&quot;ICCID&quot;);
						getBAInfo(GetFieldValue(&quot;Billing Account Id&quot;), BAInfo);
						getOLIInfo(MLid, OLIInfo);
					}
				}
			}
		}
		with(oBC)
		{
			NewRecord(NewAfter);
			SetFieldValue(&quot;VF Barcode&quot;, &quot;KRM&quot;+DocVersion+&quot;-&quot;+AccountInfo.GetProperty(&quot;CustomerCode&quot;));
			SetFieldValue(&quot;VF To Cust Name&quot;, AccountInfo.GetProperty(&quot;Name&quot;));
			SetFieldValue(&quot;VF MSISDN&quot;, &quot;0&quot; + MSISDN);
			SetFieldValue(&quot;VF ICCID&quot;, ICCID);
			SetFieldValue(&quot;VF TX01&quot;, AccountInfo.GetProperty(&quot;CommRegNo&quot;));
			SetFieldValue(&quot;VF TX02&quot;, AccountInfo.GetProperty(&quot;ActStartDt&quot;));
			SetFieldValue(&quot;VF TX03&quot;, AccountInfo.GetProperty(&quot;TaxOffice&quot;));
			SetFieldValue(&quot;VF TX04&quot;, AccountInfo.GetProperty(&quot;TaxNumber&quot;));
			SetFieldValue(&quot;VF TX05&quot;, AccountInfo.GetProperty(&quot;YearlyRev&quot;));
			SetFieldValue(&quot;VF TX06&quot;, AccountInfo.GetProperty(&quot;Sector&quot;));
			SetFieldValue(&quot;VF TX07&quot;, AccntFirstName);
			SetFieldValue(&quot;VF TX08&quot;, AccntLastName);
			SetFieldValue(&quot;VF TX09&quot;, AccountInfo.GetProperty(&quot;DocNumber&quot;));
			SetFieldValue(&quot;VF TX10&quot;, AccountInfo.GetProperty(&quot;TCId&quot;));
			SetFieldValue(&quot;VF TX11&quot;, AccountInfo.GetProperty(&quot;BirthDate&quot;));
			SetFieldValue(&quot;VF TX12&quot;, AccountInfo.GetProperty(&quot;MotherMaidName&quot;));
			SetFieldValue(&quot;VF TX13&quot;, OLIInfo.GetProperty(&quot;TariffPlan&quot;));
			if(AccountInfo.GetProperty(&quot;MainPhoneNr&quot;) != &quot;&quot;)
				SetFieldValue(&quot;VF TX14&quot;, AccountInfo.GetProperty(&quot;MainPhoneNr&quot;).substring(1));
			if(AccountInfo.GetProperty(&quot;MainFaxNr&quot;) != &quot;&quot;)
				SetFieldValue(&quot;VF TX15&quot;, AccountInfo.GetProperty(&quot;MainFaxNr&quot;).substring(1));
			SetFieldValue(&quot;VF TX16&quot;, AccountInfo.GetProperty(&quot;MainEmail&quot;));
			SetFieldValue(&quot;VF TX17&quot;, AccountInfo.GetProperty(&quot;Address&quot;));
			SetFieldValue(&quot;VF TX18&quot;, AccountInfo.GetProperty(&quot;ApartmentNr&quot;));
			SetFieldValue(&quot;VF TX19&quot;, AccountInfo.GetProperty(&quot;District&quot;));
			SetFieldValue(&quot;VF TX20&quot;, AccountInfo.GetProperty(&quot;ZIP&quot;));
			SetFieldValue(&quot;VF TX21&quot;, AccountInfo.GetProperty(&quot;Province&quot;));
			SetFieldValue(&quot;VF TX22&quot;, delegName1);
			SetFieldValue(&quot;VF TX23&quot;, delegName2);
			SetFieldValue(&quot;VF TX24&quot;, DelegDate);
			SetFieldValue(&quot;VF TX25&quot;, NotaryDoc);
			SetFieldValue(&quot;VF TX26&quot;, PubNotaryDoc);
			SetFieldValue(&quot;VF TX27&quot;, OLIInfo.GetProperty(&quot;BrandModel&quot;));
			SetFieldValue(&quot;VF TX28&quot;, IMEI);
			SetFieldValue(&quot;VF TX30&quot;, OLIInfo.GetProperty(&quot;Campaign&quot;));
			SetFieldValue(&quot;VF TX31&quot;, AccountInfo.GetProperty(&quot;ContactFirstName&quot;));
			SetFieldValue(&quot;VF TX32&quot;, AccountInfo.GetProperty(&quot;ContactLastName&quot;));
			if(AccountInfo.GetProperty(&quot;TempPhoneNr&quot;) != &quot;&quot;)
				SetFieldValue(&quot;VF TX33&quot;, AccountInfo.GetProperty(&quot;TempPhoneNr&quot;).substring(1));
			if(workerCount == strWC13)
				SetFieldValue(&quot;VF CB01&quot;, &quot;X&quot;);
			else if(workerCount == strWC410)
				SetFieldValue(&quot;VF CB02&quot;, &quot;X&quot;);
			else if(workerCount == strWC1150)
				SetFieldValue(&quot;VF CB03&quot;, &quot;X&quot;);
			else if(workerCount == strWC51100)
				SetFieldValue(&quot;VF CB04&quot;, &quot;X&quot;);
			else if(workerCount == strWC101250)
				SetFieldValue(&quot;VF CB05&quot;, &quot;X&quot;);
			else if(workerCount == strWC250)
				SetFieldValue(&quot;VF CB06&quot;, &quot;X&quot;);
			if(MonthlyPSTN == strPSTN1)
				SetFieldValue(&quot;VF CB07&quot;, &quot;X&quot;);
			else if(MonthlyPSTN == strPSTN2)
				SetFieldValue(&quot;VF CB08&quot;, &quot;X&quot;);
			else if(MonthlyPSTN == strPSTN3)
				SetFieldValue(&quot;VF CB09&quot;, &quot;X&quot;);
			else if(MonthlyPSTN == strPSTN4)
				SetFieldValue(&quot;VF CB10&quot;, &quot;X&quot;);
			if(InternetCost == strInternet1)
				SetFieldValue(&quot;VF CB11&quot;, &quot;X&quot;);
			else if(InternetCost == strInternet2)
				SetFieldValue(&quot;VF CB12&quot;, &quot;X&quot;);
			if(DocumentType == strPassport)
				SetFieldValue(&quot;VF CB14&quot;, &quot;X&quot;);
			else if(DocumentType == strIdentityCard)
				SetFieldValue(&quot;VF CB13&quot;, &quot;X&quot;);
			else if(DocumentType == strDriverLic)
				SetFieldValue(&quot;VF CB15&quot;, &quot;X&quot;);
			else
				SetFieldValue(&quot;VF CB16&quot;, &quot;X&quot;);
			if(orderRsn == strRsnNew)
				SetFieldValue(&quot;VF CB18&quot;, &quot;X&quot;);
			else if(orderRsn == strRsnTranfser)
				SetFieldValue(&quot;VF CB19&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1111&quot;) == &quot;Y&quot;)
				SetFieldValue(&quot;VF CB20&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1110&quot;) == &quot;Y&quot;)
				SetFieldValue(&quot;VF CB21&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1128&quot;) != &quot;Y&quot;)
				SetFieldValue(&quot;VF CB22&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1133&quot;) == &quot;Y&quot;)
				SetFieldValue(&quot;VF CB23&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;PhoneDirectory&quot;) == &quot;Y&quot;)
				SetFieldValue(&quot;VF CB24&quot;, &quot;X&quot;);
			if(BAInfo.GetProperty(&quot;MediaType&quot;) == strBMTEmail)
				SetFieldValue(&quot;VF CB25&quot;, &quot;X&quot;);
			if(BAInfo.GetProperty(&quot;MediaType&quot;) != strBMTMail)
				SetFieldValue(&quot;VF CB27&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1103&quot;) == &quot;Y&quot;)
				SetFieldValue(&quot;VF CB26&quot;, &quot;X&quot;);
			if(BAInfo.GetProperty(&quot;BillType&quot;) == strBTDetailed)
				SetFieldValue(&quot;VF CB28&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1129&quot;) == &quot;Y&quot;)
				SetFieldValue(&quot;VF CB29&quot;, &quot;X&quot;);
			if(OLIInfo.GetProperty(&quot;1132&quot;) == &quot;Y&quot;)
				SetFieldValue(&quot;VF CB30&quot;, &quot;X&quot;);
			WriteRecord();
			strId = GetFieldValue(&quot;Id&quot;);
			oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Inputs.SetProperty(&quot;Name&quot;, &quot;VodafoneKR&quot;);
			BS.InvokeMethod(&quot;GetUrl&quot;, Inputs, Outputs);
			var strURLPart1 = Outputs.GetProperty(&quot;URLPart1&quot;);
			var strURLPart2 = Outputs.GetProperty(&quot;URLPart2&quot;);
			var strURLPart3 = Outputs.GetProperty(&quot;URLPart3&quot;);
			URL = strURLPart1 + strURL + strURLPart2 + strId + strURLPart3;
			oApp.SetProfileAttr(&quot;olf_rwid1&quot;,strId);
			Outputs.SetProperty(&quot;URL2&quot;, URL);
		}
	}
	finally
	{
		oBCOLI = null;
		oBCOrder = null;
		oBOOrder = null;
		oBC = null;
		oBO = null;
		oApp = null;
		AccountInfo = null;
		BAInfo = null;
		OLIInfo = null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkModifyOpt"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkModifyOpt(Inputs)
{
	try
	{
		var BO :BusObject= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var BcOLI :BusComp= BO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var strActNew = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strActMod = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);   
		var strActDel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var strActEx = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var SIM = Inputs.GetProperty(&quot;SIM&quot;);
		//FCARRIL - JIRA 10518
		var MarketClass = Inputs.GetProperty(&quot;MarketClass&quot;);
		var strBsnsClass = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);
		var strConsClass = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;);
		var strTariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;); //ACAMBAS: VFTRCBU-23771
		
		var result = false;
		var iNext;
		//FCARRIL - JIRA 10518
		var scrString = &quot;&quot;;
		if (MarketClass = strConsClass){
			scrString = &quot;[Root Order Item Id] = &apos;&quot;+SIM+&quot;&apos; AND ((([Action Code] = &apos;&quot;+strActNew+&quot;&apos;&quot;+
						//ACAMBAS: VFTRCBU-23771 - Start
						//&quot; OR [Action Code] = &apos;&quot;+strActMod+&quot;&apos;&quot;+&quot;) AND (([Part Number] = &apos;71012&apos; OR [Part Number] = &apos;71013&apos;) OR [VF Tariff Plan Flag] = &apos;Y&apos;))&quot;+
						&quot; OR [Action Code] = &apos;&quot;+strActMod+&quot;&apos;) AND (([Part Number] = &apos;71012&apos; OR [Part Number] = &apos;71013&apos;) OR [VF Product Group] = &apos;&quot;+strTariff+&quot;&apos;))&quot;+
						//ACAMBAS: VFTRCBU-23771 - End
						&quot;OR ([VF Phone Directory] = &apos;Y&apos;  AND ([Action Code] = &apos;&quot;+strActEx+&quot;&apos; OR [Action Code] = &apos;&quot;+strActMod+&quot;&apos;))&quot;+
						//ACAMBAS: VFTRCBU-23771 - Start
						//&quot;OR ([VF Tariff Plan Flag] = &apos;Y&apos; AND ([Action Code] = &apos;&quot;+strActDel+&quot;&apos; OR [Action Code] = &apos;&quot;+strActNew+&quot;&apos;)))&quot;; 
						&quot;OR ([VF Product Group] = &apos;&quot;+strTariff+&quot;&apos; AND ([Action Code] = &apos;&quot;+strActDel+&quot;&apos; OR [Action Code] = &apos;&quot;+strActNew+&quot;&apos;)))&quot;; 
						//ACAMBAS: VFTRCBU-23771 - End
		}else{
		//End - FCARRIL
			scrString = &quot;[Root Order Item Id] = &apos;&quot;+SIM+&quot;&apos; AND ((([Action Code] = &apos;&quot;+strActNew+&quot;&apos;&quot;+
						//ACAMBAS: VFTRCBU-23771 - Start
						//&quot; OR [Action Code] = &apos;&quot;+strActMod+&quot;&apos;&quot;+&quot;) AND (([Part Number] = &apos;1110&apos; OR [Part Number] = &apos;1111&apos;) OR [VF Tariff Plan Flag] = &apos;Y&apos;))&quot;+
						&quot; OR [Action Code] = &apos;&quot;+strActMod+&quot;&apos;) AND (([Part Number] = &apos;1110&apos; OR [Part Number] = &apos;1111&apos;) OR [VF Product Group] = &apos;&quot;+strTariff+&quot;&apos;))&quot;+
						//ACAMBAS: VFTRCBU-23771 - End
						&quot;OR ([VF Phone Directory] = &apos;Y&apos;  AND ([Action Code] = &apos;&quot;+strActEx+&quot;&apos; OR [Action Code] = &apos;&quot;+strActMod+&quot;&apos;))&quot;+
						//ACAMBAS: VFTRCBU-23771 - Start
						//&quot;OR ([VF Tariff Plan Flag] = &apos;Y&apos; AND ([Action Code] = &apos;&quot;+strActDel+&quot;&apos; OR [Action Code] = &apos;&quot;+strActNew+&quot;&apos;)))&quot;; 
						&quot;OR ([VF Product Group] = &apos;&quot;+strTariff+&quot;&apos; AND ([Action Code] = &apos;&quot;+strActDel+&quot;&apos; OR [Action Code] = &apos;&quot;+strActNew+&quot;&apos;)))&quot;; 
						//ACAMBAS: VFTRCBU-23771 - End
		}
		with(BcOLI)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Part Number&quot;);
			//ACAMBAS: VFTRCBU-23771 - Start
			//ActivateField(&quot;VF Tariff Plan Flag&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			//ACAMBAS: VFTRCBU-23771 - End
			ActivateField(&quot;Product Translated&quot;);
			ActivateField(&quot;VF Phone Directory&quot;);
			// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
			inProp.SetProperty(&quot;SIM&quot;,SIM);
			BS.InvokeMethod(&quot;Input Validation&quot;, inProp, outProp);
			//End 
			SetSearchExpr(scrString);
			ExecuteQuery(ForwardOnly);
			iNext = FirstRecord()
			while(iNext)
			{
				//FCARRIL - JIRA 10570
				if (MarketClass = strConsClass){
					if(GetFieldValue(&quot;Part Number&quot;) == &quot;71013&quot;)
						Inputs.SetProperty(GetFieldValue(&quot;Part Number&quot;),&quot;Y&quot;);
					if(GetFieldValue(&quot;Part Number&quot;) == &quot;71012&quot; || GetFieldValue(&quot;Part Number&quot;) == &quot;71013&quot;)
					{
						Inputs.SetProperty(GetFieldValue(&quot;Part Number&quot;),&quot;Y&quot;);
						Inputs.SetProperty(&quot;Roaming&quot;,&quot;Y&quot;);
					//ACAMBAS: VFTRCBU-20549 - Start
					//} else if(GetFieldValue(&quot;VF Tariff Plan Flag&quot;) == &quot;Y&quot;)
					} else if(GetFieldValue(&quot;VF Product Group&quot;) == strTariff)
					//ACAMBAS: VFTRCBU-20549 - End
					{
						if(GetFieldValue(&quot;Action Code&quot;) == strActNew)
							Inputs.SetProperty(&quot;TariffPlan&quot;,GetFieldValue(&quot;Product Translated&quot;));
						else if(GetFieldValue(&quot;Action Code&quot;) == strActDel)
							Inputs.SetProperty(&quot;DelTariffPlan&quot;,&quot;Y&quot;);
					}
				}else{ //End - FCARRIL
					if(GetFieldValue(&quot;Part Number&quot;) == &quot;1111&quot;)
						Inputs.SetProperty(GetFieldValue(&quot;Part Number&quot;),&quot;Y&quot;);
					if(GetFieldValue(&quot;Part Number&quot;) == &quot;1110&quot; || GetFieldValue(&quot;Part Number&quot;) == &quot;1111&quot;)
					{
						Inputs.SetProperty(GetFieldValue(&quot;Part Number&quot;),&quot;Y&quot;);
						Inputs.SetProperty(&quot;Roaming&quot;,&quot;Y&quot;);
					//ACAMBAS: VFTRCBU-20549 - Start
					//} else if(GetFieldValue(&quot;VF Tariff Plan Flag&quot;) == &quot;Y&quot;)
					} else if(GetFieldValue(&quot;VF Product Group&quot;) == strTariff)
					//ACAMBAS: VFTRCBU-20549 - End
					{
						if(GetFieldValue(&quot;Action Code&quot;) == strActNew)
							Inputs.SetProperty(&quot;TariffPlan&quot;, GetFieldValue(&quot;Product Translated&quot;));
						else if(GetFieldValue(&quot;Action Code&quot;) == strActDel)
							Inputs.SetProperty(&quot;DelTariffPlan&quot;,&quot;Y&quot;);
					}
				} 		
				result = true;
				iNext = NextRecord();
			}
		}
		return(result);
	}
	finally
	{
		BcOLI = null;
		BO = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="01/15/2016 15:37:07"
			   UPDATED_BY="ACAMBAS"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkModifyOptPRM"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkModifyOptPRM(OrderId, Inputs)
{
	try
	{
		var BO :BusObject= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var BcOLI :BusComp= BO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var strActNew = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strActDel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var strActMod = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;); 
		var strActEx = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);
		var strTariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;); //ACAMBAS: VFTRCBU-23771
		var result = false;
		var iNext;
		//modified search spec for defect C_MSP00001062 04/013/2012 Udbhav IDC
		var scrString = &quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND (([Action Code] = &apos;&quot;+strActNew+&quot;&apos;&quot;+ 
						//ACAMBAS: VFTRCBU-23771 - Start
						//&quot; AND (([Part Number] = &apos;1110&apos; OR [Part Number] = &apos;1111&apos;) OR [VF Tariff Plan Flag] = &apos;Y&apos;))&quot;+ 
						&quot; AND (([Part Number] = &apos;1110&apos; OR [Part Number] = &apos;1111&apos;) OR [VF Product Group] = &apos;&quot;+strTariff+&quot;&apos;))&quot;+ 
						//ACAMBAS: VFTRCBU-23771 - End
						&quot; OR ([VF Phone Directory] = &apos;Y&apos;  AND ([Action Code] = &apos;&quot;+strActEx+&quot;&apos; OR [Action Code] = &apos;&quot;+strActMod+&quot;&apos;))&quot;+
						//ACAMBAS: VFTRCBU-23771 - Start
						//&quot; OR ([VF Tariff Plan Flag] = &apos;Y&apos; AND [Action Code] = &apos;&quot;+strActDel+&quot;&apos;))&quot;;
						&quot; OR ([VF Product Group] = &apos;&quot;+strTariff+&quot;&apos; AND [Action Code] = &apos;&quot;+strActDel+&quot;&apos;))&quot;;
						//ACAMBAS: VFTRCBU-23771 - End
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		with(BcOLI)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Part Number&quot;);
			//ACAMBAS: VFTRCBU-23771 - Start
			//ActivateField(&quot;VF Tariff Plan Flag&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			//ACAMBAS: VFTRCBU-23771 - End
			ActivateField(&quot;Product Translated&quot;);
			// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			SetSearchExpr(scrString);
			ExecuteQuery(ForwardOnly);
			iNext = FirstRecord()
			while(iNext)
			{
				if(GetFieldValue(&quot;Part Number&quot;) == &quot;1110&quot; || GetFieldValue(&quot;Part Number&quot;) == &quot;1111&quot;)
				{
					Inputs.SetProperty(GetFieldValue(&quot;Part Number&quot;),&quot;Y&quot;);
				}
				//ACAMBAS: VFTRCBU-20549 - Start
				//else if(GetFieldValue(&quot;VF Tariff Plan Flag&quot;) == &quot;Y&quot;)
				else if(GetFieldValue(&quot;VF Product Group&quot;) == strTariff)
				//ACAMBAS: VFTRCBU-20549 - End
				{
					if(GetFieldValue(&quot;Action Code&quot;) == strActNew)
						Inputs.SetProperty(&quot;TariffPlan&quot;, GetFieldValue(&quot;Product Translated&quot;));
					else if(GetFieldValue(&quot;Action Code&quot;) == strActDel)
						Inputs.SetProperty(&quot;DelTariffPlan&quot;,&quot;Y&quot;);
				}
				result = true;
				iNext = NextRecord();
			}
		}
		return(result);
	}
	finally
	{
		BcOLI = null;
		BO = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="01/15/2016 15:38:14"
			   UPDATED_BY="ACAMBAS"
			   CREATED="12/13/2011 16:18:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="formatDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function formatDate(OrderSendDate)
{
	var sDay = ToString(OrderSendDate.getDate());
	var sMonth = ToString(OrderSendDate.getMonth() + 1);
	var sYear = OrderSendDate.getYear();
	if(sDay.length &lt; 2)
		sDay = &quot;0&quot;+sDay;
	if(sMonth.length &lt; 2)
		sMonth = &quot;0&quot;+sMonth;
	sYear = ToString(ToNumber(sYear) + 1900);
	return(sDay + &quot;/&quot; + sMonth + &quot;/&quot; + sYear);
}"
			   SEQUENCE="4"
			   UPDATED="01/23/2012 13:46:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getAccountInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getAccountInfo(AccountId, psOutputs)
{
	try
	{
		var oBOAccount :BusObject= TheApplication().GetBusObject(&quot;Account&quot;);
		var oBCAccount :BusComp= oBOAccount.GetBusComp(&quot;Account&quot;);
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);	
		var ps		:PropertySet 	= TheApplication().NewPropertySet();
		var ActStartDate = &quot;&quot;;
		var ContBirthDate = &quot;&quot;;
		with(oBCAccount)
		{
			// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
			inProp.SetProperty(&quot;AccountId&quot;,AccountId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			
			ClearToQuery();
			SetViewMode(AllView);
			ps.SetProperty(&quot;Name&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Account First Name&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Commercial Reg No&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Activity Start Date&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Tax Office&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Tax Number&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Yearly Revenue&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Worker Count&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Sector&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Monthly PSTN Cost&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Internet Cost&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Document Type&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Document Number&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Education Level&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Job Status&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Job&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Monthly Salary&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Mernis Sequence Number&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Cellular Phone #&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Contact SSN&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Contact Date Of Birth&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Mother Maiden Name&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Mernis Father Name&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Mernis Birth Place&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Main Phone Number&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Main Fax Number&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Main E-Mail Address&quot;,&quot;&quot;);
			ps.SetProperty(&quot;VF Neighborhood/Village&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Street Address&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Apartment Number&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Address Num&quot;,&quot;&quot;);
			ps.SetProperty(&quot;District&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Postal Code&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Province&quot;,&quot;&quot;);
			ps.SetProperty(&quot;City&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Contact First Name&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Contact Last Name&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Temp Phone Number&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Contact M/F&quot;,&quot;&quot;);
			ps.SetProperty(&quot;Account Number&quot;,&quot;&quot;);
			oBCAccount.ActivateMultipleFields(ps);
			SetSearchSpec(&quot;Id&quot;,AccountId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				psOutputs.SetProperty(&quot;Name&quot;, GetFieldValue(&quot;Name&quot;));
				psOutputs.SetProperty(&quot;AccntFirstName&quot;, GetFieldValue(&quot;Account First Name&quot;));
				psOutputs.SetProperty(&quot;CommRegNo&quot;, GetFieldValue(&quot;VF Commercial Reg No&quot;));
				ActStartDate = GetFieldValue(&quot;VF Activity Start Date&quot;);
				if(ActStartDate != &quot;&quot;)
				{
					var ActStartDt = new Date(ActStartDate);
					ActStartDate = formatDate(ActStartDt);
				}
				psOutputs.SetProperty(&quot;ActStartDt&quot;, ActStartDate);
				psOutputs.SetProperty(&quot;TaxOffice&quot;, GetFieldValue(&quot;VF Tax Office&quot;));
				psOutputs.SetProperty(&quot;TaxNumber&quot;, GetFieldValue(&quot;VF Tax Number&quot;));
				psOutputs.SetProperty(&quot;YearlyRev&quot;, GetFieldValue(&quot;VF Yearly Revenue&quot;));//
				psOutputs.SetProperty(&quot;WorkerCount&quot;, GetFieldValue(&quot;VF Worker Count&quot;));//
				psOutputs.SetProperty(&quot;Sector&quot;, GetFieldValue(&quot;VF Sector&quot;));//
				psOutputs.SetProperty(&quot;MonthlyPSTN&quot;, GetFieldValue(&quot;VF Monthly PSTN Cost&quot;));//
				psOutputs.SetProperty(&quot;InternetCost&quot;, GetFieldValue(&quot;VF Internet Cost&quot;));//
				psOutputs.SetProperty(&quot;DocType&quot;, GetFieldValue(&quot;VF Document Type&quot;));
				psOutputs.SetProperty(&quot;DocNumber&quot;, GetFieldValue(&quot;VF Document Number&quot;));
				psOutputs.SetProperty(&quot;EducationLv&quot;, GetFieldValue(&quot;VF Education Level&quot;));//
				psOutputs.SetProperty(&quot;JobStatus&quot;, GetFieldValue(&quot;VF Job Status&quot;));//
				psOutputs.SetProperty(&quot;Job&quot;, GetFieldValue(&quot;VF Job&quot;));//
				psOutputs.SetProperty(&quot;Salary&quot;, GetFieldValue(&quot;VF Monthly Salary&quot;));//
				psOutputs.SetProperty(&quot;SeqNo&quot;, GetFieldValue(&quot;VF Mernis Sequence Number&quot;));//
				psOutputs.SetProperty(&quot;CellNo&quot;, GetFieldValue(&quot;Cellular Phone #&quot;));//
				psOutputs.SetProperty(&quot;TCId&quot;, GetFieldValue(&quot;Contact SSN&quot;));
				ContBirthDate = GetFieldValue(&quot;Contact Date Of Birth&quot;);
				if(ContBirthDate != &quot;&quot;)
				{
					var BirthDate = new Date(ContBirthDate);
					ContBirthDate = formatDate(BirthDate);
				}
				psOutputs.SetProperty(&quot;BirthDate&quot;, ContBirthDate);
				psOutputs.SetProperty(&quot;MotherMaidName&quot;, GetFieldValue(&quot;VF Mother Maiden Name&quot;));//
				psOutputs.SetProperty(&quot;MernFatherName&quot;, GetFieldValue(&quot;VF Mernis Father Name&quot;));
				psOutputs.SetProperty(&quot;BirthPlace&quot;, GetFieldValue(&quot;VF Mernis Birth Place&quot;));//
				psOutputs.SetProperty(&quot;MainPhoneNr&quot;, GetFieldValue(&quot;Main Phone Number&quot;));
				psOutputs.SetProperty(&quot;MainFaxNr&quot;, GetFieldValue(&quot;Main Fax Number&quot;));
				psOutputs.SetProperty(&quot;MainEmail&quot;, GetFieldValue(&quot;Main E-Mail Address&quot;));
				psOutputs.SetProperty(&quot;Address&quot;, GetFieldValue(&quot;VF Neighborhood/Village&quot;) + &quot;, &quot; + GetFieldValue(&quot;Street Address&quot;));
				psOutputs.SetProperty(&quot;ApartmentNr&quot;, GetFieldValue(&quot;Apartment Number&quot;) + &quot;, &quot; + GetFieldValue(&quot;Address Num&quot;));
				psOutputs.SetProperty(&quot;District&quot;, GetFieldValue(&quot;District&quot;));
				psOutputs.SetProperty(&quot;ZIP&quot;, GetFieldValue(&quot;Postal Code&quot;));
				psOutputs.SetProperty(&quot;Province&quot;, GetFieldValue(&quot;Province&quot;));
				psOutputs.SetProperty(&quot;City&quot;, GetFieldValue(&quot;City&quot;));
				psOutputs.SetProperty(&quot;ContactFirstName&quot;, GetFieldValue(&quot;Contact First Name&quot;));
				psOutputs.SetProperty(&quot;ContactLastName&quot;, GetFieldValue(&quot;Contact Last Name&quot;));
				psOutputs.SetProperty(&quot;TempPhoneNr&quot;, GetFieldValue(&quot;Temp Phone Number&quot;));
				psOutputs.SetProperty(&quot;Gender&quot;, GetFieldValue(&quot;Contact M/F&quot;));
				psOutputs.SetProperty(&quot;CustomerCode&quot;, GetFieldValue(&quot;Account Number&quot;));
				psOutputs.SetProperty(&quot;Neighborhood&quot;, GetFieldValue(&quot;VF Neighborhood/Village&quot;));
			}
		}
	}
	finally
	{
		oBCAccount = null;
		oBOAccount = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
		ps 		= null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="06/01/2015 14:30:20"
			   UPDATED_BY="SADMIN"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getAccountTransferInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getAccountTransferInfo(CustAccRLI, psOutputs)
{
	try
	{
		var oBOAccount :BusObject= TheApplication().GetBusObject(&quot;Account&quot;);
		var oBCAccount :BusComp= oBOAccount.GetBusComp(&quot;Account&quot;);
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);	
		var ps		:PropertySet 	= TheApplication().NewPropertySet();

		with(oBCAccount)
		{
			// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
			inProp.SetProperty(&quot;AccountId&quot;,CustAccRLI);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			
			ClearToQuery();
			SetViewMode(AllView);
			oBCAccount.ActivateField(&quot;Name&quot;);
			oBCAccount.ActivateField(&quot;First Name&quot;);
			oBCAccount.ActivateField(&quot;Contact First Name&quot;);
			oBCAccount.ActivateField(&quot;Contact Last Name&quot;);
			oBCAccount.ActivateField(&quot;Market Class&quot;);
		
			SetSearchSpec(&quot;Id&quot;,CustAccRLI);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				psOutputs.SetProperty(&quot;Name&quot;, GetFieldValue(&quot;Name&quot;));
				psOutputs.SetProperty(&quot;AccntFirstName&quot;, GetFieldValue(&quot;First Name&quot;));
				psOutputs.SetProperty(&quot;ContactFirstName&quot;, GetFieldValue(&quot;Contact First Name&quot;));
				psOutputs.SetProperty(&quot;ContactLastName&quot;, GetFieldValue(&quot;Contact Last Name&quot;));
				psOutputs.SetProperty(&quot;MarketClass&quot;, GetFieldValue(&quot;Market Class&quot;));
			}
		}
	}
	finally
	{
		oBCAccount = null;
		oBOAccount = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
		ps 		= null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="07/02/2015 12:59:11"
			   UPDATED_BY="SADMIN"
			   CREATED="07/02/2015 12:59:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getBAInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getBAInfo(BAId, BAInfo)
{
	try
	{
		var oBOInvoiceProf :BusObject= TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);
		var oBCInvoiceProf :BusComp  = oBOInvoiceProf.GetBusComp(&quot;Com Invoice Profile&quot;);
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);	
		with(oBCInvoiceProf)
		{
			// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
			inProp.SetProperty(&quot;BAId&quot;,BAId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Media Type&quot;);
			ActivateField(&quot;Bill Cycle&quot;);
			SetSearchSpec(&quot;Account Id&quot;, BAId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				BAInfo.SetProperty(&quot;MediaType&quot;, GetFieldValue(&quot;Media Type&quot;));
				BAInfo.SetProperty(&quot;BillType&quot;, GetFieldValue(&quot;Bill Type&quot;));
				BAInfo.SetProperty(&quot;BillCycle&quot;, GetFieldValue(&quot;Bill Cycle&quot;)); // VFTRCBU-11154
			}
		}
	}
	finally
	{
		oBCInvoiceProf = null;
		oBOInvoiceProf = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="07/02/2015 12:59:15"
			   UPDATED_BY="SADMIN"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getContactInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getContactInfo(contactId, AccountInfo, ContactInfo)
{
	try
	{
		var oBOContact :BusObject;
		var oBCContact :BusComp;
		var inProp  :PropertySet;
		var outProp :PropertySet;
		var BS 		:Service;	
		if(contactId != &quot;&quot;)
		{
			oBOContact = TheApplication().GetBusObject(&quot;Contact&quot;);
			oBCContact = oBOContact.GetBusComp(&quot;Contact&quot;);
			inProp  = TheApplication().NewPropertySet();
			outProp = TheApplication().NewPropertySet();
			BS 		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			with(oBCContact)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;SSA Primary Field&quot;);
				ActivateField(&quot;Place of Birth&quot;);
				ActivateField(&quot;Previous Jobs&quot;);
				ActivateField(&quot;VF Job Status&quot;);
				ActivateField(&quot;Date of Birth&quot;);
				ActivateField(&quot;SSN&quot;);
				ActivateField(&quot;M/F&quot;);
				// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
				inProp.SetProperty(&quot;contactId&quot;,contactId);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				//End
				SetSearchSpec(&quot;Id&quot;, contactId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					if(GetFieldValue(&quot;SSA Primary Field&quot;) == &quot;Y&quot;)
					{
						ContactInfo.SetProperty(&quot;BirthPlace&quot;,AccountInfo.GetProperty(&quot;BirthPlace&quot;));
						ContactInfo.SetProperty(&quot;BirthDate&quot;,AccountInfo.GetProperty(&quot;BirthDate&quot;));
						ContactInfo.SetProperty(&quot;TCID&quot;,AccountInfo.GetProperty(&quot;TCId&quot;));
						ContactInfo.SetProperty(&quot;Job&quot;,AccountInfo.GetProperty(&quot;Job&quot;));
						ContactInfo.SetProperty(&quot;Gender&quot;,AccountInfo.GetProperty(&quot;Gender&quot;));
						ContactInfo.SetProperty(&quot;JobStatus&quot;,AccountInfo.GetProperty(&quot;JobStatus&quot;));
					}
					else
					{
						ContactInfo.SetProperty(&quot;BirthPlace&quot;,GetFieldValue(&quot;Place of Birth&quot;));
						ContactInfo.SetProperty(&quot;BirthDate&quot;,GetFieldValue(&quot;Date of Birth&quot;));
						ContactInfo.SetProperty(&quot;TCID&quot;,GetFieldValue(&quot;SSN&quot;));
						ContactInfo.SetProperty(&quot;Job&quot;,GetFieldValue(&quot;Previous Jobs&quot;));
						ContactInfo.SetProperty(&quot;Gender&quot;,GetFieldValue(&quot;M/F&quot;));
						ContactInfo.SetProperty(&quot;JobStatus&quot;,GetFieldValue(&quot;VF Job Status&quot;));
					}
				}
			}
		}
		else
		{
			ContactInfo.SetProperty(&quot;BirthPlace&quot;,AccountInfo.GetProperty(&quot;BirthPlace&quot;));
			ContactInfo.SetProperty(&quot;BirthDate&quot;,AccountInfo.GetProperty(&quot;BirthDate&quot;));
			ContactInfo.SetProperty(&quot;TCID&quot;,AccountInfo.GetProperty(&quot;TCId&quot;));
			ContactInfo.SetProperty(&quot;Job&quot;,AccountInfo.GetProperty(&quot;Job&quot;));
			ContactInfo.SetProperty(&quot;Gender&quot;,AccountInfo.GetProperty(&quot;Gender&quot;));
			ContactInfo.SetProperty(&quot;JobStatus&quot;,AccountInfo.GetProperty(&quot;JobStatus&quot;));
		}
	}
	finally
	{
		oBCContact = null;
		oBOContact = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="07/02/2015 12:59:15"
			   UPDATED_BY="SADMIN"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getContactLegalInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getContactLegalInfo(orderId, OrderSubType, ContactLegalInfo)
{
  try
  {	
    ContactLegalInfo.SetProperty(&quot;FstName&quot;,&quot;&quot;);
    ContactLegalInfo.SetProperty(&quot;LstName&quot;,&quot;&quot;);
    ContactLegalInfo.SetProperty(&quot;DelegDate&quot;,&quot;&quot;);
    ContactLegalInfo.SetProperty(&quot;VFNotaryDocumentNo&quot;,&quot;&quot;);
    ContactLegalInfo.SetProperty(&quot;VFDocPublicNotary&quot;,&quot;&quot;);    

	var oBOOrder : BusObject = TheApplication().GetBusObject(&quot;Order Entry - Orders Home&quot;);
	var oBCOrder : BusComp = oBOOrder.GetBusComp(&quot;Order Entry - Orders&quot;);

	var oBOOLI : BusObject = TheApplication().GetBusObject(&quot;Order Entry - Line Items&quot;);
	var oBCOLI : BusComp = oBOOLI.GetBusComp(&quot;Order Entry - Line Items&quot;);

	var oBOContact : BusObject = TheApplication().GetBusObject(&quot;Contact&quot;);
	var oBCContact :BusComp = oBOContact.GetBusComp(&quot;Contact&quot;);

	var iRec; 
	var sContactLegalId = &quot;&quot;;
	
	/*** JIRA-15559:Begin: In case of Port In Cancellation, get the legal guardian info from the parent order (Port In order) ****/
	if (OrderSubType==TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;112&quot;)) 
	{
	  oBCOrder.ClearToQuery();
	  oBCOrder.SetViewMode(AllView);
	  oBCOrder.SetSearchSpec(&quot;Id&quot;, orderId);
	  oBCOrder.ExecuteQuery(ForwardOnly);
	  if (oBCOrder.FirstRecord())
	  {
	    orderId = oBCOrder.GetFieldValue(&quot;Parent Order Id&quot;);
	  }
	}
	/*** JIRA-15559:End ****/	
	
	oBCOLI.ClearToQuery();
	oBCOLI.SetViewMode(AllView);
	oBCOLI.ActivateField(&quot;Legal Guardian Id&quot;);
	oBCOLI.SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + orderId + &quot;&apos; and [Root Order Item Id] = [Id]&quot;);
	oBCOLI.ExecuteQuery(ForwardOnly);
	iRec = oBCOLI.FirstRecord()
	while(iRec)
	{
	  sContactLegalId = oBCOLI.GetFieldValue(&quot;Legal Guardian Id&quot;);
	  if (sContactLegalId  != null &amp;&amp; sContactLegalId  != &quot;&quot;)
	  {
		with(oBCContact)
		{
		  ClearToQuery();
		  SetViewMode(AllView);
		  ActivateField(&quot;First Name&quot;);
		  ActivateField(&quot;Last Name&quot;);
		  ActivateField(&quot;VFTRCBU Date of Power of Attorney&quot;);
		  ActivateField(&quot;VFTRCBU Power of Attorney Id&quot;);
		  ActivateField(&quot;VFTRCBU Public Notary of Power of Attorney&quot;);
		  SetSearchSpec(&quot;Id&quot;, sContactLegalId);
		  ExecuteQuery(ForwardOnly);
		  if(FirstRecord())
		  {
    		ContactLegalInfo.SetProperty(&quot;FstName&quot;, GetFieldValue(&quot;First Name&quot;));
			ContactLegalInfo.SetProperty(&quot;LstName&quot;, GetFieldValue(&quot;Last Name&quot;));
    		ContactLegalInfo.SetProperty(&quot;DelegDate&quot;, GetFieldValue(&quot;VFTRCBU Date of Power of Attorney&quot;));
			ContactLegalInfo.SetProperty(&quot;VFNotaryDocumentNo&quot;, GetFieldValue(&quot;VFTRCBU Power of Attorney Id&quot;));
		    ContactLegalInfo.SetProperty(&quot;VFDocPublicNotary&quot;,GetFieldValue(&quot;VFTRCBU Public Notary of Power of Attorney&quot;));    
	        break;
		  }//!if
		}//!with
	  }//!if   
	  iRec = oBCOLI.NextRecord();
	}

  }
  finally
  {
	oBCContact = null;
	oBOContact = null;
	oBOOrder = null;
	oBCOrder = null;
	oBOOLI = null;
	oBCOLI = null;
  }
}"
			   SEQUENCE="11"
			   UPDATED="10/01/2015 08:01:37"
			   UPDATED_BY="SADMIN"
			   CREATED="08/13/2015 18:23:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getOLIInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getOLIInfo(MLId, OLIInfo)
{
	try{
		var oBOOrders : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var oBCOLI : BusComp = oBOOrders.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var oBCXA : BusComp = oBOOrders.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var strTariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var strCamp = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP&quot;);
		var strHandset = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var strNewAct = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strPhoneDir = &quot;Phone Directory&quot;;
		var strBrandMod = &quot;Device Brand/Model&quot;;
		var iNext;
		var iNext2;
		var PartNumb = &quot;&quot;;
		var OLIid = &quot;&quot;;
		var searchString = &quot;((([Part Number]=&apos;1128&apos; OR [Part Number]=&apos;1133&apos; OR [Part Number]=&apos;1103&apos; OR [Part Number]=&apos;1129&apos; OR [Part Number]=&apos;1132&apos; OR [Part Number]=&apos;1110&apos; OR [Part Number]=&apos;1111&apos; OR ([VF Product Group]=&apos;&quot;+strCamp+&quot;&apos; AND [VF Product Type]=&apos;&quot;+strHandset+&quot;&apos;)) AND [Action Code]=&apos;&quot;+strNewAct+&quot;&apos;) OR [VF Product Group]=&apos;&quot;+strTariff+&quot;&apos; OR [Id]=&apos;&quot;+MLId+&quot;&apos;) AND [Root Order Item Id]=&apos;&quot;+MLId+&quot;&apos;&quot;;
		with(oBCOLI)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Product Translated&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Name&quot;);
			SetSearchExpr(searchString);
			ExecuteQuery(ForwardOnly);
			iNext = FirstRecord();
			while(iNext)
			{
				PartNumb = GetFieldValue(&quot;Part Number&quot;);
				switch(PartNumb)
				{
					case &quot;1128&quot;:
						OLIInfo.SetProperty(&quot;1128&quot;,&quot;Y&quot;);
					break;
					case &quot;1133&quot;:
						OLIInfo.SetProperty(&quot;1133&quot;,&quot;Y&quot;);
					break;
					case &quot;1103&quot;:
						OLIid = GetFieldValue(&quot;Id&quot;);
						with(oBCXA)
						{
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(&quot;[Object Id]=&apos;&quot;+OLIid+&quot;&apos; AND [Name]=&apos;Type&apos; AND [Text Value]=&apos;GPRS&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
								OLIInfo.SetProperty(&quot;1103&quot;,&quot;Y&quot;);
						}
					break;
					case &quot;1129&quot;:
						OLIInfo.SetProperty(&quot;1129&quot;,&quot;Y&quot;);
					break;
					case &quot;1132&quot;:
						OLIInfo.SetProperty(&quot;1132&quot;,&quot;Y&quot;);
					break;
					case &quot;1110&quot;:
						OLIInfo.SetProperty(&quot;1110&quot;,&quot;Y&quot;);
					break;
					case &quot;1111&quot;:
						OLIInfo.SetProperty(&quot;1111&quot;,&quot;Y&quot;);
					break;
				}
				if(GetFieldValue(&quot;VF Product Group&quot;) == strTariff)
					OLIInfo.SetProperty(&quot;TariffPlan&quot;, GetFieldValue(&quot;Product Translated&quot;));
				if(GetFieldValue(&quot;VF Product Group&quot;) == strCamp)
					OLIInfo.SetProperty(&quot;Campaign&quot;, GetFieldValue(&quot;Product Translated&quot;).substring(0, 8) + &quot;/&quot; + GetFieldValue(&quot;Part Number&quot;));
				if(GetFieldValue(&quot;Id&quot;) == MLId)
				{
					with(oBCXA)
					{
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchExpr(&quot;[Object Id]=&apos;&quot;+MLId+&quot;&apos; AND (([Name]=&apos;&quot;+strPhoneDir+&quot;&apos; AND [Text Value]=&apos;Y&apos;) OR [Name]=&apos;&quot;+strBrandMod+&quot;&apos;)&quot;);
						ExecuteQuery(ForwardOnly);
						iNext2 = FirstRecord();
						while(iNext2)
						{
							if(GetFieldValue(&quot;Name&quot;) == strPhoneDir)
								OLIInfo.SetProperty(&quot;PhoneDirectory&quot;,&quot;Y&quot;);
							else if(GetFieldValue(&quot;Name&quot;) == strBrandMod)
								OLIInfo.SetProperty(&quot;BrandModel&quot;, GetFieldValue(&quot;Text Value&quot;));
							iNext2 = NextRecord();
						}
					}
				}
				iNext = NextRecord();
			}
		}
	}
	finally
	{
		oBCXA = null;
		oBCOLI = null;
		oBOOrders = null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="01/23/2012 13:46:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getOLIInfoCBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getOLIInfoCBU (Inputs, OLIInfo)
{
//FCARRIL - JIRA 
//Copied from getOLIInfo using CBU products part numbers
/* Decode:
EBU		CBU
1103	71001
1110	71012
1111	71013
1128	71026
1129	71025
1132	71028
1133	71039
Added: 71004 (3G CBU), 71014 (ACR CBU), 71021 (Telesekreter Yönlendirme CBU)
*/

	try{
		var oBOOrders : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var oBCOLI : BusComp = oBOOrders.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var oBCXA : BusComp = oBOOrders.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var strTariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var strCamp = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP&quot;);
		var strHandset = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var strNewAct = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strDeletedAct = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;); //ACAMBAS: VFTRCBU-22349
		var strPhoneDir = &quot;Phone Directory&quot;;
		//var strBrandMod = &quot;Device Brand/Model&quot;;	//ACAMBAS: VFTRCBU-22349
		var iNext;
		var iNext2;
		var PartNumb = &quot;&quot;;
		//var OLIid = &quot;&quot;;
		var sMLId = Inputs.GetProperty(&quot;MLid&quot;); //ACAMBAS: VFTRCBU-22349
		var sOrderId = Inputs.GetProperty(&quot;OrderId&quot;); //ACAMBAS: VFTRCBU-22349

		//ACAMBAS: VFTRCBU-22349 - Start
		//var searchString = &quot;((([Part Number]=&apos;71026&apos; OR [Part Number]=&apos;71039&apos; OR [Part Number]=&apos;71001&apos; OR [Part Number]=&apos;71034&apos; OR [Part Number]=&apos;71028&apos; OR [Part Number]=&apos;71012&apos; OR [Part Number]=&apos;71013&apos; OR [Part Number]=&apos;71014&apos; OR [Part Number]=&apos;71021&apos; OR [Part Number]=&apos;71004&apos; OR ([VF Product Group]=&apos;&quot;+strCamp+&quot;&apos; AND [VF Product Type]=&apos;&quot;+strHandset+&quot;&apos;)) AND [Action Code]=&apos;&quot;+strNewAct+&quot;&apos;) OR [VF Product Group]=&apos;&quot;+strTariff+&quot;&apos; OR [Id]=&apos;&quot;+MLId+&quot;&apos;) AND [Root Order Item Id]=&apos;&quot;+MLId+&quot;&apos;&quot;;
		// VFTRCBU-32822 - searchString + [Part Number]=&apos;71000&apos;
		//var searchString = &quot;(((([Part Number]=&apos;71026&apos; OR [Part Number]=&apos;71039&apos; OR [Part Number]=&apos;71001&apos; OR [Part Number]=&apos;71034&apos; OR [Part Number]=&apos;71028&apos; OR [Part Number]=&apos;71012&apos; OR [Part Number]=&apos;71013&apos; OR [Part Number]=&apos;71014&apos; OR [Part Number]=&apos;71021&apos; OR [Part Number]=&apos;71004&apos; OR [Part Number]=&apos;71000&apos;) AND [Action Code]=&apos;&quot;+strNewAct+&quot;&apos;) OR [VF Product Group]=&apos;&quot;+strTariff+&quot;&apos; OR [Id]=&apos;&quot;+sMLId+&quot;&apos;) AND [Root Order Item Id]=&apos;&quot;+sMLId+&quot;&apos;) OR (([VF Product Group]=&apos;&quot;+strCamp+&quot;&apos; AND [VF Product Type]=&apos;&quot;+strHandset+&quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot;+strDeletedAct+&quot;&apos; AND [Order Header Id]=&apos;&quot;+sOrderId+&quot;&apos;))&quot;;
		//ACAMBAS: VFTRCBU-22349 - End
		//FCARRIL: VFTRCBU-34283 Commented searchspec above because of performance issues
		//OLI query was splitted in 3 queries because searchExpr in use was generating performance issues (query with AND/OR conditions without no criteria)
		var searchString1 = &quot;(([Part Number]=&apos;71026&apos; OR [Part Number]=&apos;71039&apos; OR [Part Number]=&apos;71001&apos; OR [Part Number]=&apos;71034&apos; OR [Part Number]=&apos;71028&apos; OR [Part Number]=&apos;71012&apos; OR [Part Number]=&apos;71013&apos; OR [Part Number]=&apos;71014&apos; OR [Part Number]=&apos;71021&apos; OR [Part Number]=&apos;71004&apos; OR [Part Number]=&apos;71000&apos;) AND [Action Code]=&apos;&quot;+strNewAct+&quot;&apos; AND [Root Order Item Id]=&apos;&quot;+sMLId+&quot;&apos; AND [Order Header Id]=&apos;&quot;+sOrderId+&quot;&apos;)&quot;;
		var searchString2 = &quot;(([VF Product Group]=&apos;&quot;+strTariff+&quot;&apos; OR [Id]=&apos;&quot;+sMLId+&quot;&apos;) AND [Root Order Item Id]=&apos;&quot;+sMLId+&quot;&apos; AND [Order Header Id]=&apos;&quot;+sOrderId+&quot;&apos;)&quot;;
		var searchString3 = &quot;([VF Product Group]=&apos;&quot;+strCamp+&quot;&apos; AND [VF Product Type]=&apos;&quot;+strHandset+&quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot;+strDeletedAct+&quot;&apos; AND [Order Header Id]=&apos;&quot;+sOrderId+&quot;&apos;)&quot;;
		
		with(oBCOLI)
		{
			//Get Child products
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Product Translated&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Name&quot;);
			//SetSearchExpr(searchString);
			SetSearchExpr(searchString1);
			ExecuteQuery(ForwardOnly);
			iNext = FirstRecord();
			while(iNext)
			{
				PartNumb = GetFieldValue(&quot;Part Number&quot;);
				
				switch(PartNumb)
				{
					case &quot;71026&quot;:
						OLIInfo.SetProperty(&quot;1128&quot;,&quot;Y&quot;);
					break;
					case &quot;71039&quot;:
						OLIInfo.SetProperty(&quot;1133&quot;,&quot;Y&quot;);
					break;
					case &quot;71001&quot;:
						/* JIRA 11074
						OLIid = GetFieldValue(&quot;Id&quot;);
						with(oBCXA)
						{
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(&quot;[Object Id]=&apos;&quot;+OLIid+&quot;&apos; AND [Name]=&apos;Type&apos; AND [Text Value]=&apos;GPRS&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
								OLIInfo.SetProperty(&quot;1103&quot;,&quot;Y&quot;);
						}*/
						OLIInfo.SetProperty(&quot;1103&quot;,&quot;Y&quot;);
					break;
					case &quot;71004&quot;: //JIRA 11074
						OLIInfo.SetProperty(&quot;1103&quot;,&quot;Y&quot;);
					break;
					case &quot;71025&quot;:
						OLIInfo.SetProperty(&quot;1129&quot;,&quot;Y&quot;);
					break;
					case &quot;71028&quot;:
						OLIInfo.SetProperty(&quot;1132&quot;,&quot;Y&quot;);
					break;
					case &quot;71012&quot;:
						OLIInfo.SetProperty(&quot;1110&quot;,&quot;Y&quot;);
					break;
					case &quot;71013&quot;:
						OLIInfo.SetProperty(&quot;1111&quot;,&quot;Y&quot;);
					break;
					case &quot;71014&quot;: //JIRA 11074
						OLIInfo.SetProperty(&quot;71014&quot;,&quot;Y&quot;);
					break;
					case &quot;71021&quot;: //JIRA 11074
						OLIInfo.SetProperty(&quot;71021&quot;,&quot;Y&quot;);
					break;
					case &quot;71000&quot;: //VFTRCBU-32822
						OLIInfo.SetProperty(&quot;71000&quot;,&quot;Y&quot;);
					break;					
				}
				iNext = NextRecord();
			}
			//FCARRIL: VFTRCBU-34283 
			//Get Tariff or Root Item
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Product Translated&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Name&quot;);
			SetSearchExpr(searchString2);
			ExecuteQuery(ForwardOnly);
			iNext = FirstRecord();
			while(iNext)
			{
				if(GetFieldValue(&quot;VF Product Group&quot;) == strTariff)
					OLIInfo.SetProperty(&quot;TariffPlan&quot;, GetFieldValue(&quot;Product Translated&quot;));
					
				if(GetFieldValue(&quot;Id&quot;) == sMLId)
				{
					with(oBCXA)
					{
						ClearToQuery();
						SetViewMode(AllView);
						//ACAMBAS: VFTRCBU-22349 - Start
						//SetSearchExpr(&quot;[Object Id]=&apos;&quot;+MLId+&quot;&apos; AND (([Name]=&apos;&quot;+strPhoneDir+&quot;&apos; AND [Text Value]=&apos;Y&apos;) OR [Name]=&apos;&quot;+strBrandMod+&quot;&apos;)&quot;);
						SetSearchExpr(&quot;[Object Id]=&apos;&quot;+sMLId+&quot;&apos; AND ([Name]=&apos;&quot;+strPhoneDir+&quot;&apos; AND [Text Value]=&apos;Y&apos;)&quot;);
						//ACAMBAS: VFTRCBU-22349 - End
						ExecuteQuery(ForwardOnly);
						iNext2 = FirstRecord();
						while(iNext2)
						{
							if(GetFieldValue(&quot;Name&quot;) == strPhoneDir)
								OLIInfo.SetProperty(&quot;PhoneDirectory&quot;,&quot;Y&quot;);
							//ACAMBAS: VFTRCBU-22349 - Start
							//else if(GetFieldValue(&quot;Name&quot;) == strBrandMod) //FCARRIL: Must be defined by Product Catalogue Team
							//	OLIInfo.SetProperty(&quot;BrandModel&quot;, GetFieldValue(&quot;Text Value&quot;));
							//ACAMBAS: VFTRCBU-22349 - End
							iNext2 = NextRecord();
						}
					}
				}
				iNext = NextRecord();
			}
			//FCARRIL: VFTRCBU-34283
			//Get Camp Item
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Product Translated&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Name&quot;);
			SetSearchExpr(searchString3);
			ExecuteQuery(ForwardOnly);
			iNext = FirstRecord();
			while(iNext)
			{
				if(GetFieldValue(&quot;VF Product Group&quot;) == strCamp) {
					OLIInfo.SetProperty(&quot;Campaign&quot;, GetFieldValue(&quot;Product Translated&quot;).substring(0, 8) + &quot;/&quot; + GetFieldValue(&quot;Part Number&quot;));
					OLIInfo.SetProperty(&quot;BrandModel&quot;, GetFieldValue(&quot;Product Translated&quot;));	//ACAMBAS: VFTRCBU-22349
				}
				iNext = NextRecord();
			}	
				
		}
	}
	finally
	{
		oBCXA = null;
		oBCOLI = null;
		oBOOrders = null;
		
		
		
	}
}"
			   SEQUENCE="15"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="06/11/2015 17:37:20"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getOrderInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getOrderInfo(SIM)
{
	try
	{
		var oBO :BusObject= TheApplication().GetBusObject(&quot;Order Entry - Line Items&quot;);
		var oBC :BusComp= oBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var psOrderInfo :PropertySet= TheApplication().NewPropertySet();
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		with(oBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Account Market Class&quot;);
			ActivateField(&quot;Order Header Id&quot;);
			ActivateField(&quot;Order Type&quot;);
			ActivateField(&quot;Order Sub Type&quot;);
			ActivateField(&quot;VF Order Header Reason&quot;);
			ActivateField(&quot;TELCO Action Reason&quot;); //WA#13 RPIRES
			ActivateField(&quot;Action Code&quot;); //DG
			ActivateField(&quot;Billing Account Id&quot;); //FCARRIL WA#13
			ActivateField(&quot;VFTRCBU Customer Id&quot;); //FCARRIL JIRA 11710
			
			// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
			inProp.SetProperty(&quot;SIM&quot;,SIM);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			SetSearchSpec(&quot;Id&quot;,SIM);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				psOrderInfo.SetProperty(&quot;AccountId&quot;, GetFieldValue(&quot;Account Id&quot;));
				psOrderInfo.SetProperty(&quot;OrderId&quot;, GetFieldValue(&quot;Order Header Id&quot;));
				psOrderInfo.SetProperty(&quot;MarketClass&quot;, GetFieldValue(&quot;Account Market Class&quot;));
				//psOrderInfo.SetProperty(&quot;OrderReason&quot;, GetFieldValue(&quot;VF Order Header Reason&quot;));
				psOrderInfo.SetProperty(&quot;OrderReason&quot;, GetFieldValue(&quot;TELCO Action Reason&quot;)); //WA#13 RPIRES
				psOrderInfo.SetProperty(&quot;OrderSubType&quot;, GetFieldValue(&quot;Order Sub Type&quot;));
				psOrderInfo.SetProperty(&quot;OrderType&quot;, GetFieldValue(&quot;Order Type&quot;));
				psOrderInfo.SetProperty(&quot;ActionCode&quot;, GetFieldValue(&quot;Action Code&quot;)); //DG
				psOrderInfo.SetProperty(&quot;BillingAccId&quot;, GetFieldValue(&quot;Billing Account Id&quot;)); //FCARRIL WA#13
				psOrderInfo.SetProperty(&quot;CustAccRLI&quot;, GetFieldValue(&quot;VFTRCBU Customer Id&quot;)); //FCARRIL JIRA 11710
				
				return(psOrderInfo);
			}
		}
	}
	finally
	{
		oBC = null;
		inProp 	= null;
		outProp = null;
		psOrderInfo = null;
		BS 		= null;
		oBO = null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="11/07/2016 12:40:07"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getUsrLastName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getUsrLastName(UserId, psUserData)
{
	try
	{
		var oBO :BusObject= TheApplication().GetBusObject(&quot;Employee&quot;);
		var oBC :BusComp= oBO.GetBusComp(&quot;Employee&quot;);
		oBC.ClearToQuery();
		oBC.SetViewMode(AllView);
		oBC.ActivateField(&quot;Last Name&quot;);
		oBC.ActivateField(&quot;First Name&quot;);
		// Begin: Review Input validation: Scripting 15 null check Added 17may2012 Udbhav IDC
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);	
		inProp.SetProperty(&quot;UserId&quot;,UserId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End
		oBC.SetSearchSpec(&quot;Id&quot;, UserId);
		oBC.ExecuteQuery(ForwardOnly);
		if(oBC.FirstRecord())
		{
			psUserData.SetProperty(&quot;Name&quot;,oBC.GetFieldValue(&quot;First Name&quot;));
			psUserData.SetProperty(&quot;LastName&quot;,oBC.GetFieldValue(&quot;Last Name&quot;));
		}
	}
	finally
	{	
		inProp 	= null;
		outProp = null;
		BS 		= null;
		oBC = null;
		oBO = null;
	}
}"
			   SEQUENCE="19"
			   UPDATED="11/07/2016 12:40:08"
			   UPDATED_BY="JMARQUES"
			   CREATED="12/05/2011 13:06:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



