<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF Account Management"
	   UI_FREEZE="N"
	   UPDATED="03/03/2017 13:01:37"
	   UPDATED_BY="JSANTOS"
	   CREATED="11/02/2009 12:09:53"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="VF AD 24-July-2010: Created for Dunning related operations"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Dunning BS"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="03/01/2017 18:51:41"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="Y"
		   OBJECT_LOCKED_BY_NAME="JSANTOS"
		   UPDATED="03/03/2017 13:01:37"
		   UPDATED_BY="JSANTOS"
		   CREATED="07/26/2010 07:33:29"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Dunning BS"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="07/26/2010 07:33:29"
			   UPDATED_BY="SADMIN"
			   CREATED="07/26/2010 07:33:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="InsertAlert"
			   UPDATED="01/23/2013 18:43:18"
			   UPDATED_BY="SADMIN"
			   CREATED="07/26/2010 07:33:29"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ActionId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/10/2010 16:42:30"
				   UPDATED_BY="SADMIN"
				   CREATED="07/26/2010 07:33:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/05/2010 13:57:45"
				   UPDATED_BY="SADMIN"
				   CREATED="07/26/2010 07:33:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorDescription"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/05/2010 13:57:45"
				   UPDATED_BY="SADMIN"
				   CREATED="07/26/2010 07:33:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Integration Object"
				   HIDDEN="N"
				   INACTIVE="N"
				   INTEGRATION_OBJECT="VF ALERT"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="07/26/2010 07:33:29"
				   UPDATED_BY="SADMIN"
				   CREATED="07/26/2010 07:33:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="StatusCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/26/2010 07:33:29"
				   UPDATED_BY="SADMIN"
				   CREATED="07/26/2010 07:33:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Integration Object"
				   HIDDEN="N"
				   INACTIVE="N"
				   INTEGRATION_OBJECT="VFDunningOutput"
				   NAME="VFDunningOutput"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="01/23/2013 18:43:18"
				   UPDATED_BY="SADMIN"
				   CREATED="01/23/2013 18:43:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="InsertAlert"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/26/2010 07:33:29"
				   UPDATED_BY="SADMIN"
				   CREATED="07/26/2010 07:33:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ManageDunning"
			   UPDATED="08/07/2010 13:38:41"
			   UPDATED_BY="SADMIN"
			   CREATED="07/27/2010 13:32:41"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ActivityId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/07/2010 13:38:41"
				   UPDATED_BY="SADMIN"
				   CREATED="08/07/2010 13:38:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AlertId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/27/2010 13:32:41"
				   UPDATED_BY="SADMIN"
				   CREATED="07/27/2010 13:32:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ManageDunning"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/27/2010 13:32:41"
				   UPDATED_BY="SADMIN"
				   CREATED="07/27/2010 13:32:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_SETOUTPUT-1009090431-12U"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetOutput"
			   UPDATED="02/01/2013 17:51:16"
			   UPDATED_BY="SADMIN"
			   CREATED="02/01/2013 17:51:16"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Integration Object"
				   HIDDEN="N"
				   INACTIVE="N"
				   INTEGRATION_OBJECT="VFDunningOutput"
				   NAME="fpsNodeListOfAsset"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="02/01/2013 17:51:16"
				   UPDATED_BY="SADMIN"
				   CREATED="02/01/2013 17:51:16"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strBillingAccountCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/01/2013 17:51:16"
				   UPDATED_BY="SADMIN"
				   CREATED="02/01/2013 17:51:16"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSRCreation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSRCreation(sAmountOwed,sDunningStep,sAccountType)
{
	try
	{
		var boParameter : BusObject = TheApplication ().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp   = boParameter.GetBusComp (&quot;ACS NI Parameter&quot;);

		var sResult   = &quot;False&quot;;
		var sFunction = &quot;&quot;;

		if (sDunningStep == &quot;SoftCall&quot;)
			sFunction = &quot;Soft Call&quot;;
		else
			sFunction = &quot;Debt Recovery Call&quot;;

		sAmountOwed = (ToNumber(sAmountOwed)/100); //C_MSP00000943

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.ActivateField(&quot;VF SR Type&quot;);
		bcParameter.ActivateField(&quot;VF SR Area&quot;);
		bcParameter.ActivateField(&quot;VF SR Sub Area&quot;);
		bcParameter.ActivateField(&quot;Condition4&quot;);
		bcParameter.ActivateField(&quot;VFTRCBU Customer Type&quot;); // ACAMBAS - 2014-08-14: VFTRCBU WA#27
		bcParameter.SetSearchSpec(&quot;VF Min Calc&quot;, &quot;&lt;&quot; + sAmountOwed + &quot;&quot;);//C_MSP00000305
		bcParameter.SetSearchSpec(&quot;VF Max Calc&quot;, &quot;&gt;&quot; + sAmountOwed + &quot;&quot;);
		bcParameter.SetSearchSpec(&quot;Function&quot;, sFunction);
		bcParameter.SetSearchSpec(&quot;VFTRCBU Customer Type&quot;, sAccountType); //ACAMBAS - 2014-08-14: VFTRCBU WA#27
		bcParameter.ExecuteQuery(ForwardOnly);

		if (bcParameter.FirstRecord())
		{
			//WA#27 - RPIRES
			if (bcParameter.GetFieldValue(&quot;VFTRCBU Customer Type&quot;) == sAccountType ||
				bcParameter.GetFieldValue(&quot;VFTRCBU Customer Type&quot;) == &quot;Both&quot;)
			{
				sResult = &quot;True&quot;;
			}
		}

		return sResult;
	}
	finally
	{
		bcParameter = null;
		boParameter = null;
	}	
}"
			   SEQUENCE="1"
			   UPDATED="12/23/2015 16:16:55"
			   UPDATED_BY="JCARVALHO"
			   CREATED="10/21/2013 14:18:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloseSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloseSR(sDunningStep, sBillingAccount)
{
	try
	{
		var bsUtilities    : Service     = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psUtilitiesIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut : PropertySet = TheApplication().NewPropertySet();
		var boParameter    : BusObject   = TheApplication().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameter    : BusComp     = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		var boSrvReq       : BusObject   = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcSrvReq       : BusComp     = boSrvReq.GetBusComp(&quot;Service Request&quot;);

		var sParemeterSearchExpr = &quot;&quot;;
		var bHasParameter        = false;
		var sSRType	             = &quot;&quot;;
		var sSRArea	             = &quot;&quot;;
		var sSRSubArea           = &quot;&quot;;
		var sSRSearchExpr        = &quot;&quot;;
		var bHasServReq			= false;

		var sStatusClosed		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;);
		var sStatusCancelled    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Cancelled&quot;);
	
		if (sDunningStep == &quot;DebtRecSR&quot;)
			sParemeterSearchExpr = &quot;[Function]=&apos;Debt Recovery Call&apos;&quot;;
		else if (sDunningStep == &quot;CloseDebtRecSR&quot;)
			sParemeterSearchExpr = &quot;[Function]=&apos;Debt Recovery Call&apos;&quot;;	
		else if(sDunningStep == &quot;TILLIDD100X&quot;) //VFTRCBU-29995
			sParemeterSearchExpr = &quot;[Function]=&apos;Debt Recovery Call&apos;&quot;;
		else
			sParemeterSearchExpr = &quot;[Function]=&apos;Soft Call&apos;&quot;;	

		//Begin - Scripting 15 - Input validation
		psUtilitiesIn.SetProperty(&quot;sBillingAccount&quot;,sBillingAccount);
		bsUtilities.InvokeMethod(&quot;Input Validation&quot;,psUtilitiesIn, psUtilitiesOut);
		//End - Scripting 15

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.ActivateField(&quot;VF SR Type&quot;);
		bcParameter.ActivateField(&quot;VF SR Area&quot;);
		bcParameter.ActivateField(&quot;VF SR Sub Area&quot;);
		bcParameter.SetSearchExpr(sParemeterSearchExpr);
		bcParameter.ExecuteQuery(ForwardOnly);

		bHasParameter = bcParameter.FirstRecord();

		while(bHasParameter)
		{
			sSRType       = bcParameter.GetFieldValue(&quot;VF SR Type&quot;);
			sSRArea       = bcParameter.GetFieldValue(&quot;VF SR Area&quot;);
			sSRSubArea    = bcParameter.GetFieldValue(&quot;VF SR Sub Area&quot;);
			sSRSearchExpr = &quot;[VF Billing Account Id]=&apos;&quot; + sBillingAccount + &quot;&apos; AND [SR Type]=&apos;&quot; + sSRType +
							&quot;&apos; AND [Area]=&apos;&quot; + sSRArea + &quot;&apos; AND [Sub-Area]=&apos;&quot; + sSRSubArea +
							&quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusClosed +
							&quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled + &quot;&apos;&quot;;

			bcSrvReq.SetViewMode(AllView);
			bcSrvReq.ClearToQuery();
			bcSrvReq.SetSearchExpr(sSRSearchExpr);
			bcSrvReq.ExecuteQuery(ForwardOnly);

			bHasServReq = bcSrvReq.FirstRecord ();

			while(bHasServReq)
			{
				bcSrvReq.SetFieldValue(&quot;Status&quot;,sStatusClosed);
				bcSrvReq.WriteRecord();

				bHasServReq = bcSrvReq.NextRecord();
			}

			bHasParameter = bcParameter.NextRecord();
		}

		if (sDunningStep != &quot;DebtRecSR&quot; &amp;&amp; sDunningStep != &quot;CloseDebtRecSR&quot;)
		{
			bcParameter.SetViewMode(AllView);
			bcParameter.ClearToQuery();
			bcParameter.SetSearchSpec(&quot;Function&quot;,&quot;Soft Call&quot;);
			bcParameter.ExecuteQuery (ForwardOnly);

			bHasParameter = bcParameter.FirstRecord ();

			while(bHasParameter)
			{
				sSRType       = bcParameter.GetFieldValue(&quot;VF SR Type&quot;);
				sSRArea       = bcParameter.GetFieldValue(&quot;VF SR Area&quot;);
				sSRSubArea    = bcParameter.GetFieldValue(&quot;VF SR Sub Area&quot;);
				sSRSearchExpr = &quot;[VF Billing Account Id]=&apos;&quot; + sBillingAccount + &quot;&apos; AND [SR Type]=&apos;&quot; + sSRType +
								&quot;&apos; AND [Area]=&apos;&quot; + sSRArea + &quot;&apos; AND [Sub-Area]=&apos;&quot; + sSRSubArea +
								&quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusClosed +
								&quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled + &quot;&apos;&quot;;

				bcSrvReq.SetViewMode(AllView);
				bcSrvReq.ClearToQuery();
				bcSrvReq.SetSearchExpr(sSRSearchExpr);
				bcSrvReq.ExecuteQuery(ForwardOnly);

				bHasServReq = bcSrvReq.FirstRecord ();

				while(bHasServReq)
				{
					bcSrvReq.SetFieldValue(&quot;Status&quot;, sStatusClosed);
					bcSrvReq.WriteRecord();

					bHasServReq = bcSrvReq.NextRecord();
				}

				bHasParameter = bcParameter.NextRecord();
			}
		}
	}
	finally
	{
		bcSrvReq       = null;
		boSrvReq       = null;
		bcParameter	   = null;
		boParameter	   = null;
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="06/08/2016 11:10:40"
			   UPDATED_BY="RPIRES"
			   CREATED="06/22/2011 17:53:12"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloseWACreditAlert"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloseWACreditAlert(sBillingAccount, sInvoiceNumber)
{
	try
	{
		var bsUtilities    : Service     = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psUtilitiesIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut : PropertySet = TheApplication().NewPropertySet();
		var boAccount      : BusObject   = TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAlert        : BusComp     = boAccount.GetBusComp(&quot;VF HP CUT Credit Alert&quot;);

		var sSearchExpr   = &quot;&quot;;
		var bHasAlert     = false;
		var sStatusOpen   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_STATUS&quot;,&quot;Open&quot;);
		var sStatusClosed = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_STATUS&quot;,&quot;Closed&quot;);

		//VFTK Junaid 20120519 - Added for Oracle Review 15
		psUtilitiesIn.SetProperty(&quot;sBillingAccount&quot;, sBillingAccount); 
		psUtilitiesIn.SetProperty(&quot;sInvoiceNumber&quot;, sInvoiceNumber); 
		psUtilitiesIn.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
		bsUtilities.InvokeMethod(&quot;Input Validation&quot;, psUtilitiesIn, psUtilitiesOut); 
		//End

		sSearchExpr = &quot;[Statement Id]&lt;&gt;&apos;&quot; + sInvoiceNumber +
					  &quot;&apos; AND [Statement Id] NOT LIKE &apos;S*&apos; AND [VF Source]=&apos;Kenan&apos; AND [Billing Account By Id]=&apos;&quot; +
					  sBillingAccount+&quot;&apos; AND [VF Status]=&apos;&quot; + sStatusOpen +
					  &quot;&apos; AND ([VF Collectable Id]=&apos;&apos; OR [VF Collectable Id] IS NULL)&quot;;

		bcAlert.SetViewMode(AllView);
		bcAlert.ClearToQuery();
		bcAlert.ActivateField(&quot;VF Status&quot;);
		bcAlert.SetSearchExpr(sSearchExpr);
		bcAlert.ExecuteQuery(ForwardOnly);

		bHasAlert = bcAlert.FirstRecord();

		while(bHasAlert)
		{
			bcAlert.SetFieldValue(&quot;VF Status&quot;, sStatusClosed);
			bcAlert.WriteRecord();

			bHasAlert = bcAlert.NextRecord();
		}
	}
	finally
	{
        bcAlert        = null;
        boAccount      = null;
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="12/23/2015 15:52:59"
			   UPDATED_BY="JCARVALHO"
			   CREATED="10/04/2011 13:44:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateInteraction"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateInteraction (Inputs, Outputs)
{
	try 
	{
		var boParameters : BusObject = TheApplication ().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameters : BusComp = boParameters.GetBusComp (&quot;ACS NI Parameter&quot;);
		var psInputs  : PropertySet;
		var psOutputs : PropertySet;
		var bs : Service;
		var strInteractionType        = &quot;&quot;;
		var strInteractionArea        = &quot;&quot;;
		var strInteractionSubArea     = &quot;&quot;;
		var strInteractionStatus      = &quot;&quot;;
		var strInteractionChannel     = &quot;&quot;;
		var strInteractionDescription = &quot;&quot;;
		var strParameterSrcExpr       = &quot;&quot;;
		var strDunningStep            = Inputs.GetProperty (&quot;DunningStep&quot;);
		var strAccountId              = Inputs.GetProperty (&quot;Account Id&quot;);
		var strBACode                 = Inputs.GetProperty (&quot;BA Code&quot;);

		strParameterSrcExpr = &quot;[Function] = &apos;Dunning&apos; AND [Name] = &apos;CreateInteraction&apos; AND [Value] = &apos;&quot;+strDunningStep+&quot;&apos;&quot;;
					
		bcParameters.ClearToQuery ();
		bcParameters.SetViewMode (AllView);
		//VFTK Junaid 20120519 - Scripting 15 check not needed becoz if no record is found error is already present
		bcParameters.SetSearchExpr (strParameterSrcExpr);
		bcParameters.ExecuteQuery (ForwardOnly);
					
		if (bcParameters.FirstRecord ())
		{
			strInteractionType        = bcParameters.GetFieldValue (&quot;Condition1&quot;);
			strInteractionArea        = bcParameters.GetFieldValue (&quot;Condition2&quot;);
			strInteractionSubArea     = bcParameters.GetFieldValue (&quot;Condition3&quot;);
			strInteractionStatus      = bcParameters.GetFieldValue (&quot;Condition4&quot;);
			strInteractionChannel     = bcParameters.GetFieldValue (&quot;Condition5&quot;);
			strInteractionDescription = bcParameters.GetFieldValue (&quot;Condition6&quot;);
			
			//Create an interaction with the above values
			psInputs  = TheApplication ().NewPropertySet();
			psOutputs = TheApplication ().NewPropertySet();
			bs = TheApplication().GetService(&quot;ACS General Operations&quot;);
			
			psInputs.SetProperty (&quot;AccountId&quot;, strAccountId);
			psInputs.SetProperty (&quot;Area&quot;, strInteractionArea);
			psInputs.SetProperty (&quot;Sub Area&quot;, strInteractionSubArea);
			psInputs.SetProperty (&quot;Type&quot;, strInteractionType);
			psInputs.SetProperty (&quot;Description&quot;, strInteractionDescription);
			psInputs.SetProperty (&quot;Status&quot;, strInteractionStatus);
			psInputs.SetProperty (&quot;Channel&quot;, strInteractionChannel);
	
			bs.InvokeMethod(&quot;CreateInteraction&quot;, psInputs, psOutputs);
		}
		else
		{
			TheApplication ().RaiseErrorText (&quot;VF Dunning BS :: CreateInteraction :: Parameter is not maintained&quot;);
		}
	}
	finally
	{
		bcParameters	= null;
		boParameters	= null;
		psInputs		= null;
		psOutputs		= null;
		bs				= null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="12/23/2015 15:52:59"
			   UPDATED_BY="JCARVALHO"
			   CREATED="07/27/2010 13:32:41"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSR(sAmountOwed,sBillingAccount,sDunningStep,sPriority,sDescription,sAccountId,sAccounType)
{
	try
	{
		var strSRExist			= false;
		
		// AQUI
		var boParameter     : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter     : BusComp     = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		var bsOperations    : Service     = TheApplication().GetService(&quot;ACS General Operations&quot;);
		var psOperationsIn  : PropertySet = TheApplication().NewPropertySet();
		var psOperationsOut : PropertySet = TheApplication().NewPropertySet();
		var boSrvReq        : BusObject   = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcSrvReq        : BusComp     = boSrvReq.GetBusComp(&quot;Service Request&quot;);

		var sFunction     = &quot;&quot;;
		var bHasParameter = false;
		var sSRType       = &quot;&quot;;
		var sSRArea       = &quot;&quot;;
		var sSRSubArea    = &quot;&quot;;
		var sSRGroup      = &quot;&quot;;
		var sSrvReqId     = &quot;&quot;;

		if (sDunningStep == &quot;SoftCall&quot;)
			sFunction = &quot;Soft Call&quot;;
		else
			sFunction = &quot;Debt Recovery Call&quot;;
		
		sAmountOwed = (ToNumber(sAmountOwed)/100); //C_MSP00000943

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.ActivateField(&quot;VF SR Type&quot;);
		bcParameter.ActivateField(&quot;VF SR Area&quot;);
		bcParameter.ActivateField(&quot;VF SR Sub Area&quot;);
		bcParameter.ActivateField(&quot;Condition4&quot;);
		bcParameter.ActivateField(&quot;VFTRCBU Customer Type&quot;); // ACAMBAS 2014-08-14 VFTRCBU WA#27
		bcParameter.SetSearchSpec(&quot;VF Min Calc&quot;, &quot;&lt;&quot; + sAmountOwed + &quot;&quot;);//C_MSP00000305
		bcParameter.SetSearchSpec(&quot;VF Max Calc&quot;, &quot;&gt;&quot; + sAmountOwed + &quot;&quot;);
		bcParameter.SetSearchSpec(&quot;Function&quot;, sFunction);
		//++ ACAMBAS 2014-08-14 VFTRCBU WA#27
		bcParameter.SetSearchSpec(&quot;VFTRCBU Customer Type&quot;, &quot;&apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR_CUSTOMER_TYPE&quot;,&quot;SRCustAll&quot;) + &quot;&apos; OR &apos;&quot; + sAccounType + &quot;&apos;&quot;);
		//-- ACAMBAS 2014-08-14 VFTRCBU WA#27
		bcParameter.ExecuteQuery(ForwardOnly);

		if (!bcParameter.FirstRecord())
		{
			return(&quot;False&quot;);
		}

		sSRType    = bcParameter.GetFieldValue(&quot;VF SR Type&quot;);
		sSRArea    = bcParameter.GetFieldValue(&quot;VF SR Area&quot;);
		sSRSubArea = bcParameter.GetFieldValue(&quot;VF SR Sub Area&quot;);
		sSRGroup   = bcParameter.GetFieldValue(&quot;Condition4&quot;);
		//ESANTOS VFTRCBU-33034
		var sAccountType = bcParameter.GetFieldValue(&quot;VFTRCBU Customer Type&quot;);
		
		//Get TripletNo
		var boTriplet     : BusObject   = TheApplication().GetBusObject(&quot;ACS SR Tripplet&quot;);
		var bcTripletType     : BusComp     = boTriplet.GetBusComp(&quot;ACS SR Type List Of Values&quot;); 
		var bcTripletArea     : BusComp     = boTriplet.GetBusComp(&quot;ACS SR Area List Of Values&quot;); 
		var bcTripletSubArea     : BusComp     = boTriplet.GetBusComp(&quot;ACS SR Sub-Area List Of Values&quot;);
		var sTripletNo = null;
		
		bcTripletType.SetViewMode(AllView);
		bcTripletType.ClearToQuery();
		//bcTripletType.ActivateField(&quot;Name&quot;);
		//bcTripletType.ActivateField(&quot;Market Class&quot;);
		bcTripletType.SetSearchSpec(&quot;Market Class&quot;, sAccountType);
		bcTripletType.SetSearchSpec(&quot;Name&quot;, sSRType);
		bcTripletType.ExecuteQuery(ForwardOnly);
		if(bcTripletType.FirstRecord())
		{
			bcTripletArea.SetViewMode(AllView);
			bcTripletArea.ClearToQuery();
			//bcTripletArea.ActivateField(&quot;Name&quot;);
			bcTripletArea.SetSearchSpec(&quot;Name&quot;, sSRArea);
			bcTripletArea.ExecuteQuery(ForwardOnly);
			if(bcTripletArea.FirstRecord())
			{
				bcTripletSubArea.SetViewMode(AllView);	
				bcTripletSubArea.ClearToQuery();
				bcTripletSubArea.ActivateField(&quot;VF Triplet No&quot;);
				bcTripletSubArea.SetSearchSpec(&quot;Name&quot;, sSRSubArea);
				bcTripletSubArea.ExecuteQuery(ForwardOnly);
				if(bcTripletSubArea.FirstRecord())
				{
					sTripletNo = bcTripletSubArea.GetFieldValue(&quot;VF Triplet No&quot;);
					if(sTripletNo != null)
					psOperationsIn.SetProperty(&quot;Triplet No&quot;, sTripletNo);
				}
			}
			
		}//End ESANTOS VFTRCBU-33034 


		psOperationsIn.SetProperty(&quot;Account Id&quot;, sAccountId);
		psOperationsIn.SetProperty(&quot;Area&quot;, sSRArea);
		psOperationsIn.SetProperty(&quot;Sub Area&quot;, sSRSubArea);
		psOperationsIn.SetProperty(&quot;Type&quot;, sSRType);
		psOperationsIn.SetProperty(&quot;Priority&quot;, sPriority);
		psOperationsIn.SetProperty(&quot;Owner Group&quot;, sSRGroup);
		psOperationsIn.SetProperty(&quot;VF SR Category&quot;,&quot;Standard&quot;);
		psOperationsIn.SetProperty(&quot;Description&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DESCRIPTION&quot;,sDescription));
		psOperationsIn.SetProperty(&quot;Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;));

		bsOperations.InvokeMethod(&quot;CreateSR&quot;, psOperationsIn, psOperationsOut);

		sSrvReqId = psOperationsOut.GetProperty (&quot;Service Request Id&quot;)

		bcSrvReq.SetViewMode(AllView);
		bcSrvReq.ClearToQuery();
		bcSrvReq.ActivateField(&quot;VF SR Type Call&quot;);
		bcSrvReq.ActivateField(&quot;VF Billing Account Id&quot;);
		bcSrvReq.ActivateField(&quot;VF SR Toggle&quot;);
		bcSrvReq.SetSearchSpec(&quot;Id&quot;, sSrvReqId);
		bcSrvReq.ExecuteQuery(ForwardOnly);

		if (!bcSrvReq.FirstRecord())
		{
			return(&quot;False&quot;);
		}

		bcSrvReq.SetFieldValue(&quot;VF SR Type Call&quot;, sFunction);
		bcSrvReq.SetFieldValue(&quot;VF Billing Account Id&quot;, sBillingAccount);
		bcSrvReq.SetFieldValue(&quot;VF SR Toggle&quot;, &quot;FieldVisible&quot;);
		bcSrvReq.WriteRecord();

		return(&quot;True&quot;);
	}
	finally
	{
		bcSrvReq        = null;
		boSrvReq        = null;
		psOperationsOut = null;
		psOperationsIn  = null;
		bsOperations    = null;
		bcParameter     = null;
		boParameter     = null;	
	}
}"
			   SEQUENCE="7"
			   UPDATED="08/29/2016 14:04:20"
			   UPDATED_BY="ESANTOS"
			   CREATED="06/22/2011 17:53:12"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateServiceRequest"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateServiceRequest (Inputs, Outputs)
{
	try
	{
		var boParameters : BusObject = TheApplication ().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameters : BusComp = boParameters.GetBusComp (&quot;ACS NI Parameter&quot;);
		var psInputs  : PropertySet;
		var psOutputs : PropertySet;
		var bs : Service;
		var strServiceRequestType        = &quot;&quot;;
		var strServiceRequestArea        = &quot;&quot;;
		var strServiceRequestSubArea     = &quot;&quot;;
		var strServiceRequestStatus      = &quot;&quot;;
		var strServiceRequestDescription1 = &quot;&quot;;
		var strServiceRequestDescription2 = &quot;&quot;;		
		var strParameterSrcExpr       = &quot;&quot;;
		var strParameterSrcExprIDD81more = &quot;&quot;;
		var strParameterSrcExprIDD81less = &quot;&quot;;
		var strOwnTeam                = &quot;&quot;;
		var strDunningStep            = Inputs.GetProperty (&quot;DunningStep&quot;);
		var strAccountId              = Inputs.GetProperty (&quot;Account Id&quot;);
		var strBACode                 = Inputs.GetProperty (&quot;BA Code&quot;);
		var strPriority               = Inputs.GetProperty (&quot;Priority&quot;);
		var strAmountOwe			  = Inputs.GetProperty (&quot;Amount Owed&quot;);
		
		strParameterSrcExpr = &quot;[Function] = &apos;Dunning&apos; AND [Name] = &apos;CreateServiceRequest&apos; AND [Value] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,strDunningStep)+&quot;&apos;&quot;;
		strParameterSrcExprIDD81less = &quot;[Function] = &apos;Dunning&apos; AND [Name] = &apos;CreateServiceRequest&apos; AND [Value] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,strDunningStep)+&quot;&apos; AND [Condition6] = &apos;&lt; 50&apos;&quot;;
		strParameterSrcExprIDD81more = &quot;[Function] = &apos;Dunning&apos; AND [Name] = &apos;CreateServiceRequest&apos; AND [Value] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,strDunningStep)+&quot;&apos; AND [Condition6] = &apos;&gt; 50&apos;&quot;;										
		bcParameters.ClearToQuery ();
		bcParameters.SetViewMode (AllView);
		//VFTK Junaid 20120519 - Scripting 15 check not needed as search expr has hard coded values and lookup value
		if(strDunningStep == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,&quot;IDD81&quot;) &amp;&amp; strAmountOwe &lt; 50)
		{
		bcParameters.SetSearchExpr(strParameterSrcExprIDD81less);
		}
		else if(strDunningStep == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,&quot;IDD81&quot;) &amp;&amp; strAmountOwe &gt; 50)
		{
		bcParameters.SetSearchExpr(strParameterSrcExprIDD81more);
		}
		else
		{
		bcParameters.SetSearchExpr (strParameterSrcExpr);
		}
		bcParameters.ExecuteQuery (ForwardOnly);
					
		if (bcParameters.FirstRecord ())
		{
			strServiceRequestType        = bcParameters.GetFieldValue (&quot;Condition1&quot;);
			strServiceRequestArea        = bcParameters.GetFieldValue (&quot;Condition2&quot;);
			strServiceRequestSubArea     = bcParameters.GetFieldValue (&quot;Condition3&quot;);
			strServiceRequestStatus      = bcParameters.GetFieldValue (&quot;Condition4&quot;);
			strServiceRequestDescription1 = bcParameters.GetFieldValue (&quot;Condition5&quot;);
			strOwnTeam  				 = bcParameters.GetFieldValue(&quot;Comments&quot;);
			//Create an ServiceRequest with the above values
			psInputs  = TheApplication ().NewPropertySet();
			psOutputs = TheApplication ().NewPropertySet();
			bs = TheApplication().GetService(&quot;ACS General Operations&quot;);
			
			psInputs.SetProperty (&quot;Account Id&quot;, strAccountId);
			psInputs.SetProperty (&quot;Area&quot;, strServiceRequestArea);
			psInputs.SetProperty (&quot;Sub Area&quot;, strServiceRequestSubArea);
			psInputs.SetProperty (&quot;Type&quot;, strServiceRequestType);
			psInputs.SetProperty (&quot;Priority&quot;, strPriority);
			psInputs.SetProperty (&quot;Owner Group&quot;, strOwnTeam);
			psInputs.SetProperty (&quot;Description&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DESCRIPTION&quot;,strServiceRequestDescription1));
			psInputs.SetProperty (&quot;Status&quot;, strServiceRequestStatus);
			bs.InvokeMethod (&quot;CreateSR&quot;, psInputs, psOutputs);
		}
		else
		{
			TheApplication ().RaiseErrorText (&quot;VF Dunning BS :: CreateServiceRequest :: Parameter is not maintained&quot;);
		}

	}
	finally
	{
		bcParameters	= null;
		boParameters	= null;
		psInputs		= null;
		psOutputs		= null;
		bs				= null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="12/23/2015 15:52:59"
			   UPDATED_BY="JCARVALHO"
			   CREATED="07/27/2010 13:32:41"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DunningMsgValidation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DunningMsgValidation(Inputs,Activity,Outputs)
{
	try
	{
		var chrInputs : PropertySet = TheApplication().NewPropertySet();
		var chrOutputs : PropertySet = TheApplication().NewPropertySet();
		var strCustCode = Inputs.GetProperty(&quot;Account Number&quot;);
		var strBillCode = Inputs.GetProperty(&quot;Billing Account Code&quot;);
		var strInvoiceId = Inputs.GetProperty(&quot;Statement Number&quot;);
		var strPriority = Inputs.GetProperty(&quot;Priority&quot;);
		var strSource = Inputs.GetProperty(&quot;Source&quot;);
		var strActionType = Inputs.GetProperty(&quot;Action Type&quot;);
		var strOrderReason = Inputs.GetProperty(&quot;Order Reason Code&quot;);
		var strStatus = Inputs.GetProperty(&quot;Status&quot;);
		var strAlertType = Inputs.GetProperty(&quot;Alert Type Code&quot;);
		var strDunningstep = Activity.GetProperty(&quot;Dunning Step&quot;);
		var strCategory = Activity.GetProperty(&quot;Category&quot;);
		var strDunScenario = Inputs.GetProperty(&quot;VF Dunning Scenario&quot;);
		var strDunActStatus = Activity.GetProperty(&quot;VF Dunning Action Status&quot;);
		var strEM173 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;173&quot;);
		var strEM174 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;174&quot;);
		var strEM172 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;172&quot;);
		var strEM177 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;177&quot;);
		var strEM178 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;178&quot;);
		var strEM179 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;179&quot;);
		var strEM180 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;180&quot;);
		var strEM181 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;181&quot;);
		var strEM182 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;182&quot;);
		var strEM183 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;183&quot;);
		var strEM184 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;184&quot;);
		var strEM185 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;347&quot;);//WP09
		var strEM186 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;348&quot;);//WP09
		chrInputs.SetProperty(&quot;Invoice Id&quot;,strInvoiceId);
		chkspecialchar(chrInputs,chrOutputs);
		if(isNaN(strCustCode) == true)
		{
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28023&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM173)
		}
		else if(isNaN(strBillCode) == true)
		{
		// SBL-28024: Invalid Billing Account
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28024&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM174)		 
		}
		else if(strInvoiceId.length == 0 || chrOutputs.GetProperty(&quot;IsValid&quot;) == &quot;FALSE&quot;)
		{
		// SBL-28022: Invalid Invoice ID
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28022&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM172)  
		}
		else if(strPriority.length &gt; 0 &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_PRIORITY&quot;,strPriority) == &quot;&quot;)
		{
		// SBL-28027: Priority value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28027&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM177)  
		}
		else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_SOURCE&quot;,strSource) == &quot;&quot;)
		{
		// SBL-28028: Source value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28028&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM178)  
		}
		else if(strActionType.length &gt; 0 &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,strActionType) == &quot;&quot;)
		{
		// SBL-28029: Action Type value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28029&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM179)   
		}
		else if(strOrderReason.length &gt; 0 &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ORDER_CODE&quot;,strOrderReason) == &quot;&quot;)
		{
		// SBL-28030: Order Reason value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28030&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM180);   
		}
		else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_STATUS&quot;,strStatus) == &quot;&quot;)
		{
		// SBL-28031: Status value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28031&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM181);  
		}
		else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;CUT_FRAUD_TYPE&quot;,strAlertType) == &quot;&quot;)
		{
		// SBL-28032: Alert Type value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28032&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM182);  
		}
		else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,strDunningstep) == &quot;&quot;)
		{
		// SBL-28033 Dunning Step value is not valid 
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28033&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM183);  
		}
		else if(TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TODO_TYPE&quot;,strCategory) == &quot;&quot;)
		{
		// SBL-28034 Category value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;SBL-28034&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM184)  		
		}
		else if(strDunScenario.length &gt; 0 &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUN_SCENARIO&quot;,strDunScenario) == &quot;&quot;)
		{
		// SBL-28034 Dunning Scenario value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;VFTK-SBL-28035&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM185)  		
		}
		else if(strDunActStatus.length &gt; 0 &amp;&amp; TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUN_ACTION_STATUS&quot;,strDunActStatus) == &quot;&quot;)
		{
		// SBL-28034 Dunning Scenario value is not valid
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,&quot;VFTK-SBL-28036&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,strEM186)  		
		}
		else
		{
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;0&quot;);
		}
	 }
	 finally
	 {
		chrInputs 	= null;
		chrOutputs 	= null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="12/23/2015 15:52:59"
			   UPDATED_BY="JCARVALHO"
			   CREATED="08/12/2010 08:07:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DuplicateAlert"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DuplicateAlert(sExternalRequestId)
{
	try
	{
		var boAlert  : BusObject = TheApplication().GetBusObject(&quot;CUT Credit Management&quot;);
		var bcAlert  : BusComp   = boAlert.GetBusComp(&quot;CUT Credit Alert&quot;);
		var boAction : BusObject = TheApplication().GetBusObject(&quot;CUT Credit Management&quot;);
		var bcAction : BusComp   = boAction.GetBusComp(&quot;Activity Plan (No Sort)&quot;);

		if (sExternalRequestId == null || sExternalRequestId == &quot;&quot;)
		{
			return(false);
		}

		bcAlert.SetViewMode(AllView);
		bcAlert.ClearToQuery();
		bcAlert.SetSearchSpec(&quot;Alert Number&quot;, sExternalRequestId);
		bcAlert.ExecuteQuery(ForwardOnly);

		if (bcAlert.FirstRecord())
		{
			return(true);
		}

		bcAction.SetViewMode(AllView);
		bcAction.ClearToQuery();
		bcAction.SetSearchSpec(&quot;Activity UID&quot;, sExternalRequestId);
		bcAction.ExecuteQuery(ForwardOnly);

		if (bcAction.FirstRecord())
		{
			return(true);
		}

		return(false);
	}
	catch(oExcep)
	{
		return(false);
	}
	finally
	{
		bcAction = null;
		boAction = null;
		bcAlert  = null;
		boAlert  = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="12/23/2015 15:52:59"
			   UPDATED_BY="JCARVALHO"
			   CREATED="12/23/2015 15:44:40"
			   CREATED_BY="JCARVALHO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InsertAlertNew"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InsertAlertNew (Inputs, Outputs)
{
	try
	{
		TheApplication().SetProfileAttr(&quot;InsertAlert&quot;,&quot;Y&quot;);

		var psValidationOut : PropertySet = TheApplication().NewPropertySet();
		var boAccount       : BusObject   = TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAccount       : BusComp     = null;
		var boBillAccount   : BusObject   = TheApplication().GetBusObject(&quot;TELCO OM Order Entry (Thin)&quot;);
		var bcBillAccount   : BusComp     = null;
		var boCreditMgmt    : BusObject   = TheApplication().GetBusObject(&quot;CUT Credit Management&quot;);
		var bcAlert         : BusComp     = null;
		var bcAction        : BusComp     = null;
		var psAlert         : PropertySet = Inputs.GetChild(0).GetChild(0).GetChild(0);
		var psActivity      : PropertySet = psAlert.GetChild(0).GetChild(0);
		var psSetOutputsIn  : PropertySet = TheApplication().NewPropertySet();
		var psSetOutputsOut : PropertySet = TheApplication().NewPropertySet();

		var sCustomerAccount   = psAlert.GetProperty(&quot;Account Number&quot;);
		var sBillingAccount    = psAlert.GetProperty(&quot;Billing Account Code&quot;);
		var sSource            = psAlert.GetProperty(&quot;Source&quot;);
		var sInvoiceNumber     = psAlert.GetProperty(&quot;Statement Number&quot;);
		var sAlertType         = psAlert.GetProperty(&quot;Alert Type Code&quot;);
		var sCollectableId     = psAlert.GetProperty(&quot;VF Collectable Id&quot;);
		var sInvoiceAmount     = psAlert.GetProperty(&quot;Total Invoice Amount&quot;);
		var sActionType        = psAlert.GetProperty(&quot;Action Type&quot;);
		var sOrderReason       = psAlert.GetProperty(&quot;Order Reason Code&quot;);
		var sInvoiceDate       = psAlert.GetProperty(&quot;Statement Date&quot;);
		var sDunningScenario   = psAlert.GetProperty(&quot;VF Dunning Scenario&quot;); //WP09 ends
		var sAlertPriority     = psAlert.GetProperty(&quot;Priority&quot;);
		var sAlertStatus       = psAlert.GetProperty(&quot;Status&quot;);
		var sAlertComments     = psAlert.GetProperty(&quot;Comments&quot;);
		var sAmountOwed        = psAlert.GetProperty(&quot;Amount Owed&quot;);
		var sCutoffdate        = psAlert.GetProperty(&quot;VF Cutoff Date&quot;);
		var sExternalReqId     = psAlert.GetProperty(&quot;Alert Number&quot;);
		var sDunningStep       = psActivity.GetProperty(&quot;Dunning Step&quot;);
		var sActionStatus      = psActivity.GetProperty(&quot;VF Dunning Action Status&quot;);
		var sActionDesc        = psActivity.GetProperty(&quot;Description&quot;);
		var	sActionCategory    = psActivity.GetProperty(&quot;Category&quot;);
		var sValidationStatus  = &quot;&quot;;
		var sErrorDescription  = &quot;&quot;;
		var sAccountId         = &quot;&quot;;
		var sAccountType       = &quot;&quot;;
		var sBillingAccountId  = &quot;&quot;;
		var sBillingAccountYTS = &quot;&quot;;
		var sSkipQuery         = &quot;N&quot;;
		var sAlertSearchExpr   = &quot;&quot;;
		var sActionSearchExpr  = &quot;&quot;;
		var bCreateSR          = false;
		var bCloseSR           = false;
		var sAlertId           = &quot;&quot;;
		var sCheckSRCreation   = &quot;&quot;;
		var sActionId          = &quot;&quot;;

		var sStatusOpen    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_STATUS&quot;,&quot;Open&quot;);
		var sTypeNone      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,&quot;None&quot;);
		var sActionTypeVal = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,sActionType);
		var sStatusSkipped = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUN_ACTION_STATUS&quot;,&quot;Skipped&quot;);

		DunningMsgValidation(psAlert, psActivity, psValidationOut);
		sValidationStatus = psValidationOut.GetProperty(&quot;StatusCode&quot;);
		if (sValidationStatus == &quot;1&quot;)
		{
			Outputs.SetProperty(&quot;StatusCode&quot;,       sValidationStatus);
			Outputs.SetProperty(&quot;ErrorCode&quot;,        psValidationOut.GetProperty(&quot;ErrorCode&quot;));
			Outputs.SetProperty(&quot;ErrorDescription&quot;, psValidationOut.GetProperty(&quot;ErrorDescription&quot;));
			return;
		}

		bcAccount = boAccount.GetBusComp(&quot;VF Account Light&quot;);
		bcAccount.SetViewMode(AllView);
		bcAccount.ClearToQuery();
		bcAccount.ActivateField(&quot;Market Class&quot;);
		bcAccount.SetSearchSpec(&quot;CSN&quot;, sCustomerAccount);
		bcAccount.ExecuteQuery(ForwardOnly);
		if (!bcAccount.FirstRecord())
		{
			sErrorDescription = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;175&quot;);
			Outputs.SetProperty(&quot;StatusCode&quot;,       &quot;1&quot;);
			Outputs.SetProperty(&quot;ErrorCode&quot;,        &quot;SBL-28025&quot;);
			Outputs.SetProperty(&quot;ErrorDescription&quot;, sErrorDescription);
			return;
		}

		sAccountId   = bcAccount.GetFieldValue(&quot;Id&quot;);
		sAccountType = bcAccount.GetFieldValue(&quot;Market Class&quot;);

		bcBillAccount = boBillAccount.GetBusComp(&quot;VFTRCBU Billing Account Simple&quot;);
		bcBillAccount.SetViewMode(AllView);
		bcBillAccount.ClearToQuery();
		bcBillAccount.ActivateField(&quot;VF YTS Source&quot;);
		bcBillAccount.SetSearchSpec(&quot;Account Code&quot;,      sBillingAccount);
		bcBillAccount.SetSearchSpec(&quot;Parent Account Id&quot;, sAccountId);
		bcBillAccount.ExecuteQuery(ForwardOnly);
		if (!bcBillAccount.FirstRecord())
		{
			sErrorDescription = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;176&quot;);
			Outputs.SetProperty(&quot;StatusCode&quot;,       &quot;1&quot;);
			Outputs.SetProperty(&quot;ErrorCode&quot;,        &quot;SBL-28026&quot;);
			Outputs.SetProperty(&quot;ErrorDescription&quot;, sErrorDescription);
			return;
		}

		sBillingAccountId  = bcBillAccount.GetFieldValue(&quot;Id&quot;);
		sBillingAccountYTS = bcBillAccount.GetFieldValue(&quot;VF YTS Source&quot;);

		if (DuplicateAlert(sExternalReqId))
		{
			goto End;
		}

		if (sDunningStep == &quot;OutDunning&quot; &amp;&amp; sBillingAccountYTS == &quot;Y&quot;)
		{
			bcBillAccount.SetFieldValue(&quot;VF YTS Source&quot;, &quot;N&quot;);
			bcBillAccount.WriteRecord();
		}
		if (sDunningStep == &quot;TILLIDD100X&quot; &amp;&amp;
			(sBillingAccountYTS == null || sBillingAccountYTS == &quot;&quot; || sBillingAccountYTS == &quot;N&quot;))
		{
			bcBillAccount.SetFieldValue(&quot;VF YTS Source&quot;, &quot;Y&quot;);
			bcBillAccount.WriteRecord();
		}

		bcAlert  = boCreditMgmt.GetBusComp(&quot;CUT Credit Alert&quot;);
		bcAction = boCreditMgmt.GetBusComp(&quot;Activity Plan (No Sort)&quot;);//Modify BC Performance (Activity Plan)

		switch(sDunningStep)
		{
			case &quot;CloseLiveAgentCallSR&quot;: case &quot;CloseDebtRecSR&quot;:
				CloseSR(sDunningStep, sBillingAccount);
				break;
			case &quot;TILLIDD100X&quot;:
				if (sSource == &quot;Kenan&quot;) //VFTRCBU-28939 RPIRES: changed from &apos;YTS&apos; as per CR03 FD
					CloseSR(sDunningStep, sBillingAccount);
				break;
			case &quot;InDunning&quot;:
				sSkipQuery = &quot;Y&quot;;
				break;
			case &quot;OutDunning&quot;: case &quot;Shuffle&quot;: case &quot;SoftResc_Payment&quot;: case &quot;HarsResc_Payment&quot;:
				sSkipQuery = &quot;Y&quot;;
				if (sDunningStep == &quot;OutDunning&quot;)
					CloseSR(sDunningStep, sBillingAccount);
				break;
			case &quot;AutoDialer&quot;: case &quot;AutoDialler2-1&quot;: case &quot;AutoDialler2-2&quot;: case &quot;AutoDialler2-3&quot;:
			case &quot;AutoDialer1&quot;: case &quot;AutoDialer2&quot;: case &quot;AutoDialer3&quot;: case &quot;AutoDialer4&quot;:
			case &quot;AutoDialer5&quot;: case &quot;AutoDialer6&quot;: case &quot;AutoDialer7&quot;: case &quot;AutoDialer8&quot;:
				sSkipQuery = &quot;Y&quot;;
				if (sSource == &quot;AutoDialer&quot;)
				{
					sAlertSearchExpr = &quot;[Billing Account By Id]=&apos;&quot; + sBillingAccount +
									   &quot;&apos; AND [VF Status]=&apos;&quot; + sStatusOpen + &quot;&apos;&quot;;
					bcAlert.SetViewMode(AllView);
					bcAlert.ClearToQuery();
					bcAlert.SetSearchExpr(sAlertSearchExpr);

					sActionSearchExpr = &quot;[Dunning Step]=&apos;&quot; + sDunningStep +
										&quot;&apos; AND [VF Dunning Action Status]=&apos;&quot; + sActionStatus +
										&quot;&apos; AND [VF Invoice No]=&apos;&quot; + sInvoiceNumber + &quot;&apos;&quot;;
					bcAction.SetViewMode(AllView);
					bcAction.ClearToQuery();
					bcAction.ActivateField(&quot;Description&quot;);
					bcAction.SetSearchExpr(sActionSearchExpr);
					bcAction.SetSortSpec(&quot;Planned&quot;);

					bcAlert.ExecuteQuery(ForwardOnly);

					if (bcAlert.FirstRecord()) 
					{
						if (bcAction.FirstRecord())
						{
							bcAction.SetFieldValue(&quot;Description&quot;, sActionDesc);
							bcAction.WriteRecord();
							goto End;
						}
					}
					else
						goto End;
				}
				break;
			case &quot;SMS2&quot;: case &quot;Mail2&quot;: case &quot;E-mailToAM1-1&quot;: case &quot;E-mailToAM1-2&quot;:
			case &quot;SMS3-1&quot;: case &quot;Mail3-1&quot;: case &quot;SMS3-2&quot;: case &quot;Mail3-2&quot;:
			case &quot;SMS4&quot;: case &quot;Mail4&quot;: case &quot;E-mailToAM2&quot;: case &quot;Pre-disc_letter&quot;:
			case &quot;SoftCall&quot;: case &quot;SMS3-3&quot;: case &quot;Mail3-3&quot;: case &quot;YTS&quot;:
			case &quot;PromiseCreated&quot;: case &quot;PromiseBroken&quot;: case &quot;Pre-adv_letter&quot;:
			case &quot;Barring&quot;: case &quot;Suspension&quot;: case &quot;Cancellation&quot;: case &quot;Unbarring&quot;:
			case &quot;Resume&quot;: case &quot;ResumeMT&quot;: case &quot;Mail1&quot;: case &quot;Mail3&quot;: case &quot;Mail5&quot;:
			case &quot;Mail6&quot;: case &quot;Mail7&quot;: case &quot;Mail8&quot;: case &quot;SMS1&quot;: case &quot;SMS3&quot;:
			case &quot;SMS5&quot;: case &quot;SMS6&quot;: case &quot;SMS7&quot;: case &quot;SMS8&quot;: 
				sSkipQuery = &quot;Y&quot;;
				if (sDunningStep == &quot;DebtRecSR&quot; || sDunningStep == &quot;SoftCall&quot;)
					bCreateSR = true;							
				if (sDunningStep == &quot;DebtRecSR&quot;)
					bCloseSR = true;
				break;
			case &quot;DebtRecSR&quot;:
				CloseSR(&quot;SoftCall&quot;, sBillingAccount);
				bCloseSR  = false;
				bCreateSR = true;
				break;
		}

		if (sSource == &quot;Kenan&quot; &amp;&amp; (sCollectableId == null || sCollectableId == &quot;&quot;))
		{
			sAlertSearchExpr = &quot;[VF Source]=&apos;&quot; + sSource + &quot;&apos; AND [Statement Id]=&apos;&quot; + sInvoiceNumber + &quot;&apos;&quot;;					
		}
		else if (sSource == &quot;Kenan&quot;)
		{										
			sAlertSearchExpr = &quot;[VF Collectable Id]=&apos;&quot; + sCollectableId + &quot;&apos; AND [Billing Account By Id]=&apos;&quot; + sBillingAccount + &quot;&apos;&quot;;
			if (sDunningStep == &quot;InDunning&quot;)
			{
				sAlertSearchExpr = &quot;[Billing Account By Id]=&apos;&quot; + sBillingAccount + &quot;&apos; AND ([VF Collectable Id]=&apos;&quot; + sCollectableId +
								   &quot;&apos; OR (([Statement Id]=&apos;&quot; + sInvoiceNumber + &quot;&apos; AND [Statement Id] NOT LIKE &apos;S*&apos;) AND [VF Source]=&apos;Kenan&apos;&quot; +
								   &quot; AND [VF Status]=&apos;&quot; + sStatusOpen + &quot;&apos; AND ([VF Collectable Id]=&apos;&apos; OR [VF Collectable Id] IS NULL)))&quot;;
			}
		}
		else if (sSource == &quot;YTS&quot;)
		{
			sAlertSearchExpr = &quot;[Statement Id]=&apos;&quot; + sInvoiceNumber + &quot;&apos; AND [VF Status]=&apos;&quot; + sStatusOpen + &quot;&apos;&quot;;
		}
		else if (sSource == &quot;AutoDialer&quot;)
		{
			sAlertSearchExpr = &quot;[Billing Account By Id]=&apos;&quot; + sBillingAccount + &quot;&apos; AND [VF Status]=&apos;&quot; + sStatusOpen + &quot;&apos;&quot;;
		}						

		bcAlert.SetViewMode(AllView);
		bcAlert.ClearToQuery();
		bcAlert.ActivateField(&quot;Amount Owed&quot;);
		bcAlert.ActivateField(&quot;Statement Id&quot;);
		bcAlert.ActivateField(&quot;Statement Date&quot;);
		bcAlert.ActivateField(&quot;Billing Account By Id&quot;);
		bcAlert.ActivateField(&quot;Account Number&quot;);
		bcAlert.ActivateField(&quot;Total Invoice Amount&quot;);	
		bcAlert.ActivateField(&quot;VF Status&quot;);
		bcAlert.ActivateField(&quot;VF Priority&quot;);
		bcAlert.ActivateField(&quot;VF Action Type&quot;);
		bcAlert.ActivateField(&quot;Alert Type Code&quot;);
		bcAlert.ActivateField(&quot;Comments&quot;);
		bcAlert.ActivateField(&quot;VF Source&quot;);
		bcAlert.ActivateField(&quot;Statement Date&quot;);
		bcAlert.ActivateField(&quot;Order Reason Code&quot;);	
		bcAlert.ActivateField(&quot;VF Dunning Scenario&quot;);
		bcAlert.ActivateField(&quot;VF Collectable Id&quot;);
		bcAlert.ActivateField(&quot;VF Cutoff Date&quot;);
		bcAlert.ActivateField(&quot;VF Root BA Id&quot;);
		bcAlert.SetSearchExpr(sAlertSearchExpr);
		bcAlert.ExecuteQuery(ForwardOnly);

		if (bcAlert.FirstRecord()) 
		{
			if (sDunningStep == &quot;Shuffle&quot; || sDunningStep== &quot;OutDunning&quot;)
			{
				bcAlert.SetFieldValue(&quot;VF Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_STATUS&quot;,&quot;Closed&quot;));
				bcAlert.SetFieldValue(&quot;VF Collectable Id&quot;, sCollectableId);
			}
			if (sDunningStep == &quot;InDunning&quot;)
			{
				bcAlert.SetFieldValue(&quot;VF Collectable Id&quot;, sCollectableId);
			}
			if (sDunningStep == &quot;InDunning&quot; || sDunningStep == &quot;SoftResc_Payment&quot; || sDunningStep == &quot;HarsResc_Payment&quot;)
			{
				bcAlert.SetFieldValue(&quot;Total Invoice Amount&quot;, sInvoiceAmount);
			}
			if (sDunningStep == &quot;PromiseCreated&quot; || sDunningStep == &quot;Barring&quot; || sDunningStep == &quot;Suspension&quot; || sDunningStep == &quot;Cancellation&quot; ||
				sDunningStep == &quot;Unbarring&quot; || sDunningStep == &quot;Resume&quot; || sDunningStep == &quot;ResumeMT&quot; || sDunningStep == &quot;InDunning&quot; || sDunningStep == &quot;Frozen2Limited&quot;)
			{
				if (sActionType != &quot;&quot; &amp;&amp; sActionType != sTypeNone)
					bcAlert.SetFieldValue(&quot;VF Action Type&quot;, sActionTypeVal);
				if (sOrderReason != &quot;&quot;)
					bcAlert.SetFieldValue(&quot;Order Reason Code&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ORDER_CODE&quot;,sOrderReason));
				bcAlert.WriteRecord();

				if (sDunningStep == &quot;PromiseCreated&quot; || sDunningStep == &quot;Barring&quot; || sDunningStep == &quot;Suspension&quot; || sDunningStep == &quot;Cancellation&quot;)
				{
					sActionSearchExpr = &quot;[Dunning Step]=&apos;&quot; + sDunningStep + &quot;&apos; AND [VF Dunning Action Status]=&apos;&quot; + sStatusSkipped + &quot;&apos;&quot;;

					bcAction.ClearToQuery();
					bcAction.SetViewMode(AllView);
					bcAction.ActivateField(&quot;VF Dunning Action Status&quot;);
					bcAction.ActivateField(&quot;Description&quot;);
					bcAction.SetSearchExpr(sActionSearchExpr);
					bcAction.SetSortSpec(&quot;Planned&quot;);
					bcAction.ExecuteQuery(ForwardOnly);
					if(bcAction.FirstRecord())
					{
						if (sDunningStep == &quot;PromiseCreated&quot;)
							bcAction.SetFieldValue(&quot;VF Dunning Action Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUN_ACTION_STATUS&quot;,&quot;Completed&quot;));
						if (sDunningStep == &quot;Barring&quot; || sDunningStep == &quot;Suspension&quot; || sDunningStep == &quot;Cancellation&quot;)
							bcAction.SetFieldValue(&quot;Description&quot;, sActionDesc);
						bcAction.WriteRecord();
					}
				}
			}

			bcAlert.SetFieldValue(&quot;Statement Id&quot;, sInvoiceNumber);
			bcAlert.SetFieldValue(&quot;Statement Date&quot;, sInvoiceDate);
			bcAlert.SetFieldValue(&quot;VF Dunning Scenario&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUN_SCENARIO&quot;,sDunningScenario));
			bcAlert.WriteRecord();	
		}
		else
		{
			bcAlert.NewRecord(NewAfter);	
			bcAlert.SetFieldValue(&quot;Statement Id&quot;, sInvoiceNumber);
			bcAlert.SetFieldValue(&quot;Billing Account By Id&quot;, sBillingAccount);
			bcAlert.SetFieldValue(&quot;VF Root BA Id&quot;, sBillingAccountId);
			bcAlert.SetFieldValue(&quot;Account By Id&quot;, sAccountId);
			bcAlert.SetFieldValue(&quot;Total Invoice Amount&quot;, sInvoiceAmount);
			bcAlert.SetFieldValue(&quot;VF Priority&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_PRIORITY&quot;,sAlertPriority));
			bcAlert.SetFieldValue(&quot;VF Status&quot;,  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_STATUS&quot;,sAlertStatus));
			bcAlert.SetFieldValue(&quot;VF Action Type&quot;,sActionTypeVal);
			bcAlert.SetFieldValue(&quot;Alert Type Code&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;CUT_FRAUD_TYPE&quot;,sAlertType));
			bcAlert.SetFieldValue(&quot;Comments&quot;, sAlertComments);
			bcAlert.SetFieldValue(&quot;Amount Owed&quot;, sAmountOwed);
			bcAlert.SetFieldValue(&quot;VF Source&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_SOURCE&quot;,sSource));
			bcAlert.SetFieldValue(&quot;Statement Date&quot;, sInvoiceDate);
			bcAlert.SetFieldValue(&quot;Order Reason Code&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ORDER_CODE&quot;,sOrderReason));
			bcAlert.SetFieldValue(&quot;VF Collectable Id&quot;, sCollectableId);
			bcAlert.SetFieldValue(&quot;VF Cutoff Date&quot;, sCutoffdate);
			bcAlert.SetFieldValue(&quot;VF Dunning Scenario&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUN_SCENARIO&quot;,sDunningScenario));
			bcAlert.WriteRecord();
		}

		sAlertId = bcAlert.GetFieldValue(&quot;Id&quot;);
		sCheckSRCreation = CheckSRCreation(sAmountOwed, sDunningStep, sAccountType);
		sActionId = InsertRecords(boCreditMgmt, psAlert, sAlertId, sAccountId, sSkipQuery, sCheckSRCreation, &quot;N&quot;);

		if (sDunningStep == &quot;InDunning&quot; &amp;&amp; sSource == &quot;Kenan&quot;)
			CloseWACreditAlert(sBillingAccount, sInvoiceNumber);

		SetAlertExternalRequestId(sAlertId, sActionId, sExternalReqId);

	End:
		Outputs.SetProperty(&quot;ActionId&quot;,         sActionId);
		Outputs.SetProperty(&quot;StatusCode&quot;,       &quot;0&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,        &quot;0&quot;);
		Outputs.SetProperty(&quot;ErrorDescription&quot;, &quot;&quot;);

		if (bCreateSR)
			CreateSR(sAmountOwed, sBillingAccount, sDunningStep, sAlertPriority, sActionDesc, sAccountId, sAccountType);
		if (bCloseSR)
			CloseSR(sDunningStep,sBillingAccount);
		if (sDunningStep != &quot;InDunning&quot;)
		{
			psSetOutputsIn.SetProperty(&quot;strBillingAccountCode&quot;, sBillingAccount);
			SetOutput(psSetOutputsIn, psSetOutputsOut);
			psSetOutputsOut.GetChild(0).GetChild(0).SetType(&quot;VFDunningOutput&quot;);
			Outputs.AddChild(psSetOutputsOut.GetChild(0).GetChild(0));
		}					
	}
	catch(e)
	{	
		Outputs.SetProperty(&quot;ActionId&quot;,         sActionId);
		Outputs.SetProperty(&quot;ErrorCode&quot;,        e.errCode);
		Outputs.SetProperty(&quot;ErrorDescription&quot;, e.toString());
		Outputs.SetProperty(&quot;StatusCode&quot;,       &quot;1&quot;);
	}
	finally
	{
		psSetOutputsOut = null;
		psSetOutputsIn  = null;
		psActivity      = null;
		psAlert         = null;
		bcAction        = null;
		bcAlert         = null;
		boCreditMgmt    = null;
		bcBillAccount   = null;
		boBillAccount   = null;
		bcAccount       = null;
		boAccount       = null;
		psValidationOut = null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="03/01/2017 18:54:58"
			   UPDATED_BY="JSANTOS"
			   CREATED="10/20/2011 20:32:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InsertRecords"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InsertRecords(boCreditMgmt,psAlert,sAlertId,sAccountId,sSkipQuery,sCheckSRCreation,sResumeDone)
{
	try
	{
		var bcAction    : BusComp     = boCreditMgmt.GetBusComp(&quot;Activity Plan (No Sort)&quot;);//Modify BC Performance (Activity Plan)
		var boParameter : BusObject   = TheApplication ().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp     = boParameter.GetBusComp (&quot;ACS NI Parameter&quot;);
		var psManageIn  : PropertySet = TheApplication().NewPropertySet();
		var psManageOut : PropertySet = TheApplication().NewPropertySet();
		var psActivity  : PropertySet = psAlert.GetChild(0).GetChild(0);

		var sActionId            = &quot;&quot;;
		var sSource              = psAlert.GetProperty(&quot;Source&quot;);
		var sInvoiceDate         = psAlert.GetProperty(&quot;Statement Date&quot;);
		var sActionType          = psAlert.GetProperty(&quot;Action Type&quot;);
		var sInvoiceNumber       = psAlert.GetProperty(&quot;Statement Number&quot;);
		var sCollectableId       = psAlert.GetProperty(&quot;VF Collectable Id&quot;);
		var sCustomerAccount     = psAlert.GetProperty(&quot;Account Number&quot;);
		var sBillingAccount      = psAlert.GetProperty(&quot;Billing Account Code&quot;);
		var sPriority            = psAlert.GetProperty(&quot;Priority&quot;);
		var sAlertSatus          = psAlert.GetProperty(&quot;Status&quot;);
		var sOrderReasonCode     = psAlert.GetProperty(&quot;Order Reason Code&quot;);
		var sAlertTypeCode       = psAlert.GetProperty(&quot;Alert Type Code&quot;);
		var sDunningStep         = psActivity.GetProperty(&quot;Dunning Step&quot;);
		var sDescription	  	 = psActivity.GetProperty(&quot;Description&quot;);
		var sActionStatus   	 = psActivity.GetProperty(&quot;VF Dunning Action Status&quot;);
		var sActionDate 		 = psActivity.GetProperty(&quot;Action Date&quot;);
		var sDunnActionId        = psActivity.GetProperty(&quot;Action Id&quot;);
		var sCategory    	     = psActivity.GetProperty(&quot;Category&quot;);
		var sScheduledDate 	     = psActivity.GetProperty(&quot;VF Scheduled Date&quot;);
		var sParameterSearchExpr = &quot;&quot;;
		var bWithParameter       = false;
		var sParameterName       = &quot;&quot;;
		var sParameterCond1      = &quot;&quot;;
		var sParameterCond2      = &quot;&quot;;
		var sParameterCond3      = &quot;&quot;;
		var sParameterCond4      = &quot;&quot;;
		var sParameterCond5      = &quot;&quot;;
		var sParameterCond6      = &quot;&quot;;
		var sDescriptionVal      = &quot;&quot;;

		if (!sSkipQuery &amp;&amp; sSource == &quot;AutoDialer&quot;)
		{
			bcAction.SetViewMode(AllView);
			bcAction.ClearToQuery();
			bcAction.SetSearchSpec(&quot;Dunning Step&quot;, sDunningStep);
			bcAction.SetSortSpec(&quot;Planned&quot;);
			bcAction.ExecuteQuery(ForwardOnly);//VFTK Lilanath 25042012 : OracleScript Review 15 not required since the  sDunningStep is read from a required argument

			if (bcAction.FirstRecord())
			{
				sActionId = bcAction.GetFieldValue(&quot;Id&quot;);
				bcAction.SetFieldValue(&quot;Description&quot;, sDescription);
				bcAction.WriteRecord();
			}

			return(sActionId);
		}

		bcAction.ActivateField(&quot;Vf Action Id&quot;);
		bcAction.ActivateField(&quot;SR Type&quot;);
		bcAction.ActivateField(&quot;Area&quot;);
		bcAction.ActivateField(&quot;Category&quot;);
		bcAction.ActivateField(&quot;Name&quot;);
		bcAction.ActivateField(&quot;Planned&quot;);
		bcAction.ActivateField(&quot;Due&quot;);
		bcAction.ActivateField(&quot;Vf Action Id&quot;);
		bcAction.ActivateField(&quot;RecType&quot;);
		bcAction.ActivateField(&quot;Description&quot;);
		bcAction.ActivateField(&quot;VF Description&quot;);
		bcAction.ActivateField(&quot;Dunning Step&quot;);
		bcAction.ActivateField(&quot;Type&quot;);
		bcAction.ActivateField(&quot;Account Id&quot;);
		bcAction.ActivateField(&quot;VF Category&quot;);
		bcAction.ActivateField(&quot;Status&quot;);
		bcAction.ActivateField(&quot;VF Scheduled Date&quot;);//WP09
		bcAction.ActivateField(&quot;VF Dunning Action Status&quot;);
		bcAction.ActivateField(&quot;VF Invoice No&quot;);
		bcAction.ActivateField(&quot;VF Collectable Id&quot;);
		bcAction.NewRecord(NewAfter);

		sParameterSearchExpr = &quot;[Function]=&apos;Dunning&apos; AND [Value]=&apos;&quot; + sDunningStep + &quot;&apos;&quot;;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.SetSearchExpr(sParameterSearchExpr);
		bcParameter.SetSortSpec(&quot;Name&quot;);
		bcParameter.ExecuteQuery(ForwardOnly);

		bWithParameter = bcParameter.FirstRecord();
					
		if (bWithParameter)
		{
			sParameterName  = bcParameter.GetFieldValue(&quot;Name&quot;);
			sParameterCond1 = bcParameter.GetFieldValue(&quot;Condition1&quot;);
			sParameterCond2 = bcParameter.GetFieldValue(&quot;Condition2&quot;);
			sParameterCond3 = bcParameter.GetFieldValue(&quot;Condition3&quot;);
			sParameterCond4 = bcParameter.GetFieldValue(&quot;Condition4&quot;);
			sParameterCond5 = bcParameter.GetFieldValue(&quot;Condition5&quot;);
			sParameterCond6 = bcParameter.GetFieldValue(&quot;Condition6&quot;);

			if (sParameterName == &quot;CreateInteraction&quot; || sParameterName == &quot;CreateServiceRequest&quot;)
			{
				bcAction.SetFieldValue(&quot;SR Type&quot;, sParameterCond1);
				bcAction.SetFieldValue(&quot;Area&quot;,     sParameterCond2);
				bcAction.SetFieldValue(&quot;Category&quot;, sParameterCond3);
				bcAction.SetFieldValue(&quot;Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;CONTACT_LOG_STATUS&quot;,sParameterCond4));
			}
			if (sParameterName == &quot;CreateInteraction&quot;)
			{
				bcAction.SetFieldValue(&quot;Name&quot;,sParameterCond5);
				if (sDescription == &quot;&quot;)
				{
					sDescriptionVal = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DESCRIPTION&quot;,sParameterCond6);
					bcAction.SetFieldValue(&quot;VF Description&quot;, sDescriptionVal);
					bcAction.SetFieldValue(&quot;Description&quot;, sDescriptionVal);
				}
				else
				{						
					bcAction.SetFieldValue(&quot;Description&quot;,sDescription);
				}
			}
			if (sParameterName == &quot;CreateOrder&quot;)
			{
				bcAction.SetFieldValue(&quot;Name&quot;,sParameterCond5);
				if (sDescription == &quot;&quot;)
				{
					sDescriptionVal = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DESCRIPTION&quot;,sParameterCond6);
					bcAction.SetFieldValue(&quot;VF Description&quot;, sDescriptionVal);
					bcAction.SetFieldValue(&quot;Description&quot;, sDescriptionVal);
				}
			}		
			if (sParameterName == &quot;CreateServiceRequest&quot;)
			{
				bcAction.SetFieldValue(&quot;Description&quot;, sDescription);
			}
		}
		else
		{
			bcAction.SetFieldValue(&quot;Description&quot;,sDescription);	
		}

		if (sCheckSRCreation == &quot;False&quot; &amp;&amp; sDunningStep != &quot;Pre-disc_letter&quot;)//VFTRCBU-27250
			sActionStatus = &quot;Skipped&quot;;
		bcAction.SetFieldValue(&quot;Planned&quot;, sActionDate);
		bcAction.SetFieldValue(&quot;Due&quot;, sInvoiceDate);
		bcAction.SetFieldValue(&quot;Vf Action Id&quot;, sDunnActionId);
		bcAction.SetFieldValue(&quot;RecType&quot;, sCategory);
		bcAction.SetFieldValue(&quot;VF Category&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TODO_TYPE&quot;,sCategory));
		bcAction.SetFieldValue(&quot;Dunning Step&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,sDunningStep));
		bcAction.SetFieldValue(&quot;Type&quot;, sActionType);
		bcAction.SetFieldValue(&quot;Account Id&quot;, sAccountId);
		bcAction.SetFieldValue(&quot;VF Scheduled Date&quot;, sScheduledDate);
		bcAction.SetFieldValue(&quot;VF Dunning Action Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUN_ACTION_STATUS&quot;,sActionStatus));
		bcAction.SetFieldValue(&quot;VF Invoice No&quot;, sInvoiceNumber);
		bcAction.SetFieldValue(&quot;VF Collectable Id&quot;, sCollectableId);
		bcAction.WriteRecord ();

		sActionId = bcAction.GetFieldValue(&quot;Id&quot;);

		if (bWithParameter)
		{
			psManageIn.SetProperty(&quot;AlertId&quot;, sAlertId);
			psManageIn.SetProperty(&quot;ActivityId&quot;, sActionId);
			psManageIn.SetProperty(&quot;Cust Code&quot;, sCustomerAccount);         
			psManageIn.SetProperty(&quot;Bill Acc Code&quot;, sBillingAccount);
			psManageIn.SetProperty(&quot;Invoice Id&quot;, sInvoiceNumber);      
			psManageIn.SetProperty(&quot;Priority&quot;, sPriority);               
			psManageIn.SetProperty(&quot;Source&quot;, sSource);                   
			psManageIn.SetProperty(&quot;Status&quot;,sAlertSatus);                   
			psManageIn.SetProperty(&quot;Order Reason&quot;,sOrderReasonCode);    
			psManageIn.SetProperty(&quot;Category&quot;, sCategory);               
			psManageIn.SetProperty(&quot;Dunning Step&quot;, sDunningStep);        
			psManageIn.SetProperty(&quot;Action Type&quot;, sActionType);          
			psManageIn.SetProperty(&quot;Alert Type&quot;, sAlertTypeCode);        

			ManageDunning(psManageIn, psManageOut, sResumeDone);		
		}

		return(sActionId);
	}
	finally
	{
		psActivity	= null;
		psManageOut	= null;
		psManageIn	= null;
		bcParameter = null;
		boParameter = null;
		bcAction	= null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="03/29/2016 13:50:19"
			   UPDATED_BY="RPIRES"
			   CREATED="06/22/2011 17:53:12"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageDunning"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageDunning (Inputs, Outputs, sResumeDone)
{
	try
	{
		var bsUtilities    : Service     = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psUtilitiesIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut : PropertySet = TheApplication().NewPropertySet();
		var boCreditMgmt   : BusObject   = TheApplication().GetBusObject(&quot;CUT Credit Management&quot;);
		var bcAlert        : BusComp     = boCreditMgmt.GetBusComp(&quot;CUT Credit Alert&quot;);
		var bcAction       : BusComp     = boCreditMgmt.GetBusComp(&quot;Activity Plan (No Sort)&quot;);//Modify BC Performance (Activity Plan)
		var boParameter    : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter    : BusComp     = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		var psCreateIn     : PropertySet = TheApplication().NewPropertySet();
		var psCreateOut    : PropertySet = TheApplication().NewPropertySet();

		var sAlertId         = Inputs.GetProperty(&quot;AlertId&quot;);
		var sActionId        = Inputs.GetProperty(&quot;ActivityId&quot;);
		var sAlertType       = Inputs.GetProperty(&quot;Alert Type&quot;);
		var sAlertSearchExpr = &quot;&quot;;
		var sAccountId       = &quot;&quot;;
		var sBillingAccount  = &quot;&quot;;
		var sPriority        = &quot;&quot;;
		var sAmountOwe       = &quot;&quot;;
		var sDunningStep     = &quot;&quot;;
		var sParamSearchExpr = &quot;&quot;;
		var bWithParameter   = false;
		var sActionType      = &quot;&quot;;
		var bSRCreated       = false;

		//Begin - Scripting 15 - Input validation
		psUtilitiesIn.SetProperty(&quot;sAlertId&quot;,  sAlertId);
		psUtilitiesIn.SetProperty(&quot;sActionId&quot;, sActionId);
		psUtilitiesIn.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		bsUtilities.InvokeMethod(&quot;Input Validation&quot;, psUtilitiesIn, psUtilitiesOut);
		//End - Scripting 15

		//Find the alert record
		sAlertSearchExpr = &quot;[Id]=&apos;&quot; + sAlertId + &quot;&apos;&quot;;

		bcAlert.ClearToQuery();
		bcAlert.SetViewMode(AllView);
		bcAlert.ActivateField(&quot;Billing Account By Id&quot;);
		bcAlert.ActivateField(&quot;Account By Id&quot;);
		bcAlert.ActivateField(&quot;Priority&quot;);
		bcAlert.ActivateField(&quot;Total Invoice Amount&quot;);
		bcAlert.SetSearchExpr(sAlertSearchExpr);
		bcAlert.ExecuteQuery(ForwardOnly);

		if (!bcAlert.FirstRecord())
		{
			return;
		}

		sAccountId      = bcAlert.GetFieldValue (&quot;Account By Id&quot;);
		sBillingAccount = bcAlert.GetFieldValue (&quot;Billing Account By Id&quot;);
		sPriority       = bcAlert.GetFieldValue(&quot;Priority&quot;);
		sAmountOwe      = bcAlert.GetFieldValue(&quot;Total Invoice Amount&quot;);

		bcAction.ActivateField(&quot;Dunning Step&quot;);
		bcAction.SetSearchSpec(&quot;Id&quot;, sActionId);
		bcAction.ExecuteQuery(ForwardOnly);

		if (!bcAction.FirstRecord())
		{
			return;
		}

		sDunningStep = bcAction.GetFieldValue (&quot;Dunning Step&quot;);

		sParamSearchExpr = &quot;[Function]=&apos;Dunning&apos; AND [Value]=&apos;&quot; +
						   TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DUNNING_STEP&quot;,sDunningStep) + &quot;&apos;&quot;;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.SetSearchExpr(sParamSearchExpr);
		bcParameter.ExecuteQuery(ForwardOnly);

		bWithParameter = bcParameter.FirstRecord();

		// Loop through all parameters for the dunning step
		while(bWithParameter)
		{
			sActionType = bcParameter.GetFieldValue (&quot;Name&quot;);

			if (sActionType == &quot;CreateServiceRequest&quot; &amp;&amp; (!bSRCreated))
			{
				// Call Create ServiceReqiest
				psCreateIn.SetProperty(&quot;DunningStep&quot;, sDunningStep);
				psCreateIn.SetProperty(&quot;Account Id&quot;, sAccountId);
				psCreateIn.SetProperty(&quot;BA Code&quot;, sBillingAccount);
				psCreateIn.SetProperty(&quot;Priority&quot; ,sPriority);
				psCreateIn.SetProperty(&quot;Amount Owed&quot;, sAmountOwe);
				psCreateIn.SetProperty(&quot;InpAlert&quot;, sAlertType);
				CreateServiceRequest(psCreateIn, psCreateOut);
				bSRCreated = true;
			}

			bWithParameter = bcParameter.NextRecord();
		}
	}
	finally
	{
		psCreateOut    = null;
		psCreateIn     = null;
		bcParameter    = null;
		boParameter    = null;
		bcAction       = null;
		bcAlert        = null;
		boCreditMgmt   = null;
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="12/23/2015 15:54:06"
			   UPDATED_BY="JCARVALHO"
			   CREATED="07/27/2010 13:32:41"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;InsertAlert&quot;)
	{
		InsertAlertNew (Inputs, Outputs);
		return (CancelOperation);
	}
	else if (MethodName == &quot;ManageDunning&quot;)
	{
		ManageDunning (Inputs, Outputs, &quot;N&quot;);
		return (CancelOperation);
	}
	else if (MethodName == &quot;SetOutput&quot;)
	{
		SetOutput (Inputs, Outputs);
		return (CancelOperation);
	}
	else if (MethodName == &quot;SetString&quot;)
	{
		SetString (Inputs, Outputs);
		return (CancelOperation);
	}
	else if (MethodName == &quot;DuplicateAlert&quot;)
	{
		Outputs.SetProperty(&quot;Duplicate&quot;, &quot;N&quot;);
		if (DuplicateAlert(Inputs.GetProperty(&quot;ExternalRequestId&quot;)))
			Outputs.SetProperty(&quot;Duplicate&quot;, &quot;Y&quot;)
		return (CancelOperation);
	}
	else if (MethodName == &quot;SetAlertExternalRequestId&quot;)
	{
		SetAlertExternalRequestId(Inputs.GetProperty(&quot;AlertId&quot;), Inputs.GetProperty(&quot;ActionId&quot;), Inputs.GetProperty(&quot;ExternalRequestId&quot;));
		return (CancelOperation);
	}
	else if (MethodName == &quot;CheckSRCreation&quot;)
	{
		Outputs.SetProperty(&quot;Result&quot;,CheckSRCreation(Inputs.GetProperty(&quot;AmountOwed&quot;),Inputs.GetProperty(&quot;DunningStep&quot;),Inputs.GetProperty(&quot;AccountType&quot;)));
		return (CancelOperation);
	}
	else if (MethodName == &quot;CreateSR&quot;)
	{
		Outputs.SetProperty(&quot;Result&quot;,CreateSR(Inputs.GetProperty(&quot;AmountOwed&quot;),Inputs.GetProperty(&quot;BillingAccount&quot;),Inputs.GetProperty(&quot;DunningStep&quot;),Inputs.GetProperty(&quot;Priority&quot;),Inputs.GetProperty(&quot;Description&quot;),Inputs.GetProperty(&quot;AccountId&quot;),Inputs.GetProperty(&quot;AccounType&quot;)));
		return (CancelOperation);
	}
	else if (MethodName == &quot;Tester&quot;)
	{
		Tester(Inputs, Outputs);
		return (CancelOperation);
	}

	return (ContinueOperation);
}"
			   SEQUENCE="17"
			   UPDATED="12/23/2015 16:02:07"
			   UPDATED_BY="JCARVALHO"
			   CREATED="07/26/2010 07:33:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetAlertExternalRequestId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetAlertExternalRequestId(sAlertId, sActionId, sExternalRequestId)
{
	try
	{
		var boAlert  : BusObject = TheApplication().GetBusObject(&quot;CUT Credit Management&quot;);
		var bcAlert  : BusComp   = boAlert.GetBusComp(&quot;CUT Credit Alert&quot;);
		var boAction : BusObject = TheApplication().GetBusObject(&quot;CUT Credit Management&quot;);
		var bcAction : BusComp   = boAction.GetBusComp(&quot;Activity Plan (No Sort)&quot;);

		if (sExternalRequestId == null || sExternalRequestId == &quot;&quot;)
		{
			return;
		}

		if (sAlertId != null &amp;&amp; sAlertId != &quot;&quot;)
		{
			bcAlert.SetViewMode(AllView);
			bcAlert.ClearToQuery();
			bcAlert.ActivateField(&quot;Alert Number&quot;);
			bcAlert.SetSearchSpec(&quot;Id&quot;, sAlertId);
			bcAlert.ExecuteQuery(ForwardOnly);

			if (bcAlert.FirstRecord())
			{
				bcAlert.SetFieldValue(&quot;Alert Number&quot;, sExternalRequestId);
				bcAlert.WriteRecord();
			}
		}

		if (sActionId != null &amp;&amp; sActionId != &quot;&quot;)
		{
			bcAction.SetViewMode(AllView);
			bcAction.ClearToQuery();
			bcAction.ActivateField(&quot;Activity UID&quot;);
			bcAction.SetSearchSpec(&quot;Id&quot;, sActionId);
			bcAction.ExecuteQuery(ForwardOnly);

			if (bcAction.FirstRecord())
			{
				bcAction.SetFieldValue(&quot;Activity UID&quot;, sExternalRequestId);
				bcAction.WriteRecord();
			}
		}
	}
	catch(oExcep)
	{
	}
	finally
	{
		bcAction = null;
		boAction = null;
		bcAlert  = null;
		boAlert  = null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="12/23/2015 15:54:44"
			   UPDATED_BY="JCARVALHO"
			   CREATED="12/23/2015 15:44:40"
			   CREATED_BY="JCARVALHO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOutput"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetOutput(psInputs, psOutputs)
{
	try
	{
		var bSvc:Service =	TheApplication().GetService(&quot;PRM ANI Utility Service&quot;);
		var InputIO	=	TheApplication().NewPropertySet();
		var OutputIO =	TheApplication().NewPropertySet();
		var strBillingAccountId = &quot;&quot;;
		InputIO.SetProperty(&quot;Hierarchy Name&quot;,&quot;VFDunningOutput&quot;);
	    bSvc.InvokeMethod(&quot;CreateEmptyPropSet&quot;,InputIO,OutputIO);
	    var sAssetItems = null;
	    var EmptyPS = OutputIO.GetChild(0).GetChild(0).GetChild(0);
	    var psNodeListOfAsset;
	    OutputIO.GetChild(0).GetChild(0).RemoveChild(0);
	    
		var boBA = TheApplication().GetBusObject(&quot;Billing Account&quot;);
		var bcBA = boBA.GetBusComp(&quot;Billing Account&quot;);
		var strBillingAccountCode = psInputs.GetProperty(&quot;strBillingAccountCode&quot;);
		with (bcBA)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Account Code&quot;);
			SetSearchSpec(&quot;Account Code&quot;,strBillingAccountCode);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strBillingAccountId = GetFieldValue(&quot;Id&quot;);
			}
			
		}
		var boAsset		= TheApplication().GetBusObject(&quot;Asset Management - Asset Item&quot;);
		var bcAssetList = boAsset.GetBusComp(&quot;VF Asset Mgmt - Asset - Header&quot;);
		with (bcAssetList)
		{	
			var boLOV = TheApplication().GetBusObject(&quot;List Of Values&quot;);
			var bcLOV = boLOV.GetBusComp(&quot;List Of Values&quot;);
			with (bcLOV)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;Value&quot;);
				SetSearchSpec(&quot;Type&quot;,&quot;SET_OUTPUT_PART_NUM&quot;);
				ExecuteQuery(ForwardOnly);
				var IsRecordLOV = FirstRecord();
				var sPartNum=&quot;&quot;;
				while(IsRecordLOV)
				{
					var value = GetFieldValue(&quot;Value&quot;);
					sPartNum  += (sPartNum==&quot;&quot;)?&quot;&quot;:&quot; OR &quot;;
					sPartNum=sPartNum+&quot;[Product Part Number]=&apos;&quot;+value+&quot;&apos;&quot;;
					IsRecordLOV=NextRecord();
				}
			}
			var sSearchExpr=&quot;&quot;;
			
			var sInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Inactive&quot;);
			
			if(sPartNum==&quot;&quot;||sPartNum==null)
				sSearchExpr = &quot;[Parent Asset Id] is null AND [Billing Account Id] = &apos;&quot;+strBillingAccountId+&quot;&apos; and [Status]&lt;&gt;&apos;&quot;+sInactive+&quot;&apos;&quot;;
			else
				sSearchExpr = &quot;[Parent Asset Id] is null AND [Billing Account Id] = &apos;&quot;+strBillingAccountId+&quot;&apos; AND (&quot;+sPartNum+&quot;) and [Status]&lt;&gt;&apos;&quot;+sInactive+&quot;&apos;&quot;;
						
			SetViewMode(AllView);
			ActivateField(&quot;Integration Id&quot;);
			ActivateField(&quot;MSISDN&quot;);
			//ActivateField(&quot;VF Credit Status Calc&quot;); //Removed for WA#27
			ActivateField(&quot;VF Root Credit Status&quot;); // Added for WA#27
			//ActivateField(&quot;VF Dunning Status Calc&quot;); //Removed for WA#27
			ActivateField(&quot;VF Root Dunning Status&quot;); // Added for WA#27
			//ActivateField(&quot;VF Customer Status Calc&quot;); //Removed for WA#27
			ActivateField(&quot;VF Root Customer Status&quot;); // Added for WA#27
			//ActivateField(&quot;VF Fraud Status Calc&quot;); //Removed for WA#27
			ActivateField(&quot;VF Root Fraud Status&quot;); // Added for WA#27
			//ActivateField(&quot;VF Document Missing Status Calc&quot;); //Removed for WA#27
			ActivateField(&quot;VF Root Document Missing Status&quot;); // Added for WA#27
		//	ActivateField(&quot;Reason&quot;);
		//	ActivateField(&quot;X Order Type Code&quot;);
		//	SetSearchSpec(&quot;Billing Account Id&quot;, strBillingAccountId);
			ActivateField(&quot;Product Part Number&quot;);
			ClearToQuery();
			SetSearchExpr(sSearchExpr);
			ExecuteQuery(ForwardOnly);
			var IsRecord = FirstRecord();
			//var fpsNodeListOfAsset = TheApplication().NewPropertySet();
			while(IsRecord)
			{
					var	ListOfVfdunningoutput = TheApplication().NewPropertySet(); // IC
					psNodeListOfAsset = TheApplication().NewPropertySet(); // IC
						sAssetItems = EmptyPS.Copy();
//					ListOfVfdunningoutput.SetType(&quot;ListOfVfdunningoutput&quot;);
//					psNodeListOfAsset.SetType(&quot;OrderEntry-LineItems&quot;);
						// set Billimg Profile properties
						sAssetItems.SetProperty(&quot;Asset Id&quot;, bcAssetList.GetFieldValue(&quot;Id&quot;));
						sAssetItems.SetProperty(&quot;Integration Id&quot;, bcAssetList.GetFieldValue(&quot;Integration Id&quot;));
						sAssetItems.SetProperty(&quot;MSISDN&quot;,bcAssetList.GetFieldValue(&quot;MSISDN&quot;));
						//sAssetItems.SetProperty(&quot;VF Credit Status&quot;, bcAssetList.GetFieldValue(&quot;VF Credit Status Calc&quot;)); //Removed for WA#27
						sAssetItems.SetProperty(&quot;VF Credit Status&quot;, bcAssetList.GetFieldValue(&quot;VF Root Credit Status&quot;)); //Added for WA#27
						//sAssetItems.SetProperty(&quot;VF Dunning Status&quot;,bcAssetList.GetFieldValue(&quot;VF Dunning Status Calc&quot;)); //Removed for WA#27
						sAssetItems.SetProperty(&quot;VF Dunning Status&quot;, bcAssetList.GetFieldValue(&quot;VF Root Dunning Status&quot;)); //Added for WA#27
						//sAssetItems.SetProperty(&quot;VF Customer Status&quot;, bcAssetList.GetFieldValue(&quot;VF Customer Status Calc&quot;)); //Removed for WA#27
						sAssetItems.SetProperty(&quot;VF Customer Status&quot;, bcAssetList.GetFieldValue(&quot;VF Root Customer Status&quot;)); //Added for WA#27
						//sAssetItems.SetProperty(&quot;VF Fraud Status&quot;, bcAssetList.GetFieldValue(&quot;VF Fraud Status Calc&quot;)); //Removed for WA#27
						sAssetItems.SetProperty(&quot;VF Fraud Status&quot;, bcAssetList.GetFieldValue(&quot;VF Root Fraud Status&quot;)); //Added for WA#27
						//sAssetItems.SetProperty(&quot;VF Document Missing Status&quot;,bcAssetList.GetFieldValue(&quot;VF Document Missing Status Calc&quot;)); //Removed for WA#27
						sAssetItems.SetProperty(&quot;VF Document Missing Status&quot;, bcAssetList.GetFieldValue(&quot;VF Root Document Missing Status&quot;)); //Added for WA#27
						//sAssetItems.SetProperty(&quot;Reason&quot;,bcAssetList.GetFieldValue(&quot;Reason&quot;));
						//sAssetItems.SetProperty(&quot;X Order Type Code&quot;,bcAssetList.GetFieldValue(&quot;X Order Type Code&quot;));
						sAssetItems.SetProperty(&quot;Product Part Number&quot;,bcAssetList.GetFieldValue(&quot;Product Part Number&quot;));
						// add the Asset node to the response
//					ListOfVfdunningoutput.AddChild(psNodeListOfAsset);
//					psOutputs.AddChild(ListOfVfdunningoutput);
//					ListOfVfdunningoutput = null;
//					psNodeListOfAsset = null;
						OutputIO.GetChild(0).GetChild(0).AddChild(sAssetItems);
						sAssetItems = null;
				IsRecord = bcAssetList.NextRecord();
			}
			psOutputs.AddChild(OutputIO);
		}
	} // end try	
	finally
	{
		bcBA = null;
		boBA = null;
		bcAssetList = null;
		boAsset = null;
		
		bSvc = null;
		InputIO = null;
		OutputIO = null;
	//	fpsNodeListOfAsset = null;
	} // end finally
}"
			   SEQUENCE="14"
			   UPDATED="12/23/2015 15:54:44"
			   UPDATED_BY="JCARVALHO"
			   CREATED="01/04/2013 17:19:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetString"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetString(Inputs, Outputs)
{
	var inStr = Inputs.GetProperty(&quot;input&quot;);
	Outputs.SetProperty(&quot;output&quot;,inStr + &quot;\n&quot;);
}"
			   SEQUENCE="15"
			   UPDATED="12/23/2015 15:54:44"
			   UPDATED_BY="JCARVALHO"
			   CREATED="06/05/2015 11:11:09"
			   CREATED_BY="RPIRES">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Tester"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Tester(psInputs, psOutputs)
{
	try
	{
		var Inputs : PropertySet = TheApplication().NewPropertySet();
		var Inputs0 : PropertySet = TheApplication().NewPropertySet();
		var Inputs1 : PropertySet = TheApplication().NewPropertySet();
		var psAlert : PropertySet = TheApplication().NewPropertySet();
		var psAlert0 : PropertySet = TheApplication().NewPropertySet();
		var psActivity : PropertySet = TheApplication().NewPropertySet();

		psAlert.SetProperty(&quot;Account Number&quot;, psInputs.GetProperty(&quot;Account Number&quot;));
		psAlert.SetProperty(&quot;Billing Account Code&quot;, psInputs.GetProperty(&quot;Billing Account Code&quot;));
		psAlert.SetProperty(&quot;Source&quot;,psInputs.GetProperty(&quot;Source&quot;));
		psAlert.SetProperty(&quot;Statement Number&quot;, psInputs.GetProperty(&quot;Statement Number&quot;));
		psAlert.SetProperty(&quot;Alert Type Code&quot;, psInputs.GetProperty(&quot;Alert Type Code&quot;));
		psAlert.SetProperty(&quot;VF Collectable Id&quot;, psInputs.GetProperty(&quot;VF Collectable Id&quot;));
		psAlert.SetProperty(&quot;Total Invoice Amount&quot;, psInputs.GetProperty(&quot;Total Invoice Amount&quot;));
		psAlert.SetProperty(&quot;Action Type&quot;, psInputs.GetProperty(&quot;Action Type&quot;));
		psAlert.SetProperty(&quot;Order Reason Code&quot;, psInputs.GetProperty(&quot;Order Reason Code&quot;));
		psAlert.SetProperty(&quot;Statement Date&quot;, psInputs.GetProperty(&quot;Statement Date&quot;));
		psAlert.SetProperty(&quot;VF Dunning Scenario&quot;, psInputs.GetProperty(&quot;VF Dunning Scenario&quot;)); //WP09 ends
		psAlert.SetProperty(&quot;Priority&quot;, psInputs.GetProperty(&quot;Priority&quot;));
		psAlert.SetProperty(&quot;Status&quot;, psInputs.GetProperty(&quot;Status&quot;));
		psAlert.SetProperty(&quot;Comments&quot;, psInputs.GetProperty(&quot;Comments&quot;));
		psAlert.SetProperty(&quot;Amount Owed&quot;, psInputs.GetProperty(&quot;Amount Owed&quot;));
		psAlert.SetProperty(&quot;VF Cutoff Date&quot;, psInputs.GetProperty(&quot;VF Cutoff Date&quot;));
		psAlert.SetProperty(&quot;Alert Number&quot;, psInputs.GetProperty(&quot;Alert Number&quot;));
		psActivity.SetProperty(&quot;Dunning Step&quot;, psInputs.GetProperty(&quot;Dunning Step&quot;));
		psActivity.SetProperty(&quot;VF Dunning Action Status&quot;, psInputs.GetProperty(&quot;VF Dunning Action Status&quot;));
		psActivity.SetProperty(&quot;Description&quot;, psInputs.GetProperty(&quot;Description&quot;));
		psActivity.SetProperty(&quot;Category&quot;, psInputs.GetProperty(&quot;Category&quot;));
		psActivity.SetProperty(&quot;Action Date&quot;, psInputs.GetProperty(&quot;Action Date&quot;));
		psActivity.SetProperty(&quot;VF Scheduled Date&quot;, psInputs.GetProperty(&quot;VF Scheduled Date&quot;));
		psActivity.SetProperty(&quot;Action Id&quot;, psInputs.GetProperty(&quot;Action Id&quot;));

		psAlert0.AddChild(psActivity);
		psAlert.AddChild(psAlert0);
		Inputs1.AddChild(psAlert);
		Inputs0.AddChild(Inputs1);
		Inputs.AddChild(Inputs0);

		InsertAlertNew (Inputs, psOutputs);
	}
	finally
	{
		psActivity = null;
		psAlert0 = null;
		psAlert = null;
		Inputs1 = null;
		Inputs0 = null;
		Inputs = null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="12/23/2015 15:54:44"
			   UPDATED_BY="JCARVALHO"
			   CREATED="12/23/2015 15:44:40"
			   CREATED_BY="JCARVALHO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="chkspecialchar"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function chkspecialchar(Inputs, Outputs)
{
	var strInvoice = Inputs.GetProperty(&quot;Invoice Id&quot;);
	var cntr;
	var spccntr = 0;
	var alphaa;
	var cd;
	for(cntr=0; cntr&lt;strInvoice.length; cntr++)
	{
		  alphaa = strInvoice.charAt(cntr);
		  cd = alphaa.charCodeAt(0);
		  if((cd &gt; 47 &amp;&amp; cd &lt; 58) || (cd &gt; 64 &amp;&amp; cd &lt; 91) || (cd &gt; 96 &amp;&amp; cd &lt; 123))
		  {
		  Outputs.SetProperty(&quot;IsValid&quot;,&quot;TRUE&quot;);
		  }
		  else	
		  {
		  spccntr = spccntr + 1;
		  }
 	}
 	if(spccntr &gt; 0)
 	Outputs.SetProperty(&quot;IsValid&quot;,&quot;FALSE&quot;);
}"
			   SEQUENCE="2"
			   UPDATED="12/23/2015 15:52:59"
			   UPDATED_BY="JCARVALHO"
			   CREATED="08/16/2010 08:13:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



