<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="MP-PM Bulk Order"
	   UI_FREEZE="N"
	   UPDATED="01/17/2018 10:21:28"
	   UPDATED_BY="IBM_TFERREIRA"
	   CREATED="03/26/2010 19:52:33"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="Y"
		   CLASS="CSSService"
		   COMMENTS="22/02/2006 SVS-IDC Added for ACS CCF"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Orders"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="01/16/2018 15:40:00"
		   SERVER_ENABLED="Y"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="IBM_TFERREIRA"
		   UPDATED="01/17/2018 10:21:28"
		   UPDATED_BY="IBM_TFERREIRA"
		   CREATED="06/23/2010 08:44:47"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Orders"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="06/23/2010 09:39:38"
			   UPDATED_BY="SADMIN"
			   CREATED="06/23/2010 08:44:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalcEndDate"
			   UPDATED="12/07/2011 12:36:46"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2011 12:36:46"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="StartDate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/07/2011 12:36:46"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2011 12:36:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CalcEndDate"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2011 12:36:46"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2011 12:36:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ManageCrossSegment"
			   UPDATED="02/10/2012 12:51:23"
			   UPDATED_BY="SADMIN"
			   CREATED="02/10/2012 12:51:23"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/10/2012 12:51:23"
				   UPDATED_BY="SADMIN"
				   CREATED="02/10/2012 12:51:23"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="02/10/2012 12:51:23"
					   UPDATED_BY="SADMIN"
					   CREATED="02/10/2012 12:51:23"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ManageCrossSegment"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/10/2012 12:51:23"
				   UPDATED_BY="SADMIN"
				   CREATED="02/10/2012 12:51:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="PickProduct"
			   UPDATED="03/05/2013 14:42:53"
			   UPDATED_BY="SADMIN"
			   CREATED="03/05/2013 14:42:53"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OliId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/05/2013 14:42:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/05/2013 14:42:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProductId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/05/2013 14:42:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/05/2013 14:42:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProductPartNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/05/2013 14:42:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/05/2013 14:42:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="PickProduct"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/05/2013 14:42:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/05/2013 14:42:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="PickReason"
			   UPDATED="03/13/2013 20:14:27"
			   UPDATED_BY="SADMIN"
			   CREATED="08/19/2010 13:46:23"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/19/2010 13:46:23"
				   UPDATED_BY="SADMIN"
				   CREATED="08/19/2010 13:46:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderSubType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/19/2010 13:46:23"
				   UPDATED_BY="SADMIN"
				   CREATED="08/19/2010 13:46:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Reason"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/13/2013 20:14:27"
				   UPDATED_BY="SADMIN"
				   CREATED="08/19/2010 13:46:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="PickReason"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2010 17:10:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="RCOI"
			   UPDATED="03/05/2013 14:42:53"
			   UPDATED_BY="SADMIN"
			   CREATED="03/05/2013 14:42:53"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/05/2013 14:42:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/05/2013 14:42:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProdId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/05/2013 14:42:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/05/2013 14:42:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oliId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/05/2013 14:42:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/05/2013 14:42:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ResetUpdownCounter"
			   UPDATED="01/24/2012 08:10:19"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2012 08:10:19"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/24/2012 08:10:19"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2012 08:10:19"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderID"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/24/2012 08:10:19"
					   UPDATED_BY="SADMIN"
					   CREATED="01/24/2012 08:10:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ResetUpdownCounter"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/24/2012 08:10:19"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2012 08:10:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetEMD"
			   UPDATED="12/07/2011 12:36:46"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2011 12:36:46"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/07/2011 12:36:46"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2011 12:36:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetEMD"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2011 12:36:46"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2011 12:36:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="addProductToOrder"
			   UPDATED="09/08/2010 17:10:46"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:14:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_RESULT-1004225252-0UM"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="orderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="priceListId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="priceListId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="productPartNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="productPartNumber"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="addProductToOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2010 17:10:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="callCrossAddonEligWS"
			   UPDATED="12/07/2011 12:36:46"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2011 12:36:46"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strMSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/07/2011 12:36:46"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2011 12:36:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="callCrossAddonEligWS"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2011 12:36:46"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2011 12:36:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="cancelActivationOrder"
			   UPDATED="06/25/2010 14:10:57"
			   UPDATED_BY="SADMIN"
			   CREATED="06/25/2010 14:10:52"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_RESULT-1004225252-0UM"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="06/25/2010 14:10:52"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2010 14:10:52"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/25/2010 14:10:52"
					   UPDATED_BY="SADMIN"
					   CREATED="06/25/2010 14:10:52"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/25/2010 14:10:52"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2010 14:10:52"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="requestId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/25/2010 14:10:52"
					   UPDATED_BY="SADMIN"
					   CREATED="06/25/2010 14:10:52"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="cancelActivationOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/25/2010 14:10:57"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2010 14:10:52"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkBillCycle"
			   UPDATED="09/08/2010 17:10:46"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:14:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_RESULT-1004225252-0UM"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="newBillingAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="newBillingAccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oldBillingAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="oldBillingAccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkBillCycle"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2010 17:10:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkEMD"
			   UPDATED="02/13/2012 13:14:34"
			   UPDATED_BY="SADMIN"
			   CREATED="01/30/2012 13:24:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strRootItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/30/2012 13:24:54"
				   UPDATED_BY="SADMIN"
				   CREATED="01/30/2012 13:24:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkEMD"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/30/2012 13:24:54"
				   UPDATED_BY="SADMIN"
				   CREATED="01/30/2012 13:24:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkNumberXTransfer"
			   UPDATED="09/08/2010 17:10:46"
			   UPDATED_BY="SADMIN"
			   CREATED="08/29/2010 11:56:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="08/29/2010 11:56:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="orderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_RESULT-1004225252-0UM"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="08/29/2010 11:56:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkNumberXTransfer"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2010 17:10:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="manageSVBProducts"
			   UPDATED="05/29/2012 16:55:04"
			   UPDATED_BY="SADMIN"
			   CREATED="10/08/2010 20:54:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LineItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/29/2012 16:55:04"
				   UPDATED_BY="SADMIN"
				   CREATED="05/15/2012 16:36:12"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LineItemId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/29/2012 16:55:04"
					   UPDATED_BY="SADMIN"
					   CREATED="05/29/2012 16:55:04"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/08/2010 20:54:09"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:09"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="orderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="10/08/2010 20:54:09"
					   UPDATED_BY="SADMIN"
					   CREATED="10/08/2010 20:54:09"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="manageSVBProducts"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/08/2010 20:54:09"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="orderDelete"
			   UPDATED="06/23/2010 09:34:08"
			   UPDATED_BY="SADMIN"
			   CREATED="06/23/2010 08:44:47"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_RESULT-1004225252-0UM"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="06/23/2010 08:44:48"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2010 08:44:48"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/23/2010 08:44:48"
					   UPDATED_BY="SADMIN"
					   CREATED="06/23/2010 08:44:48"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/23/2010 08:44:48"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2010 08:44:48"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="requestId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/23/2010 08:44:48"
					   UPDATED_BY="SADMIN"
					   CREATED="06/23/2010 08:44:48"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="orderDelete"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/23/2010 09:09:15"
				   UPDATED_BY="SADMIN"
				   CREATED="06/23/2010 08:44:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="searchProduct"
			   UPDATED="09/08/2010 17:10:46"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:14:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_RESULT-1004225252-0UM"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="partNum"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:14:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="partNum"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/08/2010 17:10:46"
					   UPDATED_BY="SADMIN"
					   CREATED="09/08/2010 17:10:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="searchProduct"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/08/2010 17:10:46"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2010 17:10:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="setNewEMD"
			   UPDATED="02/16/2012 07:54:34"
			   UPDATED_BY="SADMIN"
			   CREATED="02/13/2012 13:14:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootAssetintegrationId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/16/2012 07:54:34"
				   UPDATED_BY="SADMIN"
				   CREATED="02/16/2012 07:54:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="newEMD"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/16/2012 07:54:34"
				   UPDATED_BY="SADMIN"
				   CREATED="02/16/2012 07:54:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="partNum"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/13/2012 13:14:34"
				   UPDATED_BY="SADMIN"
				   CREATED="02/13/2012 13:14:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strRootItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/13/2012 13:14:34"
				   UPDATED_BY="SADMIN"
				   CREATED="02/13/2012 13:14:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="setNewEMD"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/13/2012 13:14:34"
				   UPDATED_BY="SADMIN"
				   CREATED="02/13/2012 13:14:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="transfer"
			   UPDATED="02/16/2012 07:54:34"
			   UPDATED_BY="SADMIN"
			   CREATED="06/25/2010 14:10:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/16/2012 07:54:34"
				   UPDATED_BY="SADMIN"
				   CREATED="02/16/2012 07:54:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Order Id"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="02/16/2012 07:54:34"
					   UPDATED_BY="SADMIN"
					   CREATED="02/16/2012 07:54:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_RESULT-1004225252-0UM"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/08/2010 14:22:27"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2010 14:10:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/25/2010 14:10:18"
					   UPDATED_BY="SADMIN"
					   CREATED="06/25/2010 14:10:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/25/2010 14:10:19"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2010 14:10:19"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="requestId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/25/2010 14:10:19"
					   UPDATED_BY="SADMIN"
					   CREATED="06/25/2010 14:10:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="transfer"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/25/2010 14:10:32"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2010 14:10:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddProductTransfer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddProductTransfer(sOrderId)
{
	try
	{
		var sEnable = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTranWithinAdd&quot;,&quot;EnableTranWithinAdd&quot;);
	
		if (sEnable == &quot;Y&quot;)
		{
			var inProp 	: PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var ParBO : BusObject	= TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
			var ParBC : BusComp		= ParBO.GetBusComp(&quot;ACS NI Parameter&quot;);
			var sPartNumToAdd = &quot;&quot;;
			
			var boOrderEntrySales :BusObject	= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
			var bcOrderEntryLineItem :BusComp = boOrderEntrySales.GetBusComp(&quot;TELCO Line Items - Simple&quot;);			
			
			with(ParBC)
			{
				ActivateField(&quot;Value&quot;);
				SetViewMode(AllView);			
				ClearToQuery();
				SetSearchSpec(&quot;Function&quot;,&quot;VFTranWithinAdd&quot;);
				ExecuteQuery(ForwardOnly);
				var isRecord = FirstRecord();
				while (isRecord)
				{
					sPartNumToAdd = GetFieldValue(&quot;Value&quot;);
					
					with(bcOrderEntryLineItem)
					{
						SetViewMode(AllView);			
						ClearToQuery();
						SetSearchSpec(&quot;Order Header Id&quot;,sOrderId);
						SetSearchSpec(&quot;Part Number&quot;,sPartNumToAdd);
						ExecuteQuery(ForwardOnly);
						if (!(FirstRecord()))
						{
							inProp.SetProperty(&quot;productPartNumber&quot;,sPartNumToAdd);
							inProp.SetProperty(&quot;orderId&quot;,sOrderId);				
							addProductToOrder_MOBILE_LINE(inProp,outProp);
						}
					}
					isRecord = NextRecord();
				}
			}
		}
	     
	 }
     finally
     {     	
     	ParBC = null;
     	ParBO = null;
     	//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
     	outProp					= null;
     	inProp					= null;
     	bcOrderEntryLineItem	= null;
     	boOrderEntrySales		= null;
     }
}"
			   SEQUENCE="3"
			   UPDATED="01/16/2018 15:50:19"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="11/23/2013 20:31:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalcEndDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalcEndDate(Inputs,Outputs)
{
	var StartDate = Inputs.GetProperty(&quot;StartDate&quot;);
	var dtStartDate = new Date(StartDate);
	var SevenDays = 7 * 24 * 60 * 60 * 1000;
	dtStartDate = dtStartDate.getTime();
	var dtEndDate = new Date(dtStartDate + SevenDays);
	Outputs.SetProperty(&quot;dtEndDate&quot;,dtEndDate);
}"
			   SEQUENCE="5"
			   UPDATED="11/23/2013 20:31:50"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2011 12:36:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBaseProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBaseProduct(PartNum)
{
	try
	{
		var ParBO : BusObject	= TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var ParBC : BusComp		= ParBO.GetBusComp(&quot;ACS NI Parameter&quot;);
		var result = false;
		with(ParBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Function] = &apos;VFNotDeleteBaseProd&apos;AND [Value]=&apos;&quot;+PartNum+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
			 	result=true;
			}
		}
		return(result);
	}
	
	finally
	{
		ParBC = null;
		ParBO = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="11/23/2013 20:31:50"
			   UPDATED_BY="SADMIN"
			   CREATED="11/04/2013 11:05:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckM2MBillingAccount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckM2MBillingAccount (Inputs, Outputs)
{
	try
	{
		var newBillingAccountId 	= Inputs.GetProperty(&quot;newBillingAccountId&quot;); //New Billing Account Id
		var oldBillingAccountId 	= Inputs.GetProperty(&quot;oldBillingAccountId&quot;); //Old Billing Account Id
		var array 					= new Array;
	
		var boAccount : BusObject = TheApplication().GetBusObject(&quot;TELCO Account - Simple&quot;);
		var bcBillingAccount : BusComp = boAccount.GetBusComp(&quot;TELCO Account - Simple&quot;);
		var searchExpr = &quot;[Id] = &apos;&quot; + newBillingAccountId + &quot;&apos; OR [Id] = &apos;&quot; + oldBillingAccountId + &quot;&apos;&quot;;
		var i	= 0;

		bcBillingAccount.ClearToQuery(); 
		bcBillingAccount.SetViewMode(AllView);
		bcBillingAccount.ActivateField(&quot;VF Bulk SMS&quot;);
		bcBillingAccount.SetSearchExpr (searchExpr);
		bcBillingAccount.ExecuteQuery(ForwardOnly);
		var BooRecExists = bcBillingAccount.FirstRecord();
		while (BooRecExists)
		{
			array[i] =	bcBillingAccount.GetFieldValue(&quot;VF Bulk SMS&quot;);
			i++;
			BooRecExists = bcBillingAccount.NextRecord();
		}

		if (array[0] != array[1])
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
			return(CancelOperation);
		}	
	}
	finally
	{
		bcBillingAccount	= null;
		boAccount			= null;
		array				= null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="02/05/2016 08:43:31"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 20:13:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeleteNotBaseProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeleteNotBaseProduct(sOrderId)
{
	try
	{
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var XOrderItem : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var XOrderAttribute : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		with(XOrderItem)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Part Number&quot;);
         	SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos;&quot;);
          	ExecuteQuery(ForwardBackward);
         	var isRec = FirstRecord();
            while(isRec)
            {
            	var PartNum = GetFieldValue(&quot;Part Number&quot;);
                var result = CheckBaseProduct(PartNum);      
                if (!result)
                {
                	DeleteRecord();
                    isRec = FirstRecord();
                 }
                 else
                     isRec = NextRecord();
      		}
	     }
	     
	     with(XOrderAttribute)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Product Part Number&quot;);
         	SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND [Product Part Number] =&apos;1101&apos;&quot;);
          	ExecuteQuery(ForwardOnly);
         	var isRecA = FirstRecord();
            while(isRecA)
            {
            if (XOrderAttribute.GetFieldValue(&quot;Name&quot;)==&quot;Voice&quot;) XOrderAttribute.SetFieldValue(&quot;Value&quot;,&quot;No Restriction&quot;);
            if (XOrderAttribute.GetFieldValue(&quot;Name&quot;)==&quot;SMS&quot;) XOrderAttribute.SetFieldValue(&quot;Value&quot;,&quot;Open to SMS send/receive&quot;);
            isRecA = NextRecord();
      		}
	     }  	     	     
	     
	     AddProductTransfer(sOrderId);
	     
	     
	 }
     finally
     {
     	//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
     	XOrderAttribute = null;
     	XOrderItem = null;
     	XOrderBO = null;
     }
}"
			   SEQUENCE="15"
			   UPDATED="01/16/2018 16:27:04"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="11/04/2013 11:05:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DisconnectBAOrders"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DisconnectBAOrders(Inputs, Outputs)
{
 /******************************************************************************
 * Created : TLG-533 03.02.2013																		 *
 * Description     : This interface disconnect business account level orders. for example vodamoney. *	
 * Owner           : D.Akcicek																		 * 
 *****************************************************************************************************/
	try
	{
 		var boAsset       : BusObject   = TheApplication().GetBusObject (&quot;VF TK Suspend Resume NoLink BO&quot;);
		var bcAsset       : BusComp     = boAsset.GetBusComp(&quot;VF TK SMCF Asset Mgmt - Asset  Light BC&quot;);
		var psFunctionIn  : PropertySet = TheApplication().NewPropertySet();
		var psFunctionOut : PropertySet = TheApplication().NewPropertySet();
		var boOrder       : BusObject   = TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var bcItem        : BusComp     = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var bsManager     : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn   : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut  : PropertySet = TheApplication().NewPropertySet();

		var sRootAssetId          = Inputs.GetProperty(&quot;assetId&quot;);
		var sRootAssetIntegId     = &quot;&quot;;
	 	var sCheckOrderResult     = &quot;&quot;;
	 	var sDisconnectOrderId    = &quot;&quot;;
	 	var sDiscRootAssetIntegId = &quot;&quot;;

		var sReasonError = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;1017&quot;);

		if (sRootAssetId == null || sRootAssetId == &quot;&quot;)
		{
			Outputs.SetProperty(&quot;error_code&quot;,    &quot;-2&quot;);
			Outputs.SetProperty(&quot;error_message&quot;, sRootAssetId + &quot; is an invalid asset number, there is not an asset as this.&quot;);
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Owner Account Id&quot;);
		bcAsset.ActivateField(&quot;Root Asset Id&quot;);
		bcAsset.SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sRootAssetId + &quot;&apos;&quot;);
		bcAsset.ExecuteQuery(ForwardOnly);
				
		if (!bcAsset.FirstRecord())
		{
			Outputs.SetProperty(&quot;error_code&quot;,    &quot;-2&quot;);
			Outputs.SetProperty(&quot;error_message&quot;, sRootAssetId + &quot; is an invalid asset number, there is not an asset as this.&quot;);			
			return;
		}

		sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);				    

		psFunctionIn.SetProperty(&quot;Integration Id&quot;, sRootAssetIntegId);
		checkOrderStatus(psFunctionIn, psFunctionOut);
		sCheckOrderResult = psFunctionOut.GetProperty(&quot;result&quot;);

		if (sCheckOrderResult == &quot;true&quot;)
		{
			// there is an open order, set errorcode and errormessage
			Outputs.SetProperty(&quot;error_code&quot;,   &quot;-1&quot;);
			Outputs.SetProperty(&quot;error_message&quot;, sRootAssetId + &quot; have an open order, so, asset will not be modified.&quot;);
			return;
		}

		// If there is no order
		psFunctionIn.Reset();
		psFunctionOut.Reset();
		psFunctionIn.SetProperty (&quot;SVBAssetId&quot;,sRootAssetId);
		DisconnectionSVB(psFunctionIn,psFunctionOut);
		sDisconnectOrderId    = psFunctionOut.GetProperty(&quot;sOrderId&quot;);
		sDiscRootAssetIntegId = psFunctionOut.GetProperty(&quot;RootAssetIntegId&quot;);

		if (sDisconnectOrderId != null &amp;&amp; sDisconnectOrderId != &quot;&quot;)
		{
			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;TELCO Action Reason&quot;);
			bcItem.ActivateField(&quot;VF Logical Reason&quot;);
			bcItem.SetSearchSpec(&quot;Order Header Id&quot;,      sDisconnectOrderId);
			bcItem.SetSearchSpec(&quot;Asset Integration Id&quot;, sDiscRootAssetIntegId);
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord())
			{
				bcItem.SetFieldValue(&quot;TELCO Action Reason&quot;, sReasonError);	 
				bcItem.SetFieldValue(&quot;VF Logical Reason&quot;,   &quot;1017&quot;);
				bcItem.WriteRecord();

				// Submit the order
		 		psManagerIn.SetProperty(&quot;ProcessName&quot;,     &quot;TELCO Async Submit Order Interface WF&quot;);
				psManagerIn.SetProperty(&quot;Order Id&quot;,        sDisconnectOrderId);
		 		psManagerIn.SetProperty(&quot;Cancel On Error&quot;, &quot;N&quot;);

				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

				Outputs.SetProperty(&quot;error_code&quot;,    &quot;0&quot;);
				Outputs.SetProperty(&quot;error_message&quot;, sRootAssetId + &quot; deactivated with orderid : &quot; + sDisconnectOrderId);		
			}
		}
	 }
	 catch(e)
	 {
		Outputs.SetProperty(&quot;error_code&quot;,    &quot;-3&quot;);
		Outputs.SetProperty(&quot;error_message&quot;, sRootAssetId + &quot; have gotten an exception.&quot; + e.errText + &quot;:&quot; + e.message + &quot;:&quot;+ e.name);			
	 }
	 finally
	 {
		psManagerOut  = null;
		psManagerIn   = null;
		bsManager     = null;
		bcItem        = null;
		boOrder       = null;
		psFunctionOut = null;
		psFunctionIn  = null;
		bcAsset       = null;
 		boAsset       = null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="01/23/2015 01:15:04"
			   UPDATED_BY="SADMIN"
			   CREATED="02/26/2013 12:39:07"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DisconnectionSVB"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DisconnectionSVB (Inputs,Outputs) {
 /******************************************************************************
 * VF RG:24-March-11 : Created                                          	  *
 * Description     : This is a method created for the purpose of automatic    *
 *                   Disconnection Order created for SVB Groups for which     *
 *     				 their Number of Lines are decreased to 0.				  *	
 * Owner           : U. Akin Eren                    						  *
 ******************************************************************************/
 	try
	{
		var boAsset      : BusObject   = TheApplication().GetBusObject(&quot;VF TK Suspend Resume NoLink BO&quot;);
		var bcAsset      : BusComp     = boAsset.GetBusComp(&quot;VF TK SMCF Asset Mgmt - Asset  Light BC&quot;);
		var bsManager    : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn  : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();

		var sSVBAssetId       = Inputs.GetProperty(&quot;SVBAssetId&quot;);
		var sAccounId         = &quot;&quot;;
		var sRootAssetIntegId = &quot;&quot;;
		var sOrderId          = &quot;&quot;;

		var sTypeDisconnectVoluntary = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;123&quot;)

		if (sSVBAssetId == null || sSVBAssetId == &quot;&quot;)
		{
			return;
		}

	    bcAsset.ClearToQuery();
        bcAsset.SetViewMode(AllView);
        bcAsset.ActivateField(&quot;Owner Account Id&quot;);
        bcAsset.ActivateField(&quot;Root Integration Id&quot;);
		bcAsset.SetSearchSpec(&quot;Id&quot;, &quot;&apos;&quot; + sSVBAssetId + &quot;&apos;&quot;);
	    bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sAccounId         = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);
		sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);

		psManagerIn.SetProperty(&quot;ProcessName&quot;,          &quot;TELCO Process Account Root Asset Action&quot;);
		psManagerIn.SetProperty(&quot;RowId&quot;,                sAccounId);
		psManagerIn.SetProperty(&quot;Asset Integration Id&quot;, sRootAssetIntegId);
		psManagerIn.SetProperty(&quot;Asset Method&quot;,         &quot;DisconnectProdSvc&quot;);
		psManagerIn.SetProperty(&quot;Asset Action Type&quot;,    sTypeDisconnectVoluntary);
		psManagerIn.SetProperty(&quot;Reuse Active Order&quot;,   &quot;N&quot;);
		psManagerIn.SetProperty(&quot;SkipGUINavigation&quot;,    &quot;Y&quot;);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

		sOrderId = psManagerOut.GetProperty(&quot;Order Id&quot;);

		Outputs.SetProperty(&quot;sOrderId&quot;,         sOrderId);
		Outputs.SetProperty(&quot;RootAssetIntegId&quot;, sRootAssetIntegId);
	}
	finally
	{
		psManagerOut = null;
		psManagerIn  = null;
		bsManager    = null;
		bcAsset      = null;
		boAsset      = null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="01/23/2015 01:15:04"
			   UPDATED_BY="SADMIN"
			   CREATED="04/22/2011 20:55:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DisconnectionSVB25"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DisconnectionSVB25(Inputs, Outputs)
{
	try	
	{
		var boAsset     : BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var bcAsset     : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);
		var boAutoOrder : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcAutoOrder : BusComp   = boAutoOrder.GetBusComp(&quot;VF Automatic Order&quot;);

		var sBillAccountId        = Inputs.GetProperty(&quot;Bill Account Id&quot;);
		var sDiscountAssetId      = &quot;&quot;;
		var sDiscountAssetIntegId = &quot;&quot;;

		var sStatusActive         = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var sTypeDisconnect       = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_TYPE&quot;, &quot;Disconnect&quot;)
		var sSubTypeDisconnectVol = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;123&quot;)
		var sReasonError          = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;1017&quot;);

		if (sBillAccountId == null || sBillAccountId == &quot;&quot;)
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Billing Account Id&quot;);
		bcAsset.ActivateField(&quot;Product Part Number&quot;);
		bcAsset.ActivateField(&quot;Asset Id&quot;);
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Status&quot;);
		bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, &quot;5005&quot;);
		bcAsset.SetSearchSpec(&quot;Billing Account Id&quot;,  sBillAccountId);
		bcAsset.SetSearchSpec(&quot;Status&quot;,              sStatusActive);
		bcAsset.ExecuteQuery(ForwardOnly); //Scripting 31: No child query present 16may2012 Udbhav IDC VFTK
													     
		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sDiscountAssetId      = bcAsset.GetFieldValue(&quot;Asset Id&quot;);
		sDiscountAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);

		bcAutoOrder.SetViewMode(AllView);
		bcAutoOrder.ClearToQuery();
		bcAutoOrder.SetSearchSpec(&quot;Status&quot;,   &quot;New&quot;);
		bcAutoOrder.SetSearchSpec(&quot;Asset Id&quot;, sDiscountAssetId);
		bcAutoOrder.ExecuteQuery(ForwardOnly);//Scripting 31: No child query present 16may2012 Udbhav IDC VFTK
		
		if (bcAutoOrder.FirstRecord())
		{
			return;
		}

		bcAutoOrder.NewRecord(NewAfter);
		bcAutoOrder.SetFieldValue(&quot;Order Sub Type&quot;,     sSubTypeDisconnectVol);
		bcAutoOrder.SetFieldValue(&quot;Order Type&quot;,         sTypeDisconnect);
		bcAutoOrder.SetFieldValue(&quot;Order Reason&quot;,       sReasonError);
		bcAutoOrder.SetFieldValue(&quot;Status&quot;,             &quot;New&quot;);
		bcAutoOrder.SetFieldValue(&quot;Asset Id&quot;,           sDiscountAssetId);
		bcAutoOrder.SetFieldValue(&quot;Integration Id&quot;,     sDiscountAssetIntegId);
		bcAutoOrder.SetFieldValue(&quot;Part Number&quot;,        &quot;5005&quot;); // Part number of SVB %25 Discount Group
		bcAutoOrder.SetFieldValue(&quot;Billing Account Id&quot;, sBillAccountId);
		bcAutoOrder.WriteRecord();	
	}
	finally
	{
		bcAutoOrder	= null;
		boAutoOrder = null;
		bcAsset		= null;
		boAsset		= null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="01/23/2015 01:15:04"
			   UPDATED_BY="SADMIN"
			   CREATED="04/22/2011 20:55:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAllPort"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAllPort(Inputs,Outputs)
{

	try
	{
		var RootProductId=&quot;&quot;;
		var ProductId=&quot;&quot;;		//If product Id is not null then retrieve single portID e ProdItemID
		var GetPortDomain = &quot;Y&quot;;//fixed I want always all ports	
		var PortItemId=&quot;&quot;;
		var ProdItemId=&quot;&quot;;
		var Result= &quot;Success&quot;;
		var Port =&quot;&quot;;
		var PortObject=&quot;&quot;;
		var PortObject_ProductId=&quot;&quot;;
		var FirstFoundBool = &quot;&quot;;
		var Port_Name= &quot;&quot;;
		var PortObject_Name=&quot;&quot;;
		var Message =&quot;&quot;;
		var AllPorts = TheApplication().NewPropertySet();
		AllPorts.SetType(&quot;GetAllPorts&quot;);
		
		RootProductId = Inputs.GetProperty(&quot;Root Product Id&quot;);	
		ProductId = Inputs.GetProperty(&quot;Product Id&quot;);
		
		if(RootProductId == &quot;&quot; || RootProductId == null || RootProductId == &quot;undefined&quot; || RootProductId == &quot;No Match Row Id&quot; )
			TheApplication().RaiseError(&quot;VFNullVariableMessage&quot;,&quot;RootProductId&quot;);
				
		var bsWorkflowManager;
		var bsInputs;
		var bsOutputs;	
		
		bsWorkflowManager = TheApplication().GetService(&quot;Remote Complex Object Instance Service&quot;);
		bsInputs = TheApplication().NewPropertySet();
		bsOutputs = TheApplication().NewPropertySet();
		
		bsInputs.SetProperty(&quot;Product Id&quot;,RootProductId);
		bsInputs.SetProperty(&quot;GetPortDomain&quot;,GetPortDomain);
		
		bsWorkflowManager.InvokeMethod(&quot;GetAllPorts&quot;,bsInputs,bsOutputs);
		
		AllPorts = bsOutputs.Copy();
		
		if(ProductId!=&quot;&quot;)//If product Id is not null then retrieve single portID e ProdItemID
		{
			for(var l =0; l &lt;AllPorts.GetChildCount(); l++ ){
				Port =AllPorts.GetChild(l);
					
				for(var m =0; m &lt;Port.GetChildCount(); m++ ){
					PortObject = Port.GetChild(m);
					PortObject_ProductId = PortObject.GetProperty(&quot;Product Id&quot;);
					Port_Name =Port.GetProperty(&quot;Name&quot;);
					if(PortObject_ProductId  == ProductId )
					{
						PortObject_Name = PortObject.GetProperty(&quot;Name&quot;) ; 
						ProdItemId = PortObject.GetProperty(&quot;Prod Item Id&quot;);
						PortItemId = Port.GetProperty(&quot;Port Item Id&quot;);
						
						Message = Message + &quot;Port Name:&quot;+Port_Name+&quot;[&quot;+PortItemId+&quot;] , Port Object Name:&quot;+PortObject_Name+&quot;[&quot;+ProdItemId+&quot;]; &quot;;
						
						if (FirstFoundBool == &quot;&quot;)
						{
							FirstFoundBool = &quot;Y&quot;;
						}
						else
						{
							FirstFoundBool = &quot;N&quot;;	
						}
						
					}
			  	}	
			}
			//End of search
			if (FirstFoundBool == &quot;N&quot;)
			{
				Result = &quot;Error&quot;;
				Message = &quot;Attenzione si è verificato un conflitto di catalogo. Il prodotto con identificativo [&quot;+ProductId+&quot;] è presente in più relazioni prodotto= &quot;+Message;
			}
			else if (FirstFoundBool == &quot;&quot;)
			{
				Result = &quot;Error&quot;;
				Message = &quot;No Port Found&quot;;
			}
			else
			{
				if(ProdItemId!=&quot;&quot; &amp;&amp; PortItemId!=&quot;&quot;)
				{
					Result = &quot;Success&quot;;
				}
				else
				{
					Result = &quot;Error&quot;;
					Message = &quot;Some Output are null: ProdItemId=[&quot;+ProdItemId+&quot;] ; PortItemId=[&quot;+PortItemId+&quot;]&quot;;
				}
			}
			
		}
		
		
		
		Outputs.SetProperty(&quot;Result&quot;,Result);
		Outputs.SetProperty(&quot;Message&quot;,Message);
		Outputs.SetProperty(&quot;Prod Item Id&quot;,ProdItemId);
		Outputs.SetProperty(&quot;Port Item Id&quot;,PortItemId);
		
		Outputs.AddChild(AllPorts); 
		
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Result&quot;,&quot;Error&quot;);
		Outputs.SetProperty(&quot;Prod Item Id&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;Port Item Id&quot;,&quot;&quot;);
		
	}
	finally
	{
		AllPorts = null;	//  01/06/2012 code review Nupur Jha	
		bsOutputs = null;
		bsInputs = null;
		bsWorkflowManager = null;
	}

}"
			   SEQUENCE="19"
			   UPDATED="11/23/2013 20:31:50"
			   UPDATED_BY="SADMIN"
			   CREATED="11/23/2013 20:31:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageCampaigns"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//Added for TLG-132 - Sets the Service End Date for Campaigns Line Items based on the original asset Service End Date
function ManageCampaigns(sDiscOrderId,sNewOrderId)
{
	try
	{
		var HandLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var DiscountLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;DISCOUNT&quot;);
		var DisLineLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;DISCLINE&quot;);
		var ADSLLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;VFNET_ADSL&quot;);	
		var Tariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);	
		var strGroup = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PRODUCT_TYPE&quot;,&quot;GROUP&quot;);
		var sHandPromoLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var ZOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;); // DEF-976
		var XOrderItem : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var ZOrderItem : BusComp = ZOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var prodNumber;
		var sEndDate;

		with(XOrderItem)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Service End Date&quot;);
			//Vaibhav 02/03/2012: Removed the part number for Tariffs (52000, 52001, 52002) from searchspec - PROD00029875
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sDiscOrderId+&quot;&apos; AND [VF Product Type] = &apos;&quot;+DiscountLov+&quot;&apos; OR [VF Product Type] = &apos;&quot;+sHandPromoLov+&quot;&apos;&quot;);
			//SeatSearchExpr modified for defect C_MSP00000913: all the products will be deleted except the allowed ones. To do that, &quot;Product Type&quot; field has been used
			//SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND ([VF Product Group] &lt;&gt; &apos;&quot;+Tariff+&quot;&apos; OR [Product Type] &lt;&gt; &apos;&quot;+strGroup+&quot;&apos;)&quot;);
			ExecuteQuery(ForwardOnly);
			var isRec = FirstRecord();
			while(isRec)
			{				
				prodNumber = GetFieldValue(&quot;Part Number&quot;);
				sEndDate = GetFieldValue(&quot;Service End Date&quot;);
				with(ZOrderItem)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Part Number&quot;);
					ActivateField(&quot;Service End Date&quot;);
					SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sNewOrderId+&quot;&apos; AND [Part Number] = &apos;&quot;+prodNumber+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{						
						SetFieldValue(&quot;Service End Date&quot;,sEndDate);
						WriteRecord();
					}
				}
				isRec = NextRecord();
			}//end while
		}//end with
	}
	finally 
	{
		XOrderItem = null;
		XOrderBO = null;
		ZOrderItem = null;
		ZOrderBO = null;
		inProp = null;
		outProp = null;
		BS = null;	
	}
}"
			   SEQUENCE="21"
			   UPDATED="04/02/2015 14:11:54"
			   UPDATED_BY="SADMIN"
			   CREATED="02/26/2013 12:39:07"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageCrossSegment"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageCrossSegment (Inputs,Outputs)
{
	try
	{
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);

		var sResult			= &quot;&quot;;
		var sIdAddedProduct	= &quot;&quot;;
		var sRootLineItemId	= &quot;&quot;;
		var RootTargetPN = &quot;&quot;;
		var RootOldPN = &quot;&quot;;
		var oliId = &quot;&quot;;
		var ObjPick = &quot;&quot;;
		var boOrderEntrySales : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderEntryOrders : BusComp 	= boOrderEntrySales.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcOrderEntryLineItem : BusComp= boOrderEntrySales.GetBusComp(&quot;Order Entry - Line Items&quot;); 	
       	
       	var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var rcoiInProp :PropertySet	= TheApplication().NewPropertySet();
		var rcoiOutProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
       	
		with(bcOrderEntryOrders)
		{
			// Begin: Review Input validation: Scripting 15 null check Added 20may2012 Udbhav IDC
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End

			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Root Part Number&quot;);
			SetSearchSpec (&quot;Id&quot;, OrderId);
			ExecuteQuery(ForwardOnly);//Scripting 31: No child query present 20may2012 Udbhav IDC VFTK
			if(FirstRecord())
			{
				with(bcOrderEntryLineItem)
				{
					if (GetFieldValue(&quot;VF Root Part Number&quot;) == &quot;1000&quot;)
					{
						RootTargetPN = &quot;50000&quot;;
						RootOldPN = &quot;1000&quot;;
					}
					else if (GetFieldValue(&quot;VF Root Part Number&quot;) == &quot;50000&quot;)
					{
						RootTargetPN = &quot;1000&quot;;	
						RootOldPN = &quot;50000&quot;;
					}
					else
					{
						return;
					}
					
					NewRecord(NewAfter);
					InvokeMethod(&quot;EnableCopyExtAttr&quot;);
					InvokeMethod(&quot;EnableConfigCxProd&quot;);
					SetUserProperty(&quot;Skip Loading Default Cfg Instance&quot;,&quot;N&quot;);					
					ObjPick = GetPicklistBusComp(&quot;Product&quot;);
					oliId 	= GetFieldValue(&quot;Id&quot;);
					with(ObjPick)
					{	
						ClearToQuery();
						SetSearchExpr(&quot;[Part #] = &apos;&quot;+RootTargetPN+&quot;&apos;&quot;);
						ExecuteQuery(ForwardOnly);//Scripting 31: No child query present 20may2012 Udbhav IDC VFTK
						if (FirstRecord())
						{			
							Pick();
						}
						else
						{
							sResult =&quot;KO&quot;;
							return(CancelOperation);
						}
					}
					SetFieldValue(&quot;SIM Card Type&quot;, TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;VF_TWIN_SIM_TYPE&quot;,&quot;NO&quot;));					
					var ProdId = GetFieldValue(&quot;Root Product Id&quot;);
					WriteRecord();					

					ClearToQuery();					
					SetViewMode(AllView);
					SetSearchExpr (&quot;[VF Root Part Number] = &apos;&quot;+RootOldPN+&quot;&apos;&quot;);
					ExecuteQuery(ForwardBackward);//Scripting 31: No child query present 20may2012 Udbhav IDC VFTK
					var FoundOld = FirstRecord();
					if (FoundOld)
					{
						DeleteRecord();
						FoundOld = FirstRecord();
					}
				}
			}
		}
		rcoiInProp.SetProperty(&quot;OrderId&quot;,OrderId);
		rcoiInProp.SetProperty(&quot;oliId&quot;,oliId);		
		rcoiInProp.SetProperty(&quot;ProdId&quot;,ProdId);
				
		RCOI(rcoiInProp,rcoiOutProp);
	}
	finally
	{
		ObjPick = null;
		bcOrderEntryLineItem = null;
		bcOrderEntryOrders = null;
		boOrderEntrySales = null;
		rcoiInProp = null;
		rcoiOutProp = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
		

	}
}"
			   SEQUENCE="22"
			   UPDATED="04/30/2014 17:22:10"
			   UPDATED_BY="SADMIN"
			   CREATED="02/10/2012 12:51:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageDataSharing"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageDataSharing(sOrderId)
{
	//CR722.2 Data Sharing
	//Removes data sharing products from the created transfer order
	try
	{
		var dataSharingPartNum = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DATA_SHARING_CONFIG&quot;,&quot;SERVICE_PART_NUM&quot;);
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var XOrderItem : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		with(XOrderItem)
		{
			ClearToQuery();
			SetViewMode(AllView);		
			
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND [Part Number] = &apos;&quot;+dataSharingPartNum+&quot;&apos;&quot;);			
			ExecuteQuery(ForwardBackward);
			var isRec = FirstRecord();
			while(isRec)
			{
				DeleteRecord();
				isRec = FirstRecord();
			}
		}
	}
	finally 
	{
		XOrderItem = null;
		XOrderBO = null;
		
	
	}
}"
			   SEQUENCE="23"
			   UPDATED="04/30/2014 17:22:10"
			   UPDATED_BY="SADMIN"
			   CREATED="09/06/2013 14:29:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageHandset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageHandset(sOrderId)
{
	try
	{
		var HandLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var PMSLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;PMS&quot;);
		var DiscountLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;DISCOUNT&quot;);
		var groupChild = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;GROUP_CHILD&quot;);
		var DisLineLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;DISCLINE&quot;);
		var ADSLLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;VFNET_ADSL&quot;);
		var Pasaport = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;PASAPORT&quot;);
		var Tariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);	
		var sHandPromoLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		//var strGroup = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PRODUCT_TYPE&quot;,&quot;GROUP&quot;);
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var XOrderItem : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);

		with(XOrderItem)
		{
			//Begin - Scripting 15 - Input validation
			inProp.SetProperty(&quot;sOrderId&quot;,sOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15

			ClearToQuery();
			SetViewMode(AllView);
			//Vaibhav 02/03/2012: Removed the part number for Tariffs (52000, 52001, 52002) from searchspec - PROD00029875
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND ([Product Sub Type] = &apos;&quot;+Pasaport+&quot;&apos; OR [VF Product Type] = &apos;&quot;+HandLov+&quot;&apos; OR [VF Product Type] = &apos;&quot;+PMSLov+&quot;&apos; OR [VF Product Type] = &apos;&quot;+DiscountLov+&quot;&apos; OR [VF Product Type] = &apos;&quot;+groupChild+&quot;&apos; OR [VF Product Sub Type] = &apos;&quot;+ADSLLov+&quot;&apos; OR [Part Number] = &apos;13000&apos; OR [Part Number] = &apos;16999&apos; OR [Part Number] = &apos;51014&apos; OR [Part Number] = &apos;51015&apos; OR [Part Number] = &apos;51016&apos; OR [Part Number] = &apos;51017&apos; OR [Part Number] = &apos;51018&apos; OR [Part Number] = &apos;51019&apos; OR [Part Number] = &apos;51023&apos; OR [Part Number] = &apos;10901&apos; OR [Part Number] = &apos;2221&apos; OR [Part Number] = &apos;9066&apos; OR [Part Number] = &apos;9067&apos; OR [Part Number] = &apos;9068&apos;)&quot;);			//SeatSearchExpr modified for defect C_MSP00000913: all the products will be deleted except the allowed ones. To do that, &quot;Product Type&quot; field has been used
			//SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND ([VF Product Group] &lt;&gt; &apos;&quot;+Tariff+&quot;&apos; OR [Product Type] &lt;&gt; &apos;&quot;+strGroup+&quot;&apos;)&quot;);
			ExecuteQuery(ForwardBackward);
			var isRec = FirstRecord();
			while(isRec)
			{
				DeleteRecord();
				isRec = FirstRecord();
			}

			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Eligibility Status&quot;);
			SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{	
				var strMessageCategory = &quot;VF Message Category&quot;;
            	var strCode = &quot;004&quot;;
            	var sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
				SetFieldValue(&quot;Eligibility Status&quot;,&quot;N&quot;);
				SetFieldValue(&quot;Eligibility Reason&quot;,sMsg);
				SetFieldValue(&quot;Prod Prom Instance Id&quot;,&quot;&quot;);
				SetFieldValue(&quot;Prod Prom Id&quot;,&quot;&quot;);
				WriteRecord();
			}
		}
	}
	finally 
	{
		XOrderItem = null;
		XOrderBO = null;
		inProp = null;
		outProp = null;
		BS = null;	
	}
}"
			   SEQUENCE="24"
			   UPDATED="04/30/2014 17:22:10"
			   UPDATED_BY="SADMIN"
			   CREATED="06/20/2011 13:19:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageOnenet"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageOnenet(sOrderId)
{
	try
	{
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var XOrderItem : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);

		with(XOrderItem)
		{
			//Begin - Scripting 15 - Input validation
			inProp.SetProperty(&quot;sOrderId&quot;,sOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15

			ClearToQuery();
			SetViewMode(AllView);
			//Vaibhav 02/03/2012: Removed the part number for Tariffs (52000, 52001, 52002) from searchspec - PROD00029875
			//SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND ([Product Sub Type] = &apos;&quot;+Pasaport+&quot;&apos; OR [VF Product Type] = &apos;&quot;+HandLov+&quot;&apos; OR [VF Product Type] = &apos;&quot;+PMSLov+&quot;&apos; OR [VF Product Type] = &apos;&quot;+DiscountLov+&quot;&apos; OR [VF Product Type] = &apos;&quot;+groupChild+&quot;&apos; OR [VF Product Sub Type] = &apos;&quot;+ADSLLov+&quot;&apos; OR [Part Number] = &apos;13000&apos; OR [Part Number] = &apos;16999&apos; OR [Part Number] = &apos;51014&apos; OR [Part Number] = &apos;51015&apos; OR [Part Number] = &apos;51016&apos; OR [Part Number] = &apos;51017&apos; OR [Part Number] = &apos;51018&apos; OR [Part Number] = &apos;51019&apos; OR [Part Number] = &apos;51023&apos; OR [Part Number] = &apos;10901&apos; OR [Part Number] = &apos;2221&apos; OR [Part Number] = &apos;9066&apos; OR [Part Number] = &apos;9067&apos; OR [Part Number] = &apos;9068&apos;)&quot;);			//SeatSearchExpr modified for defect C_MSP00000913: all the products will be deleted except the allowed ones. To do that, &quot;Product Type&quot; field has been used
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND [Part Number] = &apos;25134&apos;&quot;);
			//SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND ([VF Product Group] &amp;lt;&amp;gt; &apos;&quot;+Tariff+&quot;&apos; OR [Product Type] &amp;lt;&amp;gt; &apos;&quot;+strGroup+&quot;&apos;)&quot;);
			ExecuteQuery(ForwardBackward);
			var isRec = FirstRecord();
			while(isRec)
			{
				DeleteRecord();
				isRec = FirstRecord();
			}
		}
	}
	finally 
	{
		XOrderItem = null;
		XOrderBO = null;
		inProp = null;
		outProp = null;
		BS = null;	
	}
}"
			   SEQUENCE="25"
			   UPDATED="06/21/2015 23:18:25"
			   UPDATED_BY="SADMIN"
			   CREATED="06/21/2015 23:18:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageTariff"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageTariff(sDiscOrderId,sNewOrderId,sBillId,oldBillingAccountId,inOrderReason)
{
	try
	{
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var XOrderItem : BusComp = XOrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var inputs = TheApplication().NewPropertySet ();
        var outputs = TheApplication().NewPropertySet ();
        
		inputs.SetProperty(&quot;newBillingAccountId&quot;, sBillId);
		inputs.SetProperty (&quot;oldBillingAccountId&quot;,oldBillingAccountId);
	
		if (inOrderReason!=253)CheckM2MBillingAccount(inputs, outputs);
		
		var resultCheck = outputs.GetProperty(&quot;Result&quot;);
		if (resultCheck == &quot;KO&quot;)
		{
			with(XOrderItem)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;VF Tariff Plan&quot;);
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sDiscOrderId+&quot;&apos; AND [VF Tariff Plan] is not null&quot;);
				ExecuteQuery(ForwardOnly);
				var isRec = FirstRecord();
				if (isRec)
				{			
							var strtariff = GetFieldValue(&quot;VF Tariff Plan&quot;);				
				}//end if
				
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;VF Tariff Plan&quot;);
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sNewOrderId+&quot;&apos; AND [Product Translated] = &apos;&quot;+strtariff+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				var isRecTariff = FirstRecord();
				if (isRecTariff)
					DeleteRecord();
				
			}//end with
		}
	}
	finally 
	{
		XOrderItem = null;
		XOrderBO = null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		outputs = null;
		inputs = null;
	}
}"
			   SEQUENCE="27"
			   UPDATED="01/16/2018 16:59:02"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/22/2013 20:13:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PickProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function PickProduct(Inputs, Outputs){

	try
	{
	
	  var boOrder : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);	  
	  var  bcOrderEntry : BusComp = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
	  var bcOrderEntryLineItem : BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
	  var ProductPartNumber	= Inputs.GetProperty(&quot;ProductPartNumber&quot;);;
	  var strAddAction			= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);	
	  var productId = null;					

	  bcOrderEntryLineItem.InvokeMethod(&quot;EnableCopyExtAttr&quot;);
	  bcOrderEntryLineItem.InvokeMethod(&quot;EnableConfigCxProd&quot;);
	  bcOrderEntryLineItem.SetUserProperty(&quot;Skip Loading Default Cfg Instance&quot;,&quot;N&quot;);
							
	  var ObjPick : BusComp = bcOrderEntryLineItem.GetPicklistBusComp(&quot;Product&quot;);
      var oliId 	= Inputs.GetProperty(&quot;OliId&quot;);
	  with(ObjPick)
	  {	
		ClearToQuery();
		ActivateField(&quot;Part #&quot;);
		SetSearchExpr(&quot;[Part #] = &apos;&quot;+ProductPartNumber+&quot;&apos;&quot;);
		ExecuteQuery(ForwardOnly);
		if (FirstRecord()){
			Pick();
			productId = ObjPick.GetFieldValue(&quot;Id&quot;);
			
			}
	  }
	  bcOrderEntryLineItem.WriteRecord();
							
	  var bcOrderItemXA  : BusComp  = boOrder.GetBusComp (&quot;Order Item XA&quot;);
	  
	  bcOrderItemXA.ActivateField (&quot;Action Code&quot;);
	  bcOrderItemXA.ClearToQuery ();
	  bcOrderItemXA.SetViewMode (AllView);
	  bcOrderItemXA.SetSearchSpec (&quot;Object Id&quot;, oliId);
	  bcOrderItemXA.ExecuteQuery (ForwardOnly);
				
   	  var	booRecordExists1 = bcOrderItemXA.FirstRecord ();
	  
	  while (booRecordExists1)
	  {
	  	bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;,strAddAction);
		bcOrderItemXA.WriteRecord ();
		booRecordExists1 = bcOrderItemXA.NextRecord();
	  }
	  
	  Outputs.SetProperty(&quot;ProductId&quot;,productId);
	  
	 }
	 finally
	 {
	 	//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
	 	ObjPick					= null;
	 	bcOrderEntryLineItem	= null;
		//boOrder					= null;
		bcOrderEntry			= null;
		//ObjPick					= null;
		bcOrderItemXA			= null;
		boOrder					= null;
	 }    


}"
			   SEQUENCE="29"
			   UPDATED="01/16/2018 17:03:35"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="03/05/2013 14:42:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PickReason"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function PickReason (Inputs, Outputs)
{
	try {
	   		
		var	OrderId = Inputs.GetProperty(&quot;OrderId&quot;);		
		var	reason = Inputs.GetProperty(&quot;Reason&quot;);	
		var	orderSubType = Inputs.GetProperty(&quot;OrderSubType&quot;);	
		var strSubTypeValue = TheApplication ().InvokeMethod (&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, orderSubType);
	    //var lovReason         = TheApplication ().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,reason);
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var BcOrderEntry : BusComp = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var boParameters : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var BcParameter : BusComp = boParameters.GetBusComp(&quot;ACS NI Parameter&quot;);
		var strActor				= &quot;&quot;;
		var oLovBO : BusObject 	= TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var oLovBC : BusComp	= oLovBO.GetBusComp(&quot;List Of Values&quot;);
				
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		
		BcOrderEntry.ClearToQuery();
		BcOrderEntry.SetViewMode(AllView);
		BcOrderEntry.ActivateField(&quot;VF Status Column&quot;); //status columnn
		BcOrderEntry.ActivateField(&quot;VF GreyBlack From Reason&quot;); //bg code
		//BcOrderEntry.ActivateField(&quot;VF Category Action&quot;); //category
		BcOrderEntry.ActivateField(&quot;Order Reason No Pick&quot;);
		BcOrderEntry.ActivateField(&quot;VF Logical Reason&quot;);
		BcOrderEntry.ActivateField(&quot;VF Status Code Calc&quot;);
		BcOrderEntry.ActivateField(&quot;VF Fraud Status Old&quot;);
		BcOrderEntry.ActivateField(&quot;VF Customer Status Old&quot;);
		BcOrderEntry.ActivateField(&quot;VF Credit Status Old&quot;);
		BcOrderEntry.ActivateField(&quot;VF Dunning Status Old&quot;);
		BcOrderEntry.ActivateField(&quot;VF Document Missing Status Old&quot;);
		BcOrderEntry.SetSearchSpec(&quot;Id&quot;,OrderId);
		BcOrderEntry.ExecuteQuery(ForwardOnly); //Diva 27/03/2012: Added parameter for oracle review
	 	var booRecordExistsOrder = BcOrderEntry.FirstRecord ();
	    if (booRecordExistsOrder)
	    {
	    	var strFraudActorValue 		= BcOrderEntry.GetFieldValue(&quot;VF Fraud Status Old&quot;);
			var strCustomerActorValue 	= BcOrderEntry.GetFieldValue(&quot;VF Customer Status Old&quot;);
			var strCreditActorValue 	= BcOrderEntry.GetFieldValue(&quot;VF Credit Status Old&quot;);
			var strDunningActorValue 	= BcOrderEntry.GetFieldValue(&quot;VF Dunning Status Old&quot;);
			var strDocumentActorValue 	= BcOrderEntry.GetFieldValue(&quot;VF Document Missing Status Old&quot;);
		  	var statusCalc  			= BcOrderEntry.GetFieldValue(&quot;VF Status Code Calc&quot;);
			
			var expr = &quot;&quot;;
			var strActor = &quot;&quot;;
			
			if(orderSubType != &quot;&quot; &amp;&amp; orderSubType != null)
			{
				with (oLovBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;High&quot;);
					SetSearchSpec(&quot;Name&quot;,orderSubType);
					SetSearchSpec(&quot;Type&quot;,&quot;VF_SUBTYPE_ACTOR&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
						strActor = GetFieldValue(&quot;High&quot;);
				}
			}		
			if (strActor == &quot;&quot;)
				expr = &quot;[Condition2] = &apos;-&apos;&quot;;
			else if (strActor == &quot;Fraud&quot;)
				expr  = &quot;[Condition4] = &apos;&quot;+strFraudActorValue +&quot;&apos; AND [Condition2] = &apos;&quot;+orderSubType +&quot;&apos;&quot;;
			else if (strActor == &quot;Customer&quot;)
				expr = &quot;[Condition4] = &apos;&quot;+strCustomerActorValue +&quot;&apos; AND [Condition2] = &apos;&quot;+orderSubType +&quot;&apos;&quot;;
			else if (strActor == &quot;Credit&quot;)
				expr = &quot;[Condition4] = &apos;&quot;+strCreditActorValue +&quot;&apos; AND [Condition2] = &apos;&quot;+orderSubType +&quot;&apos;&quot;;
			else if (strActor == &quot;Dunning&quot;)
				expr = &quot;[Condition4] = &apos;&quot;+strDunningActorValue +&quot;&apos; AND [Condition2] = &apos;&quot;+orderSubType +&quot;&apos;&quot;;
			else if (strActor == &quot;Missing Document&quot;)
				expr = &quot;[Condition4] = &apos;&quot;+strDocumentActorValue +&quot;&apos; AND [Condition2] = &apos;&quot;+orderSubType +&quot;&apos;&quot;;
			else
				expr = &quot;[Condition2] = &apos;&quot;+orderSubType +&quot;&apos;&quot;;
			
			if (reason != null &amp;&amp; reason != &quot;&quot;)
				expr = expr + &quot;AND [Condition1] = &apos;&quot; + reason + &quot;&apos;&quot;;
			BcParameter.ActivateField(&quot;Condition5&quot;); //status columnn
			BcParameter.ActivateField(&quot;Condition4&quot;); //bg code
			BcParameter.ActivateField(&quot;Condition3&quot;); //category
			BcParameter.ActivateField(&quot;Condition1&quot;); //category
			BcParameter.ActivateField(&quot;Condition6&quot;); //category
			BcParameter.SetViewMode(AllView);
			BcParameter.ClearToQuery();
			var strFunction =&quot;VF Reason&quot;;
		
			//var expr = &quot;[Function] = &apos;&quot;+strFunction+&quot;&apos; AND [Name] = &apos;&quot;+statusCalc+&quot;&apos; AND [Condition2] = &apos;&quot;+orderSubType+&quot;&apos; AND [Condition1] = &apos;&quot;+reason+&quot;&apos;&quot;;		
		    BcParameter.SetSearchExpr(expr);
		   	BcParameter.ExecuteQuery(ForwardOnly); //Diva 27/03/2012: Added parameter for oracle review
		     
			var booRecordExists = BcParameter.FirstRecord ();	
		    if (booRecordExists )
		    {
		    	var gbcode 		= BcParameter.GetFieldValue(&quot;Condition4&quot;);
		    	var category 	= BcParameter.GetFieldValue(&quot;Condition3&quot;);
		    	var statuscol	= BcParameter.GetFieldValue(&quot;Condition5&quot;);
		    	var logicalReason	= BcParameter.GetFieldValue(&quot;Condition6&quot;);
				if (booRecordExistsOrder)
		  		{
		  			var lovReason = TheApplication ().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,BcParameter.GetFieldValue(&quot;Condition1&quot;));
			  		BcOrderEntry.SetFieldValue(&quot;VF Status Column&quot;,statuscol);
			  		BcOrderEntry.SetFieldValue(&quot;VF GreyBlack From Reason&quot;,gbcode);
			  		//BcOrderEntry.SetFieldValue(&quot;VF Category Action&quot;,category);
					BcOrderEntry.SetFieldValue(&quot;VF Logical Reason&quot;,logicalReason);
			  		BcOrderEntry.SetFieldValue(&quot;Order Reason No Pick&quot;,lovReason);
			  		BcOrderEntry.SetFieldValue(&quot;Order Sub Type&quot;, strSubTypeValue);			  				
			  		BcOrderEntry.WriteRecord();
		  		}
			}
		}
		return (CancelOperation);
	 }
	 finally
	 {
	 	oLovBC = null;
	 	oLovBO = null;
	 	BS = null;
		outProp = null;
		inProp = null;
		BcOrderEntry = null;
		boOrder = null;
		BcParameter = null;
		boParameters = null;
	}
}"
			   SEQUENCE="30"
			   UPDATED="06/21/2015 23:18:25"
			   UPDATED_BY="SADMIN"
			   CREATED="08/19/2010 13:46:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RCOI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RCOI (Inputs,Outputs)
{
	try
	{
		var CreateSession = &quot;&quot;;
		var ISS : Service = TheApplication().GetService(&quot;ISS Copy Service&quot;);
		var inpISS : PropertySet = TheApplication().NewPropertySet();
		var outISS : PropertySet = TheApplication().NewPropertySet();
		
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;,OrderId);
		var oliId = Inputs.GetProperty(&quot;oliId&quot;,oliId);		
		var ProdId = Inputs.GetProperty(&quot;ProdId&quot;,ProdId);
		
				
		inpISS.SetProperty(&quot;ParentObjectId&quot;,OrderId);
		inpISS.SetProperty(&quot;IntegrationObjectName&quot;, &quot;SIS OM Order&quot;); 
		inpISS.SetProperty(&quot;RootId&quot;,oliId); 
		inpISS.SetProperty(&quot;ProductId&quot;,ProdId); 
		inpISS.SetProperty(&quot;InstanceName&quot;,&quot;TheInstance&quot;);
		inpISS.SetProperty(&quot;InstanceCollectionName&quot;,&quot;TheInstanceCollection&quot;);
		inpISS.SetProperty(&quot;SearchSpec&quot;,&quot;[Header.Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Line Item.Root Id] = &apos;&quot;+oliId+&quot;&apos;&quot;);
		
		ISS.InvokeMethod(&quot;LoadEAI&quot;,inpISS,outISS);	
		var RootId = outISS.GetProperty(&quot;RootId&quot;);

/* ++++ 20161221:Begin:JIRA-35110 -&gt; DEF-15306 -&gt; Oracle SR:3-13794408481 ++++++++++ 
   ++++ 20161221:Begin:JIRA-35106 -&gt; DEF-15425 -&gt; Oracle SR:3-13794408481 ++++++++++ 
   ++++ 20161221:Begin:JIRA-35338              -&gt; Oracle SR:3-13794408481 ++++++++++ 
   As per Oracle suggestion use Remote Complex Object Instance Service (again) to 
   improve the LoadInstance performance by reducing the number of SQL queries. *****/
		var COI : Service = TheApplication().GetService(&quot;Remote Complex Object Instance Service&quot;); //TLGA-2466 not working in TRK Lang
/*		
//		var COI : Service = TheApplication().GetService(&quot;Remote Complex Object Instance Service&quot;); //TLGA-2466 not working in TRK Lang
		var COI : Service = TheApplication().GetService(&quot;Complex Object Instance Service&quot;);
   ---- 20161221:End:JIRA-35338              -&gt; Oracle SR:3-13794408481 -----------
   ---- 20161221:End:JIRA-35106 -&gt; DEF-15425 -&gt; Oracle SR:3-13794408481 -----------
   ---- 20161221:End:JIRA-35110 -&gt; DEF-15306 -&gt; Oracle SR:3-13794408481 ----------- */

		var inCOI : PropertySet = TheApplication().NewPropertySet();
		var outCOI : PropertySet = TheApplication().NewPropertySet();
		var inCOIcs : PropertySet = TheApplication().NewPropertySet();
		var outCOIcs : PropertySet = TheApplication().NewPropertySet();
		var inCOIsynch : PropertySet = TheApplication().NewPropertySet();
		var outCOIsynch : PropertySet = TheApplication().NewPropertySet();		
		var inCOIun : PropertySet = TheApplication().NewPropertySet();
		var outCOIun : PropertySet = TheApplication().NewPropertySet();
			
		inCOI.SetProperty(&quot;ExternalScript&quot;,&quot;Y&quot;);
		inCOI.SetProperty(&quot;IntObjName&quot;,&quot;SIS OM Order&quot;);
		inCOI.SetProperty(&quot;ObjId&quot;,OrderId);//RootAssetIntegrationId);
		inCOI.SetProperty(&quot;Product Id&quot;,ProdId);
		inCOI.SetProperty(&quot;SearchSpec&quot;,&quot;[Header.Id] = &apos;&quot; +OrderId+ &quot;&apos; AND [Line Item.Root Id] = &apos;&quot; +oliId+ &quot;&apos;&quot;);
		inCOI.SetProperty(&quot;TriggerEvent&quot;,&quot;Y&quot;);
		inCOI.SetProperty(&quot;NewRecord&quot;,&quot;Y&quot;);
		inCOI.SetProperty(&quot;RootId&quot;,oliId);
		inCOI.SetProperty(&quot;InstanceName&quot;,&quot;TheInstance&quot;);
		inCOI.SetProperty(&quot;ContextVariableMap&quot;,&quot;Cfg Eligibility Variable Map - Context&quot;);
		inCOI.SetProperty(&quot;AutoSync&quot;,&quot;Y&quot;);
		COI.InvokeMethod(&quot;LoadInstance&quot;,inCOI,outCOI);
		
		CreateSession = outCOI.GetProperty(&quot;CreateSession&quot;);			
		if (CreateSession == &quot;Y&quot;)
		{
					
			inCOIcs.SetProperty(&quot;ExternalScript&quot;,&quot;Y&quot;);
			inCOIcs.SetProperty(&quot;IntObjName&quot;,&quot;SIS OM Order&quot;);
			inCOIcs.SetProperty(&quot;ObjId&quot;,OrderId);
			inCOIcs.SetProperty(&quot;Product Id&quot;,ProdId);
			inCOIcs.SetProperty(&quot;TriggerEvent&quot;,&quot;Y&quot;);
			inCOIcs.SetProperty(&quot;NewRecord&quot;,&quot;Y&quot;);
			inCOIcs.SetProperty(&quot;RootId&quot;,oliId);
			inCOIcs.SetProperty(&quot;SearchSpec&quot;,&quot;[Header.Id] = &apos;&quot; +OrderId+ &quot;&apos; AND [Line Item.Root Id] = &apos;&quot; +oliId+ &quot;&apos;&quot;);		
			COI.InvokeMethod(&quot;CreateSession&quot;,inCOIcs,outCOIcs);
			var CxOjb = outCOIcs.GetChild(0);
			var IsConfig = outCOIcs.GetProperty(&quot;IsConfig&quot;);
			
			inCOIsynch.SetProperty(&quot;ExternalScript&quot;,&quot;Y&quot;);
			inCOIsynch.SetProperty(&quot;IntObjName&quot;,&quot;SIS OM Order&quot;);
			inCOIsynch.SetProperty(&quot;ObjId&quot;,OrderId);
			inCOIsynch.SetProperty(&quot;TriggerEvent&quot;,&quot;Y&quot;);
			inCOIsynch.SetProperty(&quot;InstanceName&quot;,&quot;TheInstance&quot;);
			inCOIsynch.SetProperty(&quot;RootId&quot;,oliId);
			COI.InvokeMethod(&quot;SyncInstance&quot;,inCOIsynch,outCOIsynch);
			
			inCOIun.SetProperty(&quot;RootId&quot;,oliId);
			inCOIun.SetProperty(&quot;IntObjName&quot;,&quot;SIS OM Order&quot;);
			inCOIun.SetProperty(&quot;ObjId&quot;,OrderId);
			COI.InvokeMethod(&quot;UnloadInstance&quot;,inCOIun,outCOIun);
		}
	}
	finally
	{	
		inpISS = null;
		outISS = null;
		ISS = null;
		outCOIun	= null;
		inCOIun	= null;
		outCOIsynch	= null;
		inCOIsynch	= null;
		outCOIcs	= null;
		inCOIcs	= null;
		outCOI	= null;
		inCOI	= null;
		COI	= null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="12/24/2016 23:59:18"
			   UPDATED_BY="SADMIN"
			   CREATED="02/10/2012 12:51:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ResetUpdownCounter"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ResetUpdownCounter (Inputs, Outputs)
{
//Amul 20120123 - Created this method for CR201- Calling from post process WF
	 try
	 {
		var OrderEntryBO	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderLineItems : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var KafeinLov     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;KAFEIN&quot;);
		var DelActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var AddActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var bundleProdGroup = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;);
		var bundleProdType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var OrderID       = Inputs.GetProperty(&quot;OrderID&quot;);
		var Expr			= &quot;&quot;;
		var Cnt			= 0;
	      
		//Begin - Scripting 15 - Input validation		
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderID&quot;,OrderID);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
	
	     with (OrderLineItems)
	     {
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Action Code&quot;);
			ActivateField(&quot;VF Up Down Counter&quot;);
			ActivateField(&quot;VF Product Sub Type&quot;);
			//Expr = &quot;[Order Header Id] = &apos;&quot;+OrderID+&quot;&apos; AND ([VF Product Type] = &apos;HANDSET&apos; AND ([Action Code] = &apos;&quot;+DelActionCode+&quot;&apos; OR [Action Code] = &apos;&quot;+AddActionCode+&quot;&apos;))&quot;;
			Expr = &quot;[Order Header Id] = &apos;&quot;+OrderID+&quot;&apos; AND ([VF Product Type] = &apos;&quot;+bundleProdType +&quot;&apos; AND ([Action Code] = &apos;&quot;+DelActionCode+&quot;&apos; OR [Action Code] = &apos;&quot;+AddActionCode+&quot;&apos;))&quot;; //BundledPromotions			
			SetSearchExpr(Expr);
			ExecuteQuery(ForwardOnly);
			var Cnt = CountRecords();
			if (Cnt == 2)
			{
			     if(GetFieldValue(&quot;Action Code&quot;) == DelActionCode)
			     {
			      	var OldProdType = GetFieldValue(&quot;VF Product Sub Type&quot;);
			     }
			     
			     else
			     {
			          var NewProdType = GetFieldValue(&quot;VF Product Sub Type&quot;);
			     }
			     
			     if(OldProdType != NewProdType)
			     {
			             SetFieldValue(&quot;VF Up Down Counter&quot;,&quot;0&quot;);
			             WriteRecord();
			     }
			}
		}
	}
	finally
	{
		inProp 		= null;
		outProp		= null;
		BS		= null;
		OrderLineItems = null;
		OrderEntryBO 	= null;
	}
}"
			   SEQUENCE="32"
			   UPDATED="06/21/2015 23:18:25"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2012 08:10:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;orderDelete&quot;)
	{
		orderDelete(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;CheckM2MBillingAccount&quot;)
	{
		CheckM2MBillingAccount(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;manageSVBProducts&quot;)
	{
		manageSVBProducts(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;transfer&quot;)
	{
		transfer(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;PickReason&quot;)
	{
		PickReason(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;cancelActivationOrder&quot;)
	{
		cancelActivationOrder(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;checkBillCycle&quot;)
	{
		checkBillCycle(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;searchProduct&quot;)
	{
		searchProduct(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;addProductToOrder&quot;)
	{
		addProductToOrder(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;DisconnectionSVB25&quot;)
	{
		DisconnectionSVB25(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;checkOrderStatus&quot;)
	{
		checkOrderStatus(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;DisconnectionSVB&quot;)
	{
		DisconnectionSVB(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;checkNumberXTransfer&quot;)
	{
		checkNumberXTransfer(Inputs, Outputs);
		return (CancelOperation);	
	}
	if (MethodName == &quot;SetEMD&quot;)
	{
		SetEMD(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;callCrossAddonEligWS&quot;)
	{
		callCrossAddonEligWS(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;CalcEndDate&quot;)
	{
		CalcEndDate(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;checkBMSISDN&quot;)
	{
		checkBMSISDN(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;checkEMD&quot;)
	{
		checkEMD(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;setNewEMD&quot;)
	{
		setNewEMD(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;ResetUpdownCounter&quot;)
	{
		ResetUpdownCounter(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;ManageCrossSegment&quot;)
	{
		ManageCrossSegment(Inputs, Outputs);
		return(CancelOperation);
	}	
	if (MethodName == &quot;DisconnectBAOrders&quot;)
	{
		DisconnectBAOrders(Inputs, Outputs);
		return(CancelOperation);
	}	
	if (MethodName == &quot;PickProduct&quot;)
	{
		PickProduct(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;RCOI&quot;)
	{
		RCOI(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;automaticDisconnection&quot;)
	{
		automaticDisconnection(Inputs, Outputs);
		return(CancelOperation);
	}		
	return (ContinueOperation);
}"
			   SEQUENCE="39"
			   UPDATED="06/21/2015 23:18:25"
			   UPDATED_BY="SADMIN"
			   CREATED="06/23/2010 08:44:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetEMD"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetEMD(Inputs, Outputs)
{
	try
	{
		var strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var oBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var oBCOrder : BusComp = oBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var oBCLIXA : BusComp = oBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var strActAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var SearchExpr = &quot;[Action Code] = &apos;&quot;+strActAdd+&quot;&apos; AND [Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND ([Part Number] = &apos;51014&apos; OR [Part Number] = &apos;51015&apos; OR [Part Number] = &apos;51016&apos;)&quot;;
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);

		// Begin: Review Input validation: Scripting 15 null check Added 20may2012 Udbhav IDC
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End
		
		oBCOrder.ClearToQuery();
		oBCOrder.SetViewMode(AllView);
		oBCOrder.ActivateField(&quot;Service Start Date&quot;);
		oBCOrder.SetSearchExpr(SearchExpr);
		oBCOrder.ExecuteQuery(ForwardOnly);
		var iNextRecord = oBCOrder.FirstRecord();
		while(iNextRecord)
		{
			var EMD = oBCOrder.GetFieldValue(&quot;Service Start Date&quot;);
			if ((EMD != &quot;&quot;) &amp;&amp; (EMD != &quot;undefined&quot;) &amp;&amp; (EMD != null)){
				var dtEMD = new Date(EMD);
				var compId = oBCOrder.GetFieldValue(&quot;Id&quot;);
		
				oBCLIXA.ClearToQuery();
				oBCLIXA.SetViewMode(AllView);
				oBCLIXA.SetSearchSpec(&quot;Object Id&quot;,compId);//Scripting 15:get field value of id will not return null
				oBCLIXA.SetSearchSpec(&quot;Name&quot;,&quot;Earliest Modification Date&quot;);
				oBCLIXA.ExecuteQuery(ForwardOnly);
				if(oBCLIXA.FirstRecord())
				{
					oBCLIXA.SetFieldValue(&quot;Text Value&quot;,EMD);
					oBCLIXA.WriteRecord();
				}
			}
			iNextRecord = oBCOrder.NextRecord();
		}
	}
	finally
	{
		oBCOrder = null;
		oBCLIXA = null;
		oBO = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="34"
			   UPDATED="06/21/2015 23:18:25"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2011 12:36:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="addProductToOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function addProductToOrder (Inputs, Outputs)
{	
	try
	{
		var sPartNumber		= Inputs.GetProperty(&quot;productPartNumber&quot;); //Product Part Number
		var sOrderId		= Inputs.GetProperty(&quot;orderId&quot;); //OrderId
		var sPriList		= Inputs.GetProperty(&quot;priceListId&quot;);
		
		//Begin - Scripting 15 - Input validation // Validating only OrderId since other inputs doesn&apos;t cause issue
		var inProp 	: PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;sOrderId&quot;,sOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		//End - Scripting 15
		
		var ObjPick : BusComp;
		var sResult			= &quot;&quot;;
		var sIdAddedProduct	= &quot;&quot;;
		var sRootLineItemId	= &quot;&quot;;
		var ProdPortId = &quot;&quot;;
		var PortValidProdId = &quot;&quot;;
		var ProdName = &quot;&quot;;

		var boOrderEntrySales :BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderEntryOrders :BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Orders&quot;); 
		var bcOrderEntryLineItem :BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Line Items&quot;); 
		var bcOrderEntryLineItemSimp :BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var bcProd :BusComp	= boOrderEntrySales.GetBusComp(&quot;Internal Product&quot;);	
		var boISS :BusObject = TheApplication().GetBusObject(&quot;ISS CP Loader&quot;);
		var bcISS :BusComp = boISS.GetBusComp(&quot;Cfg ISS Sub Objects&quot;);

		bcOrderEntryOrders.ClearToQuery();
		bcOrderEntryOrders.SetViewMode(AllView);
		bcOrderEntryOrders.SetSearchSpec (&quot;Id&quot;, sOrderId);		

		bcOrderEntryLineItem.ClearToQuery();		
		bcOrderEntryLineItem.SetViewMode(AllView);

		bcOrderEntryOrders.ExecuteQuery(ForwardOnly); 
			
		if(bcOrderEntryLineItem.FirstRecord())
		{
			sRootLineItemId = bcOrderEntryLineItem.GetFieldValue(&quot;Id&quot;);
		}
		else
		{
			TheApplication().RaiseErrorText(&quot;ERROR: MAIN LINE ITEM NOT FOUND&quot;);
		}
		bcOrderEntryLineItem.NewRecord(NewAfter);
		sIdAddedProduct = bcOrderEntryLineItem.GetFieldValue(&quot;Id&quot;);
		bcOrderEntryLineItem.InvokeMethod(&quot;EnableCopyExtAttr&quot;);
		bcOrderEntryLineItem.InvokeMethod(&quot;EnableConfigCxProd&quot;);
		bcOrderEntryLineItem.SetUserProperty(&quot;Skip Loading Default Cfg Instance&quot;,&quot;N&quot;);
						
		ObjPick = bcOrderEntryLineItem.GetPicklistBusComp(&quot;Product&quot;);
		var oliId 	= bcOrderEntryLineItem.GetFieldValue(&quot;Id&quot;);
		with(ObjPick)
		{	
			ClearToQuery();
			SetSearchExpr(&quot;[Part #] = &apos;&quot;+sPartNumber+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()){
				Pick();
			}
			else
			{
				sResult =&quot;KO&quot;;
				return(CancelOperation);
			}
		}
		bcOrderEntryLineItem.WriteRecord();
		with(bcProd)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Part #] = &apos;&quot;+sPartNumber+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				ProdName = GetFieldValue(&quot;Name&quot;);
			}
		}
		with (bcISS)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Orig Id&quot;);
			ActivateField(&quot;Port Id&quot;);
			SetSearchExpr (&quot;[Item Name] = &apos;&quot;+ProdName+&quot;&apos; AND [Last Version] = &apos;999999999&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()) 
			{
				PortValidProdId = bcISS.GetFieldValue(&quot;Orig Id&quot;);
				ProdPortId = bcISS.GetFieldValue(&quot;Port Id&quot;);
				if (ProdPortId == &quot;&quot;)
				{
					ProdPortId = PortValidProdId;
				}
			}
		}
		
		bcOrderEntryLineItemSimp.ClearToQuery();
		bcOrderEntryLineItemSimp.SetViewMode(AllView);
		bcOrderEntryLineItemSimp.ActivateField(&quot;Product Port Id&quot;);
		bcOrderEntryLineItemSimp.ActivateField(&quot;Prod Item Id&quot;);
		bcOrderEntryLineItemSimp.SetSearchSpec (&quot;Id&quot;, sIdAddedProduct);
		bcOrderEntryLineItemSimp.ExecuteQuery(ForwardOnly);
		if(bcOrderEntryLineItemSimp.FirstRecord())
		{
			bcOrderEntryLineItemSimp.SetFieldValue(&quot;Root Order Item Id&quot; , sRootLineItemId);
			bcOrderEntryLineItemSimp.SetFieldValue(&quot;Item Price List Id&quot; , sPriList);
			bcOrderEntryLineItemSimp.SetFieldValue(&quot;Parent Order Item Id&quot; , sRootLineItemId);
			bcOrderEntryLineItemSimp.SetFieldValue(&quot;Product Port Id&quot;,ProdPortId);
			bcOrderEntryLineItemSimp.SetFieldValue(&quot;Prod Item Id&quot;,PortValidProdId);
			bcOrderEntryLineItemSimp.SetFieldValue(&quot;Cfg State Code&quot;, &quot;User Requested Item&quot;);					

			bcOrderEntryLineItemSimp.WriteRecord();
			sResult =&quot;OK&quot;;
		}
		Outputs.SetProperty(&quot;Result&quot;, sResult);
	}
	finally
	{
		inProp = null;
		outProp = null;
		BS = null;
		ObjPick = null;
		bcOrderEntryLineItemSimp = null;
		bcOrderEntryLineItem = null;
		bcOrderEntryOrders = null;
		bcProd = null;	
		bcISS = null;			
		boOrderEntrySales = null;
		boISS = null;	
	}
}"
			   SEQUENCE="1"
			   UPDATED="07/05/2012 14:09:57"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:14:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="addProductToOrder_MOBILE_LINE"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function addProductToOrder_MOBILE_LINE (Inputs, Outputs)
{	
	try
	{
		var sPartNumber		= Inputs.GetProperty(&quot;productPartNumber&quot;); //Product Part Number
		var sOrderId		= Inputs.GetProperty(&quot;orderId&quot;); //OrderId
			
		var ObjPick : BusComp;
		var sResult			= &quot;&quot;;
		var sIdAddedProduct	= &quot;&quot;;
		var sRootLineItemId	= &quot;&quot;;
		var ProdPortId = &quot;&quot;;
		var PortValidProdId = &quot;&quot;;
		var ProdName = &quot;&quot;;
		var sProdId=&quot;&quot;;
		var sRootProdId=&quot;&quot;;

		var boOrderEntrySales :BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderEntryOrders :BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Orders&quot;); 
		var bcOrderEntryLineItem :BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Line Items&quot;); 
		//var bcOrderEntryLineItemSimp :BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var bcProd :BusComp	= boOrderEntrySales.GetBusComp(&quot;Internal Product&quot;);	
		var boISS :BusObject = TheApplication().GetBusObject(&quot;ISS CP Loader&quot;);
		var bcISS :BusComp = boISS.GetBusComp(&quot;Cfg ISS Sub Objects&quot;);

		var inProp 	: PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		
		with(bcOrderEntryOrders)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec (&quot;Id&quot;, sOrderId);		
			ExecuteQuery(ForwardOnly); 
			if (FirstRecord())
			{
				with(bcOrderEntryLineItem)
				{
					ActivateField(&quot;Product Id&quot;);
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Root Order Item Id] = [Id]&quot;);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
					{
						sRootProdId = GetFieldValue(&quot;Product Id&quot;);
						sRootLineItemId = GetFieldValue(&quot;Id&quot;);
						NewRecord(NewAfter);
						sIdAddedProduct = GetFieldValue(&quot;Id&quot;);
						InvokeMethod(&quot;EnableCopyExtAttr&quot;);
						InvokeMethod(&quot;EnableConfigCxProd&quot;);
						SetUserProperty(&quot;Skip Loading Default Cfg Instance&quot;,&quot;N&quot;);
										
						ObjPick = GetPicklistBusComp(&quot;Product&quot;);
						var oliId 	= GetFieldValue(&quot;Id&quot;);
						with(ObjPick)
						{	
							ClearToQuery();
							SetSearchExpr(&quot;[Part #] = &apos;&quot;+sPartNumber+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord()){
								sProdId = GetFieldValue(&quot;Id&quot;);
								Pick();
							}
							else
							{
								return(CancelOperation);
							}
						}
						WriteRecord();
						
						/*
						with(bcProd)
						{
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchExpr(&quot;[Part #] = &apos;&quot;+sPartNumber+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								ProdName = GetFieldValue(&quot;Name&quot;);
							}
						}
						with (bcISS)
						{
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;Orig Id&quot;);
							ActivateField(&quot;Port Id&quot;);
							SetSearchExpr (&quot;[Item Name] = &apos;&quot;+ProdName+&quot;&apos; AND [Last Version] = &apos;999999999&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord()) 
							{
								PortValidProdId = bcISS.GetFieldValue(&quot;Orig Id&quot;);
								ProdPortId = bcISS.GetFieldValue(&quot;Port Id&quot;);
								if (ProdPortId == &quot;&quot;)
								{
									ProdPortId = PortValidProdId;
								}
							}
						}
						*/
						
						
						inProp.SetProperty(&quot;Root Product Id&quot;,sRootProdId);
						inProp.SetProperty(&quot;Product Id&quot;,sProdId);
						
						GetAllPort(inProp,outProp); // Get Port Id

						PortValidProdId = outProp.GetProperty(&quot;Prod Item Id&quot;);
						ProdPortId = outProp.GetProperty(&quot;Port Item Id&quot;);	
						
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;Product Port Id&quot;);
						ActivateField(&quot;Prod Item Id&quot;);
						SetSearchSpec (&quot;Id&quot;, sIdAddedProduct);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
						{
							SetFieldValue(&quot;Root Order Item Id&quot; , sRootLineItemId);
							SetFieldValue(&quot;Parent Order Item Id&quot; , sRootLineItemId);
							SetFieldValue(&quot;Product Port Id&quot;,ProdPortId);
							SetFieldValue(&quot;Prod Item Id&quot;,PortValidProdId);
							SetFieldValue(&quot;Cfg State Code&quot;, &quot;User Requested Item&quot;);					

							WriteRecord();
						}	
					}
				}			
			}		
		}		
	}
	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		outProp					= null;
		inProp					= null;
		ObjPick					= null;
		bcOrderEntryLineItem	= null;
		bcOrderEntryOrders		= null;
		bcProd					= null;
		boOrderEntrySales		= null;
		bcISS					= null;
		boISS					= null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="01/16/2018 15:48:11"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="11/23/2013 20:31:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="automaticDisconnection"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function automaticDisconnection(Inputs, Outputs)
{
	try
	{
		var psFunctionIn  : PropertySet = TheApplication().NewPropertySet();
		var psFunctionOut : PropertySet = TheApplication().NewPropertySet();
		var boAutoOrder   : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcAutoOrder   : BusComp     = boAutoOrder.GetBusComp(&quot;VF Automatic Order&quot;);
		var boOrder       : BusObject   = TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var bcItem        : BusComp     = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var bsManager     : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn   : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut  : PropertySet = TheApplication().NewPropertySet();

		var sPartNum              = Inputs.GetProperty(&quot;partNum&quot;);
		var sBillAccountId        = Inputs.GetProperty(&quot;billingAccountID&quot;);
		var sSVBIntegrationId     = Inputs.GetProperty(&quot;SVBIntegrationId&quot;);
		var sSVBGroupAssetId      = Inputs.GetProperty(&quot;SVBGroupAssetId&quot;);
		var sCheckOrderResult     = &quot;&quot;;
		var sDisconnectOrderId    = &quot;&quot;;
		var sDiscRootAssetIntegId = &quot;&quot;;

		var sTypeDisconnect       = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_TYPE&quot;, &quot;Disconnect&quot;);
		var sSubTypeDisconnectVol = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;123&quot;);
		var sReasonError          = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;1017&quot;);


		if (sPartNum == &quot;4010&quot;)
		{
			psFunctionIn.SetProperty(&quot;Bill Account Id&quot;, sBillAccountId);
			DisconnectionSVB25(psFunctionIn, psFunctionOut);
		}

		if (sSVBGroupAssetId == null || sSVBGroupAssetId == &quot;&quot;)
		{
			return;
		}

		// Check if there is any pending/open orders that prevent order creation for SVB Group
		psFunctionIn.Reset();
		psFunctionOut.Reset();

		psFunctionIn.SetProperty(&quot;Integration Id&quot;, sSVBIntegrationId);
		checkOrderStatus(psFunctionIn, psFunctionOut);
		sCheckOrderResult = psFunctionOut.GetProperty(&quot;result&quot;);

		if (sCheckOrderResult == &quot;true&quot;)
		{
			bcAutoOrder.ClearToQuery();
			bcAutoOrder.SetViewMode (AllView);
			bcAutoOrder.SetSearchSpec(&quot;Status&quot;,   &quot;New&quot;);
			bcAutoOrder.SetSearchSpec(&quot;Asset Id&quot;, sSVBGroupAssetId);
			bcAutoOrder.ExecuteQuery(ForwardOnly);

			if (!bcAutoOrder.FirstRecord())
			{
				bcAutoOrder.NewRecord(NewAfter);
				bcAutoOrder.SetFieldValue(&quot;Order Sub Type&quot;, sSubTypeDisconnectVol);
				bcAutoOrder.SetFieldValue(&quot;Order Reason&quot;,   sReasonError);
				bcAutoOrder.SetFieldValue(&quot;Status&quot;,         &quot;New&quot;);
				bcAutoOrder.SetFieldValue(&quot;Order Type&quot;,     sTypeDisconnect);
				bcAutoOrder.SetFieldValue(&quot;Asset Id&quot;,       sSVBGroupAssetId);
				bcAutoOrder.SetFieldValue(&quot;Integration Id&quot;, sSVBIntegrationId);
				bcAutoOrder.SetFieldValue(&quot;Part Number&quot;,    sPartNum);
				bcAutoOrder.WriteRecord();
			}

			return;
		}

		// If there is no order
		psFunctionIn.Reset();
		psFunctionOut.Reset();

		psFunctionIn.SetProperty(&quot;SVBAssetId&quot;, sSVBGroupAssetId);
		DisconnectionSVB(psFunctionIn, psFunctionOut);
		sDisconnectOrderId    = psFunctionOut.GetProperty(&quot;sOrderId&quot;);
		sDiscRootAssetIntegId = psFunctionOut.GetProperty(&quot;RootAssetIntegId&quot;);

		if (sDisconnectOrderId == null || sDisconnectOrderId == &quot;&quot;)
		{
			return;
		}
		
		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;TELCO Action Reason&quot;);
		bcItem.ActivateField(&quot;VF Logical Reason&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;,      sDisconnectOrderId);
		bcItem.SetSearchSpec(&quot;Asset Integration Id&quot;, sDiscRootAssetIntegId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		bcItem.SetFieldValue(&quot;TELCO Action Reason&quot;, sReasonError);	 
		bcItem.SetFieldValue(&quot;VF Logical Reason&quot;,   &quot;1017&quot;);
		bcItem.WriteRecord();

		// Submit the order
 		psManagerIn.SetProperty(&quot;ProcessName&quot;,     &quot;TELCO Async Submit Order Interface WF&quot;);
		psManagerIn.SetProperty(&quot;Order Id&quot;,        sDisconnectOrderId);
 		psManagerIn.SetProperty(&quot;Cancel On Error&quot;, &quot;N&quot;);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
	}
	finally
	{
		psManagerOut  = null;
		psManagerIn   = null;
		bsManager     = null;
		bcItem        = null;
		boOrder       = null;
		bcAutoOrder   = null;
		boAutoOrder   = null;
		psFunctionOut = null;
		psFunctionIn  = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="01/23/2015 01:15:04"
			   UPDATED_BY="SADMIN"
			   CREATED="08/12/2011 21:10:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="callCrossAddonEligWS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function callCrossAddonEligWS(Inputs,Outputs)
{
	try
	{
		var strMSISDN = Inputs.GetProperty(&quot;strMSISDN&quot;);
		var psInputIO : PropertySet = TheApplication().NewPropertySet();
		var psTempChild1 : PropertySet = TheApplication().NewPropertySet();
		var psChild2 : PropertySet = TheApplication().NewPropertySet();
		var psChildB : PropertySet = TheApplication().NewPropertySet();
		var psTempChildH : PropertySet = TheApplication().NewPropertySet();
		var psTempChildB : PropertySet = TheApplication().NewPropertySet();
		var PrimaryContactId : PropertySet = TheApplication().NewPropertySet();
		var psInputWS : PropertySet = TheApplication().NewPropertySet();
		var psOutputWS : PropertySet = TheApplication().NewPropertySet();		
		var errMsg = &quot;&quot;;
		var errMsg2 = &quot;&quot;;
		var intChildCount1 = 0;
		var headerType = &quot;&quot;;
		var psChild1 = &quot;&quot;;
		var found = false;
		var strStatusCode = &quot;&quot;;
		var strErrorCode = &quot;&quot;;
		
		psInputIO.SetType(&quot;CrossAddonEligibilityCheckReq:CrossAddonEligibilityCheckRequest&quot;);
	
		psTempChild1.SetType(&quot;ListOfCrossAddonEligibilityCheckInput&quot;);
		psChild2.SetType (&quot;CrossAddonEligibilityCheckInput&quot;);
		
		var svcsetHeader : Service = TheApplication().GetService (&quot;VF Maximo Set Header IO BS&quot;);
		var psInputHeader : PropertySet = TheApplication().NewPropertySet();
		var psOutputHeader : PropertySet = TheApplication().NewPropertySet();
		svcsetHeader.InvokeMethod(&quot;SetHeaderIO&quot;,psInputHeader, psOutputHeader);
		psTempChildH = psOutputHeader.GetChild(0).GetChild(0);
	
		psTempChildB.SetType(&quot;ListOfBODY&quot;);
		psChildB.SetType (&quot;BODY&quot;);
		psChildB.SetProperty(&quot;B_MSISDN&quot;, strMSISDN);
		
		psTempChildB.AddChild(psChildB);
		
		psChild2.AddChild(psTempChildH);
		psChild2.AddChild(psTempChildB);
		psTempChild1.AddChild(psChild2);
		
		psInputIO.AddChild(psTempChild1);
		psInputWS.AddChild(psInputIO);
		
		var svcWebService : Service = TheApplication().GetService(&quot;CrossAddonEligibilityCheck&quot;);
		svcWebService.InvokeMethod(&quot;CrossAddonEligibilityCheck&quot;, psInputWS, psOutputWS); // Reactivated by WS Adjustments - NMARQUES 2015.05.25
		/*var svcWebService : Service = TheApplication().GetService(&quot;EBUAdapterICCBServicesPortType&quot;);
		svcWebService.InvokeMethod(&quot;CrossAddonEligibilityCheck&quot;, psInputWS, psOutputWS);*/
		for (var i = 1;i &lt; 4; i++)
		{
			intChildCount1 = psOutputWS.GetChildCount();	
			if (intChildCount1 &gt; 0)
				psOutputWS = psOutputWS.GetChild(0);
			else
				TheApplication().RaiseErrorText (&quot;Error! Wrong Output structure!&quot;);
		}
		intChildCount1 = psOutputWS.GetChildCount();
		if (intChildCount1 &gt; 0)
		{
			for (i = 0; i &lt; psOutputWS.GetChildCount(); i++)
			{
				headerType = psOutputWS.GetChild(i).GetType();
				if(headerType == &quot;ListOfHEADER&quot;)
				{
					psChild1 = psOutputWS.GetChild(i);
					found = true;
				}
			}
			if(found)
			{
				strStatusCode = psChild1.GetChild(0).GetProperty(&quot;STATUS_CODE&quot;);
			
				if(strStatusCode == &quot;1&quot;)
				{
					strErrorCode = psChild1.GetChild(0).GetProperty(&quot;ERROR_CODE&quot;);
					switch(strErrorCode)
					{
						case &quot;VFTK-Tibco-0001&quot;:
							errMsg = &quot;R21_028&quot;;
						break;
						
						case &quot;VFTK-Tibco-0002&quot;:
							errMsg = &quot;299&quot;;
						break;
						
						case &quot;VFTK-Tibco-0003&quot;:
							errMsg = &quot;R21_029&quot;;
						break;
						
						case &quot;VFTK-TIBCO-0004&quot;:
							errMsg = &quot;R21_030&quot;;
						break;
						
						case &quot;VFTK-Tibco-0008&quot;:
							errMsg = &quot;R21_031&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0001&quot;:
							errMsg = &quot;R21_033&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0002&quot;:
							errMsg = &quot;R21_032&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0003&quot;:
							errMsg = &quot;R21_026&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0004&quot;:
							errMsg = &quot;R21_027&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0005&quot;:
							errMsg = &quot;R21_034&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0006&quot;:
							errMsg = &quot;R21_035&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0007&quot;:
							errMsg = &quot;R21_036&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0008&quot;:
							errMsg = &quot;R21_037&quot;;
						break;
						
						case &quot;VFTK-TIBCO-ELICHK-0009&quot;:
							errMsg = &quot;R21_038&quot;;
						break;
					}
					if(errMsg != &quot;&quot;)
					{
						errMsg2 = TheApplication().LookupMessage(&quot;VF Message Category&quot;, errMsg);
						TheApplication().RaiseErrorText(errMsg2);
					}
					else
						TheApplication().RaiseErrorText(&quot;Generic Error!&quot;);
				}
			}
			else
				TheApplication().RaiseErrorText (&quot;Error! Wrong Output structure!&quot;);
		}
		return (CancelOperation);
	}
	finally
	{
		psOutputWS			= null;
		psInputWS			= null;
		PrimaryContactId	= null;
		psTempChildB		= null;
		psTempChildH		= null;
		psChildB			= null;
		psChild2			= null;
		psTempChild1		= null;
		psInputIO			= null;
		psOutputHeader		= null;
		psInputHeader		= null;
		svcsetHeader		= null;
		svcWebService		= null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="05/31/2015 22:01:58"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2011 12:36:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="cancelActivationOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function cancelActivationOrder (Inputs, Outputs)
{
	try
	{
		var strOrderId  	= Inputs.GetProperty(&quot;orderId&quot;);
		//added for cancel all opened order
		var dontCheckStatus : String  = Inputs.GetProperty(&quot;DontCheckStatus&quot;);
		var inputDelete	: PropertySet = TheApplication().NewPropertySet();
		var outputDelete : PropertySet = TheApplication().NewPropertySet();
		var boOrderEntrySales : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderEntryOrders : BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcOrderEntryLI : BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Line Items&quot;);

		var boAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAccount : BusComp = boAccount.GetBusComp(&quot;Account&quot;);

		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		
		var recordExist = &quot;&quot;;		
		var orderType			= &quot;&quot;;
		var orderSubType 		= &quot;&quot;;
		var orderReason 		= &quot;&quot;;
		var orderStatus			= &quot;&quot;;
		var orderItemStatus		= &quot;&quot;;
		var parentOrderId		= &quot;&quot;;
		var strAccId 			= &quot;&quot;;
		
		// Begin: Scripting 15 null check Added 20may2012 Udbhav IDC
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End 

		bcOrderEntryOrders.ClearToQuery();
		bcOrderEntryOrders.SetViewMode(AllView);
		bcOrderEntryOrders.ActivateField(&quot;Parent Order Id&quot;);
		bcOrderEntryOrders.SetSearchSpec(&quot;Id&quot;, strOrderId);
		bcOrderEntryLI.ClearToQuery();
		bcOrderEntryLI.SetViewMode(AllView);
		bcOrderEntryOrders.ExecuteQuery(ForwardOnly);
		if(bcOrderEntryOrders.FirstRecord())
		{
			orderType 		= bcOrderEntryOrders.GetFieldValue(&quot;Order Type&quot;);
			orderSubType 	= bcOrderEntryOrders.GetFieldValue(&quot;Order Sub Type&quot;);
			orderReason 	= bcOrderEntryOrders.GetFieldValue(&quot;Order Reason&quot;);
			orderStatus 	= bcOrderEntryOrders.GetFieldValue(&quot;Status&quot;);

			if(orderStatus != TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;) &amp;&amp; (dontCheckStatus == null || dontCheckStatus == &quot;false&quot; ))
			{
				Outputs.SetProperty(&quot;Result&quot;, TheApplication().LookupMessage(&quot;ACS Messages&quot;, &quot;004&quot;));
			}
			else
			{
				recordExist = bcOrderEntryLI.FirstRecord();
				if (recordExist == false)
				{
					Outputs.SetProperty(&quot;Result&quot;, &quot;Activation Order Item NOT Found&quot;);
				}
				else
				{
					while(recordExist == true)
					{
						bcOrderEntryLI.SetFieldValue(&quot;Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;));
						recordExist = bcOrderEntryLI.NextRecord();
					}
					
					bcOrderEntryOrders.SetFieldValue(&quot;Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;));
					bcOrderEntryOrders.WriteRecord(); //change ExecuteQuery(ForwardOnly) to WriteRecord
					
					parentOrderId = bcOrderEntryOrders.GetFieldValue(&quot;Parent Order Id&quot;);
					inputDelete.SetProperty(&quot;orderId&quot;,parentOrderId);
					orderDelete(inputDelete, outputDelete);
				}
			}
    	}
		else
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;Activation Order Not Found&quot;);
		}		
	}		
	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		//boOrderEntrySales	= null;
    	bcOrderEntryOrders	= null;
    	bcOrderEntryLI		= null;
    	boOrderEntrySales	= null;
    	orderType			= null;
		orderSubType 		= null;
		orderReason 		= null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
		bcAccount	= null;
		boAccount	= null;
		outputDelete	= null;
		inputDelete	= null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="01/16/2018 16:00:53"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="06/25/2010 13:49:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkBMSISDN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkBMSISDN(Inputs, Outputs)
{
	try
	{
		var oBOAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var oBCAccount : BusComp = oBOAccount.GetBusComp(&quot;Account&quot;);
		var oBCAssetXA : BusComp = oBOAccount.GetBusComp(&quot;VF FF Product XA&quot;);
		var oBCOrderItem : BusComp = oBOAccount.GetBusComp(&quot;Order Item XA - Joker&quot;);
		var strAccntId = Inputs.GetProperty(&quot;OrdLineAccountId&quot;);
		var BMSISDN = Inputs.GetProperty(&quot;BMSISDN&quot;);
		var strInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var strOpen = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Open&quot;);
		var strPending = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;);
		var strInstalled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Installed&quot;);
		var MsgCode = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_042&quot;);
		var strSearchExpr = &quot;[Name] = &apos;MSISDN&apos; AND [Text Value] = &apos;&quot;+BMSISDN+&quot;&apos; AND [VF Asset Status] &lt;&gt; &apos;&quot;+strInactive+&quot;&apos; AND ([Product Part Number] = &apos;51014&apos; OR [Product Part Number] = &apos;51015&apos; OR [Product Part Number] = &apos;51016&apos;)&quot;;
		var strSearchExpr2 = &quot;[Name] = &apos;MSISDN&apos; AND [Text Value] = &apos;&quot;+BMSISDN+&quot;&apos; AND ([Order Item Status] = &apos;&quot;+strOpen+&quot;&apos; OR [Order Item Status] = &apos;&quot;+strPending+&quot;&apos; OR [Order Item Status] = &apos;&quot;+strInstalled+&quot;&apos;) AND ([Product Part Number] = &apos;51014&apos; OR [Product Part Number] = &apos;51015&apos; OR [Product Part Number] = &apos;51016&apos;)&quot;;
	
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strAccntId&quot;,strAccntId);
		inProp.SetProperty(&quot;BMSISDN&quot;,BMSISDN);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
	
		with(oBCAccount)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Id&quot;,strAccntId);
			with(oBCAssetXA)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(strSearchExpr);
			}
			with(oBCOrderItem)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(strSearchExpr2);
			}
			ExecuteQuery(ForwardOnly);
			if(oBCAssetXA.FirstRecord())
					TheApplication().RaiseErrorText(MsgCode);
					
			if(oBCOrderItem.FirstRecord())
					TheApplication().RaiseErrorText(MsgCode);	
		}
	}
	finally
	{
		oBCOrderItem	= null;
		oBCAssetXA	= null;
		oBCAccount	= null;
		oBOAccount	= null;
		BS	= null;
		outProp	= null;
		inProp	= null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="11/23/2013 20:31:50"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2011 15:08:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkBillCycle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkBillCycle (Inputs, Outputs)
{
	//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
	try
	{
		var newBillingAccountId 	= Inputs.GetProperty(&quot;newBillingAccountId&quot;); //New Billing Account Id
		var oldBillingAccountId 	= Inputs.GetProperty(&quot;oldBillingAccountId&quot;); //Old Billing Account Id;
		
		// Disply Billing 
		var strBulkSms = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_DEDICATED&quot;,&quot;Bulk SMS&quot;);
		var strNormal = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_DEDICATED&quot;,&quot;Empty&quot;);
		var strM2M = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_DEDICATED&quot;,&quot;M2M - bundle already active&quot;);
		
		
		var boAccount : BusObject = TheApplication().GetBusObject(&quot;TELCO Account - Simple&quot;);//Account BO
		var bcBillingAccount : BusComp = boAccount.GetBusComp(&quot;TELCO Account - Simple&quot;); //Com Invoice Profile
		var searchExpr = &quot;[Id] = &apos;&quot; + newBillingAccountId + &quot;&apos; OR [Id] = &apos;&quot; + oldBillingAccountId + &quot;&apos;&quot;;
		var strOrderReason = Inputs.GetProperty(&quot;OrderReason&quot;);
		

		with (bcBillingAccount)
			{
				ClearToQuery(); 
				SetViewMode(AllView);
				ActivateField(&quot;VF Bill Cycle&quot;);
				ActivateField(&quot;VF Bulk SMS Disp&quot;);
				SetSearchExpr (searchExpr);
				ExecuteQuery(ForwardOnly);//VFTK Venkata 11052012 : No changes for OracleScript 15 review since newBillingAccountId &amp; oldBillingAccountId is a required input
				var BillingRecord = FirstRecord();
				while (BillingRecord)
				{
					var id = GetFieldValue(&quot;Id&quot;);
					if(id == newBillingAccountId )
					{
						var BillCycNew = GetFieldValue(&quot;VF Bill Cycle&quot;);
						var TypeBANew =	GetFieldValue(&quot;VF Bulk SMS Disp&quot;);
					}
					if (id == oldBillingAccountId)
					{
						var BillCycOld = GetFieldValue(&quot;VF Bill Cycle&quot;);
						var TypeBAOld =	GetFieldValue(&quot;VF Bulk SMS Disp&quot;);
					}
				BillingRecord = NextRecord();
				}
			}
	
		if (strOrderReason!=&quot;253&quot;)
		{
			if (BillCycNew!=BillCycOld)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
				return(CancelOperation);
			}
			if (TypeBANew!=TypeBAOld)
			{
				if (TypeBANew == strNormal &amp;&amp; TypeBAOld == strM2M)
				{
				Outputs.SetProperty(&quot;Result&quot;, &quot;KOM2M&quot;);
				return(CancelOperation);
				}
				else if (TypeBAOld== strNormal &amp;&amp; TypeBANew == strM2M)
				{
				Outputs.SetProperty(&quot;Result&quot;, &quot;KONormal&quot;);
				return(CancelOperation);
				}
				
			}
	
		}
		if (strOrderReason==&quot;253&quot;)
		{
			if (BillCycNew != BillCycOld)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
				return(CancelOperation);
			}
			if (TypeBANew == TypeBAOld)
			{
				if (TypeBANew ==&quot;Normal&quot;)
				{
					Outputs.SetProperty(&quot;Result&quot;, &quot;KONormal&quot;);
					return(CancelOperation);
				}
				else 
				{
					Outputs.SetProperty(&quot;Result&quot;, &quot;KOM2M&quot;);
					return(CancelOperation);
				}
			}
		}
	}
	finally
	{
		bcBillingAccount	= null;
		boAccount			= null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="01/16/2018 16:08:06"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="07/30/2010 09:14:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkEMD"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkEMD(Inputs, Outputs)
{
	try
	{
		var oBOOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var oBCOLIXA : BusComp = oBOOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var bcAsset  : BusComp = oBOOrder.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var MsgCode = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_043&quot;);
		var strRootItemId = Inputs.GetProperty(&quot;strRootItemId&quot;);
		var calcEMD = &quot;&quot;;
		var installDate	= &quot;&quot;;	
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var intTime = &quot;&quot;;
		
		var boParameters : BusObject = TheApplication().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameters : BusComp = boParameters.GetBusComp (&quot;ACS NI Parameter&quot;);
		var strParameterSrcExpr = &quot;[Function] = &apos;Minutes&apos; AND [Name] = &apos;EMD&apos;&quot;;
				
		bcParameters.ClearToQuery ();
		bcParameters.SetViewMode(AllView);
		bcParameters.ActivateField(&quot;Function&quot;);
		bcParameters.ActivateField(&quot;Name&quot;);
		bcParameters.ActivateField(&quot;Value&quot;);
		bcParameters.SetSearchExpr(strParameterSrcExpr);
		bcParameters.ExecuteQuery(ForwardOnly);
		if (bcParameters.FirstRecord ())
		{
			intTime = bcParameters.GetFieldValue (&quot;Value&quot;);
			intTime = intTime * 3600 * 1000;
		}
			
		with(oBCOLIXA)
		{
			// Begin: Scripting 15 null check Added 20may2012 Udbhav IDC
			inProp.SetProperty(&quot;strRootItemId&quot;,strRootItemId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End 
			
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Root Object Id&quot;,strRootItemId);
			SetSearchSpec(&quot;Name&quot;,&quot;Earliest Modification Date&quot;);
			ExecuteQuery(ForwardOnly);
			var found = FirstRecord();
			if(found)
			{
				var EarlModDate = GetFieldValue(&quot;Text Value&quot;);
				if ((EarlModDate != &quot;&quot;) &amp;&amp; (EarlModDate != &quot;undefined&quot;) &amp;&amp; (EarlModDate != null))
				{
 					var EMD = new Date(EarlModDate);
 					if(EMD != &quot;&quot;)
					{
						var sToday =  new Date();
						sToday = sToday.toSystem();
						sToday = sToday * 1000;
						sToday = sToday + intTime;
						EMD = EMD.toSystem();
						EMD = EMD * 1000;
					
						if((sToday - EMD) &lt; 0)
						{
							TheApplication().RaiseErrorText(MsgCode);
						}
					}
				}
			}
		}
	}
	finally
	{
		bcParameters = null;
		boParameters = null;
		bcAsset = null;
		oBCOLIXA = null;
		oBOOrder = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="11/23/2013 20:31:50"
			   UPDATED_BY="SADMIN"
			   CREATED="12/29/2011 15:08:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkNumberXTransfer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkNumberXTransfer (Inputs, Outputs)
{
	try
	{
		var sMsisdn		= Inputs.GetProperty(&quot;MSISDN&quot;); //MSISDN
		var boParameters : BusObject = TheApplication().GetBusObject (&quot;ACS NI Parameter&quot;);
		var BcParameter	: BusComp = boParameters.GetBusComp (&quot;ACS NI Parameter&quot;);
		var array			= new Array;
   	  //var strFunction 	= &quot;ForbiddenMSISDN&quot;; 
		var strFunction		= &quot;ForbiddenMSISDN2&quot;; //RPIRES WA#13 - 10.02.2015
		var strName 		= &quot;Transfer&quot;;
		var i				= 0;
		var result 			= &quot;&quot;;
		var expr = &quot;[Function] = &apos;&quot;+strFunction+&quot;&apos; AND [Name] = &apos;&quot;+strName+&quot;&apos;&quot;;
		
		var Prefix = ToNumber(sMsisdn.charAt(0)+sMsisdn.charAt(1));

		BcParameter.ClearToQuery();
		BcParameter.SetViewMode(AllView);
		BcParameter.ActivateField(&quot;Function&quot;);
		BcParameter.ActivateField(&quot;Name&quot;);
		BcParameter.ActivateField(&quot;Value&quot;);
		BcParameter.SetSearchExpr(expr);
		BcParameter.ExecuteQuery(ForwardOnly);
		var booRecordExists = BcParameter.FirstRecord ();
		while (booRecordExists)
		{
		   	array[i] =	BcParameter.GetFieldValue(&quot;Value&quot;);
			i++;
			booRecordExists = BcParameter.NextRecord();
		}

		var ArrayLength = ToNumber(i);
		for (var j=0; j&lt;ArrayLength; j++)
		{
			if(array[j] == Prefix)
			{
				result = &quot;KO&quot;;
			}
		}	
		if (result == &quot;KO&quot;)
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
		}
		else
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
		}
	}
	finally
	{
		BcParameter		= null;
		boParameters	= null;		
		array			= null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="04/02/2015 14:11:54"
			   UPDATED_BY="SADMIN"
			   CREATED="08/29/2010 11:56:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkOrderStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkOrderStatus(Inputs,Outputs)
{
	try
	{
		// Use High Performance Business Component	  
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;HP Order Entry&quot;);
 	  	var bcItem  : BusComp   = boOrder.GetBusComp(&quot;HP Order Entry - Line Items&quot;);

		var sAssetIntegId = Inputs.GetProperty(&quot;Integration Id&quot;);
		var sItemStatus   = &quot;&quot;;

	  	var sStatusComplete  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
  	  	var sStatusCancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);

		if (sAssetIntegId == null || sAssetIntegId == &quot;&quot;)
		{
			Outputs.SetProperty(&quot;result&quot;, &quot;false&quot;);
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Status&quot;);
		bcItem.SetSearchSpec(&quot;Asset Integration Id&quot;, sAssetIntegId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			Outputs.SetProperty(&quot;result&quot;, &quot;false&quot;);
			return;
		}

		do
		{
			sItemStatus = bcItem.GetFieldValue(&quot;Status&quot;);

	 		if (sItemStatus != sStatusComplete &amp;&amp; sItemStatus != sStatusCancelled) 
	 		{
				Outputs.SetProperty(&quot;result&quot;, &quot;true&quot;);
				return;
	 		}
		}
		while (bcItem.NextRecord());

		Outputs.SetProperty(&quot;result&quot;, &quot;false&quot;);
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="01/23/2015 01:15:04"
			   UPDATED_BY="SADMIN"
			   CREATED="04/22/2011 20:55:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getNewProdPromInstId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getNewProdPromInstId(sOrderId)
{
	try
	{
		var OrderBO       = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var OrderItemBC = OrderBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

      	OrderItemBC.ClearToQuery();
	  	OrderItemBC.SetViewMode(AllView);
	  	OrderItemBC.ActivateField(&quot;Integration Id&quot;);
	  	OrderItemBC.SetSearchSpec (&quot;Order Header Id&quot;,sOrderId);
	  	OrderItemBC.SetSearchSpec (&quot;VF Product Type&quot;,&quot;HANDSET PROMO&quot;); 
	  	OrderItemBC.SetSearchSpec (&quot;VF Product Group&quot;,&quot;CAMP PROMO&quot;); 
	  	OrderItemBC.ExecuteQuery(ForwardOnly);
	  	if(OrderItemBC.FirstRecord())
	  		return OrderItemBC.GetFieldValue(&quot;Integration Id&quot;);
	}		
   	//catch(e)// commented as per oracle review
	//{
	//}
	finally
	{
		OrderItemBC = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="02/05/2016 08:43:31"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:31:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="manageSVBProducts"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function manageSVBProducts (Inputs, Outputs)
{
	try
	{
	  	var orderId 	= &quot;&quot;;
	  	var olid		= &quot;&quot;;
	  	olid = Inputs.GetProperty(&quot;LineItemId&quot;);
	  	orderId = Inputs.GetProperty(&quot;orderId&quot;);
	  	var billingAccountID = &quot;&quot;;
	  	var oServerRequest : Service;
		var OrderBO : BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
		var OrderBC : BusComp = OrderBO.GetBusComp (&quot;HP Submit - Order Entry - Orders&quot;);
		var OrderItemBC : BusComp = OrderBO.GetBusComp (&quot;HP Submit - Order Entry - Line Items&quot;);
		var OrderItemXABC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var resultOut		= false;
		var resBSSVB		= false;
		var partNum    	= null;
		var statusItem 	= null;
		var actionCd		= null;
		var addActionCd	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var deleteActionCd= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
		var suspendActionCd= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Suspend&quot;);
		var modActionCd  = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Modified&quot;);
		var sResumeActionCode = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Resume&quot;);
		var strComplete = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var strCancelled = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);  
		var strInstalled = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Installed&quot;);	
		var strFailed = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Failed&quot;);
		var strPartComplete = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Partially Completed&quot;);
		var strSubmitPending = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submitted-Pending&quot;);
		var errorReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;, &quot;1017&quot;);
		var StatActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var DisconnectVolSubType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;123&quot;);
		var DisconnectType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Disconnect&quot;);
		var RootSVBProductPartNum = &quot;&quot;;
		var svbCountedFlg = &quot;&quot;;
		var SVBGroupNumber = &quot;&quot;;
		var prevSVBGroupNumber = &quot;&quot;;
		var strLineItemStatus = &quot;&quot;;
		var BSSvbManagement : Service = TheApplication().GetService (&quot;VF SVB Management&quot;);
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var inputsInc :PropertySet	= TheApplication().NewPropertySet ();
 		var outputsInc :PropertySet	= TheApplication().NewPropertySet ();
	    var autoIn  :PropertySet	= TheApplication().NewPropertySet ();
		var autoOut :PropertySet	= TheApplication().NewPropertySet ();
		var strActionReason = &quot;&quot;; //def-12995
		
		
		var oInputs : PropertySet;
		var oChild : PropertySet;
		var oOutputs : PropertySet;
		
		//DEF-4368		
		var assetId = &quot;&quot;;
		var sStatus = &quot;&quot;;
		var AssetBO : BusObject = TheApplication().GetBusObject(&quot;Asset Mgmt - Asset (NoLink)&quot;);
		var AssetBC : BusComp = AssetBO.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
												
		if (orderId != &quot;&quot; &amp;&amp; olid != &quot;&quot;)
		{	
		
				OrderItemBC.ClearToQuery();	 
				OrderItemBC.SetViewMode(AllView);
				OrderItemBC.ActivateField(&quot;Billing Account Id&quot;);
				OrderItemBC.ActivateField(&quot;Part Number&quot;);
				OrderItemBC.ActivateField(&quot;Action Code&quot;);
				OrderItemBC.ActivateField(&quot;VF SVB Counted Flag&quot;);
				OrderItemBC.ActivateField(&quot;Status&quot;);
				OrderItemBC.ActivateField(&quot;TELCO Root Item Action Reason LIC&quot;);//def-12995
				OrderItemBC.SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+orderId+&quot;&apos; AND [Id] = &apos;&quot;+olid+&quot;&apos;&quot;);//Scripting 15:null check done above
				OrderItemBC.ExecuteQuery(ForwardOnly);
			
				if(OrderItemBC.FirstRecord())
				{
					olid =OrderItemBC.GetFieldValue(&quot;Id&quot;);
					partNum = OrderItemBC.GetFieldValue(&quot;Part Number&quot;);
					actionCd= OrderItemBC.GetFieldValue(&quot;Action Code&quot;);
					svbCountedFlg = OrderItemBC.GetFieldValue(&quot;VF SVB Counted Flag&quot;);
					strLineItemStatus = OrderItemBC.GetFieldValue (&quot;Status&quot;);
					billingAccountID = OrderItemBC.GetFieldValue(&quot;Billing Account Id&quot;);
					strActionReason = OrderItemBC.GetFieldValue(&quot;TELCO Root Item Action Reason LIC&quot;); ////// DEF-11660
					

					if((svbCountedFlg != &quot;Y&quot;)&amp;&amp;((strLineItemStatus == strComplete)||(strLineItemStatus == strInstalled)))
					{ 	 
						RootSVBProductPartNum = ToNumber(partNum)-10;
						OrderItemXABC.SetViewMode(AllView);
						OrderItemXABC.ClearToQuery();
						OrderItemXABC.ActivateField(&quot;Name&quot;);
						OrderItemXABC.ActivateField(&quot;Value&quot;);
						OrderItemXABC.ActivateField(&quot;Previous Text Value&quot;);
						OrderItemXABC.SetSearchSpec(&quot;Object Id&quot;, olid);//get field value of Id will not be null
						OrderItemXABC.SetSearchSpec(&quot;Name&quot;, &quot;Group #&quot;);
						OrderItemXABC.ExecuteQuery(ForwardOnly); //Diva 27/03/2012: Added parameter for oracle review
								
						var OrderItemXABCExists = OrderItemXABC.FirstRecord();
						if (OrderItemXABCExists)
						{
							SVBGroupNumber = OrderItemXABC.GetFieldValue(&quot;Value&quot;);
							prevSVBGroupNumber = OrderItemXABC.GetFieldValue(&quot;Previous Text Value&quot;);
						
						}
						
						if(actionCd == sResumeActionCode)
						{
							resBSSVB =&quot;&quot;;
							
							inputsInc.SetProperty (&quot;SVBGroupNumber&quot;,SVBGroupNumber );
							inputsInc.SetProperty (&quot;BillingAccountId&quot;, billingAccountID);
							inputsInc.SetProperty (&quot;PartNum&quot;, RootSVBProductPartNum);
							inputsInc.SetProperty(&quot;ConsiderAllStatus&quot;,&quot;Y&quot;);
							BSSvbManagement.InvokeMethod (&quot;IncreaseSimNumber&quot;, inputsInc, outputsInc);
							
							resBSSVB = outputsInc.GetProperty(&quot;Result&quot;);
									
							if (resBSSVB==&quot;OK&quot;)
							{	
							
								resultOut = true;
									
								Outputs.SetProperty(&quot;result&quot;, resultOut);
								
								var activeSimNumber =outputsInc.GetProperty(&quot;ActiveSimNumber&quot;);
								
								if(activeSimNumber == &quot;1&quot;)
								{
									var SVBGroupAssetId = outputsInc.GetProperty(&quot;SVBGroupAssetId&quot;);
									if(SVBGroupAssetId != &quot;&quot;)
									{
										var sFunctionalityActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUSP_SVB&quot;,&quot;VF_SUSP_SVB&quot;)
										
										if(sFunctionalityActive == &quot;Y&quot;)
										{	
										//DEF-4368
											with(AssetBC)
											{
												ClearToQuery();
												SetViewMode(AllView);
												ActivateField(&quot;VF Final Status&quot;);
												SetSearchSpec (&quot;Integration Id&quot;, sAssetIntegId);
												ExecuteQuery(ForwardOnly);
												if (FirstRecord())
												{
													sStatus = GetFieldValue(&quot;VF Final Status&quot;);
												}
											}	
											if (sStatus	!= &quot;Limited&quot;)
											{  //DEF-4368
												oServerRequest = TheApplication().GetService(&quot;Server Requests&quot;);
												oInputs = TheApplication().NewPropertySet();
												oOutputs = TheApplication().NewPropertySet();
												oChild = TheApplication().NewPropertySet();
											
												oInputs.SetProperty(&quot;Component&quot;,&quot;WfProcMgr&quot;);
												oInputs.SetProperty(&quot;Method&quot;,&quot;RunProcess&quot;);
												oInputs.SetProperty(&quot;Mode&quot;,&quot;DirectDb&quot;);
											
												oChild.SetProperty(&quot;ProcessName&quot;,&quot;VF Suspend Resume generic WF&quot;);
											
												oChild.SetProperty(&quot;Object Id&quot;,SVBGroupAssetId);
												oChild.SetProperty(&quot;Description&quot;, &quot;Suspend Resume Generic Async: &quot; + SVBGroupAssetId); //VFTRCBU-37079 | RMENEZES

												oChild.SetProperty(&quot;Action&quot;,&quot;Resume&quot;);
											
												oInputs.AddChild(oChild);
											
												oServerRequest.InvokeMethod(&quot;SubmitRequest&quot;,oInputs,oOutputs);
											}
										}	
									}
								}	
							}
						}
						
						if(actionCd == modActionCd)
						{					
							//increase counter on new SVB
							resBSSVB =&quot;&quot;;
							inputsInc.SetProperty (&quot;SVBGroupNumber&quot;,SVBGroupNumber );
							inputsInc.SetProperty (&quot;BillingAccountId&quot;, billingAccountID);
							inputsInc.SetProperty (&quot;PartNum&quot;, RootSVBProductPartNum);
							BSSvbManagement.InvokeMethod (&quot;IncreaseSimNumber&quot;, inputsInc, outputsInc);
			
							resBSSVB = outputsInc.GetProperty(&quot;Result&quot;);
							var activeSimNumber =outputsInc.GetProperty(&quot;ActiveSimNumber&quot;);
												
							if (resBSSVB==&quot;OK&quot;)
							{
								resultOut = true;
									
								Outputs.SetProperty(&quot;result&quot;, resultOut);
			

							}					
							//decrease counter on old SVB
												
							resBSSVB =&quot;&quot;;
							inputsInc.SetProperty (&quot;SVBGroupNumber&quot;,prevSVBGroupNumber );
							inputsInc.SetProperty (&quot;BillingAccountId&quot;, billingAccountID);
							inputsInc.SetProperty (&quot;PartNum&quot;, RootSVBProductPartNum);
							BSSvbManagement.InvokeMethod (&quot;DecreaseSimNumber&quot;, inputsInc, outputsInc);
							
							resBSSVB = outputsInc.GetProperty(&quot;Result&quot;);
							activeSimNumber =outputsInc.GetProperty(&quot;ActiveSimNumber&quot;);
							var SVBGroupAssetId  = outputsInc.GetProperty(&quot;RootAssetId&quot;);
							var SVBIntegrationId = outputsInc.GetProperty(&quot;IntegrationId&quot;);
							if (resBSSVB==&quot;OK&quot;)
							{
								resultOut = true;	
								Outputs.SetProperty(&quot;result&quot;, resultOut);

								// CR 192 Automatic Deactivation Order Process - A.Eren
								if (activeSimNumber ==  &quot;0&quot;)
								{
									autoIn.SetProperty (&quot;billingAccountID&quot;,billingAccountID);
									autoIn.SetProperty (&quot;SVBIntegrationId&quot;,SVBIntegrationId);
									autoIn.SetProperty (&quot;SVBGroupAssetId&quot;,SVBGroupAssetId);
									autoIn.SetProperty (&quot;partNum&quot;,partNum);
									automaticDisconnection(autoIn,autoOut);
								}
							}
						}
						if(actionCd == addActionCd)
						{
							resBSSVB =&quot;&quot;;
							inputsInc = TheApplication().NewPropertySet ();
							outputsInc = TheApplication().NewPropertySet ();
							inputsInc.SetProperty (&quot;SVBGroupNumber&quot;,SVBGroupNumber );
							inputsInc.SetProperty (&quot;BillingAccountId&quot;, billingAccountID);
							inputsInc.SetProperty (&quot;PartNum&quot;, RootSVBProductPartNum);
							BSSvbManagement.InvokeMethod (&quot;IncreaseSimNumber&quot;, inputsInc, outputsInc);
							resBSSVB = outputsInc.GetProperty(&quot;Result&quot;);
							var activeSimNumber =outputsInc.GetProperty(&quot;ActiveSimNumber&quot;);
							if (resBSSVB==&quot;OK&quot;)
							{
								resultOut = true;
								Outputs.SetProperty(&quot;result&quot;, resultOut);	
							}
						}
						//if (actionCd == deleteActionCd || actionCd == suspendActionCd) //DEF-11660
						if (actionCd == deleteActionCd || (actionCd == suspendActionCd &amp;&amp; (strActionReason == &quot;210&quot; || strActionReason == &quot;212&quot;))) //DEF-11660 - Added strActionReason condition
						{	
							//Decrease the number of subscription under the SVB Product
							var inputsInc = TheApplication().NewPropertySet ();
							var outputsInc = TheApplication().NewPropertySet ();
							inputsInc.SetProperty (&quot;SVBGroupNumber&quot;,SVBGroupNumber );
							inputsInc.SetProperty (&quot;BillingAccountId&quot;, billingAccountID);
							inputsInc.SetProperty (&quot;PartNum&quot;, RootSVBProductPartNum);
							BSSvbManagement.InvokeMethod (&quot;DecreaseSimNumber&quot;, inputsInc, outputsInc);

							resBSSVB = outputsInc.GetProperty(&quot;Result&quot;);
							var activeSimNumber =outputsInc.GetProperty(&quot;ActiveSimNumber&quot;);
							var SVBGroupAssetId  = outputsInc.GetProperty(&quot;RootAssetId&quot;);
							var SVBIntegrationId = outputsInc.GetProperty(&quot;IntegrationId&quot;);
										
							if (resBSSVB==&quot;OK&quot;)
							{
								resultOut = true;	
								Outputs.SetProperty(&quot;result&quot;, resultOut);

								// CR 192 Automatic Deactivation Order Process - A.Eren
								if (activeSimNumber ==  &quot;0&quot;)
								{	
									if(actionCd == suspendActionCd)
									{
										if(SVBGroupAssetId != &quot;&quot;)
										{
											var sFunctionalityActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SUSP_SVB&quot;,&quot;VF_SUSP_SVB&quot;)
										
											if(sFunctionalityActive == &quot;Y&quot;)
											{			    						
											
												//DEF-4368 - retrofit
												with(AssetBC)
												{
													ClearToQuery();
													SetViewMode(AllView);
													ActivateField(&quot;VF Final Status&quot;);
													SetSearchSpec (&quot;Integration Id&quot;, sAssetIntegId);
													ExecuteQuery(ForwardOnly);
													if (FirstRecord())
													{
														sStatus = GetFieldValue(&quot;VF Final Status&quot;);
													}
												}	
												if (sStatus	!= &quot;Limited&quot;)
												{  //DEF-4368 - retrofit
												
													oServerRequest = TheApplication().GetService(&quot;Server Requests&quot;);
													oInputs = TheApplication().NewPropertySet();
													oOutputs = TheApplication().NewPropertySet();
													oChild = TheApplication().NewPropertySet();
													
													
													oInputs.SetProperty(&quot;Component&quot;,&quot;WfProcMgr&quot;);
													oInputs.SetProperty(&quot;Method&quot;,&quot;RunProcess&quot;);
													oInputs.SetProperty(&quot;Mode&quot;,&quot;DirectDb&quot;);
													
													oChild.SetProperty(&quot;ProcessName&quot;,&quot;VF Suspend Resume generic WF&quot;);
													
													oChild.SetProperty(&quot;Object Id&quot;,SVBGroupAssetId);
													oChild.SetProperty(&quot;Action&quot;,&quot;Suspend&quot;);
													oChild.SetProperty(&quot;Description&quot;, &quot;Suspend Resume Generic Async: &quot; + SVBGroupAssetId); //VFTRCBU-37079 | RMENEZES
													
													//oChild.SetType(&quot;WfProcMgr&quot;);
													
													oInputs.AddChild(oChild);
													oServerRequest.InvokeMethod(&quot;SubmitRequest&quot;,oInputs,oOutputs);
												}
											}
										}
									}
									else
									{
										// PROD00028347  
										var groupno = &quot;Group #&quot;  
										var	strOrderQuery = &quot;[Order Billing Acc Id] = &apos;&quot;+billingAccountID+&quot;&apos; AND [Action Code] = &apos;&quot;+addActionCd+&quot;&apos; AND [Name] = &apos;&quot;+groupno+&quot;&apos; AND [Value] = &apos;&quot;+SVBGroupNumber+&quot;&apos; AND([Order Item Status] &lt;&gt; &apos;&quot;+strComplete+&quot;&apos; AND [Order Item Status] &lt;&gt; &apos;&quot;+strCancelled+&quot;&apos;)&quot;; 
										OrderItemXABC.SetViewMode(AllView);
										OrderItemXABC.ClearToQuery();
										OrderItemXABC.ActivateField(&quot;Order Billing Acc Id&quot;);
										OrderItemXABC.ActivateField(&quot;Value&quot;);   
										OrderItemXABC.ActivateField(&quot;Name&quot;);
										OrderItemXABC.ActivateField(&quot;Order Item Status&quot;);
										OrderItemXABC.ActivateField(&quot;Action Code&quot;);
										// Begin: Scripting 15 null check Added 20may2012 Udbhav IDC
										inProp.SetProperty(&quot;billingAccountID&quot;,billingAccountID);
										inProp.SetProperty(&quot;SVBGroupNumber&quot;,SVBGroupNumber);
										BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
										//End 
										OrderItemXABC.SetSearchExpr(strOrderQuery);
										OrderItemXABC.ExecuteQuery(ForwardOnly); //Diva 27/03/2012: Added parameter for oracle review
										var OrderItemXABCExists2 = OrderItemXABC.FirstRecord();
										if (!OrderItemXABCExists2)     
										{// PROD00028347	
											var autoIn = TheApplication().NewPropertySet ();
											var autoOut = TheApplication().NewPropertySet ();
											autoIn.SetProperty (&quot;billingAccountID&quot;,billingAccountID );
											autoIn.SetProperty (&quot;SVBIntegrationId&quot;,SVBIntegrationId);
											autoIn.SetProperty (&quot;SVBGroupAssetId&quot;,SVBGroupAssetId);
											autoIn.SetProperty (&quot;partNum&quot;,partNum);					
											automaticDisconnection(autoIn,autoOut);    
										}  
									}
								}
							}
						}		  
					}
				}
			
		}
	}
	finally
	{	 
		 OrderBC         = null;		 
		 OrderItemBC     = null;
		 OrderItemXABC	= null;
		 BSSvbManagement = null;
		 OrderBO        = null;
		 autoOut	= null;
		autoIn	= null;
		//outputsInc	= null;
		outputsInc	= null;
		BS	= null;
		outProp	= null;
		inProp	= null;
		inputsInc = null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		oOutputs = null;
		oChild = null;
		oInputs = null;
		oServerRequest = null;
		//AssetBO = null; //DEF-4368
		AssetBC = null; //DEF-4368
		AssetBO = null; //DEF-4368
	}
}"
			   SEQUENCE="26"
			   UPDATED="01/16/2018 16:57:45"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="10/08/2010 20:54:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="orderDelete"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function orderDelete (Inputs, Outputs)
{
	try
	{
		var strOrderId  	= Inputs.GetProperty(&quot;orderId&quot;);

		var boOrderEntrySales : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderEntryOrders : BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcOrderEntryLI : BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Line Items&quot;);
		
		var orderType			= &quot;&quot;;
		var orderSubType 		= &quot;&quot;;
		var orderReason 		= &quot;&quot;;
		var orderStatus			= &quot;&quot;;
		var orderItemStatus		= &quot;&quot;;
		
		var strAccId = &quot;&quot;;
		var boAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAccount : BusComp = boAccount.GetBusComp(&quot;Account&quot;);
		var recordExist = &quot;&quot;;
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);

		// Begin: Scripting 15 null check Added 20may2012 Udbhav IDC
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End

		bcOrderEntryOrders.SetViewMode(AllView);
		bcOrderEntryOrders.ClearToQuery();
		bcOrderEntryOrders.SetSearchSpec(&quot;Id&quot;, strOrderId);
		bcOrderEntryLI.ClearToQuery();//Scripting 31: Removed child query since there is link
		bcOrderEntryLI.SetViewMode(AllView);
		bcOrderEntryOrders.ExecuteQuery(ForwardOnly);
		if(bcOrderEntryOrders.FirstRecord())
		{
			orderType 		= bcOrderEntryOrders.GetFieldValue(&quot;Order Type&quot;);
			orderSubType 	= bcOrderEntryOrders.GetFieldValue(&quot;Order Sub Type&quot;);
			orderReason 	= bcOrderEntryOrders.GetFieldValue(&quot;Order Reason&quot;);
			orderStatus 	= bcOrderEntryOrders.GetFieldValue(&quot;Status&quot;);
			if(orderStatus != TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;))
			{
				Outputs.SetProperty(&quot;Result&quot;, TheApplication().LookupMessage(&quot;ACS Messages&quot;, &quot;004&quot;));
			}
			else
			{
				recordExist = bcOrderEntryLI.FirstRecord();
				if (recordExist == false)
				{
					Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
				}
				else
				{
					while(recordExist == true)
					{
						orderItemStatus = bcOrderEntryLI.GetFieldValue(&quot;Status&quot;);
						bcOrderEntryLI.SetFieldValue(&quot;Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;));
						recordExist = bcOrderEntryLI.NextRecord();
					}
					
					bcOrderEntryOrders.SetFieldValue(&quot;Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;));
					bcOrderEntryOrders.WriteRecord(); //Change ExecuteQuery(ForwardOnly) to WriteRecord
		
					strAccId = bcOrderEntryOrders.GetFieldValue(&quot;Account Id&quot;);
		 	 		bcAccount.ClearToQuery ();
					bcAccount.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
					bcAccount.ActivateField(&quot;Account Id&quot;);
					// Begin: Scripting 15 null check Added 20may2012 Udbhav IDC
					inProp = TheApplication().NewPropertySet();
					inProp.SetProperty(&quot;strAccId&quot;,strAccId);
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
					//End
					var strSearchExpr = &quot;[Account Id] = &apos;&quot;+strAccId+&quot;&apos;&quot;;
					bcAccount.SetSearchExpr (strSearchExpr);
					bcAccount.ExecuteQuery (ForwardOnly);	
					
					if (bcAccount.FirstRecord())
					{
						Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
						var strView = &quot;SIS OM Customer Account Portal View - Poste&quot;;
						TheApplication().GotoView(strView, boAccount);
					}
					else
					{
						Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
					}
				}	
			}
    	}
		else
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
		}		
	}		
	catch (e)
	{
	}
	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		//boOrderEntrySales	= null;
    	bcOrderEntryOrders	= null;
    	bcOrderEntryLI		= null;
    	boOrderEntrySales	= null;
    	orderType			= null;
		orderSubType 		= null;
		orderReason 		= null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
		bcAccount = null;
		boAccount = null;

	}	
}"
			   SEQUENCE="28"
			   UPDATED="01/16/2018 17:00:09"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="06/23/2010 08:52:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="searchProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function searchProduct (Inputs, Outputs)
{
	try
	{
		var sPartNumber		= Inputs.GetProperty(&quot;partNum&quot;); //Product Part Number
		var sResult			= &quot;&quot;;

		var boAdminISSProductDefinition	: BusObject = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);//Order BO
		var bcInternalProductISSAdmin 	: BusComp = boAdminISSProductDefinition.GetBusComp(&quot;Internal Product - ISS Admin&quot;); //Order BC

		if (sPartNumber != &quot;&quot;)
       		{
       			with(bcInternalProductISSAdmin)
       			{
					ClearToQuery();
	       			SetViewMode(AllView);
				    SetSearchSpec (&quot;Part #&quot;, sPartNumber);//VFTK Venkata 11052012 : No changes for OracleScript 15 review since sPartNumber is a required input
				   	ExecuteQuery(ForwardOnly);
	       			if (FirstRecord())
			   		{
						sResult =&quot;OK&quot;;
       				}
	       			else
						sResult =&quot;KO&quot;;
       			}
			}
			
		Outputs.SetProperty(&quot;Result&quot;, sResult);
	}
	//catch(e)// commented as per oracle review
//	{
//	}
	finally
	{
		bcInternalProductISSAdmin = null;	
		boAdminISSProductDefinition = null;
	}
}"
			   SEQUENCE="33"
			   UPDATED="06/21/2015 23:18:25"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:14:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="setNewEMD"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function setNewEMD(Inputs,Outputs)
{

	try
	{
		var oBOOrder : BusObject = TheApplication().GetBusObject(&quot;HP Order Entry&quot;);
		var oBCOLIXA : BusComp = oBOOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var bcAsset  : BusComp = oBOOrder.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
		var MsgCode = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_043&quot;);
		var strRootItemId = Inputs.GetProperty(&quot;strRootItemId&quot;);
		var RootAssetintegrationId = Inputs.GetProperty(&quot;RootAssetintegrationId&quot;);
		var partNum = Inputs.GetProperty(&quot;partNum&quot;);
		var calcEMD = &quot;&quot;;
		var installDate	= &quot;&quot;;	
		
		var intTime = &quot;&quot;;
		
		var boParameters : BusObject = TheApplication().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameters : BusComp = boParameters.GetBusComp (&quot;ACS NI Parameter&quot;);
		var strParameterSrcExpr = &quot;[Function] = &apos;Minutes&apos; AND [Name] = &apos;EMD_SET&apos;&quot;;
		
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
				
		bcParameters.ClearToQuery ();
		bcParameters.SetViewMode(AllView);
		bcParameters.ActivateField (&quot;Function&quot;);
		bcParameters.ActivateField (&quot;Name&quot;);
		bcParameters.ActivateField (&quot;Value&quot;);
		bcParameters.SetSearchExpr (strParameterSrcExpr);//Scripting 15:null check not req value hardcoded
		bcParameters.ExecuteQuery (ForwardOnly);
		if (bcParameters.FirstRecord ())
		{
			intTime = bcParameters.GetFieldValue (&quot;Value&quot;);
			intTime = intTime * 3600 * 1000;
		}
			
		// Begin: Scripting 15 null check Added 20may2012 Udbhav IDC
		inProp.SetProperty(&quot;RootAssetintegrationId&quot;,RootAssetintegrationId);
		inProp.SetProperty(&quot;partNum&quot;,partNum);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End 

		bcAsset.ClearToQuery();
		bcAsset.SetViewMode(AllView);
		bcAsset.SetSearchSpec(&quot;Root Integration Id&quot;,RootAssetintegrationId);
		bcAsset.SetSearchSpec(&quot;Product Part Number&quot;,partNum);
		bcAsset.ActivateField(&quot;Install Date&quot;);
		bcAsset.ExecuteQuery(ForwardOnly);
		if(bcAsset.FirstRecord())
		{
			installDate = bcAsset.GetFieldValue(&quot;Install Date&quot;);
		}
					
		with(oBCOLIXA)
		{
			// Begin: Scripting 15 null check Added 20may2012 Udbhav IDC
			inProp.SetProperty(&quot;strRootItemId&quot;,strRootItemId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End 

			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Root Object Id&quot;,strRootItemId);
			SetSearchSpec(&quot;Name&quot;,&quot;Earliest Modification Date&quot;);	
			ExecuteQuery(ForwardOnly);
			var found = FirstRecord();
			if(found)
			{
				var EarlModDate = GetFieldValue(&quot;Text Value&quot;);
				if ((EarlModDate != &quot;&quot;) &amp;&amp; (EarlModDate != &quot;undefined&quot;) &amp;&amp; (EarlModDate != null) &amp;&amp; (installDate != &quot;&quot;) &amp;&amp; (installDate != &quot;undefined&quot;) &amp;&amp; (installDate != null))
				{
	 				var EMD = new Date(EarlModDate);
	 				var installDT = new Date(installDate);
 				
					if(EMD != &quot;&quot; &amp;&amp; installDT != &quot;&quot;)
					{
						var sToday =  new Date();
						sToday = sToday.toSystem();
						sToday = sToday * 1000;
						EMD = EMD.toSystem();
						EMD = EMD * 1000;
						installDT = installDT.toSystem();
						installDT = installDT * 1000;
							
						if (partNum == &quot;51016&quot;){		
						var ThirtyDays = 30 * 24 * 60 * 60 * 1000;
						if(sToday - installDT &lt; ThirtyDays){
							calcEMD = sToday + (ThirtyDays - ((sToday - installDT)));
						}else
						{
							calcEMD = sToday + (ThirtyDays - ((sToday - installDT) % ThirtyDays));
						}
					}
					else if (partNum == &quot;51015&quot;){
						var SevenDays = 7 * 24 * 60 * 60 * 1000;
						if(sToday - installDT &lt; SevenDays){
							calcEMD = sToday + (SevenDays - ((sToday - installDT)));
						}
						else{
							calcEMD = sToday + (SevenDays - ((sToday - installDT) % SevenDays));
						}
					} 	
					calcEMD = calcEMD + intTime;
					var newEMD = new Date(calcEMD);
					
					var  sMonth = ToString(newEMD.getMonth() +1);					
					if (sMonth.length == 1) {sMonth = &quot;0&quot; + sMonth;}
						var sDay = ToString(newEMD.getDate());
					if (sDay.length == 1) {sDay = &quot;0&quot; + sDay;}
						var sHours = ToString(newEMD.getHours());
					if (sHours.length == 1) {sHours = &quot;0&quot; + sHours;}
						var sMinutes = ToString(newEMD.getMinutes());
					if (sMinutes.length == 1) {sMinutes = &quot;0&quot; + sMinutes;}
						var sSeconds = ToString(newEMD.getSeconds());
					if (sSeconds.length == 1) {sSeconds = &quot;0&quot; + sSeconds;}
									
					Outputs.SetProperty(&quot;newEMD&quot;, sMonth +&quot;/&quot;+  sDay +&quot;/&quot; + newEMD.getFullYear() +&quot;  &quot;+sHours+&quot;:&quot;+sMinutes+&quot;:&quot;+sSeconds);
					}
				}
			}
		}
	}
	finally
	{
		bcAsset = null;
		bcParameters = null;
		boParameters = null;
		oBCOLIXA = null;
		oBOOrder = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="35"
			   UPDATED="06/21/2015 23:18:25"
			   UPDATED_BY="SADMIN"
			   CREATED="02/13/2012 13:14:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="transfer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function transfer (Inputs, Outputs)
{
	try
	{
		var lovTransSame = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;127&quot;);
	    var lovTransCross = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;128&quot;);
		var sDisConId = Inputs.GetProperty(&quot;orderId&quot;); 
		var sAccId = Inputs.GetProperty(&quot;SI Account Id&quot;);
		var sBillId = Inputs.GetProperty(&quot;SI Billing Account Id&quot;);
		var strNewBAPayType = Inputs.GetProperty(&quot;SI BA Type&quot;);
		var CrossType = Inputs.GetProperty(&quot;CrossType&quot;);
		var oldBillingAccountId = Inputs.GetProperty(&quot;Billing Account Id&quot;); 
		var argOrderSubType = Inputs.GetProperty(&quot;Order Sub Type&quot;); 
		var inOrderReason = Inputs.GetProperty(&quot;Order Reason&quot;);
		var strPostpaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strPrepaid = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		if(strNewBAPayType == strPostpaid){ 
			strNewBAPayType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACCOUNT_PAY_TYPE&quot;,&quot;PostPaid&quot;);
		}
		else if(strNewBAPayType == strPrepaid){
			strNewBAPayType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACCOUNT_PAY_TYPE&quot;,&quot;PrePaid&quot;); 
		}else{
			strNewBAPayType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACCOUNT_PAY_TYPE&quot;,&quot;PostPaid&quot;);
		}
		var strOldBAPayType	= &quot;&quot;;
		var sDonAccId = &quot;&quot;;
		var strOldLastInvoiceDate = &apos;&apos;;
		var strOldInstallDate = &apos;&apos;;
		var strInvoicedFlag = &quot;N&quot;;
		var OrderSubTypeTransAct = &quot;&quot;;
		var RootIdDisc = &quot;&quot;;
		var IdDisc = &quot;&quot;;
		var ServEndDt = &quot;&quot;;
		var lastName = &quot;&quot;;
		var XBO:BusObject;
		var XBC:BusComp;
		var XABC:BusComp;
		var bcPickDonorOpr : BusComp;
		var XAPropSet = TheApplication().NewPropertySet();
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var boOrder = TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var bcOrderItemXA = boOrder.GetBusComp(&quot;Order Item XA (Simple)&quot;);
		var boAssetManagement = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var sAsstMgmtHeaderSimpleBC = boAssetManagement.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
		var myBS = TheApplication().GetService (&quot;VF Orders&quot;);
        var inputs = TheApplication().NewPropertySet ();
        var outputs = TheApplication().NewPropertySet ();
        var psInput  = TheApplication().NewPropertySet();
		var psOutput  = TheApplication().NewPropertySet();
		var CrossIn = TheApplication().NewPropertySet();
		var CrossOut = TheApplication().NewPropertySet();
		var strProdPromInstanceId;
		var strProdPromRuleId;	
		var strProdPromId;	

		if (argOrderSubType == &quot;125&quot;){
	        inputs.SetProperty (&quot;newBillingAccountId&quot;, sBillId);
			inputs.SetProperty (&quot;oldBillingAccountId&quot;,oldBillingAccountId);
			inputs.SetProperty (&quot;OrderReason&quot;,inOrderReason);	
			transfer125(inputs,Outputs);
		}
		var boOrderEntrySales = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderEntryOrders = boOrderEntrySales.GetBusComp(&quot;Order Entry - Orders&quot;);
		var sXOrderBO = TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var sDsicOrderBO = TheApplication().GetBusObject(&quot;HP Order Entry&quot;);
		var sOrderLineItemBC = sDsicOrderBO.GetBusComp(&quot;HP Order Entry - Line Items&quot;); //Retrofits - 05012015 - RCRISPIM
		var sNewOrderBO =TheApplication().GetBusObject(&quot;HP Order Entry&quot;);
		var sNewOrderLineItemsBC = sNewOrderBO.GetBusComp(&quot;HP Order Entry - Line Items&quot;);
		var strItemSrcExpr = &quot;&quot;;
		var sCount = &quot;&quot;;
		var sOrderType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Add New Service&quot;);
		var sDiscOrderSubType = &quot;&quot;;
		var sDiscOrderReason = &quot;&quot;;
		var sOrderTypeBC = &quot;&quot;;		
		var AsstIngId = &quot;&quot;;
		var sLineNum = &quot;&quot;;
		var strMSISDN = &quot;&quot;;
		var strICCID = &quot;&quot;;
		var sEventSource = &quot;&quot;;
		var sPriceListId = &quot;&quot;;
		var startDate = &quot;&quot;;
		var strOrderItemXASE = &quot;&quot;;
		var sOrderId = &quot;&quot;;
		var donorOperator = &quot;&quot;;
		var sIMEI = &quot;&quot;;
		var assetMemIntegId	= &quot;&quot;;
		var ShortNumber	= &quot;&quot;;
		var sActionCode =  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var discOrderNum;
       	if (oldBillingAccountId == sBillId)
			Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
		else 
		{
			with(bcOrderEntryOrders)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Account Id&quot;);
				inProp.SetProperty(&quot;sDisConId&quot;,sDisConId);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			    SetSearchSpec (&quot;Id&quot;, sDisConId);
			   	ExecuteQuery(ForwardOnly);	
				if (FirstRecord())
			   	{
					sDonAccId = GetFieldValue(&quot;Account Id&quot;);
			       	sDiscOrderSubType = GetFieldValue(&quot;Order Sub Type&quot;);
			       	discOrderNum = GetFieldValue(&quot;Order Number&quot;);
			       	NewRecord(NewAfterCopy);
			      	SetFieldValue(&quot;Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;));
			      	SetFieldValue(&quot;Parent Order Id&quot;,sDisConId);
					sOrderTypeBC=GetPicklistBusComp(&quot;Order Type&quot;);
					with(sOrderTypeBC){
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Order Type&quot;);
						SetSearchSpec(&quot;Order Type&quot;, sOrderType);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord()){
							Pick();	
						}
					}
					sOrderTypeBC 	=null;
					SetFieldValue(&quot;Account Id&quot;,sAccId);
					SetFieldValue(&quot;Billing Account Id&quot;,sBillId);
					SetFieldValue(&quot;Order Sub Type&quot;, &quot;&quot;);			
					SetFieldValue(&quot;SI Billing Account Id&quot;,&quot;&quot;);
					if (argOrderSubType == &quot;125&quot;){
						SetFieldValue(&quot;SI Account Id&quot;,&quot;&quot;);
						SetFieldValue(&quot;Order Sub Type&quot;, lovTransSame);
						OrderSubTypeTransAct = &quot;127&quot;;
					}
					else if (argOrderSubType == &quot;124&quot;){

						SetFieldValue(&quot;VF Orig Start Date&quot;,&quot;&quot;);
						SetFieldValue(&quot;Order Sub Type&quot;, lovTransCross);
						SetFieldValue(&quot;SI Account Id&quot;, sDonAccId);
						OrderSubTypeTransAct = &quot;128&quot;;
					}
					SetFieldValue(&quot;Order Number&quot;,discOrderNum);
					WriteRecord();
					sOrderId = GetFieldValue(&quot;Id&quot;);

					psInput.SetProperty(&quot;OrderId&quot;, sOrderId);
					psInput.SetProperty(&quot;OrderSubType&quot;,OrderSubTypeTransAct);
					psInput.SetProperty(&quot;Reason&quot;, inOrderReason);
			       	PickReason(psInput, psOutput);					
		    	}
			}
			if (CrossType == &quot;CrossSegment&quot;){
				CrossIn.SetProperty(&quot;OrderId&quot;,sOrderId);
				ManageCrossSegment(CrossIn,CrossOut);			
			}
			with (sOrderLineItemBC){
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Item Price List Id&quot;);
				ActivateField(&quot;Service Id&quot;);
				ActivateField(&quot;DONOR OPERATOR&quot;);
				ActivateField(&quot;MSISDN&quot;);
				ActivateField(&quot;ICCID&quot;);
				ActivateField(&quot;Line Number&quot;);
				ActivateField(&quot;Asset Integration Id&quot;);
				ActivateField(&quot;VF Orig Intg Id&quot;);
				ActivateField(&quot;VF Account Pay Type&quot;);
				ActivateField(&quot;Service Start Date&quot;);
				ActivateField(&quot;VF Member Asset Id&quot;);
				ActivateField(&quot;Prod Prom Instance Id&quot;);
				ActivateField(&quot;Prod Prom Id&quot;);
				ActivateField(&quot;VF Short Number&quot;);
				ActivateField(&quot;Part Number&quot;);
				ActivateField(&quot;Service End Date&quot;);
				SetSearchSpec(&quot;Order Header Id&quot;,sDisConId);
		   		ExecuteQuery(ForwardOnly); 	
				var BlRec=FirstRecord();
				while(BlRec){
					sLineNum     	= GetFieldValue(&quot;Line Number&quot;);
					donorOperator	= GetFieldValue(&quot;DONOR OPERATOR&quot;);
					strMSISDN		= GetFieldValue(&quot;MSISDN&quot;);
					strICCID        = GetFieldValue(&quot;ICCID&quot;);
					sEventSource 	= GetFieldValue(&quot;Service Id&quot;);
					AsstIngId    	= GetFieldValue(&quot;Asset Integration Id&quot;);
					sPriceListId    = GetFieldValue(&quot;Item Price List Id&quot;);
					startDate		= GetFieldValue(&quot;Service Start Date&quot;);
					RootIdDisc		= GetFieldValue(&quot;Root Order Item Id&quot;);
					sIMEI           = GetFieldValue(&quot;VF IMEI&quot;);
					IdDisc			= GetFieldValue(&quot;Id&quot;);
					strOldBAPayType	= GetFieldValue(&quot;VF Account Pay Type&quot;);
					assetMemIntegId = GetFieldValue(&quot;VF Member Asset Id&quot;);
					ServEndDt 		= GetFieldValue(&quot;Service End Date&quot;);
					var prodPartNum = GetFieldValue(&quot;Part Number&quot;);
					ShortNumber = GetFieldValue(&quot;VF Short Number&quot;);
					if (argOrderSubType == &quot;125&quot;) 
					 {	
						strNewBAPayType = strOldBAPayType;
						SetFieldValue(&quot;VF Orig Intg Id&quot;,AsstIngId);WriteRecord();
						//var strSpec = &quot;[Integration Id] = &apos;&quot;+AsstIngId+&quot;&apos;&quot;;
						var strSpec = &quot;[Integration Id] = &apos;&quot;+AsstIngId+&quot;&apos; AND ([Product Part Number] = &apos;1000&apos; OR [VF Product Type]=&apos;HANDSET CONTAINER&apos;)&quot;; //this search spec must be only executed for Mobile Line root product.
						with(sAsstMgmtHeaderSimpleBC)
	                    {
							SetViewMode (AllView);
							ActivateField(&quot;VF Last Inv Dt&quot;);
							ActivateField(&quot;Install Date&quot;);
							ActivateField(&quot;VF Asset Phone Directory Flag&quot;);
							ActivateField(&quot;Owner Contact Last Name&quot;);
							ActivateField(&quot;Prod Prom Instance Id&quot;);
							ActivateField(&quot;Prod Prom Id&quot;);
							ActivateField(&quot;Prod Prom Rule Id&quot;);
							ActivateField(&quot;Product Part Number&quot;);
							ClearToQuery ();
							SetSearchExpr(strSpec);		
							inProp.SetProperty(&quot;AsstIngId&quot;,AsstIngId);
							BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
							ExecuteQuery (ForwardOnly);
	                    }
	                    if(sAsstMgmtHeaderSimpleBC.FirstRecord())
	                    {
							strProdPromId = sAsstMgmtHeaderSimpleBC.GetFieldValue(&quot;Prod Prom Id&quot;); 
							strProdPromRuleId = sAsstMgmtHeaderSimpleBC.GetFieldValue(&quot;Prod Prom Rule Id&quot;);      
							if(strProdPromId != &quot;&quot; &amp;&amp; strProdPromId != null)
								strProdPromInstanceId = getNewProdPromInstId(sOrderId);
							if(sAsstMgmtHeaderSimpleBC.GetFieldValue(&quot;Product Part Number&quot;) == &quot;1000&quot;)
	                    	{
								var OldPhoneDirectoryFlag =	sAsstMgmtHeaderSimpleBC.GetFieldValue(&quot;VF Asset Phone Directory Flag&quot;);
								strOldLastInvoiceDate = sAsstMgmtHeaderSimpleBC.GetFieldValue(&quot;VF Last Inv Dt&quot;);		                    
								strOldInstallDate = sAsstMgmtHeaderSimpleBC.GetFieldValue(&quot;Install Date&quot;);
								if (argOrderSubType == &quot;125&quot; &amp;&amp; prodPartNum == &quot;1000&quot;) {
								lastName = sAsstMgmtHeaderSimpleBC.GetFieldValue(&quot;Owner Contact Id&quot;);
							}
								if (strOldLastInvoiceDate &gt; strOldInstallDate)
									strInvoicedFlag = &quot;Y&quot;; 
							} 
						}
					}
                    if(argOrderSubType == &quot;124&quot;)
	                 {
	                	var OldPhoneDirectoryFlag = &quot;Y&quot;;
	                	if (CrossType == &quot;CrossSegment&quot; &amp;&amp; RootIdDisc == IdDisc)
	                	{
	                		XBO = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
							XABC = XBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
							with(XABC){
								SetViewMode(AllView)
								ClearToQuery();
								SetSearchExpr(&quot;[Object Id] = &apos;&quot;+IdDisc+&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);
								var xaexist = FirstRecord();
								while(xaexist){
									XAPropSet.SetProperty(GetFieldValue(&quot;Name&quot;),GetFieldValue(&quot;Value&quot;));
									xaexist = NextRecord();
								}
							}
							XABC = null;
							XBO = null;
	                	}
	                 }
	               	if (CrossType == &quot;CrossSegment&quot;)
					{
						XBO = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
						XBC = XBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
						var TargetExpr = &quot;&quot;;
						if (RootIdDisc == IdDisc)
							TargetExpr = &quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND [Root Order Item Id] = [Id]&quot;;
						else
							TargetExpr = &quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND [Service Start Date] IS NULL&quot;;
						
						with(XBC)
						{
							SetViewMode(AllView);
							ActivateField(&quot;Item Price List Id&quot;);
							ActivateField(&quot;Donor Operator&quot;);
							ActivateField(&quot;Service Id&quot;);
							ActivateField(&quot;Action Code&quot;);
							ActivateField(&quot;MSISDN&quot;);
							ActivateField(&quot;ICCID&quot;);
							ActivateField(&quot;Billing Account Id&quot;);
							ActivateField(&quot;Service Start Date&quot;);
							ActivateField(&quot;VF Phone Directory&quot;);
							ClearToQuery();
							SetSearchExpr(TargetExpr);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								if (RootIdDisc == IdDisc)
								{
									var currentId = GetFieldValue(&quot;Id&quot;);
									SetFieldValue(&quot;Service Id&quot;,sEventSource);
									SetFieldValue(&quot;Donor Operator&quot;,donorOperator);
									SetFieldValue(&quot;MSISDN&quot;,strMSISDN);
									SetFieldValue(&quot;ICCID&quot;,strICCID);
									SetFieldValue(&quot;Billing Account Id&quot;,sBillId);
									SetFieldValue(&quot;Service Start Date&quot;,startDate);
									SetFieldValue(&quot;Action Code&quot;,sActionCode);
									SetFieldValue(&quot;Item Price List Id&quot;,sPriceListId);
									SetFieldValue(&quot;VF Phone Directory&quot;,OldPhoneDirectoryFlag);
									WriteRecord();
									XABC = XBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
									with(XABC){
										SetViewMode(AllView);
										ClearToQuery();
										SetSearchExpr(&quot;[Object Id] = &apos;&quot;+currentId+&quot;&apos;&quot;);
										ExecuteQuery(ForwardOnly);
										var MainXA = FirstRecord();
										while(MainXA){
											SetFieldValue(&quot;Value&quot;,XAPropSet.GetProperty(GetFieldValue(&quot;Name&quot;)));
											WriteRecord();
											MainXA = NextRecord();
										}
									}
									XABC = null;
								}
								else{
									SetFieldValue(&quot;Billing Account Id&quot;,sBillId);
									SetFieldValue(&quot;Service Start Date&quot;,startDate);
									SetFieldValue(&quot;Action Code&quot;,sActionCode);
									SetFieldValue(&quot;Item Price List Id&quot;,sPriceListId);
									WriteRecord();
								}
							}
						}
					}
					else
					{
						with (sNewOrderLineItemsBC){
								transferAux1(sNewOrderLineItemsBC,sOrderId,AsstIngId,sEventSource,strMSISDN,strICCID,sBillId,startDate,sActionCode,sPriceListId,OldPhoneDirectoryFlag,sIMEI,strNewBAPayType,assetMemIntegId,strProdPromInstanceId,strProdPromId,strProdPromRuleId, ShortNumber, ServEndDt, lastName);
								if(donorOperator == null || donorOperator == &quot;&quot;) 
									SetFieldValue(&quot;DONOR OPERATOR&quot;,donorOperator);
								else
								{
									 bcPickDonorOpr = GetPicklistBusComp(&quot;DONOR OPERATOR&quot;); 
									 with(bcPickDonorOpr){
	        						 	ClearToQuery();
	            						SetViewMode(AllView);
	            						SetSearchSpec(&quot;Value&quot;, donorOperator);
	            						ExecuteQuery(ForwardOnly);
	           							if(FirstRecord()){
											Pick();
	           							}	
	        						 }
								}
								WriteRecord();
							}
					}
						strProdPromInstanceId = &quot;&quot;;
						strProdPromId = &quot;&quot;;
						strProdPromRuleId = &quot;&quot;;
					BlRec = NextRecord();
				}
			}
			if (argOrderSubType == &quot;124&quot; || argOrderSubType == &quot;125&quot;)
				ManageDataSharing(sOrderId);
			if (argOrderSubType == &quot;124&quot;)
			{
				ManageHandset(sOrderId);
				ManageOnenet(sOrderId);
			}
			if (argOrderSubType == &quot;125&quot;)
			{
				ManageTariff(sDisConId,sOrderId,sBillId,oldBillingAccountId,inOrderReason);
				ManageCampaigns(sDisConId,sOrderId);
				if(inOrderReason==&quot;253&quot;) DeleteNotBaseProduct(sOrderId);
			}
			strOrderItemXASE = &quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos;&quot;;
			var booRecordExists;
			bcOrderItemXA.ClearToQuery();
			bcOrderItemXA.SetViewMode(AllView);
			bcOrderItemXA.ActivateField (&quot;Order Header Id&quot;);
			bcOrderItemXA.ActivateField (&quot;Action Code&quot;);
			bcOrderItemXA.SetSearchExpr (strOrderItemXASE);
			bcOrderItemXA.ExecuteQuery(ForwardOnly);
			booRecordExists = bcOrderItemXA.FirstRecord();
			while (booRecordExists)
			{
				bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;, sActionCode);
				booRecordExists = bcOrderItemXA.NextRecord();
			}
			with(bcOrderEntryOrders)
			{
				SetViewMode(AllView); 
				ActivateField(&quot;VF Invoiced Flag&quot;); 
				ClearToQuery();
				SetSearchSpec(&quot;Id&quot;,sOrderId );
				ExecuteQuery(ForwardOnly);	
				if(FirstRecord()){
					SetFieldValue(&quot;VF Invoiced Flag&quot;,strInvoicedFlag);
					WriteRecord();
				}
			}					
			if (TheApplication().GetProfileAttr(&quot;VFPA_TaskInitiated&quot;) != &quot;PostActTask&quot;)
				TheApplication().GotoView(&quot;Order Entry - Line Items View (Sales)&quot;,boOrderEntrySales);
			else	
				Outputs.SetProperty(&quot;Order Id&quot;,sOrderId);
		}
	}
	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		sNewOrderLineItemsBC = null;
		sNewOrderBO = null;
		sOrderLineItemBC = null;
		sDsicOrderBO = null;
		sXOrderBO = null;
		bcOrderEntryOrders = null;
		boOrderEntrySales = null;
		CrossOut = null;
		CrossIn = null;
		psOutput = null;
		psInput = null;
		outputs = null;
		inputs = null;
		myBS = null;
		sAsstMgmtHeaderSimpleBC	= null;
		boAssetManagement = null;
		bcOrderItemXA = null;
		boOrder = null;
		BS = null;
		outProp = null;
		inProp = null;
		XAPropSet = null;
		bcPickDonorOpr = null;
		XABC = null;
		XBC = null;
		XBO = null;
	}
}"
			   SEQUENCE="36"
			   UPDATED="01/17/2018 10:21:28"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="06/25/2010 10:45:20"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="transfer125"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function transfer125(inputs,Outputs)
{
	//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
	try
	{
		var myoutputs 	:PropertySet = TheApplication().NewPropertySet();
		var Reason = inputs.GetProperty(&quot;OrderReason&quot;);
	  	if (Reason != &quot;253&quot;) 
		{
			checkBillCycle(inputs, myoutputs);
			var resultCheck = myoutputs.GetProperty(&quot;Result&quot;);
			if (resultCheck == &quot;KO&quot;)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;Same Bill Cycle&quot;);
				return(CancelOperation);
			}
			/*if (resultCheck == &quot;KO2&quot;)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;Different BA Dedicated&quot;);
				return(CancelOperation);
			}*/
			if (resultCheck == &quot;KOM2M&quot;)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;Diff M2M BA&quot;);
				return(CancelOperation);
			}
			if (resultCheck == &quot;KONormal&quot;)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;Diff Normal BA&quot;);
				return(CancelOperation);
			}
		}
		else if(Reason ==&quot;253&quot;)
		{
			checkBillCycle(inputs, myoutputs);
			var resultCheck = myoutputs.GetProperty(&quot;Result&quot;);
			if (resultCheck == &quot;KO&quot;)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;Same Bill Cycle&quot;);
				return(CancelOperation);
			}
			if (resultCheck == &quot;KOM2M&quot;)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;Same M2M BA&quot;);
				return(CancelOperation);
			}
			if (resultCheck == &quot;KONormal&quot;)
			{
				Outputs.SetProperty(&quot;Result&quot;, &quot;Same Normal BA&quot;);
				return(CancelOperation);
			}		
		
		}
	}
	finally
	{
		myoutputs = null;
	}
}"
			   SEQUENCE="37"
			   UPDATED="01/16/2018 17:12:46"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="10/18/2013 14:07:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="transferAux1"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function transferAux1(sNewOrderLineItemsBC,sOrderId,AsstIngId,sEventSource,strMSISDN,strICCID,sBillId,startDate,sActionCode,sPriceListId,OldPhoneDirectoryFlag,sIMEI,strNewBAPayType,assetMemIntegId,strProdPromInstanceId,strProdPromId,strProdPromRuleId, ShortNumber, ServEndDt)
{
	with (sNewOrderLineItemsBC)
	{
		SetViewMode(AllView);
		ActivateField(&quot;Item Price List Id&quot;);
		ActivateField(&quot;DONOR OPERATOR&quot;);
		ActivateField(&quot;Service Id&quot;);
		ActivateField(&quot;Action Code&quot;);
		ActivateField(&quot;MSISDN&quot;);
		ActivateField(&quot;ICCID&quot;);
		ActivateField(&quot;Asset Integration Id&quot;);
		ActivateField(&quot;Billing Account Id&quot;);
		ActivateField(&quot;Service Start Date&quot;);
		ActivateField(&quot;VF IMEI&quot;);
		ActivateField(&quot;VF Orig Intg Id&quot;);
		ActivateField(&quot;VF Account Pay Type&quot;);
		ActivateField(&quot;VF Member Asset Id&quot;);
		ActivateField(&quot;Prod Prom Rule Id&quot;);
		ActivateField(&quot;VF Short Number&quot;);
		ActivateField(&quot;Service End Date&quot;);
		ActivateField(&quot;Contact Id&quot;);
		var query = &quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND  [Asset Integration Id] =&apos;&quot;+AsstIngId+&quot;&apos;&quot;;
		ClearToQuery();
		SetSearchExpr(query);
	 	ExecuteQuery(ForwardOnly); 
	
		if(FirstRecord())
		{
			SetFieldValue(&quot;Service Id&quot;,sEventSource);
			SetFieldValue(&quot;MSISDN&quot;,strMSISDN);
			SetFieldValue(&quot;ICCID&quot;,strICCID);
			SetFieldValue(&quot;Billing Account Id&quot;,sBillId);
			SetFieldValue(&quot;Asset Integration Id&quot;, GetFieldValue(&quot;Id&quot;));
			SetFieldValue(&quot;Service Start Date&quot;,startDate);
			SetFieldValue(&quot;Action Code&quot;,sActionCode);
			SetFieldValue(&quot;Item Price List Id&quot;,sPriceListId);
			SetFieldValue(&quot;VF Phone Directory&quot;,OldPhoneDirectoryFlag);
			SetFieldValue(&quot;VF IMEI&quot;,sIMEI);	
			SetFieldValue(&quot;VF Account Pay Type&quot;,strNewBAPayType);
			SetFieldValue(&quot;VF Member Asset Id&quot;,assetMemIntegId);
			SetFieldValue(&quot;Prod Prom Instance Id&quot;, strProdPromInstanceId);
			SetFieldValue(&quot;Prod Prom Id&quot;, strProdPromId);
			SetFieldValue(&quot;Prod Prom Rule Id&quot;, strProdPromRuleId);
			SetFieldValue(&quot;VF Short Number&quot;,ShortNumber);
			SetFieldValue(&quot;Service End Date&quot;,ServEndDt);
			if (lastName != &quot;&quot;)
				SetFieldValue(&quot;Contact Id&quot;,lastName);
		}
	}
}"
			   SEQUENCE="38"
			   UPDATED="06/21/2015 23:18:26"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:31:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



