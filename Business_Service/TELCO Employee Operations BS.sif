<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="04/28/2018 18:51:18"
   UPDATED_BY="SADMIN"
   CREATED="04/28/2018 10:52:36"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="WA#39  DG - 3/7/14"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="TELCO Order Management"
	   UI_FREEZE="N"
	   UPDATED="05/14/2018 15:42:27"
	   UPDATED_BY="IBM_ETUNALI"
	   CREATED="08/14/2014 20:13:30"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="TELCO Employee Operations BS"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="05/14/2018 15:37:30"
		   UPDATED_BY="IBM_ETUNALI"
		   CREATED="05/14/2018 15:37:27"
		   CREATED_BY="IBM_ETUNALI">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Associate_Organization"
			   UPDATED="05/14/2018 15:37:28"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:28"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Associate_Organization"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:28"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:28"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Associate_Position"
			   UPDATED="05/14/2018 15:37:28"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:28"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Associate_Position"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:28"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:28"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Associate_Resp"
			   UPDATED="05/14/2018 15:37:28"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:28"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Associate_Resp"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:28"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:28"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Associate_Sales_Team"
			   UPDATED="05/14/2018 15:37:28"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:28"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Associate_Sales_Team"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:28"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:28"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Deassociate_Position"
			   UPDATED="05/14/2018 15:37:28"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:28"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Deassociate_Position"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:28"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:28"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Deassociate_Resp"
			   UPDATED="05/14/2018 15:37:28"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:28"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Deassociate_Resp"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:28"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:28"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Insert_Employee"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Insert_Employee"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:29"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:29"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Remove_Employee"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Remove_Employee"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:29"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:29"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Update_Primary_Pos"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Update_Primary_Pos"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:29"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:29"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Update_Primary_Resp"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Update_Primary_Resp"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/14/2018 15:37:29"
				   UPDATED_BY="IBM_ETUNALI"
				   CREATED="05/14/2018 15:37:29"
				   CREATED_BY="IBM_ETUNALI">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Associate_Organization"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Associate_Organization(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		//var organizationName = psInputs.GetProperty(&quot;organizationName&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		var organization = Inputs.GetProperty(&quot;organization&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Id&quot;);
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		//bcEmployee.ActivateField(&quot;Primary Organization Id&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
			var organizationMVGBC = bcEmployee.GetMVGBusComp(&quot;Organization&quot;);
			var organizationAssocBC = organizationMVGBC.GetAssocBusComp();
			organizationAssocBC.ActivateField(&quot;Name&quot;);
			organizationAssocBC.SetSearchExpr(&quot;[Name] = &apos;&quot;+organization+&quot;&apos;&quot;);
			organizationAssocBC.ExecuteQuery(ForwardOnly);
			if (organizationAssocBC.FirstRecord())
			{
				organizationAssocBC.Associate(NewBefore);
				bcEmployee.WriteRecord();
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Organization not found&quot;);
			}
		}
		else
		{
  			psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
		}
	}
	catch(e)
	{
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		boEmployee = null;
		bcEmployee = null;
		organizationMVGBC = null;
		organizationAssocBC = null;
	}	
}"
			   SEQUENCE="1"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Associate_Position"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Associate_Position(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		var positionId = psInputs.GetProperty(&quot;positionId&quot;);
		var primaryFlag = psInputs.GetProperty(&quot;isPrimary&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Id&quot;);
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.ActivateField(&quot;Primary Position Id&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
			var positionMVGBC = bcEmployee.GetMVGBusComp(&quot;Position&quot;);
			var positionAssocBC = positionMVGBC.GetAssocBusComp();
			positionAssocBC.ActivateField(&quot;Id&quot;);
			positionAssocBC.SetSearchSpec(&quot;Id&quot;, positionId);
			positionAssocBC.ExecuteQuery(ForwardOnly);
			if (positionAssocBC.FirstRecord())
			{
				positionAssocBC.Associate(NewBefore);
				if(primaryFlag==&quot;Y&quot;)
				{ 
					var primaryPos = positionAssocBC.GetFieldValue(&quot;Id&quot;);
					bcEmployee.SetFieldValue(&quot;Primary Position Id&quot;, primaryPos);
					bcEmployee.WriteRecord();
				}
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Position not found&quot;);
			}
		}
		else
		{
  			psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
		}
	}
	catch(e)
	{	
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		positionId = null;
		primaryFlag = null;
		boEmployee = null;
		bcEmployee = null;
		positionMVGBC = null;
		positionAssocBC = null;
		primaryPos = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Associate_Resp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Associate_Resp(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		var primaryFlag = psInputs.GetProperty(&quot;isPrimary&quot;);
		var responsibilityId = psInputs.GetProperty(&quot;responsibilityId&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.ActivateField(&quot;Responsibility&quot;);
		bcEmployee.ActivateField(&quot;Primary Responsibility Id&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
		 	//Associate Responsibility to Employee
			var responsibilityMVGBC = bcEmployee.GetMVGBusComp(&quot;Responsibility&quot;);
			responsibilityMVGBC.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
			var responsibilityAssocBC = responsibilityMVGBC.GetAssocBusComp();
			responsibilityAssocBC.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
			responsibilityAssocBC.SetSearchExpr(&quot;[Id] = &apos;&quot;+responsibilityId+&quot;&apos;&quot;);
			responsibilityAssocBC.ExecuteQuery(ForwardOnly);
			if (responsibilityAssocBC.FirstRecord())
			{
				/* Add New Responsibility*/
				var primaryResp = responsibilityAssocBC.GetFieldValue(&quot;Id&quot;);
				responsibilityAssocBC.Associate(NewBefore);
				/*Update Primary Responsibility i requested*/
				if(primaryFlag==&quot;Y&quot;)
				{
					bcEmployee.SetFieldValue(&quot;Primary Responsibility Id&quot;, primaryResp);
					bcEmployee.WriteRecord();
					psOutputs.SetProperty(&quot;Output&quot;,primaryResp);
				}
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Responsibility not found&quot;);
			}
		}
		else
		{
  			psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
		}
	}
	catch(e)
	{
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		responsibilityId = null;
		primaryFlag = null;
		boEmployee = null;
		bcEmployee = null;
		responsibilityMVGBC = null;
		responsibilityAssocBC = null;
		primaryResp = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Associate_Sales_Team"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Associate_Sales_Team(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		var shopId = psInputs.GetProperty(&quot;shopId&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.ActivateField(&quot;Primary Sales Rep Id&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
			var salesTeamMVGBC = bcEmployee.GetMVGBusComp(&quot;Sales Team&quot;);
			var salesTeamAssocBC = salesTeamMVGBC.GetAssocBusComp();
			salesTeamAssocBC.ActivateField(&quot;Name&quot;);
			salesTeamAssocBC.SetSearchExpr(&quot;[Name] = &apos;&quot;+shopId+&quot;&apos;&quot;);
			salesTeamAssocBC.ExecuteQuery(ForwardOnly);
			if (salesTeamAssocBC.FirstRecord())
			{
				var primarySalesTeam = salesTeamAssocBC.GetFieldValue(&quot;Id&quot;);
				salesTeamAssocBC.Associate(NewBefore);
				bcEmployee.SetFieldValue(&quot;Primary Sales Rep Id&quot;, primarySalesTeam);
				bcEmployee.WriteRecord();
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Sales Team not found&quot;);
			}
		}
		else
		{
			psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
		}
	}
	catch(e)
	{
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		shopId = null;
		boEmployee = null;
		bcEmployee = null;
		salesTeamMVGBC = null;
		salesTeamAssocBC = null;
		primarySalesTeam = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="05/14/2018 15:37:29"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:29"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Deassociate_Position"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Deassociate_Position(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		var positonId = psInputs.GetProperty(&quot;positonId&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
			var positionMVGBC = bcEmployee.GetMVGBusComp(&quot;Position&quot;);
			positionMVGBC.ActivateField(&quot;Id&quot;);
			positionMVGBC.SetSearchSpec(&quot;Id&quot;, positonId);
			positionMVGBC.ExecuteQuery(ForwardOnly);
			if (positionMVGBC.FirstRecord())
			{
				positionMVGBC.DeleteRecord();
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Position not found&quot;);
			}
		}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
			}
	}
	catch(e)
	{
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		positonId = null;
		boEmployee = null;
		bcEmployee = null;
		positionMVGBC = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Deassociate_Resp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Deassociate_Resp(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		var responsibilityId = psInputs.GetProperty(&quot;responsibilityId&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
		 	//Associate Responsibility to Employee
			var responsibilityMVGBC = bcEmployee.GetMVGBusComp(&quot;Responsibility&quot;);
			responsibilityMVGBC.SetSearchExpr(&quot;[Id] = &apos;&quot;+responsibilityId+&quot;&apos;&quot;);
			responsibilityMVGBC.ExecuteQuery(ForwardOnly);
			if (responsibilityMVGBC.FirstRecord())
			{
				/* Remove Responsibility*/
				responsibilityMVGBC.DeleteRecord();
				bcEmployee.SetFieldValue(&quot;Primary Responsibility Id&quot;,&quot;&quot;);
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Responsibility not found&quot;);
			}
		}
		else
		{
  			psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
		}
	}
	catch(e)
	{
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		responsibilityId = null;
		boEmployee = null;
		bcEmployee = null;
		responsibilityMVGBC = null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Insert_Employee"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Insert_Employee(Inputs, Outputs) 
{
    try 
    {	
		//Get employee info
		var userId = Inputs.GetProperty(&quot;userId&quot;);
		var firstName = Inputs.GetProperty(&quot;firstName&quot;);
		var lastName = Inputs.GetProperty(&quot;lastName&quot;);
		var employeeId = Inputs.GetProperty(&quot;employeeId&quot;);
		var jobTitle = Inputs.GetProperty(&quot;jobTitle&quot;);
		var shopId = Inputs.GetProperty(&quot;shopId&quot;);
		var shopName = Inputs.GetProperty(&quot;shopName&quot;);
		var orginatingDealerCode = Inputs.GetProperty(&quot;orginatingDealerCode&quot;);
		var cellPhone = Inputs.GetProperty(&quot;cellPhone&quot;);
		var dedicatedAgentIVRCode = Inputs.GetProperty(&quot;dedicatedAgentIVRCode&quot;);  
		var positionId = Inputs.GetProperty(&quot;positionId&quot;);
		var isPrimaryPosition = Inputs.GetProperty(&quot;isPrimaryPosition&quot;);
		var isPrimaryResp = Inputs.GetProperty(&quot;isPrimaryResp&quot;);
		var respId = Inputs.GetProperty(&quot;respId&quot;);    	          
        var organization = Inputs.GetProperty(&quot;organization&quot;);
		
        var In : PropertySet;
        var Out : PropertySet;
        In = TheApplication().NewPropertySet();
        Out = TheApplication().NewPropertySet();

        /* Create Employee */
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp   = boEmployee.GetBusComp(&quot;Employee&quot;);      
		bcEmployee.ActivateField(&quot;First Name&quot;);
		bcEmployee.ActivateField(&quot;Last Name&quot;);
		bcEmployee.ActivateField(&quot;Login Name&quot;); 
		bcEmployee.ActivateField(&quot;Employee ID&quot;);
		bcEmployee.ActivateField(&quot;Job Title&quot;);
		bcEmployee.ActivateField(&quot;Employee Type Code&quot;);
		bcEmployee.ActivateField(&quot;VF Dealer Code&quot;);
		bcEmployee.ActivateField(&quot;Cell Phone #&quot;);
		bcEmployee.ActivateField(&quot;VF Shop Id&quot;);
		bcEmployee.ActivateField(&quot;VF Shop Name&quot;);
		bcEmployee.ActivateField(&quot;Active&quot;);
		bcEmployee.ActivateField(&quot;User Flag&quot;);
		bcEmployee.ActivateField(&quot;Alias&quot;);
		bcEmployee.ActivateField(&quot;Primary Sales Rep Id&quot;);	

		bcEmployee.NewRecord(NewAfter);            

		bcEmployee.SetFieldValue(&quot;Login Name&quot;, userId);
		bcEmployee.SetFieldValue(&quot;First Name&quot;, firstName);
		bcEmployee.SetFieldValue(&quot;Last Name&quot;, lastName);
		bcEmployee.SetFieldValue(&quot;Employee ID&quot;, employeeId);
		bcEmployee.SetFieldValue(&quot;Job Title&quot;,jobTitle);
		bcEmployee.SetFieldValue(&quot;Employee Type Code&quot;,&quot;Employee&quot;);
		if (orginatingDealerCode !=&quot;&quot; &amp;&amp; orginatingDealerCode != null)
			bcEmployee.SetFieldValue(&quot;VF Dealer Code&quot;,orginatingDealerCode);
		bcEmployee.SetFieldValue(&quot;VF Shop Id&quot;,shopId);
		bcEmployee.SetFieldValue(&quot;VF Shop Name&quot;,shopName);
		bcEmployee.SetFieldValue(&quot;Active&quot;,&quot;Y&quot;);
		bcEmployee.SetFieldValue(&quot;User Flag&quot;,&quot;Y&quot;);

		/* Associate Organization to Employee */
		var organizationMVGBC = bcEmployee.GetMVGBusComp(&quot;Organization&quot;);
		var organizationAssocBC = organizationMVGBC.GetAssocBusComp();
		organizationAssocBC.ActivateField(&quot;Name&quot;);
		organizationAssocBC.SetSearchExpr(&quot;[Name] = &apos;&quot;+organization+&quot;&apos;&quot;);
		organizationAssocBC.ExecuteQuery(ForwardOnly);
		if (organizationAssocBC.FirstRecord())
		{
			organizationAssocBC.Associate(NewBefore);
		}
		else
		{
  			Outputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			Outputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			Outputs.SetProperty(&quot;Error Message&quot;,&quot;Organization not found&quot;);
		}
		
		/* Associate Position to Employee */
		/*var positionMVGBC = bcEmployee.GetMVGBusComp(&quot;Position&quot;);
		var positionAssocBC = positionMVGBC.GetAssocBusComp();
		positionAssocBC.SetSearchExpr(&quot;[Id] = &apos;&quot; + positionId + &quot;&apos;&quot;);
		positionAssocBC.ExecuteQuery(ForwardOnly);
		if (positionAssocBC.FirstRecord()) 
		{
			var primaryPosition = positionAssocBC.GetFieldValue(&quot;Id&quot;);
			positionAssocBC.Associate(NewBefore);
			if(isPrimaryPosition==&quot;Y&quot;)
				bcEmployee.SetFieldValue(&quot;Primary Position Id&quot;, primaryPosition);
		}
		else 
		{
			Outputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL-00003&quot;);		
			Outputs.SetProperty(&quot;Error Message&quot;,&quot;Error associating position to the Employee. Position not found.&quot;);
		}*/

 		/* Associate Sales Team to Employee (need to Originating Dealer Code pickapplet on PRM) */
		 //Just for Shops 
		var salesTeamMVGBC = bcEmployee.GetMVGBusComp(&quot;Sales Team&quot;);
		var salesTeamAssocBC = salesTeamMVGBC.GetAssocBusComp();
		salesTeamAssocBC.ActivateField(&quot;Name&quot;);
		salesTeamAssocBC.SetSearchExpr(&quot;[Name] = &apos;&quot;+shopId+&quot;&apos;&quot;);
		salesTeamAssocBC.ExecuteQuery(ForwardOnly);
		if (salesTeamAssocBC.FirstRecord()) 
		{
			var primarySalesTeam = salesTeamAssocBC.GetFieldValue(&quot;Id&quot;);
			salesTeamAssocBC.Associate(NewBefore);
			bcEmployee.SetFieldValue(&quot;Primary Sales Rep Id&quot;, primarySalesTeam);

		}
		else 
		{
			Outputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL-00003&quot;);		
			Outputs.SetProperty(&quot;Error Message&quot;,&quot;Error associating Sales Team to the Employee. Sales Team not found.&quot;);
		}

		/*var responsibilityMVGBC = bcEmployee.GetMVGBusComp(&quot;Responsibility&quot;);
		var responsibilityAssocBC = responsibilityMVGBC.GetAssocBusComp();
		responsibilityAssocBC.SetSearchExpr(&quot;[Id] = &apos;&quot; + respId + &quot;&apos;&quot;);
		responsibilityAssocBC.ExecuteQuery(ForwardOnly);
		if (responsibilityAssocBC.FirstRecord()) 
		{
			var primaryResp = responsibilityAssocBC.GetFieldValue(&quot;Id&quot;);
			responsibilityAssocBC.Associate(NewBefore);
			if(isPrimaryResp==&quot;Y&quot;)
				bcEmployee.SetFieldValue(&quot;Primary Responsibility Id&quot;, primaryResp);
		}
		else 
		{
			Outputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			Outputs.SetProperty(&quot;Error Code&quot;,&quot;SBL-00006&quot;);		
			Outputs.SetProperty(&quot;Error Message&quot;,&quot;Error associating responsibility to the employee. Invalid access type code.&quot;);
		}*/
		
		In.SetProperty(&quot;Login&quot;,userId);
		calcAlias(In,Out);
		var alias = Out.GetProperty(&quot;Alias&quot;);
		bcEmployee.SetFieldValue(&quot;Alias&quot;,alias);
		bcEmployee.WriteRecord();
		
		Outputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
		Outputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
    }
    catch (e) 
    {
  		Outputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		Outputs.SetProperty(&quot;Error Message&quot;,e.errText);
    } 
    finally 
    {
        firstName = null;
        lastName = null;
        employeeId = null;
        jobTitle = null;
        shopId = null;
        shopName = null;
		userId = null;
		orginatingDealerCode = null;
		In = null;
		Out = null;
		//positionAssocBC = null;
		//positionMVGBC = null;
		//responsibilityAssocBC = null;
		//responsibilityMVGBC = null;
		salesTeamAssocBC = null;
		salesTeamMVGBC = null;
		bcEmployee = null;
		boEmployee = null;
		alias = null;
		organizationMVGBC = null;
		organizationAssocBC = null;
    }
}
"
			   SEQUENCE="8"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Remove_Employee"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Remove_Employee(Inputs, Outputs) 
{
    try 
    {	
		//Get employee info
		var userId = Inputs.GetProperty(&quot;userId&quot;);   	          

        /* Update Employee */
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp   = boEmployee.GetBusComp(&quot;Employee&quot;);  
		bcEmployee.SetViewMode(AllView);
        bcEmployee.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
		
		bcEmployee.ClearToQuery();
		
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		
		bcEmployee.ActivateField(&quot;Active&quot;);
		bcEmployee.ActivateField(&quot;User Flag&quot;);
		
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		
		bcEmployee.ExecuteQuery(ForwardOnly);
	
		var empRec = bcEmployee.FirstRecord();
		
		if(empRec)
		{
		
				bcEmployee.SetFieldValue(&quot;Active&quot;,&quot;N&quot;);
				bcEmployee.SetFieldValue(&quot;User Flag&quot;,&quot;N&quot;);
				bcEmployee.WriteRecord();
		
		}

		
		Outputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
		
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);	
		
		Outputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
		
    }
    catch (e) 
    {
  		Outputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;Error Code&quot;,e.errCode);	
		Outputs.SetProperty(&quot;Error Message&quot;,e.errText);
    } 
    finally 
    {
		userId = null;
		empRec = null;
		bcEmployee = null;
		boEmployee = null;
    }
}"
			   SEQUENCE="9"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName:chars, Inputs:PropertySet, Outputs:PropertySet)
{
	switch (MethodName)
	{
		case &quot;Insert_Employee&quot;:
			Insert_Employee(Inputs, Outputs);
			break;
		case &quot;Remove_Employee&quot;:
			Remove_Employee(Inputs, Outputs);
			break;
		case &quot;Associate_Position&quot;:
			Associate_Position(Inputs, Outputs);
			break;
		case &quot;Associate_Resp&quot;:
			Associate_Resp(Inputs, Outputs);
			break;
		case &quot;Associate_Organization&quot;:
			Associate_Organization(Inputs, Outputs);
			break;
		case &quot;Associate_Sales_Team&quot;:
			Associate_Sales_Team(Inputs, Outputs);
			break;
		case &quot;Deassociate_Position&quot;:
			Deassociate_Position(Inputs, Outputs);
			break;
		case &quot;Deassociate_Resp&quot;:
			Deassociate_Resp(Inputs, Outputs);
			break;
		case &quot;Update_Primary_Resp&quot;:
			Update_Primary_Resp(Inputs, Outputs);
			break;
		case &quot;Update_Primary_Pos&quot;:
			Update_Primary_Pos(Inputs, Outputs);
			break;
		default:
			return (ContinueOperation);
	}
	
	return (CancelOperation);
}"
			   SEQUENCE="10"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Update_Primary_Pos"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Update_Primary_Pos(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		var positionId = psInputs.GetProperty(&quot;positionId&quot;);
		var primaryFlag = psInputs.GetProperty(&quot;isPrimary&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Id&quot;);
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.ActivateField(&quot;Primary Position Id&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
			var positionMVGBC = bcEmployee.GetMVGBusComp(&quot;Position&quot;);
			var positionAssocBC = positionMVGBC.GetAssocBusComp();
			positionAssocBC.ActivateField(&quot;Id&quot;);
			positionAssocBC.SetSearchSpec(&quot;Id&quot;, positionId);
			positionAssocBC.ExecuteQuery(ForwardOnly);
			if (positionAssocBC.FirstRecord())
			{
				if(primaryFlag==&quot;Y&quot;)
				{ 
					var primaryPos = positionAssocBC.GetFieldValue(&quot;Id&quot;);
					bcEmployee.SetFieldValue(&quot;Primary Position Id&quot;, primaryPos);
					bcEmployee.WriteRecord();
				}
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Position not found&quot;);
			}
		}
		else
		{
  			psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
		}
	}
	catch(e)
	{	
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		positionId = null;
		primaryFlag = null;
		boEmployee = null;
		bcEmployee = null;
		positionMVGBC = null;
		positionAssocBC = null;
		primaryPos = null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Update_Primary_Resp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Update_Primary_Resp(psInputs : PropertySet, psOutputs : PropertySet)
{
	try
	{
		var userId = psInputs.GetProperty(&quot;userId&quot;);
		var primaryFlag = psInputs.GetProperty(&quot;isPrimary&quot;);
		var responsibilityId = psInputs.GetProperty(&quot;responsibilityId&quot;);
		var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;Employee&quot;);
		bcEmployee.SetViewMode(AllView);
		bcEmployee.InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.ActivateField(&quot;Responsibility&quot;);
		bcEmployee.ActivateField(&quot;Primary Responsibility Id&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, userId);
		bcEmployee.ExecuteQuery(ForwardOnly);
		if(bcEmployee.FirstRecord())
		{
		 	//Associate Responsibility to Employee
			var responsibilityMVGBC = bcEmployee.GetMVGBusComp(&quot;Responsibility&quot;);
			var responsibilityAssocBC = responsibilityMVGBC.GetAssocBusComp();
			responsibilityAssocBC.SetSearchExpr(&quot;[Id] = &apos;&quot;+responsibilityId+&quot;&apos;&quot;);
			responsibilityAssocBC.ExecuteQuery(ForwardOnly);
			if (responsibilityAssocBC.FirstRecord())
			{
				/* Add New Responsibility*/
				var primaryResp = responsibilityAssocBC.GetFieldValue(&quot;Id&quot;);
				/*Update Primary Responsibility i requested*/
				if(primaryFlag==&quot;Y&quot;)
				{
					bcEmployee.SetFieldValue(&quot;Primary Responsibility Id&quot;, primaryResp);
					bcEmployee.WriteRecord();
					psOutputs.SetProperty(&quot;Output&quot;,primaryResp);
				}
				psOutputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Success&quot;);
			}
			else
			{
  				psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
				psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Responsibility not found&quot;);
			}
		}
		else
		{
  			psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Code&quot;,&quot;1&quot;);		
			psOutputs.SetProperty(&quot;Error Message&quot;,&quot;Employee not found&quot;);
		}
	}
	catch(e)
	{
  		psOutputs.SetProperty(&quot;Status Code&quot;,&quot;1&quot;);
		psOutputs.SetProperty(&quot;Error Code&quot;,e.errCode);		
		psOutputs.SetProperty(&quot;Error Message&quot;,e.errText);
	}
	finally
	{
		userId = null;
		responsibilityId = null;
		primaryFlag = null;
		boEmployee = null;
		bcEmployee = null;
		responsibilityMVGBC = null;
		responsibilityAssocBC = null;
		primaryResp = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="calcAlias"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function calcAlias(Inputs,Outputs)
{
	var Login = Inputs.GetProperty(&quot;Login&quot;);
	var UnderscLogin1 = Login.substr(0,Login.indexOf(&quot;_&quot;));
		UnderscLogin1 = UnderscLogin1.toLowerCase();
	var UnderscLogin2 = Login.substr(Login.indexOf(&quot;_&quot;)+1,Login.length);
		UnderscLogin2 = UnderscLogin2.toLowerCase();
	
	var LowLogin = Login.toLowerCase();
	
	if(UnderscLogin1 != &quot;&quot; &amp;&amp; UnderscLogin1 != null){ //login with _
	
		LowLogin = UnderscLogin1 + &quot; &quot; + UnderscLogin2;
	
	}
	
	Outputs.SetProperty(&quot;Alias&quot;,LowLogin);
	return;
}"
			   SEQUENCE="5"
			   UPDATED="05/14/2018 15:37:30"
			   UPDATED_BY="IBM_ETUNALI"
			   CREATED="05/14/2018 15:37:30"
			   CREATED_BY="IBM_ETUNALI">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



