<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF SR Creation"
	   UI_FREEZE="N"
	   UPDATED="02/17/2017 10:53:44"
	   UPDATED_BY="IMARTINS"
	   CREATED="05/23/2011 19:47:20"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Mobile Signature Validation BS"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="02/17/2017 10:36:42"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="IMARTINS"
		   UPDATED="02/17/2017 10:53:44"
		   UPDATED_BY="IMARTINS"
		   CREATED="05/06/2013 11:22:40"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Mobile Signature Validation BS"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="05/06/2013 11:23:19"
			   UPDATED_BY="SADMIN"
			   CREATED="05/06/2013 11:23:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckContact"
			   UPDATED="05/28/2013 21:00:48"
			   UPDATED_BY="SADMIN"
			   CREATED="05/28/2013 21:00:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMS"
			   UPDATED="07/10/2013 20:39:37"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 14:41:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Asset Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/22/2013 14:41:35"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 14:41:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 14:42:48"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 14:41:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 14:42:51"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 14:42:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/22/2013 14:42:08"
				   UPDATED_BY="SADMIN"
				   CREATED="05/22/2013 14:42:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF GSM No"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/10/2013 20:39:37"
				   UPDATED_BY="SADMIN"
				   CREATED="07/10/2013 20:39:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Request_Validation"
			   UPDATED="06/25/2013 20:31:20"
			   UPDATED_BY="SADMIN"
			   CREATED="06/25/2013 20:31:20"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/25/2013 20:31:20"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2013 20:31:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="GSM"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/25/2013 20:31:20"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2013 20:31:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TCKN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/25/2013 20:31:20"
				   UPDATED_BY="SADMIN"
				   CREATED="06/25/2013 20:31:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckContact"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckContact(Inputs, Outputs){
	try
	{
		var SRBOAcc 	:BusObject	= TheApplication().GetBusObject(&quot;Account&quot;);
		var SRMobileBC 	:BusComp	= SRBOAcc.GetBusComp(&quot;VF Mobile Signature Task BC&quot;);
		var strContactId = Inputs.GetProperty(&quot;Contact Id&quot;);
		var strAccountId = Inputs.GetProperty(&quot;Account Id&quot;);
		var svc = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var Input = TheApplication().NewPropertySet();
		var Output = TheApplication().NewPropertySet();
		var strMSISDN = &quot;&quot;;	
		var today = new Date();
		
		//VFTRCBU WA#43 - Start - Changed to verify the billing account address
		var aBillingId  = new Array();
		var aAccountId  = new Array();
		var iChild = Inputs.GetChildCount();
		var strContactId2 = &quot;&quot;;

		for (var i = 0; i &lt; iChild; i++) {
			aBillingId[i] = Inputs.GetChild(i).GetProperty(&quot;BillingId&quot;);
			aAccountId[i] = Inputs.GetChild(i).GetProperty(&quot;AccountId&quot;);
		}
		if(aBillingId.length &gt; 0)
		{
			for (var j = 0; j &lt; aBillingId.length; j++) {
				SRMobileBC.ClearToQuery ();
				SRMobileBC.ActivateField(&quot;VF MSISDN&quot;);
				SRMobileBC.SetViewMode (AllView);
				
				if(strContactId != &quot;&quot;)
					SRMobileBC.SetSearchSpec(&quot;Primary Contact Id&quot;,strContactId);
				if(aBillingId[j] != &quot;&quot;)
					SRMobileBC.SetSearchSpec(&quot;Billing Account Id&quot;,aBillingId[j]);
				if(aAccountId[j] != &quot;&quot;)
					SRMobileBC.SetSearchSpec(&quot;Customer Id&quot;,aAccountId[j]);
								
				SRMobileBC.ExecuteQuery (ForwardOnly);
				if(SRMobileBC.FirstRecord())
				{
					Input.Reset();
					strMSISDN = SRMobileBC.GetFieldValue(&quot;VF MSISDN&quot;);			
					Input.SetProperty(&quot;ProcessName&quot;, &quot;VF SET MS STATUS WF&quot;);
					Input.SetProperty(&quot;ACTION&quot;, &quot;InfoChange&quot;);
					Input.SetProperty(&quot;TRANSACTIONID&quot;, today.toSystem());
					Input.SetProperty(&quot;BillingId&quot;, aBillingId[j]);
					if(strContactId == &quot;&quot;){
						strContactId2 = SRMobileBC.GetFieldValue(&quot;Primary Contact Id&quot;);
						Input.SetProperty(&quot;ContactId&quot;, strContactId2);
					} 
					else
						Input.SetProperty(&quot;ContactId&quot;, strContactId);
						
					svc.InvokeMethod(&quot;RunProcess&quot;, Input, Output);
				}
			}
		}
		else
		{
			SRMobileBC.ClearToQuery ();
			SRMobileBC.ActivateField(&quot;VF MSISDN&quot;);
			SRMobileBC.SetViewMode (AllView);
			
			if(strContactId != &quot;&quot;) //VFTRCBU WA#43
				SRMobileBC.SetSearchSpec(&quot;Primary Contact Id&quot;,strContactId);
			if(strAccountId != &quot;&quot;) //VFTRCBU WA#43
				SRMobileBC.SetSearchSpec(&quot;Customer Id&quot;,strAccountId);
								
			SRMobileBC.ExecuteQuery (ForwardOnly);
			if(SRMobileBC.FirstRecord())
			{
				strMSISDN = SRMobileBC.GetFieldValue(&quot;VF MSISDN&quot;);			
				Input.SetProperty(&quot;ProcessName&quot;, &quot;VF SET MS STATUS WF&quot;);
			  //Input.SetProperty(&quot;MobSigId&quot;, strMSISDN);
				Input.SetProperty(&quot;ACTION&quot;, &quot;InfoChange&quot;);
				Input.SetProperty(&quot;TRANSACTIONID&quot;, today.toSystem());
				strContactId = SRMobileBC.GetFieldValue(&quot;Primary Contact Id&quot;);
				Input.SetProperty(&quot;ContactId&quot;, strContactId);
				svc.InvokeMethod(&quot;RunProcess&quot;, Input, Output);
			}
		} //VFTRCBU WA#43 - End
	}
	finally
	{
		SRMobileBC = null;
		SRBOAcc = null;
		aBillingId = null;
		aAccountId = null;
		svc = null;
		Input = null;
		Output = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="03/17/2015 13:56:22"
			   UPDATED_BY="HRODRIGUES"
			   CREATED="05/28/2013 21:00:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMS(Inputs, Outputs){
	try{

		var AssetId = Inputs.GetProperty(&quot;Asset Id&quot;);
		var strGSMNo = Inputs.GetProperty(&quot;VF GSM No&quot;);

		var oBOAsset = TheApplication().GetBusObject(&quot;Asset Management - Complex&quot;);
		var oBCMSISDN = oBOAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
		var oBCMS = oBOAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);
		var oBOSR = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var oBCSR = oBOSR.GetBusComp(&quot;Service Request&quot;);
		
		var cActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var cSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Suspended&quot;);
		var cRequestPending = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_SUB_STATUS&quot;, &quot;Request Pending&quot;);
		var cRequest = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_SUB_STATUS&quot;, &quot;Request&quot;);
		var cOpen =	TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		var cInProgress =	TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		
		with(oBCMSISDN)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Product Part Number&quot;);
			//VFTRCBU WA#43 - HRODRIGUES -Changed to validate Mobile Signature CBU Product
			//SetSearchExpr(&quot;[Id] = &apos;&quot;+AssetId+&quot;&apos; AND [Status] = &apos;&quot;+cActive + &quot;&apos; AND [Product Part Number] = &apos;1000&apos;&quot;);
			SetSearchExpr(&quot;[Id] = &apos;&quot;+AssetId+&quot;&apos; AND [Status] = &apos;&quot;+cActive + &quot;&apos; AND ([Product Part Number] = &apos;1000&apos; OR [Product Part Number] = &apos;70000&apos;)&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				with(oBCMS)
				{
					SetViewMode(AllView);
					ActivateField(&quot;Status&quot;);
					ActivateField(&quot;Product Part Number&quot;);
					//VFTRCBU WA#43 - HRODRIGUES -Changed to validate Mobile Signature CBU Product
					//SetSearchExpr(&quot;([Status] = &apos;&quot; + cActive + &quot;&apos; OR [Status] = &apos;&quot; + cSuspended + &quot;&apos;) AND [Product Part Number] = &apos;9069&apos;&quot;);
					SetSearchExpr(&quot;([Status] = &apos;&quot; + cActive + &quot;&apos; OR [Status] = &apos;&quot; + cSuspended + &quot;&apos;) AND ([Product Part Number] = &apos;9069&apos; OR [Product Part Number] = &apos;70249&apos;)&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord()){
						Outputs.SetProperty(&quot;Error Code&quot;, &quot;SBL-003&quot;);
			 			Outputs.SetProperty(&quot;Error Message&quot;, &quot;The subscriber is using Mobile Signature service.&quot;);
			 			Outputs.SetProperty(&quot;Status Code&quot;, &quot;1&quot;);
					}
					else
					{
					 	with(oBCSR)
					 	{
					 		SetViewMode(AllView);
					 		ActivateField(&quot;Status&quot;);
							ActivateField(&quot;Sub-Status&quot;);
							ActivateField(&quot;VF Customer GSM Id&quot;);
							SetSearchExpr(&quot;[VF Customer GSM Id] = &apos;&quot;+AssetId+&quot;&apos; AND([Status] = &apos;&quot; + cOpen + &quot;&apos; OR [Status] = &apos;&quot; + cInProgress + &quot;&apos;) AND ([Sub-Status] = &apos;&quot; + cRequestPending + &quot;&apos; OR [Sub-Status] = &apos;&quot; + cRequest + &quot;&apos;)&quot;);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								Outputs.SetProperty(&quot;Error Code&quot;, &quot;SBL-004&quot;);
			 					Outputs.SetProperty(&quot;Error Message&quot;, &quot;The subscriber has already applied to mobile signature.&quot;);
			 					Outputs.SetProperty(&quot;Status Code&quot;, &quot;1&quot;);
							}
							else
							{
								Outputs.SetProperty(&quot;Error Code&quot;, &quot;&quot;);
			 					Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);
			 					Outputs.SetProperty(&quot;Status Code&quot;, &quot;0&quot;);
							
								var strSRClose = &quot;[VF Customer GSM] = &apos;&quot;+strGSMNo+&quot;&apos; AND ([Status]=&apos;Open&apos; OR [Status]=&apos;In Progress&apos;) AND [Sub-Status]=&apos;Pre-Request&apos;&quot;;
								ClearToQuery ();
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;Sub-Status&quot;);
								SetViewMode (AllView);
								SetSearchExpr(strSRClose);	
								SetSortSpec(&quot;Created(ASCENDING)&quot;)
								ExecuteQuery (ForwardBackward);
								if(FirstRecord())
									{
										SetFieldValue(&quot;Status&quot;, &quot;Closed&quot;);				
										SetFieldValue(&quot;Sub-Status&quot;, &quot;Pre-Request Cancelled&quot;);	
										WriteRecord();
									}
							}		
					 	}
					}
				}
			}
			else
			{
				SetViewMode(AllView);
				ActivateField(&quot;Product Part Number&quot;);
				//VFTRCBU WA#43 - HRODRIGUES -Changed to validate Mobile Signature CBU Product
				//SetSearchExpr(&quot;[Id] = &apos;&quot;+AssetId+&quot;&apos; AND [Product Part Number] = &apos;1000&apos;&quot;);
				SetSearchExpr(&quot;[Id] = &apos;&quot;+AssetId+&quot;&apos; AND ([Product Part Number] = &apos;1000&apos; OR [Product Part Number] = &apos;70000&apos;)&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
				 	Outputs.SetProperty(&quot;Error Code&quot;, &quot;SBL-002&quot;);
				 	Outputs.SetProperty(&quot;Error Message&quot;, &quot;The status of the line must be Active&quot;);
				 	Outputs.SetProperty(&quot;Status Code&quot;, &quot;1&quot;);
				 }								
				else
				{
				 	Outputs.SetProperty(&quot;Error Code&quot;, &quot;SBL-002&quot;);
				 	Outputs.SetProperty(&quot;Error Message&quot;, &quot;Subscriber is not found in Siebel&quot;);
				 	Outputs.SetProperty(&quot;Status Code&quot;, &quot;1&quot;);
				}
			}
		}
	}
	finally{
		oBOAsset = null;
		oBCMSISDN = null;
		oBCMS = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="03/20/2015 13:43:11"
			   UPDATED_BY="HRODRIGUES"
			   CREATED="05/22/2013 14:46:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Pre_Request_Validation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Pre_Request_Validation(Inputs, Outputs) {
	try {
		var SRBOPar : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var SRBCPar : BusComp = SRBOPar.GetBusComp(&quot;ACS NI Parameter&quot;);
		var SRBOAsset : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var SRBCAsset : BusComp = SRBOAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);
		var SRBCMobile : BusComp = SRBOAsset.GetBusComp(&quot;VF Mobile Signature Task BC&quot;);
		//var SRBCRequest : BusComp = SRBOAsset.GetBusComp(&quot;Service Request&quot;);
		var SRBCRequest : BusComp = SRBOAsset.GetBusComp(&quot;VF Service Request Performance&quot;);
		var strSubStatus = Inputs.GetProperty(&quot;Sub-Status&quot;);
		var sEmail = Inputs.GetProperty(&quot;Email Address&quot;);
		var strType = Inputs.GetProperty(&quot;Type&quot;);
		var strArea = Inputs.GetProperty(&quot;Area&quot;);
		var strSubArea = Inputs.GetProperty(&quot;Sub-Area&quot;);
		var GSM = Inputs.GetProperty(&quot;GSM&quot;);
		var TCKN = Inputs.GetProperty(&quot;TCKN&quot;);
		var strId = Inputs.GetProperty(&quot;Id&quot;);
		var strPosition = TheApplication().GetProfileAttr(&quot;Position&quot;);
		SRBCPar.ClearToQuery();
		SRBCPar.SetViewMode(AllView);
		SRBCPar.SetSearchSpec(&quot;Function&quot;, &quot;VF_SR_CHECK_POSITION&quot;);
		SRBCPar.SetSearchSpec(&quot;Name&quot;, strType);
		SRBCPar.SetSearchSpec(&quot;Value&quot;, strArea);
		SRBCPar.SetSearchSpec(&quot;Condition1&quot;, strSubArea);
		SRBCPar.ExecuteQuery(ForwardOnly);
		if (SRBCPar.FirstRecord()) {
			SRBCPar.ClearToQuery();
			SRBCPar.SetViewMode(AllView);
			SRBCPar.SetSearchSpec(&quot;Function&quot;, &quot;VF_SR_CHECK_POSITION&quot;);
			SRBCPar.SetSearchSpec(&quot;Name&quot;, strType);
			SRBCPar.SetSearchSpec(&quot;Value&quot;, strArea);
			SRBCPar.SetSearchSpec(&quot;Condition1&quot;, strSubArea);
			SRBCPar.SetSearchSpec(&quot;Condition2&quot;, strPosition);
			SRBCPar.ExecuteQuery(ForwardOnly);
			if (!SRBCPar.FirstRecord()) {
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_002&quot;));
			}
		}
		/*if(sEmail == &quot;&quot;)
		TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;CR249_01&quot;));
		 */
		if (sEmail != &quot;&quot;) {
			var sCheckEmail = TheApplication().GetService(&quot;VF SR Send SMS Email BS&quot;);
			var psInput = TheApplication().NewPropertySet();
			var psOuput = TheApplication().NewPropertySet();
			psInput.SetProperty(&quot;Address&quot;, sEmail);
			sCheckEmail.InvokeMethod(&quot;CheckAddress&quot;, psInput, psOuput);
			if (psOuput.GetProperty(&quot;Error&quot;) == 1)
			{
				Outputs.SetProperty(&quot;ErrorCode&quot;, psOuput.GetProperty(&quot;Error&quot;));//PSANTOS VFTRCBU-26920
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;090&quot;));
			}

		}
		if (GSM == &quot;&quot; || TCKN == &quot;&quot;) {
			var strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;CR249_01&quot;);
			TheApplication().RaiseErrorText(strErrorMsg);
		}

		SRBCAsset.ClearToQuery();
		SRBCAsset.SetViewMode(AllView);
		SRBCAsset.SetSearchSpec(&quot;Serial Number&quot;, GSM);
		SRBCAsset.SetSearchSpec(&quot;Status&quot;, &quot;Active&quot;)
		SRBCAsset.ExecuteQuery(ForwardOnly);
		if (!SRBCAsset.FirstRecord()) {
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_001&quot;));
		}

		var strSRMobileSrcExpr = &quot;[VF MSISDN] = &apos;&quot; + GSM + &quot;&apos; AND ([VF MS Product Status]=&apos;Active&apos; OR [VF MS Product Status]=&apos;Suspended&apos;)&quot;;
		SRBCMobile.ClearToQuery();
		SRBCMobile.SetViewMode(AllView);
		SRBCMobile.SetSearchExpr(strSRMobileSrcExpr);
		SRBCMobile.ExecuteQuery(ForwardOnly);
		if (SRBCMobile.FirstRecord()) {
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_003&quot;));
		}

		var strSRSrcExpr = &quot;[VF Customer GSM] = &apos;&quot; + GSM + &quot;&apos; AND ([Status]=&apos;Open&apos; OR [Status]=&apos;In Progress&apos;) AND [Sub-Status]=&apos;Request&apos;&quot;;
		SRBCRequest.ClearToQuery();
		SRBCRequest.SetViewMode(AllView);
		SRBCRequest.SetSearchExpr(strSRSrcExpr);
		SRBCRequest.ExecuteQuery(ForwardOnly);
		if (SRBCRequest.FirstRecord()) {
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_003&quot;));
		}
		var strSRClose = &quot;[VF Customer GSM] = &apos;&quot; + GSM + &quot;&apos; AND ([Status]=&apos;Open&apos; OR [Status]=&apos;In Progress&apos;) AND [Sub-Status]=&apos;Pre-Request&apos; AND [Id] &lt;&gt; &apos;&quot; + strId + &quot;&apos;&quot;;
		SRBCRequest.ClearToQuery();
		SRBCRequest.ActivateField(&quot;Status&quot;);
		SRBCRequest.ActivateField(&quot;Sub-Status&quot;);
		SRBCRequest.SetViewMode(AllView);
		SRBCRequest.SetSearchExpr(strSRClose);
		//ACAMBAS: VFTRCBU-24960 - Start
		//SRBCRequest.SetSortSpec(&quot;Created(ASCENDING)&quot;)
		//SRBCRequest.ExecuteQuery(ForwardBackward);
		SRBCRequest.ExecuteQuery(ForwardOnly);
		
		//var count:Number  = SRBCRequest.CountRecords();
		
		//if (count &gt; 0) {
			var bHasRecord = SRBCRequest.FirstRecord();
			
			while(bHasRecord) {
				//var test = SRBCRequest.GetFieldValue(&quot;Id&quot;);
				//ACAMBAS: VFTRCBU-24960 - End
				SRBCRequest.SetFieldValue(&quot;Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Closed&quot;));
				SRBCRequest.SetFieldValue(&quot;Sub-Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_SUB_STATUS&quot;, &quot;Pre-Request Cancelled&quot;));			
				SRBCRequest.WriteRecord();
				bHasRecord = SRBCRequest.NextRecord();	//ACAMBAS: VFTRCBU-24960
			}
		//}
	}	
	finally {
		SRBCPar = null;
		SRBOPar = null;
		SRBCRequest = null;
		SRBCMobile = null;
		SRBCAsset = null;
		SRBOAsset = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="03/22/2016 22:17:03"
			   UPDATED_BY="PSANTOS"
			   CREATED="05/28/2013 21:00:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Request_Validation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Request_Validation(Inputs, Outputs) {
	try {

		var svc : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var ValidationBS : Service = TheApplication().GetService(&quot;VF Falcon Rules&quot;);
		var Input : PropertySet = TheApplication().NewPropertySet();
		var Output : PropertySet = TheApplication().NewPropertySet();
		var accountBO : BusObject = TheApplication().GetBusObject(&quot;Asset Management - Complex&quot;);
		var accountBC : BusComp = accountBO.GetBusComp(&quot;Asset Mgmt - Asset&quot;);
		var BCBillAccnt : BusComp = accountBO.GetBusComp(&quot;Billing Account&quot;); //VFTRCBU WA#43
		var accountPrBC : BusComp = accountBO.GetBusComp(&quot;Account&quot;);
		var strAccountId = Inputs.GetProperty(&quot;Account Code&quot;);
		var strGSM = Inputs.GetProperty(&quot;GSM&quot;);
		var strTCKN = Inputs.GetProperty(&quot;TCKN&quot;);
		var strMail = Inputs.GetProperty(&quot;MailAddress&quot;);
		var ContactId = &quot;&quot;;
		var strMernisStatus = &quot;&quot;;
		var strContactTCID = &quot;&quot;;
		var strCustomerCode = &quot;&quot;;
		var strStatus = &quot;&quot;;
		var strSimType = &quot;&quot;;
		var strCity = &quot;&quot;;
		var strHomePhNum = &quot;&quot;;
		var strWorkPhNum = &quot;&quot;;
		var i,
		j = &quot;&quot;;
		with (accountPrBC) {
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;CSN&quot;);
			ActivateField(&quot;Primary Contact Id&quot;);
			var searchCustomerExpr = &quot;[CSN] = &apos;&quot; + strAccountId + &quot;&apos;&quot;;
			SetSearchExpr(searchCustomerExpr);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()) {
				var PRContactId = GetFieldValue(&quot;Primary Contact Id&quot;);
				Input.SetProperty(&quot;ProcessName&quot;, &quot;VF Black Grey List&quot;);
				Input.SetProperty(&quot;Primary Contact Id&quot;, PRContactId);
				Input.SetProperty(&quot;ListType&quot;, &quot;All&quot;);
				svc.InvokeMethod(&quot;RunProcess&quot;, Input, Output);
				var ErrorCode = Output.GetProperty(&quot;Error Code&quot;);
				if (ErrorCode != &quot;VFTK-BLINQ-0000&quot;) {
					TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;DEF-2883-1&quot;));
				}
			}
		}

		with (accountBC) {
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Owner Contact Id&quot;);
			ActivateField(&quot;Owner Account Code&quot;);
			ActivateField(&quot;Mernis Status&quot;);
			ActivateField(&quot;VF TC ID Contact&quot;);
			ActivateField(&quot;VF Home Phone Num&quot;);
			ActivateField(&quot;VF Work Phone Num&quot;);
			//ActivateField(&quot;Account Primary City&quot;); VFTRCBU WA#43
			ActivateField(&quot;CSN&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;VF SIM Type&quot;);
			ActivateField(&quot;Owner Account Id&quot;);
			SetSearchSpec(&quot;Serial Number&quot;, strGSM);
			SetSearchSpec(&quot;Status&quot;, &quot;Active&quot;);
			SetSearchSpec(&quot;Owner Account Code&quot;, strAccountId);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()) {
				var Customer_ID = GetFieldValue(&quot;Owner Account Id&quot;);
				strStatus = GetFieldValue(&quot;Status&quot;);
				strSimType = GetFieldValue(&quot;VF SIM Type&quot;);
				ContactId = GetFieldValue(&quot;Owner Contact Id&quot;);
				strMernisStatus = GetFieldValue(&quot;Mernis Status&quot;);
				strContactTCID = GetFieldValue(&quot;VF TC ID Contact&quot;);
				strHomePhNum = GetFieldValue(&quot;VF Home Phone Num&quot;);
				strWorkPhNum = GetFieldValue(&quot;VF Work Phone Num&quot;);
				/*VFTRCBU WA#43 - Start
				strCity = GetFieldValue(&quot;Account Primary City&quot;); */
				var BillingAccountId = GetFieldValue(&quot;Billing Account Id&quot;);
				
				with (BCBillAccnt) {
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Bill To City&quot;);
					SetSearchSpec(&quot;Id&quot;, BillingAccountId);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord()) {
						strCity = GetFieldValue(&quot;Bill To City&quot;);
					}
				}
				//VFTRCBU WA#43 - End
				
				if ((ContactId != &quot;&quot;) &amp;&amp; (ContactId != &quot;No Match Row Id&quot;) &amp;&amp; (ContactId != &quot;null&quot;)) {
					Input.SetProperty(&quot;ProcessName&quot;, &quot;VF Cep Aran Inquiry WF&quot;);
					Input.SetProperty(&quot;Primary Contact Id&quot;, ContactId);
					Input.SetProperty(&quot;SIEBEL_CUSTOMER_ID&quot;, strAccountId);
					svc.InvokeMethod(&quot;RunProcess&quot;, Input, Output);
					var errorCode = Output.GetProperty(&quot;Error Code&quot;);
					var errorDescription = Output.GetProperty(&quot;Error Message&quot;);
					var StatusCodeCP = Output.GetProperty(&quot;Status Code&quot;);
					if (errorCode != &quot;VFTK-BLINQ-0000&quot;) {
						for (i = 0; i &lt; Output.GetChildCount(); i++) { //modified for WA#22_d2
							Output = Output.GetChild(i).GetChild(0).GetChild(0);
							if (Output.GetType() == &quot;SiebelGetBlackListResponse_v2&quot;) {
								var GSMCepAran = Output.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
								if (GSMCepAran.GetChildCount() &gt; 0) {
									for (j = 0; j &lt; GSMCepAran.GetChildCount(); j++) {
										GSMCepAran = GSMCepAran.GetChild(j).GetProperty(&quot;MSISDN&quot;)
											if (GSMCepAran == strGSM) {
												TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
												TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;DEF-2883-2&quot;));
											}
									}
								}
								break;
							}
						}
					}
					Input.SetProperty(&quot;ProcessName&quot;, &quot;VF CC Black Grey List&quot;);
					Input.SetProperty(&quot;SiebelCust_ID&quot;, Customer_ID);
					Input.SetProperty(&quot;BGTransaction&quot;, &quot;N&quot;);
					svc.InvokeMethod(&quot;RunProcess&quot;, Input, Output);
					var errorCodeCC = Output.GetProperty(&quot;Error Code&quot;);
					if (errorCodeCC != &quot;VFTK-BLINQ-0000&quot;) {
						for (i = 0; i &lt; Output.GetChildCount(); i++) { //modified for WA#22_d2
							Output = Output.GetChild(i).GetChild(0).GetChild(0);
							if (Output.GetType() == &quot;SiebelGetBlackListResponse_v2&quot;) {
								GSMCepAran = Output.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
								if (GSMCepAran.GetChildCount() &gt; 0) {
									for (j = 0; j &lt; GSMCepAran.GetChildCount(); j++) {
										GSMCepAran = GSMCepAran.GetChild(j).GetProperty(&quot;MSISDN&quot;)
											if (GSMCepAran == strGSM) {
												TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
												TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;DEF-2883-3&quot;));
											}
									}
								}
								break;
							}
						}
					}
					if (strMernisStatus != &quot;Y&quot;) {
						TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;DEF-2883-4&quot;));
					}
					if (strTCKN != strContactTCID) {
						TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_006&quot;));
					}
					/*		if (strStatus != &quot;Active&quot;){
					TheApplication().SetProfileAttr(&quot;Error&quot;,&quot;Y&quot;);
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;AD_JULY13_008&quot;));
					}*/
					if (strSimType != &quot;Mobile Signature&quot;) {
						TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_009&quot;));
					}
				}
				// IMARTINS 17022017 Removed strHomePhNum from condition since HomePhoneNumber is not available for selection in PRM
				if ((ContactId == &quot;&quot;) || (ContactId == &quot;No Match Row Id&quot;) || (ContactId == &quot;null&quot;) || (strContactTCID = &quot;&quot;) || (strCity == &quot;&quot;) || strWorkPhNum == &quot;&quot; || strMail == &quot;&quot;) {
					TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_010&quot;));
				}
			} else {
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;CSN&quot;);
				ActivateField(&quot;Status&quot;);
				ActivateField(&quot;Serial Number&quot;);
				SetSearchSpec(&quot;Serial Number&quot;, strGSM);
				SetSearchSpec(&quot;Status&quot;, &quot;Active&quot;);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord()) {
					strCustomerCode = GetFieldValue(&quot;CSN&quot;);
					if (strCustomerCode != strAccountId) {
						TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_007&quot;));
					}
				} else {
					TheApplication().SetProfileAttr(&quot;Error&quot;, &quot;Y&quot;);
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_008&quot;));
				}
			}
		}
	}
	finally {
		svc = null;
		ValidationBS = null;
		accountBO = null;
		accountBC = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="02/17/2017 10:53:44"
			   UPDATED_BY="IMARTINS"
			   CREATED="06/11/2013 18:15:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreCanInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreCanInvokeMethod (MethodName, &amp;CanInvoke)
{
	switch(MethodName){
		case &quot;CheckMS&quot;:
			return(CancelOperation);
		break;

	}
	return (ContinueOperation);
}"
			   SEQUENCE="5"
			   UPDATED="06/11/2013 18:15:25"
			   UPDATED_BY="SADMIN"
			   CREATED="05/06/2013 11:25:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
   	if(MethodName == &quot;CheckMS&quot;)
   	{
   		CheckMS(Inputs, Outputs);
   		return(CancelOperation);
   	}
   	if(MethodName == &quot;CheckContact&quot;)
   	{
   		CheckContact(Inputs, Outputs);
   		return(CancelOperation);
   	}
   	if(MethodName == &quot;Pre_Request_Validation&quot;)
   	{
   		Pre_Request_Validation(Inputs, Outputs);
   		return(CancelOperation);
   	}	   
   	if(MethodName == &quot;Request_Validation&quot;)
   	{
   		Request_Validation(Inputs, Outputs);
   		return(CancelOperation);
   	}	
	return (ContinueOperation);
}"
			   SEQUENCE="6"
			   UPDATED="06/11/2013 18:15:25"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 14:40:20"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



