<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="0-1"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="0-1"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="Order Entry"
	   UI_FREEZE="N"
	   UPDATED="05/29/2017 13:26:48"
	   UPDATED_BY="JSARMENTO"
	   CREATED="08/17/1998 18:50:31"
	   CREATED_BY="0-1"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="Y"
		   CLASS="CSSService"
		   COMMENTS="TLG-1299"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Order Update"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="05/29/2017 13:09:06"
		   SERVER_ENABLED="Y"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="JSARMENTO"
		   UPDATED="05/29/2017 13:26:48"
		   UPDATED_BY="JSARMENTO"
		   CREATED="04/19/2013 15:01:28"
		   CREATED_BY="0-1">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Order Update"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="04/19/2013 15:01:28"
			   UPDATED_BY="0-1"
			   CREATED="04/19/2013 15:01:28"
			   CREATED_BY="0-1">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOrderSequence"
			   UPDATED="04/06/2017 16:26:15"
			   UPDATED_BY="MSOUSA"
			   CREATED="03/22/2017 21:24:57"
			   CREATED_BY="ESANTOS">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckOrderSequence"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/22/2017 21:25:17"
				   UPDATED_BY="ESANTOS"
				   CREATED="03/22/2017 21:25:17"
				   CREATED_BY="ESANTOS">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="20170405:JIRA-37345:"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckSubscriberHasFDOsUnderway"
			   UPDATED="04/06/2017 16:33:52"
			   UPDATED_BY="MSOUSA"
			   CREATED="04/04/2017 18:11:21"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2017 16:26:40"
				   UPDATED_BY="MSOUSA"
				   CREATED="04/06/2017 16:26:40"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="error_code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2017 16:33:15"
				   UPDATED_BY="MSOUSA"
				   CREATED="04/06/2017 16:33:15"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="error_message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2017 16:33:45"
				   UPDATED_BY="MSOUSA"
				   CREATED="04/06/2017 16:33:45"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ret_status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2017 16:33:00"
				   UPDATED_BY="MSOUSA"
				   CREATED="04/06/2017 16:33:00"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckSubscriberHasFDOsUnderway"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/04/2017 18:11:27"
				   UPDATED_BY="MSOUSA"
				   CREATED="04/04/2017 18:11:27"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="bulkDeactivation"
			   UPDATED="04/19/2013 15:01:28"
			   UPDATED_BY="0-1"
			   CREATED="04/19/2013 15:01:28"
			   CREATED_BY="0-1">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="bulkDeactivation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/19/2013 15:01:28"
				   UPDATED_BY="0-1"
				   CREATED="04/19/2013 15:01:28"
				   CREATED_BY="0-1">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrderSequence"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrderSequence(Inputs, Outputs)
{
	try {
	
		var order_num = Inputs.GetProperty(&quot;Order Number&quot;);
		var BO = TheApplication().GetBusObject(&quot;HP Order Entry&quot;);
		var BCOrder = BO.GetBusComp(&quot;HP Order Entry - Orders&quot;);
		var BCOrderItem = BO.GetBusComp(&quot;HP Order Entry - Line Items&quot;);
		var BOLOV = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var BCLOV = BOLOV.GetBusComp(&quot;List Of Values&quot;);
		var orderId;
		var created;
		var futureFlg;
		var reqShipDate;
		var sExprAsset;
		var sExprOrder;
		var assetIntegId;
		var hasOrder;
		var hasOrderId;
		var hasCreated;
		var hasFutureFlg;
		var hasReqShipDate;
		var orderDt; //VFTRCBU-37911
		var hasOrderDt; //VFTRCBU-37911
		var psInput = TheApplication().NewPropertySet();
		var psOutput = TheApplication().NewPropertySet();
		var BSCompare =  TheApplication().GetService(&quot;TELCO DateTime Utils&quot;);
		var compareResult;
		Outputs.SetProperty(&quot;Error Code&quot;,&quot;0&quot;);
		Outputs.SetProperty(&quot;Error Message&quot;,&quot;&quot;);
		
		//Get SearchExpressions from LOVs
		with(BCLOV)
		{
			SetViewMode(AllView);
			ClearToQuery();	
			ActivateField(&quot;VF Long Description&quot;);			
			SetSearchSpec(&quot;Type&quot;, &quot;VFTRCBU_CHECK_ORDER&quot;);
			SetSearchSpec(&quot;Name&quot;, &quot;ExprAsset&quot;);
    		ExecuteQuery (ForwardOnly);
    		if(FirstRecord())
    		{
    			sExprAsset= GetFieldValue(&quot;VF Long Description&quot;);
    		}
    		
    		ClearToQuery();	
			ActivateField(&quot;VF Long Description&quot;);			
			SetSearchSpec(&quot;Type&quot;, &quot;VFTRCBU_CHECK_ORDER&quot;);
			SetSearchSpec(&quot;Name&quot;, &quot;ExprOrder&quot;);
    		ExecuteQuery (ForwardOnly);
    		if(FirstRecord())
    		{
    			sExprOrder= GetFieldValue(&quot;VF Long Description&quot;);
    		}
		}
		
		//Query Order to be closed
		with(BCOrder)
		{
			SetViewMode(AllView);
			ClearToQuery();	
			ActivateField(&quot;VF Future Order Flag&quot;);
			ActivateField(&quot;Requested Ship Date&quot;);
			ActivateField(&quot;Order Date&quot;); //VFTRCBU-37911			
			SetSearchSpec(&quot;Order Number&quot;, order_num);
    		ExecuteQuery (ForwardOnly);
    		if(FirstRecord())
    		{
    			orderId = GetFieldValue(&quot;Id&quot;);
    			created = GetFieldValue(&quot;Created&quot;);
    			futureFlg = GetFieldValue(&quot;VF Future Order Flag&quot;);
    			reqShipDate = GetFieldValue(&quot;Requested Ship Date&quot;);
    			orderDt = GetFieldValue(&quot;Order Date&quot;); //VFTRCBU-37911
    			
    			//Query Root Item to be Closed
    			with(BCOrderItem)
    			{
    				sExprAsset = sExprAsset + &quot; AND [Order Header Id]=&apos;&quot;+orderId+&quot;&apos;&quot;;
		    		SetViewMode(AllView);
					ClearToQuery();	
					ActivateField(&quot;Asset Integration Id&quot;);			
					SetSearchExpr(sExprAsset);
		    		ExecuteQuery (ForwardOnly);
		    		if(FirstRecord())
		    		{
		    			assetIntegId = GetFieldValue(&quot;Asset Integration Id&quot;);
		    			sExprOrder = sExprOrder + &quot; AND [Asset Integration Id]= &apos;&quot;+ assetIntegId +&quot;&apos; AND [Order Header Id] &lt;&gt; &apos;&quot;+orderId+&quot;&apos;&quot;;
		    			
		    			//Query other Asset&apos;s Orders
						ClearToQuery();	
						ActivateField(&quot;Order Header Id&quot;);			
						SetSearchExpr(sExprOrder);
			    		ExecuteQuery (ForwardOnly);
			    		hasOrder= FirstRecord();
			    		while(hasOrder)
			    		{
			    			hasOrderId = GetFieldValue(&quot;Order Header Id&quot;);
		    				with (BCOrder)
		    				{
		    					SetViewMode(AllView);
								ClearToQuery();	
								ActivateField(&quot;VF Future Order Flag&quot;);
								ActivateField(&quot;Requested Ship Date&quot;);	
								ActivateField(&quot;Order Date&quot;);		
								SetSearchSpec(&quot;Id&quot;, hasOrderId);
					    		ExecuteQuery (ForwardOnly);
					    		if(FirstRecord())
					    		{
					    			hasCreated = GetFieldValue(&quot;Created&quot;);
					    			hasFutureFlg = GetFieldValue(&quot;VF Future Order Flag&quot;);
					    			hasReqShipDate = GetFieldValue(&quot;Requested Ship Date&quot;);
					    			hasOrderDt = GetFieldValue(&quot;Order Date&quot;);
					    			
					    			if(hasFutureFlg == &quot;Y&quot;)
					    			{
					    				if(futureFlg == &quot;Y&quot;)
					    				{
					    						
							    			psInput.SetProperty(&quot;Date1&quot;,hasReqShipDate);
							    			psInput.SetProperty(&quot;Date2&quot;,reqShipDate);
							    			BSCompare.CompareDateTime(psInput, psOutput);
							    			compareResult = psOutput.GetProperty(&quot;Result&quot;);
							    			//hasReqShipDate &lt; reqShipDate
					    					if(compareResult==&quot;2&quot;)
					    					{
					    						Outputs.SetProperty(&quot;Error Code&quot;, &quot;-099&quot;);
					    						Outputs.SetProperty(&quot;Error Message&quot;, &quot;There is a previous order still open&quot;);
					    					}
					    				}
					    				else
					    				{
					    					psInput.SetProperty(&quot;Date1&quot;,hasReqShipDate);
							    			psInput.SetProperty(&quot;Date2&quot;,created);
							    			BSCompare.CompareDateTime(psInput, psOutput);
							    			compareResult = psOutput.GetProperty(&quot;Result&quot;);
					    					//hasReqShipDate &lt; created
					    					if(compareResult==&quot;2&quot;)
					    					{
					    						Outputs.SetProperty(&quot;Error Code&quot;, &quot;-099&quot;);
					    						Outputs.SetProperty(&quot;Error Message&quot;, &quot;There is a previous order still open&quot;);	
					    					}
					    				}
					    			}
					    			else
					    			{
					    				if(futureFlg == &quot;Y&quot;)
					    				{
					    					psInput.SetProperty(&quot;Date1&quot;,hasCreated);
							    			psInput.SetProperty(&quot;Date2&quot;,reqShipDate);
							    			BSCompare.CompareDateTime(psInput, psOutput);
							    			compareResult = psOutput.GetProperty(&quot;Result&quot;);
					    					//hasCreated &lt; reqShipDate
					    					if(compareResult==&quot;2&quot;)
					    					{
					    						//VFTRCBU-37911 hasOrderDt &lt; orderDt
					    						psInput.SetProperty(&quot;Date1&quot;, hasOrderDt);
					    						psInput.SetProperty(&quot;Date2&quot;, orderDt);
					    						BSCompare.CompareDateTime(psInput, psOutput);
								    			compareResult = psOutput.GetProperty(&quot;Result&quot;);
					    						if(compareResult == &quot;2&quot;)
					    						{
					    							Outputs.SetProperty(&quot;Error Code&quot;, &quot;-099&quot;);
					    							Outputs.SetProperty(&quot;Error Message&quot;, &quot;There is a previous order still open&quot;);
					    						}
					    					}
					    				}
					    				else
					    				{
					    					psInput.SetProperty(&quot;Date1&quot;,hasCreated);
							    			psInput.SetProperty(&quot;Date2&quot;,created);
							    			BSCompare.CompareDateTime(psInput, psOutput);
							    			compareResult = psOutput.GetProperty(&quot;Result&quot;);
							    			//hasCreated &lt; created
					    					if(compareResult==&quot;2&quot;)
					    					{
					    						Outputs.SetProperty(&quot;Error Code&quot;, &quot;-099&quot;);
					    						Outputs.SetProperty(&quot;Error Message&quot;, &quot;There is a previous order still open&quot;);	
					    					}
					    				}
					    			}
					    		}
		    				}
							hasOrder = NextRecord();
		    			}
		    		}
    			}
    			
    		}			
		}
		

	}	  
	catch(e)
	{
	  	Outputs.SetProperty(&quot;Error Code&quot;, &quot;-1&quot;);
	  	Outputs.SetProperty(&quot;Error Message&quot;, e.errText);
		TheApplication().Trace(&quot;exception:&quot; + e.errCode + &quot; : &quot;+ e.errText + &quot; &quot;  + &quot; : &quot; + e.message);					
	}
	finally
	{
		BO = null;
		BCOrder = null;
		BCOrderItem = null;
		BOLOV = null;
		BCLOV = null;
		psInput = null;
		psOutput = null;
	}

	return (ContinueOperation);
}"
			   SEQUENCE="1"
			   UPDATED="05/29/2017 13:26:48"
			   UPDATED_BY="JSARMENTO"
			   CREATED="03/22/2017 14:59:12"
			   CREATED_BY="ESANTOS">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSubscriberHasFDOsUnderway"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSubscriberHasFDOsUnderway(Inputs, Outputs)
{

  // Description: This function was created in the context of JIRA-VFTRCBU-37345 /DEF-19494
  // It checks if an order being submitted with a campaign already has an FDO underway with a campaign 

   try 
   {
     var sOrderObjId = Inputs.GetProperty(&quot;Object Id&quot;);
         
     Outputs.SetProperty(&quot;ret_status&quot;, &quot;OK&quot;);
     Outputs.SetProperty(&quot;error_code&quot;, &quot;0&quot;);
     Outputs.SetProperty(&quot;error_message&quot;, &quot;&quot;);
     
     var sMSISDN=&quot;&quot;;
     var sAssetIntegId=&quot;&quot;;
     var sRootAssetIntegId=&quot;&quot;;
     var sOrderId=&quot;&quot;;
     var sOrderReqShipDt = &quot;&quot;;
     var sOrderStatus = &quot;&quot;;
       
     if (sOrderObjId == &quot;&quot; || sOrderObjId == null) 
     {
        Outputs.SetProperty(&quot;ret_status&quot;, &quot;NOK&quot;);
        Outputs.SetProperty(&quot;error_code&quot;, &quot;0039&quot;);
        Outputs.SetProperty(&quot;error_message&quot;, &quot;&quot; );
        return;
     }   
     
     // BO/BC to get the MSISDN/Asset Integ Id involved in this order
	 var boOrderItem_1:BusObject	= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	 var bcOrder_1:BusComp = boOrderItem_1.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
     var sExpr_1 = &quot;&quot;;
     // BO/BC to get eventually existent FDOs for the subscriber
	 var boOrderItem_2:BusObject	= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	 var bcOrder_2:BusComp = boOrderItem_2.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
     var sExpr_2 = &quot;&quot;;
     // BO/BC to get eventually existent Campaigns being added in the FDO 
	 var boOrderItem_3:BusObject	= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	 var bcOrder_3:BusComp = boOrderItem_3.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
     var sExpr_3 = &quot;&quot;;

	 with (bcOrder_1)
     {
       ActivateField(&quot;MSISDN&quot;);
	   ActivateField(&quot;Asset Integration Id&quot;);	   
       ActivateField(&quot;Root Asset Integration Id&quot;);
       ClearToQuery();
       sExpr_1 = &quot;[Order Header Id] = &apos;&quot; + sOrderObjId + &quot;&apos; AND [Part Number] = &apos;70000&apos; AND [Id] = [Root Order Item Id]&quot;;
       SetSearchExpr(sExpr_1);          	 
       ExecuteQuery(ForwardOnly);
       var lineItemFound1 = FirstRecord();
       if(lineItemFound1)
       {
          sMSISDN = GetFieldValue(&quot;MSISDN&quot;);
		  sAssetIntegId = GetFieldValue(&quot;Asset Integration Id&quot;);
		  sRootAssetIntegId = GetFieldValue(&quot;Root Asset Integration Id&quot;);
		  
		  // Get all FDOs created for this Subscriber
	      with (bcOrder_2)
	      {
            ActivateField(&quot;Order Header Id&quot;);
            ActivateField(&quot;Order Requested Ship Date&quot;);
            ActivateField(&quot;Order Status&quot;);
            ClearToQuery();
            sExpr_2 = &quot;[Id] = [Root Order Item Id] AND [Root Asset Integration Id] = &apos;&quot; + sRootAssetIntegId + &quot;&apos; AND [VF Future Order Flag] = &apos;Y&apos; AND [Order Header Id] &lt;&gt; &apos;&quot;+sOrderObjId+&quot;&apos;&quot;;
            
            SetSearchExpr(sExpr_2);          	 
            ExecuteQuery(ForwardOnly);
            var lineItemFound2 = FirstRecord();
            while (lineItemFound2)
            {
		      sOrderId = GetFieldValue(&quot;Order Header Id&quot;);
		      sOrderReqShipDt = GetFieldValue(&quot;Order Requested Ship Date&quot;);
		      sOrderStatus = GetFieldValue(&quot;Order Status&quot;);
		      
		      if (sOrderStatus == TheApplication().InvokeMethod(&apos;LookupValue&apos;,&apos;FS_ORDER_STATUS&apos;,&apos;Cancelled&apos;) || 
		          sOrderStatus == TheApplication().InvokeMethod(&apos;LookupValue&apos;,&apos;FS_ORDER_STATUS&apos;,&apos;Complete&apos;) || 
		          sOrderStatus == TheApplication().InvokeMethod(&apos;LookupValue&apos;,&apos;FS_ORDER_STATUS&apos;,&apos;Partially Completed&apos;) ||
		          sOrderStatus == TheApplication().InvokeMethod(&apos;LookupValue&apos;,&apos;FS_ORDER_STATUS&apos;,&apos;Pending&apos;)
		         )
		      {
		         lineItemFound2 = NextRecord();      
		         continue;
		      }
		      else
		      { 
		         // Now check if the FDO involves adding a Campaign
	             with (bcOrder_3)
	             {
                    ClearToQuery();
                    sExpr_3 = &quot;[Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos; AND [VF Product Group] =  &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;)+ &quot;&apos; AND  [Action Code] =  &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;)+ &quot;&apos; AND [Id] = [Root Order Item Id]&quot;;
                    SetSearchExpr(sExpr_3);          	 
                    ExecuteQuery(ForwardOnly);
                    var lineItemFound3 = FirstRecord();
                    if (FirstRecord())
                    {
                       Outputs.SetProperty(&quot;ret_status&quot;, &quot;NOK&quot;);                            
                       Outputs.SetProperty(&quot;error_code&quot;, &quot;EM29&quot;);
                       Outputs.SetProperty(&quot;error_message&quot;, &quot;&quot;);
                       return;
                    } 		            
		         }
		      }
		      
		      lineItemFound2 = NextRecord();
		      
            }//!while (lineItemFound2)
		  }//!with (bcOrder_2)		  
	   }//|if
     }//!with(bcOrder_1)
   }
   catch(e)
   {
      Outputs.SetProperty(&quot;ret_status&quot;, &quot;NOK&quot;);
      Outputs.SetProperty(&quot;error_code&quot;, &quot;0270&quot;);
      Outputs.SetProperty(&quot;error_message&quot;, e.errText);
   }
   finally
   {
     boOrderItem_3 = null;
     bcOrder_3 = null;     
     boOrderItem_2 = null;
     bcOrder_2 = null;     
     boOrderItem_1 = null;
     bcOrder_1 = null;

   }
}"
			   SEQUENCE="2"
			   UPDATED="04/20/2017 14:47:08"
			   UPDATED_BY="MSOUSA"
			   CREATED="04/04/2017 16:17:06"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	  if ( MethodName == &quot;UpdateDealerCode&quot;){
		  UpdateDealerCode(Inputs, Outputs);
		  return (CancelOperation);
	  }

	  //ESANTOS VFTRCBU-37112 - method addded
	  if (MethodName == &quot;CheckOrderSequence&quot;)
	  {
	  	CheckOrderSequence(Inputs, Outputs)
	  	return (CancelOperation);
	  }

	  //VFTRCBU-37345 - method addded
	  if (MethodName == &quot;CheckSubscriberHasFDOsUnderway&quot;)
	  {
	  	CheckSubscriberHasFDOsUnderway(Inputs, Outputs)
	  	return (CancelOperation);
	  }


	return (ContinueOperation);
}"
			   SEQUENCE="4"
			   UPDATED="04/07/2017 17:59:10"
			   UPDATED_BY="MSOUSA"
			   CREATED="04/19/2013 15:01:28"
			   CREATED_BY="0-1">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateDealerCode"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateDealerCode(Inputs, Outputs)
{
	try {				
		var fpReadFile = &quot;&quot;;
		var fpWriteFile = &quot;&quot;;
		var outputMessage = &quot;&quot;;
		TheApplication().TraceOn(&quot;C:\\log.txt&quot;, &quot;Allocation&quot;,&quot;All&quot;);
		var BoOrderEntry 	:BusObject	= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcOrder 		:BusComp	= BoOrderEntry.GetBusComp(&quot;Order Entry - Orders&quot;);
		var boEmployee 		: BusObject = TheApplication ().GetBusObject (&quot;Employee&quot;);
		var bcEmployee 		: BusComp 	= boEmployee.GetBusComp (&quot;Employee&quot;);
		
		var strFileNameInput  =  Inputs.GetProperty(&quot;file_name_input&quot;);  
		var strFileNameOutput =  Inputs.GetProperty(&quot;file_name_output&quot;); 


		fpReadFile = Clib.fopen(strFileNameInput,&quot;rt&quot;);
		fpWriteFile = Clib.fopen(strFileNameOutput,&quot;au+&quot;);

		
		var strCurrentLine = &quot;&quot;;
		var strCurrentLineTemp=&quot;&quot;;

		strCurrentLine = Clib.fgets (fpReadFile);
		TheApplication().Trace(&quot;strCurrentLine:&quot;+strCurrentLine);

		while (strCurrentLine != &quot;&quot; &amp;&amp; strCurrentLine != null)
		{
			
				var index =  strCurrentLine.indexOf(&quot;;&quot;);
				var OrderId = strCurrentLine.substring(0,index);		
				TheApplication().Trace(&quot;OrderId:&quot;+OrderId);			
			    bcOrder.SetViewMode(AllView);
				bcOrder.ClearToQuery();
				bcOrder.ActivateField(&quot;Id&quot;);
				bcOrder.ActivateField(&quot;VF Shop Code&quot;);
				bcOrder.ActivateField(&quot;VF Shop Id&quot;);
				bcOrder.ActivateField(&quot;VF Dealer Code&quot;);				
				bcOrder.SetSearchSpec (&quot;Id&quot;, OrderId);
	    		bcOrder.ExecuteQuery (ForwardOnly);
	    		if(bcOrder.FirstRecord())
	    		{		
	    			TheApplication().Trace(&quot;Id:&quot;+bcOrder.GetFieldValue(&quot;Id&quot;));	    		
					bcEmployee.ClearToQuery ();
					bcEmployee.SetViewMode (AllView);
					bcEmployee.ActivateField (&quot;VF Dealer Code&quot;);
					bcEmployee.ActivateField (&quot;VF Shop Id&quot;);
					bcEmployee.SetSearchSpec (&quot;VF Dealer Code&quot;,bcOrder.GetFieldValue(&quot;VF Dealer Code&quot;));
					bcEmployee.ExecuteQuery (ForwardOnly);
					if (bcEmployee.FirstRecord ())
					{
		    			TheApplication().Trace(&quot;VF Shop Id:&quot;+bcEmployee.GetFieldValue(&quot;VF Shop Id&quot;));
						bcOrder.SetFieldValue(&quot;VF Shop Code&quot;,bcEmployee.GetFieldValue(&quot;VF Shop Id&quot;));
						bcOrder.WriteRecord();
					}
				}					
				outputMessage = &quot; : SUCCESS -&gt; &quot; + OrderId + &quot;\n&quot;;
				Clib.fputs(outputMessage , fpWriteFile);											
				strCurrentLine = Clib.fgets(fpReadFile);
		}

	  	Outputs.SetProperty(&quot;error_code&quot;, &quot;0&quot;);
	  	Outputs.SetProperty(&quot;error_message&quot;, &quot;success&quot;);
	  	
 	 	Clib.fclose(fpReadFile);
	  	Clib.fclose(fpWriteFile);

	}
	catch(e)
	{
	  	Outputs.SetProperty(&quot;error_code&quot;, &quot;-1&quot;);
	  	Outputs.SetProperty(&quot;error_message&quot;, e.errText);
		TheApplication().Trace(&quot;exception:&quot; + e.errCode + &quot; : &quot;+ e.errText + &quot; &quot;  + &quot; : &quot; + e.message);					
	}
	finally
	{
	}

	return (ContinueOperation);
}"
			   SEQUENCE="3"
			   UPDATED="04/04/2017 16:17:06"
			   UPDATED_BY="MSOUSA"
			   CREATED="04/19/2013 15:01:28"
			   CREATED_BY="0-1">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



