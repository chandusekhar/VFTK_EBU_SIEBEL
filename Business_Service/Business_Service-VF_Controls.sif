<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="Order management (Order, Shipment, Invoice, Quote etc."
	   INACTIVE="N"
	   LOCKED="N"
	   LOCKED_DATE="08/11/2017 16:04:03"
	   NAME="Table Order"
	   UI_FREEZE="N"
	   UPDATED="01/24/2018 13:49:25"
	   UPDATED_BY="IBM_FIGENB"
	   CREATED="04/18/2002 01:12:22"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="Y"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Controls"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="01/24/2018 15:49:02"
		   UPDATED_BY="IBM_FIGENB"
		   CREATED="05/11/2011 16:48:03"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Controls"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="05/11/2011 16:48:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/11/2011 16:48:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="CR131"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CTCOptionCheck"
			   UPDATED="09/07/2012 18:01:14"
			   UPDATED_BY="SADMIN"
			   CREATED="09/07/2012 18:01:13"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/07/2012 18:01:13"
				   UPDATED_BY="SADMIN"
				   CREATED="09/07/2012 18:01:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/07/2012 18:01:14"
				   UPDATED_BY="SADMIN"
				   CREATED="09/07/2012 18:01:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CTCOptionCheck"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/07/2012 18:01:14"
				   UPDATED_BY="SADMIN"
				   CREATED="09/07/2012 18:01:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalculateSrvEndDtCBU"
			   UPDATED="08/28/2016 00:03:28"
			   UPDATED_BY="SADMIN"
			   CREATED="11/16/2015 11:31:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillCycle"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/16/2015 11:31:19"
				   UPDATED_BY="SADMIN"
				   CREATED="11/16/2015 11:31:18"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="InsertSrvEndDt"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/16/2015 11:31:19"
					   UPDATED_BY="SADMIN"
					   CREATED="11/16/2015 11:31:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DueDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/16/2015 11:31:19"
				   UPDATED_BY="SADMIN"
				   CREATED="11/16/2015 11:31:19"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Order Sub Type"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/16/2015 11:31:19"
					   UPDATED_BY="SADMIN"
					   CREATED="11/16/2015 11:31:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LIServiceStartDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/16/2015 11:31:19"
				   UPDATED_BY="SADMIN"
				   CREATED="11/16/2015 11:31:19"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="InsertSrvEndDt"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/16/2015 11:31:19"
					   UPDATED_BY="SADMIN"
					   CREATED="11/16/2015 11:31:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="VFTRCBU-32961 - CJANEIRO"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/28/2016 00:03:28"
				   UPDATED_BY="SADMIN"
				   CREATED="08/28/2016 00:03:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ServLength"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/16/2015 11:31:19"
				   UPDATED_BY="SADMIN"
				   CREATED="11/16/2015 11:31:19"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BillingAccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/16/2015 11:31:19"
					   UPDATED_BY="SADMIN"
					   CREATED="11/16/2015 11:31:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="PSANTOS VFTRCBU-19350"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ServUOM"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/16/2015 11:31:19"
				   UPDATED_BY="SADMIN"
				   CREATED="11/16/2015 11:31:19"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LIServiceStartDate"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/16/2015 11:31:19"
					   UPDATED_BY="SADMIN"
					   CREATED="11/16/2015 11:31:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ToSet"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/16/2015 11:31:19"
				   UPDATED_BY="SADMIN"
				   CREATED="11/16/2015 11:31:19"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="InsertSrvEndDt"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/16/2015 11:31:19"
					   UPDATED_BY="SADMIN"
					   CREATED="11/16/2015 11:31:19"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CalculateSrvEndDtCBU"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/16/2015 11:31:19"
				   UPDATED_BY="SADMIN"
				   CREATED="11/16/2015 11:31:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckBAStatus"
			   UPDATED="02/07/2012 11:10:58"
			   UPDATED_BY="SADMIN"
			   CREATED="12/26/2011 11:08:50"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/26/2011 11:08:50"
				   UPDATED_BY="SADMIN"
				   CREATED="12/26/2011 11:08:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/26/2011 11:08:50"
				   UPDATED_BY="SADMIN"
				   CREATED="12/26/2011 11:08:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/26/2011 11:08:50"
				   UPDATED_BY="SADMIN"
				   CREATED="12/26/2011 11:08:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SubType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/26/2011 11:08:50"
				   UPDATED_BY="SADMIN"
				   CREATED="12/26/2011 11:08:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckBAStatus"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/07/2012 11:10:58"
				   UPDATED_BY="SADMIN"
				   CREATED="02/07/2012 11:10:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckCampDeactivation"
			   UPDATED="07/04/2011 18:29:34"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Type"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckCampDeactivation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckExcludeTransactions"
			   UPDATED="09/07/2012 18:01:14"
			   UPDATED_BY="SADMIN"
			   CREATED="09/07/2012 18:01:14"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckExcludeTransactions"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/07/2012 18:01:14"
				   UPDATED_BY="SADMIN"
				   CREATED="09/07/2012 18:01:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckHandsetCampIntegrity"
			   UPDATED="04/28/2014 17:17:53"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:52"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CampaignStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:52"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:52"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:52"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:52"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/28/2014 17:17:52"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:52"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckHandsetCampIntegrity"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/28/2014 17:17:53"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckPTT"
			   UPDATED="05/24/2013 13:40:17"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2013 13:40:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorFlag"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2013 13:40:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2013 13:40:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2013 13:40:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2013 13:40:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2013 13:40:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2013 13:40:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2013 13:40:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2013 13:40:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProdName"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2013 13:40:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2013 13:40:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProdName2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2013 13:40:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2013 13:40:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckPTT"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/24/2013 13:40:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2013 13:40:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Amul 20120312 - Created for CR317"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckSplitBill"
			   UPDATED="03/14/2012 17:13:34"
			   UPDATED_BY="SADMIN"
			   CREATED="03/14/2012 17:13:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BMsg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/14/2012 17:13:34"
				   UPDATED_BY="SADMIN"
				   CREATED="03/14/2012 17:13:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/14/2012 17:13:34"
				   UPDATED_BY="SADMIN"
				   CREATED="03/14/2012 17:13:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckSplitBill"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/14/2012 17:13:34"
				   UPDATED_BY="SADMIN"
				   CREATED="03/14/2012 17:13:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckTariffPlanChange"
			   UPDATED="02/07/2012 11:10:58"
			   UPDATED_BY="SADMIN"
			   CREATED="07/27/2011 12:50:56"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="NewTariffPlan"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/07/2012 11:10:58"
				   UPDATED_BY="SADMIN"
				   CREATED="12/12/2011 12:50:35"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="NewTariffPlan"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="02/07/2012 11:10:58"
					   UPDATED_BY="SADMIN"
					   CREATED="02/07/2012 11:10:58"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/27/2011 12:50:56"
				   UPDATED_BY="SADMIN"
				   CREATED="07/27/2011 12:50:56"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/27/2011 12:50:56"
					   UPDATED_BY="SADMIN"
					   CREATED="07/27/2011 12:50:56"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/27/2011 12:50:56"
				   UPDATED_BY="SADMIN"
				   CREATED="07/27/2011 12:50:56"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/27/2011 12:50:56"
					   UPDATED_BY="SADMIN"
					   CREATED="07/27/2011 12:50:56"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Skip"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/27/2011 12:50:56"
				   UPDATED_BY="SADMIN"
				   CREATED="07/27/2011 12:50:56"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Skip"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/27/2011 12:50:56"
					   UPDATED_BY="SADMIN"
					   CREATED="07/27/2011 12:50:56"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Tariff"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/27/2011 12:50:56"
				   UPDATED_BY="SADMIN"
				   CREATED="07/27/2011 12:50:56"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Tariff"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/27/2011 12:50:56"
					   UPDATED_BY="SADMIN"
					   CREATED="07/27/2011 12:50:56"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckTariffPlanChange"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/27/2011 12:50:56"
				   UPDATED_BY="SADMIN"
				   CREATED="07/27/2011 12:50:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="Amul - Added for C_MSP00000367"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckUpgrade"
			   UPDATED="06/12/2013 20:39:21"
			   UPDATED_BY="SADMIN"
			   CREATED="04/04/2012 17:02:36"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ItemIdAdd"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/12/2013 20:39:20"
				   UPDATED_BY="SADMIN"
				   CREATED="06/12/2013 20:39:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ItemIdDell"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/12/2013 20:39:21"
				   UPDATED_BY="SADMIN"
				   CREATED="06/12/2013 20:39:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckUpgrade"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/04/2012 17:02:36"
				   UPDATED_BY="SADMIN"
				   CREATED="04/04/2012 17:02:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckUpgrdDowngrd"
			   UPDATED="07/04/2011 18:29:34"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckUpgrdDowngrd"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CompleteBA"
			   UPDATED="02/07/2012 11:10:58"
			   UPDATED_BY="SADMIN"
			   CREATED="12/05/2011 13:06:50"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BAId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/05/2011 13:06:50"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2011 13:06:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CompleteBA"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/07/2012 11:10:58"
				   UPDATED_BY="SADMIN"
				   CREATED="02/07/2012 11:10:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ControlSkipPosition"
			   UPDATED="05/13/2016 19:27:29"
			   UPDATED_BY="SADMIN"
			   CREATED="05/30/2011 15:48:16"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ControlDetailId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/12/2015 12:23:25"
				   UPDATED_BY="SADMIN"
				   CREATED="07/12/2015 12:23:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ControlNum"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/30/2011 15:49:43"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 15:49:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ControlType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/30/2011 15:49:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 15:49:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/13/2016 19:27:29"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 16:46:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/30/2011 16:35:10"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 15:49:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchSpec"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/12/2015 12:23:25"
				   UPDATED_BY="SADMIN"
				   CREATED="07/12/2015 12:23:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ControlSkipPosition"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/30/2011 15:49:23"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 15:49:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="BP"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetBundlePromoInfoFromOrder"
			   UPDATED="04/28/2014 17:17:56"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:53"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BundleAverageInvoiceAmount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:53"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BundleIntegrationId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BundleName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BundleRiskStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BundleTotalInvoiceAmount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/28/2014 17:17:55"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Product Group"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:55"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Product Number"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:55"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Product Sub Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:56"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Product Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/28/2014 17:17:56"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetBundlePromoInfoFromOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/28/2014 17:17:56"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:17:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetPositionType"
			   UPDATED="08/18/2014 22:48:59"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 22:48:59"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PositionType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/18/2014 22:48:59"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2014 22:48:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetPositionType"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/18/2014 22:48:59"
				   UPDATED_BY="SADMIN"
				   CREATED="08/18/2014 22:48:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="InactivateAsset"
			   UPDATED="07/04/2011 18:29:34"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootAssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="RootAssetId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="InactivateAsset"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="InsertSrvEndDt"
			   UPDATED="11/09/2015 13:59:39"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/17/2014 08:10:38"
				   UPDATED_BY="SADMIN"
				   CREATED="03/17/2014 08:10:38"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BillingAccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/17/2014 08:10:38"
					   UPDATED_BY="SADMIN"
					   CREATED="03/17/2014 08:10:38"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="PSANTOS VFTRCBU-19350"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LIServiceStartDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/09/2015 13:59:39"
				   UPDATED_BY="SADMIN"
				   CREATED="11/09/2015 13:59:39"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LIServiceStartDate"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/09/2015 13:59:39"
					   UPDATED_BY="SADMIN"
					   CREATED="11/09/2015 13:59:39"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Sub Type"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/17/2014 08:10:38"
				   UPDATED_BY="SADMIN"
				   CREATED="03/17/2014 08:10:38"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Order Sub Type"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/17/2014 08:10:38"
					   UPDATED_BY="SADMIN"
					   CREATED="03/17/2014 08:10:38"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="InsertSrvEndDt"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="InsertSrvEndDt"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="KafeinCampCheck"
			   UPDATED="02/10/2012 12:51:22"
			   UPDATED_BY="SADMIN"
			   CREATED="02/10/2012 12:51:22"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/10/2012 12:51:22"
				   UPDATED_BY="SADMIN"
				   CREATED="02/10/2012 12:51:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="KafeinCampCheck"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/10/2012 12:51:22"
				   UPDATED_BY="SADMIN"
				   CREATED="02/10/2012 12:51:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LimitControl"
			   UPDATED="02/21/2013 21:16:10"
			   UPDATED_BY="SADMIN"
			   CREATED="05/11/2011 16:48:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DonorOperator"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/21/2013 21:16:10"
				   UPDATED_BY="SADMIN"
				   CREATED="02/21/2013 21:16:10"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="DonorOperator"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="02/21/2013 21:16:10"
					   UPDATED_BY="SADMIN"
					   CREATED="02/21/2013 21:16:10"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/25/2011 15:46:43"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2011 15:46:27"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrorMsg"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/25/2011 15:46:42"
					   UPDATED_BY="SADMIN"
					   CREATED="05/25/2011 15:46:27"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FailedControls"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="05/20/2011 10:30:18"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 10:30:17"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="FailedControls"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/20/2011 10:30:18"
					   UPDATED_BY="SADMIN"
					   CREATED="05/20/2011 10:30:18"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LoginName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LoginName"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/11/2011 17:38:52"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2011 16:48:49"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/11/2011 17:38:52"
					   UPDATED_BY="SADMIN"
					   CREATED="05/11/2011 17:38:52"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/11/2011 18:52:20"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2011 18:52:20"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/11/2011 18:54:39"
					   UPDATED_BY="SADMIN"
					   CREATED="05/11/2011 18:54:39"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ShopCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/11/2011 17:38:48"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2011 16:48:53"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ShopCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="05/11/2011 17:38:48"
					   UPDATED_BY="SADMIN"
					   CREATED="05/11/2011 17:38:48"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LimitControl"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/11/2011 16:48:43"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2011 16:48:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="MernisControl"
			   UPDATED="11/28/2011 12:44:44"
			   UPDATED_BY="SADMIN"
			   CREATED="11/28/2011 12:44:44"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/28/2011 12:44:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/28/2011 12:44:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrorMsg"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/28/2011 12:44:44"
					   UPDATED_BY="SADMIN"
					   CREATED="11/28/2011 12:44:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LoginName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/28/2011 12:44:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/28/2011 12:44:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LoginName"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/28/2011 12:44:44"
					   UPDATED_BY="SADMIN"
					   CREATED="11/28/2011 12:44:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/28/2011 12:44:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/28/2011 12:44:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/28/2011 12:44:44"
					   UPDATED_BY="SADMIN"
					   CREATED="11/28/2011 12:44:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/28/2011 12:44:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/28/2011 12:44:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/28/2011 12:44:44"
					   UPDATED_BY="SADMIN"
					   CREATED="11/28/2011 12:44:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="MernisControl"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/28/2011 12:44:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/28/2011 12:44:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="RemoveCampaign"
			   UPDATED="10/17/2016 23:48:23"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="VFTRCBU-34119 - HRODRIGUES"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CustomerType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/17/2016 23:48:23"
				   UPDATED_BY="SADMIN"
				   CREATED="10/17/2016 23:48:23"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="CustomerType"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="10/17/2016 23:48:23"
					   UPDATED_BY="SADMIN"
					   CREATED="10/17/2016 23:48:23"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderReason"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/09/2012 17:09:53"
				   UPDATED_BY="SADMIN"
				   CREATED="03/09/2012 17:09:53"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderReason"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/09/2012 17:09:53"
					   UPDATED_BY="SADMIN"
					   CREATED="03/09/2012 17:09:53"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderSubTypeVal"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderSubTypeVal"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="RemoveCampaign"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="RemoveDual"
			   UPDATED="02/21/2012 13:14:35"
			   UPDATED_BY="SADMIN"
			   CREATED="02/21/2012 13:14:35"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/21/2012 13:14:35"
				   UPDATED_BY="SADMIN"
				   CREATED="02/21/2012 13:14:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="RemoveDual"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/21/2012 13:14:35"
				   UPDATED_BY="SADMIN"
				   CREATED="02/21/2012 13:14:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="RetrieveDuration"
			   UPDATED="07/04/2011 18:29:34"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Duration"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Duration"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ItemId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 18:29:34"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 18:29:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="RetrieveDuration"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 18:29:34"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 18:29:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SearchKillIt"
			   UPDATED="05/07/2015 23:46:19"
			   UPDATED_BY="SADMIN"
			   CREATED="05/07/2015 23:46:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sAssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/07/2015 23:46:18"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strmessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SearchKillIt"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SearchOneNet"
			   UPDATED="05/07/2015 23:46:19"
			   UPDATED_BY="SADMIN"
			   CREATED="05/07/2015 23:46:19"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="prdOneNet"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="prdOneNetfive"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="prdOneNetfour"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="prdOneNetthree"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="prdOneNettwo"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SearchOneNet"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SearchVPN"
			   UPDATED="05/07/2015 23:46:19"
			   UPDATED_BY="SADMIN"
			   CREATED="05/07/2015 23:46:19"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VPN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SearchVPN"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/07/2015 23:46:19"
				   UPDATED_BY="SADMIN"
				   CREATED="05/07/2015 23:46:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetLineItemBA"
			   UPDATED="11/28/2011 12:44:44"
			   UPDATED_BY="SADMIN"
			   CREATED="11/28/2011 12:44:44"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/28/2011 12:44:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/28/2011 12:44:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetLineItemBA"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/28/2011 12:44:44"
				   UPDATED_BY="SADMIN"
				   CREATED="11/28/2011 12:44:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetVPNAttr"
			   UPDATED="03/20/2015 01:56:32"
			   UPDATED_BY="SADMIN"
			   CREATED="03/20/2015 01:56:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/20/2015 01:56:32"
				   UPDATED_BY="SADMIN"
				   CREATED="03/20/2015 01:56:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetVPNAttr"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/20/2015 01:56:32"
				   UPDATED_BY="SADMIN"
				   CREATED="03/20/2015 01:56:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="Y"
			   NAME="WarnIfMultiple"
			   UPDATED="04/17/2012 14:28:34"
			   UPDATED_BY="SADMIN"
			   CREATED="12/26/2011 11:08:50"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/26/2011 11:08:50"
				   UPDATED_BY="SADMIN"
				   CREATED="12/26/2011 11:08:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="WarnIfMultiple"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/07/2012 11:10:58"
				   UPDATED_BY="SADMIN"
				   CREATED="02/07/2012 11:10:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="(declarations)"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="var AssetIntegId = null;
var CustomerCode = null;
var OrderHeaderReason =null;
var globalStrNewOrder=TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Add New Service&quot;);
var globalStrMNPSubType=TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;); 
var globalStrpartnumberchild=TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PART_NUM_CR376 &quot;,&quot;Child&quot;);
var globalStrpartnumberroot=TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PART_NUM_CR376 &quot;,&quot;Root&quot;);
var globalStrConsumer=TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACC_TYPE_VFCONTROL&quot;,&quot;Consumer&quot;);
var globalStrBusiness=TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACC_TYPE_VFCONTROL&quot;,&quot;Business&quot;);
var globalStrBoth=TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACC_TYPE_VFCONTROL&quot;,&quot;Both&quot;);"
			   SEQUENCE="1"
			   UPDATED="05/31/2015 22:01:57"
			   UPDATED_BY="SADMIN"
			   CREATED="03/20/2015 01:56:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AreProductsExistInMobileLine"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AreProductsExistInMobileLine(Inputs,Outputs)
{
	try
	{
			var PartNum;
			var result = &quot;error&quot;;
			var OrderEntryBO = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
			var OrderLineItems = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
			var AddActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
			var deleteActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Delete&quot;);
			var OrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
			
			var counter = 0 ;
			var searchSpec = &quot; 1&lt;&gt;1  &quot;
			while(true){
				try{
					PartNum = Inputs.GetProperty(&quot;Prod &quot;  + counter );
					
					if ( PartNum == &quot;&quot; ){
						break;
					}
					searchSpec = searchSpec + &quot; OR [Part Number] = &apos;&quot;+PartNum+&quot;&apos;&quot;;
					counter ++;
				}catch(e){
					break;
				}
			}
			
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);	
			inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			
			OrderLineItems.SetViewMode(AllView);
			OrderLineItems.ClearToQuery();
			OrderLineItems.SetSearchExpr( &quot;( &quot; + searchSpec + &quot;) AND [Order Header Id]=&apos;&quot; + OrderId + &quot;&apos; AND ( [Action Code] =&apos;&quot; + deleteActionCode +  &quot;&apos;)&quot;);
			OrderLineItems.ExecuteQuery(ForwardOnly);
			if (OrderLineItems.FirstRecord())
			{
				result = &quot;OK&quot;;
			}
			else
			{				
				result = &quot;KO&quot;;
			}
							
	}
	catch(e){
			var error = e.toString();
	}
	finally{
			Outputs.SetProperty(&quot;Result&quot;,result);
			OrderLineItems 	= null;
			OrderEntryBO 	= null;		
			AddActionCode	= null;
			PartNum		 	= null;
			OrderId		 	= null;
			result 			= null;
			inProp			= null;
			outProp			= null;
			BS				= null;
	}
	
}"
			   SEQUENCE="2"
			   UPDATED="03/20/2015 01:56:32"
			   UPDATED_BY="SADMIN"
			   CREATED="08/16/2012 15:46:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BAActivationDateCheck"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BAActivationDateCheck (PositionType,ControlNum,CustomerSubClass)
{
	try
	{
	var XOrderbo : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
	var ControlSkipbc : BusComp = XOrderbo.GetBusComp(&quot;VF Controls Skip&quot;);
	var res = false; 
	var Position = &quot;&quot;;
	var CustSubClass = &quot;&quot;;
	//Begin - Scripting 15 - Input validation
	var inProp 	:PropertySet = TheApplication().NewPropertySet();
	var outProp	: PropertySet = TheApplication().NewPropertySet();
	var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;PositionType&quot;,PositionType);
	inProp.SetProperty(&quot;ControlNum&quot;,ControlNum);
	inProp.SetProperty(&quot;Customer Sub Class&quot;,CustomerSubClass);
	inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;OR&quot;); 
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
	//End - Scripting 15
	with(ControlSkipbc)
	{
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(&quot;Customer Sub Class&quot;);
		ActivateField(&quot;Position Type&quot;);
		SetSearchExpr(&quot;[Control Num] = &apos;&quot;+ControlNum+&quot;&apos; AND ([Position Type] = &apos;&quot;+PositionType+&quot;&apos; OR [Customer Sub Class] = &apos;&quot;+CustomerSubClass+&quot;&apos;)&quot;);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{	
			Position = GetFieldValue(&quot;Position Type&quot;);
			CustSubClass = GetFieldValue(&quot;Customer Sub Class&quot;);
			if (Position == &quot;&quot; || CustSubClass == &quot;&quot;)
			res = true;
			else if (Position == PositionType &amp;&amp; CustSubClass == CustomerSubClass)
			res = true;
		}			
	}
	return(res);
	}
	finally
	{
		Position = null;
		CustSubClass = null;
		ControlSkipbc = null;
		XOrderbo = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="03/20/2015 01:56:32"
			   UPDATED_BY="SADMIN"
			   CREATED="10/30/2012 13:16:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CTCOptionCheck"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CTCOptionCheck(Inputs, Outputs){
try
	{
		var OrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
		var OrderReason     = Inputs.GetProperty(&quot;OrderReason&quot;);
		var OrderEntryBO	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderLineItems 	: BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);		
		var AstBC	 		: BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);		
		var strActive		= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var Add 			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var Delete 			= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var Exist			= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;)
		var Result			= &quot;OK&quot;;		
		var RecCount		= 0;		
		var Expr			= &quot;[Order Header Id] = &apos;&quot; + OrderId + &quot;&apos; AND [Part Number] = &apos;25000&apos;&quot;;
		var AssetIntegId    = &quot;&quot;;

		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId); //Id Validation
		inProp.SetProperty(&quot;OrderReason&quot;,OrderReason); //Id Validation
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 

		with (OrderLineItems)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Asset Integration Id&quot;);			
			ClearToQuery();
			SetSearchExpr(Expr);
			ExecuteQuery(ForwardOnly);
			RecCount = CountRecords();
			if(RecCount == 1)
			{
			    AssetIntegId = GetFieldValue(&quot;Asset Integration Id&quot;);
			    // check if CTC option asset is active or not
			    with(AstBC)
			    {
			    	SetViewMode(AllView);
			    	ActivateField(&quot;Integration Id&quot;);
			    	ActivateField(&quot;Status&quot;);			
					ClearToQuery();
					SetSearchSpec(&quot;Integration Id&quot;,AssetIntegId);
					SetSearchSpec(&quot;Status&quot;,strActive);
					ExecuteQuery(ForwardOnly);
					RecCount = CountRecords();
					if (RecCount == 1)
					{
					    
						if(!CheckExcludeTransactions(null,&quot;CTC000&quot;,OrderReason))
							Result=&quot;KO&quot;;
					}
			    }
				
			}			
		}
		Outputs.SetProperty(&quot;Result&quot;,Result);
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
	}
	finally
	{
		OrderLineItems 	= null;		 
		 AstBC	 		= null;
		 OrderEntryBO	= null;
		 inProp 		= null;
		 outProp 		= null;
		 BS 			= null;
	}
}"
			   SEQUENCE="28"
			   UPDATED="08/03/2016 00:39:14"
			   UPDATED_BY="SADMIN"
			   CREATED="09/07/2012 18:01:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalcBillCycleEndDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalcBillCycleEndDate(billAccntId)
{
	var billcycle = GetBillCycle(billAccntId);													
	var sysdate1 =  GetCurrentDate();
	var sysdate = new Date(sysdate1.getFullYear(),sysdate1.getMonth(), sysdate1.getDate()); 
	var actualMonth = sysdate.getMonth();	
	var sToday = sysdate.toSystem();
	sToday = sToday * 1000;						

	var tomorrowMS = sToday + (24*60*60*1000);
	var tomorrow = new Date(tomorrowMS);
	var tomorrowMonth = tomorrow.getMonth();

	var strEndDate = new Date(sysdate);

	if(((sysdate.getDate() == &quot;6&quot;) &amp;&amp; (billcycle == &quot;6&quot;) ) || ((sysdate.getDate() == &quot;15&quot;) &amp;&amp; (billcycle == &quot;15&quot;)) || ((sysdate.getDate() == &quot;21&quot;) &amp;&amp; (billcycle == &quot;21&quot;)))// same day of bill cycle
	{
		strEndDate.setFullYear(sysdate.getFullYear() +1);				
	}
	else { 
		if(billcycle != &quot;1&quot;) {//billcycle not in the last day of month
			if((sysdate.getDate() - billcycle )&gt; 0) {//bill cycle date in the past
				strEndDate.setFullYear(sysdate.getFullYear()+1,sysdate.getMonth(),billcycle);
			}
			else {//bill cycle date in the future
				if(actualMonth == &quot;0&quot;) {//January						
					strEndDate.setFullYear(sysdate.getFullYear(),&quot;11&quot;,billcycle);
				}
				else{//other months -&gt; date shifts in the next year
					strEndDate.setFullYear(sysdate.getFullYear()+1,sysdate.getMonth()-1,billcycle);
				}				
			}
		}
		else { // billcycle date in the last of the month
			if(tomorrowMonth!=actualMonth ) {//today is the last day of the month -&gt; same day of bill cycle
				strEndDate.setFullYear(sysdate.getFullYear()+1,sysdate.getMonth(),sysdate.getDate());
			}
			if(actualMonth == &quot;0&quot;) {//January						
				strEndDate.setFullYear(sysdate.getFullYear(),&quot;11&quot;,&quot;31&quot;);
			}
			else{//other months -&gt; date shifts in the next year
				strEndDate.setFullYear(sysdate.getFullYear()+1,sysdate.getMonth(),&quot;1&quot;);
				var EndDateMS = strEndDate.toSystem() * 1000;
				strEndDate.setTime(EndDateMS - (24*60*60*1000));
			}
		}
	}
	return(strEndDate);						
}"
			   SEQUENCE="4"
			   UPDATED="03/20/2015 01:56:32"
			   UPDATED_BY="SADMIN"
			   CREATED="02/21/2012 13:14:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateSrvEndDtCBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//JMARQUES - WA#20
function CalculateSrvEndDtCBU(Inputs, Outputs)
{
	try
	{
		var bsDateUtils    : Service     = TheApplication().GetService(&quot;TELCO DateTime Utils&quot;);
		var bsTBUIUtils    : Service     = TheApplication().GetService(&quot;VFTRCBU TBUI Get Data Utils&quot;); //TFERNANDES VFTRCBU-20643
		var psTBUIUtilsIn  : PropertySet = TheApplication().NewPropertySet(); //TFERNANDES VFTRCBU-20643
		var psTBUIUtilsOut : PropertySet = TheApplication().NewPropertySet(); //TFERNANDES VFTRCBU-20643

		var sServiceUOM    = Inputs.GetProperty(&quot;ServUOM&quot;);
		var sServiceLength = Inputs.GetProperty(&quot;ServLength&quot;);
		var sOrderDueDate  = Inputs.GetProperty(&quot;DueDate&quot;);
		var sItemStartDate = Inputs.GetProperty(&quot;LIServiceStartDate&quot;); //PSANTOS VFTRCBU-19350		
		var sOrderId       = Inputs.GetProperty(&quot;OrderId&quot;);
		var sBillAccountId = Inputs.GetProperty(&quot;BillingAccountId&quot;); //TFERNANDES VFTRCBU-20643
		var sCustomerType  = Inputs.GetProperty(&quot;CustomerType&quot;); //TFERNANDES VFTRCBU-20643
		var sBillCycle     = Inputs.GetProperty(&quot;BillCycle&quot;);
		var sFDOOrder      = &quot;&quot;;;
		var sBillCycleDate = &quot;&quot;;
		var iMonthDuration = 0;
		var sStartDate     = &quot;&quot;;
		var sStartDay      = &quot;&quot;;
		var sNewDate       = &quot;&quot;;
		var aDateItem      = null;

		if (sServiceUOM == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Bill Cycle&quot;))
		{
			//Start VFTRCBU-31852
			sFDOOrder = CheckFDOOrder(sOrderId);

			if (sFDOOrder == &quot;Y&quot;)
			{
				psTBUIUtilsIn.SetProperty(&quot;isFDO&quot;,   &quot;Y&quot;);
				psTBUIUtilsIn.SetProperty(&quot;DueDate&quot;, sOrderDueDate);						
			}	
			//End VFTRCBU-31852

			psTBUIUtilsIn.SetProperty(&quot;BillingAccountId&quot;, sBillAccountId); //TFERNANDES VFTRCBU-20643
			psTBUIUtilsIn.SetProperty(&quot;CustomerType&quot;,     sCustomerType); //TFERNANDES VFTRCBU-20643

			bsTBUIUtils.InvokeMethod(&quot;CalcBillCycleDate&quot;, psTBUIUtilsIn, psTBUIUtilsOut); //TFERNANDES VFTRCBU-20643

			sBillCycleDate = psTBUIUtilsOut.GetProperty(&quot;CycleDate&quot;); //TFERNANDES VFTRCBU-20643

			iMonthDuration = ToNumber(sServiceLength) - 1;

			if (sBillCycle == &quot;1&quot;)
			{
				iMonthDuration = ToNumber(sServiceLength) - 2;

				if (sFDOOrder == &quot;Y&quot; &amp;&amp; sOrderDueDate != null &amp;&amp; sOrderDueDate != &quot;&quot;)
					sStartDate = sOrderDueDate;
				else if (sItemStartDate != null &amp;&amp; sItemStartDate != &quot;&quot;)
					sStartDate = sItemStartDate;
				else
					Clib.strftime(sStartDate, &quot;%m/%d/%Y&quot;, Clib.localtime(Clib.time()));

				aDateItem = sStartDate.split(&quot;/&quot;);
				sStartDay = aDateItem[1];

				if (sStartDay == &quot;01&quot;)
				{
					iMonthDuration = ToNumber(sServiceLength) - 1;
				}
			}

			Inputs.Reset();
			Inputs.SetProperty(&quot;dateIn&quot;,        sBillCycleDate); 
			Inputs.SetProperty(&quot;monthDuration&quot;, iMonthDuration); 

			bsDateUtils.InvokeMethod(&quot;AddMonthsToDate&quot;, Inputs, Outputs);

			sNewDate  = Outputs.GetProperty(&quot;dateOut&quot;);
			aDateItem = sNewDate.split(&quot;/&quot;);

			if (sBillCycle == &quot;1&quot;)
			{
				if (aDateItem[0] == &quot;01&quot; || aDateItem[0] == &quot;03&quot; || aDateItem[0] == &quot;05&quot; ||
					aDateItem[0] == &quot;07&quot; || aDateItem[0] == &quot;08&quot; || aDateItem[0] == &quot;10&quot; ||
					aDateItem[0] == &quot;12&quot;)
					aDateItem[1] = &quot;31&quot;;
				else if (aDateItem[0] == &quot;02&quot; &amp;&amp; (aDateItem[2] % 4 == &quot;0&quot; ))
					aDateItem[1] = &quot;29&quot;;
				else if (aDateItem[0] == &quot;02&quot; &amp;&amp; (aDateItem[2] % 4 != &quot;0&quot; ))
					aDateItem[1] = &quot;28&quot;;
				else 
					aDateItem[1] = &quot;30&quot;;
			}
			else
			{
				if (sBillCycle.length &gt; 1)
					aDateItem[1] = sBillCycle;
				else
					aDateItem[1] = &quot;0&quot; + sBillCycle;
			}
	
			sNewDate = aDateItem[0] + &quot;/&quot; + aDateItem[1] + &quot;/&quot; + aDateItem[2] + &quot; 23:59:59&quot;;
						
			Outputs.SetProperty(&quot;ToSet&quot;, sNewDate);
		}

		if (sServiceUOM == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Calendar Days&quot;))
		{
			Inputs.Reset();
			Inputs.SetProperty(&quot;dateIn&quot;,      sOrderDueDate);
			Inputs.SetProperty(&quot;dayDuration&quot;, sServiceLength -1);

			bsDateUtils.InvokeMethod(&quot;AddDaysToDate&quot;, Inputs, Outputs);

			sNewDate = Outputs.GetProperty(&quot;dateOut&quot;);
			sNewDate = sNewDate + &quot; 23:59:59&quot;;

		    Outputs.SetProperty(&quot;ToSet&quot;, sNewDate);
		}

		if (sServiceUOM == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Hours&quot;))
		{
			Inputs.Reset();
			Inputs.SetProperty(&quot;inputFormat&quot;,  &quot;MM/DD/YYYY hh:mm:ss&quot;);
			Inputs.SetProperty(&quot;outputFormat&quot;, &quot;MM/DD/YYYY hh:mm:ss&quot;);
			Inputs.SetProperty(&quot;date&quot;,         sItemStartDate);//PSANTOS VFTRCBU-19350
			Inputs.SetProperty(&quot;timePart&quot;,     &quot;h&quot;);
			Inputs.SetProperty(&quot;value&quot;,        ToInteger(sServiceLength));

			bsDateUtils.InvokeMethod(&quot;AddTime&quot;, Inputs, Outputs);

			sNewDate = Outputs.GetProperty(&quot;Result&quot;);	

		    Outputs.SetProperty(&quot;ToSet&quot;,sNewDate); 
		}

		if (sServiceUOM == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Days&quot;))
		{
			Inputs.Reset();
			Inputs.SetProperty(&quot;dateIn&quot;,      sItemStartDate);//DEF-17052
			Inputs.SetProperty(&quot;dayDuration&quot;, sServiceLength);

			bsDateUtils.InvokeMethod(&quot;AddDaysToDatePreserveTime&quot;, Inputs, Outputs);//DEF-17052

			sNewDate = Outputs.GetProperty(&quot;dateOut&quot;);

			Outputs.SetProperty(&quot;ToSet&quot;, sNewDate);
		}

		if (sServiceUOM == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Weeks&quot;))
		{
			Inputs.Reset();
	    	Inputs.SetProperty(&quot;dateIn&quot;,      sItemStartDate);//DEF-17052
			Inputs.SetProperty(&quot;dayDuration&quot;, sServiceLength * 7);

			bsDateUtils.InvokeMethod(&quot;AddDaysToDatePreserveTime&quot;, Inputs, Outputs);//DEF-17052

			sNewDate = Outputs.GetProperty(&quot;dateOut&quot;);

		    Outputs.SetProperty(&quot;ToSet&quot;, sNewDate);
		}

		if (sServiceUOM == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Months&quot;))
		{
			Inputs.Reset();
			Inputs.SetProperty(&quot;dateIn&quot;,        sOrderDueDate);
			Inputs.SetProperty(&quot;monthDuration&quot;, sServiceLength);

			bsDateUtils.InvokeMethod(&quot;AddMonthsToDate&quot;, Inputs, Outputs);

			sNewDate  = Outputs.GetProperty(&quot;dateOut&quot;);
			aDateItem = sNewDate.split(&quot;/&quot;);
			sNewDate  = aDateItem[0] + &quot;/&quot; + aDateItem[1] + &quot;/&quot; +aDateItem[2] + &quot; 23:59:59&quot;;
	
			Outputs.SetProperty(&quot;ToSet&quot;, sNewDate); 
		}
	}
	catch(e)
	{	
		throw(e);
	}
	finally
	{
		aDateItem      = null;
		psTBUIUtilsOut = null;
		psTBUIUtilsIn  = null;
		bsTBUIUtils    = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="02/22/2017 23:30:23"
			   UPDATED_BY="SADMIN"
			   CREATED="08/05/2015 11:55:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CampaignCodeCheckUpgrade"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CampaignCodeCheckUpgrade(Inputs, Outputs)
{
	try
	{
		var boOrder     : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItemXA    : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var boParameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp   = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);		

		var sAddItemId   = Inputs.GetProperty(&quot;ItemIdAdd&quot;);
		var sDelItemId   = Inputs.GetProperty(&quot;ItemIdDell&quot;);
		var sSearchExpr  = &quot;&quot;;
		var sAddCampCode = &quot;&quot;;
		var sDelCampCode = &quot;&quot;;

		Outputs.SetProperty(&quot;result&quot;, &quot;false&quot;);

		if (sAddItemId == null || sAddItemId == &quot;&quot; || sDelItemId == null || sDelItemId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Object Id]=&apos;&quot; + sAddItemId + &quot;&apos; AND [Name]=&apos;Campaign Code&apos;&quot;;

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Value&quot;)
		bcItemXA.SetSearchExpr(sSearchExpr);
		bcItemXA.ExecuteQuery(ForwardOnly);

		if (bcItemXA.FirstRecord())
		{
			sAddCampCode = bcItemXA.GetFieldValue(&quot;Value&quot;);
		}

		sSearchExpr = &quot;[Object Id]=&apos;&quot; + sDelItemId + &quot;&apos; AND [Name]=&apos;Campaign Code&apos;&quot;;

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Value&quot;)
		bcItemXA.SetSearchExpr(sSearchExpr);
		bcItemXA.ExecuteQuery(ForwardOnly);

		if (bcItemXA.FirstRecord())
		{
			sDelCampCode = bcItemXA.GetFieldValue(&quot;Value&quot;);
		}

		if (sAddCampCode == null || sAddCampCode == &quot;&quot; || sDelCampCode == null || sDelCampCode == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Function]=&apos;CampaignUpDown&apos; AND (([Name]=&apos;&quot; + sAddCampCode + &quot;&apos; AND [Value]=&apos;&quot; + sDelCampCode +
					  &quot;&apos;) OR ([Name]=&apos;&quot; + sDelCampCode + &quot;&apos; AND [Value]=&apos;&quot; + sAddCampCode + &quot;&apos;))&quot;;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.SetSearchExpr(sSearchExpr);
		bcParameter.ExecuteQuery(ForwardOnly);

		if (!bcParameter.FirstRecord())
		{
			return;
		}
		
		Outputs.SetProperty(&quot;result&quot;, &quot;true&quot;);
	}
	finally
	{
		bcParameter = null;
		boParameter = null;
		bcItemXA    = null;
		boOrder     = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="08/05/2015 11:55:19"
			   UPDATED_BY="SADMIN"
			   CREATED="05/07/2015 23:46:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAPN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAPN (RootId,PartNum,ErrorMessage,CountResult)
{
	try
	{
		var boItem      : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem      : BusComp     = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
	    var bcItemXA    : BusComp     = boItem.GetBusComp(&quot;TELCO Line Items XA - Simple&quot;);
	    var psAPNList   : PropertySet = TheApplication().NewPropertySet();
	    var boParameter : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
        var bcParameter : BusComp     = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);

		var sResult       = &quot;OK&quot;
		var sErrorMsg     = &quot;&quot;;
		var sSearchExpr   = &quot;&quot;;
		var bHasItem      = false;
		var sItemId       = &quot;&quot;;
		var sItemPartNum  = &quot;&quot;
		var sItemProdName = &quot;&quot;;
		var bHasItemXA    = false;
		var sAttribName   = &quot;&quot;;
		var sAttribValue  = &quot;&quot;;
		var sCampaignCode = &quot;&quot;;
		var sCheckAPN     = &quot;&quot;;
		var PatternX      = /(X)/g;
		var PatternY      = /(Y)/g;

		CountResult.SetProperty(&quot;result&quot;,   sResult);
		CountResult.SetProperty(&quot;ErrorMsg&quot;, sErrorMsg);

		if (RootId == null || RootId == &quot;&quot; || PartNum == null || PartNum == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Root Order Item Id]=&apos;&quot; + RootId +
					  &quot;&apos; AND ([Part Number]=&apos;1116&apos; OR [Part Number]=&apos;&quot; + PartNum + &quot;&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Part Number&quot;);
		bcItem.ActivateField(&quot;Product Translated&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		bHasItem = bcItem.FirstRecord();
				
		while(bHasItem)
		{
			sItemId      = bcItem.GetFieldValue(&quot;Id&quot;);
			sItemPartNum = bcItem.GetFieldValue(&quot;Part Number&quot;);

			if (bcItem.GetFieldValue(&quot;Part Number&quot;) == PartNum)
			{ 
				sItemProdName = bcItem.GetFieldValue(&quot;Product Translated&quot;);
			}

			bcItemXA.SetViewMode(AllView);
			bcItemXA.ClearToQuery();
			bcItemXA.ActivateField(&quot;Name&quot;);
			bcItemXA.ActivateField(&quot;Value&quot;);
			bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId); 
			bcItemXA.ExecuteQuery(ForwardOnly);

			bHasItemXA = bcItemXA.FirstRecord();

			while(bHasItemXA)
			{
				sAttribName  = bcItemXA.GetFieldValue(&quot;Name&quot;);
				sAttribValue = bcItemXA.GetFieldValue(&quot;Value&quot;);

				if (sItemPartNum == PartNum &amp;&amp; sAttribName == &quot;Campaign Code&quot;)
				{ 
					sCampaignCode = bcItemXA.GetFieldValue(&quot;Value&quot;);
				}
								
				if (sItemPartNum == &quot;1116&quot;)
				{
					for (var i=4; i&lt;10; i++)
					{
						if ((sAttribName == &quot;APN&quot;+i) &amp;&amp; sAttribValue != null &amp;&amp; sAttribValue != &quot;&quot;)
						{
							psAPNList.SetProperty(sAttribValue, sAttribValue);
						}
					}
				}			

				bHasItemXA = bcItemXA.NextRecord();
			}

			bHasItem = bcItem.NextRecord();	
		}

		if (sCampaignCode == null || sCampaignCode == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Function]=&apos;VFCampaigns&apos; AND [Value]=&apos;&quot; + sCampaignCode + &quot;&apos; AND [Condition4] IS NOT NULL&quot;;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.ActivateField(&quot;Condition4&quot;);
		bcParameter.SetSearchExpr(sSearchExpr);
		bcParameter.ExecuteQuery(ForwardOnly);

		if (!bcParameter.FirstRecord()) 
		{
			return;
		}

		sCheckAPN = bcParameter.GetFieldValue(&quot;Condition4&quot;);

		if (psAPNList.PropertyExists(sCheckAPN))
		{
			return;
		}
	
		sResult   = &quot;KO&quot;;
		sErrorMsg = ErrorMessage;
		sErrorMsg = sErrorMsg.replace(PatternX,sItemProdName);
		sErrorMsg = sErrorMsg.replace(PatternY,sCheckAPN);

		CountResult.SetProperty(&quot;result&quot;,   sResult);
		CountResult.SetProperty(&quot;ErrorMsg&quot;, sErrorMsg);
	}
	catch(e)
	{	
		throw(e);
	}
	finally
	{
		boParameter = null;
		bcParameter = null;
		psAPNList   = null;
		bcItemXA    = null;
		bcItem      = null;
		boItem      = null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="02/05/2016 08:43:29"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2013 13:44:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBAInOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBAInOrder (Inputs, Outputs)
{
	try
	{
		var OrderEntryBO	:BusObject;
		var bcOrder			:BusComp;
		var bcOrderEntryLI	:BusComp;	
		var Appl = TheApplication();
				
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var ItemId  = Inputs.GetProperty(&quot;ItemId&quot;);
		var BAId    = Inputs.GetProperty(&quot;BAId&quot;);
		var CurrCode = Inputs.GetProperty(&quot;CurrCode&quot;);
		var BAType   = Inputs.GetProperty(&quot;BA Type&quot;);
		var BAStatus = Inputs.GetProperty(&quot;BA Status&quot;);
		OrderEntryBO = Appl.GetBusObject(&quot;X Order Entry&quot;);
		bcOrderEntryLI = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);	
		var strRootBAId = &quot;&quot;;
		var nextRecord = &quot;&quot;;
		var result = &quot;&quot;;
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		
		bcOrderEntryLI.SetViewMode(AllView);
		bcOrderEntryLI.ClearToQuery();
		// Begin: Scripting 15 null check Added 25may2012 Udbhav IDC
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		inProp.SetProperty(&quot;BAId&quot;,BAId);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End 
		bcOrderEntryLI.SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Billing Account Id] = &apos;&quot;+BAId+&quot;&apos;&quot;);
		bcOrderEntryLI.ExecuteQuery(ForwardOnly); //Scripting 31: No child query present 25may2012 Udbhav IDC VFTK
		nextRecord = bcOrderEntryLI.FirstRecord(); 
		if (nextRecord)
		{
			result = true;
		}
		Outputs.SetProperty(&quot;Result&quot;,result);		
	}
	finally
	{
		bcOrderEntryLI = null;
		bcOrder = null;
		OrderEntryBO = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="08/05/2015 11:55:19"
			   UPDATED_BY="SADMIN"
			   CREATED="04/17/2012 14:28:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBAStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBAStatus (Inputs, Outputs)
{
	try
	{
		var boOrder :BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcOrder :BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcItem  :BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sOrderId            = Inputs.GetProperty(&quot;OrderId&quot;);
		var sActionType         = Inputs.GetProperty(&quot;SubType&quot;);
		var sMessage            = &quot;&quot;;
		var sOrderBillAccountId = &quot;&quot;;
		var sFirstBillAccountId = &quot;&quot;;
		var sBillAccountId 		= &quot;&quot;;
		var sBillAccount 		= &quot;&quot;;
		var sBillAccountStatus 	= &quot;&quot;;

		var sActionAdd       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;100&quot;);
		var sActionMNPPortIn = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
		var sActionMigration = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;120&quot;);

		var sStatusCreated   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;,&quot;90&quot;);
		var sStatusActive    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;,&quot;100&quot;);
		var sStatusNoInvoice = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;,&quot;130&quot;);	

		Outputs.SetProperty(&quot;Result&quot;,  &quot;0&quot;);
		Outputs.SetProperty(&quot;Message&quot;, &quot;&quot;);	

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		// Bundled Promotions
		UpdateItemBillingAccount(Inputs, Outputs);

		if (sActionType != null &amp;&amp; sActionType != &quot;&quot; &amp;&amp; sActionType != sActionAdd &amp;&amp; 
			sActionType != sActionMNPPortIn &amp;&amp; sActionType != sActionMigration)
		{
			return;
		}

		// Check if all BAs are Active or Acquired
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Billing Account Id&quot;);
		bcOrder.SetSearchExpr(&quot;[Id] =&apos;&quot; + sOrderId + &quot;&apos;&quot;);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		sOrderBillAccountId = bcOrder.GetFieldValue(&quot;Billing Account Id&quot;);

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Billing Account Status&quot;); 
		bcItem.ActivateField(&quot;Billing Account&quot;);
		bcItem.ActivateField(&quot;Billing Account Id&quot;);
		bcItem.SetSearchExpr(&quot;[Parent Order Item Id] IS NULL&quot;);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sFirstBillAccountId = bcItem.GetFieldValue(&quot;Billing Account Id&quot;);

		do
		{
			sBillAccountId     = bcItem.GetFieldValue(&quot;Billing Account Id&quot;);
			sBillAccount       = bcItem.GetFieldValue(&quot;Billing Account&quot;);
			sBillAccountStatus = bcItem.GetFieldValue(&quot;VF Billing Account Status&quot;);

			if (sBillAccountId == &quot;&quot;)
			{
				sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_134&quot;);

				Outputs.SetProperty(&quot;Result&quot;,  &quot;1&quot;);
				Outputs.SetProperty(&quot;Message&quot;, sMessage);
				return;
			}

			if (sBillAccountStatus != sStatusActive &amp;&amp; sBillAccountStatus != sStatusCreated &amp;&amp;
				sBillAccountStatus != sStatusNoInvoice)
			{
				sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_115a&quot;);
				sMessage = sMessage + &quot; &quot; + sBillAccountStatus + &quot; &quot;;
				sMessage = sMessage + TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_115b&quot;);

				Outputs.SetProperty(&quot;Result&quot;,  &quot;1&quot;);
				Outputs.SetProperty(&quot;Message&quot;, sMessage);
				return;
			}
		}
		while (bcItem.NextRecord());

		if (sOrderBillAccountId == null || sOrderBillAccountId == &quot;&quot;)
		{
			bcOrder.SetFieldValue(&quot;Billing Account Id&quot;, sFirstBillAccountId);
			bcOrder.WriteRecord();
		}
	}
	finally
	{
		bcItem  = null;
		bcOrder = null;
		boOrder = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="08/05/2015 11:55:19"
			   UPDATED_BY="SADMIN"
			   CREATED="12/26/2011 11:08:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCampDeactivation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCampDeactivation(Inputs, Outputs)
{
	try
	{
		var boDelItem     : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcDelItem     : BusComp     = boDelItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boAddItem     : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcAddItem     : BusComp     = boDelItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var psDescription : PropertySet = TheApplication().NewPropertySet();//CR345 BB
		var oToday                      = GetCurrentDate();
		var oEndDate                    = null;
		var psFunctionIn  : PropertySet = TheApplication().NewPropertySet();
		var psFunctionOut : PropertySet = TheApplication().NewPropertySet();

		var sOrderId            = Inputs.GetProperty(&quot;OrderId&quot;);
		var sOrderType          = Inputs.GetProperty(&quot;Type&quot;);
		var sItemSearchExpr     = &quot;&quot;;
		var sDelItemId          = &quot;&quot;;
		var sDelItemPartNum     = &quot;&quot;;
		var sDelItemEndDate     = &quot;&quot;;
		var sDelItemProdGroup   = &quot;&quot;;
		var sDelItemProdType    = &quot;&quot;;
		var sDelItemProdSubType = &quot;&quot;;
		var bBypassDelItem      = false;
		var sAddItemId          = &quot;&quot;;
		var sAddItemPartNum     = &quot;&quot;;
		var iTodayTime          = oToday.getTime();
		var iEndDateTime        = 0;
		var sDescription        = &quot;&quot;;
		var sResult             = &quot;&quot;;

		var sProdGroupCAMP      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP&quot;);
		var sProdGroupCAMPPROMO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;);// Bundled Promotions :: 09.04.2013
		var sProdTypeHANDSET    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;); // Bundled Promotions :: 09.04.2013
		var sSkipPenaltyN       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SKIP_PENALITY&quot;,&quot;N&quot;);
		var sActionDeleted      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var sActionNew          = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);

		Outputs.SetProperty(&quot;Result&quot;, &quot;&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

	    if (sOrderType == null || sOrderType == &quot;&quot; || (sOrderType != &quot;Disconnect&quot; &amp;&amp; sOrderType != &quot;Modify&quot;))
	    {
	    	return;
	    }

		// Searchspec modified :: Bundled Promotions :: 09.04.2013
		//sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [VF Product Group]=&apos;&quot; + sProdGroupCAMP +
		//				  &quot;&apos; AND [VF Skip Penality]=&apos;&quot; + sSkipPenaltyN +&quot;&apos;&quot;;
		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND ([VF Product Group]=&apos;&quot; + sProdGroupCAMPPROMO +
						  &quot;&apos; OR ([VF Product Group]=&apos;&quot; + sProdGroupCAMP + &quot;&apos; AND [VF Product Type] IS NOT NULL&quot; +
						  &quot; AND [VF Product Type]&lt;&gt;&apos;&quot; + sProdTypeHANDSET +
						  &quot;&apos;)) AND [VF Skip Penality]=&apos;&quot; + sSkipPenaltyN +
						  &quot;&apos; AND [VF Root Skip Penalty Flag]=&apos;&quot; + sSkipPenaltyN +
						  &quot;&apos; AND [Action Code]=&apos;&quot; + sActionDeleted + &quot;&apos;&quot;;

		bcDelItem.SetViewMode(AllView);
		bcDelItem.ClearToQuery();
		bcDelItem.ActivateField(&quot;Part Number&quot;);
		bcDelItem.ActivateField(&quot;Service End Date&quot;);
		bcDelItem.ActivateField(&quot;VF Product Group&quot;);
		bcDelItem.ActivateField(&quot;VF Product Type&quot;);
		bcDelItem.ActivateField(&quot;VF Product Sub Type&quot;); //CR345 BB
		bcDelItem.SetSearchExpr(sItemSearchExpr);
		bcDelItem.ExecuteQuery(ForwardOnly);

		if (!bcDelItem.FirstRecord())
		{
			return;
		}

		do
		{
			sDelItemId          = bcDelItem.GetFieldValue(&quot;Id&quot;);
			sDelItemPartNum     = bcDelItem.GetFieldValue(&quot;Part Number&quot;);
			sDelItemEndDate     = bcDelItem.GetFieldValue(&quot;Service End Date&quot;);
			sDelItemProdGroup   = bcDelItem.GetFieldValue(&quot;VF Product Group&quot;);
			sDelItemProdType    = bcDelItem.GetFieldValue(&quot;VF Product Type&quot;);
			sDelItemProdSubType = bcDelItem.GetFieldValue(&quot;VF Product Sub Type&quot;); //CR345 BB
			bBypassDelItem      = false;

			if (sOrderType == &quot;Modify&quot;)
			{
				sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
								  &quot;&apos; AND [VF Product Group]=&apos;&quot; + sDelItemProdGroup +
								  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sDelItemProdType +
								  &quot;&apos; AND [Action Code]=&apos;&quot; + sActionNew + &quot;&apos;&quot;;
				
				bcAddItem.SetViewMode(AllView);
				bcAddItem.ClearToQuery();
				bcAddItem.ActivateField(&quot;Part Number&quot;);
				bcAddItem.SetSearchExpr(sItemSearchExpr);
				bcAddItem.ExecuteQuery(ForwardOnly);

				if (bcAddItem.FirstRecord())
				{
					sAddItemId      = bcAddItem.GetFieldValue(&quot;Id&quot;);
					sAddItemPartNum = bcAddItem.GetFieldValue(&quot;Part Number&quot;);

					// C_MSP00000367 start
					psFunctionIn.Reset();
					psFunctionOut.Reset();

					if (sDelItemProdGroup == sProdGroupCAMPPROMO)
					{
						psFunctionIn.SetProperty(&quot;ItemIdAdd&quot;,  &quot;&quot;);
						psFunctionIn.SetProperty(&quot;ItemIdDell&quot;, &quot;&quot;);
						psFunctionIn.SetProperty(&quot;PartNumAdd&quot;, sAddItemPartNum);
						psFunctionIn.SetProperty(&quot;PartNumDel&quot;, sDelItemPartNum);
	
						CheckUpgrade(psFunctionIn, psFunctionOut)
					}
					else
					{
						psFunctionIn.SetProperty(&quot;ItemIdAdd&quot;,  sAddItemId);
						psFunctionIn.SetProperty(&quot;ItemIdDell&quot;, sDelItemId);

						CampaignCodeCheckUpgrade(psFunctionIn, psFunctionIn)
					}
	
					bBypassDelItem = (psFunctionOut.GetProperty(&quot;result&quot;) == &quot;true&quot;);
					// C_MSP00000367 end
				}
			}

			bBypassDelItem = (bBypassDelItem || sDelItemEndDate == null || sDelItemEndDate == &quot;&quot;);

			if (!bBypassDelItem)
			{
				oEndDate       = new Date(sDelItemEndDate);
				iEndDateTime   = oEndDate.getTime();
				bBypassDelItem = (iEndDateTime &lt;= iTodayTime);
			}

			if (!bBypassDelItem)
			{
				CheckDeactivationControlNum(sDelItemProdSubType, psDescription);//CR345 BB

				sDescription = psDescription.GetProperty(&quot;Description&quot;);//CR345 BB
		
				if (sDescription == &quot;&quot; || sDescription == null)//CR345 BB
				{
					sResult	= TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_040&quot;);
				}
				else//CR345 BB
				{
					sResult = sDescription + &quot; &quot; +
							  TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_372&quot;); //CR345 BB
				}	

				Outputs.SetProperty(&quot;Result&quot;, sResult);
				return;
			}
		}
		while (bcDelItem.NextRecord());
	}
	finally
	{
		psFunctionOut = null;
		psFunctionIn  = null;
		oEndDate      = null;
		oToday        = null;
		psDescription = null;
		bcAddItem     = null;
		boAddItem     = null;
		bcDelItem     = null;
		boDelItem     = null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="08/05/2015 11:55:19"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDeactivationControlNum"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//*****************************************************
//** Function: CheckDeactivationControlNum
//** Purpose:  Added to get the message from 8th control num for Mini Martini &amp; 3 Doors Down (CR345)
//** Inputs :  ProductSubType
//** Outputs:  DescriptionResult
//** Baran Bozoglu
//*****************************************************
function CheckDeactivationControlNum(sProductSubType, psDescription)
{
	try
	{
		var boOrder   : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcControl : BusComp   = boOrder.GetBusComp(&quot;VF Controls Details&quot;);

		var sControlSearchExpr = &quot;&quot;;
		var sDescription       = &quot;&quot;;

		psDescription.SetProperty(&quot;Description&quot;, &quot;&quot;);

		if (sProductSubType == null || sProductSubType == &quot;&quot;)
		{
			return;
		}

		sControlSearchExpr = &quot;[Product Sub Type]=&apos;&quot; + sProductSubType + &quot;&apos; AND [Control Num]=&apos;8&apos;&quot;;

		bcControl.SetViewMode(AllView);
		bcControl.ClearToQuery();
		bcControl.ActivateField(&quot;Description&quot;);
		bcControl.SetSearchExpr(sControlSearchExpr);
		bcControl.ExecuteQuery(ForwardOnly);

		if (bcControl.FirstRecord())
		{
			sDescription = bcControl.GetFieldValue(&quot;Description&quot;);
		}

		psDescription.SetProperty(&quot;Description&quot;, sDescription);
	}
	finally
	{
		bcControl = null;
		boOrder   = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="08/05/2015 11:55:19"
			   UPDATED_BY="SADMIN"
			   CREATED="10/03/2011 14:24:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckExcludeTransactions"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckExcludeTransactions(TransArray,PartNum,orderHeaderReason){
    var XOrderbo :BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
	var Controlbc :BusComp = XOrderbo.GetBusComp(&quot;VF Controls&quot;);
	var ControlDetbc :BusComp = XOrderbo.GetBusComp(&quot;VF Controls Details&quot;);
	var ControlParbc :BusComp = XOrderbo.GetBusComp(&quot;VF Controls Parameters&quot;);
	var sayac=0;	
	var ControlDetailId = null;	
	var result = true;
	var parameterType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PARAMETER_TYPE&quot;,&quot;PT_Transaction&quot;);
	try{
	    	    
		if (TransArray == null)
		{
		    TransArray = new Array;
		    // find Control Detail Id according to PartNum and Control Num 		    
		    with(ControlDetbc)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Control Num&quot;);
				ActivateField(&quot;Part Num&quot;);
				ActivateField(&quot;Control Detail Id&quot;);
				SetSearchSpec(&quot;Control Num&quot;,&quot;112&quot;);
				SetSearchSpec(&quot;Part Num&quot;,PartNum);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
				{
				    ControlDetailId=GetFieldValue(&quot;Control Detail Id&quot;);
					// find transaction code parameters according to Control Detail Id
					with(ControlParbc)
					{
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;VF Control Detail Id&quot;);
						ActivateField(&quot;VF Parameter Type&quot;);
						ActivateField(&quot;VF Parameter Value&quot;);
						SetSearchSpec(&quot;VF Control Detail Id&quot;,ControlDetailId);
						ExecuteQuery(ForwardOnly);
						var record = FirstRecord();
						sayac=0;
						while(record)
						{				
							if (GetFieldValue(&quot;VF Parameter Type&quot;) == parameterType)
							{
								TransArray[sayac]= GetFieldValue(&quot;VF Parameter Value&quot;);
								sayac = sayac+1;
							}
							record = NextRecord();
							
						}
					}
				}
			}
		    
		}
		sayac = (TransArray.length)-1;	
	    while (sayac&gt;=0)
	    {
	        if (orderHeaderReason == TransArray[sayac])
	        {
	           result = false; 
	        }
	    	sayac = sayac -1;							    
	    }	    		
		
	}catch(e){
		result = false;
	}finally{
	
		XOrderbo = null;
		Controlbc = null;
		ControlDetbc = null;
		ControlParbc = null;
		return result;
	}
}"
			   SEQUENCE="12"
			   UPDATED="08/05/2015 11:55:19"
			   UPDATED_BY="SADMIN"
			   CREATED="09/07/2012 18:01:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckFDOOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//JMARQUES - WA#20
function CheckFDOOrder(OrderId)
{
	try
	{
		var boOrder: BusObject   = TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);
		var bcOrder: BusComp     = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);

		if (OrderId != &quot;&quot;)
		{		
			bcOrder.SetViewMode(AllView);
			bcOrder.ClearToQuery();
			bcOrder.ActivateField(&quot;VF Future Order Flag&quot;);
			bcOrder.SetSearchExpr(&quot;[Id] = &apos;&quot; + OrderId + &quot;&apos;&quot;);
			bcOrder.ExecuteQuery(ForwardOnly);
			var bHasItem = bcOrder.FirstRecord();
			
			if (bHasItem)
			{
				return(bcOrder.GetFieldValue(&quot;VF Future Order Flag&quot;));
			}
		}
	}
	catch(e)
	{	
		throw(e);
	}
	finally
	{
		bHasItem = null;
		bcOrder = null;
		boOrder =  null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="08/03/2016 00:39:14"
			   UPDATED_BY="SADMIN"
			   CREATED="08/03/2016 00:39:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckHandsetCampActivation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckHandsetCampActivation(Inputs, Outputs)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		//var bcOrder : BusComp   = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		
		var sProdGroupCAMPPROMO   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;);
		var sProdTypeHANDSETPROMO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var sActionNew            = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		
		var sOrderId        = Inputs.GetProperty(&quot;OrderId&quot;);
		var sResult         = &quot;&quot;;
		var sItemSearchExpr = &quot;&quot;;
		
		//bcOrder.SetViewMode(AllView);
		//bcOrder.ClearToQuery();
		//bcOrder.SetSearchSpec(&quot;Id&quot;,sOrderId);
		//bcOrder.ExecuteQuery(ForwardOnly);

		//if (bcOrder.FirstRecord())
		//{
			sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
							  &quot;&apos; AND [VF Product Group]=&apos;&quot; + sProdGroupCAMPPROMO +
							  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
							  &quot;&apos; AND [Action Code]=&apos;&quot; + sActionNew + &quot;&apos;&quot;;

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.SetSearchExpr(sItemSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord())
				sResult = &quot;OK&quot;;
			else
				sResult = &quot;NOK&quot;;
		//}

		Outputs.SetProperty(&quot;Result&quot;, sResult);
	}
	finally
	{
		bcItem  = null;
		//bcOrder = null;
		boOrder = null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="08/03/2016 00:39:14"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckHandsetCampIntegrity"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckHandsetCampIntegrity(psInputs, psOutputs)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;); //WA39:VFM

		var sOrderId    = psInputs.GetProperty(&quot;OrderId&quot;);
		var sSearchExpr = &quot;&quot;;
		var sErrorCode  = &quot;&quot;;
		var bOk         = true;

		var sActionNew                = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sProdGroupCAMPCONTAINER   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP CONTAINER&quot;);
		var sProdTypeHANDSETCONTAINER = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET CONTAINER&quot;);

		psOutputs.SetProperty(&quot;Error Code&quot;,     sErrorCode);
		psOutputs.SetProperty(&quot;CampaignStatus&quot;, bOk);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionNew +
					  &quot;&apos; AND [VF Product Group]=&apos;&quot; + sProdGroupCAMPCONTAINER +
					  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETCONTAINER +
					  &quot;&apos; AND [Prod Prom Instance Id] IS NULL&quot;; 

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Order Header Id&quot;); //WA39:VFM
		bcItem.ActivateField(&quot;Action Code&quot;); //WA39:VFM
		bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;); //WA39:VFM
		bcItem.ActivateField(&quot;VF Product Group&quot;);
		bcItem.ActivateField(&quot;VF Product Type&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
		{
			sErrorCode	= &quot;X_VF_SBL_HS_CAMP_INV&quot;;
			bOk 		= false;
		}

		psOutputs.SetProperty(&quot;Error Code&quot;,     sErrorCode);
		psOutputs.SetProperty(&quot;CampaignStatus&quot;, bOk); 
	}
	catch(oExcep)
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,     oExcep.errText);
		psOutputs.SetProperty(&quot;CampaignStatus&quot;, false); 
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}"
			   SEQUENCE="15"
			   UPDATED="08/03/2016 00:39:14"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMNPDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMNPDate(Inputs, Outputs)
{
	try
	{
		/*****************************************************************
		 Felipe Lazaretti 02-09-2010
		 Method to check if customer have at least one MNP Subscription 
		 ******************************************************************/
		var boOrder        : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcControl      : BusComp   = boOrder.GetBusComp(&quot;VF Controls&quot;);
		var bcItem         : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var bcCtrDetail    : BusComp   = boOrder.GetBusComp(&quot;VF Controls Details&quot;);
		var bcCtrParameter : BusComp   = boOrder.GetBusComp(&quot;VF Controls Parameters&quot;);
		var boAsset        : BusObject = TheApplication().GetBusObject(&quot;Account&quot;); 
		var bcAssetXA      : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset XA&quot;);
		var bcAsset        : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);
		var boSimpleItem   : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcSimpleItem   : BusComp   = boSimpleItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		var sOrderId           = Inputs.GetProperty(&quot;OrderId&quot;);
		var sErrorMessage      = &quot;&quot;;
		var sAssetIntegId      = &quot;&quot;;
		var sAssetXASearchExpr = &quot;&quot;;
		var sStartDate         = &quot;&quot;;
		var oStartDate         = null;
		var iDelayTime         = 0;
		var iStartDate         = 0;
		var oTodayDate         = null;
		var iTodayDate         = 0;
		var bHasItem           = false;
		var sItemPartNum       = &quot;&quot;;
		var bHasCtrDetail      = false;
		var sCtrDetailId       = &quot;&quot;;
		var bHasCtrParameter   = false;
		var sParameterValue    = &quot;&quot;;
		var sItemSearchExpr    = &quot;&quot;;

		Outputs.SetProperty(&quot;ErrorMessage&quot;, &quot;&quot;);

		bcControl.SetViewMode(AllView);
		bcControl.ClearToQuery();
		bcControl.ActivateField(&quot;Error Msg Trk&quot;);
		bcControl.ActivateField(&quot;Error Msg Enu&quot;);
		bcControl.SetSearchExpr(&quot;[Control Num]=&apos;123&apos;&quot;);
		bcControl.ExecuteQuery(ForwardOnly);

		if (!bcControl.FirstRecord())
		{
			return;
		}

		if (TheApplication().InvokeMethod(&quot;Language&quot;) == &quot;TRK&quot;)
		{
			sErrorMessage = bcControl.GetFieldValue(&quot;Error Msg Trk&quot;);
		}
		else
		{
			sErrorMessage = bcControl.GetFieldValue(&quot;Error Msg Enu&quot;);
		}

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sAssetIntegId = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);						

		sAssetXASearchExpr = &quot;[Root Integration Id]=&apos;&quot; + sAssetIntegId +
							 &quot;&apos; AND [Name]=&apos;Donor Operator&apos; AND [Text Value] IS NOT NULL&quot;;		

		bcAssetXA.SetViewMode(AllView);
		bcAssetXA.ClearToQuery();
		bcAssetXA.SetSearchExpr(sAssetXASearchExpr);	
		bcAssetXA.ExecuteQuery(ForwardOnly);

		if (!bcAssetXA.FirstRecord())
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Install Date&quot;);
		bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sAssetIntegId);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sStartDate = bcAsset.GetFieldValue(&quot;Install Date&quot;);
		oStartDate = new Date(sStartDate);
		iDelayTime = 30 * 24 * 60 * 60 * 1000;
		iStartDate = oStartDate.getTime();
		iStartDate = iStartDate + iDelayTime;
		oTodayDate = GetCurrentDate();
		iTodayDate = oTodayDate.getTime();	 

		if (iStartDate &gt;= iTodayDate)
		{
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Part Number&quot;)
		bcItem.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos;&quot;);
		bcItem.ExecuteQuery(ForwardOnly);

		bHasItem = bcItem.FirstRecord();

		while (bHasItem)
		{			
			sItemPartNum = bcItem.GetFieldValue(&quot;Part Number&quot;);

			bcCtrDetail.SetViewMode(AllView);
			bcCtrDetail.ClearToQuery();
			bcCtrDetail.SetSearchExpr(&quot;[Part Num]=&apos;&quot; + sItemPartNum +&quot;&apos;&quot;);
			bcCtrDetail.ExecuteQuery(ForwardOnly);

			bHasCtrDetail = bcCtrDetail.FirstRecord();

			while (bHasCtrDetail)
			{
				sCtrDetailId = bcCtrDetail.GetFieldValue(&quot;Control Detail Id&quot;);

				bcCtrParameter.SetViewMode(AllView);
				bcCtrParameter.ClearToQuery();
				bcCtrParameter.ActivateField(&quot;VF Parameter Value&quot;);
				bcCtrParameter.SetSearchExpr(&quot;[VF Control Detail Id]=&apos;&quot; + sCtrDetailId + &quot;&apos; AND [VF Parameter Type]=&apos;Part Num&apos;&quot;);
				bcCtrParameter.ExecuteQuery(ForwardOnly);

				bHasCtrParameter = bcCtrParameter.FirstRecord();

				while (bHasCtrParameter)
				{
					sParameterValue = bcCtrParameter.GetFieldValue(&quot;VF Parameter Value&quot;);
					sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +&quot;&apos;  AND [Part Number]=&apos;&quot; + sParameterValue + &quot;&apos;&quot;;

					bcSimpleItem.SetViewMode(AllView);
					bcSimpleItem.ClearToQuery();
					bcSimpleItem.SetSearchExpr(sItemSearchExpr);
					bcSimpleItem.ExecuteQuery(ForwardOnly);

					if (bcSimpleItem.FirstRecord())
					{
						Outputs.SetProperty(&quot;ErrorMessage&quot;, sErrorMessage);
						return;
					}

					bHasCtrParameter = bcCtrParameter.NextRecord();
				}

				bHasCtrDetail = bcCtrDetail.NextRecord();
			}

			bHasItem = bcItem.NextRecord();
		}
	}		
	catch (e)
	{
		Outputs.SetProperty(&quot;ErrorMessage&quot;, e.toString()); 
	}
	finally
	{
		bcSimpleItem   = null;
		boSimpleItem   = null;
		bcAsset        = null;
		bcAssetXA      = null;
		boAsset        = null 
		bcCtrParameter = null;
		bcCtrDetail    = null;
		bcItem         = null;
		bcControl      = null;
		boOrder        = null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="08/03/2016 00:39:14"
			   UPDATED_BY="SADMIN"
			   CREATED="04/04/2013 13:48:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckPTT"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckPTT(Input,Output)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;VF_Auto_Order_RequestOnly_BO&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);		

		var sOrderId          = Input.GetProperty(&quot;OrderId&quot;);
		var sAction           = &quot;&quot;;
		var sProdSubType      = &quot;&quot;;
		var sProdGroup        = &quot;&quot;;
		var sProdName         = &quot;&quot;;
		var bDeletedProdPPT   = false;
		var bExistingAddonPPT = false;
		var sDeletedProdName  = &quot;&quot;;
		var sExistingProdName = &quot;&quot;;
		var sErrorMessage     = &quot;&quot;;

		var sProdSubTypePTTH = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;PTTH&quot;);
		var sProdSubTypePTTD = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;PTTD&quot;);
		var sProdGroupADDON  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;ADDON&quot;);
		var sActionDeleted   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var sActionExisting	 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ActivateField(&quot;VF Product Group&quot;);
		bcItem.ActivateField(&quot;Product Translated&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId); 
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		do
		{		
			sAction      = bcItem.GetFieldValue(&quot;Action Code&quot;);
			sProdSubType = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sProdGroup   = bcItem.GetFieldValue(&quot;VF Product Group&quot;);
			sProdName    = bcItem.GetFieldValue(&quot;Product Translated&quot;);
						
			if (sAction == sActionDeleted &amp;&amp; (sProdSubType == sProdSubTypePTTH || sProdSubType == sProdSubTypePTTD))
			{ 
				bDeletedProdPPT  = true;
				sDeletedProdName = sProdName;
			}

			if (sAction == sActionExisting &amp;&amp; sProdGroup == sProdGroupADDON &amp;&amp;
				(sProdSubType == sProdSubTypePTTH || sProdSubType == sProdSubTypePTTD))
			{
				bExistingAddonPPT = true;
				sExistingProdName = sProdName;
			}
		}
		while(bcItem.NextRecord());
		
		if (bDeletedProdPPT &amp;&amp; bExistingAddonPPT)
		{
			sErrorMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;RSTAB_010&quot;, sDeletedProdName, sExistingProdName);

			Output.SetProperty(&quot;ErrorMessage&quot;, sErrorMessage);
			Output.SetProperty(&quot;ErrorFlag&quot;,    &quot;true&quot;);
		}
	}
	finally
	{
		bcItem  = null;	
		boOrder = null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="05/22/2013 13:34:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckPosition"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckPosition (PositionType,ControlNum,CustomerSubClass)
{
	try
	{
	var XOrderbo : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
	var ControlSkipbc : BusComp = XOrderbo.GetBusComp(&quot;VF Controls Skip&quot;);
	var res = false;
	var Position = &quot;&quot;; 
	var CustSubClass = &quot;&quot;;
	var sAvailableRoles = TheApplication().GetProfileAttr(&quot;TELCO.PositionProfile:Role.AvailableRoles&quot;); //VFTRCBU WA#39
	var sReplacePattrn	= /,/g;
	var sSblPsntSearchSpec = sAvailableRoles.replace(sReplacePattrn, &quot;&apos; OR [Position Type] = &apos;&quot;);//VFTRCBU WA#39
	var sSblPstnProf  = &quot;&quot;;//VFTRCBU WA#39
	var bRecord = false;//VFTRCBU WA#39
	//Begin - Scripting 15 - Input validation
	var inProp 	:PropertySet = TheApplication().NewPropertySet();
	var outProp	: PropertySet = TheApplication().NewPropertySet();
	var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;PositionType&quot;,PositionType);
	inProp.SetProperty(&quot;ControlNum&quot;,ControlNum);
	inProp.SetProperty(&quot;Customer Sub Class&quot;,CustomerSubClass);
	inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;OR&quot;); 
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
	//End - Scripting 15
	with(ControlSkipbc)
	{
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(&quot;Customer Sub Class&quot;);
		ActivateField(&quot;Position Type&quot;);
		SetSearchExpr(&quot;[Control Num] = &apos;&quot;+ControlNum+&quot;&apos; AND ([Position Type] = &apos;&quot;+sSblPsntSearchSpec+&quot;&apos; OR [Customer Sub Class] = &apos;&quot;+CustomerSubClass+&quot;&apos;)&quot;);
		ExecuteQuery(ForwardOnly);
		bRecord = FirstRecord();//VFTRCBU WA#39
		while(bRecord)
		{	
			Position = GetFieldValue(&quot;Position Type&quot;);
			CustSubClass = GetFieldValue(&quot;Customer Sub Class&quot;);
			sSblPstnProf = TheApplication().GetProfileAttr(&quot;TELCO.PositionProfile:Role.&quot; + Position); //VFTRCBU WA#39
			if (Position == &quot;&quot; || CustSubClass == &quot;&quot;){
				res = true;
			}	
			else if (sSblPstnProf == &quot;Y&quot; &amp;&amp; CustSubClass == CustomerSubClass){
				res = true;
			}
			bRecord = NextRecord();//VFTRCBU WA#39
			sSblPstnProf = &quot;&quot;;//VFTRCBU WA#39
		}			
	}
	return(res);
	}
	finally
	{
		Position = null;
		CustSubClass = null;
		ControlSkipbc = null;
		XOrderbo = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="05/20/2011 10:30:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSplitBill"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSplitBill(Inputs, Outputs)
{
	try
	{	
		var OrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
		var OrderEntryBO 	: BusObject;
		var OrderLineItems 	: BusComp;
		var AstBC	 		: BusComp;
		var BOProd			: BusObject;
		var ProdLine		: BusComp;
		var App = TheApplication();
		OrderEntryBO 		= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		OrderLineItems 		= OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		AstBC	 			= OrderEntryBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		BOProd				= App.GetBusObject(&quot;VF Internal Product&quot;);
		ProdLine			= BOProd.GetBusComp(&quot;Internal Product - ISS Admin&quot;);
		var Add				= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strActive		= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var TariffLov 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var BillId			= &quot;&quot;;
		var Rec				= &quot;&quot;;
		var BMsg			= &quot;&quot;;
		var i				= 0;
		var j				= 1;
		var l				= 0;
		var ProdId			= new Array;
		Outputs.SetProperty(&quot;BMsg&quot;,BMsg);
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with (OrderLineItems)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Billing Account Id&quot;);
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Part Number] = &apos;23000&apos; AND [Action Code]=&apos;&quot;+Add+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				BillId = GetFieldValue(&quot;Billing Account Id&quot;);
			else return;
		}
		
		with(AstBC)
		{
			ActivateField(&quot;Product Id&quot;);
			ClearToQuery();
			SetViewMode(AllView);
			var Expr = &quot;[Billing Account Id] = &apos;&quot;+BillId+&quot;&apos; AND [VF Root Part Number] = &apos;1000&apos; AND [VF Product Group]=&apos;&quot;+TariffLov+&quot;&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;;
			SetSearchExpr(Expr);
			ExecuteQuery(ForwardOnly);
			Rec = FirstRecord();
			while(Rec)
			{
				i++;
				ProdId[i] = GetFieldValue(&quot;Product Id&quot;);
				Rec = NextRecord();
			}
		}
		
		l = i;
		for(var k=i; i&gt;0; i--)
		{
			with(ProdLine)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(&quot;[Id] = &apos;&quot;+ProdId[i]+&quot;&apos; AND EXISTS([Product Line] = &apos;Split Bill Compatible Tariff Plans&apos;)&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					j++;
					if(k != l)	break;
				}
				else k--;
			}
		}
		
		if(j == 1)
			App.RaiseErrorText(App.LookupMessage(&quot;VF Message Category&quot;,&quot;R21_192&quot;));
		else
			BMsg = App.LookupMessage(&quot;VF Message Category&quot;,&quot;R21_193&quot;);
			
		Outputs.SetProperty(&quot;BMsg&quot;,BMsg);
	}
	finally
	{
		OrderLineItems 	= null;
		AstBC	 		= null;
		ProdLine		= null;
		OrderEntryBO 	= null;
		BOProd			= null;
		App             = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="19"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="03/14/2012 17:13:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSubsCamp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSubsCamp(Inputs, Outputs)
{
	try
	{
		//GR check matching tariff for subsidy campaign
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sOrderId            = Inputs.GetProperty(&quot;OrderId&quot;);
		var sItemSearchExpr     = &quot;&quot;;
		var sSubsidyPartNum     = &quot;&quot;;
		var sTarifPartNum       = &quot;&quot;;
		var sProdSubTypeSUBSIDY = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;SUBSIDY&quot;);
		var sAddActionCode      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sModActionCode      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [VF Product Sub Type]=&apos;&quot; + sProdSubTypeSUBSIDY +
						  &quot;&apos; AND [Action Code]=&apos;&quot; + sAddActionCode + &quot;&apos;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Part Number&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
			return;
		}

		sSubsidyPartNum = bcItem.GetFieldValue(&quot;Part Number&quot;);

		switch (sSubsidyPartNum)
		{
			case &quot;22300&quot;:
				sTarifPartNum = &quot;1300&quot;;
			break;
			case &quot;22400&quot;:
				sTarifPartNum = &quot;1302&quot;;
			break;
			case &quot;22500&quot;:
				sTarifPartNum = &quot;1303&quot;;
			break;
			case &quot;22600&quot;:
				sTarifPartNum = &quot;1305&quot;;				
			break;
			case &quot;22700&quot;:
				sTarifPartNum = &quot;1306&quot;;
			break;
			case &quot;22800&quot;:
				sTarifPartNum = &quot;1307&quot;;
			break;
		}

		if (sTarifPartNum == null || sTarifPartNum == &quot;&quot;)
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +&quot;&apos; AND [Part Number]=&apos;&quot; + sTarifPartNum +
						  &quot;&apos; AND ([Action Code]=&apos;&quot; + sAddActionCode + &quot;&apos; OR [Action Code]=&apos;&quot; + sModActionCode + &quot;&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
			return;
		}

		Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="08/12/2011 21:10:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTableCtrl"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckTableCtrl (RootId,ProductGroup,ProductType,ProductSubType,PartNum,ShopCode,AccountId,CtrlResult,CustomerType,OrderType,strAssetActDate,OrderSubType,DonorOperator,CustomerClass,orderChannel)
{
	try
	{
		var SalesChannel=ShopCode.substring(0,2);
	    var stSameCustomerType=TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;127&quot;); 
		var app=TheApplication();
		var sCustomerClass=CustomerClass;
		var ControlRes :PropertySet=app.NewPropertySet();
		var ControlResPT:PropertySet;
		var ControlResS:PropertySet;
		var ControlResPS:PropertySet;
		var ControlResPN:PropertySet;
		var ControlResWOS:PropertySet;
		var ControlResPNWOS:PropertySet;
		var inputPS:PropertySet;
		var Input:PropertySet;
		var Output:PropertySet;
		var BS : Service;
		var PSType=&quot;&quot;;
		var result=&quot;OK&quot;;
		var PSTypeInd=1;
		var propName=&quot;&quot;;
		var propValue=&quot;&quot;;	
		var strNewOrder=globalStrNewOrder;
		var strMNPSubType=globalStrMNPSubType; 
		var strpartnumberchild=globalStrpartnumberchild;
		var strpartnumberroot=globalStrpartnumberroot;
		var strConsumer=globalStrConsumer;
		var strBusiness=globalStrBusiness;
		var strBoth=globalStrBoth;
		var strSearchCustType=&quot; ([Customer Type] = &apos;&quot;+strBoth+&quot;&apos; &quot;;
		if(CustomerType==app.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;))
			strSearchCustType=strSearchCustType+&quot;OR [Customer Type] = &apos;&quot;+strConsumer+&quot;&apos;)&quot;;
		else
			strSearchCustType=strSearchCustType+&quot;OR [Customer Type] = &apos;&quot;+strBusiness+&quot;&apos;)&quot;;
		var CtrlDetSearch = &quot;&quot;;
		var CountResult :PropertySet=app.NewPropertySet();
		var XOrderbo :BusObject=app.GetBusObject(&quot;X Order Entry&quot;);
		var Controlbc :BusComp=XOrderbo.GetBusComp(&quot;VF Controls&quot;);
		var ControlDetbc :BusComp=XOrderbo.GetBusComp(&quot;VF Controls Details&quot;);
		var ControlParbc :BusComp=XOrderbo.GetBusComp(&quot;VF Controls Parameters&quot;);
		var ControlSkipbc :BusComp=XOrderbo.GetBusComp(&quot;VF Controls Skip&quot;);
		var sControlType = &quot;&quot;;
		if (SalesChannel.substr(1,1).match(/([0123456789-])/g) != null)
			 SalesChannel= SalesChannel.substr(0,1);
		else
			 SalesChannel= SalesChannel.substr(0,2);
		if (ProductGroup == &quot;&quot; &amp;&amp; ProductType == &quot;&quot; &amp;&amp; ProductSubType == &quot;&quot; &amp;&amp; PartNum == &quot;&quot;)
			CtrlDetSearch=&quot;([Sales Channel] LIKE &apos;*&quot;+SalesChannel+&quot;*&apos; OR [Sales Channel] = &apos;all&apos;) AND [Product Group] is null AND [Product Type] is null AND [Product Sub Type] is null AND [Part Num] is null AND&quot;+strSearchCustType+&quot; AND ([Control Num] NOT LIKE &apos;*:*&apos;) AND ([VFTRCBU Channel] is null OR [VFTRCBU Channel] = &apos;&apos; OR [VFTRCBU Channel] = &apos;&quot;+orderChannel+&quot;&apos;)&quot;;
		else
		{if (ProductGroup == &quot;&quot;)
				ProductGroup=&quot; &quot;;
			if (ProductType == &quot;&quot;)
				ProductType=&quot; &quot;;
			if (ProductSubType == &quot;&quot;)
				ProductSubType=&quot; &quot;;
			if (PartNum == &quot;&quot;)
				PartNum=&quot; &quot;;
			CtrlDetSearch=&quot;([Sales Channel] LIKE &apos;*&quot;+SalesChannel+&quot;*&apos; OR [Sales Channel] = &apos;all&apos;) AND ([Product Group] = &apos;&quot;+ProductGroup+&quot;&apos; OR [Product Type] = &apos;&quot;+ProductType+&quot;&apos; OR [Product Sub Type] = &apos;&quot;+ProductSubType+&quot;&apos; OR [Part Num] = &apos;&quot;+PartNum+&quot;&apos;) AND&quot;+strSearchCustType+&quot; AND ([Control Num] NOT LIKE &apos;*:*&apos;) AND ([VFTRCBU Channel] is null OR [VFTRCBU Channel] = &apos;&apos; OR [VFTRCBU Channel] = &apos;&quot;+orderChannel+&quot;&apos;)&quot;;
		}
		with(ControlDetbc){
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(CtrlDetSearch);
			ExecuteQuery(ForwardOnly);
			var CtrlToCheck = FirstRecord();
				while(CtrlToCheck){	
					var strCustType=GetFieldValue(&quot;Customer Type&quot;);
					var ControlNum=GetFieldValue(&quot;Control Num&quot;);
					var ControlDetId=GetFieldValue(&quot;Control Detail Id&quot;);
					var ActiveFlag=GetFieldValue(&quot;Active Flag&quot;);
					var ByPassFlg=GetFieldValue(&quot;By Pass Flag&quot;);
					var Description=GetFieldValue(&quot;Description&quot;);
					sControlType=GetFieldValue(&quot;Control Type&quot;);
					var DetSalesChannel=GetFieldValue(&quot;Sales Channel&quot;);
					var MaxLimit=&quot;&quot;;
					var Trans=new Array;
					var sayac=0;
					var controlObject=GetFieldValue(&quot;VF Control Object&quot;);
			        var controlObjectName=GetFieldValue(&quot;VF Control Object Name&quot;);
			        var controlObjectMethod=GetFieldValue(&quot;VF Control Object Method&quot;);
					with(ControlParbc){	
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;VF Control Detail Id&quot;);
						ActivateField(&quot;VF Parameter Type&quot;);
						ActivateField(&quot;VF Parameter Value&quot;);
						ActivateField(&quot;VF Parameter Name&quot;);
						SetSearchSpec(&quot;VF Control Detail Id&quot;,ControlDetId);
						ExecuteQuery(ForwardOnly);
						var record = FirstRecord();
						sayac=0;
						while(record){	
							var ParamValue = ControlParbc.GetFieldValue(&quot;VF Parameter Name&quot;);
							if (GetFieldValue(&quot;VF Parameter Type&quot;) == app.InvokeMethod(&quot;LookupValue&quot;,&quot;PARAMETER_TYPE&quot;,&quot;PT_Limit&quot;))
										MaxLimit=GetFieldValue(&quot;VF Parameter Value&quot;);
									if (GetFieldValue(&quot;VF Parameter Type&quot;) == app.InvokeMethod(&quot;LookupValue&quot;,&quot;PARAMETER_TYPE&quot;,&quot;PT_Transaction&quot;)){
										Trans[sayac]= GetFieldValue(&quot;VF Parameter Value&quot;);
										sayac=sayac+1;
									}
									record=NextRecord();}}
					if (app.InvokeMethod(&quot;Language&quot;) == &quot;TRK&quot;)
						var ErrorMessage=GetFieldValue(&quot;Error Message Trk&quot;);
					else
						var ErrorMessage=GetFieldValue(&quot;Error Message Enu&quot;);
					switch (ControlNum){ 
						case &quot;91&quot;: if (ActiveFlag == &quot;Y&quot;){
						CheckAPN(RootId,PartNum,ErrorMessage,CountResult);
						var ControlResAPN = app.NewPropertySet();
						SetResultsetValue(&quot;ControlResAPN&quot;, CountResult.GetProperty(&quot;result&quot;),&quot;&quot;,&quot;&quot;,ControlNum,ControlDetId,ByPassFlg,CountResult.GetProperty(&quot;ErrorMsg&quot;),Description,sControlType,ControlResAPN);
						CtrlResult.AddChild(ControlResAPN);
						}
						break;
						case &quot;1&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
								var boParameters : BusObject=TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
								var bcParameters : BusComp=boParameters.GetBusComp(&quot;ACS NI Parameter&quot;);
								var strSubTypeCheck=&quot;&quot;;
								var strexception=&quot;&quot;;
								with(bcParameters){
									var strParameterSrcExpr=&quot;[Function] = &apos;VFLimitException&apos;&quot;;
									bcParameters.ClearToQuery();
									bcParameters.SetViewMode(AllView);	
									bcParameters.SetSearchExpr(strParameterSrcExpr);
									bcParameters.ExecuteQuery(ForwardOnly);	
									var isRec=bcParameters.FirstRecord();
									while(isRec){
										strexception=bcParameters.GetFieldValue(&quot;Value&quot;);
										if (strexception==ProductSubType){
										strSubTypeCheck=&quot;OK&quot;;
										}				
										isRec=bcParameters.NextRecord();
									}		
								}
								if (strSubTypeCheck==&quot;&quot;){
									FindAssetOrderPT(AccountId,ProductType,ShopCode,DetSalesChannel,MaxLimit,CountResult);
									ControlResPT=app.NewPropertySet();
									SetResultsetValue(&quot;ControlResultsPT&quot;,CountResult.GetProperty(&quot;result&quot;),CountResult.GetProperty(&quot;TotalCount&quot;),MaxLimit,ControlNum,ControlDetId, ByPassFlg,ErrorMessage,ProductType,sControlType,ControlResPT);
									CtrlResult.AddChild(ControlResPT);
								}
								else{
									ControlResPT=app.NewPropertySet();
									SetResultsetValue(&quot;ControlResultsPT&quot;,&quot;OK&quot;,&quot;0&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,ProductType,sControlType,ControlResPT);
									CtrlResult.AddChild(ControlResPT);
								}								
							}
						break;
						case &quot;2&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
								FindAssetOrderS(AccountId,ShopCode,MaxLimit,SalesChannel,CountResult,strCustType);
								ControlResS=app.NewPropertySet();
								SetResultsetValue(&quot;ControlResultsS&quot;,CountResult.GetProperty(&quot;result&quot;),CountResult.GetProperty(&quot;TotalCount&quot;),MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,&quot;SC&quot;,sControlType,ControlResS);
								CtrlResult.AddChild(ControlResS);
							}
						break;	
						case &quot;3&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
								FindAssetOrderPS(AccountId,ProductSubType,ShopCode,MaxLimit,CountResult);
								ControlResPS=app.NewPropertySet();
								SetResultsetValue(&quot;ControlResPS&quot;,CountResult.GetProperty(&quot;result&quot;),CountResult.GetProperty(&quot;TotalCount&quot;),MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,ProductSubType,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);}
						break;
						case &quot;4&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
								FindAssetOrderPN(AccountId,PartNum,ShopCode,MaxLimit,CountResult);
								ControlResPN=app.NewPropertySet();
								SetResultsetValue(&quot;ControlResPN&quot;,CountResult.GetProperty(&quot;result&quot;),CountResult.GetProperty(&quot;TotalCount&quot;),MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,PartNum,sControlType,ControlResPN);
								CtrlResult.AddChild(ControlResPN);}
						break;
						case &quot;7&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
								FindAssetOrderWOS(AccountId,ProductSubType,ShopCode,MaxLimit,CountResult,sCustomerClass,ParamValue);
								ControlResWOS = app.NewPropertySet();
								SetResultsetValue(&quot;ControlResWOS&quot;,CountResult.GetProperty(&quot;result&quot;),CountResult.GetProperty(&quot;TotalCount&quot;),MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResWOS);
								CtrlResult.AddChild(ControlResWOS);}
						break;
						case &quot;9&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
								FindAssetOrderPNWOS(AccountId,ProductSubType,ShopCode,MaxLimit,CountResult);
								ControlResPNWOS=app.NewPropertySet();
								SetResultsetValue(&quot;ControlResPNWOS&quot;, CountResult.GetProperty(&quot;result&quot;),CountResult.GetProperty(&quot;TotalCount&quot;),MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPNWOS);
								CtrlResult.AddChild(ControlResPNWOS);}
						break;
						case &quot;107&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
								Input=TheApplication().NewPropertySet();
								Output=TheApplication().NewPropertySet();
								Input.SetProperty(&quot;ASSET_INTEG_ID&quot;,AssetIntegId);
								if (controlObject==&quot;Business Service&quot;){		    
									BS=TheApplication().GetService(controlObjectName);
									BS.InvokeMethod(controlObjectMethod,Input,Output);}
								var ControlResPS = TheApplication().NewPropertySet();
						     	if (Output.GetProperty(&quot;STATUS_CODE&quot;)!=&quot;OK&quot;)	
								    result=&quot;K0&quot;;
								SetResultsetValue(&quot;ControlResPS&quot;,result,&quot;&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);
							}
						break;
						case &quot;120&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
							    ControlResPS=TheApplication().NewPropertySet();
							    SetResultsetValue(&quot;ControlResPS&quot;,&quot;KO&quot;,&quot;0&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);}
						break;	
						case &quot;110&quot;: 
							if (ActiveFlag == &quot;Y&quot;){
							    Input=TheApplication().NewPropertySet();
								Output=TheApplication().NewPropertySet();
								Input.SetProperty(&quot;CUSTOMER_CODE&quot;,CustomerCode);
								Input.SetProperty(&quot;ROOT_ASSET_INTEG_ID&quot;,AssetIntegId);
								Input.SetProperty(&quot;ROOT_ASSET_ID&quot;,&quot;.&quot;);
								Input.SetProperty(&quot;CAMPAIGN_CODE&quot;,&quot;.&quot;);
								Input.SetProperty(&quot;Control Id&quot;,ControlDetId);
								if (controlObject==&quot;Business Service&quot;){		    
									BS=TheApplication().GetService(controlObjectName);
									BS.InvokeMethod(controlObjectMethod,Input,Output);
								}
								var ControlResPS = TheApplication().NewPropertySet();
								if (Output.GetProperty(&quot;STATUS_CODE&quot;)!=&quot;OK&quot;){
									result=&quot;KO&quot;;}
								SetResultsetValue(&quot;ControlResPS&quot;,result,&quot;&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);
							}
						break;
						case &quot;101&quot;:
							if (ActiveFlag == &quot;Y&quot;)
							{
							    Input=TheApplication().NewPropertySet();
								Output=TheApplication().NewPropertySet();
								Input.SetProperty(&quot;CUSTOMER_CODE&quot;,CustomerCode);
								Input.SetProperty(&quot;ROOT_ASSET_INTEG_ID&quot;,AssetIntegId);
								Input.SetProperty(&quot;CAMPAIGN_CODE&quot;,&quot;.&quot;);
								Input.SetProperty(&quot;Control Id&quot;,ControlDetId);
								if (controlObject==&quot;Business Service&quot;)	
							    {
									BS=TheApplication().GetService(controlObjectName);
									BS.InvokeMethod(controlObjectMethod,Input,Output);
								}								
								var ControlResPS = TheApplication().NewPropertySet();
								if (Output.GetProperty(&quot;STATUS_CODE&quot;)!=&quot;OK&quot;)
								    result=&quot;KO&quot;;
							    SetResultsetValue(&quot;ControlResPS&quot;,result,&quot;&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);
						}
						break;
						case &quot;111&quot;: 
							if (ActiveFlag == &quot;Y&quot;)
							{	
							    Input=TheApplication().NewPropertySet();
								Output=TheApplication().NewPropertySet();
								Input.SetProperty(&quot;CUSTOMER_CODE&quot;,CustomerCode);
								Input.SetProperty(&quot;Control Id&quot;,ControlDetId);
								Input.SetProperty(&quot;ROOT_ASSET_INTEG_ID&quot;,AssetIntegId);
								if (controlObject==&quot;Business Service&quot;)	
							    {
									BS=TheApplication().GetService(controlObjectName);
									BS.InvokeMethod(controlObjectMethod,Input,Output);
								}
								var ControlResPS = TheApplication().NewPropertySet();
								if (Output.GetProperty(&quot;STATUS_CODE&quot;)!=&quot;OK&quot;)	
								   result=&quot;KO&quot;;
								SetResultsetValue(&quot;ControlResPS&quot;,result,&quot;&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);
							}
						break;
						case &quot;121&quot;: 
							if (ActiveFlag == &quot;Y&quot;)
							{	
							    ControlResPS = TheApplication().NewPropertySet();
							    SetResultsetValue(&quot;ControlResPS&quot;,&quot;KO&quot;,&quot;0&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);
							}
						break;	
						case &quot;112&quot;: 
							if (ActiveFlag == &quot;Y&quot;)
							{	
							    ControlResPS=TheApplication().NewPropertySet();
							    if (!CheckExcludeTransactions(Trans,null,OrderHeaderReason))
							    	result=&quot;KO&quot;;
							    SetResultsetValue(&quot;ControlResPS&quot;,result,&quot;0&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);
							}
						break;		
						case &quot;122&quot;: 
							if (ActiveFlag == &quot;Y&quot;)
							{	  ControlResPS = TheApplication().NewPropertySet();
							    if (OrderType != strNewOrder &amp;&amp; DonorOperator !=&quot;&quot;) result=&quot;OK&quot;
							    else if (OrderType == strNewOrder &amp;&amp; OrderSubType != strMNPSubType &amp;&amp; OrderSubType!=stSameCustomerType) 
									{
										result=&quot;KO&quot;;
									}
								else
									{
										if (OrderSubType != strMNPSubType);
										var dtStartDate=new Date(strAssetActDate);
										var strMonth=dtStartDate.getMonth();
										var strDayinMonth=31;
										if (strMonth == &apos;3&apos; || strMonth == &apos;5&apos; || strMonth == &apos;8&apos; || strMonth == &apos;9&apos;)
											strDayinMonth=30;
										else if (strMonth == &apos;1&apos;)
											strDayinMonth=28;
										var DelayAsset = MaxLimit * strDayinMonth * 24 * 60 * 60 * 1000;
										dtStartDate=dtStartDate.getTime();
										dtStartDate=dtStartDate + DelayAsset;
										var strtoday=new Date();
										strtoday=strtoday.getTime();	 
										if (dtStartDate &gt; strtoday)result = &quot;KO&quot;;
								    }
							    SetResultsetValue(&quot;ControlResPS&quot;,result,&quot;0&quot;,MaxLimit,ControlNum,ControlDetId,ByPassFlg,ErrorMessage,Description,sControlType,ControlResPS);
								CtrlResult.AddChild(ControlResPS);
							}
						break;
case &quot;104&quot;: 
{	var boOrder : BusObject=TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
	var bcOrderSimple : BusComp=boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
  	var bcOrderLineSimple : BusComp=boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
	with(bcOrderSimple)
	{
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(&quot;Part #&quot;, strpartnumberroot);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{
		bcOrderLineSimple.ClearToQuery();
		bcOrderLineSimple.SetSearchSpec(&quot;Part #&quot;, strpartnumberchild);
		bcOrderLineSimple.ExecuteQuery(ForwardOnly);
		if(!(FirstRecord())) var sResult = &quot;KO&quot;;
		}
	}
break;
					}}
					CtrlToCheck=NextRecord();
				}}
}
	finally
	{	ControlParbc=null;
		Controlbc=null;
		ControlDetbc=null;
		ControlSkipbc=null;
		XOrderbo=null;
		ControlRes=null;
		CountResult=null;
		ControlResPT=null;
		ControlResS=null;
		ControlResPS=null;
		ControlResPN=null;
		ControlResWOS=null;
		ControlResPNWOS=null;
		Input=null;
		Output=null;
		ControlResPS=null;
		app=null;
		BS=null;
		bcOrderLineSimple=null;
		bcOrderSimple=null;
		boOrder=null;
	}
}"
			   SEQUENCE="21"
			   UPDATED="01/24/2018 13:49:25"
			   UPDATED_BY="IBM_FIGENB"
			   CREATED="06/27/2012 13:29:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTariffPlanChange"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckTariffPlanChange (Inputs, Outputs)
{
	try
	{
		var OrderEntryBO 	: BusObject;
		var OrderLineItems 	: BusComp;
		var App = TheApplication();
		OrderEntryBO 		= App.GetBusObject(&quot;X Order Entry&quot;);
		OrderLineItems 		= OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var TariffLov 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var DelActionCode 	= App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var AddActionCode 	= App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);		//R2.1 - WP03
		var SkipFlag 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SKIP_PENALITY&quot;,&quot;N&quot;);
		var OrderId 		= Inputs.GetProperty(&quot;OrderId&quot;);
		var CustomerSubClass = Inputs.GetProperty(&quot;VF Customer Sub Class&quot;);
		var SerStartDt 		= &quot;&quot;;
		var BillAccntId 	= &quot;&quot;;
		var BillCycleDate 	= &quot;&quot;;
		var ControlNum 		= &quot;6&quot;;
		var Result 			= &quot;&quot;;
		var Skip 			= &quot;&quot;;
		var NewTariffPlan 	= &quot;KO&quot;;
		var Temp			= &quot;&quot;;
		var DueDate			= &quot;&quot;;
		var Today 			= GetCurrentDate();
		var TodayMS 		= Today.getTime();		
		var InPos : PropertySet;
		var OutPos : PropertySet;
		var FutureDateOrder = &quot;&quot;;
		with (OrderLineItems)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Service Start Date&quot;);
			ActivateField(&quot;Due Date&quot;);
			ActivateField(&quot;VF Future Order Flag&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [VF Product Group] = &apos;&quot;+TariffLov+&quot;&apos; AND [Action Code] = &apos;&quot;+DelActionCode+&quot;&apos;&quot;);//)OR [Action Code] = &apos;&quot;+AddActionCode+&quot;&apos;)&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				BillAccntId = GetFieldValue(&quot;Billing Account Id&quot;);
				SerStartDt = GetFieldValue(&quot;Service Start Date&quot;);
				FutureDateOrder = GetFieldValue(&quot;VF Future Order Flag&quot;);
				DueDate = GetFieldValue(&quot;Due Date&quot;);
				if (DueDate != &quot;&quot;)
				{
					Today = new Date(DueDate);
					TodayMS = Today.getTime();
				}
				if(FutureDateOrder != &quot;Y&quot;){
					NewTariffPlan = &quot;OK&quot;;
				}
				var BillCycle = GetBillCycle(BillAccntId);
				var TodayDate = Today.getDate();
				if (TodayDate &gt; BillCycle)
				{
					BillCycleDate = (Today.getMonth()+1)+&quot;/&quot;+BillCycle+&quot;/&quot;+Today.getFullYear();
				}
				else
				{
					if (Today.getMonth() == 0)
					{
						BillCycleDate = 12 +&quot;/&quot;+BillCycle+&quot;/&quot;+(Today.getFullYear()-1);
					}
					else
					{
						BillCycleDate = Today.getMonth()+&quot;/&quot;+BillCycle+&quot;/&quot;+Today.getFullYear();
					}
				}
				var BCDate = new Date(BillCycleDate);
				var BCDateMS = BCDate.getTime();
				var SSDate = new Date(SerStartDt);
				var SSDateMS = SSDate.getTime();
				if (SSDateMS &gt; BCDateMS)
				{
					InPos = App.NewPropertySet();
					OutPos = App.NewPropertySet();
					InPos.SetProperty(&quot;ControlNum&quot;,&quot;76&quot;);
					InPos.SetProperty(&quot;ControlType&quot;,&quot;Tariff&quot;);
					InPos.SetProperty(&quot;VF Customer Sub Class&quot;,CustomerSubClass);
					ControlSkipPosition(InPos,OutPos);
					if (OutPos.GetProperty(&quot;Result&quot;) == &quot;KO&quot;)
					{
						Result = OutPos.GetProperty(&quot;ErrorMsg&quot;);
					}
					else
					{
						Skip = &quot;Y&quot;;
						Result = OutPos.GetProperty(&quot;ErrorMsg&quot;);
					}
				}

			}
		}

		var LoginName = App.LoginName();
		Outputs.SetProperty(&quot;Result&quot;,Result);
		Outputs.SetProperty(&quot;Skip&quot;,Skip);
		Outputs.SetProperty(&quot;Login&quot;,LoginName);
		Outputs.SetProperty(&quot;NewTariffPlan&quot;,NewTariffPlan);
		
		Temp = RefNumTariffCheck(OrderId, &quot;Y&quot;);
		Outputs.SetProperty(&quot;Amalf&quot;,Temp);
	}
	finally
	{
		OrderLineItems		= null;
		OrderEntryBO 		= null;
		inProp 				= null;
		outProp	 			= null;
		InPos 				= null;
		OutPos 				= null;
		BS		 			= null;
		LoginName 			= null;
		App 				= null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="07/27/2011 12:50:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckUpgrade"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckUpgrade(Inputs, Outputs)//Amul - Changed arguments for C_MSP00000367
{
	try
	{
		var boOrder     : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem      : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boParameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp   = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);		

		var sResult                   = &quot;false&quot;;
		var sAddHandsetRootItemId     = Inputs.GetProperty(&quot;ItemIdAdd&quot;);
		var sDelHandsetRootItemId     = Inputs.GetProperty(&quot;ItemIdDell&quot;);
		var sAddPromotionPartNum      = Inputs.GetProperty(&quot;PartNumAdd&quot;);
		var sDelPromotionPartNum      = Inputs.GetProperty(&quot;PartNumDel&quot;);
		var sSearchExpr               = &quot;&quot;;
		var sOrderId                  = &quot;&quot;;
		var sDelPromotionAssetIntegId = &quot;&quot;;

		Outputs.SetProperty(&quot;result&quot;, sResult);

		if ((sAddHandsetRootItemId == null || sAddHandsetRootItemId == &quot;&quot; ||
			 sDelHandsetRootItemId == null || sDelHandsetRootItemId == &quot;&quot;) &amp;&amp;
		    (sAddPromotionPartNum == null || sAddPromotionPartNum == &quot;&quot; ||
			 sDelPromotionPartNum == null || sDelPromotionPartNum == &quot;&quot;))
		{
			return;
		}

		if (sAddPromotionPartNum == null || sAddPromotionPartNum == &quot;&quot; ||
			sDelPromotionPartNum == null || sDelPromotionPartNum == &quot;&quot;)
		{
			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;VF BP Part #&quot;);
			bcItem.SetSearchSpec(&quot;Id&quot;, sAddHandsetRootItemId);
			bcItem.ExecuteQuery(ForwardOnly);

			if (!bcItem.FirstRecord())
			{
				return;
			}

			sAddPromotionPartNum = bcItem.GetFieldValue(&quot;VF BP Part #&quot;);

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;Order Header Id&quot;);
			bcItem.ActivateField(&quot;VF Old Prod Prom Instance Id&quot;);
			bcItem.SetSearchSpec(&quot;Id&quot;, sDelHandsetRootItemId);
			bcItem.ExecuteQuery(ForwardOnly);

			if (!bcItem.FirstRecord())
			{
				return;
			}

			sOrderId                  = bcItem.GetFieldValue(&quot;Order Header Id&quot;);
			sDelPromotionAssetIntegId = bcItem.GetFieldValue(&quot;VF Old Prod Prom Instance Id&quot;);

			if (sDelPromotionAssetIntegId == null || sDelPromotionAssetIntegId == &quot;&quot;)
			{
				return;
			}

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;Part Number&quot;);
			bcItem.SetSearchSpec(&quot;Order Header Id&quot;,      sOrderId);
			bcItem.SetSearchSpec(&quot;Asset Integration Id&quot;, sDelPromotionAssetIntegId);
			bcItem.ExecuteQuery(ForwardOnly);

			if (!bcItem.FirstRecord())
			{
				return;
			}

			sDelPromotionPartNum = bcItem.GetFieldValue(&quot;Part Number&quot;);
		}

		if (sAddPromotionPartNum == null || sAddPromotionPartNum == &quot;&quot; ||
			sDelPromotionPartNum == null || sDelPromotionPartNum == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Function]=&apos;CampaignUpDown&apos; AND &quot; +
					  &quot;([Name]=&apos;&quot; + sAddPromotionPartNum + &quot;&apos; OR [Value]=&apos;&quot; + sAddPromotionPartNum + &quot;&apos;) AND &quot; +
					  &quot;([Name]=&apos;&quot; + sDelPromotionPartNum + &quot;&apos; OR [Value]=&apos;&quot; + sDelPromotionPartNum + &quot;&apos;)&quot;;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.SetSearchExpr(sSearchExpr);
		bcParameter.ExecuteQuery(ForwardOnly);

		if (bcParameter.FirstRecord())
		{
			sResult = &quot;true&quot;;
		}		
		
		Outputs.SetProperty(&quot;result&quot;, sResult);
	}
	finally
	{
		bcParameter = null;
		boParameter = null;
		bcItem      = null;
		boOrder     = null;
	}
}"
			   SEQUENCE="23"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckUpgrdDowngrd"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckUpgrdDowngrd (Inputs, Outputs)
{
	try
	{
		var boOrder           : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem            : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boParameter       : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter       : BusComp     = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		var psItemEndDateList : PropertySet = TheApplication().NewPropertySet();
		var psItemEndDate     : PropertySet = null;

		var sOrderId 		    = Inputs.GetProperty(&quot;OrderId&quot;);
		var sItemSearchExpr     = &quot;&quot;;
		var bHasHPItem          = false;
		var iHPItemCounter      = 0;
		var sHPItemAction       = &quot;&quot;;
		var sHPAssetIntegId     = &quot;&quot;;
		var sHPItemPartNum      = &quot;&quot;;
		var sDelHPPartNum	    = &quot;&quot;;
		var sDelHPAsssetIntegId = &quot;&quot;;
		var sAddHPPartNum       = &quot;&quot;;
		var sAddHPAsssetIntegId = &quot;&quot;;
		var sParamSearchExpr    = &quot;&quot;;
		var sParameterName      = &quot;&quot;;
		var sParameterValue     = &quot;&quot;;
		var sParameterCond      = &quot;&quot;;
		var sUpdDownLimit       = &quot;&quot;;
		var sTerminationReason  = &quot;&quot;;
		var bBypassCounter      = false;
		var sUpDownCounter      = &quot;&quot;;
		var iUpDownCounter      = 0;
		var bHasItem            = false;
		var sItemProdType       = &quot;&quot;;
		var sItemProdSubType    = &quot;&quot;;
		var sItemAction         = &quot;&quot;;
		var sItemAssetIntegId   = &quot;&quot;;
		var bBypassSkipPenalty  = false;
		var iItemEndDateCounter = 0;
		var iItem               = 0;
		var sAddedItemEndDate   = &quot;&quot;;

		var sProdTypeHANDSETPROMO     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;); //Bundled Promotions
		var sProdSubTypeKAFEIN        = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;KAFEIN&quot;);
		var sProdSubTypeRECMLINE 	  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;RECMLINE&quot;);
		var sProdSubTypeVODEM         = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;VODEM&quot;);
		var sProdSubTypeVODEMCAMPAIGN = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;VODEM CAMPAIGN&quot;); // VFTRCBU Retrofits | 21.01.2015 | TiagoRocha
		var sActionDeleted            = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var sActionNew 	              = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sActionModified 	      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);
		var sSkipPenaltyY 		      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SKIP_PENALITY&quot;,&quot;Y&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
						  &quot;&apos; AND ([VF Product Sub Type]=&apos;&quot; + sProdSubTypeKAFEIN +
						  &quot;&apos; OR [VF Product Sub Type]=&apos;&quot; + sProdSubTypeVODEM +
						  &quot;&apos; OR [VF Product Sub Type]=&apos;&quot; + sProdSubTypeVODEMCAMPAIGN +
						  &quot;&apos;) AND ([Action Code]=&apos;&quot; + sActionDeleted + &quot;&apos; OR [Action Code]=&apos;&quot; + sActionNew + &quot;&apos;)&quot;; //BundlePromotions

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.ActivateField(&quot;Part Number&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);//Added Kafein case for CR201
		bcItem.ExecuteQuery(ForwardOnly);

		bHasHPItem = bcItem.FirstRecord();

		if (!bHasHPItem)
		{
			return;
		}

		while (bHasHPItem)
		{
			iHPItemCounter = iHPItemCounter + 1

			sHPItemAction   = bcItem.GetFieldValue(&quot;Action Code&quot;);
			sHPAssetIntegId = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);//BundledPromotions
			sHPItemPartNum  = bcItem.GetFieldValue(&quot;Part Number&quot;);

			if (sHPItemAction == sActionDeleted)
			{
				sDelHPPartNum       = sHPItemPartNum; //BundledPromotions
				sDelHPAsssetIntegId = sHPAssetIntegId;
			}

			if (sHPItemAction == sActionNew)
			{
				sAddHPPartNum       = sHPItemPartNum; //BundledPromotions
				sAddHPAsssetIntegId = sHPAssetIntegId;
			}

			bHasHPItem = bcItem.NextRecord()
		}

		if (iHPItemCounter != 2 ||
			sDelHPPartNum == null || sDelHPPartNum == &quot;&quot; ||
			sAddHPPartNum == null || sAddHPPartNum == &quot;&quot;)
		{
			return;
		}

		if (sAddHPPartNum == sDelHPPartNum)
		{
			sTerminationReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TERMINATION_REASON&quot;,&quot;Upgrade&quot;);
			bBypassCounter = true;
		}

		if (!bBypassCounter)
		{
			sParamSearchExpr = &quot;[Function]=&apos;CampaignUpDown&apos; AND &quot; +
							   &quot;(([Name]=&apos;&quot; + sDelHPPartNum + &quot;&apos; AND [Value]=&apos;&quot; + sAddHPPartNum + &quot;&apos;) OR &quot; +
							   &quot;([Name]=&apos;&quot; + sAddHPPartNum + &quot;&apos; AND [Value]=&apos;&quot; + sDelHPPartNum + &quot;&apos;))&quot;;

			bcParameter.SetViewMode(AllView);
			bcParameter.ClearToQuery();
			bcParameter.ActivateField(&quot;Name&quot;);
			bcParameter.ActivateField(&quot;Value&quot;);
			bcParameter.ActivateField(&quot;Condition1&quot;);
			bcParameter.SetSearchExpr(sParamSearchExpr);
			bcParameter.ExecuteQuery(ForwardOnly)

			if (!bcParameter.FirstRecord())
			{
				return;
			}

			do
			{
				sParameterName  = bcParameter.GetFieldValue(&quot;Name&quot;);
				sParameterValue = bcParameter.GetFieldValue(&quot;Value&quot;);
				sParameterCond  = bcParameter.GetFieldValue(&quot;Condition1&quot;);
	
				if (sParameterName == sDelHPPartNum &amp;&amp; sParameterValue == sAddHPPartNum) //Upgrade Scenario
				{
					sUpdDownLimit      = sParameterCond;
					sTerminationReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TERMINATION_REASON&quot;,&quot;Upgrade&quot;);
					break;
				}
	
				if (sParameterValue == sDelHPPartNum &amp;&amp; sParameterName == sAddHPPartNum) //Downgrade Scenario
				{
					sUpdDownLimit      = sParameterCond;
					sTerminationReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TERMINATION_REASON&quot;,&quot;Downgrade&quot;);
					break;
				}
			}
			while (bcParameter.NextRecord());

			if (sTerminationReason == null || sTerminationReason == &quot;&quot;)
			{
				return;
			}

			sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot; + sActionDeleted +
							  &quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;) AND &quot; +
							  &quot;([VF Old Prod Prom Instance Id]=&apos;&quot; + sDelHPAsssetIntegId +
							  &quot;&apos; OR [Prod Prom Instance Id]=&apos;&quot; + sAddHPAsssetIntegId + &quot;&apos;)&quot;;
		
			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;VF Up Down Counter&quot;);
			bcItem.ActivateField(&quot;Action Code&quot;);
			bcItem.SetSearchExpr(sItemSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);

			if (!bcItem.FirstRecord())
			{
				return;
			}

			sUpDownCounter = bcItem.GetFieldValue(&quot;VF Up Down Counter&quot;);

			if (sUpDownCounter == null || sUpDownCounter == &quot;&quot;)
			{
				sUpDownCounter = &quot;0&quot;;
			}

			if (sUpDownCounter &gt; sUpdDownLimit)
			{
				return;
			}

			iUpDownCounter = ToNumber(sUpDownCounter);
			iUpDownCounter = iUpDownCounter + 1;
		
			bcItem.SetFieldValue(&quot;VF Up Down Counter&quot;, iUpDownCounter);
			bcItem.SetFieldValue(&quot;Action Code&quot;,        sActionModified);
			bcItem.WriteRecord();
		} // if (!bBypassCounter)

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND &quot; +
						  &quot;(([VF Product Sub Type]=&apos;&quot; + sProdSubTypeRECMLINE +
						  &quot;&apos; AND ([Action Code]=&apos;&quot; + sActionNew + &quot;&apos; OR [Action Code]=&apos;&quot; + sActionDeleted + &quot;&apos;))&quot; +
						  &quot; OR (([VF Product Sub Type]=&apos;&quot; + sProdSubTypeKAFEIN +
						  &quot;&apos; OR [VF Product Sub Type]=&apos;&quot; + sProdSubTypeVODEM +
						  &quot;&apos; OR [VF Product Sub Type]=&apos;&quot; + sProdSubTypeVODEMCAMPAIGN +
						  &quot;&apos;) AND (([Action Code]=&apos;&quot; + sActionNew +
						  &quot;&apos; AND ([Asset Integration Id]=&apos;&quot; + sAddHPAsssetIntegId +
						  &quot;&apos; OR [VF Root Prod Prom Instance Id]=&apos;&quot; + sAddHPAsssetIntegId +
						  &quot;&apos;)) OR ([Action Code]=&apos;&quot; + sActionDeleted +
						  &quot;&apos; AND ([Asset Integration Id]=&apos;&quot; + sDelHPAsssetIntegId +
						  &quot;&apos; OR [VF Root Old Prod Prom Instance Id]=&apos;&quot; + sDelHPAsssetIntegId + &quot;&apos;)))))&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Product Type&quot;);
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);//VFTK Lilanath 06/01/2012 : Activated for PROD00029432
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;VF Termination Reason&quot;);
		bcItem.ActivateField(&quot;VF Skip Penality&quot;);
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr); //CR WP1 defect PROD00025962 YGhazi 15/09/2011 //Amul - Added kafein case of CR201
		bcItem.ExecuteQuery(ForwardOnly);

		bHasItem = bcItem.FirstRecord();

		if (!bHasItem)
		{
			return;
		}

		while (bHasItem)
		{
			sItemProdType      = bcItem.GetFieldValue(&quot;VF Product Type&quot;);
			sItemProdSubType   = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sItemAction        = bcItem.GetFieldValue(&quot;Action Code&quot;);
			sItemAssetIntegId  = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);
			bBypassSkipPenalty = (sItemProdSubType == sProdSubTypeKAFEIN &amp;&amp; iUpDownCounter == 1 &amp;&amp;
								  sDelHPPartNum == &quot;23002&quot; &amp;&amp; sAddHPPartNum == &quot;23001&quot;);

			if ((!bBypassSkipPenalty) || bBypassCounter)
			{
				if (sItemAction == sActionDeleted)
				{
					if (sItemProdSubType == sProdSubTypeVODEM || sItemProdSubType == sProdSubTypeKAFEIN ||
						sItemProdSubType == sProdSubTypeVODEMCAMPAIGN)
					{
						psItemEndDate = TheApplication().NewPropertySet();
						psItemEndDate.SetProperty(&quot;ProdType&quot;,     sItemProdType);
						psItemEndDate.SetProperty(&quot;ProdSubType&quot;,  sItemProdSubType);
						psItemEndDate.SetProperty(&quot;AssetIntegId&quot;, sItemAssetIntegId);
						psItemEndDateList.AddChild(psItemEndDate);
					}
				}

				bcItem.SetFieldValue(&quot;VF Termination Reason&quot;, sTerminationReason);
				bcItem.SetFieldValue(&quot;VF Skip Penality&quot;,      sSkipPenaltyY);
				bcItem.WriteRecord();					
			}

			bHasItem = bcItem.NextRecord();
		}

		iItemEndDateCounter = psItemEndDateList.GetChildCount();

		if (iItemEndDateCounter == 0)
		{
			return;
		}

		for (iItem = 0; iItem &lt; iItemEndDateCounter; iItem++)
		{
			sItemAssetIntegId = psItemEndDateList.GetChild(iItem).GetProperty(&quot;AssetIntegId&quot;);
			sItemSearchExpr   = &quot;[Action Code]=&apos;&quot; + sActionNew +
								&quot;&apos; AND [Asset Integration Id]=&apos;&quot; + sItemAssetIntegId + &quot;&apos;&quot;;

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;Service End Date&quot;);
			bcItem.SetSearchExpr(sItemSearchExpr); //CR WP1 defect PROD00025962 YGhazi 15/09/2011 //Amul - Added kafein case of CR201
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord())
			{
				sAddedItemEndDate = bcItem.GetFieldValue(&quot;Service End Date&quot;);
				psItemEndDateList.GetChild(iItem).SetProperty(&quot;EndDate&quot;, sAddedItemEndDate);
			}
		}

		for (iItem = 0; iItem &lt; iItemEndDateCounter; iItem++)
		{
			sItemProdType     = psItemEndDateList.GetChild(0).GetProperty(&quot;ProdType&quot;);
			sItemProdSubType  = psItemEndDateList.GetChild(0).GetProperty(&quot;ProdSubType&quot;);
			sAddedItemEndDate = psItemEndDateList.GetChild(0).GetProperty(&quot;EndDate&quot;);
			sItemSearchExpr   = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionNew +
								&quot;&apos; AND [VF Product Type]=&apos;&quot; + sItemProdType +
								&quot;&apos; AND [VF Product Sub Type]=&apos;&quot; + sItemProdSubType + &quot;&apos;&quot;;

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;Service End Date&quot;);
			bcItem.SetSearchExpr(sItemSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord())
			{
				bcItem.SetFieldValue(&quot;Service End Date&quot;, sAddedItemEndDate);
				bcItem.WriteRecord();
			}

			psItemEndDateList.RemoveChild(0);
		}
	}
	finally
	{
		psItemEndDate     = null;
		psItemEndDateList = null;
		bcParameter       = null;
		boParameter       = null;
		bcItem            = null;
		boOrder           = null;
	}
}"
			   SEQUENCE="24"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CloneBA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CloneBA(Inputs, Outputs)
{
	try
	{
		var OrderEntryBO:BusObject;
		var AccountBO:BusObject;
		var bcOrder: BusComp;
		var bcOrderEntryLI:BusComp;
		var bcBA:BusComp;
		var AccBC: BusComp;
		var App = TheApplication();
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var BAId = Inputs.GetProperty(&quot;BAId&quot;);
		var CurrCode = Inputs.GetProperty(&quot;CurrCode&quot;);
		var BAType = Inputs.GetProperty(&quot;BA Type&quot;);
		App.SetProfileAttr(&quot;BA Type&quot;,BAType);
		var AccId = Inputs.GetProperty(&quot;AccountId&quot;);
		var nextRecord = &quot;&quot;;
		var PartNumber = &quot;&quot;;
		
		OrderEntryBO = App.GetBusObject(&quot;Order Entry (Sales)&quot;);
		AccountBO = App.GetBusObject(&quot;Account&quot;);
		AccBC = AccountBO.GetBusComp(&quot;Account&quot;);
		bcBA = AccountBO.GetBusComp(&quot;Billing Account&quot;);
		bcOrder = OrderEntryBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		bcOrderEntryLI = OrderEntryBO.GetBusComp(&quot;Order Entry - Line Items&quot;);	
		var CheckSameBA = Inputs.GetProperty(&quot;CheckSameBA&quot;);
		var result = &quot;&quot;;
		
		// return the context on Account - BA through link - C_MSP00001805
		inProp.SetProperty(&quot;AccId&quot;,AccId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		AccBC.ClearToQuery();
		AccBC.SetViewMode(AllView);
		AccBC.SetSearchSpec(&quot;Id&quot;,AccId);
		AccBC.ExecuteQuery(ForwardOnly);
		//------------
		
		if(CheckSameBA == &quot;Y&quot;)
		{
			CheckBAInOrder(Inputs,Outputs);
			result = Outputs.GetProperty(&quot;Result&quot;,result);
		}
		if (result == &quot;&quot;)
		{
			//Begin - Scripting 15 - Input validation
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
		
			bcOrder.SetViewMode(AllView);
			bcOrder.ClearToQuery();
			bcOrder.ActivateField(&quot;Currency Code&quot;);
			bcOrder.ActivateField(&quot;VF Is MBA&quot;);
			bcOrder.SetSearchExpr(&quot;[Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
			
				bcOrderEntryLI.SetViewMode(AllView);
				bcOrderEntryLI.ClearToQuery();//Scripting 31: Moved code above since there is link
				bcOrderEntryLI.SetSearchExpr(&quot;[Parent Order Item Id] = &apos;&apos; AND [VF Check BA Type] = &apos;Y&apos;&quot;);

			bcOrder.ExecuteQuery(ForwardOnly);
			if(bcOrder.FirstRecord())
			{
				bcOrder.SetFieldValue(&quot;Billing Account Id&quot;,BAId);
				bcOrder.SetFieldValue(&quot;Currency Code&quot;, CurrCode);
				bcOrder.SetFieldValue(&quot;VF Is MBA&quot;, &quot;True&quot;);
				
				nextRecord = bcOrderEntryLI.FirstRecord(); 
				if (nextRecord)
				{
					bcOrderEntryLI.SetFieldValue(&quot;Billing Account Id&quot;,BAId);
					nextRecord = bcOrderEntryLI.NextRecord();
					
					while(nextRecord)
					{
						PartNumber = bcOrderEntryLI.GetFieldValue(&quot;Part Number&quot;);
						
						bcBA.SetViewMode(AllView);
						bcBA.ClearToQuery();
						bcBA.SetSearchSpec(&quot;Id&quot;,BAId);
						bcBA.ExecuteQuery(ForwardOnly);
						if (bcBA.FirstRecord())
						{
							bcBA.NewRecord(NewAfterCopy);
							bcBA.WriteRecord();
							var NewBA = bcBA.GetFieldValue(&quot;Id&quot;);
							Inputs.SetProperty(&quot;BAId&quot;,NewBA);
							CompleteBA(Inputs, Outputs);
							bcOrderEntryLI.SetFieldValue(&quot;Billing Account Id&quot;,NewBA);
							bcOrderEntryLI.WriteRecord();
						}						
						nextRecord = bcOrderEntryLI.NextRecord();
					}
				}
				bcOrder.WriteRecord();
				
				var strProfAttr = App.GetProfileAttr(&quot;IsSVB&quot;);
				Outputs.SetProperty(&quot;IsSVB&quot;,strProfAttr);
				
				var bsRefresh = App.GetService(&quot;SIS OM PMT Service&quot;);
				var InputsRefresh, OutputsRefresh;
				
				InputsRefresh  = App.NewPropertySet();
				OutputsRefresh = App.NewPropertySet();
				InputsRefresh.SetProperty(&quot;Business Component Name&quot;, &quot;Order Entry - Orders&quot;);
				InputsRefresh.SetProperty(&quot;Business Object Name&quot;, &quot;Order Entry (Sales)&quot;);
				
				bsRefresh.InvokeMethod(&quot;Refresh Business Component&quot;, InputsRefresh, OutputsRefresh);
				App.SetProfileAttr(&quot;BA Type&quot;,&quot;&quot;);
			}	
		}		
	}
	finally
	{
		bcBA 			= null;
		bcOrder			= null;
		bcOrderEntryLI 	= null;	
		OrderEntryBO 	= null;
		AccountBO 		= null;
		inProp 	 		= null;
		outProp	 		= null;
		InputsRefresh  	= null;
		OutputsRefresh 	= null;
		BS	 			= null;
		bsRefresh 		= null;
		App 			= null;
		AccBC 			= null;
	}
}"
			   SEQUENCE="25"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2011 19:29:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CompleteBA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CompleteBA(Inputs, Outputs)
{
	try{
			var AccountBO :BusObject = TheApplication().GetBusObject(&quot;Account&quot;);;
			var bcBA :BusComp = AccountBO.GetBusComp(&quot;Billing Account&quot;);
			var bcInvProf :BusComp = AccountBO.GetBusComp(&quot;Com Invoice Profile&quot;);
			var BAId = Inputs.GetProperty(&quot;BAId&quot;);
			
			var ccNumber = &quot;&quot;;
			var paymentMethod = &quot;&quot;;
			var tcIdInserted = &quot;&quot;;
			var turkishCT = &quot;&quot;;
			var booBARecordExists = &quot;&quot;;
			var strCurrBillAccountId = &quot;&quot;;
			var strMediaType = &quot;&quot;;
			var strEmailField = &quot;&quot;;
			var e1 = &quot;&quot;;
			var strEmail = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_MEDIA_TYPE&quot;, &quot;102&quot;);;
			
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;BAId&quot;,BAId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
		
			bcBA.SetViewMode(AllView);
			bcBA.ClearToQuery();
			bcBA.SetSearchSpec(&quot;Id&quot;,BAId);
				bcInvProf.SetViewMode(AllView);
				bcInvProf.ActivateField(&quot;Payment Method&quot;);
				bcInvProf.ActivateField(&quot;Media Type&quot;);
				bcInvProf.ActivateField(&quot;VF Contact Tc Id Calc&quot;);					
				bcInvProf.ActivateField(&quot;VF Turkish Citizenship Calc&quot;);
				bcInvProf.ActivateField(&quot;VF Email&quot;);
				bcInvProf.ActivateField(&quot;Email Bill To&quot;);
				bcInvProf.ActivateField(&quot;VFTRCBU Is EBU Customer&quot;);
				bcInvProf.ClearToQuery();//Scripting 31: Removed ExecuteQuery on Child BC since there is link
			
			bcBA.ExecuteQuery(ForwardOnly);
			var Record2 = bcInvProf.FirstRecord();
			if (Record2)
			{
				strMediaType=bcInvProf.GetFieldValue(&quot;Media Type&quot;);
				var isEBUCustomer			= bcInvProf.GetFieldValue(&quot;VFTRCBU Is EBU Customer&quot;);
				
				if(strMediaType==strEmail)
				{
					if(isEBUCustomer == &quot;Y&quot;)
					{ 
						strEmailField = bcInvProf.GetFieldValue(&quot;VF Email&quot;);
						//if (strEmailField != null &amp;&amp; strEmailField != &quot;&quot;)
						//TLG-1405
						if (strEmailField == null || strEmailField == &quot;&quot;)
						{
							e1 = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;326&quot;);
							TheApplication ().RaiseErrorText(e1);
						}
					}
					else
					{
						strEmailField = bcInvProf.GetFieldValue(&quot;Email Bill To&quot;);
					
						if (strEmailField == null || strEmailField == &quot;&quot;)
						{
							e1 = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;, &quot;0268&quot;);
							TheApplication().RaiseErrorText(e1); 
						}
					}
				}
				var paymentCC = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_PAYMENT_TYPE&quot;,&quot;Credit&quot;);
				var today = GetCurrentDate();
				var bcRowId = bcInvProf.GetFieldValue(&quot;Id&quot;);//code to retrieve the Row ID of the ACTIVE Business Component 
				var rootTransactionId = bcRowId + today.toString();
				
				turkishCT 	 = bcInvProf.GetFieldValue(&quot;VF Turkish Citizenship Calc&quot;);
				tcIdInserted = bcInvProf.GetFieldValue(&quot;VF Contact Tc Id Calc&quot;);
				if (tcIdInserted == &quot;N&quot; &amp;&amp; turkishCT == &quot;Y&quot;)	   
				{
					e1 = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;085&quot;);
					TheApplication ().RaiseErrorText(e1); 	
				}					
				ccNumber 	  = bcInvProf.GetFieldValue(&quot;VF Credit Card Number Int&quot;);
				paymentMethod = bcInvProf.GetFieldValue(&quot;Payment Method&quot;);
				if ((ccNumber == &quot;&quot;) &amp;&amp; (paymentMethod ==paymentCC))					
				{
					e1 = TheApplication().LookupMessage(&quot;ACS Messages&quot;, &quot;002&quot;);
					TheApplication ().RaiseErrorText(e1);
				}	
				
				var strActiveAccount     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;,&quot;90&quot;);
				var strPendingAccount    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;,&quot;70&quot;);				
				var strActualAccntStatus = bcBA.GetFieldValue(&quot;Account Status Code&quot;);
				
				if (strActualAccntStatus == strPendingAccount)
				{
					bcBA.SetFieldValue(&quot;Account Status Code&quot;, strActiveAccount);
					bcBA.WriteRecord();						
				}
			}
	}
	finally
	{
		bcInvProf 	= null;
		bcBA 		= null;
		AccountBO 	= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}			
}"
			   SEQUENCE="26"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="12/05/2011 13:06:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ControlSkipPosition"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ControlSkipPosition(Inputs, Outputs) {
	try {
		var Msg = &quot;&quot;;
		var XOrderbo : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var ControlSkipbc : BusComp = XOrderbo.GetBusComp(&quot;VF Controls Skip&quot;);
		var ControlNum = Inputs.GetProperty(&quot;ControlNum&quot;);
		var ControlType = Inputs.GetProperty(&quot;ControlType&quot;);
		var CustomerSubClasss = Inputs.GetProperty(&quot;VF Customer Sub Class&quot;);
		var sSearchSpec = Inputs.GetProperty(&quot;SearchSpec&quot;); //VFTRCBU WA#15
		var sControlDetailId = &quot;&quot;; //VFTRCBU WA#15
		var Result = &quot;KO&quot;;
		var CustSubClass = &quot;&quot;;
		//var sSblPstnProf = &quot;&quot;; //VFTRCBU WA#39
		var sFirstUserRole = &quot;&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp : PropertySet = TheApplication().NewPropertySet();
		var outProp : PropertySet = TheApplication().NewPropertySet();
		var BS : Service = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var appLanguage = TheApplication().InvokeMethod(&quot;Language&quot;);
		var userHasRole;
		inProp.SetProperty(&quot;ControlNum&quot;, ControlNum);
		//inProp.SetProperty(&quot;ControlType&quot;,ControlType);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
		BS.InvokeMethod(&quot;Input Validation&quot;, inProp, outProp);
		//End - Scripting 15
		with (ControlSkipbc) {
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Customer Sub Class&quot;);
			ActivateField(&quot;Position Type&quot;);
			//VFTRCBU WA#15 - Add the searchspec input - Start
			if (sSearchSpec == &quot;&quot; || sSearchSpec == null) {
				if (ControlType == &quot;&quot; || ControlType == null)
					SetSearchExpr(&quot;[Control Num] = &apos;&quot; + ControlNum + &quot;&apos;&quot;);
				else
					SetSearchExpr(&quot;[Control Num] = &apos;&quot; + ControlNum + &quot;&apos; AND [Control Type] = &apos;&quot; + ControlType + &quot;&apos;&quot;);
			} else
				SetSearchExpr(sSearchSpec)
				//VFTRCBU WA#15 - End

				SetSortSpec(&quot;Control Num(ASCENDING)&quot;);//VFTRCBU-27321
				ExecuteQuery(ForwardOnly);
			var isRec = FirstRecord();
			while (isRec) {
				if (appLanguage == &quot;TRK&quot;) {
					Msg = GetFieldValue(&quot;VFTRCBU Details Error Message TRK&quot;); //VFTRCBU-27321 - Changed to get the error msg from Details, if null get from Parent Control
					if (Msg == &quot;&quot;)
						Msg = GetFieldValue(&quot;Error Message Trk&quot;);
				} else {
					Msg = GetFieldValue(&quot;VFTRCBU Details Error Message ENU&quot;);
					if (Msg == &quot;&quot;)
						Msg = GetFieldValue(&quot;Error Message Enu&quot;);
				}

				var Position = GetFieldValue(&quot;Position Type&quot;);
				userHasRole = TheApplication().UserHasRole(Position);
				sControlDetailId = GetFieldValue(&quot;Control Id&quot;); //VFTRCBU WA#15
	
				//sSblPstnProf = TheApplication().GetProfileAttr(&quot;TELCO.PositionProfile:Role.&quot; + Position); //VFTRCBU WA#39
				//EBU Retrofits #6
				
				var sCCSubmission =  TheApplication().GetProfileAttr(&quot;CARBON_COPY_SUBMISSION&quot;);
				var sCCPositionID =  TheApplication().GetProfileAttr(&quot;CARBON_COPY_POSITION&quot;);
				if(sCCSubmission ==&quot;Y&quot; &amp;&amp; sCCPositionID != &quot;&quot;)
				{
					//sFirstUserRole = TheApplication().GetProfileAttr(&quot;CARBON_COPY_POSITION_TYPE&quot;);
					sFirstUserRole = GetPositionType(); //DEF-11226
				}
				else{
					sFirstUserRole =TheApplication().GetProfileAttr(&quot;VFTRCBUFirstUserRole&quot;);
				}
	
				
			//	sFirstUserRole =TheApplication().GetProfileAttr(&quot;VFTRCBUFirstUserRole&quot;); //DEF-11226			
				/*if (sFirstUserRole != &quot;&quot; &amp;&amp; Position != &quot;&quot; &amp;&amp; sFirstUserRole == Position) 
				{				
				sSblPstnProf=&quot;Y&quot;;								
				}*/
				//End EBU Retrofits #6
				CustSubClass = GetFieldValue(&quot;Customer Sub Class&quot;)
					if (CustSubClass == &quot;&quot; &amp;&amp; CustomerSubClasss == &quot;&quot;) {
						if (userHasRole) {
							if (Position == &quot;&quot; || CustSubClass == &quot;&quot;) {
								Result = &quot;OK&quot;;
								break;
							} else if (userHasRole || CustSubClass == CustomerSubClasss) {
								Result = &quot;OK&quot;;
								break;
							}
						}
					} else {
						if (userHasRole || CustomerSubClasss == CustSubClass) {
							if (Position == &quot;&quot; || CustSubClass == &quot;&quot;) {
								Result = &quot;OK&quot;;
								break;
							} else if (userHasRole || CustSubClass == CustomerSubClasss) {
								Result = &quot;OK&quot;;
								break;
							}
						}
					}

					isRec = NextRecord();
				//sSblPstnProf = &quot;&quot;;
			}
		}

		Outputs.SetProperty(&quot;Result&quot;, Result);
		Outputs.SetProperty(&quot;ErrorMsg&quot;, Msg);
		Outputs.SetProperty(&quot;ControlDetailId&quot;, sControlDetailId);
	}
	finally {
		//sSblPstnProf = null; //WA#39 28.07.2014
		ControlSkipbc = null;
		XOrderbo = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="27"
			   UPDATED="06/20/2017 00:08:35"
			   UPDATED_BY="SADMIN"
			   CREATED="05/30/2011 15:52:52"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeleteSVBChild"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeleteSVBChild(Inputs,Outputs)
{
	try
	{
		var BS		: Service	 = TheApplication().GetService(&quot;VF Manage Billing Account Status&quot;);
		BS.InvokeMethod(&quot;DeleteSVBChild&quot;,Inputs, Outputs);
	}
	finally
	{
		BS		= null;
	}
}"
			   SEQUENCE="29"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2013 13:40:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Disconnect"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Disconnect(Inputs, Outputs)
{
	// VFTK Amul 20111231 - Created this method for CR389 - For disconnecting the discount 
	try
	{
		var boAsset      : BusObject   = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var bcAsset      : BusComp     = boAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var bsManager    : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn  : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();
		var boOrder      : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcOrder      : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcItem       : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA     : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var boRootItem   : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcRootItem   : BusComp     = boRootItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		var sAccountId          = Inputs.GetProperty(&quot;AccntId&quot;);
		var sReferenceNum1      = Inputs.GetProperty(&quot;RefNum1&quot;);
		var sReferenceNum2      = Inputs.GetProperty(&quot;RefNum2&quot;);
		var sReferenceNum       = &quot;&quot;;
		var iReferenceCtr       = 0;
		var sAssetSearchExpr    = &quot;&quot;;
		var bContinueProcess    = false;
		var sRootAssetId 	    = &quot;&quot;;
		var sAssetIntegId	    = &quot;&quot;;	
		var sBillAccountId 	    = &quot;&quot;;
		var sOwnerAccountId	    = &quot;&quot;;
		var sShopCode 	        = &quot;&quot;;
		var sDealerCode	        = &quot;&quot;;
		var sOrderId            = &quot;&quot;;
		var sVodafoneBUId       = &quot;&quot;;
		var bHasItem            = false;
		var sItemId             = &quot;&quot;;
		var bHasItemXA          = false;
		var sRootItemSearchExpr = &quot;&quot;;
		var bHasRootItem        = false;

		var sStatusActive        = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var sActionModifyOptions = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;111&quot;);
		var sActionCodeDeleted   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var sReasonModifyOptions = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;232&quot;);
		var sOrderCancelled      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var sOrderComplete       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);

		if (sAccountId == null || sAccountId == &quot;&quot;)
		{
			return;
		}

		sReferenceNum = sReferenceNum1;
		iReferenceCtr = 1;

		if (sReferenceNum == null || sReferenceNum == &quot;&quot;)
		{
			sReferenceNum = sReferenceNum2;
			iReferenceCtr = 2;
		}

		if (sReferenceNum == null || sReferenceNum == &quot;&quot;)
		{
			return;
		}		

		while (iReferenceCtr &lt;= 2 &amp;&amp; sReferenceNum != null &amp;&amp; sReferenceNum != &quot;&quot;)
		{
			sAssetSearchExpr = &quot;[Owner Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [VF Par MSISDN]=&apos;&quot; + sReferenceNum +
							   &quot;&apos; AND [Product Part Number]=&apos;26002&apos; AND [Status]=&apos;&quot; + sStatusActive + &quot;&apos;&quot;;

			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.ActivateField(&quot;Root Asset Id&quot;);
			bcAsset.SetSearchExpr(sAssetSearchExpr);
			bcAsset.ExecuteQuery(ForwardOnly);

			bContinueProcess = bcAsset.FirstRecord();

			if (bContinueProcess)
			{
				sRootAssetId = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);

				bcAsset.SetViewMode(AllView);
				bcAsset.ClearToQuery();
				bcAsset.ActivateField(&quot;Integration Id&quot;);
				bcAsset.ActivateField(&quot;Billing Account Id&quot;);
				bcAsset.ActivateField(&quot;Owner Account Id&quot;);
				bcAsset.ActivateField(&quot;VF Originating Shop Code&quot;);
				bcAsset.ActivateField(&quot;VF Dealer Code&quot;);
				bcAsset.SetSearchSpec(&quot;Id&quot;, sRootAssetId);
				bcAsset.ExecuteQuery(ForwardOnly);

				bContinueProcess = bcAsset.FirstRecord();
			}

			if (bContinueProcess)
			{
				sAssetIntegId	= bcAsset.GetFieldValue(&quot;Integration Id&quot;);
				sBillAccountId 	= bcAsset.GetFieldValue(&quot;Billing Account Id&quot;);
				sOwnerAccountId	= bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);
				sShopCode 	    = bcAsset.GetFieldValue(&quot;VF Originating Shop Code&quot;);
				sDealerCode	    = bcAsset.GetFieldValue(&quot;VF Dealer Code&quot;);

				sRootItemSearchExpr = &quot;[Integration Id]=&apos;&quot; + sAssetIntegId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderCancelled +
									  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderComplete + &quot;&apos;&quot;;

				bcRootItem.SetViewMode(AllView);
				bcRootItem.ClearToQuery();
				bcRootItem.SetSearchExpr(sRootItemSearchExpr);
				bcRootItem.ExecuteQuery(ForwardOnly);

				bContinueProcess = (!bcRootItem.FirstRecord());
			}

			if (bContinueProcess)
			{
				psManagerIn.Reset();
				psManagerOut.Reset();

				psManagerIn.SetProperty(&quot;ProcessName&quot;,          &quot;TELCO Process Account Root Asset Action&quot;);
				psManagerIn.SetProperty(&quot;Object Id&quot;,            sOwnerAccountId);
				psManagerIn.SetProperty(&quot;Asset Integration Id&quot;, sAssetIntegId);
				psManagerIn.SetProperty(&quot;Asset Method&quot;,         &quot;ModifyProdSvc&quot;);
				psManagerIn.SetProperty(&quot;Asset Action Type&quot;,    sActionModifyOptions);
				psManagerIn.SetProperty(&quot;Reuse Active Order&quot;,   &quot;N&quot;);
				psManagerIn.SetProperty(&quot;SkipGUINavigation&quot;,    &quot;Y&quot;);

				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

				sOrderId = psManagerOut.GetProperty(&quot;Order Id&quot;);

				bContinueProcess = (sOrderId != null &amp;&amp; sOrderId != &quot;&quot;);
			}

			if (bContinueProcess)
			{
				sVodafoneBUId = GetBU(&quot;Vodafone Organization&quot;);

				SetBUOrder(sOrderId, sVodafoneBUId);

				bcOrder.SetViewMode(AllView);
				bcOrder.ClearToQuery();
				bcOrder.ActivateField(&quot;VF Prevent Automatic Cancellation&quot;);
				bcOrder.ActivateField(&quot;VF Dealer Code&quot;);
				bcOrder.ActivateField(&quot;VF Shop Code&quot;);
				bcOrder.ActivateField(&quot;Primary Organization Id&quot;);
				bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sOrderId + &quot;&apos;&quot;);
				bcOrder.ExecuteQuery(ForwardOnly);

				bContinueProcess = bcOrder.FirstRecord();
			}

			if (bContinueProcess)
			{
				bcOrder.SetFieldValue(&quot;VF Prevent Automatic Cancellation&quot;, &quot;Y&quot;);
				if (sDealerCode != null &amp;&amp; sDealerCode != &quot;&quot;)
					bcOrder.SetFieldValue(&quot;VF Dealer Code&quot;, sDealerCode);
				if (sShopCode != null &amp;&amp; sShopCode != &quot;&quot;)
					bcOrder.SetFieldValue(&quot;VF Shop Code&quot;, sShopCode);
				bcOrder.SetFieldValue(&quot;Primary Organization Id&quot;, sVodafoneBUId);
				bcOrder.WriteRecord();

				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.ActivateField(&quot;Action Code&quot;);
				bcItem.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Part Number]=&apos;26002&apos;&quot;);
				bcItem.ExecuteQuery(ForwardOnly);

				bHasItem = bcItem.FirstRecord();

				while(bHasItem)
				{
					sItemId = bcItem.GetFieldValue(&quot;Id&quot;);

					bcItem.SetFieldValue(&quot;Action Code&quot;, sActionCodeDeleted);
					bcItem.WriteRecord();

					bcItemXA.SetViewMode(AllView);
					bcItemXA.ClearToQuery();
					bcItemXA.SetSearchExpr(&quot;[Object Id]=&apos;&quot; + sItemId + &quot;&apos;&quot;);
					bcItemXA.ExecuteQuery(ForwardOnly);

					bHasItemXA = bcItemXA.FirstRecord();

					while(bHasItemXA)
					{
						bcItemXA.SetFieldValue(&quot;Action Code&quot;,sActionCodeDeleted);
						bcItemXA.WriteRecord();

						bHasItemXA = bcItemXA.NextRecord();
					}

					bHasItem = bcItem.NextRecord();
				}

				sRootItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Id]=[Root Order Item Id]&quot;;

				bcRootItem.SetViewMode(AllView);
				bcRootItem.ClearToQuery();
				bcRootItem.ActivateField(&quot;TELCO Action Reason&quot;);
				bcRootItem.ActivateField(&quot;VF Logical Reason&quot;);
				bcRootItem.SetSearchExpr(sRootItemSearchExpr);
				bcRootItem.ExecuteQuery(ForwardOnly);

				bHasRootItem = bcRootItem.FirstRecord();

				while (bHasRootItem)
				{
					bcRootItem.SetFieldValue(&quot;TELCO Action Reason&quot;, sReasonModifyOptions);
					bcRootItem.SetFieldValue(&quot;VF Logical Reason&quot;,   &quot;000&quot;);
					bcRootItem.WriteRecord();
				
					bHasRootItem = bcRootItem.NextRecord();
				}

				psManagerIn.Reset();
				psManagerOut.Reset();

				psManagerIn.SetProperty(&quot;ProcessName&quot;,     &quot;TELCO Async Submit Order Interface WF&quot;);
				psManagerIn.SetProperty(&quot;Order Id&quot;,        sOrderId);
				psManagerIn.SetProperty(&quot;Cancel On Error&quot;, &quot;N&quot;);
		
				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
			}

			sReferenceNum = sReferenceNum2;
			iReferenceCtr = iReferenceCtr + 1;
		}
	}
	finally
	{
		bcRootItem   = null;
		boRootItem   = null;
		bcItemXA     = null;
		bcItem       = null;
		bcOrder      = null;
		boOrder      = null;
		psManagerOut = null;
		psManagerIn  = null;
		bsManager    = null;
		bcAsset      = null;
		boAsset      = null;
	}
}"
			   SEQUENCE="30"
			   UPDATED="08/03/2016 00:39:15"
			   UPDATED_BY="SADMIN"
			   CREATED="03/09/2012 17:09:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindAssetOrderPN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindAssetOrderPN(AccountId,PartNum,ShopCode,MaxLimit,CountResult)
{	
	try
	{
		var result = &quot;OK&quot;;
		var SalesCh = ShopCode.substring(0,1);
		var OrderEntryBO = &quot;&quot;;
		var OrderXA = &quot;&quot;;
		var ObjectId = &quot;&quot;;
		var TotalCount = &quot;&quot;;
		var countOrder = 0;
		var countAsset = 0;
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemBC : BusComp;
		var strActive	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var strActionAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strComplete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var strCancelled	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
		var strRejected	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Rejected&quot;);
		
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;PartNum&quot;,PartNum); 
		inProp.SetProperty(&quot;AccountId&quot;, AccountId); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
		
		var AssetBC : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		with(AssetBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [Product Part Number] = &apos;&quot;+PartNum+&quot;&apos; AND [VF Originating Shop Code] LIKE &apos;&quot;+SalesCh+&quot;*&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);
		
			countAsset = CountRecords();
			if (countAsset &gt; MaxLimit)//CountRecord shouldn&apos;t be removed since further validation is based on count
			{
				result = &quot;KO&quot;;
			}
			else
			{
				result = &quot;OK&quot;;			
			}
		}
		if (result == &quot;OK&quot;)
		{
			OrderItemBC = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);			
			with(OrderItemBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Shop Code] LIKE &apos;&quot;+SalesCh+&quot;*&apos; AND [Part Number] = &apos;&quot;+PartNum+&quot;&apos; AND [Action Code] = &apos;&quot;+strActionAdd+&quot;&apos; AND ([Status] &lt;&gt; &apos;&quot;+strComplete+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strCancelled+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strRejected+&quot;&apos;)&quot;);
				countOrder = CountRecords();
				if (countOrder+countAsset &gt; MaxLimit)
				{
					result = &quot;KO&quot;;
				}
				else
				{
					result = &quot;OK&quot;;
				}
			}
		}
		TotalCount = countOrder+countAsset;
		CountResult.SetProperty(&quot;result&quot;,result);
		CountResult.SetProperty(&quot;TotalCount&quot;,TotalCount);
	}
	/*catch(e)
	{
		var error = e.toString();
	}for RwOracle*/
	finally
	{	
		AssetBC = null;
		OrderItemBC = null;
		XOrderBO = null;
		BS = null;
		outProp = null;
		inProp = null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="05/19/2011 14:49:16"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindAssetOrderPNWOS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindAssetOrderPNWOS(AccountId,PartNum,ShopCode,MaxLimit,CountResult)
{	
	try
	{
		var result = &quot;OK&quot;;
		var OrderEntryBO = &quot;&quot;;
		var OrderXA = &quot;&quot;;
		var ObjectId = &quot;&quot;;
		var TotalCount = &quot;&quot;;
		var countOrder = 0;
		var countAsset = 0;
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemBC : BusComp;
		var strActive	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var strActionAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strComplete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var strCancelled	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
		var strRejected	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Rejected&quot;);
		var AssetBC : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		
		//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;AccountId&quot;,AccountId);
			inProp.SetProperty(&quot;PartNum&quot;,PartNum);
			inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			
		with(AssetBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [Product Part Number] = &apos;&quot;+PartNum+&quot;&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);
			countAsset = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
			if (countAsset &gt; MaxLimit)
			{
				result = &quot;KO&quot;;
			}
			else
			{
				result = &quot;OK&quot;;			
			}
		}
		if (result == &quot;OK&quot;)
		{
			OrderItemBC = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);			
			with(OrderItemBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [Part Number] = &apos;&quot;+PartNum+&quot;&apos; AND [Action Code] = &apos;&quot;+strActionAdd+&quot;&apos; AND ([Status] &lt;&gt; &apos;&quot;+strComplete+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strCancelled+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strRejected+&quot;&apos;)&quot;);
				countOrder = CountRecords();
				if (countOrder+countAsset &gt; MaxLimit)
				{
					result = &quot;KO&quot;;
				}
				else
				{
					result = &quot;OK&quot;;
				}
			}
		}
		TotalCount = countOrder+countAsset;
		CountResult.SetProperty(&quot;result&quot;,result);
		CountResult.SetProperty(&quot;TotalCount&quot;,TotalCount);
	}
	/*catch(e)
	{
		var error = e.toString();
	}for RwOracle*/
	finally
	{	
		AssetBC = null;
		OrderItemBC = null;
		XOrderBO = null;
		inProp=null;
		outProp=null;
		BS=null;
	}
}"
			   SEQUENCE="32"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="10/07/2011 15:55:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindAssetOrderPS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindAssetOrderPS(AccountId,ProductSubType,ShopCode,MaxLimit,CountResult)
{	
	try
	{
		var result = &quot;OK&quot;;
		var SalesCh = ShopCode.substring(0,1);
		var OrderEntryBO = &quot;&quot;;
		var OrderXA = &quot;&quot;;
		var ObjectId = &quot;&quot;;
		var TotalCount = &quot;&quot;;
		var countOrder = 0;
		var countAsset = 0;
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemBC : BusComp;
		var strActive	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var strActionAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strComplete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var strCancelled	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
		var strRejected	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Rejected&quot;);
		
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;ProductSubType&quot;,ProductSubType); 
		inProp.SetProperty(&quot;AccountId&quot;, AccountId); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
		
		var AssetBC : BusComp= XOrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		with(AssetBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
		 SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Product Sub Type] = &apos;&quot;+ProductSubType+&quot;&apos; AND [VF Originating Shop Code] LIKE &apos;&quot;+SalesCh+&quot;*&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);

			countAsset = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
			if (countAsset &gt; MaxLimit)
			{
				result = &quot;KO&quot;;
			}
			else
			{
				result = &quot;OK&quot;;			
			}
		}
		if (result == &quot;OK&quot;)
		{
			OrderItemBC = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);			
			with(OrderItemBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Shop Code] LIKE &apos;&quot;+SalesCh+&quot;*&apos; AND [VF Product Sub Type] = &apos;&quot;+ProductSubType+&quot;&apos; AND [Action Code] = &apos;&quot;+strActionAdd+&quot;&apos; AND ([Status] &lt;&gt; &apos;&quot;+strComplete+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strCancelled+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strRejected+&quot;&apos;)&quot;);
				countOrder = CountRecords();
				if (countOrder+countAsset &gt; MaxLimit)
				{
					result = &quot;KO&quot;;
				}
				else
				{
					result = &quot;OK&quot;;
				}
			}
		}
		TotalCount = countOrder+countAsset;
		CountResult.SetProperty(&quot;result&quot;,result);
		CountResult.SetProperty(&quot;TotalCount&quot;,TotalCount);
	}
	/*catch(e)
	{
		var error = e.toString();
	}for RwOracle*/
	finally
	{	
		AssetBC = null;
		OrderItemBC = null;
		XOrderBO = null;
		BS = null;
		outProp = null;
		inProp = null;
	}
}"
			   SEQUENCE="33"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="05/19/2011 12:48:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindAssetOrderPT"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindAssetOrderPT(AccountId,ProductType,ShopCode,DetSalesChannel,MaxLimit,CountResult)
{	
	try
	{
		var result = &quot;OK&quot;;
		var SalesCh = ShopCode.substring(0,1);		
		var DetSalesCh=DetSalesChannel;
		var PropSalesChArry=DetSalesCh.split(&quot;$&quot;);
		var LengthZero;
		var SalesChArryLength=PropSalesChArry.length;
		var query1=&quot;&quot;;
		var query2=&quot;&quot;;
		var boParameters : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameters : BusComp = boParameters.GetBusComp(&quot;ACS NI Parameter&quot;);
		var queryexception=&quot;&quot;;
		var strexception=&quot;&quot;;
		var OrderEntryBO = &quot;&quot;;
		var OrderXA = &quot;&quot;;
		var ObjectId = &quot;&quot;;
		var TotalCount = &quot;&quot;;
		var countOrder = 0;
		var countAsset = 0;
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemBC : BusComp;
		var strActive	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var strActionAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strComplete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var strCancelled	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
		var strRejected	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Rejected&quot;);	
		if(SalesChArryLength&gt;1)
		{		
			for(var i=0;i&lt;SalesChArryLength ;i++)		
			{		
				if(query1==&quot;&quot;)
				{
				//ITSL-3777
				//	query1 = &quot;[VF Originating Shop Code] LIKE &apos;&quot; +PropSalesChArry[i]+&quot;*&apos;&quot;;
				//	query2 = &quot;[VF Shop Code]=&apos;&quot; +PropSalesChArry[i]+&quot;*&apos;&quot;;
				query1 =&quot;(Left([VF Originating Shop Code],&quot; + PropSalesChArry[i].length + &quot;) = &apos;&quot; +PropSalesChArry[i]+&quot;&apos; AND InList(Mid([VF Originating Shop Code],&quot; + (PropSalesChArry[i].length+1) + &quot;,1),&apos;0,1,2,3,4,5,6,7,8,9&apos;))&quot;;
				query2 =&quot;(Left([VF Shop Code],&quot; + PropSalesChArry[i].length + &quot;) = &apos;&quot; +PropSalesChArry[i]+&quot;&apos; AND InList(Mid([VF Shop Code],&quot; + (PropSalesChArry[i].length+1) + &quot;,1),&apos;0,1,2,3,4,5,6,7,8,9&apos;))&quot;;
				}				
				else{
				//ITSL-3777
				//	query1 = query1 + &quot; OR [VF Originating Shop Code] LIKE &apos;&quot;+ PropSalesChArry[i]+&quot;*&apos;&quot;;
				//	query2 = query2 + &quot; OR [VF Shop Code] LIKE &apos;&quot;+ PropSalesChArry[i]+&quot;*&apos;&quot;;
				query1 = query1 + &quot; OR (Left([VF Originating Shop Code],&quot; + PropSalesChArry[i].length + &quot;) = &apos;&quot; +PropSalesChArry[i]+&quot;&apos; AND InList(Mid([VF Originating Shop Code],&quot; + (PropSalesChArry[i].length+1) + &quot;,1),&apos;0,1,2,3,4,5,6,7,8,9&apos;))&quot;;
				query2 = query2 + &quot; OR (Left([VF Shop Code],&quot; + PropSalesChArry[i].length + &quot;) = &apos;&quot; +PropSalesChArry[i]+&quot;&apos; AND InList(Mid([VF Shop Code],&quot; + (PropSalesChArry[i].length+1) + &quot;,1),&apos;0,1,2,3,4,5,6,7,8,9&apos;))&quot;;
				}		
			}		
		}
		else if(SalesChArryLength==1)
		{
			LengthZero=PropSalesChArry[0].length;
			for(var i=0;i&lt;LengthZero ;i++)
			{
				if(query1==&quot;&quot;)
					{
					query1 = &quot;[VF Originating Shop Code] LIKE &apos;&quot; + PropSalesChArry[0].substring(i,i+1)+&quot;*&apos;&quot;;
					query2 = &quot;[VF Shop Code] LIKE &apos;&quot; + PropSalesChArry[0].substring(i,i+1)+&quot;*&apos;&quot;;
					}
					else
					{
					query1 = query1 + &quot; OR [VF Originating Shop Code] LIKE &apos;&quot;+ PropSalesChArry[0].substring(i,i+1)+&quot;*&apos;&quot;;
					query2 = query2 + &quot; OR [VF Shop Code] LIKE &apos;&quot;+ PropSalesChArry[0].substring(i,i+1)+&quot;*&apos;&quot;;
					}
				}		
		}
		
		with(bcParameters)
		{
			var strParameterSrcExpr = &quot;[Function] = &apos;VFLimitException&apos;&quot;;
			bcParameters.ClearToQuery();
			bcParameters.SetViewMode(AllView);	
			bcParameters.SetSearchExpr(strParameterSrcExpr);
			bcParameters.ExecuteQuery(ForwardOnly);	
			var isRec = bcParameters.FirstRecord();
			while(isRec)
			{
				strexception = bcParameters.GetFieldValue(&quot;Value&quot;);
				if (queryexception==&quot;&quot;)
				{
					queryexception = &quot;[VF Product Sub Type]&lt;&gt;&apos;&quot;+strexception+&quot;&apos;&quot;; 
				}
				else
				{
					queryexception = queryexception + &quot; AND [VF Product Sub Type]&lt;&gt;&apos;&quot;+strexception+&quot;&apos;&quot;;
				}
				isRec = bcParameters.NextRecord();
			}		
		}		
		
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;ProductType&quot;,ProductType); 
		inProp.SetProperty(&quot;AccountId&quot;, AccountId); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
		
	//	var sProdTypeSearchSpec = GetProductIds(&quot;[VF Product Type] = &apos;&quot;+ProductType+&quot;&apos;&quot;,&quot;Product Id&quot;);
		
		var AssetBC : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		with(AssetBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
		//	SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND (&quot;+sProdTypeSearchSpec+&quot;) AND [VF Originating Shop Code] LIKE &apos;&quot;+SalesCh+&quot;*&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);
		//	SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Product Type]=&apos;&quot;+ProductType+&quot;&apos;  AND [VF Originating Shop Code] LIKE &apos;&quot;+SalesCh+&quot;*&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);
			//SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Product Type]=&apos;&quot;+ProductType+&quot;&apos;  AND  (&quot;+query1+&quot;) AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);
			if (queryexception==&quot;&quot;)
			{
				SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Product Type]=&apos;&quot;+ProductType+&quot;&apos;  AND  (&quot;+query1+&quot;) AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);
			}
			else
			{
				SetSearchExpr(&quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Product Type]=&apos;&quot;+ProductType+&quot;&apos;  AND  (&quot;+query1+&quot;) AND ((&quot;+queryexception+&quot;) OR  [VF Product Sub Type] IS NULL) AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;);
			}
			ExecuteQuery(ForwardBackward); //ITSL-3777
			countAsset = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
			if (countAsset &gt;= MaxLimit)//ESANTOS Retrofits EBU9.3.2&amp;EBU9.3.3
			{
				result = &quot;KO&quot;;
			}
			else
			{
				result = &quot;OK&quot;;			
			}
		}
		if (result == &quot;OK&quot;)
		{
			var sOpen = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Open&quot;);
			var sParked = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Parked&quot;);
			var sAccepted = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Accepted&quot;);
			var sInstalled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Installed&quot;);
			var sFailed = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Failed&quot;);
			var sPending = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);
			var sStatusNotFinal = &quot;[Status] = &apos;&quot;+sOpen+&quot;&apos; or [Status] = &apos;&quot;+sParked+&quot;&apos; or [Status] = &apos;&quot;+sAccepted+&quot;&apos; or [Status] = &apos;&quot;+sInstalled+&quot;&apos; or [Status] = &apos;&quot;+sFailed+&quot;&apos; or [Status] = &apos;&quot;+sPending+&quot;&apos;&quot;;
			OrderItemBC = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);			
			with(OrderItemBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
			//	SetSearchExpr(&quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Shop Code] LIKE &apos;&quot;+SalesCh+&quot;*&apos; AND (&quot;+sProdTypeSearchSpec+&quot;) AND [Action Code] = &apos;&quot;+strActionAdd+&quot;&apos; AND (&quot;+sStatusNotFinal+&quot;)&quot;);
				if (queryexception==&quot;&quot;)
				{
					SetSearchExpr(&quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos;  AND  (&quot;+query2+&quot;) AND [VF Product Type]=&apos;&quot;+ProductType+&quot;&apos; AND [Action Code] = &apos;&quot;+strActionAdd+&quot;&apos; AND (&quot;+sStatusNotFinal+&quot;)&quot;);
				}
				else
				{
					SetSearchExpr(&quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos;  AND  (&quot;+query2+&quot;) AND ((&quot;+queryexception+&quot;) OR  [VF Product Sub Type] IS NULL) AND [VF Product Type]=&apos;&quot;+ProductType+&quot;&apos; AND [Action Code] = &apos;&quot;+strActionAdd+&quot;&apos; AND (&quot;+sStatusNotFinal+&quot;)&quot;);
				}
				ExecuteQuery(ForwardBackward); //ITSL-3777
				countOrder = CountRecords();
				if (countOrder+countAsset &gt; MaxLimit)////ESANTOS Retrofits EBU9.3.2&amp;EBU9.3.3
				{
					result = &quot;KO&quot;;
				}
				else
				{
					result = &quot;OK&quot;;
				}
			}
		}
		TotalCount = countOrder+countAsset;
		CountResult.SetProperty(&quot;result&quot;,result);
		CountResult.SetProperty(&quot;TotalCount&quot;,TotalCount);
	}
	/*catch(e)
	{
	var error = e.toString();
	}for RwOracle */
	finally
	{	
		AssetBC = null;
		OrderItemBC = null;
		XOrderBO = null;
		BS = null;
		outProp = null;
		inProp = null;
	}
}"
			   SEQUENCE="34"
			   UPDATED="01/10/2017 00:00:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/19/2011 14:26:20"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindAssetOrderS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindAssetOrderS(AccountId,ShopCode,MaxLimit,SalesChannel,CountResult,strCustType)
{	
	try
	{
		var result = &quot;OK&quot;;
		var OrderEntryBO = &quot;&quot;;
		var OrderXA = &quot;&quot;;
		var ObjectId = &quot;&quot;;
		var TotalCount = &quot;&quot;;
		var countOrder = 0;
		var countAsset = 0;
		var XOrderBO : BusObject= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var strActive	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var strActionAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strComplete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var strCancelled	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
		var strRejected	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Rejected&quot;);
		var ControlDetbc : BusComp = XOrderBO.GetBusComp(&quot;VF Controls Details&quot;);
		var AssetBC : BusComp;
		var OrderItemBC : BusComp;
		
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;SalesChannel&quot;,SalesChannel); 
		inProp.SetProperty(&quot;strCustType&quot;, strCustType); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
		
		with (ControlDetbc)
		{
			var SubTypeSearch = &quot;[VF Product Sub Type] = &quot;;
			var SubTypeFirstItem = true;
			var currentSubType = &quot;&quot;;			
			//Sub Type Search
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;([Sales Channel] LIKE &apos;*&quot;+SalesChannel+&quot;*&apos; OR [Sales Channel] = &apos;all&apos;) AND [Product Sub Type] is not null AND [Customer Type] = &apos;&quot;+strCustType+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var rec = FirstRecord();
			while(rec)
			{
				if (SubTypeFirstItem)
				{
					currentSubType = GetFieldValue(&quot;Product Sub Type&quot;);
					SubTypeSearch = SubTypeSearch+&quot;&apos;&quot;+currentSubType+&quot;&apos;&quot;;
					SubTypeFirstItem = false;
				}
				else
				{
					currentSubType = GetFieldValue(&quot;Product Sub Type&quot;);
					SubTypeSearch = SubTypeSearch + &quot; OR [VF Product Sub Type] = &apos;&quot;+currentSubType+&quot;&apos;&quot;;
				}
				rec = NextRecord();
			}

			var TypeSearch = &quot;[VF Product Type] = &quot;;
			var TypeFirstItem = true;
			var currentType = &quot;&quot;;			
			// Type Search
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;([Sales Channel] LIKE &apos;*&quot;+SalesChannel+&quot;*&apos; OR [Sales Channel] = &apos;all&apos;) AND [Product Type] is not null AND [Customer Type] = &apos;&quot;+strCustType+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var rec2 = FirstRecord();
			while(rec2)
			{
				if (TypeFirstItem)
				{
					currentType = GetFieldValue(&quot;Product Type&quot;);
					TypeSearch = TypeSearch+&quot;&apos;&quot;+currentType+&quot;&apos;&quot;;
					TypeFirstItem = false;
				}
				else
				{
					currentType = GetFieldValue(&quot;Product Type&quot;);
					TypeSearch = TypeSearch + &quot; OR [VF Product Type] = &apos;&quot;+currentType+&quot;&apos;&quot;;
				}
				rec2 = NextRecord();
			}
		}

		AssetBC = XOrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		with(AssetBC)
		{
			var searchAsset = &quot;[Owner Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND (&quot;+TypeSearch+&quot; OR &quot;+SubTypeSearch+&quot;) AND [VF Originating Shop Code] LIKE &apos;&quot;+SalesChannel+&quot;*&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos;&quot;;
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(searchAsset);
			countAsset = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
			if (countAsset &gt; MaxLimit)
			{
				result = &quot;KO&quot;;
			}
			else
			{
				result = &quot;OK&quot;;			
			}
		}
		if (result == &quot;OK&quot;)
		{
			OrderItemBC = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);			
			with(OrderItemBC)
			{
				var searchOrderItems = &quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [VF Shop Code] LIKE &apos;&quot;+SalesChannel+&quot;*&apos; AND (&quot;+TypeSearch+&quot; OR &quot;+SubTypeSearch+&quot;) AND [Action Code] = &apos;&quot;+strActionAdd+&quot;&apos; AND [Status] = &apos;&quot;+strActive+&quot;&apos; AND ([Status] &lt;&gt; &apos;&quot;+strComplete+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strCancelled+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strRejected+&quot;&apos;)&quot;;
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(searchOrderItems);
				countOrder = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
				if (countOrder+countAsset &gt; MaxLimit)
				{
					result = &quot;KO&quot;;
				}
				else
				{
					result = &quot;OK&quot;;
				}
			}
		}
		TotalCount = countOrder+countAsset;
		CountResult.SetProperty(&quot;result&quot;,result);
		CountResult.SetProperty(&quot;TotalCount&quot;,TotalCount);
	}
	/*catch(e)
	{
		var error = e.toString();
	}for RwOracle*/
	finally
	{	
		AssetBC = null;
		ControlDetbc = null;
		OrderItemBC = null;
		XOrderBO = null;
		BS = null;
		outProp = null;
		inProp = null;
	}
}"
			   SEQUENCE="35"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="05/19/2011 14:18:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindAssetOrderWOS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindAssetOrderWOS(sAccountId,sProdSubType,ShopCode,iMaxLimit,CountResult,sCustomerClass,sParamValue)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcAsset : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var bcItem  : BusComp   = null;

		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;sAccountId&quot;, sAccountId); 
		inProp.SetProperty(&quot;sProdSubType&quot;, sProdSubType); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;, inProp, outProp); // Query Input Validation
		/*** End ***/ 

		var sResult                = &quot;OK&quot;;
		var sCustomerControl       = sParamValue;
		var sCustomer              = sCustomerClass;
		var sProdSubTypeSearchExpr = &quot;&quot;;
		var sAssetSearchExpr       = &quot;&quot;;
		var iAssetCount            = 0;
		var sItemSearchExpr        = &quot;&quot;;
		var iOrderCount            = 0;
		var iTotalCount            = &quot;&quot;;

		var sStatusActive    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var sStatusSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);
		var sActionNew       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sStatusComplete  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var sStatusCancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var sStatusRejected  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Rejected&quot;);

		if (sCustomerControl == &quot;&quot;)
		{
			sProdSubTypeSearchExpr = GetProductIds(&quot;[VF Product Sub Type]=&apos;&quot; + sProdSubType + &quot;&apos;&quot;, &quot;Product Id&quot;);
			sAssetSearchExpr = &quot;[Owner Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND (&quot; + sProdSubTypeSearchExpr +
							   &quot;) AND ([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended + &quot;&apos;)&quot;;
		
			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.SetSearchExpr(sAssetSearchExpr);
			//bcAsset.ExecuteQuery(ForwardOnly);
			iAssetCount = bcAsset.CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count

			if (iAssetCount &gt; iMaxLimit)
			{
				sResult = &quot;KO&quot;;
			}
			else
			{
				sResult = &quot;OK&quot;;			
			}

			if (sResult == &quot;OK&quot;)
			{
				sItemSearchExpr = &quot;[Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND (&quot; + sProdSubTypeSearchExpr +
								  &quot;) AND [Action Code]=&apos;&quot; + sActionNew + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusComplete +
								  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusRejected + &quot;&apos;&quot;;

				bcItem = boOrder.GetBusComp(&quot;VF Order Entry - Line Items Lightest New&quot;);			

				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.SetSearchExpr(sItemSearchExpr);
				//bcItem.ExecuteQuery(ForwardOnly);
				iOrderCount = bcItem.CountRecords();

				if (iOrderCount+iAssetCount &gt; iMaxLimit)
				{
					sResult = &quot;KO&quot;;
				}
				else
				{
					sResult = &quot;OK&quot;;
				}
			}

			iTotalCount = iOrderCount + iAssetCount;
			CountResult.SetProperty(&quot;result&quot;,     sResult);
			CountResult.SetProperty(&quot;TotalCount&quot;, iTotalCount);
		}

		if (sCustomerControl != &quot;&quot; &amp;&amp; sCustomerControl == sCustomer)
		{
			sAssetSearchExpr = &quot;[Owner Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [VF Product Sub Type]=&apos;&quot; + sProdSubType +
							   &quot;&apos; AND ([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended + &quot;&apos;)&quot;;

			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.SetSearchExpr(sAssetSearchExpr);
			bcAsset.ExecuteQuery(ForwardOnly);
			iAssetCount = bcAsset.CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
		
			if (iAssetCount &gt; iMaxLimit)
			{
				sResult = &quot;KO&quot;;
			}
			else
			{
				sResult = &quot;OK&quot;;			
			}

			if (sResult == &quot;OK&quot;)
			{
				sItemSearchExpr = &quot;[Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [VF Product Sub Type]=&apos;&quot; + sProdSubType +
								  &quot;&apos; AND [Action Code]=&apos;&quot; + sActionNew + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusComplete +
								  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusRejected + &quot;&apos;&quot;;

				bcItem = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);			

				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.SetSearchExpr(sItemSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);
				iOrderCount = bcItem.CountRecords();

				if (iOrderCount+iAssetCount &gt; iMaxLimit)
				{
					sResult = &quot;KO&quot;;
				}
				else
				{
					sResult = &quot;OK&quot;;
				}
			}

			iTotalCount = iOrderCount + iAssetCount;
			CountResult.SetProperty(&quot;result&quot;,     sResult);
			CountResult.SetProperty(&quot;TotalCount&quot;, iTotalCount);
		}
	}	
	finally
	{	
		bcItem  = null;
		bcAsset = null;
		boOrder = null;
		BS = null;
		outProp = null;
		inProp = null;
	}
}"
			   SEQUENCE="36"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="10/03/2011 14:24:14"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GenericBundleData"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/***********************************************************
 *
 *	Name : GenericBundleData
 *	Description : Function used to retrieve Duration attribute from the Handset
 *
 ***********************************************************/
function GenericBundleData(sOrderId, sPromoAssetIntegId)
{
	try
	{
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);

		var sDuration = &quot;&quot;;
		var sItemId   = &quot;&quot;;

		var sProdTypeHANDSET = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot; || sPromoAssetIntegId == null || sPromoAssetIntegId == &quot;&quot;)
		{
			return sDuration;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;,               sOrderId);
		bcItem.SetSearchSpec(&quot;VF Root Prod Prom Instance Id&quot;, sPromoAssetIntegId);
		bcItem.SetSearchSpec(&quot;VF Product Type&quot;,               sProdTypeHANDSET);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return sDuration;
		}

		sItemId = bcItem.GetFieldValue(&quot;Id&quot;);

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Text Value&quot;);
		bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId);
		bcItemXA.SetSearchSpec(&quot;Name&quot;,      &quot;Duration&quot;);
		bcItemXA.ExecuteQuery(ForwardOnly);

		if (!bcItemXA.FirstRecord())
		{
			return sDuration;
		}

		sDuration = bcItemXA.GetFieldValue(&quot;Text Value&quot;);

		return sDuration;
	}
	finally
	{
		bcItemXA = null;
		bcItem   = null;
		boOrder   = null;
	}
}"
			   SEQUENCE="37"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBU(sBUName)
{
	try
	{
		var boOrganization : BusObject = TheApplication().GetBusObject(&quot;Organization&quot;);
		var bcOrganization : BusComp   = boOrganization.GetBusComp(&quot;Organization&quot;);

		var sBUId = &quot;&quot;;

		if (sBUName == null || sBUName == &quot;&quot;)
		{
			return(sBUId);
		}
	
		bcOrganization.ClearToQuery();
		bcOrganization.SetViewMode(AllView);
		bcOrganization.SetSearchSpec(&quot;Name&quot;, sBUName);
		bcOrganization.ExecuteQuery(ForwardOnly);

		if (bcOrganization.FirstRecord())
		{
			sBUId = bcOrganization.GetFieldValue(&quot;Id&quot;);
		}

		return(sBUId);
	}
	finally
	{
		bcOrganization 	= null;
		boOrganization	= null;
	}
}"
			   SEQUENCE="39"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="03/09/2012 17:09:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBillCycle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBillCycle (BillAccntId)
{
	try{
		var ComBO : BusObject = TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);
		var ComBC : BusComp = ComBO.GetBusComp(&quot;Com Invoice Profile&quot;);
		var BillCycle = &quot;&quot;;
		with(ComBC)
		{
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;BillAccntId&quot;,BillAccntId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
	
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Bill Cycle&quot;);
			SetSearchExpr(&quot;[Account Id] = &apos;&quot;+BillAccntId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				BillCycle = GetFieldValue(&quot;Bill Cycle&quot;);
			}
		}
		return(BillCycle);
	}
	finally
	{
		ComBC = null;
		ComBO = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="38"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="07/27/2011 12:50:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBundlePromoInfoFromOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBundlePromoInfoFromOrder(Inputs, Outputs)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		//var bcOrder : BusComp   = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var bcItem : BusComp    = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		
		var sProdGroupBundle = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;);
		var sProdTypeBundle  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
    	var sActionCodeNew   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
    	
		var sOrderId = Inputs.GetProperty(&quot;OrderId&quot;);

		Outputs.SetProperty(&quot;BundleIntegrationId&quot;,        &quot;&quot;);
		Outputs.SetProperty(&quot;BundleName&quot;,                 &quot;&quot;);
		Outputs.SetProperty(&quot;BundleRiskStatus&quot;,           &quot;&quot;);
		Outputs.SetProperty(&quot;BundleAverageInvoiceAmount&quot;, &quot;&quot;);
		Outputs.SetProperty(&quot;BundleTotalInvoiceAmount&quot;,   &quot;&quot;);
		Outputs.SetProperty(&quot;Product Number&quot;,             &quot;&quot;);
		Outputs.SetProperty(&quot;Product Type&quot;,               &quot;&quot;);
		Outputs.SetProperty(&quot;Product Sub Type&quot;,           &quot;&quot;);
		Outputs.SetProperty(&quot;Product Group&quot;,              &quot;&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}
			
		//bcOrder.SetViewMode(AllView);
		//bcOrder.ClearToQuery();
		//bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		//bcOrder.ExecuteQuery(ForwardOnly);

		//if (!bcOrder.FirstRecord())
		//{
		//	return;
		//}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.ActivateField(&quot;Product&quot;);
		bcItem.ActivateField(&quot;VF Risk Status&quot;);
		bcItem.ActivateField(&quot;VF Average Invoice Amount&quot;);
		bcItem.ActivateField(&quot;VF Total Invoice Amount&quot;);
		bcItem.ActivateField(&quot;Product Number&quot;);
		bcItem.ActivateField(&quot;VF Product Type&quot;);
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ActivateField(&quot;VF Product Group&quot;);
		bcItem.ActivateField(&quot;Integration Id&quot;);
		bcItem.SetSearchSpec(&quot;VF Product Group&quot;, sProdGroupBundle);
		bcItem.SetSearchSpec(&quot;VF Product Type&quot;,  sProdTypeBundle);
		bcItem.SetSearchSpec(&quot;Action Code&quot;,      sActionCodeNew);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;,  sOrderId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}				

		Outputs.SetProperty(&quot;BundleIntegrationId&quot;,        bcItem.GetFieldValue(&quot;Asset Integration Id&quot;)); 
		Outputs.SetProperty(&quot;BundleName&quot;,                 bcItem.GetFieldValue(&quot;Product&quot;));
		Outputs.SetProperty(&quot;BundleRiskStatus&quot;,           bcItem.GetFieldValue(&quot;VF Risk Status&quot;));
		Outputs.SetProperty(&quot;BundleAverageInvoiceAmount&quot;, bcItem.GetFieldValue(&quot;VF Average Invoice Amount&quot;));
		Outputs.SetProperty(&quot;BundleTotalInvoiceAmount&quot;,   bcItem.GetFieldValue(&quot;VF Total Invoice Amount&quot;));
		Outputs.SetProperty(&quot;Product Number&quot;,             bcItem.GetFieldValue(&quot;Product Number&quot;));
		Outputs.SetProperty(&quot;Product Type&quot;,               bcItem.GetFieldValue(&quot;VF Product Type&quot;));
		Outputs.SetProperty(&quot;Product Sub Type&quot;,           bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;));
		Outputs.SetProperty(&quot;Product Group&quot;,              bcItem.GetFieldValue(&quot;VF Product Group&quot;));
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}"
			   SEQUENCE="40"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCalcEndDateWithBillCycle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCalcEndDateWithBillCycle(billingAccountID,billCycleCount)
{	
	try
	{	
		if ( billingAccountID == null )
		{
			TheApplication().RaiseErrorText(&quot;Billing account has not been defined...&quot;);	
		}
	
		var billCycle = GetBillCycle(billingAccountID);
	
		if ( billCycle == null )
		{
			TheApplication().RaiseErrorText(&quot;Account bill cycle has not been defined...&quot;);	
		}
		
		var today = GetCurrentDate();
		var month = today.getMonth();
		var year = today.getFullYear();
		if ( today.getDate() &gt;= billCycle )
		{		
			month = ToNumber(month) + ToNumber(billCycleCount);
		}
		else
		{
			month = ToNumber(month) + ToNumber(billCycleCount) - 1;
		}
		if ( month &gt; 12 )
		{
			year = year + 1; 
		}
		var sMonth = ToString((month%12) +1);
		if (sMonth.length == 1)
		{
			sMonth = &quot;0&quot; + sMonth;
		} 
		var sDay = ToString(billCycle); 
		if (sDay.length == 1) 
		{
			sDay = &quot;0&quot; + sDay;
		} 
		return ( sMonth + &quot;/&quot; + sDay + &quot;/&quot; + year + &quot; 00:00:00&quot; );
	}
	catch(e)
	{
		return &quot;&quot;;	
		throw e;
	}
}"
			   SEQUENCE="41"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCount(OrderId,RootId)
{
	try
	{
		var OrderEntryBO	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var LineItems 		: BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var LineItemCounter	= &quot;&quot;;
		with (LineItems)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;VF Up Down Counter&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			inProp.SetProperty(&quot;RootId&quot;,RootId);	
			inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Id] = &apos;&quot;+RootId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
				LineItemCounter = GetFieldValue(&quot;VF Up Down Counter&quot;);
		}
		return(LineItemCounter);
	}
	finally
	{
		LineItems		= null;
		OrderEntryBO	= null;
		inProp			= null;
		outProp			= null;
		BS				= null;
	}
}"
			   SEQUENCE="42"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2012 08:10:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCountBP"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCountBP(sOrderId, sProdPromInstId)
{
	try
	{
		var boOrder	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sItemSearchExpr  = &quot;&quot;;
		var sLineItemCounter = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot; || sProdPromInstId == null || sProdPromInstId == &quot;&quot;)
		{
			return(sLineItemCounter);
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Prod Prom Instance Id]=&apos;&quot; + sProdPromInstId +
						  &quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Up Down Counter&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
		{
			sLineItemCounter = bcItem.GetFieldValue(&quot;VF Up Down Counter&quot;);
		}

		return(sLineItemCounter);
	}
	finally
	{
		bcItem  = null;
		boOrder	= null;
	}
}"
			   SEQUENCE="43"
			   UPDATED="08/03/2016 00:39:16"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCurrentDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCurrentDate()
{
	//Created due to Oracle Bug 10589024 : [CR#12-1XHF9OH][FR#12-1XHF9P2] CLIB LIBRARY AND DATE OBJECT HAVE DIFFERENT RESUL
	//Date constructor does not work properly in HP-UX
	var currentDate:chars = &quot;&quot;;

	Clib.strftime(currentDate, &apos;%m/%d/%Y %H:%M:%S&apos;, Clib.localtime(Clib.time()));
	
	return new Date(currentDate);
}"
			   SEQUENCE="44"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="03/20/2015 01:56:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetInfoFromOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetInfoFromOrder(Inputs, Outputs)
{
	try
	{
		var OrderEntryBO : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		//var OrderBC : BusComp = OrderEntryBO.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var OrderLineItems : BusComp = OrderEntryBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		
		Outputs.SetProperty(&quot;OrderSubType&quot;,&quot;&quot;); 
		Outputs.SetProperty(&quot;LineType&quot;,&quot;&quot;); 
		Outputs.SetProperty(&quot;RiskStatus&quot;,&quot;&quot;); 
		Outputs.SetProperty(&quot;AverageInvoice&quot;,&quot;&quot;); 
		Outputs.SetProperty(&quot;TotalInvoice&quot;,&quot;&quot;); 
		Outputs.SetProperty(&quot;BillingAccId&quot;,&quot;&quot;); 
		Outputs.SetProperty(&quot;RootItemId&quot;,&quot;&quot;); 
		Outputs.SetProperty(&quot;OrdLineAccountId&quot;,&quot;&quot;); 
		
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		//with (OrderBC)
		//{
		//	SetViewMode(AllView);
		//	ClearToQuery();
		//	SetSearchSpec(&quot;Id&quot;,OrderId);
		//	ExecuteQuery(ForwardOnly);
		//	if(FirstRecord())
		//	{
				with (OrderLineItems)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Order Sub Type&quot;);
					ActivateField(&quot;VF Line Type&quot;);
					ActivateField(&quot;VF Risk Not To Pay&quot;);
					ActivateField(&quot;VF Average Invoice&quot;);
					ActivateField(&quot;VF Total Invoice&quot;);			
					ActivateField(&quot;Billing Account Id&quot;);
					ActivateField(&quot;Root Order Item Id&quot;);
					ActivateField(&quot;Account Id&quot;);									
					SetSearchSpec(&quot;Order Header Id&quot;,OrderId);
					SetSearchSpec(&quot;Product Number&quot;,&quot;1000&quot;);					
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{					
						Outputs.SetProperty(&quot;OrderSubType&quot;,GetFieldValue(&quot;Order Sub Type&quot;)); 
						Outputs.SetProperty(&quot;LineType&quot;, GetFieldValue(&quot;VF Line Type&quot;));
						Outputs.SetProperty(&quot;RiskStatus&quot;,GetFieldValue(&quot;VF Risk Not To Pay&quot;));
						Outputs.SetProperty(&quot;AverageInvoice&quot;,GetFieldValue(&quot;VF Average Invoice&quot;));
						Outputs.SetProperty(&quot;TotalInvoice&quot;,GetFieldValue(&quot;VF Total Invoice&quot;));
						Outputs.SetProperty(&quot;BillingAccId&quot;, GetFieldValue(&quot;Billing Account Id&quot;));
						Outputs.SetProperty(&quot;RootItemId&quot;, GetFieldValue(&quot;Root Order Item Id&quot;));
						Outputs.SetProperty(&quot;OrdLineAccountId&quot;, GetFieldValue(&quot;Account Id&quot;));
					}
				}
		//	}
		//}
	}
	finally
	{
		OrderLineItems=null;
		OrderEntryBO=null;
	}
}"
			   SEQUENCE="45"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetPositionType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetPositionType()
{
	try
	{
		var BOPosition			: BusObject = TheApplication().GetBusObject(&quot;Position&quot;);
		var BCPosition			: BusComp = BOPosition.GetBusComp(&quot;Position&quot;);
		var strPositionName				= TheApplication().PositionName();
		var strPositionType=&quot;&quot;;
		//EBU Retrofits
		var sCCSubmission =  TheApplication().GetProfileAttr(&quot;CARBON_COPY_SUBMISSION&quot;);
		var sCCPositionID =  TheApplication().GetProfileAttr(&quot;CARBON_COPY_POSITION&quot;);

		with(BCPosition)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Position Type&quot;);
			
			if(sCCSubmission ==&quot;Y&quot; &amp;&amp; sCCPositionID != &quot;&quot;)//EBU Retrofits
			{
				SetSearchSpec (&quot;Id&quot;, sCCPositionID);
			}
			else
			{
				SetSearchSpec (&quot;Name&quot;, strPositionName);
			}
			
			ExecuteQuery(ForwardOnly);	
			if(FirstRecord())
			{
				strPositionType = GetFieldValue(&quot;Position Type&quot;);
				if(sCCSubmission ==&quot;Y&quot; &amp;&amp; sCCPositionID != &quot;&quot;)//EBU Retrofits
				{
					TheApplication().SetProfileAttr(&quot;CARBON_COPY_POSITION_TYPE&quot;,strPositionType);
				}
				return(strPositionType);		
			}
		}
	}
	/*catch(e)
	{
		var err = e.errText;
	}for RwOracle*/
	finally
	{
		BCPosition = null;
		BOPosition = null;
	}
}"
			   SEQUENCE="46"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2011 22:51:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetProductIds"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetProductIds(sSearchExpr,sOutputField)
{
	try
	{	
		var oBO : BusObject = TheApplication().GetBusObject(&quot;VF Product Light&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;VF Product Light&quot;);
		
		oBC.ClearToQuery();
		oBC.SetViewMode(AllView);
		oBC.SetSearchExpr(sSearchExpr);
		oBC.ExecuteQuery(ForwardOnly);
		var i = oBC.FirstRecord();
		var sId;
		var sOutputSearchExpr = &quot;&quot;;
		var sOr = &quot;&quot;;
		while(i)
		{	
			sId = oBC.GetFieldValue(&quot;Id&quot;);
			
			sOutputSearchExpr = sOutputSearchExpr+sOr+&quot;[&quot;+sOutputField+&quot;] = &apos;&quot;+sId+&quot;&apos;&quot;;
			
			sOr = &quot; or &quot;;
			
			i = oBC.NextRecord();
		}
		return(sOutputSearchExpr);
	}
	finally
	{
		oBC = null;
		oBO = null;
	}
}"
			   SEQUENCE="47"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="12/26/2013 11:25:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetTariffName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetTariffName(NewTariff)
{
	try
	{
		var ProdBO	: BusObject = TheApplication().GetBusObject(&quot;Internal Product&quot;);
		var ProdBC	: BusComp = ProdBO.GetBusComp(&quot;Internal Product&quot;);
		var Prod	= &quot;&quot;;
		
		with(ProdBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Product Translated&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;NewTariff&quot;,NewTariff);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(&quot;[Part #]=&apos;&quot;+NewTariff+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				Prod = ProdBC.GetFieldValue(&quot;Product Translated&quot;);
		}
		return(Prod);
	}
	finally
	{
		ProdBC	= null;
		ProdBO	= null;
		inProp	= null;
		outProp	= null;
		BS		= null;
	}
}"
			   SEQUENCE="48"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2012 08:10:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InactivateAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InactivateAsset (Inputs, Outputs)
{
	try
	{
		var BoOrderEntry 	: BusObject;
		var AssetBC 		: BusComp;
		var App = TheApplication();
		var RootAssetId 	= Inputs.GetProperty(&quot;RootAssetId&quot;);
		var ActiveStatus 	= App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var InactiveStatus 	= App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var NONRECD 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;NONRECD&quot;);
		var NONRECW 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;NONRECW&quot;);
		var sysdate 		= GetCurrentDate();  
		var sysdateMS 		= sysdate.getTime();
		var DayToMS 		= 30*24*3600*1000;
		BoOrderEntry 		= App.GetBusObject(&quot;X Order Entry&quot;);
		AssetBC 			= BoOrderEntry.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		with(AssetBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;Effective End Date&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;RootAssetId&quot;,RootAssetId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(&quot;[Root Asset Id] = &apos;&quot;+RootAssetId+&quot;&apos; AND ([VF Product Sub Type] = &apos;&quot;+NONRECD+&quot;&apos; OR [VF Product Sub Type] = &apos;&quot;+NONRECW+&quot;&apos;) AND [Status] = &apos;&quot;+ActiveStatus+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				var EndDate = GetFieldValue(&quot;Effective End Date&quot;);			
				if (EndDate != &quot;&quot;)
				{
					var EndDt = new Date(EndDate);
					var EndDtMS = EndDt.getTime();
					
					if (sysdateMS &gt; EndDtMS)
					{
						SetFieldValue(&quot;Status&quot;,InactiveStatus);
						WriteRecord();
					}
				}
			}
		}
		
	}
	finally
	{
		AssetBC 		= null;
		BoOrderEntry 	= null;
		inProp			= null;
		outProp			= null;
		BS				= null;
		App 			= null;
	}
}"
			   SEQUENCE="49"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InsertSrvEndDt"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InsertSrvEndDt(Inputs, Outputs)
{
	try
	{
		var bsBackdated    : Service     = TheApplication().GetService(&quot;VF Backdated Orders Management&quot;);
		var psBackdatedIn  : PropertySet = TheApplication().NewPropertySet();
		var psBackdatedOut : PropertySet = TheApplication().NewPropertySet();
		var boOrder        : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcOrderItem    : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcOrderItemXA  : BusComp     = null;
		var boParameters   : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameters   : BusComp     = boParameters.GetBusComp(&quot;ACS NI Parameter&quot;);
		var boItem         : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem         : BusComp     = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var boItemAux      : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItemAux      : BusComp     = boItemAux.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var sOrderId       = Inputs.GetProperty(&quot;OrderId&quot;);
		var sActionTypeLIC = Inputs.GetProperty(&quot;Order Sub Type&quot;);
		var sBillAccountId = Inputs.GetProperty(&quot;BillingAccountId&quot;);
		var sItemSearchExpr        = &quot;&quot;;
		var bHasItem               = false;
		var sItemId                = &quot;&quot;;
		var sItemBillAccountId     = &quot;&quot;;
		var sItemProdGroup 	       = &quot;&quot;;
		var sItemActionReason      = &quot;&quot;;
		var sItemPartNumber        = &quot;&quot;;
		var sItemIntegrationId     = &quot;&quot;;
		var sItemAssetIntegId      = &quot;&quot;;
		var sItemTerminationReason = &quot;&quot;;
		var sServiceStartDate      = &quot;&quot;;
		var sServiceEndDate        = &quot;&quot;;
		var bSetServiceEndDate     = false;
		var sDurationMonth         = &quot;&quot;;
		var oServiceEndDate        = null;
		var iMilliSecondsDate      = 0;
		var sParameterSearchExpr   = &quot;&quot;;
		var sOrderItemXASearchExpr = &quot;&quot;;
		var oDurationEndDate       = null;
		var iRightMonth            = 0;
		var iNewMonth              = 0;
		var sProdServLength        = &quot;&quot;;
		var sProdServUOM           = &quot;&quot;;
		var sProdGroupCAMP       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP&quot;);
		var sProdGroupADDON      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;ADDON&quot;);//CR322
		var sProdGroupMTT        = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;MTT&quot;);
		var sProdGroupPROMO      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;PROMO&quot;);//CR340
        var sProdGroupCAMPPROMO  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;);
		var sProdTypeHANDSET     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var sProdTypeDISCOUNT    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;DISCOUNT&quot;);//TLGA-687
		var sActionAdd           = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sBillCycle           = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Bill Cycle&quot;);
		var sReasonBackDated     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;350&quot;);
		var sTermReasonUpgrade   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TERMINATION_REASON&quot;,&quot;Upgrade&quot;);
		var sTermReasonDowngrade = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TERMINATION_REASON&quot;,&quot;Downgrade&quot;);
		var sServiceLengthUoMHours = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Hours&quot;); 
		var sServiceLengthUoMDays = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Days&quot;); 
		var sServiceLengthUoMWeeks = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Weeks&quot;); 
		var sServiceLengthUoMMonths = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Months&quot;);
		var sServiceLengthUoMCalendarDays = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Calendar Days&quot;); //JMARQUES
		var sServiceLengthUoMBillCycle = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;UNIT_VALUES&quot;,&quot;Bill Cycle&quot;); //JMARQUES
		var psInputs = TheApplication().NewPropertySet(); //JMARQUES
		var psOutputs = TheApplication().NewPropertySet();	//JMARQUES	

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		if (sActionTypeLIC == &quot;134&quot;)
		{
			try
			{
				// in order to correctly set Due Date
				psBackdatedIn.SetProperty(&quot;OrderId&quot;,          sOrderId); 
				psBackdatedIn.SetProperty(&quot;BillingAccountId&quot;, sBillAccountId);
				bsBackdated.InvokeMethod(&quot;CalculateBackdated&quot;, psBackdatedIn, psBackdatedOut);

				//and then to correctly set Service Start Date
				psBackdatedIn.Reset();
				psBackdatedOut.Reset();
				psBackdatedIn.SetProperty(&quot;OrderId&quot;, sOrderId);
				bsBackdated.InvokeMethod(&quot;AlignStartEnd&quot;, psBackdatedIn, psBackdatedOut); 
			}
			catch(exp)
			{
			}
		}
		/*** End TLG-6575 ***/
		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionAdd +
						  &quot;&apos; AND (([VF Product Group]=&apos;&quot; + sProdGroupCAMP + 
						  &quot;&apos; AND [VF Product Type] IS NOT NULL AND [VF Product Type]&lt;&gt;&apos;&quot; + sProdTypeHANDSET +
						  &quot;&apos;) OR [VF Product Group]=&apos;&quot; + sProdGroupADDON +
						  &quot;&apos; OR [VF Product Group]=&apos;&quot; + sProdGroupMTT +
						  &quot;&apos; OR [VF Product Group]=&apos;&quot; + sProdGroupPROMO + 
						  &quot;&apos; OR [VF Product Type]=&apos;&quot; + sProdTypeDISCOUNT +
						  &quot;&apos; OR [VF Product Group]=&apos;&quot;+ sProdGroupCAMPPROMO +
						  &quot;&apos; OR [Part Number]=&apos;53012&apos; OR [Part Number]=&apos;17200&apos; OR [Part Number]=&apos;17300&apos;&quot; + 
						  &quot; OR [Part Number]=&apos;17400&apos; OR [Part Number]=&apos;17500&apos; OR [Part Number]=&apos;17600&apos;&quot; +
						  &quot; OR [Part Number]=&apos;17700&apos; OR [Part Number]=&apos;17800&apos; OR [Part Number]=&apos;17900&apos;&quot; +
						  &quot; OR [Part Number]=&apos;18000&apos; OR [Part Number]=&apos;18100&apos; OR [Part Number]=&apos;18200&apos;&quot; +
						  &quot; OR [Part Number]=&apos;18300&apos;)&quot;; //Searchspec modified :: Bundled Promotions :: 09.04.2013

		bcOrderItem.SetViewMode(AllView);
		bcOrderItem.ClearToQuery();
		bcOrderItem.ActivateField(&quot;Billing Account Id&quot;);
		bcOrderItem.ActivateField(&quot;VF Product Group&quot;); //Bundled Promotions :: 09.04.2013
		bcOrderItem.ActivateField(&quot;TELCO Root Item Action Reason&quot;);
		bcOrderItem.ActivateField(&quot;Part Number&quot;);
		bcOrderItem.ActivateField(&quot;Integration Id&quot;);
		bcOrderItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcOrderItem.ActivateField(&quot;VF Termination Reason&quot;);
		bcOrderItem.ActivateField(&quot;Due Date&quot;);
		bcOrderItem.ActivateField(&quot;Service Start Date&quot;);
		bcOrderItem.ActivateField(&quot;Service End Date&quot;);
		bcOrderItem.ActivateField(&quot;Service Start Date addOneDay&quot;);
		bcOrderItem.ActivateField(&quot;Service Start Date addOneMonth&quot;);
		bcOrderItem.ActivateField(&quot;Due Date addOneMonth&quot;);	//VFTRCBU Retrofits - 09.01.2015
		bcOrderItem.SetSearchExpr(sItemSearchExpr);
		bcOrderItem.ExecuteQuery(ForwardOnly);
		bHasItem = bcOrderItem.FirstRecord();
		while(bHasItem)
		{
			sItemId                = bcOrderItem.GetFieldValue(&quot;Id&quot;);
			sItemBillAccountId     = bcOrderItem.GetFieldValue(&quot;Billing Account Id&quot;);
			sItemProdGroup         = bcOrderItem.GetFieldValue(&quot;VF Product Group&quot;);//Bundled Promotions :: 09.04.2013
			sItemActionReason      = bcOrderItem.GetFieldValue(&quot;TELCO Root Item Action Reason&quot;);
			sItemPartNumber        = bcOrderItem.GetFieldValue(&quot;Part Number&quot;);
			sItemIntegrationId     = bcOrderItem.GetFieldValue(&quot;Integration Id&quot;);
			sItemAssetIntegId      = bcOrderItem.GetFieldValue(&quot;Asset Integration Id&quot;);
			sItemTerminationReason = bcOrderItem.GetFieldValue(&quot;VF Termination Reason&quot;);
			bSetServiceEndDate     = true;
			sDurationMonth         = &quot;&quot;;
			// For BackDated Order, use Due Date as Service Start Date
			if (sItemActionReason == &quot;350&quot; || sItemActionReason == sReasonBackDated)
				sServiceStartDate = bcOrderItem.GetFieldValue(&quot;Due Date&quot;);
			else
				sServiceStartDate = bcOrderItem.GetFieldValue(&quot;Service Start Date&quot;);

			if (sItemPartNumber == &quot;14605&quot;)//PROD00027261 DEV3 Retrofit
			{
				// TLG-6276
				sServiceEndDate = bcOrderItem.GetFieldValue(&quot;Service Start Date addOneDay&quot;);
				bcOrderItem.SetFieldValue(&quot;Service End Date&quot;, sServiceEndDate);
				bcOrderItem.WriteRecord();
				bSetServiceEndDate = false;
			}
			if (sItemPartNumber == &quot;14606&quot; || sItemPartNumber == &quot;14607&quot; || sItemPartNumber == &quot;14608&quot; ||
				sItemPartNumber == &quot;14609&quot; || sItemPartNumber == &quot;14610&quot;)
			{
				if (sItemActionReason == &quot;350&quot; || sItemActionReason == sReasonBackDated)
					sServiceEndDate = bcOrderItem.GetFieldValue(&quot;Due Date addOneMonth&quot;);
				else
					sServiceEndDate = bcOrderItem.GetFieldValue(&quot;Service Start Date addOneMonth&quot;);
				bcOrderItem.SetFieldValue(&quot;Service End Date&quot;, sServiceEndDate);
				bcOrderItem.WriteRecord();
				bSetServiceEndDate = false;
			}
			if (sItemPartNumber == &quot;52111&quot; || sItemPartNumber == &quot;52104&quot; || sItemPartNumber == &quot;52105&quot; ||
				sItemPartNumber == &quot;52106&quot; || sItemPartNumber == &quot;52107&quot; || sItemPartNumber == &quot;52108&quot; ||
				sItemPartNumber == &quot;52109&quot; || sItemPartNumber == &quot;52110&quot; || sItemPartNumber == &quot;53012&quot;)//PROD00028859 
			{
				oServiceEndDate = CalcBillCycleEndDate(sItemBillAccountId);	
				iMilliSecondsDate = oServiceEndDate.toSystem();
				iMilliSecondsDate = iMilliSecondsDate * 1000;
				iMilliSecondsDate = iMilliSecondsDate + 10*60*1000;
				oServiceEndDate.setTime(iMilliSecondsDate);
				sServiceEndDate = (oServiceEndDate.getMonth()+1) + &quot;/&quot; + oServiceEndDate.getDate() + &quot;/&quot; +
								  oServiceEndDate.getFullYear()+ &quot; &quot; + oServiceEndDate.getHours() + &quot;:&quot; +
								  oServiceEndDate.getMinutes() + &quot;:&quot; + oServiceEndDate.getSeconds();
				bcOrderItem.SetFieldValue(&quot;Service End Date&quot;, sServiceEndDate);
				bcOrderItem.WriteRecord();
				bSetServiceEndDate = false;
			}
			bSetServiceEndDate = bSetServiceEndDate &amp;&amp;
								 sItemTerminationReason != sTermReasonUpgrade &amp;&amp;
								 sItemTerminationReason != sTermReasonDowngrade;

			if (bSetServiceEndDate)
			{
				// Check the duration of Addon into Parameter where Value is the Duration Month
				sParameterSearchExpr = &quot;[Function]=&apos;VF Addon Mon&apos; AND [Name]=&apos;&quot; + sItemPartNumber + &quot;&apos;&quot;;
				bcParameters.SetViewMode(AllView);
				bcParameters.ClearToQuery();
				bcParameters.ActivateField(&quot;Value&quot;);
				bcParameters.SetSearchExpr(sParameterSearchExpr);
				bcParameters.ExecuteQuery(ForwardOnly);
				if (bcParameters.FirstRecord())
				{
					sDurationMonth = bcParameters.GetFieldValue(&quot;Value&quot;);
				}
				// Introduced by Promotions CR
				if (sItemProdGroup == sProdGroupCAMPPROMO)
				{
					sDurationMonth = GenericBundleData(sOrderId, sItemAssetIntegId);
				}
				else if (sItemPartNumber == &quot;25100&quot;)
				{
					sDurationMonth = &quot;6&quot;;
				}
				else if (sDurationMonth == null || sDurationMonth == &quot;&quot;)
				{
					sOrderItemXASearchExpr = &quot;[Object Id]=&apos;&quot; + sItemId + &quot;&apos; AND &quot; +
											 &quot;([Name]=&apos;Duration&apos; OR [Name]=&apos;Duration (Months)&apos; OR&quot; +
											 &quot; [Name]=&apos;Commitment Duration&apos; OR [Name]=&apos;Discount Duration&apos;)&quot;;
					bcOrderItemXA = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
					bcOrderItemXA.SetViewMode(AllView);
					bcOrderItemXA.ClearToQuery();
					bcOrderItemXA.ActivateField(&quot;Value&quot;);
					bcOrderItemXA.SetSearchExpr(sOrderItemXASearchExpr);
					bcOrderItemXA.ExecuteQuery(ForwardOnly);
					if (bcOrderItemXA.FirstRecord())
						sDurationMonth = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
				}
			}
			bSetServiceEndDate = bSetServiceEndDate &amp;&amp;
								 sDurationMonth != null &amp;&amp; sDurationMonth != &quot;&quot; &amp;&amp; sDurationMonth != &quot;-&quot;;

			// VFTRCBU Retrofits | 21.01.2015 | TiagoRocha - Start
			if (bSetServiceEndDate)
			{
				// TC-5291 Service End Date is calculated by month of the date information (DidemAydogdu)
				if (sServiceStartDate != null &amp;&amp; sServiceStartDate != &quot;&quot;)
					oDurationEndDate = new Date(sServiceStartDate);
				else
					oDurationEndDate = GetCurrentDate();

				iRightMonth = (ToNumber(oDurationEndDate.getMonth()) + ToNumber(sDurationMonth)); 
 	    		oDurationEndDate.setMonth(iRightMonth);
				iRightMonth = iRightMonth % 12;
 				iNewMonth   = oDurationEndDate.getMonth();
				if (iRightMonth != iNewMonth)
				{
					//shows last month&apos;s last day//
					oDurationEndDate.setDate(1);
					oDurationEndDate.setDate(oDurationEndDate.getDate() - 1);
				}	
				oServiceEndDate = GetCurrentDate();
				oServiceEndDate.setTime(oDurationEndDate);
				iMilliSecondsDate = oServiceEndDate.toSystem();
				iMilliSecondsDate = iMilliSecondsDate * 1000;
				iMilliSecondsDate = iMilliSecondsDate + 10*60*1000;
				oServiceEndDate.setTime(iMilliSecondsDate);
				sServiceEndDate = (oServiceEndDate.getMonth()+1) + &quot;/&quot; + oServiceEndDate.getDate() + &quot;/&quot; +
								  oServiceEndDate.getFullYear() + &quot; &quot; + oServiceEndDate.getHours() + &quot;:&quot; +
								  oServiceEndDate.getMinutes() + &quot;:&quot; + oServiceEndDate.getSeconds();

				bcOrderItem.SetFieldValue(&quot;Service End Date&quot;, sServiceEndDate);
				bcOrderItem.WriteRecord();
			}
			bHasItem = bcOrderItem.NextRecord();
		}
		// VFTRCBU Retrofits | 21.01.2015 | TiagoRocha - End

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
						  &quot;&apos; AND [VF Service Length] IS NOT NULL AND [VF Service Length UoM] IS NOT NULL AND [Action Code]=&apos;&quot; + sActionAdd + &quot;&apos;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Service Length&quot;);
		bcItem.ActivateField(&quot;VF Service Length UoM&quot;);
		bcItem.ActivateField(&quot;Service Start Date&quot;);
		bcItem.ActivateField(&quot;Service End Date&quot;);
		bcItem.ActivateField(&quot;Order Header Id&quot;);
		bcItem.ActivateField(&quot;Service Length&quot;);
		bcItem.ActivateField(&quot;Service Length UoM&quot;);
		bcItem.ActivateField(&quot;VFTRCBU Customer Type Calc&quot;); //JMARQUES WA#20
		bcItem.ActivateField(&quot;Order Requested Ship Date&quot;);//JMARQUES WA#20
		bcItem.ActivateField(&quot;Bill Cycle&quot;); //JMARQUES WA#20
		bcItem.ActivateField(&quot;Billing Account Id&quot;); //&lt;-
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);
		bHasItem = bcItem.FirstRecord();
		while(bHasItem)
		{			
			if(bcItem.GetFieldValue(&quot;VFTRCBU Customer Type Calc&quot;) == &quot;Y&quot;)
			{ //JMARQUES WA#20
				sProdServLength = bcItem.GetFieldValue(&quot;VF Service Length&quot;);
				sProdServUOM    = bcItem.GetFieldValue(&quot;VF Service Length UoM&quot;);
				if(sProdServUOM == sServiceLengthUoMHours || 
						sProdServUOM == sServiceLengthUoMDays || 
						sProdServUOM == sServiceLengthUoMWeeks || 
						sProdServUOM == sServiceLengthUoMCalendarDays || 
						sProdServUOM == sServiceLengthUoMBillCycle ||
						sProdServUOM == sServiceLengthUoMMonths) 
				{
					psInputs.SetProperty(&quot;ServLength&quot;,sProdServLength);
					psInputs.SetProperty(&quot;ServUOM&quot;,sProdServUOM);
					psInputs.SetProperty(&quot;DueDate&quot;,bcItem.GetFieldValue(&quot;Order Requested Ship Date&quot;));
					psInputs.SetProperty(&quot;BillCycle&quot;,bcItem.GetFieldValue(&quot;Bill Cycle&quot;));
					psInputs.SetProperty(&quot;LIServiceStartDate&quot;,bcItem.GetFieldValue(&quot;Service Start Date&quot;)); //PSANTOS VFTRCBU-19350
					psInputs.SetProperty(&quot;CustomerType&quot;,bcItem.GetFieldValue(&quot;VFTRCBU Customer Type Calc&quot;)); //&lt;-
					psInputs.SetProperty(&quot;BillingAccountId&quot;,bcItem.GetFieldValue(&quot;Billing Account Id&quot;)); //&lt;-
					psInputs.SetProperty(&quot;OrderId&quot;,bcItem.GetFieldValue(&quot;Order Header Id&quot;));
					CalculateSrvEndDtCBU(psInputs, psOutputs);
				
					bcItem.SetFieldValue(&quot;Service End Date&quot;, psOutputs.GetProperty(&quot;ToSet&quot;));
					bcItem.WriteRecord();	
				}
			}	
			else {
				sItemId         = bcItem.GetFieldValue(&quot;Id&quot;);
				sProdServLength = bcItem.GetFieldValue(&quot;VF Service Length&quot;);
				sProdServUOM    = bcItem.GetFieldValue(&quot;VF Service Length UoM&quot;);
				// Added by junaid VFTK 20120315 for defect PROD00027860
				bcItem.SetFieldValue(&quot;Service Length&quot;,     sProdServLength);
				bcItem.SetFieldValue(&quot;Service Length UoM&quot;, sProdServUOM);
				bcItem.WriteRecord();
				//End
				bcItemAux.SetViewMode(AllView);
				bcItemAux.ClearToQuery();
				bcItemAux.ActivateField(&quot;Service Start Date&quot;);
				bcItemAux.ActivateField(&quot;Service End Date&quot;);
				bcItemAux.ActivateField(&quot;Calc Service End Date&quot;);
				bcItemAux.SetSearchSpec(&quot;Id&quot;, sItemId);
				bcItemAux.ExecuteQuery(ForwardOnly);
				if (bcItemAux.FirstRecord())
				{
					bcItemAux.SetFieldValue(&quot;Service End Date&quot;, bcItemAux.GetFieldValue(&quot;Calc Service End Date&quot;));
					bcItemAux.WriteRecord();
				}
			}			
			bHasItem = bcItem.NextRecord();
		}	
	}
	finally
	{
		bcItemAux      = null;
		boItemAux      = null;
		bcItem         = null;
		boItem         = null;
		bcParameters   = null;
		boParameters   = null;
		bcOrderItemXA  = null;
		bcOrderItem    = null;
		boOrder        = null;
		psBackdatedOut = null;
		psBackdatedIn  = null;
		bsBackdated    = null;
	}
}"
			   SEQUENCE="50"
			   UPDATED="01/19/2017 01:29:02"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="KafeinCampCheck"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function KafeinCampCheck(Inputs, Outputs)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sOrderId          = Inputs.GetProperty(&quot;OrderId&quot;);
		var sMessage          = &quot;&quot;;
		var sItemSearchExpr   = &quot;&quot;;
		var sItemActionDown   = &quot;&quot;;
		var sAssetIntegIdDown = &quot;&quot;;
		var sItemActionUp     = &quot;&quot;;
		var sAssetIntegIdUp   = &quot;&quot;;
		var sUpDownCounter    = &quot;&quot;

		var sProdTypeHANDSETPROMO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var sActionNew            = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sActionDeleted        = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);

		Outputs.SetProperty(&quot;Result&quot;, &quot;&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
						  &quot;&apos; AND [Part Number]=&apos;23001&apos; AND ([Action Code]=&apos;&quot; + sActionDeleted +
						  &quot;&apos; OR [Action Code]=&apos;&quot; + sActionNew + &quot;&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sItemActionDown   = bcItem.GetFieldValue(&quot;Action Code&quot;);
		sAssetIntegIdDown = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);

		if (bcItem.NextRecord())
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
						  &quot;&apos; AND [Part Number]=&apos;23002&apos; AND ([Action Code]=&apos;&quot; + sActionDeleted +
						  &quot;&apos; OR [Action Code]=&apos;&quot; + sActionNew + &quot;&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sItemActionUp   = bcItem.GetFieldValue(&quot;Action Code&quot;);
		sAssetIntegIdUp = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);

		if (bcItem.NextRecord())
		{
			return;
		}

		if (sItemActionDown == sItemActionUp)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
						  &quot;&apos; AND ([Prod Prom Instance Id]=&apos;&quot; + sAssetIntegIdDown +
						  &quot;&apos; OR [Prod Prom Instance Id]=&apos;&quot; + sAssetIntegIdUp +
						  &quot;&apos;) AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Up Down Counter&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sUpDownCounter = bcItem.GetFieldValue(&quot;VF Up Down Counter&quot;);

		if (sItemActionUp == sActionDeleted &amp;&amp; sItemActionDown == sActionNew)
		{
			if (sUpDownCounter == &quot;0&quot;)
				sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_127&quot;);
			else if (sUpDownCounter == &quot;1&quot;)
				sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_126&quot;);
		}

		if (sItemActionDown == sActionDeleted &amp;&amp; sItemActionUp == sActionNew)
		{
			if (sUpDownCounter &lt; 2 &amp;&amp; sUpDownCounter != &quot;&quot;)
				sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_124&quot;);
			else if (sUpDownCounter != &quot;&quot;)
				sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_125&quot;);
		}

		Outputs.SetProperty(&quot;Result&quot;, sMessage);
	}
	finally
	{
		bcItem 	= null;
		boOrder	= null;
	}
}"
			   SEQUENCE="51"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/13/2012 18:55:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="KafeinTarrifCheck"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function KafeinTarrifCheck(Inputs, Outputs)
{
	try
	{
		var OrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
		var OrderEntryBO	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderLineItems 	: BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var AstBC	 		: BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var TariffLov 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var strActive		= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var Add 			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var Modified 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);			
		var Delete 			= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var Exist			= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;)
		var Msg				= &quot;&quot;;
		var Expr			= &quot;[Order Header Id] = &apos;&quot; + OrderId + &quot;&apos; AND (([Part Number] = &apos;5006&apos; AND ([Action Code]=&apos;&quot;+Exist+&quot;&apos; OR [Action Code]=&apos;&quot;+Modified+&quot;&apos; )) OR ([VF Product Group] = &apos;&quot;+TariffLov+&quot;&apos; AND ([Action Code] = &apos;&quot; + Delete + &quot;&apos; OR [Action Code]=&apos;&quot;+Add+&quot;&apos;)))&quot;;

		with (OrderLineItems)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Action Code&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ClearToQuery();
			SetSearchExpr(Expr);
			ExecuteQuery(ForwardOnly);
			var RecCount = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
			if(RecCount == 3)
			{
				var Rec = FirstRecord();
				var ProdGroup = &quot;&quot;;
				var ActCode = &quot;&quot;;
				var CurTariff = &quot;&quot;;
				var NewTariff = &quot;&quot;;
				while(Rec)
				{
					ProdGroup	= GetFieldValue(&quot;VF Product Group&quot;);
					ActCode 	= GetFieldValue(&quot;Action Code&quot;);
					if(ProdGroup == TariffLov &amp;&amp; ActCode == Delete)
						CurTariff = GetFieldValue(&quot;Part Number&quot;);
					else if(ProdGroup == TariffLov &amp;&amp; ActCode == Add)
						NewTariff = GetFieldValue(&quot;Part Number&quot;);
					Rec = NextRecord();
				}
			
				if(CurTariff==&quot;1305&quot; || CurTariff==&quot;1306&quot; || CurTariff==&quot;1307&quot; || CurTariff==&quot;1318&quot;)
				{
					if(NewTariff != &quot;1305&quot; &amp;&amp; NewTariff != &quot;1306&quot; &amp;&amp; NewTariff != &quot;1307&quot; &amp;&amp; NewTariff != &quot;1318&quot;)
					{
						var AddTariff = GetTariffName(NewTariff);
						Msg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_122&quot;,AddTariff);
					}
				}
				else
				{
					if(NewTariff == &quot;1305&quot; || NewTariff == &quot;1306&quot; || NewTariff == &quot;1307&quot; || NewTariff == &quot;1318&quot;)
						Msg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_123&quot;);
				}
			}
		}
		Outputs.SetProperty(&quot;Result&quot;,Msg);
	}
	finally
	{
		OrderLineItems	= null;
		AstBC			= null;
		OrderEntryBO	= null;
	}
}"
			   SEQUENCE="52"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/13/2012 18:55:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LimitControl"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LimitControl(Inputs, Outputs)
{
	try
	{
		var boOrder          : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem           : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var psChekList       : PropertySet = TheApplication().NewPropertySet();
		var psControlList    : PropertySet = TheApplication().NewPropertySet();
		var psControl        : PropertySet = null;
		var psFunctionIn     : PropertySet = TheApplication().NewPropertySet();
		var psFunctionOut    : PropertySet = TheApplication().NewPropertySet();
		var psFailedControls : PropertySet = TheApplication().NewPropertySet();

		var sOrderId           = Inputs.GetProperty(&quot;OrderId&quot;);
		var sOrderType         = Inputs.GetProperty(&quot;OrderType&quot;);
		var sOrderSubType      = Inputs.GetProperty(&quot;OrderSubType&quot;);
		var sShopCode          = &quot;&quot;; //DEF-10097
		var sDonorOperator     = Inputs.GetProperty(&quot;DonorOperator&quot;);
		var sCustomerClass     = Inputs.GetProperty(&quot;VF Customer Class&quot;);
		var sCustomerSubClass  = Inputs.GetProperty(&quot;VF Customer Sub Class&quot;);
		var sLoginName         = TheApplication().LoginName();
		var sSearchExpr        = &quot;&quot;;
		var bCheckItem         = false;
		var sItemId            = &quot;&quot;;
		var sRootItemId        = &quot;&quot;;
		var sProdGroup         = &quot;&quot;;
		var sProdType          = &quot;&quot;;
		var sProdSubType       = &quot;&quot;;
		var sProdPartNum       = &quot;&quot;;
		var sCustomerId        = &quot;&quot;;
		var sCustomerType      = &quot;&quot;;
		var sAssetActDate      = &quot;&quot;;
		var sActionReasonLIC   = &quot;&quot;;
		var bSkipCheck         = false;
		var iControlCount      = 0;
		var iControl           = 0;
		var sControlObject     = &quot;&quot;;
		var sControlErrorMsg   = &quot;&quot;;
		var sControlBypass     = &quot;&quot;;
		var sControlType       = &quot;&quot;;
		var sControlNum        = &quot;&quot;;
		var sControlDetailId   = &quot;&quot;;
		var sControlTotalCount = &quot;&quot;;
		var sControlMaxLimit   = &quot;&quot;;
		var iControlDifference = 0;
		var sCanSkipControl    = &quot;N&quot;;
		var sPropertyName      = &quot;&quot;;
		var sPropertyValue     = &quot;&quot;;
		var PatternX           = /(X)/g;
		var PatternY           = /(Y)/g;

		var sActionNew            = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sProdGroupCAMPPROMO   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;);
		var sProdTypeHANDSETPROMO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var sRuleTranslated       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_RULE&quot;,&quot;Rule&quot;);
		var sFailTranslated       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FAIL&quot;,&quot;Failed&quot;);

		Outputs.SetProperty(&quot;Result&quot;,    &quot;&quot;);
		Outputs.SetProperty(&quot;ErrorMsg&quot;,  &quot;&quot;);
		Outputs.SetProperty(&quot;LoginName&quot;, sLoginName);
		psFailedControls.SetType(&quot;FailedControls&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionNew +
					  &quot;&apos; AND (([VF Product Group]=&apos;&quot; + sProdGroupCAMPPROMO + &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
					  &quot;&apos;) OR (([VF Root Part Number]=&apos;1000&apos; OR [VF Root Part Number]=&apos;70000&apos;)&quot; +
					  &quot; AND ([VF Product Group] IS NOT NULL OR [VF Product Type] IS NOT NULL OR [VF Product Sub Type] IS NOT NULL)))&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Root Order Item Id&quot;);
		bcItem.ActivateField(&quot;VF Product Group&quot;);
		bcItem.ActivateField(&quot;VF Product Type&quot;);
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ActivateField(&quot;Part Number&quot;);
		bcItem.ActivateField(&quot;Account Id&quot;);
		bcItem.ActivateField(&quot;X Customer Segment&quot;);
		bcItem.ActivateField(&quot;VF Asset Activation Date&quot;);
		bcItem.ActivateField(&quot;TELCO Root Item Action Reason LIC&quot;);
		bcItem.ActivateField(&quot;Customer Code&quot;);
		bcItem.ActivateField(&quot;VF Shop Code&quot;);//DEF-10097
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		bCheckItem = bcItem.FirstRecord();

		while(bCheckItem)
		{
			psControlList.Reset();

			sItemId          = bcItem.GetFieldValue(&quot;Id&quot;);
			sRootItemId      = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);
			sProdGroup       = bcItem.GetFieldValue(&quot;VF Product Group&quot;);
			sProdType        = bcItem.GetFieldValue(&quot;VF Product Type&quot;);
			sProdSubType     = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sProdPartNum     = bcItem.GetFieldValue(&quot;Part Number&quot;);
			sCustomerId      = bcItem.GetFieldValue(&quot;Account Id&quot;);
			sCustomerType    = bcItem.GetFieldValue(&quot;X Customer Segment&quot;);
			sAssetActDate    = bcItem.GetFieldValue(&quot;VF Asset Activation Date&quot;);
			sActionReasonLIC = bcItem.GetFieldValue(&quot;TELCO Root Item Action Reason LIC&quot;);
			CustomerCode     = bcItem.GetFieldValue(&quot;Customer Code&quot;);
			sShopCode	   	= bcItem.GetFieldValue(&quot;VF Shop Code&quot;);//DEF-10097

			bSkipCheck = psChekList.PropertyExists(sProdPartNum);
			
			
			//BEGIN - Vodafone Code Review - SIEBELCodeReviewIssues - JFONSECA
			/*if (!bSkipCheck)
			{
				psChekList.SetProperty(sProdPartNum, sItemId);

				bSkipCheck = (sActionReasonLIC == &quot;1121&quot;);
			}

			if (!bSkipCheck)
			{
				CheckTableCtrl(sRootItemId, sProdGroup, sProdType, sProdSubType, sProdPartNum, sShopCode, sCustomerId,
							   psControlList, sCustomerType, sOrderType, sAssetActDate, sOrderSubType, sDonorOperator,
							   sCustomerClass);
			}*/
			
			if (!bSkipCheck)
			{
				psChekList.SetProperty(sProdPartNum, sItemId);

                if (sActionReasonLIC != &quot;1121&quot;)
                {
					CheckTableCtrl(sRootItemId, sProdGroup, sProdType, sProdSubType, sProdPartNum, sShopCode, sCustomerId,
								   psControlList, sCustomerType, sOrderType, sAssetActDate, sOrderSubType, sDonorOperator,
								   sCustomerClass);
				} 
			}

			//END - Vodafone Code Review - SIEBELCodeReviewIssues - JFONSECA
			
			
			iControlCount = psControlList.GetChildCount();

			for (iControl=0; iControlCount != null &amp;&amp; iControlCount != &quot;&quot; &amp;&amp; iControl&lt;iControlCount; iControl++)
			{
				psControl = psControlList.GetChild(0);

				if (psControl.GetProperty(&quot;Result&quot;) == &quot;KO&quot;)
				{
					sControlObject     = psControl.GetProperty(&quot;Object&quot;);
					sControlErrorMsg   = psControl.GetProperty(&quot;ErrorMsg&quot;);
					sControlBypass     = psControl.GetProperty(&quot;ByPassFlg&quot;)
					sControlType       = psControl.GetProperty(&quot;ControlType&quot;);
					sControlNum        = psControl.GetProperty(&quot;ControlNum&quot;);
					sControlDetailId   = psControl.GetProperty(&quot;ControlDetailId&quot;);
					sControlTotalCount = psControl.GetProperty(&quot;TotalCount&quot;);
					sControlMaxLimit   = psControl.GetProperty(&quot;MaxLimit&quot;);
					iControlDifference = sControlTotalCount - sControlMaxLimit;

					if (sControlBypass == &quot;N&quot;)
					{
						sControlErrorMsg = sControlErrorMsg.replace(PatternX, sControlMaxLimit);
						sControlErrorMsg = sControlErrorMsg.replace(PatternY, sControlObject);
						Outputs.SetProperty(&quot;ErrorMsg&quot;, sControlErrorMsg);
						return;
					}
					
					if (sControlBypass == &quot;Y&quot;)
					{
						//-- WA#39 06.08.2014
						psFunctionIn.Reset();
						psFunctionOut.Reset();
						psFunctionIn.SetProperty(&quot;ControlNum&quot;,            sControlDetailId);
						psFunctionIn.SetProperty(&quot;ControlType&quot;,           sControlType);
						psFunctionIn.SetProperty(&quot;VF Customer Sub Class&quot;, sCustomerSubClass);
						ControlSkipPosition(psFunctionIn, psFunctionOut);
						sCanSkipControl = psFunctionOut.GetProperty(&quot;Result&quot;);
						//-- WA#39 06.08.2014

						if (sCanSkipControl != &quot;OK&quot;)
						{
							sControlErrorMsg = sControlErrorMsg.replace(PatternX, sControlMaxLimit);
							sControlErrorMsg = sControlErrorMsg.replace(PatternY, sControlObject);
							Outputs.SetProperty(&quot;ErrorMsg&quot;, sControlErrorMsg);
							return;
						}
						else // User is enabled to skip failed controls
						{
							if (sControlNum != &quot;120&quot;)
							{
								sPropertyName  = &quot;FailedControl&quot; + sControlNum;
								sPropertyValue = sItemId + &quot;_&quot; + iControlDifference + &quot;_&quot; + sControlObject +
												 &quot;&lt;&lt;&quot; + sRuleTranslated + &quot; &quot; + sControlNum + &quot;&gt;&gt;: &quot; + sFailTranslated;

								psFailedControls.SetProperty(sPropertyName, sPropertyValue);
								Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
							}				
						}								
					} //ELSE BYPASS
				} //ELSE RESULT = KO

				psControlList.RemoveChild(0);
			} // END FOR

			bCheckItem = bcItem.NextRecord();
		} //END WHILE
				

		psFailedControls.SetType(&quot;FailedControls&quot;);
		Outputs.AddChild(psFailedControls);
	}
	finally
	{	
		psFailedControls = null;
		psFunctionOut    = null;
		psFunctionIn     = null;
		psControl        = null;
		psControlList    = null;
		psChekList       = null;
		bcItem           = null;
		boOrder          = null;
	}
}"
			   SEQUENCE="53"
			   UPDATED="08/03/2016 00:39:17"
			   UPDATED_BY="SADMIN"
			   CREATED="05/11/2011 16:59:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LogInsert"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LogInsert(sFieldInfo, sFieldValue)
{
	try
	{
		var boLog : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcLog : BusComp   = boLog.GetBusComp(&quot;VF LOG EVENTS&quot;);

		var sViewName  = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);
		var sLoginName = TheApplication().LoginName();
		var sProcess   = &quot;VF Control&quot;;

		bcLog.NewRecord(NewAfter);  
		bcLog.SetFieldValue(&quot;Field Info&quot;,   sFieldInfo);
		bcLog.SetFieldValue(&quot;Process Info&quot;, sProcess);
		bcLog.SetFieldValue(&quot;User Name&quot;,    sLoginName);
		bcLog.SetFieldValue(&quot;View&quot;,         sViewName);
		bcLog.SetFieldValue(&quot;Field Value&quot;,  sFieldValue);
		bcLog.WriteRecord();
	}
	finally
	{
		bcLog = null;
		boLog = null;
	}
}"
			   SEQUENCE="54"
			   UPDATED="10/05/2016 23:50:17"
			   UPDATED_BY="SADMIN"
			   CREATED="10/05/2016 23:50:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupName(SubTypeLOV,OrderSubTypeVal)
{
	try
	{
		var name = &quot;&quot;;
		var ActiveFlag = &quot;Y&quot;;
		var strParameterSrcExpr = &quot;[Type] = &apos;&quot;+SubTypeLOV+&quot;&apos; AND [Value] = &apos;&quot;+OrderSubTypeVal+&quot;&apos; AND [Active] = &apos;&quot;+ ActiveFlag + &quot;&apos;&quot;;
		var boHPOrderEntry : BusObject = TheApplication().GetBusObject (&quot;HP Order Entry&quot;);
		var bcLOV : BusComp = boHPOrderEntry.GetBusComp (&quot;List Of Values&quot;);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;SubTypeLOV&quot;,SubTypeLOV);
		inProp.SetProperty(&quot;OrderSubTypeVal&quot;,OrderSubTypeVal);	
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		with(bcLOV)
		{
			SetViewMode(AllView);	
			ActivateField (&quot;Name&quot;);
			ActivateField (&quot;Language&quot;);
			ClearToQuery();
			SetSearchExpr (strParameterSrcExpr);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord ())
			{
				name = GetFieldValue (&quot;Name&quot;);
			}
		}
		return(name);
	}
	finally
	{
		bcLOV = null;
		boHPOrderEntry = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="55"
			   UPDATED="10/05/2016 23:50:17"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="MernisControl"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function MernisControl (Inputs, Outputs)
{
	try
	{
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var PrimaryContact = &quot;&quot;;
		var BillToContact = &quot;&quot;;
		var OrderCheckMernis = &quot;&quot;;
		var BillingAccount = &quot;&quot;;
		var ControlNum = &quot;116&quot;;
		var InPos : PropertySet = TheApplication().NewPropertySet();
		var OutPos : PropertySet = TheApplication().NewPropertySet();	
		var Skip = &quot;&quot;;
		var Result = &quot;&quot;;
		
		var TurkCit = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_CITIZENSHIP&quot;,&quot;Turkish&quot;);
		var actAdd				= TheApplication().InvokeMethod(&quot;LookUpValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var Citizenship = &quot;&quot;;
		var MernisStatus = &quot;&quot;;
		var MernisError = &quot;&quot;;
		var MernisVerified = &quot;Y&quot;;
		
		var ContactBO : BusObject = TheApplication().GetBusObject(&quot;Contact&quot;);
		var ContactBC : BusComp = ContactBO.GetBusComp(&quot;Contact HP&quot;);
		var OrderEntryBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderEntryBO2 : BusObject = TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var bcOrderEntryLI : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var OrderEntry : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var BillingAccountBC : BusComp = OrderEntryBO2.GetBusComp(&quot;HP Submit - Billing Account&quot;);
		 
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		/*** End ***/ 
		 
		OrderEntry.SetViewMode(AllView);
		OrderEntry.ClearToQuery();
		OrderEntry.ActivateField(&quot;VF Product Check Type&quot;);
		OrderEntry.ActivateField(&quot;Bill To Contact Id&quot;);
		OrderEntry.ActivateField(&quot;X_Primary_contact&quot;);
		OrderEntry.SetSearchExpr(&quot;[Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
		
		bcOrderEntryLI.SetViewMode(AllView);
		bcOrderEntryLI.ClearToQuery();
		bcOrderEntryLI.ActivateField(&quot;Order Header Id&quot;);
		bcOrderEntryLI.SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Line Number] = &apos;1&apos;&quot;);
			
		OrderEntry.ExecuteQuery(ForwardOnly);
		var iNextRecord = OrderEntry.FirstRecord();
		
		if(iNextRecord != &quot;&quot;)
		{
			OrderCheckMernis = OrderEntry.GetFieldValue(&quot;VF Product Check Type&quot;);
			
			BillToContact = OrderEntry.GetFieldValue(&quot;Bill To Contact Id&quot;);
			PrimaryContact = OrderEntry.GetFieldValue(&quot;X_Primary_contact&quot;);
			var iNextRecord = bcOrderEntryLI.FirstRecord();
			
			if(iNextRecord)
			{
				BillingAccount = bcOrderEntryLI.GetFieldValue(&quot;Billing Account Id&quot;);
				
				if(OrderCheckMernis != &quot;BGC&quot; &amp;&amp; OrderCheckMernis != &quot;&quot;)
				{
					BillingAccountBC.SetViewMode(AllView);
					BillingAccountBC.ClearToQuery();
					BillingAccountBC.SetSearchExpr(&quot;[Id] = &apos;&quot;+BillingAccount+&quot;&apos;&quot;);
					BillingAccountBC.ExecuteQuery(ForwardOnly);
					var BA = BillingAccountBC.FirstRecord();
					if(BA)
					{
						BillToContact = BillingAccountBC.GetFieldValue(&quot;Bill To Contact Id&quot;);
					}
					
					ContactBC.SetViewMode(AllView);
					ContactBC.ClearToQuery();
					ContactBC.SetSearchExpr(&quot;[Id] = &apos;&quot;+PrimaryContact+&quot;&apos; OR [Id] = &apos;&quot;+BillToContact+&quot;&apos;&quot;);
					ContactBC.ExecuteQuery(ForwardOnly);
					var Contacts = ContactBC.FirstRecord();
					while(Contacts &amp;&amp; MernisVerified == &quot;Y&quot;) 
					{
						Citizenship = ContactBC.GetFieldValue(&quot;Citizenship&quot;);
						if(TurkCit == Citizenship)
						{
							MernisStatus = ContactBC.GetFieldValue(&quot;VF Mernis Status&quot;);
							if(MernisStatus == &quot;N&quot;)
							{
								MernisError = ContactBC.GetFieldValue(&quot;VF Mernis Error Code&quot;);
								if(MernisError != &quot;VFTK-Mernis-0000&quot; &amp;&amp; MernisError != &quot;VFTK-Tibco-0001&quot; &amp;&amp; MernisError != &quot;VFTK-Tibco-0008&quot;)
								{
									MernisVerified = &quot;N&quot;;
								}
							}
						}
						Contacts = ContactBC.NextRecord();
					}
					if(MernisVerified == &quot;N&quot;)
					{
						InPos.SetProperty(&quot;ControlNum&quot;,ControlNum);
						InPos.SetProperty(&quot;ControlType&quot;,&quot;Mernis&quot;);
						ControlSkipPosition(InPos,OutPos);
						if (OutPos.GetProperty(&quot;Result&quot;) == &quot;KO&quot;)
						{
							Result = OutPos.GetProperty(&quot;ErrorMsg&quot;);
						}
						else
						{
							Skip = &quot;Y&quot;;
							Result = OutPos.GetProperty(&quot;ErrorMsg&quot;);
						}
						
						var LoginName = TheApplication().LoginName();
						Outputs.SetProperty(&quot;Result&quot;,Result);
						Outputs.SetProperty(&quot;Skip&quot;,Skip);
						Outputs.SetProperty(&quot;Login&quot;,LoginName);
					}
				}
			}			
		}		
	}
	finally
	{
		bcOrderEntryLI 		= null;
		OrderEntry 			= null;
		BillingAccountBC 	= null;
		ContactBC 			= null;
		ContactBO 			= null;
		OrderEntryBO 		= null;
		OrderEntryBO2 		= null;
		InPos 				= null;
		OutPos 				= null;	
		inProp 				= null;
		outProp 			= null;
		BS  				= null;
	}
}"
			   SEQUENCE="56"
			   UPDATED="10/05/2016 23:50:17"
			   UPDATED_BY="SADMIN"
			   CREATED="11/28/2011 12:44:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RefNumTariffCheck"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RefNumTariffCheck(OrderId, Identifier)
{	//Created this function for CR389
	try
	{
		Identifier = &quot;N&quot;;
		var OrderEntryBO 	: BusObject;
		var OrderLineItems 	: BusComp;
		var XABC 			: BusComp;
		var boParam : BusObject;
		var bcParam : BusComp;
		var App = TheApplication();
		OrderEntryBO 	= App.GetBusObject(&quot;X Order Entry&quot;);
		OrderLineItems 	= OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		XABC 			= OrderEntryBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var Tariff 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var Delete		= App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var Add			= App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strActive	= App.InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var InstallDt 	= &quot;&quot;;
		var val			= &quot;&quot;;
		var ProdGroup	= &quot;&quot;;
		var ActCode		= &quot;&quot;;
		var CurTariff	= &quot;&quot;;
		var NewTariff	= &quot;&quot;;
		var Msg			= &quot;&quot;;
		var Satisfied	= &quot;&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with (OrderLineItems)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Asset Integration Id&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;Action Code&quot;);
			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + OrderId + &quot;&apos; AND (([VF Product Group]=&apos;&quot;+Tariff+&quot;&apos; AND ([Action Code] = &apos;&quot; + Delete + &quot;&apos; OR [Action Code]=&apos;&quot;+Add+&quot;&apos;) OR [Part Number] = &apos;26002&apos; OR [Part Number] = &apos;1000&apos;))&quot;);
			ExecuteQuery(ForwardOnly);
			var RecCount = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
			if(RecCount &gt; 2)
			{
				var AccntId = GetFieldValue(&quot;Account Id&quot;);
				var Rec = FirstRecord();
				while(Rec)
				{
					var PartNum = GetFieldValue(&quot;Part Number&quot;);
					ProdGroup	= GetFieldValue(&quot;VF Product Group&quot;);
					ActCode 	= GetFieldValue(&quot;Action Code&quot;);
					if(ProdGroup == Tariff &amp;&amp; ActCode == Delete)
						CurTariff = GetFieldValue(&quot;Part Number&quot;);
					else if(ProdGroup == Tariff &amp;&amp; ActCode == Add)
						NewTariff = GetFieldValue(&quot;Part Number&quot;);
					if(PartNum == &quot;1000&quot;)
						var IntId = GetFieldValue(&quot;Asset Integration Id&quot;);
					else if(PartNum == &quot;26002&quot;)
						Identifier = &quot;Y&quot;;
					Rec = NextRecord();
				}
				if(CurTariff==&quot;1300&quot;)
				{
					boParam = App.GetBusObject (&quot;ACS NI Parameter&quot;);
					bcParam = boParam.GetBusComp (&quot;ACS NI Parameter&quot;);
					var ParamExpr = &quot;[Function] = &apos;Tariff&apos; AND [Name] = &apos;&quot;+CurTariff+&quot;&apos; AND [Value] = &apos;&quot;+NewTariff+&quot;&apos;&quot;;
					with(bcParam)
					{	
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchExpr(ParamExpr);
						ExecuteQuery(ForwardOnly);
						if (FirstRecord())
							return(Msg);
						else if(Identifier == &quot;Y&quot;)
						{
							Msg = App.LookupMessage(&quot;VF Message Category&quot;, &quot;R21_170&quot;);
							return(Msg);
						}
					}
				}
				Satisfied = true;
			}
		}
		if(Satisfied)
		{
			with (OrderLineItems)
			{	
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Part Number] = &apos;26002&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				var isRec = FirstRecord();
				while(isRec)
				{
					var LineItemId = GetFieldValue(&quot;Id&quot;);
					SetFieldValue(&quot;Action Code&quot;,Delete);
					WriteRecord();
	
					with(XABC)
					{
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(&quot;[Object Id] = &apos;&quot;+LineItemId+&quot;&apos;&quot;);
						ExecuteQuery(ForwardOnly);
						var isAttr = FirstRecord();//Scripting 31: Child query cannot be removed since there is no link in BO
						while(isAttr)
						{
							SetFieldValue(&quot;Action Code&quot;,Delete);
							WriteRecord();
							isAttr = NextRecord();
						}
					}
					isRec = NextRecord();
				}
			}
		}
		return(Msg);
	}
	finally
	{
		OrderLineItems 	= null;
		XABC 			= null;
		bcParam 		= null;
		OrderEntryBO 	= null;
		boParam 		= null;
		inProp 	 		= null;
		outProp			= null;
		BS			 	= null;
		App 			= null;
	}
}"
			   SEQUENCE="57"
			   UPDATED="10/05/2016 23:50:17"
			   UPDATED_BY="SADMIN"
			   CREATED="03/09/2012 17:09:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RemoveCampaign"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RemoveCampaign(Inputs, Outputs)
{
	try
	{
   	    var boMLItem      : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcMLItem      : BusComp     = boMLItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
   	    var boBPItem      : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcBPItem      : BusComp     = boBPItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
   	    var boOrder       : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem        : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA      : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var psFunctionIn  : PropertySet = TheApplication().NewPropertySet();
		var psFunctionOut : PropertySet = TheApplication().NewPropertySet();
		var boHCItem      : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcHCItem      : BusComp     = boHCItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boParameter   : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter   : BusComp     = boParameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);

		var sOrderId 	           = Inputs.GetProperty(&quot;OrderId&quot;);
		var sActionType            = Inputs.GetProperty(&quot;OrderSubTypeVal&quot;);
		var sActionReason          = Inputs.GetProperty(&quot;OrderReason&quot;);
	    var sActionTypeLIC         = &quot;&quot;;
	    var sActionReasonLIC       = &quot;&quot;;
	    var sMLItemSearchExpr      = &quot;&quot;;
	    var bHasMLItem             = false;
	    var sMLItemId              = &quot;&quot;;
		var sProdPromoInstId       = &quot;&quot;;
		var sBPItemSearchExpr      = &quot;&quot;;
	    var bHasBPItem             = false;
	    var sBPItemId              = &quot;&quot;;
	    var sBPItemChildSearchExpr = &quot;&quot;;
	    var sItemSearchExpr        = &quot;&quot;;
	    var bHasItem               = false;
		var sItemId                = &quot;&quot;;
		var sItemProdSubType       = &quot;&quot;;
		var sItemAccountId         = &quot;&quot;;
		var bHandsetDeleted        = false;
		var sRefNumber1            = &quot;&quot;;
		var sRefNumber2            = &quot;&quot;;
		var bHasAttrib             = false;
		var sAttribName            = &quot;&quot;;
		var sAttribValue           = &quot;&quot;;
		var sHCItemSearchExpr      = &quot;&quot;;
		var bHasHCItem             = false;
		var sProdPromoPartNum      = &quot;&quot;;
		var bHasAddOn              = false;
		var sAddOnPartNum          = &quot;&quot;;
		var sCustomerType          = Inputs.GetProperty(&quot;CustomerType&quot;); //VFTRCBU-34119 - HRODRIGUES

		var sProdGroupCAMP            = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP&quot;);
	    var sProdTypeHANDSET          = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var sProdTypeDISCOUNT         = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;DISCOUNT&quot;);
		var sProdTypeHANDSETPROMO     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var sProdTypeHANDSETCONTAINER = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET CONTAINER&quot;);
		var sProdTypeDISCLINE         = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;DISCLINE&quot;);
		var sProdSubTypeVFNET_ADSL    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;VFNET_ADSL&quot;);
		var sProdSubTypeVFNET_PSTN    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;VFNET_PSTN&quot;);
		var sActionDeleted            = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var sCustomerEBU              = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;101&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

	    if (sActionType !=null &amp;&amp; sActionType != &quot;&quot;)
	    {
			sActionTypeLIC = LookupName(&quot;ORDER_SUB_TYPE&quot;, sActionType);	//TLG-345

			if (sActionTypeLIC == &quot;&quot;) //TLGA-1920
			{
	         	sActionTypeLIC = sActionType;
	         }
	    }

	    if (sActionReason != null &amp;&amp; sActionReason != &quot;&quot;)
	    {
			sActionReasonLIC = LookupName(&quot;ACS_ORDER_REASON&quot;, sActionReason);
		}

	    if ((sActionTypeLIC == &quot;115&quot; &amp;&amp; sActionReasonLIC == &quot;270&quot;)  || // Cancelled - Fraud
	    	(sActionTypeLIC == &quot;116&quot; &amp;&amp; sActionReasonLIC == &quot;210&quot;)  || // Frozen-Voluntary
	    	(sActionTypeLIC == &quot;116&quot; &amp;&amp; sActionReasonLIC == &quot;212&quot;)  || // Cancelled - Customer Req
	    	(sActionTypeLIC == &quot;133&quot; &amp;&amp; sActionReasonLIC == &quot;2003&quot;) || // Frozen - Missing Documents
	    	(sActionTypeLIC == &quot;133&quot; &amp;&amp; sActionReasonLIC == &quot;220&quot;)  || // Cancelled - Missing Document
	    	(sActionTypeLIC == &quot;133&quot; &amp;&amp; sActionReasonLIC == &quot;2005&quot;) || // Cancelled - Missing Documents
			(sActionTypeLIC == &quot;129&quot; &amp;&amp; sActionReasonLIC == &quot;209&quot;)  || // Frozen-Dunning
			(sActionTypeLIC == &quot;129&quot; &amp;&amp; sActionReasonLIC == &quot;211&quot;)  || // Cancelled - Dunning
			(sActionTypeLIC == &quot;129&quot; &amp;&amp; sActionReasonLIC == &quot;222&quot;))    // Frozen-Credit due to BrokenPTP
		{
			sMLItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
								&quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;)&quot; +
								&quot; AND [Prod Prom Instance Id] IS NOT NULL&quot; +
								&quot; AND ([VF BP VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO + &quot;&apos; OR [VF BP VF Product Type]=&apos;&quot; + sProdTypeDISCOUNT + &quot;&apos;)&quot;;
		}
		else
		{
			return;
		}

		bcMLItem.SetViewMode(AllView);
		bcMLItem.ClearToQuery();
		bcMLItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcMLItem.ActivateField(&quot;Prod Prom Id&quot;);
		bcMLItem.ActivateField(&quot;X Customer Segment&quot;);
		bcMLItem.SetSearchExpr(sMLItemSearchExpr);
		bcMLItem.ExecuteQuery(ForwardOnly);
	
		bHasMLItem = bcMLItem.FirstRecord();

		while (bHasMLItem)
		{
			sMLItemId         = bcMLItem.GetFieldValue(&quot;Id&quot;);
			sProdPromoInstId  = bcMLItem.GetFieldValue(&quot;Prod Prom Instance Id&quot;);
			sCustomerType     = bcMLItem.GetFieldValue(&quot;X Customer Segment&quot;);

			bcMLItem.SetFieldValue(&quot;Prod Prom Instance Id&quot;, &quot;&quot;);
			bcMLItem.SetFieldValue(&quot;Prod Prom Id&quot;,          &quot;&quot;);
			bcMLItem.WriteRecord(); 

			sBPItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Id]=[Root Order Item Id] AND &quot; +
							    &quot;[Id]&lt;&gt;&apos;&quot; + sMLItemId + &quot;&apos; AND ([Prod Prom Instance Id]=&apos;&quot; + sProdPromoInstId +
							    &quot;&apos; OR [Asset Integration Id]=&apos;&quot; + sProdPromoInstId + &quot;&apos;)&quot;; 

			bcBPItem.SetViewMode(AllView);
			bcBPItem.ClearToQuery();
			bcBPItem.SetSearchExpr(sBPItemSearchExpr);
			bcBPItem.ExecuteQuery(ForwardOnly);

			bHasBPItem = bcBPItem.FirstRecord();
			
			while (bHasBPItem)
			{
				sBPItemId = bcBPItem.GetFieldValue(&quot;Id&quot;);

				if (sBPItemChildSearchExpr == null || sBPItemChildSearchExpr == &quot;&quot;)
					sBPItemChildSearchExpr = &quot;[Root Order Item Id]=&apos;&quot; + sBPItemId + &quot;&apos;&quot;;
				else
					sBPItemChildSearchExpr = sBPItemChildSearchExpr + &quot; OR [Root Order Item Id]=&apos;&quot; + sBPItemId + &quot;&apos;&quot;; 

				bHasBPItem = bcBPItem.NextRecord();
			}

			bHasMLItem = bcMLItem.NextRecord();
		}

	    if ((sActionTypeLIC == &quot;115&quot; &amp;&amp; sActionReasonLIC == &quot;270&quot;)  || // Cancelled - Fraud
	    	(sActionTypeLIC == &quot;116&quot; &amp;&amp; sActionReasonLIC == &quot;210&quot;)  || // Frozen-Voluntary
			(sActionTypeLIC == &quot;116&quot; &amp;&amp; sActionReasonLIC == &quot;212&quot;)  || // Cancelled - Customer Req
			(sActionTypeLIC == &quot;133&quot; &amp;&amp; sActionReasonLIC == &quot;2003&quot;) || // Frozen - Missing Documents
			(sActionTypeLIC == &quot;133&quot; &amp;&amp; sActionReasonLIC == &quot;220&quot;)  || // Cancelled - Missing Document
			(sActionTypeLIC == &quot;133&quot; &amp;&amp; sActionReasonLIC == &quot;2005&quot;) || // Cancelled - Missing Documents
			(sActionTypeLIC == &quot;129&quot; &amp;&amp; sActionReasonLIC == &quot;209&quot;))    // Frozen-Dunning
	    {
			sItemSearchExpr = &quot;[VF Product Type]=&apos;&quot; + sProdTypeHANDSET + &quot;&apos; OR [Part Number]= &apos;16999&apos; OR &quot; +
							  &quot;([VF Product Type]=&apos;&quot; + sProdTypeDISCOUNT +
							  &quot;&apos; AND ([VF Product Sub Type]=&apos;&quot; + sProdSubTypeVFNET_ADSL +
							  &quot;&apos; OR [VF Product Sub Type]=&apos;&quot; + sProdTypeDISCLINE + &quot;&apos;)) OR &quot; +
							  &quot;[VF Product Sub Type]=&apos;&quot; + sProdSubTypeVFNET_PSTN + &quot;&apos;&quot;;
							  
			if (sCustomerType == sCustomerEBU)
			{
				sItemSearchExpr = sItemSearchExpr + &quot; OR [Service End Date] IS NOT NULL&quot;;
			}
		}

		if ((sActionTypeLIC == &quot;129&quot; &amp;&amp; sActionReasonLIC == &quot;211&quot;)  || // Cancelled - Dunning
			(sActionTypeLIC == &quot;129&quot; &amp;&amp; sActionReasonLIC == &quot;222&quot;))    // Frozen-Credit due to BrokenPTP
		{
			sItemSearchExpr = &quot;[VF Product Sub Type]=&apos;&quot; + sProdSubTypeVFNET_PSTN +
							  &quot;&apos; OR [VF Product Group]=&apos;&quot; + sProdGroupCAMP + &quot;&apos;&quot;;
		}

		if (sBPItemChildSearchExpr != null &amp;&amp; sBPItemChildSearchExpr != &quot;&quot;)
		{
			if (sItemSearchExpr == null || sItemSearchExpr == &quot;&quot;)
				sItemSearchExpr = sBPItemChildSearchExpr;
			else
				sItemSearchExpr = sItemSearchExpr + &quot; OR &quot; + sBPItemChildSearchExpr;
		}

		if (sItemSearchExpr == null || sItemSearchExpr == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot; + sActionDeleted +
						  &quot;&apos; AND (&quot; + sItemSearchExpr + &quot;)&quot;;
						  
		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Account Id&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		bHasItem = bcItem.FirstRecord();
		
		while (bHasItem)
		{
			sItemId          = bcItem.GetFieldValue(&quot;Id&quot;);
			sItemProdSubType = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sItemAccountId   = bcItem.GetFieldValue(&quot;Account Id&quot;);
			sRefNumber1      = &quot;&quot;;
			sRefNumber2      = &quot;&quot;;

			bcItem.SetFieldValue(&quot;Action Code&quot;, sActionDeleted);
			bcItem.WriteRecord();

			bcItemXA.SetViewMode(AllView);
			bcItemXA.ClearToQuery();
			bcItemXA.ActivateField(&quot;Name&quot;);
			bcItemXA.ActivateField(&quot;Numeric Value&quot;);
			bcItemXA.ActivateField(&quot;Action Code&quot;);
			bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId);
			bcItemXA.ExecuteQuery(ForwardOnly);

			bHasAttrib = bcItemXA.FirstRecord();

			while (bHasAttrib)
			{
				sAttribName  = bcItemXA.GetFieldValue(&quot;Name&quot;);
				sAttribValue = bcItemXA.GetFieldValue(&quot;Numeric Value&quot;);

				if (sItemProdSubType == &quot;AMALFI&quot;)
				{
					if (sAttribName == &quot;Reference Number 1&quot;)
						sRefNumber1 = sAttribValue;
					if (sAttribName == &quot;Reference Number 2&quot;)
						sRefNumber2 = sAttribValue;
				}

				bcItemXA.SetFieldValue(&quot;Action Code&quot;, sActionDeleted);
				bcItemXA.WriteRecord();

				bHasAttrib = bcItemXA.NextRecord();
			}

			if (sRefNumber1 != &quot;&quot; || sRefNumber2 != &quot;&quot;)
			{
				psFunctionIn.Reset();
				psFunctionOut.Reset();

				psFunctionIn.SetProperty(&quot;AccntId&quot;, sItemAccountId);
				psFunctionIn.SetProperty(&quot;RefNum1&quot;, sRefNumber1);
				psFunctionIn.SetProperty(&quot;RefNum2&quot;, sRefNumber2);

				Disconnect(psFunctionIn, psFunctionOut);
			}

			bHasItem = bcItem.NextRecord();
		}

		sHCItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Id]=[Root Order Item Id]&quot; +
							&quot; AND [Action Code]=&apos;&quot; + sActionDeleted + 
							&quot;&apos; AND [Prod Prom Instance Id] IS NOT NULL AND [VF BP Part #] IS NOT NULL&quot; +
							&quot; AND [VF BP VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO + &quot;&apos;&quot;;

		bcHCItem.SetViewMode(AllView);
		bcHCItem.ClearToQuery();
		bcHCItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcHCItem.ActivateField(&quot;VF BP Part #&quot;);
		bcHCItem.ActivateField(&quot;Prod Prom Id&quot;);
		bcHCItem.SetSearchExpr(sHCItemSearchExpr);
		bcHCItem.ExecuteQuery(ForwardOnly);
	
		bHasHCItem = bcHCItem.FirstRecord();

		while (bHasHCItem)
		{
			sProdPromoPartNum = bcHCItem.GetFieldValue(&quot;VF BP Part #&quot;);

			bcHCItem.SetFieldValue(&quot;Prod Prom Instance Id&quot;, &quot;&quot;);
			bcHCItem.SetFieldValue(&quot;Prod Prom Id&quot;,          &quot;&quot;);
			bcHCItem.WriteRecord(); 

			bcParameter.SetViewMode(AllView);
			bcParameter.ClearToQuery();
			bcParameter.ActivateField(&quot;Name&quot;);
			bcParameter.SetSearchSpec(&quot;Function&quot;, &quot;VF_IPHONE_CAMPAIGN_CHECK&quot;);
			bcParameter.SetSearchSpec(&quot;Value&quot;,    sProdPromoPartNum); 
			bcParameter.ExecuteQuery(ForwardOnly);

			bHasAddOn = bcParameter.FirstRecord();

			while (bHasAddOn)
			{
				sAddOnPartNum = bcParameter.GetFieldValue(&quot;Name&quot;);

				sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot; + sActionDeleted +
								  &quot;&apos; AND [Part Number]=&apos;&quot; + sAddOnPartNum + &quot;&apos;&quot;;

				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.ActivateField(&quot;Action Code&quot;);
				bcItem.SetSearchExpr(sItemSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);

				if (bcItem.FirstRecord())
				{
					sItemId = bcItem.GetFieldValue(&quot;Id&quot;);

					bcItem.SetFieldValue(&quot;Action Code&quot;, sActionDeleted);
					bcItem.WriteRecord();

					bcItemXA.SetViewMode(AllView);
					bcItemXA.ClearToQuery();
					bcItemXA.ActivateField(&quot;Action Code&quot;);
					bcItemXA.SetSearchExpr(&quot;[Object Id]=&apos;&quot; + sItemId + &quot;&apos;&quot;);
					bcItemXA.ExecuteQuery(ForwardOnly);

					bHasAttrib = bcItemXA.FirstRecord();

					while(bHasAttrib)
					{
						bcItemXA.SetFieldValue(&quot;Action Code&quot;, sActionDeleted);
						bcItemXA.WriteRecord();

						bHasAttrib = bcItemXA.NextRecord();
					}					
				}

				bHasAddOn = bcParameter.NextRecord();
			}

			bHasHCItem = bcHCItem.NextRecord();
		}
	}
	finally
	{
		bcParameter   = null;
		boParameter   = null;
		bcHCItem      = null;
		boHCItem      = null;
		psFunctionOut = null;
		psFunctionIn  = null;
		bcItemXA      = null;
		bcItem        = null;
   	    boOrder       = null;
		bcBPItem      = null;
   	    boBPItem      = null;
		bcMLItem      = null;
   	    boMLItem      = null;
	}
}"
			   SEQUENCE="58"
			   UPDATED="10/17/2016 23:48:23"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RemoveDual"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RemoveDual (Inputs, Outputs) 
{
	try
	{
		var App = TheApplication();
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;); //OrderID
		var DelActionCode = App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var ItemId = &quot;&quot;;
		var AttrExist = false;
		var OrderEntryBO : BusObject = App.GetBusObject(&quot;X Order Entry&quot;);
		var OrderLineItems : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var OrderItemXA : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with (OrderLineItems)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Part Number] = &apos;15040&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var ProdToRemove = FirstRecord();
			if(ProdToRemove)
			{
				ItemId = GetFieldValue(&quot;Id&quot;); //prendi il row id della order line items
				SetFieldValue(&quot;Action Code&quot;,DelActionCode); //
				WriteRecord();
				with(OrderItemXA)
				{
					SetViewMode(AllView);
					ActivateField(&quot;Action Code&quot;);
					ClearToQuery();
					SetSearchExpr(&quot;[Object Id] = &apos;&quot;+ItemId+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					AttrExist = FirstRecord();
					if(AttrExist)
					{
					SetFieldValue(&quot;Action Code&quot;,DelActionCode);
					WriteRecord(); //COMMIT
						//AttrExist = NextRecord();
					}					
				}
				ProdToRemove = NextRecord();
			}
		}	
	}
	finally
	{
		OrderLineItems 	= null;
		OrderItemXA	= null;
		OrderEntryBO 	= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
		App		= null;
	}
}"
			   SEQUENCE="59"
			   UPDATED="10/05/2016 23:50:17"
			   UPDATED_BY="SADMIN"
			   CREATED="02/21/2012 13:14:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ResumeSVB"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ResumeSVB(Inputs,Outputs)
{
	try
	{
		var BS		: Service	 = TheApplication().GetService(&quot;VF Manage Billing Account Status&quot;);
		BS.InvokeMethod(&quot;CheckSVBResume&quot;,Inputs, Outputs);
	}
	finally
	{
		BS		= null;
	}
}"
			   SEQUENCE="60"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="02/21/2013 21:16:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RetrieveDuration"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveDuration (Inputs, Outputs)
{
	try
	{
		var ItemId = Inputs.GetProperty(&quot;ItemId&quot;);
		var DurationMonth = &quot;&quot;;
		var HandLov = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var DelActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var OrderEntryBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemXA : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		
		with(OrderItemXA)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Action Code&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;ItemId&quot;,ItemId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(&quot;[Object Id] = &apos;&quot;+ItemId+&quot;&apos; AND [Name] = &apos;Duration&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				DurationMonth = GetFieldValue(&quot;Value&quot;);
			}					
		}
		Outputs.SetProperty(&quot;Duration&quot;,DurationMonth);
	}
	finally
	{
		OrderItemXA = null;
		OrderEntryBO = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="61"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 18:29:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SearchKillIt"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SearchKillIt(Inputs, Outputs)
{
	try
	{
		var boAsset : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;); 
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sAssetId    = Inputs.GetProperty(&quot;sAssetId&quot;);
		var sSearchExpr = &quot;&quot;;
		var strmessage  = &quot;&quot;;

		var sStatusInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Inactive&quot;);

		Outputs.SetProperty(&quot;strmessage&quot;, &quot;&quot;);

		if (sAssetId == null || sAssetId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Root Asset Id]=&apos;&quot; + sAssetId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusInactive +
					  &quot;&apos; AND ([Product Part Number]=&apos;25134&apos; OR [Product Part Number]=&apos;52183&apos; OR [Product Part Number]=&apos;52184&apos;)&quot;;

		bcAsset.ClearToQuery();
		bcAsset.SetViewMode(AllView);
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{    
			strmessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;X_KILLIT_ERROR_MESSAGE_TRS&quot;);
			Outputs.SetProperty(&quot;strmessage&quot;, strmessage);
		}
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="62"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="05/07/2015 23:46:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SearchOneNet"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SearchOneNet(Inputs, Outputs)
{
   try
   {
		var orderBO : BusObject = TheApplication().GetBusObject(&quot;Order Entry (No Link)&quot;);
		var orderBC : BusComp   = orderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);

		var strOrderId  = Inputs.GetProperty(&quot;strOrderId&quot;);
		var sOneNetProds = &quot;&quot;; //OneNet for SOHO
		var sPartNumber= &quot;&quot;; //OneNet for SOHO
		var existingOLI = false;

		if (strOrderId == null || strOrderId == &quot;&quot;)
		{
			return;
		}

		with(orderBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Part Number&quot;);
			SetSearchSpec(&quot;Order Header Id&quot;, strOrderId);
			ExecuteQuery(ForwardOnly);
			existingOLI = FirstRecord();

			
			while(existingOLI)
			{
				sPartNumber=GetFieldValue(&quot;Part Number&quot;); //OneNet for SOHO
           		sOneNetProds = LookupName(&quot;VF_ONENET_PRODUCTS&quot;, sPartNumber);//OneNet for SOHO
				/*if (GetFieldValue(&quot;Part Number&quot;) == &quot;25134&quot; ||
					GetFieldValue(&quot;Part Number&quot;) == &quot;52183&quot; ||
					GetFieldValue(&quot;Part Number&quot;) == &quot;52184&quot;) */
			if (sOneNetProds!=null &amp;&amp; sOneNetProds!= &quot;&quot; ) //OneNet for SOHO
				{
					Outputs.SetProperty(&quot;setOneNet&quot;, &quot;True&quot;);
					var strMsg      = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;X_KILLIT_ERROR_MESSAGE_SUSP&quot;);
					var strMsgtwo   = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;X_KILLIT_ERROR_MESSAGE_CANC&quot;);
					var strMsgthree = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;X_KILLIT_ERROR_MESSAGE_TRS&quot;);
					var strMsgfour  = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;X_KILLIT_ERROR_MESSAGE&quot;);
					var strMsgfive  = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;X_KILLIT_ERROR_MESSAGE_VPN&quot;);                    
					Outputs.SetProperty(&quot;prdOneNet&quot;,      strMsg);
					Outputs.SetProperty(&quot;prdOneNettwo&quot;,   strMsgtwo);
					Outputs.SetProperty(&quot;prdOneNetthree&quot;, strMsgthree);
					Outputs.SetProperty(&quot;prdOneNetfour&quot;,  strMsgfour);
					Outputs.SetProperty(&quot;prdOneNetfive&quot;,  strMsgfive);
				}

				existingOLI = NextRecord();
			}
		}		
	}
	finally
	{
		orderBC = null;
		orderBO = null;
	}
}"
			   SEQUENCE="63"
			   UPDATED="05/25/2017 23:15:47"
			   UPDATED_BY="SADMIN"
			   CREATED="05/07/2015 23:46:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SearchVPN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SearchVPN(Inputs, Outputs)
{
   try
   {
		var orderBO   : BusObject = TheApplication().GetBusObject(&quot;Order Entry (No Link)&quot;);
		var orderBC   : BusComp   = orderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var orderBOXA : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderXA : BusComp   = orderBOXA.GetBusComp(&quot;VF Order Item XA&quot;);

		var strOrderId  = Inputs.GetProperty(&quot;strOrderId&quot;);
		var existingOLI = false;
		var setVPNAttr  = false;
		var vpnId       = &quot;&quot;; 
		var strmodified = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);

		Outputs.SetProperty(&quot;VPN&quot;, &quot;&quot;);

		if (strOrderId == null || strOrderId == &quot;&quot;)
		{
			return;
		}

		with(orderBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Order Header Id&quot;, strOrderId);
			SetSearchSpec(&quot;Part Number&quot;,     &quot;3001&quot;);
			ExecuteQuery(ForwardOnly);

			existingOLI = FirstRecord();

			while (existingOLI)
			{
				setVPNAttr = true;
				Outputs.SetProperty(&quot;setVPNAttr&quot;, &quot;True&quot;);
				vpnId = GetFieldValue(&quot;Id&quot;);
				
				existingOLI = NextRecord();
			}
		}

		if (setVPNAttr)
		{
			with(bcOrderXA)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(&quot;Attr Name&quot;,   &quot;Short Number&quot;);
				SetSearchSpec(&quot;Object Id&quot;,   vpnId);
				SetSearchSpec(&quot;Action Code&quot;, strmodified);			
				ExecuteQuery(ForwardOnly);

				if (FirstRecord())
				{
					Outputs.SetProperty(&quot;VPN&quot;, &quot;True&quot;);
				}
				else
				{
					Outputs.SetProperty(&quot;VPN&quot;, &quot;&quot;);
				}	
			}
         }
	}	 
	finally
	{
		bcOrderXA = null;
		orderBOXA = null;
		orderBC   = null;
		orderBO   = null;
	}
}"
			   SEQUENCE="64"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="05/07/2015 23:46:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch(MethodName) 
	{
		case &quot;RemoveDual&quot;: 
			RemoveDual(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckMNPDate&quot;:
			CheckMNPDate(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckBAInOrder&quot;:
			CheckBAInOrder(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;SetSingleBA&quot;:
			SetSingleBA(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckBAStatus&quot;:
			CheckBAStatus(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;LimitControl&quot;:
			LimitControl(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CloneBA&quot;:
			CloneBA(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;SetLineItemBA&quot;:
			SetLineItemBA(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;SetMainLineItemBA&quot;:
			SetMainLineItemBA(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;MernisControl&quot;:
			MernisControl(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckSubsCamp&quot;:
			CheckSubsCamp(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;ControlSkipPosition&quot;:
			ControlSkipPosition(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;RemoveCampaign&quot;:
			RemoveCampaign(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;RetrieveDuration&quot;:
			RetrieveDuration(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;InsertSrvEndDt&quot;:
			InsertSrvEndDt(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckCampDeactivation&quot;:
			CheckCampDeactivation(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckUpgrdDowngrd&quot;:
			CheckUpgrdDowngrd(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;InactivateAsset&quot;:
			InactivateAsset(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckTariffPlanChange&quot;:
			CheckTariffPlanChange(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CompleteBA&quot;:
			CompleteBA(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;KafeinCampCheck&quot;:
			KafeinCampCheck(Inputs,Outputs);
			return(CancelOperation);
			break;
		case &quot;KafeinTarrifCheck&quot;:
			KafeinTarrifCheck(Inputs,Outputs);
			return(CancelOperation);
			break;
		case &quot;SearchKillIt&quot;:
			SearchKillIt(Inputs, Outputs)
			return(CancelOperation);
			break;
		case &quot;SearchVPN&quot;:
			SearchVPN(Inputs, Outputs)
			return(CancelOperation);
			break;
		case &quot;SearchOneNet&quot;:
			SearchOneNet(Inputs, Outputs)
			return(CancelOperation);
			break;
		case &quot;Disconnect&quot;:
			Disconnect(Inputs,Outputs);
			return(CancelOperation);
			break;			
		case &quot;CTCOptionCheck&quot;:
			CTCOptionCheck(Inputs,Outputs);
			return(CancelOperation);
			break;			
		case &quot;CheckSplitBill&quot;:
			CheckSplitBill(Inputs,Outputs);
			return(CancelOperation);
			break;			
		case &quot;ResumeSVB&quot;:
			ResumeSVB(Inputs,Outputs);
			return(CancelOperation);
			break;			
		case &quot;DeleteSVBChild&quot;:
			DeleteSVBChild(Inputs,Outputs);
			return(CancelOperation);
			break;			
		case &quot;CheckUpgrade&quot;://Amul - Added for C_MSP00000367
			CheckUpgrade(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckPTT&quot;: //CR644 -Push To Talk
			CheckPTT(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;GetPositionType&quot;:
			var PositionType = GetPositionType();
			Outputs.SetProperty(&quot;PositionType&quot;, PositionType);
			return(CancelOperation); 
			break;
		case &quot;CheckHandsetCampIntegrity&quot;:
			CheckHandsetCampIntegrity(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;GetBundlePromoInfoFromOrder&quot;:
			GetBundlePromoInfoFromOrder(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;SetVPNAttr&quot;:
			SetVPNAttr(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CalculateSrvEndDtCBU&quot;:
						CalculateSrvEndDtCBU(Inputs, Outputs);
			return(CancelOperation);
			break;

		default:
			return(ContinueOperation);
	}
}"
			   SEQUENCE="75"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="05/11/2011 16:59:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetBUOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetBUOrder(sOrderId, sBUId)
{
	try
	{
		var boOrder        : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var bcOrganization : BusComp   = boOrder.GetBusComp(&quot;Organization&quot;);
		var bcOrderBU      : BusComp   = boOrder.GetBusComp(&quot;Order Business Unit&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot; || sBUId == null || sBUId == &quot;&quot;)
		{
			return;
		}

		bcOrderBU.ClearToQuery();
		bcOrderBU.SetViewMode(AllView);
		bcOrderBU.ActivateField(&quot;Order Id&quot;);
		bcOrderBU.ActivateField(&quot;Organization Id&quot;);
		bcOrderBU.SetSearchSpec(&quot;Order Id&quot;,         sOrderId);
		bcOrderBU.SetSearchSpec(&quot;Business Unit Id&quot;, sBUId);
		bcOrderBU.ExecuteQuery(ForwardOnly);

		if (!bcOrderBU.FirstRecord())
		{
			bcOrderBU.NewRecord(NewAfter);
			bcOrderBU.SetFieldValue(&quot;Order Id&quot;,         sOrderId);
			bcOrderBU.SetFieldValue(&quot;Business Unit Id&quot;, sBUId);
			bcOrderBU.WriteRecord();
		}
	}
	finally
	{
		bcOrderBU      = null;
		bcOrganization = null;
		boOrder	       = null;
	}
}"
			   SEQUENCE="66"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="03/09/2012 17:09:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetLineItemBA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetLineItemBA (Inputs, Outputs)
{
	try
	{
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var OrderEntryBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcOrderEntryLI : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);	
		var strRootBAId = &quot;&quot;;
		var nextRecord = &quot;&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		bcOrderEntryLI.SetViewMode(AllView);
		bcOrderEntryLI.ClearToQuery();
		bcOrderEntryLI.ActivateField(&quot;VF Root Billing Account Id&quot;);
		bcOrderEntryLI.ActivateField(&quot;Billing Account Id&quot;);
		// Def-2981
		bcOrderEntryLI.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + OrderId + &quot;&apos; AND ([Billing Account Id]=&apos;&apos; OR [Billing Account Id] IS NULL)&quot;);
		bcOrderEntryLI.ExecuteQuery(ForwardOnly);
		nextRecord = bcOrderEntryLI.FirstRecord(); 
		while (nextRecord)
		{
			strRootBAId = bcOrderEntryLI.GetFieldValue(&quot;VF Root Billing Account Id&quot;);
			bcOrderEntryLI.SetFieldValue(&quot;Billing Account Id&quot;,strRootBAId);
			nextRecord = bcOrderEntryLI.NextRecord();
			// Def-2981
			bcOrderEntryLI.WriteRecord();
		}	
	}
	finally
	{
		bcOrderEntryLI	= null;
		OrderEntryBO	= null;
		inProp			= null;
		outProp			= null;
		BS				= null;
	}
}"
			   SEQUENCE="67"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="11/28/2011 12:44:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetMainLineItemBA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetMainLineItemBA (Inputs, Outputs)
{
	try
	{
		var OrderEntryBO	:BusObject;
		var bcOrder			:BusComp;
		var bcOrderEntryLI	:BusComp;	
		var App = TheApplication();	
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var BAId = Inputs.GetProperty(&quot;BAId&quot;);
		var CurrCode = Inputs.GetProperty(&quot;CurrCode&quot;);
		var BAType = Inputs.GetProperty(&quot;BA Type&quot;);
		App.SetProfileAttr(&quot;BA Type&quot;,BAType);
		OrderEntryBO = App.GetBusObject(&quot;Order Entry (Sales)&quot;);
		bcOrder = OrderEntryBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		bcOrderEntryLI = OrderEntryBO.GetBusComp(&quot;Order Entry - Line Items&quot;);	
		var strRootBAId = &quot;&quot;;
		var nextRecord = &quot;&quot;;
		
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();	
		bcOrder.ActivateField(&quot;Currency Code&quot;);	
		bcOrder.SetSearchExpr(&quot;[Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
		bcOrderEntryLI.SetViewMode(AllView);
		bcOrderEntryLI.ClearToQuery();
		bcOrderEntryLI.SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Parent Order Item Id] = &apos;&apos; AND [VF Check BA Type] = &apos;Y&apos;&quot;);
		bcOrder.ExecuteQuery(ForwardOnly);
		if(bcOrder.FirstRecord())
		{
			bcOrder.SetFieldValue(&quot;Billing Account Id&quot;,BAId);
			bcOrder.SetFieldValue(&quot;Currency Code&quot;, CurrCode);

			nextRecord = bcOrderEntryLI.FirstRecord(); 
			while (nextRecord)
			{
				bcOrderEntryLI.SetFieldValue(&quot;Billing Account Id&quot;,BAId);
				nextRecord = bcOrderEntryLI.NextRecord();
			}
		}
		bcOrder.WriteRecord();	
		
		var strProfAttr = App.GetProfileAttr(&quot;IsSVB&quot;);
		Outputs.SetProperty(&quot;IsSVB&quot;,strProfAttr);
		
		var bsRefresh : Service = App.GetService(&quot;SIS OM PMT Service&quot;);
		var InputsRefresh, OutputsRefresh : PropertySet;
		
		InputsRefresh  = App.NewPropertySet();
		OutputsRefresh = App.NewPropertySet();
		InputsRefresh.SetProperty(&quot;Business Component Name&quot;, &quot;Order Entry - Orders&quot;);
		InputsRefresh.SetProperty(&quot;Business Object Name&quot;, &quot;Order Entry (Sales)&quot;);
		
		bsRefresh.InvokeMethod(&quot;Refresh Business Component&quot;, InputsRefresh, OutputsRefresh);
		App.SetProfileAttr(&quot;BA Type&quot;,&quot;&quot;);			
	}
	finally
	{
		bcOrder 		= null;
		bcOrderEntryLI 	= null;
		OrderEntryBO 	= null;
		InputsRefresh  	= null;
		OutputsRefresh 	= null;
		bsRefresh = null;
	}
}"
			   SEQUENCE="68"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2011 19:29:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetPreventCancel"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetPreventCancel(ModifyOrderId,strDealerCode,strShopCode,VodaBuId)
{
	try
	{
		var OrderEntryBO	: BusObject;
		var OrderEntryBCHP 	: BusComp;
		var App = TheApplication();
		OrderEntryBO	= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		OrderEntryBCHP = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var SubPenStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submitted-Pending&quot;);		
		with (OrderEntryBCHP)
		{
			SetViewMode(AllView)
			ClearToQuery();
			ActivateField(&quot;VF Dealer Code&quot;);
			ActivateField(&quot;VF Shop Code&quot;);
			ActivateField(&quot;Primary Organization Id&quot;);						
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;ModifyOrderId&quot;,ModifyOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(&quot;[Id] = &apos;&quot;+ModifyOrderId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				if (strDealerCode !=&quot;&quot; &amp;&amp; strDealerCode != null)//Check for null value
					SetFieldValue(&quot;VF Dealer Code&quot;,strDealerCode);
				SetFieldValue(&quot;VF Shop Code&quot;,strShopCode);
				if (VodaBuId != &quot;&quot;)
				{
					SetFieldValue(&quot;Primary Organization Id&quot;,VodaBuId);
				}
				SetFieldValue(&quot;Status&quot;,SubPenStatus);
				WriteRecord();
			}		
		}
	}
	finally
	{
		OrderEntryBCHP  = null;
		OrderEntryBO	= null;
		App				= null;
		inProp			= null;
		outProp			= null;
		BS				= null;
	}
}"
			   SEQUENCE="69"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="03/09/2012 17:09:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetResultsetValue"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetResultsetValue(type, result, totalCount, maxLimit, controlNum, controlDetailId, byPassFlg, errorMsg, object, sControlType,ControlOutput )
{
	if ( type != &quot;&quot; || type != null ){

		ControlOutput.SetType(type);
	}
	ControlOutput.SetProperty (&quot;Result&quot;, result);
	ControlOutput.SetProperty (&quot;TotalCount&quot;, totalCount);
	ControlOutput.SetProperty (&quot;MaxLimit&quot;, maxLimit);
	ControlOutput.SetProperty (&quot;ControlNum&quot;, controlNum);
	ControlOutput.SetProperty (&quot;ControlDetailId&quot;, controlDetailId);
	ControlOutput.SetProperty (&quot;ByPassFlg&quot;, byPassFlg);
	ControlOutput.SetProperty (&quot;ErrorMsg&quot;, errorMsg);
	ControlOutput.SetProperty (&quot;Object&quot;, object);
	ControlOutput.SetProperty (&quot;ControlType&quot;, sControlType); //WA#39

}"
			   SEQUENCE="70"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="08/16/2012 15:46:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetSingleBA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetSingleBA (Inputs, Outputs)
{
	try
	{
		var OrderEntryBO	:BusObject;
		var bcOrder			:BusComp;
		var bcOrderEntryLI	:BusComp;
		var bcLI			:BusComp;	
		var Appl = TheApplication();
		var bsRefresh : Service;
		var InputsRefresh, OutputsRefresh : PropertySet;		
		var OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var ItemId = Inputs.GetProperty(&quot;ItemId&quot;);
		var BAId = Inputs.GetProperty(&quot;BAId&quot;);
		var CurrCode = Inputs.GetProperty(&quot;CurrCode&quot;);
		var BAType = Inputs.GetProperty(&quot;BA Type&quot;);
		var CheckSameBA = Inputs.GetProperty(&quot;CheckSameBA&quot;);
		OrderEntryBO = Appl.ActiveBusObject();
		bcLI = OrderEntryBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		bcOrder = OrderEntryBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		bcOrderEntryLI = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);	
		
		var strRootBAId = &quot;&quot;;
		var nextRecord = &quot;&quot;;
		var result = false;
			
		if(CheckSameBA == &quot;Y&quot;)
		{
			CheckBAInOrder(Inputs,Outputs);
			result = Outputs.GetProperty(&quot;Result&quot;,result);
		}
		
		if(!result)
		{
			bcLI.SetFieldValue(&quot;Billing Account Id&quot;,BAId);			
			
			setBillingAccountToOrder (OrderId,BAId);
		
			var strProfAttr = Appl.GetProfileAttr(&quot;IsSVB&quot;);
			Outputs.SetProperty(&quot;IsSVB&quot;,strProfAttr);
			
			bsRefresh = Appl.GetService(&quot;SIS OM PMT Service&quot;);
			InputsRefresh  = Appl.NewPropertySet();
			OutputsRefresh  = Appl.NewPropertySet();
			InputsRefresh.SetProperty(&quot;Business Component Name&quot;, &quot;Order Entry - Orders&quot;);
			InputsRefresh.SetProperty(&quot;Business Object Name&quot;, &quot;Order Entry (Sales)&quot;);
			bsRefresh.InvokeMethod(&quot;Refresh Business Component&quot;, InputsRefresh, OutputsRefresh);
		}			
	}
	finally
	{
		bcLI 			= null;
		bcOrder 		= null;
		bcOrderEntryLI 	= null;	
		OrderEntryBO 	= null;
		InputsRefresh 	= null;
		OutputsRefresh  = null;
		bsRefresh 		= null;
		Appl 			= null;
	}
}"
			   SEQUENCE="71"
			   UPDATED="10/05/2016 23:50:18"
			   UPDATED_BY="SADMIN"
			   CREATED="04/17/2012 14:28:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetVPNAttr"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetVPNAttr(Inputs, Outputs)
{
	try
	{
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var boOrder2 : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcItemXA : BusComp   = boOrder2.GetBusComp(&quot;VF Order Item XA&quot;);

		var sOrderId   = Inputs.GetProperty(&quot;OrderId&quot;);
		var sVPNItemId = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		bcItem.SetSearchSpec(&quot;Part Number&quot;,     &quot;3001&quot;);
		bcItem.SetSearchSpec(&quot;VF Tax Profile&quot;,  &quot;106&quot;);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sVPNItemId = bcItem.GetFieldValue(&quot;Id&quot;);

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Value&quot;);
		bcItemXA.SetSearchSpec(&quot;Attr Name&quot;, &quot;SSET&quot;);
		bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sVPNItemId);			
		bcItemXA.ExecuteQuery(ForwardOnly);

		if (bcItemXA.FirstRecord())
		{
			bcItemXA.SetFieldValue(&quot;Value&quot;,&quot;223&quot;);
			bcItemXA.WriteRecord();
		}
	}
	finally
	{
		bcItemXA = null;
		boOrder2 = null;
		bcItem   = null;
		boOrder  = null;
	}
}"
			   SEQUENCE="72"
			   UPDATED="10/05/2016 23:50:19"
			   UPDATED_BY="SADMIN"
			   CREATED="03/20/2015 01:56:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateItemBillingAccount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateItemBillingAccount(Inputs, Outputs)
{
	try
	{
		var boMLItem : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcMLItem : BusComp   = boMLItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var boBPItem : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcBPItem : BusComp   = boBPItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var boItem   : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem   : BusComp   = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		var	sOrderId          = Inputs.GetProperty(&quot;OrderId&quot;);
		var sMLItemSearchExpr = &quot;&quot;;
		var sMLItemId         = &quot;&quot;;
		var sProdPromInstId   = &quot;&quot;;
		var sBillingAccountId = &quot;&quot;;
		var sBPItemSearchExpr = &quot;&quot;;
		var bHasBPItem        = false;
		var sBPItemId         = &quot;&quot;;
		var sItemSearchExpr   = &quot;&quot;;
		var bHasItem          = false;

		var sActionCodeAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sMLItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
							&quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;) AND &quot; +
							&quot;[Billing Account Id] IS NOT NULL AND [Prod Prom Instance Id] IS NOT NULL&quot;;

		bcMLItem.SetViewMode(AllView);
		bcMLItem.ClearToQuery();
		bcMLItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcMLItem.ActivateField(&quot;Billing Account Id&quot;);
		bcMLItem.SetSearchExpr(sMLItemSearchExpr); //BundledPromotions - RP
		bcMLItem.ExecuteQuery(ForwardOnly); 

		if (!bcMLItem.FirstRecord())
		{
			return;
		}

		do
		{
			sMLItemId         = bcMLItem.GetFieldValue(&quot;Id&quot;);
			sProdPromInstId   = bcMLItem.GetFieldValue(&quot;Prod Prom Instance Id&quot;);
			sBillingAccountId = bcMLItem.GetFieldValue(&quot;Billing Account Id&quot;);

			sBPItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionCodeAdd +
								&quot;&apos; AND [Root Order Item Id]=[Id] AND [Id]&lt;&gt;&apos;&quot; + sMLItemId +
								&quot;&apos; AND ([Prod Prom Instance Id]=&apos;&quot; + sProdPromInstId +
								&quot;&apos; OR [Asset Integration Id]=&apos;&quot; + sProdPromInstId + &quot;&apos;)&quot;;

			bcBPItem.SetViewMode(AllView);
			bcBPItem.ClearToQuery();
			bcBPItem.SetSearchExpr(sBPItemSearchExpr);
			bcBPItem.ExecuteQuery(ForwardOnly);

			bHasBPItem = bcBPItem.FirstRecord();

			while (bHasBPItem)
			{
				sBPItemId = bcBPItem.GetFieldValue(&quot;Id&quot;);

				sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Root Order Item Id]=&apos;&quot; + sBPItemId + &quot;&apos;&quot;;

				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.ActivateField(&quot;Billing Account Id&quot;);
				bcItem.SetSearchExpr(sItemSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);

				bHasItem = bcItem.FirstRecord();
				
				while (bHasItem)
				{
					bcItem.SetFieldValue(&quot;Billing Account Id&quot;, sBillingAccountId);
					bcItem.WriteRecord();		

					bHasItem = bcItem.NextRecord();
				}

				bHasBPItem = bcBPItem.NextRecord();
			}
		}
		while (bcMLItem.NextRecord());
	}
	finally
	{
		bcItem   = null;
		boItem   = null;
		bcBPItem = null;
		boBPItem = null;
		bcMLItem = null;
		boMLItem = null;
	}
}"
			   SEQUENCE="73"
			   UPDATED="10/05/2016 23:50:19"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:17:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VerifyTargetTariff"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VerifyTargetTariff (OrderId)
{
	try
	{
		var ProdGroup 	= &quot;&quot;;
		var ActCode 	= &quot;&quot;;
		var CurTariff 	= &quot;&quot;;
		var NewTariff 	= &quot;&quot;;
		var RefNum1		= &quot;&quot;;
		var RefNum2		= &quot;&quot;;
		var InstallDt	= &quot;&quot;;
		var Name		= &quot;&quot;;
		var DowngradeTariff = false;
		var OrderEntryBO 	: BusObject;
		var OrderLineItems 	: BusComp;
		var AstBC	 		: BusComp;
		var boParam : BusObject;
		var bcParam : BusComp;
		var XABC			: BusComp;
		var App = TheApplication();
		OrderEntryBO 	= App.GetBusObject(&quot;X Order Entry&quot;);
		OrderLineItems 	= OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		AstBC	 		= OrderEntryBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var TariffLov 	= App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;TARIFF&quot;);
		var strActive	= App.InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var Add 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var Delete 		= App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var Exist		= App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);
		var Modify		= App.InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);
		var AmalfExpr	= &quot;[Order Header Id] = &apos;&quot; + OrderId + &quot;&apos; AND (([VF Product Sub Type] = &apos;AMALFI&apos; AND ([Action Code] = &apos;&quot;+Exist+&quot;&apos; OR [Action Code] = &apos;&quot;+Modify+&quot;&apos; OR [Action Code]=&apos;&quot;+Add+&quot;&apos;)) OR ([VF Product Group] = &apos;&quot;+TariffLov+&quot;&apos; AND ([Action Code] = &apos;&quot; + Delete + &quot;&apos; OR [Action Code]=&apos;&quot;+Add+&quot;&apos;)))&quot;;

	//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with (OrderLineItems)
		{
			SetViewMode(AllView);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;Action Code&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Account Id&quot;);
			ActivateField(&quot;Asset Integration Id&quot;);
			ClearToQuery();
			SetSearchExpr(AmalfExpr);
			ExecuteQuery(ForwardOnly);
			var RecCount = CountRecords();//CountRecord shouldn&apos;t be removed since further validation is based on count
			if(RecCount &gt; 2)
			{
				var Rec = FirstRecord();
				var AccntId = GetFieldValue(&quot;Account Id&quot;);
				var IntId	= GetFieldValue(&quot;Asset Integration Id&quot;);
				
				while(Rec)
				{
					ProdGroup	= GetFieldValue(&quot;VF Product Group&quot;);
					ActCode 	= GetFieldValue(&quot;Action Code&quot;);
					if(ProdGroup == TariffLov &amp;&amp; ActCode == Delete)
						CurTariff = GetFieldValue(&quot;Part Number&quot;);
					else if(ProdGroup == TariffLov &amp;&amp; ActCode == Add)
						NewTariff = GetFieldValue(&quot;Part Number&quot;);
					Rec = NextRecord();
				}
				
				if(CurTariff==&quot;1305&quot; || CurTariff==&quot;1306&quot; || CurTariff==&quot;1318&quot; || CurTariff==&quot;1307&quot;)
				{
					boParam = App.GetBusObject (&quot;ACS NI Parameter&quot;);
					bcParam = boParam.GetBusComp (&quot;ACS NI Parameter&quot;);
					
					var ParamExpr = &quot;[Function] = &apos;Tariff&apos; AND [Name] = &apos;&quot;+CurTariff+&quot;&apos; AND [Value] = &apos;&quot;+NewTariff+&quot;&apos;&quot;;
					
					with(bcParam)
					{	
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchExpr(ParamExpr);
						ExecuteQuery(ForwardOnly);
						if (FirstRecord())
						{
							DowngradeTariff = true;
						}	
					}
					if (DowngradeTariff)
					{
						SetViewMode(AllView);
						ActivateField(&quot;Action Code&quot;);
						ClearToQuery();
						SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + OrderId + &quot;&apos; AND (([VF Product Type] = &apos;HANDSET&apos; AND ([Action Code] = &apos;&quot;+Exist+&quot;&apos; OR [Action Code] = &apos;&quot;+Modify+&quot;&apos;)) OR ([Part Number] = &apos;16999&apos;))&quot;);
						ExecuteQuery(ForwardOnly);
						var Found = FirstRecord();
						while(Found)
						{
							var LineItemId = GetFieldValue(&quot;Id&quot;);
							SetFieldValue(&quot;Action Code&quot;,Delete);
							WriteRecord();
							XABC = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
							with(XABC)
							{
								SetViewMode(AllView);
								ClearToQuery();
								SetSearchExpr(&quot;[Object Id] = &apos;&quot;+LineItemId+&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);
								var isAttr = FirstRecord();
								while(isAttr)
								{
									Name = GetFieldValue(&quot;Name&quot;);
									SetFieldValue(&quot;Action Code&quot;,Delete);
									WriteRecord();
									RefNum1 = (Name == &quot;Reference Number 1&quot;)?GetFieldValue(&quot;Numeric Value&quot;):RefNum1;
									RefNum2 = (Name == &quot;Reference Number 2&quot;)?GetFieldValue(&quot;Numeric Value&quot;):RefNum2;
									isAttr = NextRecord();
								}
							}
							Found = NextRecord();
						}
						if(RefNum1 != &quot;&quot; || RefNum2 != &quot;&quot;)
							Disconnect(RefNum1,RefNum2,AccntId);
					}
					
				}
			}
			else
			{
				RefNumTariffCheck(OrderId, &quot;N&quot;)
			}
		}
	}
	finally
	{
		XABC = null;
		OrderLineItems 	= null;
		AstBC	 		= null;
		OrderEntryBO	= null;
		bcParam			= null;
		boParam			= null;
		App				= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="74"
			   UPDATED="10/05/2016 23:50:19"
			   UPDATED_BY="SADMIN"
			   CREATED="03/09/2012 17:09:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="setBillingAccountToOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function setBillingAccountToOrder (sOrderId,sBAId)
{
	try
	{
		var boOrderManagement:BusObject;
		var bcOrderEntry:BusComp;		
		boOrderManagement = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		bcOrderEntry = boOrderManagement.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		
		with(bcOrderEntry)
		{
			SetViewMode(AllView);			
			ClearToQuery();
			ActivateField(&quot;Billing Account Id&quot;);
			SetSearchSpec(&quot;Id&quot;, sOrderId);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				SetFieldValue(&quot;Billing Account Id&quot;,sBAId);
				WriteRecord();
			}
		}
	}
	finally
	{
		bcOrderEntry = null;
		boOrderManagement = null;
	}
}"
			   SEQUENCE="65"
			   UPDATED="10/05/2016 23:50:19"
			   UPDATED_BY="SADMIN"
			   CREATED="12/05/2013 10:32:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



