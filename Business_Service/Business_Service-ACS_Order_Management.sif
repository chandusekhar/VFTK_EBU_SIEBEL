<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LANGUAGE_LOCKED="ENU"
	   LOCKED="Y"
	   LOCKED_DATE="12/01/2017 17:03:27"
	   NAME="Order Entry"
	   UI_FREEZE="N"
	   LOCKED_BY_NAME="IBM_RCATITA"
	   UPDATED="01/04/2018 15:19:20"
	   UPDATED_BY="IBM_RCATITA"
	   CREATED="08/17/1998 18:50:31"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="Y"
		   CLASS="CSSService"
		   COMMENTS="Business Service created for the Order Management"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="ACS Order Management"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="01/04/2018 15:24:59"
		   UPDATED_BY="IBM_RCATITA"
		   CREATED="01/31/2009 16:14:28"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="ACS Order Management"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="01/31/2009 16:18:22"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AlignActorStatus"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="04/07/2013 15:05:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AssetIntegId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:00"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CreditStatusNew"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:00"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CustomerStatusNew"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:01"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DunningStatusNew"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:01"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FraudStatusNew"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:01"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MissDocStatusNew"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:01"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:01"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderSubTypeLIC"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/07/2013 15:05:01"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AlignActorStatus"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/07/2013 15:05:01"
				   UPDATED_BY="SADMIN"
				   CREATED="04/07/2013 15:05:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="BackDateEnableLI"
			   UPDATED="05/31/2013 11:26:16"
			   UPDATED_BY="SADMIN"
			   CREATED="03/27/2013 11:43:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ActionCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2013 11:26:15"
				   UPDATED_BY="SADMIN"
				   CREATED="05/31/2013 11:26:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProductGroup"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2013 11:26:16"
				   UPDATED_BY="SADMIN"
				   CREATED="03/27/2013 11:43:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProductSubType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2013 11:26:16"
				   UPDATED_BY="SADMIN"
				   CREATED="03/27/2013 11:43:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ProductType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2013 11:26:16"
				   UPDATED_BY="SADMIN"
				   CREATED="03/27/2013 11:43:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/31/2013 11:26:16"
				   UPDATED_BY="SADMIN"
				   CREATED="03/27/2013 11:43:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="BackDateEnableLI"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/27/2013 11:43:09"
				   UPDATED_BY="SADMIN"
				   CREATED="03/27/2013 11:43:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="TK 2006/10/25: Cancel Order developement"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CancelCurOrder"
			   UPDATED="01/31/2009 16:15:29"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Cancel Order"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CancelOrders"
			   UPDATED="01/31/2009 16:16:13"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CancelOrders"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="created in order to check all line item values."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckLineItems"
			   UPDATED="11/18/2009 17:29:03"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2009 11:59:26"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Attribute"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2009 16:14:59"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2009 16:14:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2009 12:03:04"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2009 12:03:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Product"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2009 16:14:50"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2009 16:14:50"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/18/2009 17:28:51"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2009 17:28:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckLineItems"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/18/2009 12:00:03"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2009 12:00:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="created in order to check all line item values."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMSISDN_ICCID"
			   UPDATED="05/26/2010 11:03:48"
			   UPDATED_BY="SADMIN"
			   CREATED="05/18/2010 09:43:15"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/18/2010 09:43:15"
				   UPDATED_BY="SADMIN"
				   CREATED="05/18/2010 09:43:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/18/2010 09:43:15"
				   UPDATED_BY="SADMIN"
				   CREATED="05/18/2010 09:43:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VF TK"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOrderAttribute"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/07/2010 12:09:53"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/07/2010 12:09:54"
				   UPDATED_BY="SADMIN"
				   CREATED="01/07/2010 12:09:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/07/2010 12:09:54"
				   UPDATED_BY="SADMIN"
				   CREATED="01/07/2010 12:09:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckOrderAttribute"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/07/2010 12:10:39"
				   UPDATED_BY="SADMIN"
				   CREATED="01/07/2010 12:09:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VF TK"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOrders"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Type"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/05/2010 14:15:56"
				   UPDATED_BY="SADMIN"
				   CREATED="09/05/2010 14:15:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderSubType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/30/2010 09:15:00"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:15:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PriceList"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Date"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResumeDate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Date"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SuspendDate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckOrders"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="Y"
			   NAME="CheckSA"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckSA"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateAsset"
			   UPDATED="04/25/2012 11:17:56"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:15:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/30/2010 17:39:08"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 17:39:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SkipAgreement"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/25/2012 11:17:56"
				   UPDATED_BY="SADMIN"
				   CREATED="04/25/2012 11:17:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateAsset"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/30/2010 09:15:00"
				   UPDATED_BY="SADMIN"
				   CREATED="07/30/2010 09:15:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CustomerSubmitOrder"
			   UPDATED="01/31/2009 16:16:13"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Parent Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CustomerSubmitOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GoToSalesOrder"
			   UPDATED="01/31/2009 16:16:13"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="View Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GoToSalesOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 07-Mar-2007: This method will update the LI status to In-Transit and also cancel all other pending modify orders available for the asset."
			   HIDDEN="N"
			   INACTIVE="Y"
			   NAME="HandleMultiplePendingOrders"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="HandleMultiplePendingOrders"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ResetAssetOrders"
			   UPDATED="10/28/2013 14:05:25"
			   UPDATED_BY="SADMIN"
			   CREATED="10/28/2013 14:05:25"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AssetIntegrationId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/28/2013 14:05:25"
				   UPDATED_BY="SADMIN"
				   CREATED="10/28/2013 14:05:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/28/2013 14:05:25"
				   UPDATED_BY="SADMIN"
				   CREATED="10/28/2013 14:05:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ResetAssetOrders"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/28/2013 14:05:25"
				   UPDATED_BY="SADMIN"
				   CREATED="10/28/2013 14:05:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SITransfer"
			   UPDATED="05/16/2012 12:52:36"
			   UPDATED_BY="SADMIN"
			   CREATED="06/18/2010 13:55:35"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/16/2012 12:52:36"
				   UPDATED_BY="SADMIN"
				   CREATED="05/16/2012 12:52:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SITransfer"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/18/2010 13:56:01"
				   UPDATED_BY="SADMIN"
				   CREATED="06/18/2010 13:56:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS CC R6.2: VN 11042006 Added For Supplement Order Response"
			   HIDDEN="N"
			   INACTIVE="Y"
			   NAME="SetOrderActiveFlag"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetOrderActiveFlag"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetOwnerAccountId"
			   UPDATED="05/31/2013 11:26:16"
			   UPDATED_BY="SADMIN"
			   CREATED="05/31/2013 11:26:15"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/31/2013 11:26:15"
				   UPDATED_BY="SADMIN"
				   CREATED="05/31/2013 11:26:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IntegrationId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2013 11:26:15"
				   UPDATED_BY="SADMIN"
				   CREATED="05/31/2013 11:26:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetOwnerAccountId"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/31/2013 11:26:16"
				   UPDATED_BY="SADMIN"
				   CREATED="05/31/2013 11:26:16"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="Y"
			   NAME="Supplement Order"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:32"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:32"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:32"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Supplement Order"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS CC R6.2: VK 14032006 Added for Move Order Business Event"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateAsset"
			   UPDATED="01/31/2009 16:16:13"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Line Item Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateAsset"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="AM ACS. 08th August 06. Added for Asset Update in Transfer, Move Order."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateAssetStatus"
			   UPDATED="01/31/2009 16:16:13"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:13"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateAssetStatus"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateItemBillingAccount"
			   UPDATED="04/28/2014 16:00:10"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 16:00:10"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/28/2014 16:00:10"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 16:00:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateItemBillingAccount"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/28/2014 16:00:10"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 16:00:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateItemPriceList"
			   UPDATED="07/06/2010 13:15:30"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:14"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateItemPriceList"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/06/2010 13:15:30"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateItemPriceListNew"
			   UPDATED="11/25/2010 18:38:51"
			   UPDATED_BY="SADMIN"
			   CREATED="08/22/2010 08:26:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/22/2010 08:26:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/22/2010 08:26:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/25/2010 18:38:51"
				   UPDATED_BY="SADMIN"
				   CREATED="11/25/2010 18:38:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateItemPriceListNew"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/22/2010 08:26:24"
				   UPDATED_BY="SADMIN"
				   CREATED="08/22/2010 08:26:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS Sreevidya Added for Suspend and Resume Order"
			   HIDDEN="N"
			   INACTIVE="Y"
			   NAME="UpdateSuspendorResume"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Line Item Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:14"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:14"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateSuspendorResume"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="Y"
			   NAME="UploadSAItems"
			   UPDATED="11/10/2011 14:26:17"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:14"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UploadSAItems"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AlignActorStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AlignActorStatus (Inputs,Outputs)
{
	try
	{		  	
		var AssetIntegId = &quot;&quot;;
		var OrderId = &quot;&quot;;
		var OrderSubTypeLIC = Inputs.GetProperty(&quot;OrderSubTypeLIC&quot;);
		var CreditStatusNew = Inputs.GetProperty(&quot;CreditStatusNew&quot;);
		var CustomerStatusNew = Inputs.GetProperty(&quot;CustomerStatusNew&quot;);
		var DunningStatusNew = Inputs.GetProperty(&quot;DunningStatusNew&quot;);
		var FraudStatusNew = Inputs.GetProperty(&quot;FraudStatusNew&quot;);
		var MissDocStatusNew = Inputs.GetProperty(&quot;MissDocStatusNew&quot;);
		var CreditStatusOld = &quot;000&quot;;
		var CustomerStatusOld = &quot;000&quot;;
		var DunningStatusOld = &quot;000&quot;;
		var FraudStatusOld = &quot;000&quot;;
		var MissDocStatusOld = &quot;000&quot;;
		var strActor = &quot;&quot;;
		var strActorCur = &quot;&quot;;
		var OrderSubType = &quot;&quot;;
		var StatusColumn = &quot;&quot;;
		var StatusColumnMO = &quot;&quot;;
		var SetStatus = false;
		OrderSubType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,OrderSubTypeLIC);
		strActorCur = GetActor(OrderSubTypeLIC);
		AssetIntegId = Inputs.GetProperty(&quot;AssetIntegId&quot;);
		OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		
	  	var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
	  	var bcAsset : BusComp = boOrder.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var bcLineItem : BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boOrderEntry : BusObject = TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var bcOrder : BusComp = boOrderEntry.GetBusComp(&quot;Order Entry - Orders for IO HP&quot;);
		with (bcAsset)
		{
			SetViewMode(AllView);
			ActivateField(&quot;VF Credit Status&quot;);
			ActivateField(&quot;VF Customer Status&quot;);
			ActivateField(&quot;VF Document Missing Status&quot;);
			ActivateField(&quot;VF Dunning Status&quot;);
			ActivateField(&quot;VF Fraud Status&quot;);
			ClearToQuery();
			SetSearchExpr(&quot;[Integration Id] = &apos;&quot;+AssetIntegId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				CreditStatusOld = GetFieldValue(&quot;VF Credit Status&quot;);
				CustomerStatusOld = GetFieldValue(&quot;VF Customer Status&quot;);
				MissDocStatusOld = GetFieldValue(&quot;VF Document Missing Status&quot;);
				DunningStatusOld = GetFieldValue(&quot;VF Dunning Status&quot;);	
				FraudStatusOld = GetFieldValue(&quot;VF Fraud Status&quot;);	
			}
		}		
		with(bcLineItem)
		{
			SetViewMode(AllView);
			ActivateField(&quot;VF Credit Status New&quot;);
			ActivateField(&quot;VF Customer Status New&quot;);
			ActivateField(&quot;VF Document Missing Status New&quot;);
			ActivateField(&quot;VF Dunning Status New&quot;);
			ActivateField(&quot;VF Fraud Status New&quot;);
			ActivateField(&quot;VF Credit Status Old&quot;);
			ActivateField(&quot;VF Customer Status Old&quot;);
			ActivateField(&quot;VF Document Missing Status Old&quot;);
			ActivateField(&quot;VF Dunning Status Old&quot;);
			ActivateField(&quot;VF Fraud Status Old&quot;);
			ActivateField(&quot;Order Sub Type&quot;);
			ActivateField(&quot;VF Status Column&quot;);		
			ClearToQuery();
			SetSearchExpr(&quot;[Asset Integration Id] = &apos;&quot;+AssetIntegId+&quot;&apos; AND [Order Header Id] &lt;&gt; &apos;&quot;+OrderId+&quot;&apos; AND [Order Status] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Open&quot;)+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var MOExists = FirstRecord();
			if (MOExists)
			{			
				while(MOExists)
				{
					StatusColumnMO = GetFieldValue(&quot;VF Status Column&quot;);
					switch (StatusColumnMO)
					{
						case &quot;2&quot;:
							FraudStatusOld = GetFieldValue(&quot;VF Fraud Status New&quot;);
						break;	
						case &quot;3&quot;:
							CustomerStatusOld = GetFieldValue(&quot;VF Customer Status New&quot;);
						break;
						case &quot;1&quot;:
							CreditStatusOld = GetFieldValue(&quot;VF Credit Status New&quot;);
						break;
						case &quot;4&quot;:
							DunningStatusOld = GetFieldValue(&quot;VF Dunning Status New&quot;);
						break;
						case &quot;5&quot;:
							MissDocStatusOld = GetFieldValue(&quot;VF Document Missing Status New&quot;);	
						break;																
					}
					MOExists = NextRecord();					
				}
			}
		}
		with(bcOrder)
		{
			SetViewMode(AllView);
			ActivateField(&quot;VF Credit Status New&quot;);
			ActivateField(&quot;VF Customer Status New&quot;);
			ActivateField(&quot;VF Document Missing Status New&quot;);
			ActivateField(&quot;VF Dunning Status New&quot;);
			ActivateField(&quot;VF Fraud Status New&quot;);
			ActivateField(&quot;VF Credit Status Old&quot;);
			ActivateField(&quot;VF Customer Status Old&quot;);
			ActivateField(&quot;VF Document Missing Status Old&quot;);
			ActivateField(&quot;VF Dunning Status Old&quot;);
			ActivateField(&quot;VF Fraud Status Old&quot;);
			ActivateField(&quot;Order Sub Type&quot;);
			ActivateField(&quot;VF Status Column&quot;);		
			ClearToQuery();
			SetSearchExpr(&quot;[Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);	
			if(FirstRecord())
			{
				StatusColumn = GetFieldValue(&quot;VF Status Column&quot;);
				if (CreditStatusOld == &quot;&quot;)
				{
					CreditStatusOld = &quot;000&quot;;
				}
				if (CustomerStatusOld == &quot;&quot;)
				{
					CustomerStatusOld = &quot;000&quot;;
				}
				if (MissDocStatusOld == &quot;&quot;)
				{
					MissDocStatusOld = &quot;000&quot;;
				}
				if (DunningStatusOld == &quot;&quot;)
				{
					DunningStatusOld = &quot;000&quot;;
				}
				if (FraudStatusOld == &quot;&quot;)
				{
					FraudStatusOld = &quot;000&quot;;
				}
				SetFieldValue(&quot;VF Credit Status Old&quot;,CreditStatusOld);
				SetFieldValue(&quot;VF Customer Status Old&quot;,CustomerStatusOld);
				SetFieldValue(&quot;VF Document Missing Status Old&quot;,MissDocStatusOld);
				SetFieldValue(&quot;VF Dunning Status Old&quot;,DunningStatusOld);
				SetFieldValue(&quot;VF Fraud Status Old&quot;,FraudStatusOld);
				SetFieldValue(&quot;VF Credit Status New&quot;,CreditStatusOld);
				SetFieldValue(&quot;VF Customer Status New&quot;,CustomerStatusOld);
				SetFieldValue(&quot;VF Document Missing Status New&quot;,MissDocStatusOld);
				SetFieldValue(&quot;VF Dunning Status New&quot;,DunningStatusOld);
				SetFieldValue(&quot;VF Fraud Status New&quot;,FraudStatusOld);
				switch (StatusColumn)
				{
					case &quot;2&quot;:
						SetFieldValue(&quot;VF Fraud Status New&quot;,FraudStatusNew);
					break;	
					case &quot;3&quot;:
						SetFieldValue(&quot;VF Customer Status New&quot;,CustomerStatusNew);
					break;
					case &quot;1&quot;:
						SetFieldValue(&quot;VF Credit Status New&quot;,CreditStatusNew);
					break;
					case &quot;4&quot;:
						SetFieldValue(&quot;VF Dunning Status New&quot;,DunningStatusNew);
					break;
					case &quot;5&quot;:
						SetFieldValue(&quot;VF Document Missing Status New&quot;,MissDocStatusNew);	
					break;																
				}
				WriteRecord();						
			}
		}
	}
	catch(e)
	{
		var error = e.toString();
	}
	finally
	{
		bcOrder = null;
		bcAsset = null;
		bcLineItem = null;
		boOrder = null;
		boOrderEntry = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="11/19/2013 10:31:08"
			   UPDATED_BY="SADMIN"
			   CREATED="04/07/2013 15:05:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BackDateEnableLI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BackDateEnableLI (Inputs , Outputs)
{
	try
	{		  	
	  	var Result = &quot;N&quot;;
		var ProductGroup = Inputs.GetProperty(&quot;ProductGroup&quot;);
		var ProductType = Inputs.GetProperty(&quot;ProductType&quot;);
		var ProductSubType = Inputs.GetProperty(&quot;ProductSubType&quot;);
		var ActionCode = Inputs.GetProperty(&quot;ActionCode&quot;);

	  	var boParameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp = boParameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);

		bcParameter.SetViewMode (AllView);
		bcParameter.ClearToQuery ();
		bcParameter.ActivateField(&quot;Condition4&quot;);
		bcParameter.ActivateField(&quot;Condition6&quot;);
		bcParameter.SetSearchExpr (&quot;[Function] = &apos;BACKDATE_PRODUCT&apos; AND [Condition1] = &apos;&quot;+ProductGroup+&quot;&apos; AND [Condition2] = &apos;&quot;+ProductType+&quot;&apos; AND [Condition3] = &apos;&quot;+ProductSubType+&quot;&apos;&quot;);
		bcParameter.ExecuteQuery(ForwardOnly);
		if (bcParameter.FirstRecord ())
		{
			if(ActionCode == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;))
				Result = bcParameter.GetFieldValue(&quot;Condition4&quot;);
			else if(ActionCode == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;))
				Result = bcParameter.GetFieldValue(&quot;Condition6&quot;);
		} 	
		Outputs.SetProperty (&quot;Result&quot;, Result);
	}
	finally
	{
		bcParameter = null;
		boParameter = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="02/05/2016 08:43:22"
			   UPDATED_BY="SADMIN"
			   CREATED="03/27/2013 11:43:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CancelCurOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CancelCurOrder(Inputs,Outputs)
{
	try
	{ 
		// Get the Instance of the Order BC and OrderLineItem BC
		var OrderBC : BusComp = TheApplication().ActiveBusObject().GetBusComp(&quot;Order Entry - Orders&quot;);//Parent Order 
		var NewOrderBO : BusObject =TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);//BO Instance for New Order Line Item
		var NewOrderLineItemsBC : BusComp = NewOrderBO.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);//BC Instance of New Order Line Items
		var NewLineItemAttribBC : BusComp = NewOrderBO.GetBusComp(&quot;Order Item XA&quot;);//New BC for updating Item Attributes
		var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);//BO Instance for Parent Order Line Item
		var OrderLineItemsBC : BusComp = XOrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);//BC Instance of Parent Order Line Items
		var NewOrderId,ParOrderId;
		var strDelete = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
		var strDisconnect = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_TYPE&quot;, &quot;Disconnect&quot;);
		var strCancelOrder = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_SUB_TYPE&quot;, &quot;Cancel Order&quot;);
		var sNewBC : BusComp;
		var sNewLIBC : BusComp;
		var sNewAttrib : BusComp;
		//Original Order Id
		ParOrderId=Inputs.GetProperty(&quot;OrderId&quot;);
		
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;ParOrderId&quot;,ParOrderId); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 

		//Query for the selected order
		with (OrderBC)
		{
			//Check for the &apos;Open&apos; order and create Cancelation Order from original order.
			if (FirstRecord() &amp;&amp; GetFieldValue(&quot;Status&quot;)==&quot;Open&quot;)
			{
				//New order with parent order id, type-Disconnect, sub type-Cancel Order 
				NewRecord(NewAfterCopy);
				SetFieldValue(&quot;Order Type&quot;,strDisconnect);
				SetFieldValue(&quot;Order Sub Type&quot;,strCancelOrder); 
				SetFieldValue(&quot;Parent Order Id&quot;,Inputs.GetProperty(&quot;OrderId&quot;));
				NewOrderId=GetFieldValue(&quot;Id&quot;)
				WriteRecord();
			}
		}
	 
		//Query for Line Items of Main Order (Order header id=Parent order id)
		with (OrderLineItemsBC)
		{
			SetViewMode(AllView)     // 3 - For AllView Mode
			ClearToQuery();
			ActivateField(&quot;Item Price List Id&quot;);
			ActivateField(&quot;Service Id&quot;);
			ActivateField(&quot;Contact Id&quot;);
			ActivateField(&quot;Line Number&quot;);
			SetSearchSpec(&quot;Order Header Id&quot;,ParOrderId);
			ExecuteQuery(ForwardOnly);
	 
			var BlRec=FirstRecord();
	  
			//For each Line Item get the Line Number, Price List and Event Source
			while(BlRec)
			{
				var sLineNum = GetFieldValue(&quot;Line Number&quot;);
				var sPriceListId=GetFieldValue(&quot;Item Price List Id&quot;);
				var sEventSource=GetFieldValue(&quot;Service Id&quot;);
				var sContactLastName=GetFieldValue(&quot;Contact Id&quot;);
				//in the new Line Items-find the ones for the Cancel Order
				with (NewOrderLineItemsBC)
				{
					SetViewMode(AllView)     // 3 - For AllView Mode
					ActivateField(&quot;Item Price List Id&quot;);
					ActivateField(&quot;Service Id&quot;);
					ActivateField(&quot;Action Code&quot;);
					ActivateField(&quot;Contact Id&quot;);
					SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+NewOrderId+&quot;&apos; AND  [Line Number] =&apos;&quot;+sLineNum+&quot;&apos;&quot;);
					NewLineItemAttribBC.SetViewMode(AllView);
					ExecuteQuery(ForwardOnly)
	 				
	 				var NewOrderLineItemsBCisRecord = FirstRecord();
					//Update Price List, Event Source &amp; Action for the New Line Items
					if(NewOrderLineItemsBCisRecord)
					{
						SetFieldValue(&quot;Item Price List Id&quot;,sPriceListId);
						SetFieldValue(&quot;Service Id&quot;,sEventSource);
						SetFieldValue(&quot;Action Code&quot;, strDelete);
						SetFieldValue(&quot;Contact Id&quot;,sContactLastName);
						var sNewLineItemId = GetFieldValue(&quot;Id&quot;);
						with (NewLineItemAttribBC)
						{
							var blAttrib = FirstRecord();
							// go through all Item Attributes and set Action Code to Cancel
							while (blAttrib)
							{
								SetFieldValue(&quot;Action Code&quot;, strDelete);
								blAttrib = NextRecord();
							}
						}
					}
					WriteRecord();
				}
				BlRec = NextRecord();
			}
		}
		//Set Price List Id for Cancel order 
		with (OrderBC)
 		{
 	 		SetFieldValue(&quot;Price List Id&quot;,sPriceListId);
  	 		WriteRecord();
  		}
		
		//View Navigation
		sNewBC = NewOrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		sNewLIBC = NewOrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		sNewAttrib = NewOrderBO.GetBusComp(&quot;Order Item XA&quot;);
		sNewBC.ClearToQuery();
		sNewBC.SetSearchSpec(&quot;Id&quot;, NewOrderId );
		sNewLIBC.ClearToQuery();
		sNewAttrib.ClearToQuery();
		sNewBC.ExecuteQuery(ForwardBackward);

		TheApplication().GotoView(&quot;Order Entry - Line Items View (Sales)&quot;,NewOrderBO);
 	}
  	finally{
		NewLineItemAttribBC = null;
		NewOrderLineItemsBC=null;
		OrderLineItemsBC = null;
		OrderBC = null;
		XOrderBO = null;
		NewOrderBO=null;
		sNewAttrib = null;
		sNewLIBC = null;
		sNewBC	= null;
		BS = null;
		outProp = null;
		inProp = null;
	}
 }"
			   SEQUENCE="3"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CancelOrders"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CancelOrders (Inputs, Outputs)
{
	try
	{
		var	BillingAccountId = Inputs.GetProperty(&quot;BillingAccountId&quot;);
		var OrderBO   : BusObject =  TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var AccountBO : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var BillAccBC : BusComp = AccountBO.GetBusComp(&quot;Billing Account&quot;);
		var OrderBC   : BusComp =  OrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var OrderItemBC  : BusComp  =  OrderBO.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var cancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;)
		var account_dunn_app_flg,order_status,item_status, i,j,order_id, err;
		var stCode,stMethod,stMsg,stOutput;
	
		// if the billing account id is not populated (i.e. if the button is
		// clicked with no active record) do nothing
		if ( BillingAccountId != null ) 
		{
		//Billing Account Query
			BillAccBC.SetViewMode(AllView);
			BillAccBC.ClearToQuery();
			BillAccBC.ActivateField(&quot;Dunning Approved Flag&quot;);
			//Search for the Billing Account
			//VFTK Junaid 20120520 - Scripting 15 not needed as null check already present
		    BillAccBC.SetSearchSpec (&quot;Id&quot;, BillingAccountId);
		   	BillAccBC.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
		   	//check if Billing Account is under Dunning Investigation
		   	account_dunn_app_flg = BillAccBC.GetFieldValue(&quot;Dunning Approved Flag&quot;);
		   	
		   	if (account_dunn_app_flg == &quot;Y&quot;)
		   	{ 
				//Order Query
				OrderBC.SetViewMode(AllView);
				OrderBC.ClearToQuery();
				OrderBC.ActivateField(&quot;Status&quot;);
				//Search for the Order
				//VFTK Junaid 20120520 - Scripting 15 not needed as null check already present
			    OrderBC.SetSearchSpec (&quot;Billing Account Id&quot;, BillingAccountId);
			   	OrderBC.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
			   	
				i = OrderBC.FirstRecord();
			   	while (i == true)
			   	{
			   		//Get the order status and change it to &apos;cancelled&apos; if it is &apos;pending&apos;
			   		order_id = OrderBC.GetFieldValue(&quot;Id&quot;);
			   		order_status = OrderBC.GetFieldValue(&quot;Status&quot;);
			   		if (order_status == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;) )
			   		{
			   				OrderBC.SetFieldValue(&quot;Status&quot;,cancelled);
			   				OrderBC.WriteRecord();
					   		//Get the line items of the order
					   		OrderItemBC.SetViewMode(AllView);
					   		OrderItemBC.ClearToQuery();
							OrderItemBC.ActivateField(&quot;Status&quot;);
							//Search for the Order
							//VFTK Junaid 20120520 - Scripting 15 not needed as getfieldvalue of id wont return null
						    OrderItemBC.SetSearchSpec (&quot;Order Header Id&quot;, order_id);
					    	OrderItemBC.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
					   		
					   		j = OrderItemBC.FirstRecord();
					   		
					   		//Cycle trogh the line items
					   		while (j == true)
					   		{
					   			//Get the line item status
					   			item_status = null;
					   			item_status = OrderItemBC.GetFieldValue(&quot;Status&quot;);
						   		OrderItemBC.SetFieldValue(&quot;Status&quot;,cancelled);
						   		OrderItemBC.WriteRecord();
						   		//Next line item
						   		j = OrderItemBC.NextRecord();
					   		} //End Line Item Loop
					   	
			   		}// End If
			   		
			   		//Next Order
			   		i = OrderBC.NextRecord();
			   	} //End Order Loop
			   	
			}//End If
			else
			{
				stCode   = &quot;BS006&quot;; 
				stMethod = &quot;CheckMSG&quot;;
				stMsg    = MsgManage(stMethod, stCode, stMsg); // + stAccount.toUpperCase();
				stMethod = &quot;CallMSG&quot;;          
				stOutput = MsgManage(stMethod, stCode, stMsg);
			}
		}
		return (CancelOperation);
	}
	finally
	{
		OrderItemBC = null;
		OrderBC = null;
		BillAccBC = null;
		AccountBO = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLineItems"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLineItems (Inputs, Outputs)
{	
	try
	{
	var	strOrderId 		= Inputs.GetProperty(&quot;OrderID&quot;);
	var	strProduct 		= Inputs.GetProperty(&quot;Product&quot;);
	var	strAttribute	= Inputs.GetProperty(&quot;Attribute&quot;);
	//VFTK Junaid 20120520 - Added for Oracle Review 15
	var inProp :PropertySet     = TheApplication().NewPropertySet();
	var outProp :PropertySet    = TheApplication().NewPropertySet();
	var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;strOrderId&quot;, strOrderId); 
	inProp.SetProperty(&quot;strProduct&quot;, strProduct); 
	inProp.SetProperty(&quot;strAttribute&quot;, strAttribute);
	inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
	//End
	var Output			= &quot;&quot;;
	var BoOrderEntry 		: BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	//var BcOrderEntryOrders	: BusComp = BoOrderEntry.GetBusComp(&quot;Order Entry - Orders&quot;);
	var BcOrderEntryLI 		: BusComp = BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
	var BcOrderItemXA		: BusComp = BoOrderEntry.GetBusComp(&quot;TELCO Line Items XA - Simple&quot;);	
	
	//BcOrderEntryOrders.SetViewMode(AllView);
	//BcOrderEntryOrders.ClearToQuery();
    //BcOrderEntryOrders.SetSearchSpec (&quot;Id&quot;, strOrderId);
    
    BcOrderEntryLI.SetViewMode(AllView);
	BcOrderEntryLI.ClearToQuery();
	BcOrderEntryLI.ActivateField(&quot;Order Header Id&quot;);
	BcOrderEntryLI.ActivateField(&quot;Display Name&quot;);
	BcOrderEntryLI.SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
	BcOrderEntryLI.SetSearchSpec (&quot;Display Name&quot;, strProduct);
    
	BcOrderItemXA.SetViewMode(AllView);
	BcOrderItemXA.ClearToQuery();
	BcOrderItemXA.ActivateField(&quot;Text Value&quot;);
	BcOrderItemXA.SetSearchSpec(&quot;Name&quot;, strAttribute);//Scripting 31: Moved Child BC acivations above Parent query sice there is link

   	BcOrderEntryLI.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
	
	//if (BcOrderEntryOrders.FirstRecord ())
	//	{	
			if (BcOrderEntryLI.FirstRecord())
			{
				var LineItemName = BcOrderEntryLI.GetFieldValue(&quot;Display Name&quot;);
				var LineItemID = BcOrderEntryLI.GetFieldValue(&quot;Id&quot;);
				if (BcOrderItemXA.FirstRecord())
				{
   					var attrName = BcOrderItemXA.GetFieldValue(&quot;Name&quot;);
					var attrVal = BcOrderItemXA.GetFieldValue(&quot;Text Value&quot;);
					
					if(attrVal.length == 0)
					{
						Output =&quot;Attribute not populated&quot;;
						Outputs.SetProperty(&quot;Result&quot;,Output);
					}
					else
					{
						Output =&quot;Attribute populated&quot;;
						Outputs.SetProperty(&quot;Result&quot;,Output);		
					} 	
				}
				else
				{
					Output =&quot;Attribute Not found&quot;;
					Outputs.SetProperty(&quot;Result&quot;,Output); 
				}
			}
	   		else
	   		{
	   			Output =&quot;Product Not found&quot;;
				Outputs.SetProperty(&quot;Result&quot;,Output); 
	   		}
	//	}
	//	else
	//	{
	//		Output =&quot;Order Not found&quot;;
	//		Outputs.SetProperty(&quot;Result&quot;,Output);  
	//	}
	}	
	finally
	{
		BoOrderEntry		= null;
		//BcOrderEntryOrders	= null;
		BcOrderEntryLI		= null;
		BcOrderItemXA		= null;
		LineItemName 		= null;
		LineItemID 			= null;
		attrName			= null;
		attrVal				= null;
		inProp = null;
		outProp = null;
		BS = null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="5"
			   UPDATED="02/05/2016 08:43:22"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2009 10:41:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMSISDN_ICCID"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMSISDN_ICCID (Inputs, Outputs)
{
	var CheckEnabled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CHECK_ENABLED&quot;,&quot;Check Enabled&quot;); //If value set to &quot;Y&quot; the check is enabled;
	var strModifyMSISDN = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;, &quot;102&quot;);
	var enableICCIDVal = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTRCBU_ENABLE_ICCID_VAL&quot;, &quot;ICCID&quot;); //DEF-8518 RPIRES
	var ICCIDValue = &quot;&quot;; //DEF-8518 RPIRES
	var sCancelled = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;); //ACAMBAS: VFTRCBU-25251

	if(CheckEnabled == &quot;Y&quot;)
	{
		try
		{	
			var	strOrderId 		= Inputs.GetProperty(&quot;OrderID&quot;);
			var Output			= &quot;&quot;;
	
			var BoOrderEntry 		: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
			var BcOrderEntryLI 		: BusComp = BoOrderEntry.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
			var BcOrderItemXA 		: BusComp	= BoOrderEntry.GetBusComp(&quot;HP Submit - Order Item XA&quot;); // TLG-5030
			
		    with(BcOrderEntryLI)
		    {			
		    	//var strOrderExpr = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND ([Part Number] = &apos;1000&apos; OR [Part Number] = &apos;18400&apos; OR [Part Number] = &apos;50000&apos;)&quot;;
		    	//ACAMBAS: VFTRCBU-25251 - Start
		    	//var strOrderExpr = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND ([VF Product Type] = &apos;MAIN&apos; OR [Part Number] = &apos;18400&apos; OR [Part Number] = &apos;50000&apos;)&quot;;		//JIRA-4109
				var strOrderExpr = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND ([VF Product Type] = &apos;MAIN&apos; OR [Part Number] = &apos;18400&apos; OR [Part Number] = &apos;50000&apos;) AND [Status] &lt;&gt; &apos;&quot; + sCancelled + &quot;&apos;&quot;;
				//ACAMBAS: VFTRCBU-25251 - End
				SetViewMode(AllView);
				ActivateField(&quot;MSISDN&quot;);
				ActivateField(&quot;VF Product Type&quot;);
				ActivateField(&quot;ICCID&quot;);
				ActivateField(&quot;Service Id&quot;);
				ClearToQuery();
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15				
				SetSearchExpr(strOrderExpr);
		
				ExecuteQuery(ForwardOnly);//VFTK Venkata 11052012 : No changes for OracleScript 15 review since OrderID is a required input
				var booRecordExist = FirstRecord();
				if (booRecordExist)
				{
					while(booRecordExist)
					{	
						var rdsId = GetFieldValue(&quot;Id&quot;); // TLG-5030
						var MSISDN = GetFieldValue(&quot;MSISDN&quot;);
						var ICCID = GetFieldValue(&quot;ICCID&quot;);
						var pricelistId = GetFieldValue(&quot;Item Price List Id&quot;);
						var AttrName =&quot;&quot;;
						var MSIIDSNValue = &quot;&quot;;
					
						try { // TLG-5030
							if (MSISDN.length &gt; 0)
							{
								with(BcOrderItemXA)
								{	
									ClearToQuery ();
									SetViewMode (AllView);
									ActivateField(&quot;Name&quot;);
									ActivateField(&quot;Value&quot;);
									SetSearchExpr(&quot;([Name] = &apos;MSISDN&apos; OR [Name] = &apos;ICCID&apos; OR [Name] = &apos;ICCI&apos;) AND [Object Id] = &apos;&quot;+rdsId+&quot;&apos;&quot;);
									//SetSearchSpec(&quot;Name&quot;,&quot;MSISDN&quot;);
									//SetSearchSpec(&quot;Object Id&quot;,rdsId);
									ExecuteQuery (ForwardOnly);
									var attrRec = FirstRecord();
									if(attrRec)
									{
										while (attrRec)
										{
										 	AttrName = GetFieldValue(&quot;Name&quot;);
											MSIIDSNValue 	= GetFieldValue (&quot;Value&quot;);
											ICCIDValue = GetFieldValue (&quot;Value&quot;);
										
											if (AttrName== &quot;MSISDN&quot; &amp;&amp; (MSIIDSNValue != MSISDN || MSIIDSNValue == &quot;&quot; || MSIIDSNValue == null))
											{
													BcOrderItemXA.SetFieldValue(&quot;Value&quot;,MSISDN);
													BcOrderItemXA.WriteRecord();
											}
											
											if(enableICCIDVal == &quot;Y&quot;)
											{
												if ((AttrName== &quot;ICCI&quot; || AttrName== &quot;ICCID&quot;) &amp;&amp; (ICCIDValue == &quot;&quot; || ICCIDValue == null))
												{
														Output =&quot;KO&quot;;
														Outputs.SetProperty(&quot;Result&quot;,Output);
														return(CancelOperation);
												}
											}
											attrRec = NextRecord();
										}
									}
								}
							}
						} catch( e ) {}; // END TLG-5030
					
					
					    if (MSISDN.length &gt; 0 &amp;&amp; strModifyMSISDN == GetFieldValue(&quot;Order Sub Type&quot;))
					    {
					    	SetFieldValue(&quot;Service Id&quot;, MSISDN);
					    	WriteRecord();
					    }
						if (MSISDN.length == 0 || ICCID.length == 0 )
						{	
							Output =&quot;KO&quot;;
							Outputs.SetProperty(&quot;Result&quot;,Output);
							return(CancelOperation);
						}
						else
						{	
							Output =&quot;OK&quot;;
							Outputs.SetProperty(&quot;Result&quot;,Output);	
						}
						booRecordExist = NextRecord();	
					}
				}
				else
				{
					Output =&quot;Order Not found&quot;;
					Outputs.SetProperty(&quot;Result&quot;,Output);  
				}	
			}	
		}
		finally
		{
			BS	= null;	
			inProp = null;
			outProp = null;
			BcOrderItemXA = null; // TLG-5030
			BcOrderEntryLI 	= null;
			BoOrderEntry 	= null;
		}
	}
	return (CancelOperation);
}"
			   SEQUENCE="6"
			   UPDATED="02/16/2016 22:54:43"
			   UPDATED_BY="SADMIN"
			   CREATED="05/18/2010 09:43:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrderAttribute"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrderAttribute (Inputs, Outputs)
{	
	try
	{
		var	strOrderId 		= Inputs.GetProperty(&quot;OrderID&quot;);
		var Output			= &quot;&quot;;
		var queryMSISDN	= &quot;N&quot;;
		
		var MNPICCIDStr    = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
		//Attributi mandatory della SIM
		var strICCIDLOV     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;ICCID&quot;);
		var strIMSILOV      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;IMSI&quot;);
		var strPINLOV       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;PIN&quot;);
		var strPUKLOV       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;PUK&quot;);
		var strAlgorithmLOV = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;Algorithm&quot;);
		var strCardTypeLOV  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;CardType&quot;);
		var strSimCardProfileLOV  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;SimCardProfile&quot;);
		var strSecurityKeyLOV     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;SecurityKey&quot;);
		
		var BoOrderEntry 	:BusObject= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var BcOrderEntryLI 	:BusComp= BoOrderEntry.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var BcOrderItemXA:BusComp;		
		with (BcOrderEntryLI)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Order Sub Type&quot;);
			ActivateField(&quot;Order Header Id&quot;);
			ActivateField(&quot;SIM flg2&quot;);
			ClearToQuery();
			// Begin: Review Input validation: Scripting 15 null check Added 16may2012 Udbhav IDC
			inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
			ExecuteQuery(ForwardOnly);//Review Parent-Child Query:No changes as No link between BC’s, 16may2012 Udbhav IDC
			var booRecordExist = FirstRecord();
			if(booRecordExist)
			{
				while(booRecordExist)
				{ 
					var XASrc;
					var PartNumber   = GetFieldValue(&quot;Part Number&quot;);
					var OrderItemId  = GetFieldValue(&quot;Id&quot;);
					var OrderSubType = GetFieldValue(&quot;Order Sub Type&quot;);
					BcOrderItemXA = BoOrderEntry.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
					var isSim		 = GetFieldValue(&quot;SIM flg2&quot;);
					
					with(BcOrderItemXA)
					{
						if ((OrderSubType == &quot;&quot; || OrderSubType==MNPICCIDStr ) &amp;&amp; isSim==&quot;Y&quot;)
						{
						  var stringSearchExp = &quot;[Object Id] = &apos;&quot;+OrderItemId+&quot;&apos; AND (([Name]=&apos;&quot;+strICCIDLOV+&quot;&apos; and [Text Value] is null) OR ([Name]=&apos;&quot;+strIMSILOV+&quot;&apos; and [Text Value] is null) OR ([Name]=&apos;&quot;+strPINLOV+&quot;&apos; and [Text Value] is null) OR ([Name]=&apos;&quot;+strPUKLOV+&quot;&apos; and [Text Value] is null) OR ([Name]=&apos;&quot;+strAlgorithmLOV+&quot;&apos; and [Text Value] is null) OR ([Name]=&apos;&quot;+strCardTypeLOV+&quot;&apos; and [Text Value] is null) OR ([Name]=&apos;&quot;+strSimCardProfileLOV+&quot;&apos; and [Text Value] is null) OR ([Name]=&apos;&quot;+strSecurityKeyLOV+&quot;&apos; and [Text Value] is null))&quot;;
						  XASrc = stringSearchExp;
						  queryMSISDN =&quot;Y&quot;;	  
						}
						else
						{
						  XASrc = &quot;[Object Id] = &apos;&quot;+OrderItemId+&quot;&apos; AND [Required] = &apos;Y&apos; AND ([Text Value] is null AND [Numeric Value] is null)&quot;;//venkata added [Numeric value] check for CR262
						}
						SetViewMode(AllView);
						ActivateField(&quot;Name&quot;);
						ActivateField(&quot;Required&quot;);
						ActivateField(&quot;Text Value&quot;);
						ClearToQuery();
						SetSearchExpr (XASrc);	//null check done		
						ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
						//Review Parent-Child Query:No changes as No link between BC’s, 16may2012 Udbhav IDC
						//Vaibhav 03/04/2012: Used FirstRecord instead of CountRecords
					    if(FirstRecord())
					    {
					      Output =&quot;KO&quot;;
						  Outputs.SetProperty(&quot;Result&quot;,Output);
						  Outputs.SetProperty(&quot;queryMSISDN&quot;,queryMSISDN);
						  
						  //IBMRDAS-DEF23452-11/12/2017
						  var sReqParam = GetFieldValue(&quot;Name&quot;);
						  var iRecords = NextRecord();
						  
						  while (iRecords)
						  {
						  	sReqParam = sReqParam + &quot;, &quot; + GetFieldValue(&quot;Name&quot;);
						  	iRecords = NextRecord(); //IBMRDAS-DEF24860
						  }
						  
						  Outputs.SetProperty(&quot;RequiredNames&quot;, sReqParam);
						  //IBMRDAS-DEF23452-11/12/2017
						  
						  return(CancelOperation);
					    }
					    else
						{
						  Output =&quot;OK&quot;;
						  Outputs.SetProperty(&quot;Result&quot;,Output);
						  Outputs.SetProperty(&quot;queryMSISDN&quot;,queryMSISDN);
						}
					}
					booRecordExist = NextRecord();	
				}
			}
			else
			{
				Output =&quot;KO&quot;;
				Outputs.SetProperty(&quot;Result&quot;,Output);  
			}		
		}
	}	
	finally
	{
	 	BcOrderEntryLI 		= null;
	 	BcOrderItemXA		= null;
	 	BoOrderEntry 		= null;
	 	booRecordExist		= null;
	 	inProp 	= null;
		outProp = null;
		BS 		= null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="7"
			   UPDATED="01/02/2018 13:33:47"
			   UPDATED_BY="IBM_RCATITA"
			   CREATED="01/07/2010 12:11:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrders"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrders (Inputs, Outputs)
{
	try
	{	
		var	AssetId = Inputs.GetProperty(&quot;AssetId&quot;);
		//VFTK Junaid 20120520 - Added for Oracle Review 15
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;AssetId&quot;, AssetId); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End
		var	SuspDate = Inputs.GetProperty(&quot;SuspendDate&quot;);
		var	ResDate = Inputs.GetProperty(&quot;ResumeDate&quot;);	
		var	orderSubType = Inputs.GetProperty(&quot;OrderSubType&quot;); //&quot;Disconnect&quot;
		var orderType = Inputs.GetProperty(&quot;Order Type&quot;);
		var OrderReason = Inputs.GetProperty(&quot;OrderSuspendReason&quot;); //TC#5524
		
		var psInputs  : PropertySet = TheApplication().NewPropertySet();
		var psOutput  : PropertySet = TheApplication().NewPropertySet();
		
		if (orderSubType == &quot;&quot;)
		{	
			psInputs.SetProperty(&quot;Val&quot;, orderType);
			psInputs.SetProperty(&quot;LOV&quot;, &quot;FS_ORDER_TYPE&quot;);
		}
		else
		{	
			psInputs.SetProperty(&quot;Val&quot;, orderSubType);
			psInputs.SetProperty(&quot;LOV&quot;, &quot;ORDER_SUB_TYPE&quot;);
		}
		
	    LookupName(psInputs, psOutput);
	   	var subTypeLic  = psOutput.GetProperty(&quot;Name&quot;);
	   	var strActor 	= &quot;&quot;;
		var oLovBO 	 	= TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var oLovBC 	 	= oLovBO.GetBusComp(&quot;List Of Values&quot;);
		
		if(subTypeLic != &quot;&quot; &amp;&amp; subTypeLic != null &amp;&amp; subTypeLic != &quot;null&quot;)
		{
			with (oLovBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;High&quot;);
				SetSearchSpec(&quot;Name&quot;,subTypeLic);
				SetSearchSpec(&quot;Type&quot;,&quot;VF_SUBTYPE_ACTOR&quot;);
				SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
					strActor = GetFieldValue(&quot;High&quot;);
			}
		}	
	   	
		var AssetBO   : BusObject 	=  TheApplication().GetBusObject(&quot;Asset Management&quot;); 
		var AssetItemBC  : BusComp 	=  AssetBO.GetBusComp(&quot;VF Asset Light&quot;);
	   	var price_list				= &quot;&quot;;
	   	var AccId					= &quot;&quot;;
	   	var statusAssetCode 		= &quot;&quot;;  
  		var strFraudActorValue 		= &quot;&quot;;
		var strCustomerActorValue 	= &quot;&quot;;
		var strCreditActorValue 	= &quot;&quot;;
		var strDunningActorValue 	= &quot;&quot;;
		var strDocumentActorValue 	= &quot;&quot;;
		
	   	with(AssetItemBC)
	   	{
	   		SetViewMode(AllView);
	   		ClearToQuery();
	  		ActivateField(&quot;VF Customer Status&quot;);
			ActivateField(&quot;VF Fraud Status&quot;);
			ActivateField(&quot;VF Credit Status&quot;);
			ActivateField(&quot;VF Dunning Status&quot;);
			ActivateField(&quot;VF Document Missing Status&quot;);
			ActivateField(&quot;Owner Account Id&quot;);
			ActivateField(&quot;Price List Id&quot;);
			SetSearchSpec (&quot;Id&quot;, AssetId);
	  		ExecuteQuery(ForwardOnly);
	  
	 	  	if (FirstRecord ())
		  	{
		  		price_list 				= GetFieldValue(&quot;Price List Id&quot;);
		  		AccId 					= GetFieldValue(&quot;Owner Account Id&quot;);
		  		//statusAssetCode = GetFieldValue(&quot;VF Credit Status&quot;)+GetFieldValue(&quot;VF Fraud Status&quot;)+GetFieldValue(&quot;VF Customer Status&quot;)+GetFieldValue(&quot;VF Dunning Status&quot;);
		  		strFraudActorValue 		= GetFieldValue(&quot;VF Fraud Status&quot;);
				strCustomerActorValue 	= GetFieldValue(&quot;VF Customer Status&quot;);
				strCreditActorValue 	= GetFieldValue(&quot;VF Credit Status&quot;);
				strDunningActorValue 	= GetFieldValue(&quot;VF Dunning Status&quot;);
				strDocumentActorValue 	= GetFieldValue(&quot;VF Document Missing Status&quot;);
		  	}
	  	}
		//TC#5524
		
	
		
		if (OrderReason != null &amp;&amp; OrderReason != &quot;&quot;)
		{
			//var OrderReasonLIC = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,OrderReason);
			//strCustomerActorValue = &quot;208&quot;;
			strCustomerActorValue = OrderReason;
		}
		//TC#5524
	  	
		var boParameters : BusObject 	= TheApplication().GetBusObject (&quot;ACS NI Parameter&quot;);
		var BcParameter : BusComp 		= boParameters.GetBusComp (&quot;ACS NI Parameter&quot;);
		
		with(BcParameter)
		{
			SetViewMode(AllView);
			ClearToQuery();
			//var strFunction = &quot;VF Reason&quot;;
			//var expr = &quot;[Function] = &apos;&quot;+strFunction+&quot;&apos; AND [Name] = &apos;&quot;+statusAssetCode+&quot;&apos; AND [Condition2] = &apos;&quot;+subTypeLic+&quot;&apos;&quot;;
			var sExpr = &quot;[Function] = &apos;VF Reason&apos;&quot;;
		
			if (strActor == &quot;&quot;)
				sExpr = sExpr + &quot; AND [Condition2] = &apos;-&apos;&quot;;
			else if (strActor == &quot;Fraud&quot;)
				sExpr = sExpr + &quot; AND [Condition4] = &apos;&quot; + strFraudActorValue + &quot;&apos; AND [Condition2] = &apos;&quot; + subTypeLic + &quot;&apos;&quot;;
			else if (strActor == &quot;Customer&quot;)
				sExpr = sExpr + &quot; AND [Condition4] = &apos;&quot; + strCustomerActorValue + &quot;&apos; AND [Condition2] = &apos;&quot; + subTypeLic + &quot;&apos;&quot;;
			else if (strActor == &quot;Credit&quot;)
				sExpr = sExpr + &quot; AND [Condition4] = &apos;&quot; + strCreditActorValue + &quot;&apos; AND [Condition2] = &apos;&quot; + subTypeLic + &quot;&apos;&quot;;
			else if (strActor == &quot;Dunning&quot;)
				sExpr = sExpr + &quot; AND [Condition4] = &apos;&quot; + strDunningActorValue + &quot;&apos; AND [Condition2] = &apos;&quot; + subTypeLic + &quot;&apos;&quot;;
			else if (strActor == &quot;Missing Document&quot;)
				sExpr = sExpr + &quot; AND [Condition4] = &apos;&quot; + strDocumentActorValue + &quot;&apos; AND [Condition2] = &apos;&quot; + subTypeLic + &quot;&apos;&quot;;
			else
				sExpr = sExpr + &quot; AND [Condition2] = &apos;&quot; + subTypeLic + &quot;&apos;&quot;;
			
			//VFTK Junaid 20120520 - Scripting 15 not needed as for VF Reason function with null values no record is returned
		    SetSearchExpr(sExpr);
		   	ExecuteQuery(ForwardOnly);
		
			if(!FirstRecord ())	
			{
			    Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
				Outputs.SetProperty(&quot;PriceList&quot;,&quot;&quot;);
				Outputs.SetProperty(&quot;AccountId&quot;,&quot;&quot;); 
			}
			else
		    {
			   	Outputs.SetProperty(&quot;Result&quot;,&quot;OK&quot;);
				Outputs.SetProperty(&quot;PriceList&quot;,price_list); //previously empty: inserted variable for defect PROD00027089 
				Outputs.SetProperty(&quot;AccountId&quot;,AccId); //previously empty: inserted variable for defect PROD00027089
			}
		}
		return (CancelOperation);
	}
	catch(e)
	{		
		Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
		Outputs.SetProperty(&quot;PriceList&quot;,&quot;&quot;);
		Outputs.SetProperty(&quot;AccountId&quot;,&quot;&quot;); 
	}	
	finally
	{
		oLovBC 		= null;
		oLovBO 		= null;
		AssetItemBC	= null;
		AssetBO		= null;
		BcParameter	= null;
		boParameters= null;
		psInputs  	= null;
		psOutput  	= null;
		inProp 		= null;
		outProp 	= null;
		BS 			= null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="04/02/2015 14:11:43"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateAsset(Inputs, Outputs)
{
 	TheApplication().Trace (&quot;ACS :: ACS Order Management :: CreateAsset :: Starting&quot;);
 	try
	{
		var bsWorkflowProcess 	: Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var boOrderEntry 		:BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderEntryItems 	:BusComp	= boOrderEntry.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var AssetBO				:BusObject	= TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var AssetBC				:BusComp	= AssetBO.GetBusComp(&quot;Asset Mgmt - Asset&quot;);

		var strSuspVoluntary = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;116&quot;);
		var resumeActionCode = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Resume&quot;);
		var psInputs 	:PropertySet	= TheApplication().NewPropertySet();
		var psOutputs 	:PropertySet	= TheApplication().NewPropertySet();

		var	OrderId 		= Inputs.GetProperty(&quot;OrderId&quot;);
		var SkipAgreement 	= Inputs.GetProperty(&quot;SkipAgreement&quot;);
		var strAsset 		= null;
		var strOrderHeader 	= null;
		var strOrderRootId 	= null;
		var orderSubType 	= null;
		var orderReason 	= null;
		var actionCd 		= null;
		var booRecordExists = null;
      	var sysdatestring 	= null;
      	Clib.strftime(sysdatestring, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));

		InstallProduct(OrderId);
     	bcOrderEntryItems.ClearToQuery();
		bcOrderEntryItems.ActivateField(&quot;IsRootItem&quot;);
		bcOrderEntryItems.ActivateField(&quot;BarDate&quot;);
		bcOrderEntryItems.ActivateField(&quot;BarReason&quot;);
		bcOrderEntryItems.ActivateField(&quot;VF Order Header Reason&quot;);
		bcOrderEntryItems.ActivateField(&quot;Completed Date&quot;);
		bcOrderEntryItems.ActivateField(&quot;Skip Agreement&quot;);
		//Scripting 15 null check Added 8may2012 Udbhav IDC
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		//End
		
		bcOrderEntryItems.SetSearchSpec(&quot;Order Header Id&quot;,OrderId);
		//Review Parent-Child Query: The query is only for one BC in BO,query cannot be removed 8may2012 Udbhav IDC VFTK	
		bcOrderEntryItems.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
		booRecordExists = bcOrderEntryItems.FirstRecord ();
		while (booRecordExists)
		{
			if ( bcOrderEntryItems.GetFieldValue(&quot;IsRootItem&quot;) == &apos;Y&apos; )
			{
				strAsset = bcOrderEntryItems.GetFieldValue(&quot;Asset Integration Id&quot;);
				strOrderHeader = bcOrderEntryItems.GetFieldValue(&quot;Order Header Id&quot;);
				strOrderRootId = bcOrderEntryItems.GetFieldValue(&quot;Root Order Item Id&quot;);
				// CR171...
				orderSubType = bcOrderEntryItems.GetFieldValue(&quot;Order Sub Type&quot;);
				orderReason = bcOrderEntryItems.GetFieldValue(&quot;VF Order Header Reason&quot;);
				actionCd = bcOrderEntryItems.GetFieldValue(&quot;Action Code&quot;);

				if( orderSubType == strSuspVoluntary // &quot;Suspension-Voluntary&quot; order
				&amp;&amp; orderReason == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1421&quot;) ) // ...with &quot;Limited-Cancellation Request&quot; reason
				{	
					bcOrderEntryItems.SetFieldValue (&quot;BarReason&quot;, &quot;Cancellation&quot;);
					bcOrderEntryItems.SetFieldValue (&quot;BarDate&quot;, sysdatestring);		
				}
				if( actionCd == resumeActionCode &amp;&amp; strAsset != &quot;&quot; )
				{
					AssetBC.ClearToQuery();
					AssetBC.SetViewMode(AllView);
					AssetBC.ActivateField(&quot;BarDate&quot;);
					AssetBC.ActivateField(&quot;BarReason&quot;);
					// Review Input validation: Scripting 15 null check Added 7may2012 Udbhav IDC
					inProp = TheApplication().NewPropertySet();
					inProp.SetProperty(&quot;strAsset&quot;,strAsset); //Validation
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
					//End 
					
					AssetBC.SetSearchSpec(&quot;Integration Id&quot;, strAsset);
					//Review Parent-Child Query: The query is only for one BC in BO,query cannot be removed 8may2012 Udbhav IDC VFTK	
					AssetBC.ExecuteQuery(ForwardOnly);
					if ( AssetBC.FirstRecord()
					&amp;&amp; ( bcOrderEntryItems.GetFieldValue (&quot;BarDate&quot;) != &quot;&quot; || bcOrderEntryItems.GetFieldValue (&quot;BarReason&quot;) != &quot;&quot;) )
					{
						AssetBC.SetFieldValue(&quot;BarReason&quot;, &quot;&quot;);
						AssetBC.SetFieldValue(&quot;BarDate&quot;, &quot;&quot;);
						AssetBC.WriteRecord();
					}
				}// ...CR171
				bcOrderEntryItems.SetFieldValue(&quot;Completed Date&quot;,sysdatestring);
				bcOrderEntryItems.WriteRecord();
					
				psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VF SIS OM Apply Completed Service Order Line Item to Service Profile&quot;);
				psInputs.SetProperty(&quot;LastResponse&quot;, &quot;Y&quot;);
				psInputs.SetProperty(&quot;RootItemStatus&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Installed&quot;));
				psInputs.SetProperty(&quot;Asset Integration Id&quot;, strAsset);
				psInputs.SetProperty(&quot;Order Header Id&quot;, strOrderHeader);
				psInputs.SetProperty(&quot;Root Id&quot;, strOrderRootId);
				psInputs.SetProperty(&quot;Object Id&quot;, OrderId);				
				bsWorkflowProcess.InvokeMethod(&quot;RunProcess&quot;, psInputs, psOutputs);
			} //if IsRootItem
			booRecordExists =  bcOrderEntryItems.NextRecord();
		} //loop on order line item
	}
	finally
	{
		AssetBC = null;
		AssetBO = null;
		bsWorkflowProcess = null;
		bcOrderEntryItems = null;
		boOrderEntry = null;
		psInputs  	= null;
		psOutputs 	= null;
		inProp 		= null;
		outProp 	= null;
		BS 			= null;		
	}
}"
			   SEQUENCE="9"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:15:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetActor"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetActor (OrderSubTypeLIC)
{
	try
	{		  	
		var strActor				= &quot;&quot;;
		var oLovBO : BusObject		= TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var oLovBC : BusComp		= oLovBO.GetBusComp(&quot;List Of Values&quot;);
		with (oLovBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;High&quot;);
			SetSearchExpr(&quot;[Type]=&apos;VF_SUBTYPE_ACTOR&apos; AND [Name] = &apos;&quot;+OrderSubTypeLIC+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strActor = GetFieldValue(&quot;High&quot;);
			}
		}
		return(strActor);
	}
	finally
	{
		oLovBC = null;
		oLovBO = null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="04/07/2013 15:05:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="HandleMultiplePendingOrders"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function HandleMultiplePendingOrders (Inputs, Outputs)
{
	/************************************************************************************
	* ACS AD 07-Mar-07 : Created                                                        *
	* Description      : The script will update the current orders line items to status *
	*                    In-Transit and also update the other orders related to the     *
	*                    asset to Cancelled. [DEACTIVATED FROM METHOD]                  *
	************************************************************************************/
	try
	{
		var strOrderId            = Inputs.GetProperty (&quot;Order Id&quot;);
		var strOrderSearchExpr    = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strItemSearchExpr     = &quot;&quot;;
		var strAssetIntegrationId = &quot;&quot;;
		var strLineItemStatus     = &quot;&quot;;
		var strUpdateOrderId      = &quot;&quot;;
		
		var booLineItemExists;
		var booSimpleLineItemsExists;
		
		var boOrderEntry : BusObject = TheApplication ().GetBusObject (&quot;Order Entry&quot;);
		var bcOrderEntry : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		
		var boLineItems : BusObject = TheApplication ().GetBusObject (&quot;Order Entry - Line Items&quot;);
		var bcLineItems : BusComp = boLineItems.GetBusComp (&quot;Order Entry - Line Items (Simple)&quot;);
		
		var boOrderUpdate : BusObject = TheApplication ().GetBusObject (&quot;Order Entry (Web Service)&quot;);
		var bcOrderUpdate : BusComp = boOrderUpdate.GetBusComp (&quot;Order Entry - Orders (Simple)&quot;);
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		bcOrderEntry.ClearToQuery ();
		bcLineItems.ActivateField (&quot;Status&quot;);
		bcLineItems.ActivateField (&quot;Parent Order Item Id&quot;);
		bcLineItems.ActivateField (&quot;Asset Integration Id&quot;);//Scripting 31: Removed ExecuteQuery of child since there is link
		bcOrderEntry.SetViewMode (AllView);
		bcOrderEntry.SetSearchExpr (strOrderSearchExpr);
		bcOrderEntry.ExecuteQuery (ForwardOnly);
		
		if (bcOrderEntry.FirstRecord ())
		{
			booLineItemExists = bcLineItems.FirstRecord ();
			while (booLineItemExists)
			{
				bcLineItems.SetFieldValue (&quot;Status&quot;, &quot;In-transit&quot;);
				bcLineItems.WriteRecord ();
				
				if (bcLineItems.GetFieldValue (&quot;Id&quot;) == bcLineItems.GetFieldValue (&quot;Parent Order Item Id&quot;))
				{
					strAssetIntegrationId = bcLineItems.GetFieldValue (&quot;Asset Integration Id&quot;);
					
					strItemSearchExpr = &quot;[Asset Integration Id] = &apos;&quot;+strAssetIntegrationId+&quot;&apos;&quot;;
					
					bcLineItems.ClearToQuery ();
					bcLineItems.SetViewMode (AllView);
					bcLineItems.ActivateField (&quot;Status&quot;);
					bcLineItems.ActivateField (&quot;Order Header Id&quot;);
					bcLineItems.SetSearchExpr (strItemSearchExpr);
					bcLineItems.ExecuteQuery (ForwardOnly);
					
					booSimpleLineItemsExists = bcLineItems.FirstRecord ();
					
					while (booSimpleLineItemsExists)
					{
						strLineItemStatus = bcLineItems.GetFieldValue (&quot;Status&quot;);
						
						if (strLineItemStatus == &quot;Pending&quot; || strLineItemStatus.length == 0)
						{
							strUpdateOrderId = bcLineItems.GetFieldValue (&quot;Order Header Id&quot;);
							
							bcOrderUpdate.ClearToQuery ();
							bcOrderUpdate.SetViewMode (AllView);
							bcOrderUpdate.ActivateField (&quot;Status&quot;);
							bcOrderUpdate.SetSearchExpr ();
							bcOrderUpdate.ExecuteQuery(ForwardOnly);
							
							if (bcOrderUpdate.FirstRecord ())
							{
								bcOrderUpdate.SetFieldValue (&quot;Status&quot;, &quot;Cancelled&quot;);
								bcOrderUpdate.WriteRecord ();
							}
						}
						
						booSimpleLineItemsExists = bcLineItems.NextRecord ();
					}
				}
				booLineItemExists = bcLineItems.NextRecord ();
			}
		}
	}
	finally
	{
		bcLineItems 	= null;
		bcOrderEntry 	= null;
		boOrderEntry 	= null;	
		bcLineItems 	= null;
		boLineItems 	= null;	
		bcOrderUpdate 	= null;
		boOrderUpdate 	= null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InstallProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InstallProduct(OrderId)
{
	try
	{	
		var OrderBO : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);      
	    var OrderLIBC : BusComp = OrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
	    var Installed = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Installed&quot;);
	    var booRecExists = &quot;&quot;;
	    
		OrderLIBC.ClearToQuery();
		OrderLIBC.ActivateField(&quot;Order Header Id&quot;);
		OrderLIBC.ActivateField(&quot;Status&quot;);
		//Begin - Scripting 15 - Input validation 
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		OrderLIBC.SetSearchSpec(&quot;Order Header Id&quot;,OrderId);
		OrderLIBC.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
		
		booRecExists = OrderLIBC.FirstRecord();
		
		while (booRecExists)
		{		
			OrderLIBC.SetFieldValue(&quot;Status&quot;, Installed);
			OrderLIBC.WriteRecord();
			booRecExists = OrderLIBC.NextRecord();
		}
	}
	catch(e)
	{
		var dbg=e.errText;
		var err = e.toString();
		throw(e);
	}
	finally
	{
		OrderLIBC		=	null;
		OrderBO			=	null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="07/30/2010 09:15:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupName (Input , Output)
{
try
	{		  	
	  	var type = Input.GetProperty(&quot;LOV&quot;) ;
	  	var val = Input.GetProperty(&quot;Val&quot;) ;;
	  	var name = null;	  
	  	//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;type&quot;,type);
		inProp.SetProperty(&quot;val&quot;,val);	
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
	  	var strParameterSrcExpr = &quot;[Type] = &apos;&quot;+type+&quot;&apos;&quot;+ &quot; AND [Value] = &apos;&quot;+val+&quot;&apos;&quot;;
	  	var boHPOrderEntry : BusObject = TheApplication().GetBusObject (&quot;HP Order Entry&quot;);
		var bcLOV : BusComp = boHPOrderEntry.GetBusComp (&quot;List Of Values&quot;);

		bcLOV.ClearToQuery ();
		bcLOV.SetViewMode (AllView);
		bcLOV.ActivateField (&quot;Name&quot;);
		bcLOV.SetSearchExpr (strParameterSrcExpr);
		bcLOV.ExecuteQuery(ForwardOnly);
		
		if (bcLOV.FirstRecord ())
		{
			name = bcLOV.GetFieldValue (&quot;Name&quot;);
		} 	
		Output.SetProperty (&quot;Name&quot;, name);
	}
	finally
	{
		bcLOV = null;
		boHPOrderEntry = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="08/13/2010 08:25:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="MsgManage"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function MsgManage (stMethod, stCode, stMsg)
{
	try
	{
		var OBS     : Service = TheApplication().GetService(&quot;PLW Generic Message&quot;);
		var Inputs  : PropertySet = TheApplication().NewPropertySet();
		var Outputs : PropertySet = TheApplication().NewPropertySet();		
		Inputs.SetProperty(&quot;Code&quot;, stCode); 
		Inputs.SetProperty(&quot;sMsg&quot;, stMsg);      
		OBS.InvokeMethod(stMethod, Inputs, Outputs);
		var sRetVal = Outputs.GetProperty(&quot;sMsg&quot;);		
	}
	finally
	{
	OBS = null;
	Inputs = null;
	Outputs = null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="04/07/2013 15:05:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ResetAssetOrders"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ResetAssetOrders (Inputs,Outputs)
{
	try
	{
		var AssetIntegId = &quot;&quot;;
		AssetIntegId = Inputs.GetProperty(&quot;AssetIntegrationId&quot;);
		
	  	var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcOrder2 : BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcLineItem2 : BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcLineItem : BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items for IO HP&quot;);
		var ChangeMSISDN = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;102&quot;);
		var ChangeIMSI = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		var OrderId = &quot;&quot;;
		var RootLineItemId = &quot;&quot;;
		var OrderSubType = &quot;&quot;;
		var Outcome = &quot;OK&quot;;

		with(bcLineItem)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Asset Integration Id] = &apos;&quot;+AssetIntegId+&quot;&apos; AND ([Status] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Open&quot;)+&quot;&apos; OR [Status] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Failed&quot;)+&quot;&apos;)&quot;);// AND ([Order Sub Type]=&apos;&quot;+ChangeMSISDN+&quot;&apos; OR [Order Sub Type]=&apos;&quot;+ChangeIMSI+&quot;&apos;)&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				Outcome = &quot;KO&quot;;
			}
			else
			{
				SetViewMode(AllView);
				ClearToQuery();
				//[Status] &lt;&gt; &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;)+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;)+&quot;&apos;&quot;);
//TLG-5169		//SetSearchExpr(&quot;[Asset Integration Id] = &apos;&quot;+AssetIntegId+&quot;&apos; AND [Status] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;)+&quot;&apos;&quot;);
				SetSearchExpr(&quot;[Asset Integration Id] = &apos;&quot;+AssetIntegId+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;)+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				var MOExists = FirstRecord();
				while(MOExists)
				{
					OrderId = GetFieldValue(&quot;Order Header Id&quot;);
					bcOrder2.SetViewMode(AllView);
					bcOrder2.ClearToQuery();
//TLG-5169			bcOrder2.SetSearchExpr(&quot;[Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
					bcOrder2.SetSearchExpr(&quot;[Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Status] = &apos;&quot;+TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;)+&quot;&apos;&quot;);
					bcLineItem2.SetViewMode(AllView);
					bcLineItem2.ClearToQuery();
					bcLineItem2.SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;);
					bcOrder2.ExecuteQuery(ForwardOnly);
					if (bcOrder2.FirstRecord())
					{
						bcOrder2.SetFieldValue(&quot;Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;));
						bcOrder2.WriteRecord();
						var LIExist = bcLineItem2.FirstRecord();
						while (LIExist)
						{
							bcLineItem2.SetFieldValue(&quot;Status&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;));
							LIExist = bcLineItem2.NextRecord();
						}
					}
					MOExists = NextRecord();
				}
			}
		}
		Outputs.SetProperty(&quot;Result&quot;,Outcome);
	}
	finally
	{
		bcLineItem = null;
		bcLineItem2= null;
		bcOrder2 = null;
		boOrder = null;
	}
}"
			   SEQUENCE="15"
			   UPDATED="01/07/2014 08:06:28"
			   UPDATED_BY="SADMIN"
			   CREATED="10/28/2013 14:05:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SITransfer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SITransfer(Inputs, Outputs)
{
	try
	{
		var sDisConId = Inputs.GetProperty(&quot;Order Id&quot;); //Disconnect Order Id
		//VFTK Junaid 20120520 - Added for Oracle Review 15
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;sDisConId&quot;, sDisConId); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End
		var sAccId = Inputs.GetProperty(&quot;SI Account Id&quot;); //New Customer Account Id
		var strItemSrcExpr = &quot;&quot;;
		var sBillId = Inputs.GetProperty(&quot;SI Billing Account Id&quot;); //New Billing Account Id	
		var sOrderBO	: BusObject =	TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);//Order BO
		var sOrderBC 	: BusComp = sOrderBO.GetBusComp(&quot;Order Entry - Orders&quot;); //Order BC
		//BC &amp; BO Instance for Parent Order Line Items
		var sXOrderBO : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);//BO Instance for Parent Order Line Item --&gt; X Order Entry
		var sOrderLineItemBC : BusComp = sXOrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);//BC Instance of Parent Order Line Items --&gt; Order Entry - Line Items (Simple)	
		var sNewOrderLineItemsBC : BusComp = this.ActiveBusObject().GetBusComp(&quot;Order Entry - Line Items&quot;);	
		var sOrderId,sCount;
		var sOrderType =  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Add New Service&quot;);
		var sActionCode =  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);//attenzione!
		var sOrderTypeBC,sActionTypeBC : BusComp;
		//Added for MSISDN Transfer Toggle Applet
	
		with(sOrderBC)
		{
			SetViewMode(AllView); //3-AllView Mode
			ClearToQuery();
		    SetSearchSpec (&quot;Id&quot;, sDisConId);//Search for the Order 
		   	ExecuteQuery(ForwardOnly); 		
		   	if (FirstRecord())//Check for the &apos;Complete&apos; order and create supplement Order from original order.
		   	{
		       	NewRecord(NewAfterCopy);
		       	SetFieldValue(&quot;Parent Order Id&quot;,sDisConId);
				sOrderTypeBC=GetPicklistBusComp(&quot;Order Type&quot;);
				with(sOrderTypeBC)
				{
					SetViewMode(AllView); //3-AllView Mode
					ClearToQuery();
					ActivateField(&quot;Order Type&quot;);
					//VFTK Junaid 20120520 - Scripting 15 not needed as field value comes from a LOV
					SetSearchSpec(&quot;Order Type&quot;, sOrderType);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
						Pick();
				}
				sOrderTypeBC =null;
				SetFieldValue(&quot;Account Id&quot;,sAccId);
				SetFieldValue(&quot;Billing Account Id&quot;,sBillId);
				SetFieldValue(&quot;Order Sub Type&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;114&quot;));															
				SetFieldValue(&quot;SI Account Id&quot;,&quot;&quot;);
				SetFieldValue(&quot;SI Billing Account Id&quot;,&quot;&quot;);
				WriteRecord();
				sOrderId = GetFieldValue(&quot;Id&quot;);
	    	}
		}//End of with for sOrderBC
	
		//Query Line Items corresponding to Parent Order Id 
		with (sOrderLineItemBC)
		{
			//AM ACS. 31st Jan 2007. Moved the below code for getting Price list from while(B1rec)
			SetViewMode(AllView)     // 3 - For AllView Mode
			ClearToQuery();
			ActivateField(&quot;Item Price List Id&quot;);
			ActivateField(&quot;Service Id&quot;);
			ActivateField(&quot;Asset Integration Id&quot;);
			ActivateField(&quot;Line Number&quot;);
			SetSearchSpec(&quot;Order Header Id&quot;,sDisConId);
	   		ExecuteQuery(ForwardOnly) //Open the Recordset in Edit CursorMode
	   		
	   		if (FirstRecord ())
	   		{
	   			var AsstIngId    = GetFieldValue(&quot;Asset Integration Id&quot;);
	   		}
	   		
			var sPriceListId = &quot;&quot;;		
			SetViewMode(AllView)     // 3 - For AllView Mode
			ClearToQuery();
			ActivateField(&quot;Service Id&quot;);
			//VFTK Junaid 20120520 - Added for Oracle Review 15
			inProp = TheApplication().NewPropertySet();
			inProp.SetProperty(&quot;AsstIngId&quot;, AsstIngId); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
			//End
			strItemSrcExpr = &quot;[Asset Integration Id] = &apos;&quot;+AsstIngId+&quot;&apos; AND [Item Price List Id] IS NOT NULL&quot;;
			SetSearchExpr (strItemSrcExpr);
	   		ExecuteQuery(ForwardOnly);
			
	   		if (FirstRecord ())
	   		{
	   			sPriceListId = GetFieldValue(&quot;Item Price List Id&quot;);
	   		}
	   		
			SetViewMode(AllView)     // 3 - For AllView Mode
			ClearToQuery();
			ActivateField(&quot;Item Price List Id&quot;);
			ActivateField(&quot;Service Id&quot;);
			ActivateField(&quot;Asset Integration Id&quot;);
			SetSearchSpec(&quot;Order Header Id&quot;,sDisConId);
	   		ExecuteQuery(ForwardOnly) //Open the Recordset in Edit CursorMode
	
			var BlRec=FirstRecord();
				
			//Move through each record and get the Line Number, Price List and Event Source
			while(BlRec)
			{
				var sLineNum     = GetFieldValue(&quot;Line Number&quot;);
				var sEventSource = GetFieldValue(&quot;Service Id&quot;);
				var AsstIngId    = GetFieldValue(&quot;Asset Integration Id&quot;);
				
				//Query the Lines Items BC for the Newly created Order
				//Search for the Line Number as that of Parent Order and newly created Order Id
				with (sNewOrderLineItemsBC)
				{
					SetViewMode(AllView)     // 3 - For AllView Mode
					ActivateField(&quot;Item Price List Id&quot;);
					ActivateField(&quot;Service Id&quot;);
					ActivateField(&quot;Action Code&quot;);
					ActivateField(&quot;Asset Integration Id&quot;);
					ActivateField(&quot;Billing Account Id&quot;);
					//VFTK Junaid 20120520 - Scripting 15not needed as search expression cannot be null
					SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND  [Line Number] =&apos;&quot;+sLineNum+&quot;&apos;&quot;);
	    			ExecuteQuery(ForwardOnly) //Open the Recordset in Edit CursorMode
	
					//Update the Price List and Event Source for New Order Line Items
					if(FirstRecord())
					{
						SetFieldValue(&quot;Item Price List Id&quot;,sPriceListId);
						SetFieldValue(&quot;Service Id&quot;,sEventSource);
						SetFieldValue(&quot;Action Code&quot;,sActionCode);
						SetFieldValue(&quot;Asset Integration Id&quot;, GetFieldValue(&quot;Id&quot;));
						SetFieldValue(&quot;Billing Account Id&quot;,sBillId);
	
						WriteRecord();
					}
				}//End With of New Order Line Items
				BlRec = NextRecord();
			}//End of While Loop
		}//End With of Parent Order Line Item
	
		// ACS KP 05-May-06: Started Change :: Added to change the action code of the attributes to add
		// Added because the new order of the tranfer order is a copy of the disconnection order and 
		// has the action code as Disconnect instead of Add.
		
		// ACS KP 05-May-06: Create a new BO so that nothing else is affected
		var boOrder       : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrderItemXA  : BusComp = boOrder.GetBusComp(&quot;Order Item XA&quot;);
		var strOrderItemXASE = &quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos;&quot;;
		var booRecordExists;
		
		// ACS KP 05-May-06: Query for all attributes related to the order
		bcOrderItemXA.ClearToQuery();
		bcOrderItemXA.SetViewMode(AllView);
		bcOrderItemXA.ActivateField (&quot;Order Header Id&quot;);
		bcOrderItemXA.ActivateField (&quot;Action Code&quot;);
		bcOrderItemXA.SetSearchExpr (strOrderItemXASE);
		bcOrderItemXA.ExecuteQuery(ForwardOnly);	
		booRecordExists = bcOrderItemXA.FirstRecord();
		
		// ACS KP 05-May-06: Loop thought the attributes and update the Action Code to Add
		while (booRecordExists)
		{
			bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;, sActionCode);
			booRecordExists = bcOrderItemXA.NextRecord();
		}
		// ACS KP 05-May-06: Completed Change :: Added to change the action code of the attributes to add	
		//View Navigation: User Navigated to &quot;ACS CC Submit Order View&quot;
		//[SR] Modified the view: &quot;Order Entry - Line Items View (Sales)&quot;
		with(sOrderBC)
		{
			SetViewMode(AllView); //3 - AllView Mode 
			ClearToQuery();
			SetSearchSpec(&quot;Id&quot;,sOrderId );
			ExecuteQuery(ForwardOnly);
		}	
		TheApplication().GotoView(&quot;Order Entry - Line Items View (Sales)&quot;,sOrderBO);
	}
	finally
	{
		sNewOrderLineItemsBC= null;
		bcOrderItemXA    = null;
		sOrderTypeBC = null;
		sActionTypeBC=null;
		sOrderBC			= null;		
		sOrderLineItemBC	= null;
		sXOrderBO			= null;
		sOrderBO			= null;
		boOrder          = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="10/28/2013 14:05:25"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreCanInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreCanInvokeMethod (MethodName, &amp;CanInvoke)
{	
	switch (MethodName)
	{
		case &quot;CancelOrders&quot;:
			CanInvoke = &quot;True&quot;;
		break;
		
		case &quot;UpdateItemPriceList&quot;:
			CanInvoke = &quot;True&quot;;
		break;
		
		case &quot;CheckOrders&quot;:
			CanInvoke = &quot;True&quot;;
		break;
		case &quot;ActivateOrder&quot;:
			CanInvoke = &quot;True&quot;;
		break;
		case &quot;CheckLineItems&quot;:
			CanInvoke = &quot;True&quot;;
		break;
		case &quot;CheckOrderAttribute&quot;:
			CanInvoke = &quot;True&quot;;
		break;
		case &quot;CheckMSISDN_ICCID&quot;:
			CanInvoke = &quot;True&quot;;
		break;
			case &quot;CreateAsset&quot;:
			CanInvoke = &quot;True&quot;;
		break;
		default:
			break;
	}
	return (ContinueOperation);
}"
			   SEQUENCE="27"
			   UPDATED="12/22/2014 02:08:18"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME: 		 ACS Order Management
	DESCRIPTION: Call the Method related Order Management.
	INPUTS:		 
	RETURNS:	
	AUTHOR:		 
	DATE CREATED:2/16/2006 	
	UPDATES:	 
	**************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName)
	{
		case &quot;HandleMultiplePendingOrders&quot;:
			HandleMultiplePendingOrders (Inputs, Outputs);
			return (CancelOperation);
			break;
	
		case &quot;CreateAsset&quot;:
			CreateAsset(Inputs, Outputs);
			return (CancelOperation);
			break;
		
		case &quot;CancelOrders&quot;:
			return (CancelOrders (Inputs, Outputs));
			break;
				
		case &quot;UpdateItemPriceList&quot;:
			UpdateItemPriceList (Inputs, Outputs);
			return (CancelOperation);
			break;
			
		case &quot;CheckOrders&quot;:
			return (CheckOrders (Inputs, Outputs));
			return (CancelOperation);
			break;
			
		case &quot;CheckLineItems&quot;:
			return (CheckLineItems (Inputs, Outputs));
			return (CancelOperation);
			break;		
			
		case &quot;CheckOrderAttribute&quot;:
			return (CheckOrderAttribute (Inputs, Outputs));	
			return (CancelOperation);
			break;
			
		case &quot;CheckMSISDN_ICCID&quot;:
		return (CheckMSISDN_ICCID (Inputs, Outputs));
		break;
// Code Added For Supplement Order – Girish.
		case &quot;Supplement Order&quot;:
            SupplementOrder (Inputs, Outputs);
            return (CancelOperation);
        break;
        
// Code Added For Cancel Order
		case &quot;CancelCurOrder&quot;:
            CancelCurOrder (Inputs, Outputs);
            return (CancelOperation);
        break;
        
//Code Add for Move Order for Order Updation
		
		case &quot;UpdateAsset&quot;:
			UpdateAsset(Inputs, Outputs);
			return(CancelOperation);
		break;		
		
 //Code Add for Custom Transfer Order
		case &quot;SITransfer&quot;:
			SITransfer(Inputs, Outputs);
			return (CancelOperation);
		break;
	
// Code Added For Setting Order status and active Flag - Girish.
		case &quot;SetOrderActiveFlag&quot;:
			SetOrderActiveFlag (Inputs,Outputs);
			TheApplication().Trace (&quot;ACS :: ACS Order Management :: Service_PreInvokeMethod :: Ending&quot;);
			return (CancelOperation);
		break;
		
		// AM ACS. 08th August. Added for Asset Status Update.
		case &quot;UpdateAssetStatus&quot;:
			UpdateAssetStatus (Inputs, Outputs);
			return (CancelOperation);
			break;
		//VF - TK popolutate price list on all items
		case &quot;UpdateItemPriceListNew&quot;:
			UpdateItemPriceListNew(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;BackDateEnableLI&quot;:
			BackDateEnableLI(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;AlignActorStatus&quot;:
			AlignActorStatus(Inputs, Outputs);
			return(CancelOperation);
			break;	
		case &quot;SetOwnerAccountId&quot;:
			SetOwnerAccountId(Inputs, Outputs);
			return(CancelOperation);
			break;					
		case &quot;ResetAssetOrders&quot;:
			ResetAssetOrders(Inputs, Outputs);
			return(CancelOperation);
			break;

		case &quot;UpdateItemBillingAccount&quot;:
			UpdateItemBillingAccount(Inputs,Outputs);
			return(CancelOperation);
			break;
			
		case &quot;UpdateRootItemActionCode&quot;:
			UpdateRootItemActionCode(Inputs,Outputs);
			return(CancelOperation);
			break;

		default:
		return (CancelOperation);
			break;			
	}	 
	return (ContinueOperation);
}"
			   SEQUENCE="28"
			   UPDATED="12/22/2014 02:08:18"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOrderActiveFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetOrderActiveFlag(Inputs,Outputs)
{
	/**************************************************
	 NAME:    Supplement Order - Update Order Active Flag
	 DESCRIPTION: When the EAI Send the response for either Supplement or Orig. Order 
				  this BS will set the Active Flag to &apos;N&apos; to corresponding co-related order.
	 INPUTS:  Order Id
	 RETURNS: 
	 AUTHOR:  Girish.V.N
	 DATE CREATED:4/11/2006  
	 UPDATES: Flag set to N only for orders with status &quot;Rejected&quot;
	 UPDATED DATE: 2006/10/27
	 UPDATE BY: Tomas Kvasnica [DEACTIVATED FROM METHOD]  
	 **************************************************/	
	try
	{
		var OrderBO : BusObject = TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var OrderSimpleBC : BusComp = OrderBO.GetBusComp(&quot;Order Entry - Orders (Simple)&quot;); //To update Statsus Field.
		
		if (Inputs.GetProperty(&quot;OrderId&quot;)!=&quot;&quot;)
		{
				with (OrderSimpleBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Status&quot;);
					ActivateField(&quot;Active&quot;);
					SetSearchSpec(&quot;Id&quot;,Inputs.GetProperty(&quot;OrderId&quot;));
					ExecuteQuery(ForwardOnly);//VFTK Venkata 11052012 : No changes for OracleScript 15 review since Null Check alredy exists
					//Response Received is for Supplement or Cancel Order Inactive Orig. Order.			
					if (FirstRecord())
					{
						if (GetFieldValue(&quot;Status&quot;)==&quot;Rejected&quot;)
						{
								SetFieldValue(&quot;Active&quot;,&quot;N&quot;);
								WriteRecord();
						}//End if status = Rejected
					}
				} //end with (OrderSimpleBC)
		}
		OrderSimpleBC.DeactivateFields();
	}
	finally
	{
		OrderSimpleBC = null;
		OrderBO = null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="10/28/2013 14:05:25"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOwnerAccountId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetOwnerAccountId(Inputs,Outputs)
{
	try{

	var groupsBO : BusObject = TheApplication().GetBusObject(&quot;VF Groups BO&quot;);
	var groupsAccountBC : BusComp = groupsBO.GetBusComp(&quot;VF Group Products BC&quot;);
	var accountBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
	var accountBC : BusComp = accountBO.GetBusComp(&quot;HP Submit - Account&quot;);
	var strAcquired = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_STATUS&quot;, &quot;100&quot;); 
	var groupID = Inputs.GetProperty(&quot;IntegrationId&quot;);
	var accntId = &quot;&quot;;
	groupsAccountBC.ClearToQuery();
	groupsAccountBC.SetViewMode(AllView);
	groupsAccountBC.SetSearchSpec(&quot;VF VPN Group Id&quot;, groupID);
	groupsAccountBC.ExecuteQuery(ForwardOnly);
	
	if (groupsAccountBC.FirstRecord()){
		accntId = groupsAccountBC.GetFieldValue(&quot;VF Account Id&quot;);
	}else
	{
	
	accountBC.ClearToQuery();
	accountBC.SetViewMode(AllView);
	accountBC.SetSearchSpec(&quot;Account Status Code&quot;, strAcquired);
	accountBC.ExecuteQuery(ForwardOnly);
	
		if (accountBC.FirstRecord())
		accntId = accountBC.GetFieldValue(&quot;Id&quot;);
	}
	
//	this.BusComp().SetFieldValue(&quot;VF Owner Account Id&quot;, accntId);
//	this.BusComp().WriteRecord();
	
	TheApplication().SetProfileAttr(&quot;GroupAccountNone&quot;,&quot;Y&quot;);
	Outputs.SetProperty(&quot;AccountId&quot;,accntId)
	}
	finally{

		accountBC  = null;
		groupsAccountBC  = null;
		groupsBO = null;
		accountBO  = null;
	}

}"
			   SEQUENCE="17"
			   UPDATED="10/28/2013 14:05:25"
			   UPDATED_BY="SADMIN"
			   CREATED="05/31/2013 11:26:16"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SupplementOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SupplementOrder(Inputs,Outputs)
{/**[DEACTIVATED FROM METHOD]  */
 try
 { 
	// Get the Instance of the Order BC and OrderLineItem BC
	 var OrderBC : BusComp = TheApplication().ActiveBusObject().GetBusComp(&quot;Order Entry - Orders&quot;);//Parent Order 
	 if(TheApplication().ActiveBusObject()==&quot;Order Entry (Sales)&quot;)
	 {
	 var NewOrderBO : BusObject =TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);//BO Instance for New Order Line Item
	 var NewOrderLineItemsBC : BusComp = NewOrderBO.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);//BC Instance of New Order Line Items
	 var XOrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);//BO Instance for Parent Order Line Item
	 var OrderLineItemsBC : BusComp = XOrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);//BC Instance of Parent Order Line Items
	 var NewOrderId,ParOrderId,strOrderPriceList;
	 var strSupplOrder = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_SUB_TYPE&quot;, &quot;Supplement Order&quot;);
	 //Original Order Id
	 ParOrderId=Inputs.GetProperty(&quot;OrderId&quot;);
	 
	 //Query for the selected order
	 with (OrderBC)
	 {
	 	 //Check for the &apos;Open&apos; order and create supplement Order from original order.
	  	if (FirstRecord() &amp;&amp; GetFieldValue(&quot;Status&quot;)==&quot;Open&quot;)
	  	{
	  	 //To fill in price list for order
	  	 strOrderPriceList = GetFieldValue(&quot;Price List Id&quot;);
	  	 //To Identify a supplement order is being created for this &apos;Open&apos; order. 
	  	 NewRecord(NewAfterCopy);
	  	 SetFieldValue(&quot;Order Sub Type&quot;,strSupplOrder);
	  	 SetFieldValue(&quot;Parent Order Id&quot;,Inputs.GetProperty(&quot;OrderId&quot;));
		 SetFieldValue(&quot;Price List Id&quot;, strOrderPriceList);
	  	 NewOrderId=GetFieldValue(&quot;Id&quot;)
	  	 WriteRecord();
	  	}
	 }
	 
	 //Query Line Items corresponding to Parent Order Id 
	 with (OrderLineItemsBC)
	 {
	  SetViewMode(AllView)     // 3 - For AllView Mode
	  ClearToQuery();
	  ActivateField(&quot;Item Price List Id&quot;);
	  ActivateField(&quot;Service Id&quot;);
	  ActivateField(&quot;Contact Id&quot;);
	  ActivateField(&quot;Line Number&quot;);
	  SetSearchSpec(&quot;Order Header Id&quot;,ParOrderId);
	  ExecuteQuery(ForwardOnly) 
	 
	  var BlRec=FirstRecord();
	  
	  //Move through each record and get the Line Number, Price List and Event Source
	  while(BlRec)
	  {
	   var sLineNum = GetFieldValue(&quot;Line Number&quot;);
	   var sPriceListId=GetFieldValue(&quot;Item Price List Id&quot;);
	   var sEventSource=GetFieldValue(&quot;Service Id&quot;);
	   var sContactLastName=GetFieldValue(&quot;Contact Id&quot;);
	 
	   //Query the Lines Items BC for the Newly created Order
	   //Search for the Line Number as that of Parent Order and newly created Order Id
	   		with (NewOrderLineItemsBC)
	   		{
	    	SetViewMode(AllView)     // 3 - For AllView Mode
	   		ActivateField(&quot;Item Price List Id&quot;);
	    	ActivateField(&quot;Service Id&quot;);
	    	ActivateField(&quot;Contact Id&quot;);
	    	SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+NewOrderId+&quot;&apos; AND  [Line Number] =&apos;&quot;+sLineNum+&quot;&apos;&quot;);
	    	ExecuteQuery(ForwardOnly) 
	 
	    		//Update the Price List and Event Source for New Order Line Items
	    		if(FirstRecord())
	   			{
	     		SetFieldValue(&quot;Item Price List Id&quot;,sPriceListId);
	     		SetFieldValue(&quot;Service Id&quot;,sEventSource);
	     		SetFieldValue(&quot;Contact Id&quot;,sContactLastName);
	     		WriteRecord();
	   			}
	   		}//End With of New Order Line Items
	   BlRec = NextRecord();
	  }//End of While Loop
	 }//End With of Parent Order Line Item
	 
	 //View Navigation
	 	var sNewBC = NewOrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
	 	var sNewLIBC = NewOrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
	  
		with(sNewBC)
		{
			ClearToQuery();
			SetSearchSpec(&quot;Id&quot;, NewOrderId );
			ExecuteQuery(ForwardBackward);
		}	
	 	with(sNewLIBC)
		{
			ClearToQuery();
			ExecuteQuery(ForwardBackward);
		}
	 
	 	TheApplication().GotoView(&quot;Order Entry - Line Items View (Sales)&quot;,NewOrderBO);
	   }//if condition for checking bo name
 	}
 	finally
 	{
		 OrderBC = null;
		 NewOrderLineItemsBC=null;
		 NewOrderBO=null;
		 OrderLineItemsBC = null;
		 XOrderBO = null;
		 sNewBC	= null;
		 sNewLIBC = null;
 	}
 }"
			   SEQUENCE="19"
			   UPDATED="10/28/2013 14:05:25"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAsset(Inputs, Outputs)			
{
 	try
 	{
		var sOrderHeaderId = Inputs.GetProperty(&quot;Order Id&quot;);
		var sOrderLineItem = Inputs.GetProperty(&quot;Line Item Id&quot;);
		//VFTK Junaid 20120520 - Added for Oracle Review 15
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;sOrderHeaderId&quot;, sOrderHeaderId); 
		inProp.SetProperty(&quot;sOrderLineItem&quot;, sOrderLineItem);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End
		
		var smOrderBO	: BusObject =	TheApplication().GetBusObject(&quot;X Order Entry&quot;);//Order BO
		var smOrderBC : BusComp = smOrderBO.GetBusComp(&quot;Order Entry - Orders&quot;); //Order BC
		var smOrderLineItemBC : BusComp = smOrderBO.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;); //Order Line Item BC
		var smOrderAssetBO : BusObject	=	TheApplication().GetBusObject(&quot;Order Entry&quot;);//Order BO
		var smAssetBc : BusComp = smOrderAssetBO.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;); //Asset BC
		var smOrderStatus =  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);
			
		with(smOrderBC)
		{
			SetViewMode(AllView); //3-AllView Mode
			ClearToQuery();
			//Search for the Order 
			ActivateField(&quot;Status&quot;); 
		    SetSearchSpec (&quot;Id&quot;,sOrderHeaderId);//VFTK Venkata 11052012 : No changes for OracleScript 15 review since sOrderHeaderId &amp; sOrderLineItem is a required input	
		    //Venkata 14/05/2012: Moved child query as per oracle review31-Start */
		    smOrderLineItemBC.SetViewMode(AllView); //3-AllView Mode
			smOrderLineItemBC.ClearToQuery();
			smOrderLineItemBC.ActivateField(&quot;Service Account Id&quot;);
			smOrderLineItemBC.ActivateField(&quot;Asset Integration Id&quot;);
			smOrderLineItemBC.SetSearchSpec (&quot;Id&quot;,sOrderLineItem);//Search for the Order 
		 	//Venkata 14/05/2012: Moved child query as per oracle review31-End */
		 	ExecuteQuery(ForwardOnly);	
		 			
			with(smOrderLineItemBC)
			{
	   	    	if(FirstRecord())
	   	    	{
					var smLineNum = GetFieldValue(&quot;Line Number&quot;);
					var smSerAccId=GetFieldValue(&quot;Service Account Id&quot;);
					var smAssetIntegId = GetFieldValue(&quot;Asset Integration Id&quot;);
					//VFTK Junaid 20120520 - Added for Oracle Review 15
					inProp = TheApplication().NewPropertySet();
					inProp.SetProperty(&quot;smAssetIntegId&quot;, smAssetIntegId); 
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
					//End
					//var cc = CountRecords(); //Vaibhav 03/04/2012: Variable not used in the script
						//Query the Asset BC based on the Asset Inegration id in line item leavel
						with (smAssetBc)
						{
							SetViewMode(AllView);    // 3 - For AllView Mode
							ActivateField(&quot;Original Order Id&quot;);	
							ActivateField(&quot;Service Account Id&quot;);
							ActivateField(&quot;Status&quot;);	 
							ActivateField(&quot;VF Originating Order Line Item Id&quot;); //GEN_REQ_205											
							SetSearchSpec(&quot;Integration Id&quot;,smAssetIntegId);
			    			ExecuteQuery(ForwardOnly) 
	
							//Update the Price List and Event Source for New Order Line Items
							if(FirstRecord())
							{
                             	//BEGIN GEN_REQ_205
                             	if(GetFieldValue(&quot;VF Originating Order Line Item Id&quot;) == &quot;&quot;){
                               		SetFieldValue(&quot;VF Originating Order Line Item Id&quot;, sOrderLineItem);  
                               	}
                      			//END GEN_REQ_205

								SetFieldValue(&quot;Status&quot;,&quot;Active&quot;);
								SetFieldValue(&quot;Service Account Id&quot;,smSerAccId);
								SetFieldValue(&quot;Original Order Id&quot;,sOrderHeaderId);							
								WriteRecord();
							}
						}//End of With  Asset
	   	    	}//End of if
			}//End of With Order Line Items
		}//End of With Order BC
	}
	finally
	{
		smAssetBc=null;
		smOrderLineItemBC=null;
		smOrderBC=null;
		smOrderBO=null;	
		smOrderAssetBO=null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="10/28/2013 14:05:25"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateAssetStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAssetStatus (Inputs, Outputs)
{
	try
	{
		var boAsset : BusObject = TheApplication ().GetBusObject (&quot;Asset Management&quot;);
		var bcAsset : BusComp = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var strObjectId   = Inputs.GetProperty (&quot;Object Id&quot;);
		var strInStatus   = Inputs.GetProperty (&quot;Status&quot;);
		var strSearchExpr = &quot;[Root Asset Id] = &apos;&quot;+strObjectId+&quot;&apos;&quot;;
		var strStatus     = TheApplication ().InvokeMethod (&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, strInStatus);
		var strActStatus  = TheApplication ().InvokeMethod (&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;01&quot;);
		var booRecordExists;
		
		bcAsset.ClearToQuery ();
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strObjectId&quot;,strObjectId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15		
		bcAsset.SetViewMode (AllView);
		bcAsset.ActivateField (&quot;Status&quot;);
		bcAsset.SetSearchExpr (strSearchExpr);//VFTK Venkata 11052012 : No changes for OracleScript 15 review since orderId is a required input
		bcAsset.ExecuteQuery(ForwardOnly);
		
		booRecordExists = bcAsset.FirstRecord ();
		while (booRecordExists)
		{
			if (bcAsset.GetFieldValue (&quot;Status&quot;) == strActStatus)
			{
				bcAsset.SetFieldValue (&quot;Status&quot;, strStatus);
				bcAsset.WriteRecord ();				
			}
			booRecordExists = bcAsset.NextRecord ();
		}
	}
	finally
	{
		inProp 	= null;
		outProp = null;
		BS 	= null;
		bcAsset= null;
		boAsset= null;
	}
}"
			   SEQUENCE="21"
			   UPDATED="10/28/2013 14:05:25"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateItemBillingAccount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateItemBillingAccount (Inputs, Outputs)
{
	try
	{	  	
		var	strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);	
		var bundleIntegId = &quot;&quot;;
		var billingAccountId = &quot;&quot;;
		var boOrder				: BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcOrder 			: BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcOrderItem			: BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcOrderChildItem	: BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items for IO HP&quot;);
		
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderId);
	   	bcOrder.ExecuteQuery(ForwardOnly); 
	   	
	   	if(bcOrder.FirstRecord())
	   	{
	    	bcOrderItem.SetViewMode(AllView);
			bcOrderItem.ClearToQuery();
			bcOrderItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
			bcOrderItem.ActivateField(&quot;Action Code&quot;);
			bcOrderItem.ActivateField(&quot;Part Number&quot;);
			bcOrderItem.ActivateField(&quot;Billing Account Id&quot;);
			bcOrderItem.SetSearchExpr(&quot;[Part Number] = &apos;1000&apos; AND [Prod Prom Instance Id] IS NOT NULL&quot;); //BundledPromotions - RP
		   	bcOrderItem.ExecuteQuery(ForwardOnly); 
		   	
		   	if(bcOrderItem.FirstRecord())
		   	{	   	
		   		bundleIntegId = bcOrderItem.GetFieldValue(&quot;Prod Prom Instance Id&quot;);
	   			billingAccountId = bcOrderItem.GetFieldValue(&quot;Billing Account Id&quot;);
	   			
		   		bcOrderItem.SetViewMode(AllView);
				bcOrderItem.ClearToQuery();
				bcOrderItem.ActivateField(&quot;Order Header Id&quot;);
				bcOrderItem.ActivateField(&quot;Action Code&quot;);
				bcOrderItem.ActivateField(&quot;Part Number&quot;);
				bcOrderItem.ActivateField(&quot;Root Order Item Id&quot;);
				bcOrderItem.ActivateField(&quot;Billing Account Id&quot;);
				bcOrderItem.SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Part Number] &lt;&gt; &apos;1000&apos; AND ([Prod Prom Instance Id] = &apos;&quot;+bundleIntegId+&quot;&apos; OR [Root Order Item Id] = [Id]) AND [Action Code] = &apos;Add&apos;&quot;); //BundledPromotions - RP
			   	bcOrderItem.ExecuteQuery(ForwardOnly);
			   	var booRecordExists = bcOrderItem.FirstRecord();
			   	while (booRecordExists)
				{			
					if (bcOrderItem.GetFieldValue(&quot;Root Order Item Id&quot;) == bcOrderItem.GetFieldValue(&quot;Id&quot;))
					{				
						bcOrderChildItem.SetViewMode(AllView);
						bcOrderChildItem.ActivateField(&quot;Billing Account Id&quot;);
						bcOrderChildItem.ClearToQuery();
				    	//bcOrderChildItem.SetSearchSpec (&quot;Root Order Item Id&quot;, bcOrderItem.GetFieldValue(&quot;Root Order Item Id&quot;));
				    	bcOrderChildItem.SetSearchExpr(&quot;[Root Order Item Id] = &apos;&quot; + bcOrderItem.GetFieldValue(&quot;Root Order Item Id&quot;) + &quot;&apos; AND [Root Order Item Id] &lt;&gt; [Id]&quot;);
				   		bcOrderChildItem.ExecuteQuery(ForwardOnly);
						booRecordExists = bcOrderChildItem.FirstRecord();
						while (booRecordExists)
						{				
							bcOrderChildItem.SetFieldValue(&quot;Billing Account Id&quot;, billingAccountId);
							bcOrderChildItem.WriteRecord();		
							booRecordExists = bcOrderChildItem.NextRecord();
						}
					}
					bcOrderItem.SetFieldValue(&quot;Billing Account Id&quot;, billingAccountId);
					bcOrderItem.WriteRecord();			
					booRecordExists = bcOrderItem.NextRecord();
				}
			}
		}		
	}
	finally
	{
		bcOrder 			= null;
		bcOrderItem			= null;
		bcOrderChildItem	= null;
		boOrder				= null;	
	}
}"
			   SEQUENCE="22"
			   UPDATED="12/22/2014 02:08:18"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 16:00:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateItemPriceList"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**********************************************************
NAME: 		 	UpdateItemPriceList
DESCRIPTION: 	This method allows to set different price lists for 
				Items belong to different Root Line Items in an Order
INPUTS:			OrderId
RETURNS:		
AUTHOR:			Andrea Covello
DATE CREATED: 	21-02-2006
UPDATES:		31/01/2008 Tomas Kvasnica Removed Service Account population 
**************************************************/
function UpdateItemPriceList (Inputs, Outputs)
{
	try
	{	  	
		var	strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var strOrderSearchExpr     = &quot;&quot;;
		var strOrderItemSearchExpr = &quot;&quot;;		
		var boOrder				: BusObject = TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var bcOrder 			: BusComp = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcOrderItem			: BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var bcOrderChildItem	: BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);	
		var boAsset				: BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var bcAsset 			: BusComp = boAsset.GetBusComp(&quot;Asset Mgmt - Asset&quot;);		
		var strServiceInstance	= &quot;Y&quot;;
		var strRootLineItem		= &quot;&quot;;
		var booRecordExists		= &quot;&quot;;
		var strAssetIntegId		= &quot;&quot;;
		var strAssetPriceListId = &quot;&quot;;
		var strOrderPriceListId = &quot;&quot;;   
		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 	
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		strOrderSearchExpr = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
	    bcOrder.SetSearchExpr (strOrderSearchExpr);
    	bcOrderItem.SetViewMode(AllView);
		bcOrderItem.ClearToQuery();
		bcOrderItem.ActivateField(&quot;Order Header Id&quot;);
		bcOrderItem.ActivateField(&quot;Service Instance&quot;);
		bcOrderItem.ActivateField(&quot;Root Order Item Id&quot;);
		strOrderItemSearchExpr = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Service Instance] = &apos;&quot;+strServiceInstance+&quot;&apos;&quot;;
	   	bcOrderItem.SetSearchExpr (strOrderItemSearchExpr);
	   	bcOrder.ExecuteQuery(ForwardOnly); 
		
		if (bcOrder.FirstRecord ())
		{
		   	bcOrderItem.ExecuteQuery(ForwardOnly); 
		   	if(bcOrderItem.FirstRecord())
		   	{
		   		strRootLineItem = bcOrderItem.GetFieldValue(&quot;Root Order Item Id&quot;);
		   		strOrderPriceListId = bcOrderItem.GetFieldValue(&quot;Item Price List Id&quot;);
		   		
		   		if (strOrderPriceListId.length == 0)
				{											
					strAssetIntegId = bcOrderItem.GetFieldValue(&quot;Asset Integration Id&quot;);
					bcAsset.ClearToQuery();
					bcAsset.SetViewMode(AllView);
					bcAsset.ActivateField(&quot;Item Price List Id&quot;);
					//Search for the Child Order Item
			    	bcAsset.SetSearchSpec (&quot;Integration Id&quot;, strAssetIntegId );
			   		bcAsset.ExecuteQuery(ForwardOnly); 		
						
					if(bcAsset.FirstRecord())
					{
						strOrderPriceListId = bcAsset.GetFieldValue(&quot;Price List Id&quot;);
					}
				}
		   	}
		
	   		bcOrderChildItem.SetViewMode(AllView);
			bcOrderChildItem.ClearToQuery();
			bcOrderChildItem.ActivateField(&quot;Asset Integration Id&quot;);
			bcOrderChildItem.ActivateField(&quot;Item Price List Id&quot;);
			bcOrderChildItem.ActivateField(&quot;Product Type&quot;);
			//Search for the Child Order Item
	    	bcOrderChildItem.SetSearchSpec (&quot;Root Order Item Id&quot;, strRootLineItem );
	   		bcOrderChildItem.ExecuteQuery(ForwardOnly);
			booRecordExists = bcOrderChildItem.FirstRecord();
			while (booRecordExists)
			{
				if (bcOrderChildItem.GetFieldValue(&quot;Item Price List Id&quot;).length == 0)
					{
						bcOrderChildItem.SetFieldValue(&quot;Item Price List Id&quot;, strOrderPriceListId);
						bcOrderChildItem.WriteRecord();
					}		
				 booRecordExists = bcOrderChildItem.NextRecord();
			}
		}
	}
	finally
	{
		bcOrder 			= null;
		bcOrderItem			= null;
		bcOrderChildItem	= null;
		boAsset				= null;
		bcAsset 			= null;
		boOrder				= null;	
		BS = null;
		outProp = null;
		inProp = null;		
	}
}"
			   SEQUENCE="23"
			   UPDATED="12/22/2014 02:08:18"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateItemPriceListNew"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateItemPriceListNew (Inputs, Outputs)
{
	try
	{	  	
		var	strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var strOrderType = Inputs.GetProperty(&quot;OrderType&quot;);
		var strOrderSearchExpr     = &quot;&quot;;
		var strOrderItemSearchExpr = &quot;&quot;;		
		var boOrder				: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		//var bcOrderItem			: BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);	
		var bcOrderItem			: BusComp = boOrder.GetBusComp(&quot;VF Order Entry - Line Items Lightest&quot;);	
		// Used into while cycle
		var boOrder1				: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
			
		var boAsset				: BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var bcAsset				: BusComp;
		var bcOrderChildItem	: BusComp;
		var strServiceInstance	= &quot;Y&quot;;
		var strRootLineItem		= &quot;&quot;;
		var booRecordExists		= &quot;&quot;;
		var strAssetIntegId		= &quot;&quot;;
		var strAssetPriceListId = &quot;&quot;;
		var strOrderPriceListId = &quot;&quot;;  

		/*** Begin ***/ 
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		/*** End ***/ 
		
		with(bcOrderItem)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Item Price List Id&quot;);
			ActivateField(&quot;VF Root Order Item Id&quot;);
			ActivateField(&quot;VF Asset Integration Id&quot;);
	
			strOrderItemSearchExpr = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Service Instance] = &apos;&quot;+strServiceInstance+&quot;&apos;&quot;;
			//Search for the Root Order Items
		    SetSearchExpr (strOrderItemSearchExpr);
		   	ExecuteQuery(ForwardOnly); 
			var bcOrderItemExist = FirstRecord();		
		   	while(bcOrderItemExist)
		   	{
		   		strRootLineItem = GetFieldValue(&quot;VF Root Order Item Id&quot;);
		   		strOrderPriceListId = GetFieldValue(&quot;Item Price List Id&quot;);
		   		
		   		if (strOrderPriceListId.length == 0 &amp;&amp; strOrderType == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Modify Product &amp; Service&quot;))
				{
					strAssetIntegId = GetFieldValue(&quot;VF Asset Integration Id&quot;);
					bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header Light&quot;);
					with (bcAsset)
			 		{
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;Price List Id&quot;);
						//Search for the Child Order Item
				    	SetSearchSpec (&quot;Integration Id&quot;, strAssetIntegId );
				   		ExecuteQuery(ForwardOnly); 	
						if(FirstRecord())
						{
							strOrderPriceListId = GetFieldValue(&quot;Price List Id&quot;);
						}
					}
					//bcOrderChildItem	= boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
					bcOrderChildItem	= boOrder.GetBusComp(&quot;VF Order Entry - Line Items Lightest&quot;);		
						   		
			   		with(bcOrderChildItem)
			   		{
				   		SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Item Price List Id&quot;);
						//Search for the Child Order Item
				    	//SetSearchSpec (&quot;Root Order Item Id&quot;, strRootLineItem);
				    	SetSearchSpec (&quot;VF Root Order Item Id&quot;, strRootLineItem);
				   		ExecuteQuery(ForwardOnly);
						booRecordExists = FirstRecord();
						while (booRecordExists)
						{
							if (GetFieldValue(&quot;Item Price List Id&quot;).length == 0)
							{
								SetFieldValue(&quot;Item Price List Id&quot;, strOrderPriceListId);
								WriteRecord();
							}		
							booRecordExists = NextRecord();
						}
					}						
				}
		   		
		   		else if (strOrderPriceListId.length &gt; 0)
		   		{
			   		//bcOrderChildItem	= boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
			   		bcOrderChildItem	= boOrder.GetBusComp(&quot;VF Order Entry - Line Items Lightest&quot;);
			   		with(bcOrderChildItem)
			   		{
				   		SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Item Price List Id&quot;);
						//Search for the Child Order Item
				    	//SetSearchSpec (&quot;Root Order Item Id&quot;, strRootLineItem);
				    	SetSearchSpec (&quot;VF Root Order Item Id&quot;, strRootLineItem);
				   		ExecuteQuery(ForwardOnly);
						booRecordExists = FirstRecord();
					
						while (booRecordExists)
						{
							if (GetFieldValue(&quot;Item Price List Id&quot;).length == 0)
							{
								SetFieldValue(&quot;Item Price List Id&quot;, strOrderPriceListId);
								WriteRecord();
							}	
							 booRecordExists = NextRecord();
						}
					}		   		
		   		}
		   		bcOrderItemExist = NextRecord();
			}
		}
	}
	finally
	{
		bcAsset 			= null;
		bcOrderItem			= null;
		bcOrderChildItem	= null;
		boAsset				= null;		
		boOrder				= null;
		boOrder1			= null;
		BS = null;
		outProp = null;
		inProp = null;		
	}
}"
			   SEQUENCE="24"
			   UPDATED="12/22/2014 02:08:18"
			   UPDATED_BY="SADMIN"
			   CREATED="08/22/2010 08:26:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateOrder(Inputs, Outputs)
{
	try
	{
 /**************************************************
 NAME:    Update Order
 DESCRIPTION: Update the Order on respone from EAI
 INPUTS:   Order Id
 RETURNS: 
 AUTHOR:   Vishnu Kumar S
 DATE CREATED:14/03/2006  
 UPDATES:  
 **************************************************/
	var sOrderHeaderId = Inputs.GetProperty(&quot;Order Id&quot;);
	var smOrderBO	:BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);//Order BO
	var smOrderBC 	:BusComp	= smOrderBO.GetBusComp(&quot;Order Entry - Orders&quot;); //Order BC	
	var smOrderLineItemBC :BusComp	= smOrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;); //Order BC
	var smOrderStatus =  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);
		
		with(smOrderBC)
		{
			SetViewMode(AllView); //3-AllView Mode
			ClearToQuery();
			//Search for the Order 
			ActivateField(&quot;Status&quot;);
		    
		    smOrderLineItemBC.SetViewMode(AllView); //3-AllView Mode
			smOrderLineItemBC.ClearToQuery();
			smOrderLineItemBC.ActivateField(&quot;Status&quot;);
			// Review Input validation: Scripting 15 null check Added 5/2/2012 Udbhav IDC
			var inProp 	:PropertySet	= TheApplication().NewPropertySet();
			var outProp :PropertySet	= TheApplication().NewPropertySet();
			var BS 		:Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;sOrderHeaderId&quot;,sOrderHeaderId); //Id Validation
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
			// End 

		    SetSearchSpec (&quot;Id&quot;,sOrderHeaderId );
		 	ExecuteQuery(ForwardOnly);	
	 		
			with(smOrderLineItemBC)
			{	
	   	    	var smCount  = FirstRecord();
	   	    	while(smCount==true)
	   	    	{
	   	    		SetFieldValue(&quot;Status&quot;,smOrderStatus);
	   	    		WriteRecord();
		   	    	smCount=	NextRecord();
	   	    	}//End of While
			}//End of With	    	
			if(FirstRecord())
			{
				var tt= GetFieldValue(&quot;Id&quot;);
				SetFieldValue(&quot;Status&quot;,smOrderStatus);
				WriteRecord();
				NextRecord();
			}//End If
		}//End of With
	}		
	finally
	{	
		smOrderLineItemBC=null;
		smOrderBC=null;
		smOrderBO=null;	
		inProp 	=null;
		outProp =null;
		BS 		=null;
	}
}"
			   SEQUENCE="25"
			   UPDATED="12/22/2014 02:08:18"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateRootItemActionCode"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateRootItemActionCode (Inputs, Outputs)
{
	try
	{	  	
		var	strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);	
		var bundleIntegId = &quot;&quot;;
		var billingAccountId = &quot;&quot;;
		var boOrder				: BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var bcOrder 			: BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcOrderItem			: BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var strModAction     = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);
		
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderId);
	   	bcOrder.ExecuteQuery(ForwardOnly); 
	   	
	   	if(bcOrder.FirstRecord())
	   	{
	    	bcOrderItem.SetViewMode(AllView);
			bcOrderItem.ClearToQuery();
			bcOrderItem.ActivateField(&quot;Action Code&quot;);
			bcOrderItem.SetSearchExpr(&quot;[Part Number] = &apos;1000&apos;&quot;);
		   	bcOrderItem.ExecuteQuery(ForwardOnly); 
		   	
		   	if(bcOrderItem.FirstRecord())
		   	{	   	
				bcOrderItem.SetFieldValue(&quot;Action Code&quot;, strModAction);
				bcOrderItem.WriteRecord();		
			}
		}		
	}
	finally
	{
		bcOrder 			= null;
		bcOrderItem			= null;
		boOrder				= null;	
	}
}"
			   SEQUENCE="26"
			   UPDATED="12/22/2014 02:08:18"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 16:00:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



