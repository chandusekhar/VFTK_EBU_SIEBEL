<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF Tibco Interfaces"
	   UI_FREEZE="N"
	   UPDATED="11/28/2016 15:45:18"
	   UPDATED_BY="EFONSECA"
	   CREATED="10/05/2009 16:31:50"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="ACS AD 10-Nov-09: This service will update the cut over date for an MNP SR"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF MNP Service"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="11/28/2016 11:35:54"
		   SERVER_ENABLED="Y"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="Y"
		   OBJECT_LOCKED_BY_NAME="EFONSECA"
		   UPDATED="11/28/2016 15:39:28"
		   UPDATED_BY="EFONSECA"
		   CREATED="11/10/2009 06:31:26"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF MNP Service"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="11/10/2009 08:41:21"
			   UPDATED_BY="SADMIN"
			   CREATED="11/10/2009 06:32:07"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateSR"
			   UPDATED="01/27/2015 14:25:22"
			   UPDATED_BY="MSOUSA"
			   CREATED="11/10/2009 06:33:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="17"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:09"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:06:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Area"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="19"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:09"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:06:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Comments"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="7"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:02:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CorpContactName"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="9"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:03:45"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CorpContactPhone"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="10"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:04:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CorporateRegNum"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="8"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:03:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CreationDate"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="15"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:05:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CurrentReqDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="08/25/2010 13:00:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/25/2010 13:00:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CustomerCode"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="19"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="06/24/2013 21:17:20"
				   UPDATED_BY="SADMIN"
				   CREATED="06/24/2013 21:17:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DateOfBirth"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="29"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/27/2012 12:50:04"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2012 12:50:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ERROR_CODE"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="24"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 06:35:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ERROR_DESCRIPTION"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="25"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 06:35:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FathersName"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="28"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/27/2012 12:50:05"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2012 12:50:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Id"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="13"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:04:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Name"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="26"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/27/2012 12:50:05"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2012 12:50:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="NationalID"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="28"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/27/2012 12:50:05"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2012 12:50:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Integration Object"
				   HIDDEN="N"
				   INACTIVE="N"
				   INTEGRATION_OBJECT="NumberRange"
				   NAME="NumberRange"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="12"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="12/03/2009 06:43:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OtherInfo"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="11"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:04:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OwnerAccountId"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="7"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="06/24/2013 21:17:20"
				   UPDATED_BY="SADMIN"
				   CREATED="06/24/2013 21:17:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PlaceOfBirth"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="30"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/27/2012 12:50:05"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2012 12:50:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PortID"
				   OPTIONAL="N"
				   PREFERRED_SEQUENCE="2"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:11"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 06:34:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PortType"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="4"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:11"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:01:31"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PortingTime"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="6"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:11"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 06:34:45"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Recipient"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="5"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:11"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:01:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ReferenceNumber"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="1"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:11"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 06:33:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootTransactionId"
				   OPTIONAL="N"
				   PREFERRED_SEQUENCE="1"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/03/2009 08:22:05"
				   UPDATED_BY="SADMIN"
				   CREATED="12/03/2009 06:47:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SRNumber"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="14"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:11"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:05:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="STATUS_CODE"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="23"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:12"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 06:34:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Sender"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="3"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:12"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:00:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SequenceNum"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="2"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/03/2009 13:55:57"
				   UPDATED_BY="SADMIN"
				   CREATED="12/03/2009 06:47:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="21"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:12"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:07:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SubArea"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="20"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:12"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:07:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SubStatus"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="22"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:12"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:07:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SurName"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="27"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/27/2012 12:50:05"
				   UPDATED_BY="SADMIN"
				   CREATED="01/27/2012 12:50:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Type"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="18"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/19/2010 09:47:13"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:06:38"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="UpdateDate"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="16"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/19/2010 09:47:13"
				   UPDATED_BY="SADMIN"
				   CREATED="11/10/2009 08:06:16"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="WA#18:MNP:20150126:MS-New input argument needed in inbound requests to create &quot;MNP Port In&quot; type SRs"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="Y"
				   PREFERRED_SEQUENCE="31"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/27/2015 14:25:22"
				   UPDATED_BY="MSOUSA"
				   CREATED="01/26/2015 11:36:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateSR"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/19/2009 08:27:03"
				   UPDATED_BY="SADMIN"
				   CREATED="11/19/2009 08:27:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AskForTriplet"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AskForTriplet(Input, Output)
{
	try
	{
		var strType    = Input.GetProperty(&quot;strType&quot;);
		var strArea    = Input.GetProperty(&quot;strArea&quot;);
		var strSubArea = Input.GetProperty(&quot;strSubArea&quot;);
		
		if ((strType != &quot;&quot;) &amp;&amp; (strArea != &quot;&quot;) &amp;&amp; (strSubArea != &quot;&quot;))
		{
			Output.SetProperty(&quot;strType&quot;, strType);
			Output.SetProperty(&quot;strArea&quot;, strArea);
			Output.SetProperty(&quot;strSubArea&quot;, strSubArea);
			return;
		}

		var	strTypeStd		= &quot;&quot;;
		var	strAreaStd		= &quot;&quot;;
		var	strSubAreaStd	= &quot;&quot;;
		var	strTypeCanc		= &quot;&quot;;
		var	strAreaCanc		= &quot;&quot;;
		var	strSubAreaCanc	= &quot;&quot;;

		var boparameter :BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcparameter :BusComp = boparameter.GetBusComp(&quot;ACS NI Parameter&quot;);

		with(bcparameter)
		{
			ClearToQuery();
			ActivateField(&quot;Function&quot;);
			ActivateField(&quot;Name&quot;);
			ActivateField(&quot;Value&quot;);
			ActivateField(&quot;Condition1&quot;);
			ActivateField(&quot;Condition2&quot;);
			ActivateField(&quot;Condition3&quot;);
			ActivateField(&quot;Condition4&quot;);
			ActivateField(&quot;Condition5&quot;);
			ActivateField(&quot;Condition6&quot;);
			//VFTK Junaid 20120519 - Scripting 15 not needed as search spec has hardcoded values
			SetSearchSpec(&quot;Function&quot;,&quot;MNPCreateSR&quot;);
			SetSearchSpec(&quot;Name&quot;, &quot;TripletDef&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strTypeStd	  	   = GetFieldValue(&quot;Condition1&quot;);
				strAreaStd		   = GetFieldValue(&quot;Condition2&quot;);
				strSubAreaStd	   = GetFieldValue(&quot;Condition3&quot;);
				strTypeCanc		   = GetFieldValue(&quot;Condition4&quot;);
				strAreaCanc		   = GetFieldValue(&quot;Condition5&quot;);
				strSubAreaCanc     = GetFieldValue(&quot;Condition6&quot;);
			}
		}

		if (strType == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_CREATE_SR_TIBCO&quot;,&quot;MNPPortOut&quot;)|| strType == &quot;&quot;)
		{	
			Output.SetProperty(&quot;strType&quot;,strTypeStd);
			Output.SetProperty(&quot;strArea&quot;,strAreaStd);
			Output.SetProperty(&quot;strSubArea&quot;,strSubAreaStd);
		} else if (strType == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_CREATE_SR_TIBCO&quot;,&quot;MNPPortOutCanc&quot;))
		{	
			Output.SetProperty(&quot;strType&quot;,strTypeCanc);
			Output.SetProperty(&quot;strArea&quot;,strAreaCanc);
			Output.SetProperty(&quot;strSubArea&quot;,strSubAreaCanc);
		}
	} catch (e) { 
	throw(e);
	} finally
	{
		strTypeStd		   = null;
		strAreaStd		   = null;
		strSubAreaStd	   = null;
		strTypeCanc		   = null;
		strAreaCanc		   = null;
		strSubAreaCanc	   = null;
		bcparameter = null;
		boparameter = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="01/26/2015 17:34:14"
			   UPDATED_BY="MSOUSA"
			   CREATED="04/13/2010 17:18:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AutoRejectionCheck"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AutoRejectionCheck(SRId, TC_Id,  psNumber, strAccountId, strMernisStatus, strAccountClass, strCustomerCode, strAccountTaxId)
{
try
{
    var App = TheApplication();
	var boServiceRequest :BusObject	= App.GetBusObject (&quot;Service Request&quot;);
	var bcServiceRequest :BusComp	= boServiceRequest.GetBusComp (&quot;Service Request&quot;);
	var bcMNPPortOutMSISDN :BusComp	= boServiceRequest.GetBusComp (&quot;VF MNP Port Out MSISDN&quot;);
	var boAssetHP :BusObject		= App.GetBusObject(&quot;Asset Management&quot;);
	var bcAssetHP :BusComp			= boAssetHP.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
	var boAccount :BusObject		= App.GetBusObject (&quot;Account&quot;);
	var bcAccount :BusComp			= boAccount.GetBusComp (&quot;Account&quot;);
	var boOrderHP :BusObject		= App.GetBusObject(&quot;X Order Entry&quot;);
	var bcOrderItemHP :BusComp		= boOrderHP.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
	
	var statActive 				= App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
	var statInactive			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
	var statSuspend				= App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);
	var RsnTranferCross 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1122&quot;);
	var RsnTranferWithin 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1121&quot;);
	var RsnOnDemand		 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1123&quot;);
	var strMSISDNChange			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;229&quot;);
	var strRejectCredit			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1019&quot;);
	var strRejectFraud			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1018&quot;);
	var	strError				= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1017&quot;);
	var strMNPOut				= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1020&quot;);
	var strCancelDunning		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;211&quot;);
	var strCancelCustReq		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;212&quot;);
	var strCancelMissDoc		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;220&quot;);
	var strLimitedVol			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;205&quot;);
	var strClosedVol			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;208&quot;);
	var strFrozenVol			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;210&quot;);
	var strAutoReject 			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;);
	var strAutoAccept 			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autoaccepted&quot;);
	var strSRclose 				= App.InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;);
	var EnableAutoReject 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ENABLE_MNP_AUTOREJECT&quot;,&quot;Enable&quot;);
	var EnableAutoAccept 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;ENABLE_MNP_AUTOACCEPT&quot;,&quot;Enable&quot;);
	var strCancelledStatus		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
	var strCompleteStatus		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
	var strModifyOption			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Modify Product &amp; Service&quot;);
	var strDisconnect			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Disconnect&quot;);
	var strModifyIMSI			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Modify MSISDN IMSI&quot;);
	
	var searchOrderExpr			= &quot;&quot;;
	var NinetyDays 				= 90 * 24 * 60 * 60 * 1000; 
	var strMSISDN 				= &quot;&quot;;
	var intCount 				= 0;
	var intCounter 				= 0;
	var strAccntId 				= &quot;&quot;;
	var strInstallDate			= &quot;&quot;;
	var TCid 					= &quot;&quot;;
	var MSISDNstatus 			= &quot;&quot;;
	var MSISDNexists 			= &quot;&quot;;
	var ReasonCode 				= &quot;&quot;;
	var RejCode 				= &quot;&quot;;
	var DonorOpt 				= &quot;&quot;;
	var strAutoSrcExpr 			= &quot;&quot;;
	var strPrConId				= &quot;&quot;;
	var strAccPayType			= &quot;&quot;;
	var InputAccId				= strAccountId;
	var strMernisFlag			= &quot;&quot;;
	var RejRules				= &quot;&quot;;
	var IntegId					= &quot;&quot;;
	var strOrderType			= &quot;&quot;;
	var strOrderReason			= &quot;&quot;;
	var RejCount 				= 0;
	var AccCount 				= 0;
	var AssetId					= &quot;&quot;;
	var today					= GetCurrentDate();
	var dt2;
	var dt1;
	//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;SRId&quot;,SRId);
		inProp.SetProperty(&quot;strMSISDN&quot;,strMSISDN);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		//End - Scripting 15
	with(bcServiceRequest)
	{
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(&quot;Id&quot;, SRId);
		ExecuteQuery(ForwardOnly);
		if(FirstRecord())
		{
			intCount = psNumber.GetChild(0).GetChildCount();
			for(intCounter = 0; intCounter &lt; intCount; intCounter++)
			{
				RejCode = &quot;&quot;;
				RejRules = &quot;&quot;;
				MSISDNexists = &quot;&quot;;
				strOrderType = &quot;&quot;;
				strOrderReason = &quot;&quot;;
				strMSISDN = psNumber.GetChild(0).GetChild(intCounter).GetProperty(&quot;MSISDN&quot;);
				strAutoSrcExpr = &quot;[VF MSISDN] = &apos;&quot;+strMSISDN+&quot;&apos; AND [SR Id] = &apos;&quot; + SRId + &quot;&apos;&quot;;
				with(bcMNPPortOutMSISDN)
				{
					ClearToQuery();
					SetViewMode(AllView);
						ActivateField(&quot;VF MSISDN&quot;);
						ActivateField(&quot;VF Status&quot;);
						ActivateField(&quot;VF Reason&quot;);
						ActivateField(&quot;ACS Account Type&quot;);
						ActivateField(&quot;Billing Account Id&quot;);
						ActivateField(&quot;Account Id&quot;);
						ActivateField(&quot;Asset Id&quot;);
						ActivateField(&quot;VF ReqCustAccType&quot;);
						ActivateField(&quot;VF ReqCustCode&quot;);
						ActivateField(&quot;VF ReqCustTaxId&quot;);
					SetSearchExpr(strAutoSrcExpr);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						with(bcAssetHP)
						{
							ClearToQuery();
							SetViewMode(AllView);
								ActivateField(&quot;Owner Account Id&quot;);
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;Reason Code&quot;);
								ActivateField(&quot;VF Orig Start Date&quot;);
								ActivateField(&quot;Install Date&quot;);
								ActivateField(&quot;Donor Operator&quot;);
								ActivateField(&quot;Primary Contact Id&quot;);
								ActivateField(&quot;ACS Account Type&quot;);
								ActivateField(&quot;Integration Id&quot;);
								ActivateField(&quot;Asset Id&quot;);
							SetSearchSpec(&quot;Serial Number&quot;, strMSISDN);
							SetSearchSpec(&quot;Status&quot;, statActive); 
							//WA#18:MNP:20150126:MS-Added 70000 product to the next SetSearchSpec statement. 
							SetSearchSpec(&quot;Product Part Number&quot;,&quot;=&apos;1000&apos; OR [Product Part Number] = &apos;18400&apos; OR [Product Part Number] = &apos;70000&apos;&quot;); 
							//SetSortSpec (&quot;VF Asset Integ Install Date(DESCENDING)&quot;); //DEF-251
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())		//MSISDN exists
							{
								MSISDNstatus 			= GetFieldValue(&quot;Status&quot;);
								ReasonCode 				= GetFieldValue(&quot;Reason Code&quot;);
								IntegId					= GetFieldValue(&quot;Integration Id&quot;);
								var strStartDate		= GetFieldValue(&quot;Start Date&quot;);
								var strOrigStartDate	= GetFieldValue(&quot;VF Orig Start Date&quot;);
								strInstallDate 			= GetFieldValue(&quot;Install Date&quot;);
								strAccntId 				= GetFieldValue(&quot;Owner Account Id&quot;);
								DonorOpt 				= GetFieldValue(&quot;Donor Operator&quot;);
								strPrConId 				= GetFieldValue(&quot;Primary Contact Id&quot;);
								strAccPayType			= GetFieldValue(&quot;ACS Account Type&quot;);
								AssetId					= GetFieldValue(&quot;Asset Id&quot;);
								var StartDate			= GetCurrentDate();
								var OrigStartDate		= GetCurrentDate();
								if(strInstallDate!=&quot;&quot;) {
									strInstallDate 		= new Date(strInstallDate);
								} 
								if(strStartDate!=&quot;&quot;) {
									StartDate 			= new Date(GetFieldValue(&quot;Start Date&quot;));
								} 
								if(strOrigStartDate!=&quot;&quot;) {
									OrigStartDate 		= new Date(GetFieldValue(&quot;VF Orig Start Date&quot;));
								}
								searchOrderExpr			= &quot;[Asset Integration Id]=&apos;&quot;+IntegId+&quot;&apos; AND [Status]&lt;&gt;&apos;&quot;+strCancelledStatus+&quot;&apos; AND [Status]&lt;&gt;&apos;&quot;+strCompleteStatus+&quot;&apos;&quot;;
								with(bcAccount)
								{
									ClearToQuery();
									SetViewMode(AllView);
									ActivateField(&quot;Contact SSN&quot;);
									ActivateField(&quot;VF Mernis Status&quot;);
									SetSearchSpec(&quot;Id&quot;, strAccntId);
									ExecuteQuery(ForwardOnly);
									if(FirstRecord())
									{
										TCid = GetFieldValue(&quot;Contact SSN&quot;);
										strMernisFlag = GetFieldValue(&quot;VF Mernis Status&quot;);
									}
								}
								with(bcOrderItemHP)
								{
									ClearToQuery();
									SetViewMode(AllView);
										ActivateField(&quot;VF Order Header Reason&quot;);
										ActivateField(&quot;Order Type&quot;);
									SetSearchExpr(searchOrderExpr);
									ExecuteQuery(ForwardOnly);
									if(FirstRecord())
									{
										strOrderType	= GetFieldValue(&quot;Order Type&quot;);
										strOrderReason 	= GetFieldValue(&quot;VF Order Header Reason&quot;);
									}
								}
							}
							else		//MSISDN does not exist;
							{
								MSISDNexists = &quot;N&quot;;
								RejCode = &quot;OPR001001&quot;; //changed from SBL000003 for defect C_MSP00001276
							}
						}
						if(strMernisFlag == &quot;N&quot;)
						{
							RejRules = &quot;Y&quot;;
						}
						else if(strMernisFlag == &quot;Y&quot; &amp;&amp; TCid == &quot;NA&quot; &amp;&amp; TCid == &quot;&quot; &amp;&amp; EnableAutoReject == &quot;On&quot;)
						{
							RejCode = &quot;OPR002009&quot;; //Invalid TC Id;
						}
						else if(strMernisFlag == &quot;Y&quot; &amp;&amp; TCid != &quot;NA&quot; &amp;&amp; TCid != &quot;&quot;)
						{
							if(TCid != TC_Id &amp;&amp; EnableAutoReject == &quot;On&quot;)
							{
								RejCode = &quot;OPR002030&quot;; //MSISDN belongs to other customer;
							}
							else
							{
								RejRules = &quot;Y&quot;;
							}
						}
						
// ***********Rejection Rules************ //
						if(EnableAutoReject == &quot;On&quot; &amp;&amp; RejCode==&quot;&quot; &amp;&amp; RejRules == &quot;Y&quot;)
						{
							//Check if the MSISDN exist in Siebel;
							if(MSISDNexists != &quot;&quot;)
								RejCode = &quot;OPR001001&quot;; //changed from SBL000003 for defect C_MSP00001276
							//Check if the line is inactive and the last reason is &quot;Reject Fraud&quot;, &quot;Reject Credit&quot; or &quot;Error&quot;;
							else if(MSISDNstatus == statInactive &amp;&amp; (ReasonCode == strRejectFraud || ReasonCode == strRejectCredit || ReasonCode == strError))
								RejCode = &quot;OPR001001&quot;;	
							//Check if the line is inactive and the last reason is &quot;MNP Port Out&quot;
							else if(MSISDNstatus == statInactive &amp;&amp; ReasonCode == strMNPOut)
								RejCode = &quot;SBL000005&quot;;
							//Check if the asset is suspended with last reason &quot;Cancelled–Dunning&quot;, &quot;Cancelled-Customer Request&quot; or &quot;Cancelled–Missing document&quot;;
							else if(MSISDNstatus == statSuspend &amp;&amp;(ReasonCode == strCancelDunning || ReasonCode == strCancelCustReq || ReasonCode == strCancelMissDoc))
								RejCode = &quot;OPR001001&quot;;
							//Check if the asset is suspended with last reason &quot;Limited-Voluntary&quot;, &quot;Closed-Voluntary&quot; or &quot;Frozen-Voluntary&quot;;
							else if(MSISDNstatus == statSuspend &amp;&amp;(ReasonCode == strLimitedVol || ReasonCode == strClosedVol || ReasonCode == strFrozenVol))
								RejCode = &quot;OPR002034&quot;;
							//Check if the asset status is active but with an open order with &quot;MSISDN transfer cross customer&quot; Reason;
							else if(MSISDNstatus == statActive &amp;&amp; strOrderReason == RsnTranferCross)
							{
								RejCode = &quot;OPR002035&quot;;
							}
							//Check if tha asset has an open order with &quot;Modify product or services&quot; order type and with reason &quot;MSISDN Change&quot;;
							else if(MSISDNstatus == statActive &amp;&amp; strOrderReason == strMSISDNChange)
							{
								RejCode = &quot;OPR002031&quot;;
							}
							//Check if Activation (Start) Date &lt; 90 Days and MSISDN is not a ported in number;
							//If the last reason on the asset original start date is &quot;Transfer cross BA&quot; then Siebel will check the original start date instead of start date;
							////VFTR_AD-ITSL-2030|JSARMENTO|04/01/2016-START
							//else if(DonorOpt == &quot;&quot;)
							else if(DonorOpt == &quot;&quot; &amp;&amp; ReasonCode != RsnTranferCross)
							{
								dt1 = today.getTime();
								//if(ReasonCode == RsnTranferCross || ReasonCode == RsnTranferWithin || ReasonCode == RsnOnDemand)
								if(ReasonCode == RsnTranferWithin || ReasonCode == RsnOnDemand)
									dt2 = OrigStartDate.getTime();
								else
									dt2 = strInstallDate.getTime();
								if(dt1 - dt2 &lt; NinetyDays)
									RejCode = &quot;OPR002036&quot;;
							}
							////VFTR_AD-ITSL-2030|JSARMENTO|04/01/2016-END
							//If all the checks are passed and the MSISDN owner is mernis verified, the line will be autoaccepted
							if(RejCode ==&quot;&quot; &amp;&amp; strMernisFlag == &quot;Y&quot;)
							{
								RejCode = &quot;Accept&quot;;
							}
						}
// **************************************** //

						if(RejCode != &quot;&quot; &amp;&amp; RejCode != &quot;Accept&quot; &amp;&amp; EnableAutoReject == &quot;On&quot;)		//Autoreject MSISDN
						{
							RejCount++;
								SetFieldValue(&quot;VF Status&quot;,strAutoReject);
								SetFieldValue(&quot;VF Reason&quot;, App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,RejCode));
								SetFieldValue(&quot;Asset Id&quot;,AssetId);
								SetFieldValue(&quot;VF ReqCustAccType&quot;,strAccountClass);
								SetFieldValue(&quot;VF ReqCustCode&quot;,strCustomerCode);
								SetFieldValue(&quot;VF ReqCustTaxId&quot;,strAccountTaxId);
							WriteRecord();
							psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;, &quot;SE&quot;);
							psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;RejectCode&quot;, RejCode);
						}
						else if(RejCode == &quot;Accept&quot; &amp;&amp; EnableAutoAccept == &quot;On&quot;)		//Autoaccept MSISDN
						{
							AccCount++;
								SetFieldValue(&quot;VF Status&quot;,strAutoAccept);
								SetFieldValue(&quot;Asset Id&quot;,AssetId);
								SetFieldValue(&quot;VF ReqCustAccType&quot;,strAccountClass);
								SetFieldValue(&quot;VF ReqCustCode&quot;,strCustomerCode);
								SetFieldValue(&quot;VF ReqCustTaxId&quot;,strAccountTaxId);
							WriteRecord();
							psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;, &quot;ST&quot;);
						}
						else		//If no Autoaccept or Autoreject then set to Pending status
						{
								SetFieldValue(&quot;Asset Id&quot;,AssetId);
								SetFieldValue(&quot;VF ReqCustAccType&quot;,strAccountClass);
								SetFieldValue(&quot;VF ReqCustCode&quot;,strCustomerCode);
								SetFieldValue(&quot;VF ReqCustTaxId&quot;,strAccountTaxId);
							WriteRecord();
							psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;, &quot;SB&quot;);
						}
					}
				}
			}
			//If all the MSISDNs in the request are Autorejected or Autoaccepted, automatically close SR.
			if((RejCount + AccCount) == intCount)
			{
				SetFieldValue(&quot;Status&quot;, strSRclose);
				WriteRecord();
			}
		}// If Ends
	}//bcServiceRequest Ends
}
finally
{
	bcServiceRequest 		= null;
	bcMNPPortOutMSISDN 		= null;
	bcAssetHP 				= null;
	bcAccount 				= null;
	bcOrderItemHP			= null;
	boServiceRequest 		= null;
	boAssetHP 				= null;
	boAccount 				= null;
	boOrderHP				= null;
	BS = null;
	outProp = null;
	inProp = null;
	App = null;
}
}"
			   SEQUENCE="2"
			   UPDATED="04/01/2016 10:48:12"
			   UPDATED_BY="FGUEDES"
			   CREATED="01/27/2012 12:50:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSR (Inputs, Outputs)
{
try
{
var App=TheApplication();
var noTaxId=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;);
var strCorporateRegNum=Inputs.GetProperty(&quot;CorporateRegNum&quot;);
var strType=Inputs.GetProperty(&quot;Type&quot;);
var MNPCanc=App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_CREATE_SR_TIBCO&quot;,&quot;MNPPortOutCanc&quot;)
var expException:Object=new Object;
var bsWPRAsync:Service=App.GetService(&quot;Workflow Process Manager&quot;);
var psWFInput:PropertySet=App.NewPropertySet();
var psWFOutput:PropertySet=App.NewPropertySet();
var psKPIin:PropertySet=App.NewPropertySet();
var psKPIout:PropertySet=App.NewPropertySet();
var SRInputs:PropertySet=App.NewPropertySet();
var SROutputs:PropertySet=App.NewPropertySet();
var psMSISDN:PropertySet=App.NewPropertySet();
var psMSISDNList:PropertySet=App.NewPropertySet();
var psNumber:PropertySet=App.NewPropertySet();
var psSRInput:PropertySet=App.NewPropertySet();
var psSROutput:PropertySet=App.NewPropertySet();
var boServiceRequest:BusObject=App.GetBusObject (&quot;Service Request&quot;);
var bcServiceRequest:BusComp=boServiceRequest.GetBusComp (&quot;Service Request&quot;);
var bcMNPPortOutMSISDN:BusComp=boServiceRequest.GetBusComp (&quot;VF MNP Port Out MSISDN&quot;);
var boAccount:BusObject=App.GetBusObject (&quot;X Order Entry&quot;);
var bcAccount:BusComp=boAccount.GetBusComp(&quot;HP Submit - Account&quot;);
var inProp:PropertySet=App.NewPropertySet();
var outProp:PropertySet=App.NewPropertySet();
var BS:Service=App.GetService(&quot;VF TRK Utilities&quot;);
var bsGetService:Service=App.GetService (&quot;ACS General Operations&quot;);
var extractHierarchyBS:Service=App.GetService(&quot;VF Extract Hierarchy BS&quot;);
var psExInput:PropertySet=App.NewPropertySet();
var psExOutput:PropertySet=App.NewPropertySet();
var strSender=Inputs.GetProperty(&quot;Sender&quot;);
var strPortId=Inputs.GetProperty(&quot;PortID&quot;);
var strPortType=Inputs.GetProperty(&quot;PortType&quot;);
var strPortingTime=Inputs.GetProperty(&quot;PortingTime&quot;);
var strCorpContactName=Inputs.GetProperty(&quot;CorpContactName&quot;);
var strCorpContactPhone=Inputs.GetProperty(&quot;CorpContactPhone&quot;);
var strOtherInfo=Inputs.GetProperty(&quot;OtherInfo&quot;);
var strRecipient=Inputs.GetProperty(&quot;Recipient&quot;);
var strReferenceNumber=Inputs.GetProperty(&quot;ReferenceNumber&quot;);
var strComments=Inputs.GetProperty(&quot;Comments&quot;);
var strArea=Inputs.GetProperty(&quot;Area&quot;);
var strSubArea=Inputs.GetProperty(&quot;SubArea&quot;);
var strRootTransactionId=Inputs.GetProperty(&quot;RootTransactionId&quot;);
var strSequenceNum=Inputs.GetProperty(&quot;SequenceNum&quot;);
var currReqDate=Inputs.GetProperty(&quot;CurrentReqDate&quot;);
var sOrderId=Inputs.GetProperty(&quot;orderId&quot;);
var kpiStatus=&quot;OK&quot;;
var today=GetCurrentDate();
var timestampStart=((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());
var intMaxVal=0;
var intCounter=0;
var booRecordExists;
var booRecordExists1;
var strSRNumber=&quot;&quot;;
var strMSISDN=Inputs.GetProperty(&quot;MSISDN&quot;);//WA18
var strSrId=&quot;&quot;;
var strAutoRejStat=&quot;&quot;;
var strAutoSrcExpr=&quot;&quot;;
var strStatus=App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;);
var SkipCR733=App.InvokeMethod (&quot;LookupValue&quot;,&quot;VF_PORTOUT_CR733&quot;,&quot;Enable&quot;);// Y or N
var strSubStatus=App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;,&quot;Assigned&quot;);
var strId=&quot;&quot;;
var strCreated=&quot;&quot;;
var strUpdated=&quot;&quot;;
var strAccountId=&quot;&quot;;
var strAccountName=&quot;&quot;;
var strCustomerCode=&quot;&quot;;
var strAccntId=&quot;&quot;;	
/* WA#18:MNP:20150126:MS: Begin - Block to test if SR creation is for MNP Port In. If so, use EBU legacy script as before to create it*/
if ((strType== App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP Port In SR&quot;,&quot;Type&quot;)) &amp;&amp;
   (strArea== App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP Port In SR&quot;,&quot;Area&quot;)) &amp;&amp;
   (strSubArea== App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP Port In SR&quot;,&quot;SubArea&quot;)))
{
	CreateSR_MNPPortIn(sOrderId);
	Outputs.SetProperty(&quot;PortID&quot;, strPortId);
	return;
}
/* WA#18:MNP:20150126:MS: End */
if (SkipCR733!=&quot;Y&quot;)
{
	strCustomerCode=Inputs.GetProperty(&quot;CustomerCode&quot;);
	strAccntId=Inputs.GetProperty(&quot;OwnerAccountId&quot;);
}
var strAccountTaxId=&quot;&quot;;
var strSRRequestId=&quot;&quot;;
var strSRSrcExpr=&quot;&quot;;
psSRInput.SetProperty(&quot;strType&quot;,strType);
psSRInput.SetProperty(&quot;strArea&quot;,strArea);
psSRInput.SetProperty(&quot;strSubArea&quot;,strSubArea);
AskForTriplet(psSRInput,psSROutput);
var strTypeInt=psSROutput.GetProperty(&quot;strType&quot;);
var strAreaInt=psSROutput.GetProperty(&quot;strArea&quot;);
var strSubAreaInt=psSROutput.GetProperty(&quot;strSubArea&quot;);
if (SkipCR733 != &quot;Y&quot;)
	strSRSrcExpr=&quot;[VF Port Id] = &apos;&quot;+strPortId+&quot;&apos; AND [CSN] = &apos;&quot;+strCustomerCode+&quot;&apos; AND [SR Type] = &apos;&quot;+strTypeInt+&quot;&apos; AND [Area] = &apos;&quot;+strAreaInt+&quot;&apos; AND [Sub-Area] = &apos;&quot;+strSubAreaInt+&quot;&apos;&quot;;
else
	strSRSrcExpr=&quot;[VF Port Id] = &apos;&quot;+strPortId+&quot;&apos; AND [SR Type] = &apos;&quot;+strTypeInt+&quot;&apos; AND [Area] = &apos;&quot;+strAreaInt+&quot;&apos; AND [Sub-Area] = &apos;&quot;+strSubAreaInt+&quot;&apos;&quot;;

if(strCustomerCode == &quot;DUMMY&quot;)
	strSRSrcExpr = &quot;[VF Port Id] = &apos;&quot;+strPortId+&quot;&apos; AND [SR Type] = &apos;&quot;+strTypeInt+&quot;&apos; AND [Area] = &apos;&quot;+strAreaInt+&quot;&apos; AND [Sub-Area] = &apos;&quot;+strSubAreaInt+&quot;&apos;&quot;;
	
var strAccSrcExpr = &quot;[VF Tax Number] = &apos;&quot;+strCorporateRegNum+&quot;&apos; AND [Account Status Code] = &apos;&quot;+App.InvokeMethod (&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;100&quot;)+&quot;&apos;&quot;;	
	inProp.SetProperty(&quot;strTypeInt&quot;,strTypeInt);
	inProp.SetProperty(&quot;strAreaInt&quot;,strAreaInt);
	inProp.SetProperty(&quot;strSubAreaInt&quot;,strSubAreaInt);
	inProp.SetProperty(&quot;Validation Input Mode&quot;,&quot;AND&quot;);
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
	if(strCorporateRegNum!= noTaxId &amp;&amp; strCorporateRegNum != &quot;&quot; &amp;&amp; SkipCR733 == &quot;Y&quot;)
	{
	with(bcAccount)
	{
	ClearToQuery();
	SetViewMode(AllView);
	ActivateField(&quot;VF Tax Number&quot;);
	SetSearchExpr(strAccSrcExpr);
	ExecuteQuery(ForwardOnly);
	if (FirstRecord())
	{
	strAccountId = GetFieldValue(&quot;Id&quot;);
	strAccountName = GetFieldValue(&quot;Name&quot;);
	}
	}
	}
var sSurname=Inputs.GetProperty(&quot;SurName&quot;);
var sPlaceOfBirth=Inputs.GetProperty(&quot;PlaceOfBirth&quot;);
var sNationalID=Inputs.GetProperty(&quot;NationalID&quot;);
var sFathersName=Inputs.GetProperty(&quot;FathersName&quot;);
var sName=Inputs.GetProperty(&quot;Name&quot;);
var sDateOfBirth=Inputs.GetProperty(&quot;DateOfBirth&quot;);
var sIsConsumerRequest;
if(sSurname != &quot;&quot; || sPlaceOfBirth != &quot;&quot; || sNationalID != &quot;&quot; || sFathersName != &quot;&quot; || sName != &quot;&quot;)
{
	sIsConsumerRequest=&quot;Y&quot;;
	strAccountId=&quot;&quot;;
}
else
	sIsConsumerRequest = &quot;N&quot;;	
with(bcServiceRequest)
{
	ClearToQuery();
	SetViewMode(AllView);
	ActivateField(&quot;Account Id&quot;);
	ActivateField(&quot;Comments&quot;);
	ActivateField(&quot;Tax ID&quot;);
	ActivateField(&quot;Description&quot;);
	ActivateField(&quot;VF Port Id&quot;);
	ActivateField(&quot;VF TA Contact Name&quot;);
	ActivateField(&quot;VF TA Contact Phone&quot;);
	ActivateField(&quot;SR Cut Over Date&quot;);
	ActivateField(&quot;VF MNP Request ID&quot;);
	ActivateField(&quot;SR Number&quot;);
	ActivateField(&quot;Status&quot;);
	ActivateField(&quot;Sub-Status&quot;);
	ActivateField(&quot;Owner Group&quot;);
	ActivateField(&quot;SR Type&quot;);
	ActivateField(&quot;Owned By Id&quot;);
	ActivateField(&quot;Owner&quot;);
	ActivateField(&quot;Area No Constrain&quot;);
	ActivateField(&quot;Sub-Area No Constrain&quot;);
	ActivateField(&quot;VF SR Category&quot;);
	ActivateField(&quot;VF TA Customer Name&quot;);
	ActivateField(&quot;SR Donor Operator&quot;);
	ActivateField(&quot;VF Current Req Date&quot;);
	ActivateField(&quot;VF TA Cod Flag&quot;);
	ActivateField(&quot;VF MNP OUT Processed&quot;);
	ActivateField(&quot;SR Recepient Operator&quot;);
	SetSearchExpr(strSRSrcExpr);
	ExecuteQuery(ForwardOnly);
	booRecordExists = FirstRecord ();
	if (!booRecordExists || (strType == MNPCanc))
	{
		with(SRInputs)
		{
			SetProperty(&quot;sIsConsumerRequest&quot;,sIsConsumerRequest);//WA18
			SetProperty(&quot;Type&quot;, strTypeInt);
			SetProperty(&quot;Area&quot;, strAreaInt);
			SetProperty(&quot;Sub Area&quot;, strSubAreaInt);
			if (SkipCR733 == &quot;Y&quot;)
				SetProperty(&quot;Account Id&quot;, strAccountId);
			else 
				SetProperty(&quot;Account Id&quot;,strAccntId);
			SetProperty(&quot;VF SR Category&quot;, App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR_CATEGORY&quot;,&quot;MNP OUT&quot;));
			SetProperty(&quot;Status&quot;, strStatus);
			SetProperty(&quot;Sub Status&quot;, strSubStatus);
			SetProperty(&quot;strMSISDN&quot;, strMSISDN);//WA18
			SetProperty(&quot;Owner Group&quot;, App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR _MNP_OUT_DIVISION&quot;,&quot;DKT Port Out&quot;));
		}
		var SROutput = bsGetService.InvokeMethod (&quot;CreateSR&quot;, SRInputs, SROutputs);
		strSRRequestId = SROutputs.GetProperty (&quot;Service Request Id&quot;);
		inProp.SetProperty(&quot;strSRRequestId&quot;,strSRRequestId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		ClearToQuery();
		SetViewMode(AllView);
		SetSearchSpec(&quot;Id&quot;, strSRRequestId);
		ExecuteQuery(ForwardOnly);
		var booSRRecordExists = FirstRecord();
		if(booSRRecordExists)
		{
			SetFieldValue(&quot;VF SR Category&quot;, App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR_CATEGORY&quot;,&quot;MNP OUT&quot;));
			SetFieldValue(&quot;VF Port Id&quot;, strPortId);
			SetFieldValue(&quot;SR Cut Over Date&quot;, strPortingTime);
			SetFieldValue(&quot;VF TA Contact Name&quot;, strCorpContactName);
			SetFieldValue(&quot;VF TA Contact Phone&quot;, strCorpContactPhone);
			SetFieldValue(&quot;VF MNP Request ID&quot;, strReferenceNumber);
			SetFieldValue(&quot;Tax ID&quot;, strCorporateRegNum);
			SetFieldValue(&quot;VF TA Customer Name&quot;, strAccountName);
			SetFieldValue(&quot;Owned By Id&quot;,&quot;&quot;);
			SetFieldValue(&quot;SR Recepient Operator&quot;,strRecipient);
			SetFieldValue(&quot;SR Donor Operator&quot;,&quot;VODAFONE&quot;);
			SetFieldValue(&quot;VF Current Req Date&quot;,currReqDate);
			//Account Id received of F251 by Tibco
			if (SkipCR733 != &quot;Y&quot;) 
				SetFieldValue(&quot;Account Id&quot;,strAccntId);
			WriteRecord();
			strSRNumber = GetFieldValue(&quot;SR Number&quot;);
			strId = GetFieldValue(&quot;Id&quot;);
			strCreated = GetFieldValue(&quot;Created&quot;);
			strUpdated = GetFieldValue(&quot;Updated&quot;);
			psMSISDN = Inputs.GetChild(0).GetChild(0);
			intMaxVal = psMSISDN.GetChildCount();
			for(intCounter = 0; intCounter &lt; intMaxVal; intCounter++)
			{
				strMSISDN = psMSISDN.GetChild(intCounter).GetProperty(&quot;MSISDN&quot;);
				with(bcMNPPortOutMSISDN)
				{
				NewRecord(NewAfter);
				SetFieldValue(&quot;VF MSISDN&quot;, strMSISDN);
				SetFieldValue(&quot;VF ReqCustTCID&quot;, sNationalID);
				SetFieldValue(&quot;VF ReqCustName&quot;, sName);
				if (sIsConsumerRequest == &quot;Y&quot;)			
				  SetFieldValue(&quot;VF ReqCustSurName&quot;, sSurname);
				else
				  SetFieldValue(&quot;VF ReqCustSurName&quot;, strCorpContactName);
				SetFieldValue(&quot;VF ReqCustTaxId&quot;, strCorporateRegNum);		  
				SetFieldValue(&quot;VF ReqCustFatherName&quot;, sFathersName);
				SetFieldValue(&quot;VF ReqCustBirthPlace&quot;, sPlaceOfBirth);
				SetFieldValue(&quot;VF ReqCustBirthDate&quot;, sDateOfBirth);
				WriteRecord();
				}
			}
			psWFInput.SetProperty(&quot;RowId&quot;, strSRRequestId);
			psWFInput.SetProperty(&quot;Object Id&quot;, strSRRequestId);
			psWFInput.SetProperty(&quot;sNationalID&quot;, sNationalID);
			if (strType == App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_CREATE_SR_TIBCO&quot;,&quot;MNPPortOutCanc&quot;))
			{
				psWFInput.SetProperty(&quot;ProcessName&quot;, &quot;VF MNP PortOut Cancellation Workflow&quot;);
				bsWPRAsync.InvokeMethod(&quot;RunProcess&quot;, psWFInput, psWFOutput);
			} 
			else
			{
				with(psWFInput)
				{
					if (sIsConsumerRequest == &quot;Y&quot;)
						SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU MNP SR AutoReject Consumer&quot;);
					else
						SetProperty(&quot;ProcessName&quot;, &quot;VF MNP SR AutoReject&quot;);					
					bsWPRAsync.InvokeMethod(&quot;RunProcess&quot;, psWFInput, psWFOutput);
				}
				psExInput.SetProperty(&quot;SrId&quot;,strSRRequestId);
				extractHierarchyBS.InvokeMethod(&quot;extractMNPOut&quot;,psExInput,psExOutput);
				if (sIsConsumerRequest == &quot;Y&quot;)//ESANTOS-VFTRCBU-34916
				{
					InvokeMethod(&quot;RefreshBusComp&quot;);
					SetFieldValue(&quot;VF TA Cod Flag&quot;, &quot;Y&quot;);
					SetFieldValue(&quot;VF MNP OUT Processed&quot;, &quot;Workable&quot;);
					WriteRecord();
				}	
			}
		} 
	}
	else
	{
		psMSISDN=Inputs.GetChild(0).GetChild(0);
		intMaxVal=psMSISDN.GetChildCount();
		for(intCounter = 0; intCounter &lt; intMaxVal; intCounter++)
		{
			strMSISDN = psMSISDN.GetChild(intCounter).GetProperty(&quot;MSISDN&quot;);
			psMSISDNList.SetProperty(strMSISDN,strMSISDN);
		}
		while (booRecordExists)
		{
			strSrId = GetFieldValue (&quot;Id&quot;);
			strStatus = GetFieldValue (&quot;Status&quot;);
			strSubStatus = GetFieldValue (&quot;Sub-Status&quot;);
			if (strStatus == App.InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;))
			{
				 expException.errCode = &quot;087&quot;;
				 expException.errText = App.LookupMessage(&quot;VF Message Category&quot;, &quot;087&quot;);
				 throw expException;
			}
			with(bcMNPPortOutMSISDN)
			{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF MSISDN&quot;);
			SetSearchSpec(&quot;SR Id&quot;, strSrId);
			ExecuteQuery(ForwardOnly);
			}
			booRecordExists1 = bcMNPPortOutMSISDN.FirstRecord();
			while(booRecordExists1)
			{
				strMSISDN = bcMNPPortOutMSISDN.GetFieldValue(&quot;VF MSISDN&quot;);
				if(psMSISDNList.PropertyExists(strMSISDN))
				{
					SetFieldValue(&quot;SR Cut Over Date&quot;, strPortingTime);
					SetFieldValue(&quot;VF TA Cod Flag&quot;, &quot;Y&quot;);
					SetFieldValue(&quot;VF MNP OUT Processed&quot;, &quot;Workable&quot;);
					WriteRecord();
					booRecordExists1 = false;
				}
				else
					booRecordExists1 = bcMNPPortOutMSISDN.NextRecord();
			}
			booRecordExists = NextRecord();
		}
	}
}
psNumber=Inputs.GetChild(0);
intMaxVal=psNumber.GetChild(0).GetChildCount();
for (intCounter = 0; intCounter &lt; intMaxVal; intCounter++)
{
	strMSISDN  	= psNumber.GetChild(0).GetChild(intCounter).GetProperty(&quot;MSISDN&quot;);
	inProp.SetProperty(&quot;strMSISDN&quot;,strMSISDN); 
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
	strAutoSrcExpr = &quot;[VF MSISDN] = &apos;&quot;+strMSISDN+&quot;&apos;&quot;;
	with(bcMNPPortOutMSISDN)
	{
	ClearToQuery();
	SetViewMode(AllView);
	ActivateField(&quot;VF MSISDN&quot;);
	ActivateField(&quot;VF Status&quot;);
	ActivateField(&quot;VF Reason&quot;);
	SetSearchExpr(strAutoSrcExpr);
	ExecuteQuery(ForwardOnly);
	}
		booRecordExists1 = bcMNPPortOutMSISDN.FirstRecord ();
		while(booRecordExists1)
		{
		//ESANTOS DEF-2337
			var oBS	= TheApplication().GetService(&quot;VF MNP Service Utility&quot;);
			var sAccountPayType;
			var BSInputs = TheApplication().NewPropertySet();
			var BSOutputs = TheApplication().NewPropertySet();
			BSInputs.SetProperty(&quot;MSISDN&quot;,strMSISDN);
			oBS.InvokeMethod(&quot;GetAccountPayType&quot;,BSInputs,BSOutputs);
			sAccountPayType = BSOutputs.GetProperty(&quot;AccountPayType&quot;);
			psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;AccountPayType&quot;, sAccountPayType);
		//End
		strAutoRejStat = bcMNPPortOutMSISDN.GetFieldValue(&quot;VF Status&quot;);
		var strAccountType=bcServiceRequest.GetFieldValue(&quot;Market Class&quot;);//cr129 retrofit
		if(strAutoRejStat==App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;))
		{
			psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;, &quot;SE&quot;);
			psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;RejectCode&quot;,bcMNPPortOutMSISDN.GetFieldValue(&quot;VF Reason Code&quot;));
		} 
		else if(strAutoRejStat == App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autoaccepted&quot;))//CR129 ALINO retrofit
		{
			if(strAccountType==&quot;Consumer&quot;){
				psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;,&quot;SX&quot;);
			}
			else{
				psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;,&quot;SB&quot;);
			}
		}
		else{
			psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;,&quot;SB&quot;);
		}
		booRecordExists1=bcMNPPortOutMSISDN.NextRecord();
		}
	}
	
with(Outputs){
if (SkipCR733 != &quot;Y&quot;)
SetProperty(&quot;Account Id&quot;,strAccntId);
else
SetProperty(&quot;AccountId&quot;,strAccountId);
SetProperty(&quot;Area&quot;,strArea);
SetProperty(&quot;SubArea&quot;,strSubArea);
SetProperty(&quot;Id&quot;,strId);
SetProperty(&quot;CreationDate&quot;,strCreated);
SetProperty(&quot;PortID&quot;,strPortId);
SetProperty(&quot;PortType&quot;,strPortType);
SetProperty(&quot;PortingTime&quot;,strPortingTime);
SetProperty(&quot;CreationDate&quot;,strCreated);
SetProperty(&quot;Status&quot;,strStatus);
SetProperty(&quot;SubStatus&quot;,strSubStatus);
SetProperty(&quot;Type&quot;,strType);
SetProperty(&quot;UpdateDate&quot;,strUpdated);
SetProperty(&quot;SRNumber&quot;,strSRNumber);
SetProperty(&quot;Sender&quot;,strSender);
SetProperty(&quot;Recipient&quot;,strRecipient);
SetProperty(&quot;Comments&quot;,strComments);
SetProperty(&quot;OtherInfo&quot;,strOtherInfo);
SetProperty(&quot;ReferenceNumber&quot;,strReferenceNumber);
SetProperty(&quot;CorpContactName&quot;,strCorpContactName);
SetProperty(&quot;CorpContactPhone&quot;,strCorpContactPhone);
SetProperty(&quot;CorporateRegNum&quot;,strCorporateRegNum);
SetProperty(&quot;STATUS_CODE&quot;,&quot;0&quot;);
SetProperty(&quot;ERROR_CODE&quot;,&quot;0&quot;);
SetProperty(&quot;ERROR_DESCRIPTION&quot;,&quot;&quot;);
AddChild (psNumber);
}	
}
catch(e)
{
Outputs.SetProperty(&quot;STATUS_CODE&quot;, &quot;1&quot;);
Outputs.SetProperty(&quot;ERROR_CODE&quot;, e.errCode);
Outputs.SetProperty(&quot;ERROR_DESCRIPTION&quot;, e.errText);
Outputs.SetProperty(&quot;PortID&quot;, strPortId);
kpiStatus = &quot;KO &quot;+e.errText ;
throw(e);
}
finally
{
bcAccount=null;
bcMNPPortOutMSISDN=null;
bsWPRAsync=null;
boAccount=null;
psWFInput=null;
psWFOutput=null;
psKPIin=null;
psKPIout=null;
psExOutput=null;
psExInput=null;
extractHierarchyBS=null;
bsGetService=null;
BS=null;
psSRInput=null;
psSROutput=null;
expException=null;
SRInputs=null;
SROutputs=null;
psMSISDN=null;
psNumber=null;
inProp=null;
outProp=null;
bcServiceRequest=null;
boServiceRequest=null;
App=null;
oBS=null;
}
}"
			   SEQUENCE="4"
			   UPDATED="11/28/2016 15:39:28"
			   UPDATED_BY="EFONSECA"
			   CREATED="11/16/2009 08:48:45"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSR_MNPPortIn"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSR_MNPPortIn(sOrderId)
{

  /* +++ 
    WA#18: New function responsible to create SRs for inbound requests for MNP Port In SR. Uses legacy specific code for creating SR Port In
    Port In SRs are now created on external request (before CBU project, Port In SRs were created internally by Siebel)
  --- */  
    
  try 
  {
    if (sOrderId == null || sOrderId == &quot;&quot;)
    {
      TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;319&quot;));
    }
    
	var inProp 	:PropertySet  = TheApplication().NewPropertySet();
	var outProp	: PropertySet = TheApplication().NewPropertySet();
	var oBS		: Service     = TheApplication().GetService(&quot;VFTREBU Convertion Server II BS&quot;);
	inProp.SetProperty(&quot;orderId&quot;, sOrderId);
	oBS.InvokeMethod(&quot;Call_BS_Create_SR&quot;,inProp, outProp);
	
  }
  catch (e) 
  { 
	throw(e);
  } 
  finally
  {
	inProp  = null;
	outProp = null;
	oBS     = null;
  }
}"
			   SEQUENCE="5"
			   UPDATED="01/27/2015 09:41:40"
			   UPDATED_BY="MSOUSA"
			   CREATED="01/27/2015 09:41:40"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCurrentDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCurrentDate() {
	//Created due to Oracle Bug 10589024 : [CR#12-1XHF9OH][FR#12-1XHF9P2] CLIB LIBRARY AND DATE OBJECT HAVE DIFFERENT RESUL
	//Date constructor does not work properly in HP-UX

	var currentDate : chars;
	Clib.strftime(currentDate, &apos;%m/%d/%Y %H:%M:%S&apos;, Clib.localtime(Clib.time()));
	 
	return new Date(currentDate);
}"
			   SEQUENCE="7"
			   UPDATED="04/01/2016 10:47:16"
			   UPDATED_BY="FGUEDES"
			   CREATED="04/01/2016 10:47:16"
			   CREATED_BY="FGUEDES">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;CreateSR&quot;)
	{
	
	    // Business Service &quot;VF MNP Service&quot; and method &quot;CreateSR&quot; exposed as a WS to create SRs upon inbound requests 
		CreateSR (Inputs, Outputs);		
		return (CancelOperation);
	}
	return (ContinueOperation);
}"
			   SEQUENCE="11"
			   UPDATED="04/01/2016 10:47:16"
			   UPDATED_BY="FGUEDES"
			   CREATED="11/16/2009 08:35:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateCancelSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateCancelSR (Inputs, Outputs)
{
	try
	{
	
		var strSRId		= Inputs.GetProperty(&quot;RowId&quot;);
		var strTypeCanc	= Inputs.GetProperty(&quot;TypeCanc&quot;);

		/*retrieve triplet for Port Out Cancellation*/
	    var psSRInput :PropertySet  = TheApplication().NewPropertySet();
     	var psSROutput :PropertySet = TheApplication().NewPropertySet();
		psSRInput.SetProperty(&quot;strType&quot;,strType);
		psSRInput.SetProperty(&quot;strArea&quot;,strArea);
		psSRInput.SetProperty(&quot;strSubArea&quot;,strSubArea);
		AskForTriplet(psSRInput,psSROutput);
		strTypeCanc    	  	  = psSROutput.GetProperty(&quot;strType&quot;);
		var strAreaCanc 	  = psSROutput.GetProperty(&quot;strArea&quot;);
		var strSubAreaCanc    = psSROutput.GetProperty(&quot;strSubArea&quot;);
		/**/

	

		var strSRSrcExpr  = &quot;[Id] = &apos;&quot;+strSRId+&quot;&apos;&quot;;
		var strParSrcExpr = &quot;&quot;;
		var strPortId     = &quot;&quot;;
		var strType       = &quot;&quot;;
		var strArea       = &quot;&quot;;
		var strSubArea    = &quot;&quot;;
		var strCanSRFlag  = &quot;N&quot;;
		var strOutSRFlag  = &quot;N&quot;;
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var booRecordExists;
		var booParRecordExists;

		var boServiceRequest :BusObject = TheApplication ().GetBusObject (&quot;Service Request&quot;);
		var bcServiceRequest :BusComp 	= boServiceRequest.GetBusComp (&quot;Service Request&quot;);
		var bcMNPPortOut 	 :BusComp 	= boServiceRequest.GetBusComp (&quot;VF MNP Port Out MSISDN&quot;);

		var boParServiceRequest :BusObject = TheApplication ().GetBusObject (&quot;VF Service Request&quot;);
		var bcParServiceRequest :BusComp   = boParServiceRequest.GetBusComp (&quot;Service Request&quot;);
		

		bcServiceRequest.ClearToQuery ();
		bcServiceRequest.SetViewMode (AllView);
		bcServiceRequest.ActivateField (&quot;VF Port Id&quot;);
		// Begin: Review Input validation: Scripting 15 null check Added 16may2012 Udbhav IDC
		inProp.SetProperty(&quot;strSRId&quot;,strSRId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End
		bcServiceRequest.SetSearchExpr (strSRSrcExpr);
		
		bcMNPPortOut.ClearToQuery ();
		bcMNPPortOut.SetViewMode (AllView);
		bcMNPPortOut.ActivateField (&quot;VF Status&quot;);
		bcMNPPortOut.ActivateField (&quot;VF Reason&quot;);
		
		bcServiceRequest.ExecuteQuery (ForwardOnly);

		if (bcServiceRequest.FirstRecord ())
		{
		
			strPortId = bcServiceRequest.GetFieldValue (&quot;VF Port Id&quot;);	
			strParSrcExpr = &quot;[VF Port Id] = &apos;&quot;+strPortId+&quot;&apos; AND [Id] &lt;&gt; &apos;&quot;+strSRId+&quot;&apos;&quot;;

			bcParServiceRequest.ClearToQuery ();
			bcParServiceRequest.SetViewMode (AllView);
				bcParServiceRequest.ActivateField (&quot;SR Type&quot;);
				bcParServiceRequest.ActivateField (&quot;Area&quot;);
				bcParServiceRequest.ActivateField (&quot;Sub-Area&quot;);
				bcParServiceRequest.ActivateField (&quot;VF Port Id&quot;);
			// Begin: Review Input validation: Scripting 15 null check Added 16may2012 Udbhav IDC
			inProp = TheApplication().NewPropertySet();
			inProp.SetProperty(&quot;strPortId&quot;,strPortId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			bcParServiceRequest.SetSearchExpr (strParSrcExpr);
			bcParServiceRequest.ExecuteQuery (ForwardOnly);//Scripting 31: No child query present 16may2012 Udbhav IDC VFTK
			booParRecordExists = bcParServiceRequest.FirstRecord ();
			if (booParRecordExists)
			{
				while (booParRecordExists)
				{
				
					strType    = bcParServiceRequest.GetFieldValue (&quot;SR Type&quot;);
					strArea    = bcParServiceRequest.GetFieldValue (&quot;Area&quot;);
					strSubArea = bcParServiceRequest.GetFieldValue (&quot;Sub-Area&quot;);

					if ((strType == strTypeCanc)&amp;&amp; (strArea == strAreaCanc) &amp;&amp; (strSubArea == strSubAreaCanc))
					{
						strCanSRFlag = &quot;Y&quot;;
					}
					else
					{
						strOutSRFlag = &quot;Y&quot;;
					}
					booParRecordExists = bcParServiceRequest.NextRecord ();
				}

				if (strCanSRFlag == &quot;Y&quot;)
				{
					
					booRecordExists = bcMNPPortOut.FirstRecord ();
					while (booRecordExists)
					{  /*the reason must be choosed correctly. ASK TO CT in order to obtain the correct values
					    ****************************************************************************************/
					
							bcMNPPortOut.SetFieldValue (&quot;VF Status&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
							bcMNPPortOut.SetFieldValue (&quot;VF Reason&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_PORT_OUT_REASON&quot;,&quot;Reason 002&quot;));
						booRecordExists = bcMNPPortOut.NextRecord ();
					}
					Outputs.SetProperty (&quot;DoNotProcess&quot;, &quot;Y&quot;);
				}

				if (strOutSRFlag == &quot;N&quot;)
				{
				
					booRecordExists = bcMNPPortOut.FirstRecord ();
					while (booRecordExists)
					{
					    /*the reason must be choosed correctly. ASK TO CT in order to obtain the correct values
					    ****************************************************************************************/
					
							bcMNPPortOut.SetFieldValue (&quot;VF Status&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
							bcMNPPortOut.SetFieldValue (&quot;VF Reason&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_PORT_OUT_REASON&quot;,&quot;Reason 003&quot;));
						booRecordExists = bcMNPPortOut.NextRecord ();
					}
					Outputs.SetProperty (&quot;DoNotProcess&quot;, &quot;Y&quot;);
				}
				bcMNPPortOut.WriteRecord ();
			} else 
			{
			
				booRecordExists = bcMNPPortOut.FirstRecord ();
				while (booRecordExists)
				{   /*the reason must be choosed correctly. ASK TO CT in order to obtain the correct values
					    ****************************************************************************************/
			
						bcMNPPortOut.SetFieldValue (&quot;VF Status&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;));
						bcMNPPortOut.SetFieldValue (&quot;VF Reason&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;MNP_PORT_OUT_REASON&quot;,&quot;Reason 001&quot;));
					booRecordExists = bcMNPPortOut.NextRecord ();
				}
				bcMNPPortOut.WriteRecord ();
				Outputs.SetProperty (&quot;DoNotProcess&quot;, &quot;Y&quot;);
			}
		}
	}
	catch (e)
	{
	 throw(e);
	}
	finally
	{
	

		psSRInput       	= null;
		psSROutput          = null;
		booRecordExists     = null;
		bcServiceRequest    = null;
		bcMNPPortOut        = null;
		boServiceRequest    = null;
		bcParServiceRequest = null;
		boParServiceRequest = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;

	}
}"
			   SEQUENCE="10"
			   UPDATED="04/01/2016 10:47:16"
			   UPDATED_BY="FGUEDES"
			   CREATED="03/01/2010 17:34:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="callKPI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function callKPI(Inputs,Outputs)
{
	var SrId 				= Inputs.GetProperty(&quot;SrId&quot;);
	var timestampStart 		= Inputs.GetProperty(&quot;timestampStart&quot;);
	var timestampEnd 		= Inputs.GetProperty(&quot;timestampEnd&quot;);
	var rootTransactionId 	= Inputs.GetProperty(&quot;rootTransactionId&quot;);
	var kpiStatus 			= Inputs.GetProperty(&quot;kpiStatus&quot;);

	var bsACSGeneralOp : Service;
	var bsIn :PropertySet;
	var bsOut :PropertySet;

	try
	{
		if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)
		 ||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;C&quot;)
		 ||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;O&quot;))
		{
			 bsACSGeneralOp = TheApplication().GetService(&quot;ACS General Operations&quot;);
			 bsIn 			= TheApplication().NewPropertySet();
			 bsOut 			= TheApplication().NewPropertySet();
	
			var processName = &quot;VF MNP Service&quot;;
			var status 		= &quot;OK&quot;;
			var task 		= &quot;BS_VF MNP Service_2&quot;;
			var userId 		= TheApplication().LoginName();
	
				bsIn.SetProperty(&quot;UserId&quot;,userId);
				bsIn.SetProperty(&quot;description&quot;,&quot;VF MNP Service&quot;);
				bsIn.SetProperty(&quot;kpiRef&quot;,SrId);
				bsIn.SetProperty(&quot;processName&quot;,processName);
				bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
				bsIn.SetProperty(&quot;status&quot;,kpiStatus);
				bsIn.SetProperty(&quot;task&quot;,task);
				bsIn.SetProperty(&quot;timestampEnd&quot;,timestampEnd);
				bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);
				bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
				var output = bsOut.GetProperty(&quot;result&quot;);
				return output;
		}
	}
	finally
	{
		bsOut = null;
		bsIn = null;
		bsACSGeneralOp = null;
	}
		
}"
			   SEQUENCE="3"
			   UPDATED="08/22/2012 18:35:19"
			   UPDATED_BY="SADMIN"
			   CREATED="07/02/2010 16:59:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="createSRCns"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function createSRCns(Inputs, Outputs)
{
	try{
		var App = TheApplication();
		var strSender 		= Inputs.GetProperty(&quot;Sender&quot;);
		var strPortId 		= Inputs.GetProperty(&quot;PortID&quot;);
		var strPortType 	= Inputs.GetProperty(&quot;PortType&quot;);
		var strPortingTime 	= Inputs.GetProperty(&quot;PortingTime&quot;);
		var strOtherInfo 	= Inputs.GetProperty(&quot;OtherInfo&quot;);
		var strRecipient 	= Inputs.GetProperty(&quot;Recipient&quot;);
		var strReferenceNumber = Inputs.GetProperty(&quot;ReferenceNumber&quot;);
		var strComments 	= Inputs.GetProperty(&quot;Comments&quot;);
		var strType 		= Inputs.GetProperty(&quot;Type&quot;);
		var strArea 		= Inputs.GetProperty(&quot;Area&quot;);
		var strSubArea 		= Inputs.GetProperty(&quot;SubArea&quot;);
		var strRootTransactionId = Inputs.GetProperty(&quot;RootTransactionId&quot;);
		var strSequenceNum 	= Inputs.GetProperty(&quot;SequenceNum&quot;);
		var currReqDate 	= Inputs.GetProperty(&quot;CurrentReqDate&quot;);
		var TC_Id 			= Inputs.GetProperty(&quot;NationalID&quot;);
		var strName 		= Inputs.GetProperty(&quot;Name&quot;);
		var strSurname 		= Inputs.GetProperty(&quot;SurName&quot;);
		var strPlaceBirth 	= Inputs.GetProperty(&quot;PlaceOfBirth&quot;);
		var strFatherName 	= Inputs.GetProperty(&quot;FathersName&quot;);
		var strBirthDate 	= Inputs.GetProperty(&quot;DateOfBirth&quot;);
		
		var strAutoReject = App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autorejected&quot;);
		var strAutoAccept = App.InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_STATUS&quot;,&quot;Autoacceptance&quot;);
		var strSRopen 	  = App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;);
		var strSRclose 	  = App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;);
		var strConsumer   = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;);
		
		var psSRInput :PropertySet 	= App.NewPropertySet();
		var psSROutput :PropertySet = App.NewPropertySet();
		var psNumber :PropertySet 	= App.NewPropertySet();
		
		var boHPServiceReq :BusObject = App.GetBusObject(&quot;HP Service Request&quot;);
		var bcHPServiceReq :BusComp = boHPServiceReq.GetBusComp(&quot;HP Service Request&quot;);
		var boAccount :BusObject 	= TheApplication ().GetBusObject (&quot;Account&quot;);
		var bcAccount :BusComp 		= boAccount.GetBusComp (&quot;Account&quot;);
		var inProp 	:PropertySet	= App.NewPropertySet();
		var outProp :PropertySet	= App.NewPropertySet();
		var BS 		:Service		= App.GetService(&quot;VF TRK Utilities&quot;);
		var strSRNumber 	= &quot;&quot;;
		var strStatus 		= &quot;&quot;;
		var strId 			= &quot;&quot;;
		var strSubStatus 	= &quot;&quot;;
		var strCreated 		= &quot;&quot;;
		var strUpdated 		= &quot;&quot;;
		var strAccountId 	= &quot;&quot;;
		var strAccountName 	= &quot;&quot;;
		var strAccountClass = &quot;&quot;;
		var strCustomerCode = &quot;&quot;;
		var strAccountTaxId = &quot;&quot;;
		var strSRRequestId 	= &quot;&quot;;
		var strMernisStatus = &quot;&quot;;
		
		psSRInput.SetProperty(&quot;strType&quot;,strType);
		psSRInput.SetProperty(&quot;strArea&quot;,strArea);
		psSRInput.SetProperty(&quot;strSubArea&quot;,strSubArea);
		AskForTriplet(psSRInput,psSROutput);
		var strTypeInt 	  = psSROutput.GetProperty(&quot;strType&quot;);
		var strAreaInt 	  = psSROutput.GetProperty(&quot;strArea&quot;);
		var strSubAreaInt = psSROutput.GetProperty(&quot;strSubArea&quot;);
		
		var strAccSrcExpr  = &quot;[Market Class] = &apos;&quot;+strConsumer+&quot;&apos; AND [Contact First Name] = &apos;&quot;+strName+&quot;&apos; AND [Contact Last Name] = &apos;&quot;+strSurname+&quot;&apos; AND [VF Mernis Birth Place] = &apos;&quot;+strPlaceBirth+&quot;&apos; AND [VF Mernis Father Name] = &apos;&quot;+strFatherName+&quot;&apos; AND [Account Status Code] = &apos;&quot;+App.InvokeMethod (&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;100&quot;)+&quot;&apos;&quot;;
		var strAccSrcExpr2 = &quot;[Contact SSN] = &apos;&quot;+TC_Id+&quot;&apos; AND [Market Class] = &apos;&quot;+strConsumer+&quot;&apos;&quot;; // Diva Added Consumer condition - C_MSP00000917
		
		
			psNumber 	= Inputs.GetChild(0);
		//Open new/update SR
		strSRRequestId = openNewSr(Inputs, psNumber);
		strStatus = App.InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;);
		if(TC_Id != &quot;&quot; &amp;&amp; TC_Id != &quot;NA&quot;)
		{
			strAccSrcExpr = strAccSrcExpr2;
			
			inProp.SetProperty(&quot;TC_Id&quot;,TC_Id); //Id Validation
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		}
		
		

		with(bcAccount)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Mernis Birth Place&quot;);
			ActivateField(&quot;Market Class&quot;);
			ActivateField(&quot;VF Mernis Status&quot;);
			ActivateField(&quot;Account Number&quot;);
			ActivateField(&quot;VF Tax Number&quot;);
			SetSearchExpr(strAccSrcExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strAccountId 	= GetFieldValue(&quot;Id&quot;);
				strAccountName 	= GetFieldValue(&quot;Name&quot;);
				strAccountClass = GetFieldValue(&quot;Market Class&quot;);
				strMernisStatus = GetFieldValue(&quot;VF Mernis Status&quot;);
				strCustomerCode = GetFieldValue(&quot;Account Number&quot;);
				strAccountTaxId = GetFieldValue(&quot;VF Tax Number&quot;);
				//if(strAccountClass == strConsumer) // Diva removed the if block - C_MSP00000917
				//{
					AutoRejectionCheck(strSRRequestId, TC_Id, psNumber, strAccountId, strMernisStatus, strAccountClass, strCustomerCode, strAccountTaxId);
				//}
			}
			else
			{ //Autoreject MSISDNs &amp; Close SR
				manageSRMSISDN(strSRRequestId, psNumber, strAutoReject, strSRclose);
			}
			//}
		}
		
		inProp.SetProperty(&quot;strSRRequestId&quot;,strSRRequestId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation

		with(bcHPServiceReq)
		{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;HP SR Status&quot;);
				ActivateField(&quot;Sub-Status&quot;);
				ActivateField(&quot;Updated&quot;);
				ActivateField(&quot;SR Number&quot;);
				ActivateField(&quot;Account Id&quot;);
				ActivateField(&quot;VF Port Id&quot;);
				ActivateField(&quot;SR Cut Over Date&quot;);
				ActivateField(&quot;VF MNP Request ID&quot;);
				ActivateField(&quot;SR Number&quot;);
				ActivateField(&quot;Status&quot;);
				ActivateField(&quot;Owned By Id&quot;);
				ActivateField(&quot;VF SR Category&quot;);
				ActivateField(&quot;VF TA Customer Name&quot;);
				ActivateField(&quot;SR Donor Operator&quot;);
				ActivateField(&quot;VF Current Req Date&quot;);
				ActivateField(&quot;SR Recepient Operator&quot;);
				ActivateField(&quot;VF Current Req Date&quot;);
				SetSearchSpec(&quot;Id&quot;,strSRRequestId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					strStatus 		= GetFieldValue(&quot;HP SR Status&quot;);
					strSubStatus 	= GetFieldValue(&quot;Sub-Status&quot;);
					strUpdated 		= GetFieldValue(&quot;Updated&quot;);
					strSRNumber 	= GetFieldValue(&quot;SR Number&quot;);
					strId 			= GetFieldValue(&quot;Id&quot;);
					strCreated 		= GetFieldValue(&quot;Created&quot;);
					SetFieldValue(&quot;VF SR Category&quot;, App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR_CATEGORY&quot;,&quot;MNP OUT&quot;));
					//SetFieldValue(&quot;Account Id&quot;, strAccountId);
					SetFieldValue(&quot;VF Port Id&quot;, strPortId);
					SetFieldValue(&quot;SR Cut Over Date&quot;, strPortingTime);
					SetFieldValue(&quot;VF MNP Request ID&quot;, strReferenceNumber);
					SetFieldValue(&quot;VF TA Customer Name&quot;, strAccountName);
					SetFieldValue(&quot;Owned By Id&quot;,&quot;&quot;);
					SetFieldValue(&quot;SR Recepient Operator&quot;,strRecipient);
					SetFieldValue(&quot;SR Donor Operator&quot;,&quot;VODAFONE&quot;);
					SetFieldValue(&quot;VF Current Req Date&quot;,currReqDate);
					WriteRecord();
				}
		}
		
		Outputs.SetProperty(&quot;AccountId&quot;, strAccountId);
		Outputs.SetProperty(&quot;Area&quot;, strArea);
		Outputs.SetProperty(&quot;SubArea&quot;, strSubArea);
		Outputs.SetProperty(&quot;Id&quot;, strId);
		Outputs.SetProperty(&quot;CreationDate&quot;, strCreated);
		Outputs.SetProperty(&quot;PortID&quot;, strPortId);
		Outputs.SetProperty(&quot;PortType&quot;, strPortType);
		Outputs.SetProperty(&quot;PortingTime&quot;, strPortingTime);
		Outputs.SetProperty(&quot;Status&quot;, strStatus);
		Outputs.SetProperty(&quot;SubStatus&quot;, strSubStatus);
		Outputs.SetProperty(&quot;Type&quot;, strType);
		Outputs.SetProperty(&quot;UpdateDate&quot;, strUpdated);
		Outputs.SetProperty(&quot;SRNumber&quot;, strSRNumber);
		Outputs.SetProperty(&quot;Sender&quot;, strSender);
		Outputs.SetProperty(&quot;Recipient&quot;, strRecipient);
		Outputs.SetProperty(&quot;Comments&quot;, strComments);
		Outputs.SetProperty(&quot;ReferenceNumber&quot;, strReferenceNumber);
		Outputs.SetProperty(&quot;OtherInfo&quot;, strOtherInfo);
		Outputs.SetProperty(&quot;Name&quot;,strName);
		Outputs.SetProperty(&quot;SurName&quot;,strSurname);
		Outputs.SetProperty(&quot;PlaceOfBirth&quot;,strPlaceBirth);
		Outputs.SetProperty(&quot;FathersName&quot;,strFatherName);
		Outputs.SetProperty(&quot;DateOfBirth&quot;,strBirthDate);
		Outputs.SetProperty(&quot;NationalID&quot;,TC_Id);
		Outputs.SetProperty(&quot;STATUS_CODE&quot;, &quot;0&quot;);
		Outputs.SetProperty(&quot;ERROR_CODE&quot;, &quot;0&quot;);
		Outputs.SetProperty(&quot;ERROR_DESCRIPTION&quot;, &quot;&quot;);
		Outputs.AddChild (psNumber);
	}
	catch(e)
	{	
		Outputs.SetProperty (&quot;STATUS_CODE&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ERROR_CODE&quot;, e.errCode);
		Outputs.SetProperty (&quot;ERROR_DESCRIPTION&quot;, e.errText);
		Outputs.SetProperty (&quot;PortID&quot;, strPortId);
		throw(e);
	}
	finally
	{
		psSRInput = null;
		psSROutput = null;
		psNumber = null;
		bcAccount = null;
		boAccount = null;
		bcHPServiceReq = null;
		boHPServiceReq = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="02/04/2015 14:20:14"
			   UPDATED_BY="PSILVA"
			   CREATED="01/27/2012 12:50:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="manageSRMSISDN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function manageSRMSISDN(SRId, psNumber, statusMSISDN, statusSR)
{
	try
	{
		var boServiceRequest :BusObject = TheApplication().GetBusObject (&quot;Service Request&quot;);
		var bcServiceRequest :BusComp   = boServiceRequest.GetBusComp (&quot;Service Request&quot;);
		var bcMNPPortOutMSISDN :BusComp = boServiceRequest.GetBusComp (&quot;VF MNP Port Out MSISDN&quot;);
		
		var strMSISDN = &quot;&quot;;
		var intCount = 0;
		var intCounter = 0;
		var strRejectReason = &quot;OPR002013&quot;;//Inconsistent company and user
		
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;SRId&quot;,SRId); //Id Validation
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		
		with(bcServiceRequest)
		{
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec(&quot;Id&quot;,SRId);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				intCount = psNumber.GetChild(0).GetChildCount();
				for (intCounter = 0; intCounter &lt; intCount; intCounter++)
				{
					strMSISDN = psNumber.GetChild(0).GetChild(intCounter).GetProperty(&quot;MSISDN&quot;);
					inProp.SetProperty(&quot;strMSISDN&quot;,strMSISDN); //Id Validation
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
				//	strRejectReason = psNumber.GetChild(0).GetChild(intCounter).GetProperty(&quot;RejectCode&quot;);
					var strAutoSrcExpr = &quot;[VF MSISDN] = &apos;&quot;+strMSISDN+&quot;&apos;&quot;;
					with(bcMNPPortOutMSISDN)
					{
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;VF MSISDN&quot;);
						ActivateField(&quot;VF Status&quot;);
						ActivateField(&quot;VF Reason&quot;);
						SetSearchExpr(strAutoSrcExpr);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord());
						{
							SetFieldValue(&quot;VF Status&quot;,statusMSISDN);
							SetFieldValue(&quot;VF Reason&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MNP_REJECTION_REASON&quot;,strRejectReason));
							WriteRecord();
							psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;, &quot;SE&quot;);
							psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;RejectCode&quot;, strRejectReason);
						}
					}
				}
				SetFieldValue(&quot;Status&quot;,statusSR);
				WriteRecord();
			}
		}
	}
	finally
	{
		BS = null;
		inProp = null;
		outProp = null;
		bcMNPPortOutMSISDN = null;
		bcServiceRequest = null;
		boServiceRequest = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="04/01/2016 10:47:16"
			   UPDATED_BY="FGUEDES"
			   CREATED="01/27/2012 12:50:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="openNewSr"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function openNewSr(Inputs, psNumber)
{
	try
	{
		var boServiceRequest :BusObject = TheApplication().GetBusObject (&quot;Service Request&quot;);
		var boAssetHP :BusObject  		= TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var bcServiceRequest :BusComp 	= boServiceRequest.GetBusComp (&quot;Service Request&quot;);
		var bcMNPPortOutMSISDN :BusComp = boServiceRequest.GetBusComp (&quot;VF MNP Port Out MSISDN&quot;);
		var bcAssetHP :BusComp 			= boAssetHP.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		
		var strType 	= Inputs.GetProperty(&quot;Type&quot;);
		var strArea 	= Inputs.GetProperty(&quot;Area&quot;);
		var strSubArea 	= Inputs.GetProperty(&quot;SubArea&quot;);
		var strPortId 	= Inputs.GetProperty(&quot;PortID&quot;);
		var strRootTransactionId = Inputs.GetProperty(&quot;RootTransactionId&quot;);
		var strPortingTime = Inputs.GetProperty(&quot;PortingTime&quot;);
		
		var psSRInput :PropertySet 	= TheApplication().NewPropertySet();
		var psSROutput :PropertySet = TheApplication().NewPropertySet();
		var SRInputs :PropertySet 	= TheApplication().NewPropertySet();
		var SROutputs :PropertySet 	= TheApplication().NewPropertySet();
		var psKPIin :PropertySet 	= TheApplication().NewPropertySet();
		var psKPIout :PropertySet 	= TheApplication().NewPropertySet();
		
			psSRInput.SetProperty(&quot;strType&quot;,strType);
			psSRInput.SetProperty(&quot;strArea&quot;,strArea);
			psSRInput.SetProperty(&quot;strSubArea&quot;,strSubArea);
		AskForTriplet(psSRInput,psSROutput);
		var strTypeInt 	  = psSROutput.GetProperty(&quot;strType&quot;);
		var strAreaInt 	  = psSROutput.GetProperty(&quot;strArea&quot;);
		var strSubAreaInt = psSROutput.GetProperty(&quot;strSubArea&quot;);
		
		var today 			= GetCurrentDate();
		var timestampStart 	= ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());

		var strPostpaid 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Postpaid&quot;);
		var strPrepaid 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_PAYMENT_MODALITY&quot;,&quot;Prepaid&quot;);
		var strSRSrcExpr 	= &quot;[VF Port Id] = &apos;&quot;+strPortId+&quot;&apos; AND [SR Type] = &apos;&quot;+strTypeInt+&quot;&apos; AND [Area] = &apos;&quot;+strAreaInt+&quot;&apos; AND [Sub-Area] = &apos;&quot;+strSubAreaInt+&quot;&apos;&quot;;
		var strSRRequestId 	= &quot;&quot;;
		var booRecordExists;
		var bsGetService :Service;
		var psMSISDN;
		var strMSISDN = &quot;&quot;;
		var intCount = 0;
		var intCounter = 0;
		var kpiStatus = &quot;OK&quot;;

		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strPortId&quot;,strPortId);
		inProp.SetProperty(&quot;strTypeInt&quot;,strTypeInt);
		inProp.SetProperty(&quot;strAreaInt&quot;,strAreaInt);
		inProp.SetProperty(&quot;strSubAreaInt&quot;,strSubAreaInt);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with(bcServiceRequest)
		{
			ClearToQuery();
			SetViewMode(AllView);
				ActivateField(&quot;VF Port Id&quot;);
				ActivateField(&quot;SR Type&quot;);
				ActivateField(&quot;Tax ID&quot;);
				ActivateField(&quot;SR Cut Over Date&quot;);
				ActivateField(&quot;Status&quot;);
				ActivateField(&quot;Sub-Status&quot;);
				ActivateField(&quot;VF TA Cod Flag&quot;);
				ActivateField(&quot;VF MNP OUT Processed&quot;);
			SetSearchExpr(strSRSrcExpr);
			ExecuteQuery(ForwardOnly);
			booRecordExists = FirstRecord();
			if(!booRecordExists || (strType == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_CREATE_SR_TIBCO&quot;,&quot;MNPPortOutCanc&quot;))) 
			{ // SR doesn&apos;t exist		
				bsGetService = TheApplication().GetService (&quot;ACS General Operations&quot;);
					SRInputs.SetProperty(&quot;Type&quot;, strTypeInt);
					SRInputs.SetProperty(&quot;Area&quot;, strAreaInt);
					SRInputs.SetProperty(&quot;Sub Area&quot;, strSubAreaInt);
					SRInputs.SetProperty(&quot;Status&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Open&quot;));
					SRInputs.SetProperty(&quot;Sub Status&quot;,TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;,&quot;Assigned&quot;));
					SRInputs.SetProperty(&quot;Owner Group&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SR _MNP_OUT_DIVISION&quot;,&quot;DKT Port Out&quot;));
				bsGetService.InvokeMethod (&quot;CreateSR&quot;, SRInputs, SROutputs); 
					strSRRequestId = SROutputs.GetProperty (&quot;Service Request Id&quot;);
				
					psKPIin.SetProperty(&quot;SrId&quot;,strSRRequestId);
					psKPIin.SetProperty(&quot;timestampEnd&quot;,&quot;&quot;);
					psKPIin.SetProperty(&quot;rootTransactionId&quot;,strRootTransactionId);
					psKPIin.SetProperty(&quot;kpiStatus&quot;,kpiStatus);
					psKPIin.SetProperty(&quot;timestampStart&quot;,timestampStart);			 
				callKPI(psKPIin,psKPIout);
				
				ClearToQuery();
				SetViewMode(AllView);
					ActivateField(&quot;VF TA Contact Name&quot;); 
					ActivateField(&quot;VF TA First Name&quot;);
				SetSearchSpec(&quot;Id&quot;, strSRRequestId);
				ExecuteQuery(ForwardOnly);
				var booSRRecordExists = FirstRecord ();
				if(booSRRecordExists)
				{
						SetFieldValue(&quot;VF TA Contact Name&quot;, Inputs.GetProperty(&quot;SurName&quot;));
						SetFieldValue(&quot;VF TA First Name&quot;, Inputs.GetProperty(&quot;Name&quot;));
						SetFieldValue(&quot;Tax ID&quot;, Inputs.GetProperty(&quot;NationalID&quot;));
						//SetFieldValue(&quot;VF TA Customer Name&quot;, Inputs.GetProperty(&quot;SurName&quot;));
					WriteRecord();								
				}
				
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Id&quot;,strSRRequestId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					intCount = psNumber.GetChild(0).GetChildCount();
					for(intCounter = 0; intCounter &lt; intCount; intCounter++)
					{
						strMSISDN = psNumber.GetChild(0).GetChild(intCounter).GetProperty(&quot;MSISDN&quot;);
						with(bcMNPPortOutMSISDN)
						{
							NewRecord(NewAfter);
								SetFieldValue(&quot;VF MSISDN&quot;, strMSISDN);
								SetFieldValue(&quot;VF ReqCustFatherName&quot;, Inputs.GetProperty(&quot;FathersName&quot;));
								SetFieldValue(&quot;VF ReqCustSurName&quot;, Inputs.GetProperty(&quot;SurName&quot;));
								SetFieldValue(&quot;VF ReqCustName&quot;, Inputs.GetProperty(&quot;Name&quot;));
								SetFieldValue(&quot;VF ReqCustTCID&quot;, Inputs.GetProperty(&quot;NationalID&quot;));
								SetFieldValue(&quot;VF ReqCustBirthPlace&quot;, Inputs.GetProperty(&quot;PlaceOfBirth&quot;));
								//SetFieldValue(&quot;VF ReqCustBirthDate&quot;, Inputs.GetProperty(&quot;DateOfBirth&quot;));// PROD00029839 
							WriteRecord();
						}
						psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;, &quot;SB&quot;);
						
						with(bcAssetHP)
						{
							ClearToQuery();
							SetViewMode(AllView);
								ActivateField(&quot;VF Account Pay Type&quot;);
							SetSearchSpec(&quot;VF MSISDN&quot;,strMSISDN);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;AccountPayType&quot;,GetFieldValue(&quot;VF Account Pay Type&quot;));	
									
							}
						}
					}
				}
			} else { // SR already exist
					strSRRequestId = GetFieldValue(&quot;Id&quot;);
				var currentStatusSR = GetFieldValue(&quot;Status&quot;);
					SetFieldValue(&quot;SR Cut Over Date&quot;, strPortingTime);
					SetFieldValue(&quot;VF TA Cod Flag&quot;,&quot;Y&quot;);
					SetFieldValue(&quot;VF MNP OUT Processed&quot;,&quot;Workable&quot;);
				WriteRecord();
							
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Id&quot;,strSRRequestId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					intCount = psNumber.GetChild(0).GetChildCount();
					for(intCounter = 0; intCounter &lt; intCount; intCounter++)
					{
						strMSISDN = psNumber.GetChild(0).GetChild(intCounter).GetProperty(&quot;MSISDN&quot;);
						var strAutoSrcExpr = &quot;[VF MSISDN] = &apos;&quot;+strMSISDN+&quot;&apos;&quot;;
						with(bcMNPPortOutMSISDN) {
							ClearToQuery();
							SetViewMode(AllView);
								ActivateField(&quot;VF ReqCustFatherName&quot;);
								ActivateField(&quot;VF ReqCustSurName&quot;);
								ActivateField(&quot;VF ReqCustName&quot;);
								ActivateField(&quot;VF ReqCustTCID&quot;);
								ActivateField(&quot;VF ReqCustBirthPlace&quot;);
							SetSearchExpr(strAutoSrcExpr);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
									SetFieldValue(&quot;VF ReqCustFatherName&quot;, Inputs.GetProperty(&quot;FathersName&quot;));
									SetFieldValue(&quot;VF ReqCustSurName&quot;, Inputs.GetProperty(&quot;SurName&quot;));
									SetFieldValue(&quot;VF ReqCustName&quot;, Inputs.GetProperty(&quot;Name&quot;));
									SetFieldValue(&quot;VF ReqCustTCID&quot;, Inputs.GetProperty(&quot;NationalID&quot;));
									SetFieldValue(&quot;VF ReqCustBirthPlace&quot;, Inputs.GetProperty(&quot;PlaceOfBirth&quot;));
								WriteRecord();
							}
						}
						psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;Status&quot;, &quot;SB&quot;);
						with(bcAssetHP)
						{
							ClearToQuery();
							SetViewMode(AllView);
							ActivateField(&quot;VF Account Pay Type&quot;);
							SetSearchSpec(&quot;VF MSISDN&quot;,strMSISDN);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								psNumber.GetChild(0).GetChild(intCounter).SetProperty(&quot;AccountPayType&quot;,GetFieldValue(&quot;VF Account Pay Type&quot;));	
									
							}
						}
					}
				}
			}
		}
		return(strSRRequestId);
	}
	finally
	{
		BS = null;
		outProp = null;
		inProp = null;
		bsGetService = null;
		bcAssetHP = null;
		bcMNPPortOutMSISDN = null;
		bcServiceRequest = null;
		boAssetHP = null;
		boServiceRequest = null;
		psSRInput = null;
		psSROutput = null;
		SRInputs = null;
		SROutputs = null;
		psKPIin = null;
		psKPIout = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="04/01/2016 10:51:21"
			   UPDATED_BY="FGUEDES"
			   CREATED="01/27/2012 12:50:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



