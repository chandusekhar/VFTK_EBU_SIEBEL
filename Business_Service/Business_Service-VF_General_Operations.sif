<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="Added for VF utility operations
"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF Utilities"
	   UI_FREEZE="N"
	   UPDATED="08/11/2016 14:52:42"
	   UPDATED_BY="SSANTOS"
	   CREATED="03/19/2012 08:24:27"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="Added by VF_OYILDIZ, for doing utility service  for VF

"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF General Operations"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="08/11/2016 15:31:21"
		   UPDATED_BY="SSANTOS"
		   CREATED="03/19/2012 08:24:27"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Utilities"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="03/19/2012 08:24:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddPromotion"
			   UPDATED="03/19/2012 08:24:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="BillCycle"
			   UPDATED="05/17/2012 12:09:30"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2012 12:09:30"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Out"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/17/2012 12:09:30"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2012 12:09:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOLI"
			   UPDATED="01/10/2014 08:22:55"
			   UPDATED_BY="SADMIN"
			   CREATED="01/10/2014 08:22:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ExistOLI"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/10/2014 08:22:55"
				   UPDATED_BY="SADMIN"
				   CREATED="01/10/2014 08:22:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/10/2014 08:22:55"
				   UPDATED_BY="SADMIN"
				   CREATED="01/10/2014 08:22:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateHeaderForTibco"
			   UPDATED="04/06/2012 16:18:42"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CHANNEL"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:42"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Channel"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:42"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Process Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:42"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TIMESTAMP"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:42"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TRANSACTION_ID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:42"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateSearchExpForAddPromotion"
			   UPDATED="03/19/2012 08:24:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ExportLTETransactions"
			   UPDATED="01/20/2014 09:57:34"
			   UPDATED_BY="SADMIN"
			   CREATED="12/30/2013 13:31:31"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ExportLTETransactions"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/20/2014 09:57:34"
				   UPDATED_BY="SADMIN"
				   CREATED="01/20/2014 09:57:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ISCHPOTE : 07/01/2012 : GEN_REQ_694 : Created new"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FieldSanitization"
			   UPDATED="01/09/2013 12:25:08"
			   UPDATED_BY="SADMIN"
			   CREATED="01/09/2013 12:25:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="ISCHPOTE : 07/01/2012 : GEN_REQ_694 : Created new"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="buscompname"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/09/2013 12:25:08"
				   UPDATED_BY="SADMIN"
				   CREATED="01/09/2013 12:25:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="ISCHPOTE : 07/01/2012 : GEN_REQ_694 : Created new"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="busobjname"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/09/2013 12:25:08"
				   UPDATED_BY="SADMIN"
				   CREATED="01/09/2013 12:25:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="ISCHPOTE : 07/01/2012 : GEN_REQ_694 : Created new"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="fieldname"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/09/2013 12:25:08"
				   UPDATED_BY="SADMIN"
				   CREATED="01/09/2013 12:25:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="ISCHPOTE : 07/01/2012 : GEN_REQ_694 : Created new"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="fieldvalue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/09/2013 12:25:08"
				   UPDATED_BY="SADMIN"
				   CREATED="01/09/2013 12:25:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="ISCHPOTE : 07/01/2012 : GEN_REQ_694 : Created new"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="searchspec"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/09/2013 12:25:08"
				   UPDATED_BY="SADMIN"
				   CREATED="01/09/2013 12:25:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FieldStatusSanitization"
			   UPDATED="02/14/2013 12:52:06"
			   UPDATED_BY="SADMIN"
			   CREATED="02/14/2013 12:52:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetAssetInfo"
			   UPDATED="07/17/2014 16:48:07"
			   UPDATED_BY="ACAMBAS"
			   CREATED="04/06/2012 16:18:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Owner Account Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Owner Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Product Part Number"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Root Asset Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/17/2014 16:48:06"
				   UPDATED_BY="ACAMBAS"
				   CREATED="07/17/2014 16:48:06"
				   CREATED_BY="ACAMBAS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF MSISDN"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="searchSpec"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetAssetStatus"
			   UPDATED="04/06/2012 16:18:43"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetBillingAccountStatus"
			   UPDATED="04/06/2012 16:18:43"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Status Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Billing Account Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetCxParameterWithGivenExp"
			   UPDATED="03/19/2012 08:24:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchExp"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/19/2012 08:24:27"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 08:24:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="HasProductExistInOrderWithGivenExp"
			   UPDATED="03/19/2012 08:24:27"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="IsAssetDisconnected"
			   UPDATED="04/06/2012 16:18:43"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Asset Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="0 = Success ; 1 = No Billing Account ; -1: Error Occured"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Error Message"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="True for Active; False for not active and error"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="IsBillingAccountActive"
			   UPDATED="04/06/2012 16:18:43"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Billing Account Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="0 = Success ; 1 = No Billing Account ; -1: Error Occured"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Error Message"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="True for active, False for inactive"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="status"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="IsOrderRequestOpen"
			   UPDATED="04/06/2012 16:18:43"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Asset Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResultMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LookupName"
			   UPDATED="04/06/2012 16:18:43"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="type of the LOV"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Name of the lov"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Value of the field"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Val"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/06/2012 16:18:43"
				   UPDATED_BY="SADMIN"
				   CREATED="04/06/2012 16:18:43"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SanitizationAsset"
			   UPDATED="03/29/2013 12:18:26"
			   UPDATED_BY="SADMIN"
			   CREATED="03/29/2013 12:18:26"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SanitizationAsset"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/29/2013 12:18:26"
				   UPDATED_BY="SADMIN"
				   CREATED="03/29/2013 12:18:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SanitizationOrder"
			   UPDATED="03/04/2013 15:51:45"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2013 15:51:45"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/04/2013 15:51:45"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2013 15:51:45"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Status"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/04/2013 15:51:45"
					   UPDATED_BY="SADMIN"
					   CREATED="03/04/2013 15:51:45"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SanitizationOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2013 15:51:45"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2013 15:51:45"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SanitizationSR"
			   UPDATED="03/04/2013 15:51:46"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2013 15:51:45"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/04/2013 15:51:46"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2013 15:51:45"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Status"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/04/2013 15:51:46"
					   UPDATED_BY="SADMIN"
					   CREATED="03/04/2013 15:51:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SanitizationSR"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2013 15:51:46"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2013 15:51:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SanitizationSRInter"
			   UPDATED="03/04/2013 15:51:46"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2013 15:51:46"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/04/2013 15:51:46"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2013 15:51:46"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Status"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/04/2013 15:51:46"
					   UPDATED_BY="SADMIN"
					   CREATED="03/04/2013 15:51:46"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SanitizationSRInter"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2013 15:51:46"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2013 15:51:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SanitizationVFAccountPayType"
			   UPDATED="03/04/2013 15:51:46"
			   UPDATED_BY="SADMIN"
			   CREATED="03/04/2013 15:51:46"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SanitizationVFAccountPayType"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/04/2013 15:51:46"
				   UPDATED_BY="SADMIN"
				   CREATED="03/04/2013 15:51:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetOrderPreventCancelation"
			   UPDATED="12/05/2013 10:32:35"
			   UPDATED_BY="SADMIN"
			   CREATED="12/05/2013 10:32:35"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetOrderPreventCancelation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/05/2013 10:32:35"
				   UPDATED_BY="SADMIN"
				   CREATED="12/05/2013 10:32:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="VFGetGIBEstablishDate"
			   UPDATED="08/10/2016 22:03:15"
			   UPDATED_BY="SSANTOS"
			   CREATED="08/10/2016 22:02:16"
			   CREATED_BY="SSANTOS">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/10/2016 22:02:40"
				   UPDATED_BY="SSANTOS"
				   CREATED="08/10/2016 22:02:40"
				   CREATED_BY="SSANTOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="out"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/10/2016 22:03:06"
				   UPDATED_BY="SSANTOS"
				   CREATED="08/10/2016 22:03:06"
				   CREATED_BY="SSANTOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddPromotion"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddPromotion(Inputs, Outputs)
{
	var sResult = &quot;&quot;;

	try
	{
		var boOrder       : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcProduct     : BusComp   = boOrder.GetBusComp(&quot;Internal Product&quot;);
		var boLoader      : BusObject = TheApplication().GetBusObject(&quot;ISS CP Loader&quot;);
		var bcObject      : BusComp   = null;
		var bcOrder       : BusComp   = null;
		var bcItem        : BusComp   = null;
		var bcProductPick : BusComp   = null;
		var boHPOrder     : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcHPItem      : BusComp   = null;
		var bcHPItemXA    : BusComp   = null;

		var sPartNum         = Inputs.GetProperty(&quot;PartNum&quot;);	
		var sRootItemId      = Inputs.GetProperty(&quot;RootId&quot;);	
		var sOrderId         = Inputs.GetProperty(&quot;OrderId&quot;);
		var sParentId        = Inputs.GetProperty(&quot;ParentId&quot;);
		var sProductId       = &quot;&quot;;
		var sProductName     = &quot;&quot;;
		var sProductOrigId   = &quot;&quot;;
		var sProductPortId   = &quot;&quot;;
		var sAddedItemId     = &quot;&quot;;
		var sBillAccountId   = &quot;&quot;;
		var sAddedItemAction = &quot;&quot;;
		var bWithItemXA      = false;
		var sStatePicked     = TheApplication ().InvokeMethod(&quot;LookupValue&quot;,&quot;CFG_ITEM_STATE_CD&quot;,&quot;Engine Picked Item&quot;);
		var sStateRequested  = TheApplication ().InvokeMethod(&quot;LookupValue&quot;,&quot;CFG_ITEM_STATE_CD&quot;,&quot;User Requested Item&quot;);

		//BEGIN SCALISKAN DEF-8287 expecting defination of product is like 1103|9082|..
		//following script splits this string add products respectively, first 1103 than 9082 than ..
		var sPartNumArry = sPartNum.split(&quot;|&quot;);
		if(sPartNumArry.length&gt;1)
		{
			var psInput = TheApplication().NewPropertySet();
			var psOuput = TheApplication().NewPropertySet();
			for(var i=0;i&lt;sPartNumArry.length;i++)
			{
				psInput.SetProperty(&quot;PartNum&quot;,sPartNumArry[i]);	
				psInput.SetProperty(&quot;RootId&quot;,sRootItemId);	
				psInput.SetProperty(&quot;OrderId&quot;,sOrderId);
				psInput.SetProperty(&quot;ParentId&quot;,sParentId);
				AddPromotion(psInput, Outputs);
				sParentId= Outputs.GetProperty(&quot;CurrProdId&quot;);
			}
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;&quot;);
			return;
		}
		//BEGIN SCALISKAN DEF-8287 

		IsProductExistInMobileLine(Inputs, Outputs);

		sResult = Outputs.GetProperty(&quot;Result&quot;);

		if (sResult == null || sResult == &quot;&quot; || sResult != &quot;false&quot;)
		{
			sResult = sPartNum + &quot; Product is already exists in this mobile line :&quot; + sRootItemId;
			Outputs.SetProperty(&quot;ErrorMsg&quot;, sResult);
			return;
		}

		bcProduct.SetViewMode(AllView);
		bcProduct.ClearToQuery();
		bcProduct.SetSearchExpr(&quot;[Part #]=&apos;&quot; + sPartNum + &quot;&apos;&quot;);//VFTK Lilanath 24032012 : No change in search spec since sPartNum cannot be null
		bcProduct.ExecuteQuery(ForwardOnly);

		if (!bcProduct.FirstRecord())
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;Product Not Found&quot;);
			return;
		}

		sProductId   = bcProduct.GetFieldValue(&quot;Id&quot;);
		sProductName = bcProduct.GetFieldValue(&quot;Name&quot;);

		bcObject = boLoader.GetBusComp(&quot;Cfg ISS Sub Objects&quot;);

		bcObject.SetViewMode(AllView);
		bcObject.ClearToQuery();
		bcObject.ActivateField(&quot;Orig Id&quot;);
		bcObject.ActivateField(&quot;Port Id&quot;);
		bcObject.SetSearchExpr (&quot;[SO Id]=&apos;&quot; + sProductId + &quot;&apos; AND [Last Version]=&apos;999999999&apos;&quot;);
		bcObject.ExecuteQuery(ForwardOnly);

		if (bcObject.FirstRecord()) 
		{
			sProductOrigId = bcObject.GetFieldValue(&quot;Orig Id&quot;);
			sProductPortId = bcObject.GetFieldValue(&quot;Port Id&quot;);

			if (sProductPortId == &quot;&quot;)
				sProductPortId = sProductOrigId;
		}

		if (sProductId == null || sProductId == &quot;&quot; || sProductOrigId == null || sProductOrigId == &quot;&quot;)
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;Product Not Found&quot;);
			return;
		}

		bcHPItem = boHPOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);					

		if (sRootItemId != null &amp;&amp; sRootItemId != &quot;&quot;)
		{
			bcHPItem.SetViewMode(AllView);
			bcHPItem.ClearToQuery();
			bcHPItem.ActivateField(&quot;Billing Account Id&quot;);
			bcHPItem.SetSearchExpr(&quot;[Id] =&apos;&quot; + sRootItemId + &quot;&apos;&quot;);
			bcHPItem.ExecuteQuery(ForwardOnly);
				
			if (bcHPItem.FirstRecord())
			{
				sBillAccountId = bcHPItem.GetFieldValue(&quot;Billing Account Id&quot;);
			}
		}

		bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sOrderId + &quot;&apos;&quot;);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;Operation Failed&quot;);
			return;
		}

		bcItem  = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);							

		TheApplication().SetProfileAttr(&quot;VF_NEW_RECORD_TRANSFER&quot;,&quot;Y&quot;);	//TLG-175 - CF_RPIRES
		bcItem.NewRecord(NewAfter);

		sAddedItemId = bcItem.GetFieldValue(&quot;Id&quot;);

		bcProductPick = bcItem.GetPicklistBusComp(&quot;Product&quot;);

		bcProductPick.ClearToQuery();
		bcProductPick.ActivateField(&quot;Part #&quot;);
		bcProductPick.SetSearchExpr(&quot;[Part #]=&apos;&quot; + sPartNum + &quot;&apos;&quot;);	
		bcProductPick.ExecuteQuery(ForwardOnly);

		if (bcProductPick.FirstRecord())
		{
			bcProductPick.Pick();
		}

		bcHPItem.SetViewMode(AllView);
		bcHPItem.ClearToQuery();
		bcHPItem.ActivateField(&quot;Parent Order Item Id&quot;);
		bcHPItem.ActivateField(&quot;Product Port Id&quot;);
		bcHPItem.ActivateField(&quot;Prod Item Id&quot;);
		bcHPItem.ActivateField(&quot;Cfg State Code&quot;);
		bcHPItem.ActivateField(&quot;Billing Account Id&quot;);
		bcHPItem.ActivateField(&quot;TELCO Action Type&quot;);
		bcHPItem.ActivateField(&quot;TELCO Action Reason&quot;);
		bcHPItem.SetSearchExpr(&quot;[Id] =&apos;&quot; + sAddedItemId + &quot;&apos;&quot;);
		bcHPItem.ExecuteQuery(ForwardOnly);
				
		if (!bcHPItem.FirstRecord())
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;Operation Failed&quot;);
			return;
		}

		if (sParentId == &quot;&quot;)
		{
			sParentId = sRootItemId;
		}

		bcHPItem.SetFieldValue(&quot;Root Order Item Id&quot;,   sRootItemId);
		bcHPItem.SetFieldValue(&quot;Parent Order Item Id&quot;, sParentId);
		bcHPItem.SetFieldValue(&quot;Order Header Id&quot;,      sOrderId);
		bcHPItem.SetFieldValue(&quot;Product Port Id&quot;,      sProductPortId);
		bcHPItem.SetFieldValue(&quot;Prod Item Id&quot;,         sProductOrigId);
		bcHPItem.SetFieldValue(&quot;Cfg State Code&quot;,       sStateRequested);
		bcHPItem.SetFieldValue(&quot;Billing Account Id&quot;,   sBillAccountId);
		bcHPItem.SetFieldValue(&quot;TELCO Action Type&quot;,    &quot;&quot;);
		bcHPItem.SetFieldValue(&quot;TELCO Action Reason&quot;,  &quot;&quot;);

		bcHPItem.WriteRecord();

		sAddedItemAction = bcHPItem.GetFieldValue(&quot;Action Code&quot;);
		sResult = &quot;Item Added&quot; + sAddedItemId + &quot; &quot; + sAddedItemAction;

		bcHPItemXA = boHPOrder.GetBusComp(&quot;Order Item XA (Simple)&quot;);

		bcHPItemXA.SetViewMode(AllView);
		bcHPItemXA.ClearToQuery();
		bcHPItemXA.ActivateField(&quot;Cfg State Code&quot;);
		bcHPItemXA.SetSearchExpr(&quot;[Object Id]=&apos;&quot; + sAddedItemId + &quot;&apos;&quot;);
		bcHPItemXA.ExecuteQuery(ForwardOnly);

		bWithItemXA = bcHPItemXA.FirstRecord();

		while (bWithItemXA)
		{
			bcHPItemXA.SetFieldValue(&quot;Action Code&quot;,    sAddedItemAction);
			bcHPItemXA.SetFieldValue(&quot;Cfg State Code&quot;, sStatePicked);
			bcHPItemXA.WriteRecord();

			sResult = sResult + &quot; Item XA Added&quot;;
			bWithItemXA = bcHPItemXA.NextRecord();
		}

		Outputs.SetProperty(&quot;ErrorMsg&quot;,sResult);
		Outputs.SetProperty(&quot;CurrProdId&quot;,sAddedItemId); //SCALISKAN DEF-8287
	}
	catch(e)
	{
		defined (e.errText) ? sResult = e.errText : sResult = e.toString();
		Outputs.SetProperty(&quot;ErrorMsg&quot;, sResult);
	}
	finally
	{
		TheApplication().SetProfileAttr(&quot;VF_NEW_RECORD_TRANSFER&quot;,&quot;&quot;);//TLG-175 - CF_RPIRES

		bcHPItemXA    = null;
		bcHPItem      = null;
		boHPOrder     = null;
		bcProductPick = null;
		bcItem        = null;
		bcOrder       = null;
		bcObject      = null;
		boLoader      = null;
		bcProduct     = null;
		boOrder       = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="01/14/2016 18:04:55"
			   UPDATED_BY="ESANTOS"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BillCycle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BillCycle(Inputs, Outputs)
{
try
	{		  	
	var date = Clib.asctime(Clib.localtime(Clib.time()));
	var array = date.split(&quot; &quot;);
	var day = array[2];
	var counter = 53;
	var LOVday;
	var value = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BC_DISPLAY&quot;,&quot;1&quot;);
	while (counter &gt; 49)
		{
		LOVday = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;BILL_CYCLE&quot;,counter);
		if (LOVday&lt;day)
			{
			value = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BC_DISPLAY&quot;,LOVday);
			counter = 49;
			}
		else
			counter = counter - 1;
		}		
	Outputs.SetProperty(&quot;Out&quot;, value);
	}  	
finally
	{
	date = null;
	array = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="06/30/2012 17:12:20"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2012 12:09:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOLI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOLI(Inputs,Outputs)
{
	try
	{
		var boOLI 	:BusObject = TheApplication().GetBusObject(&quot;VF X HP Order Entry&quot;);
		var bcOLI	:BusComp   = boOLI.GetBusComp (&quot;HP Order Entry - Line Items&quot;);
		var strOrderId	= Inputs.GetProperty(&quot;OrderId&quot;);
		
		var bExist = &quot;N&quot;;

		if(strOrderId != &quot;&quot;)
		{
			with(bcOLI)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(&quot;Order Header Id&quot;, strOrderId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					bExist = &quot;Y&quot;;
				}
			}
		}
		Outputs.SetProperty(&quot;ExistOLI&quot;,bExist);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		boOLI	= null;
		bcOLI = null;		
	}
}"
			   SEQUENCE="3"
			   UPDATED="01/10/2014 08:22:55"
			   UPDATED_BY="SADMIN"
			   CREATED="01/10/2014 08:22:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateHeaderForTibco"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateHeaderForTibco(Inputs,Outputs)
{
	try
	{
			var strChannel         = Inputs.GetProperty(&quot;Channel&quot;);
			var strTimeStamp       = &quot;&quot;; 
			var strTransactionID   = strChannel + &quot;-&quot;;
			
			var VFSequenceBo	: BusObject = TheApplication().GetBusObject(&quot;VF Sequence BO&quot;);
			var VFSequenceBc	: BusComp = VFSequenceBo.GetBusComp(&quot;VF Sequence BusComp&quot;);
			var strProcessName  = Inputs.GetProperty(&quot;Process Name&quot;);
			var SysDate = Clib.time();
			VFSequenceBc.NewRecord(NewAfter);
			VFSequenceBc.SetFieldValue(&quot;Process Name&quot;, strProcessName);
			VFSequenceBc.WriteRecord();
		
			VFSequenceBc.ClearToQuery();
			VFSequenceBc.SetSearchSpec(&quot;Id&quot;, VFSequenceBc.GetFieldValue(&quot;Id&quot;));//Scripting 15:null check not req 
			VFSequenceBc.ExecuteQuery(ForwardOnly);//Scripting 31: No child query present 25may2012 Udbhav IDC VFTK
			
			if (VFSequenceBc.FirstRecord ())
			{
				strTransactionID = strTransactionID + VFSequenceBc.GetFieldValue(&quot;Sequence&quot;);
			}
	
			strTimeStamp = Date.fromSystem(SysDate);
                                
	        strTimeStamp = (strTimeStamp.getMonth() + 1) +&quot;/&quot;+ strTimeStamp.getDate() +&quot;/&quot;+ strTimeStamp.getFullYear() +&quot; &quot;+ strTimeStamp.getHours() +&quot;:&quot;+ strTimeStamp.getMinutes() +&quot;:&quot;+ strTimeStamp.getSeconds();
	        
			Outputs.SetProperty (&quot;CHANNEL&quot;, strChannel);
			Outputs.SetProperty (&quot;TIMESTAMP&quot;, strTimeStamp);
			Outputs.SetProperty (&quot;TRANSACTION_ID&quot;, strTransactionID);
	}
	finally{
		VFSequenceBc		= null;
		VFSequenceBo		= null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="4"
			   UPDATED="01/10/2014 08:22:55"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateLTETransaction"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/******************************************************************************
*CREATED BY : SAMET CAN
*CREATED ON : 16.12.2013
*DESCRIPTION: CR798_TC-4958_Boston
******************************************************************************/
function CreateLTETransaction(sOrderId, sRootItemId, sTransaction, sOrderSubType, iSequence)
{
	try
	{
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcOrder  : BusComp   = boOrder.GetBusComp(&quot;HP Order Entry - Orders&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var bcItemXA : BusComp   = boOrder.GetBusComp(&quot;Order Item XA&quot;);
		var oSysdate             = new Date();
		var boBoston : BusObject = TheApplication().GetBusObject(&quot;VF Boston&quot;);
		var bcBoston : BusComp = boBoston.GetBusComp(&quot;VF Boston&quot;);

		var sOrderReason      = &quot;&quot;;
		var sBrand            = &quot;&quot;;
		var sActionReason     = &quot;&quot;;
		var sItemXASearchExpr = &quot;&quot;;
		var bHasAttrib        = false;
		var sAttribName       = &quot;&quot;;
		var sAttribValue      = &quot;&quot;;
		var sAttribOldValue   = &quot;&quot;;
		var sAlgorithm        = &quot;&quot;;
		var sKI               = &quot;&quot;;
		var sICCI             = &quot;&quot;;
		var sMSISDN           = &quot;&quot;;
		var sIMSI             = &quot;&quot;;
		var sSysdate          = &quot;&quot;;
		var sHSSProvId        = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot; || sRootItemId == null || sRootItemId == &quot;&quot;)
		{
			return;
		}

		bcOrder.ClearToQuery();
		bcOrder.SetViewMode(AllView);
		bcOrder.ActivateField(&quot;Order Reason&quot;);
		bcOrder.ActivateField(&quot;Billing Account Payment Modality&quot;);
		bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sOrderId + &quot;&apos;&quot;);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		sOrderReason = bcOrder.GetFieldValue(&quot;Order Reason&quot;);
		sBrand       = bcOrder.GetFieldValue(&quot;Billing Account Payment Modality&quot;);

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;TELCO Action Reason&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		bcItem.SetSearchSpec(&quot;Id&quot;,              sRootItemId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sActionReason = bcItem.GetFieldValue(&quot;TELCO Action Reason&quot;);

		if (sActionReason == null || sActionReason == &quot;&quot;)
		{
			sActionReason = sOrderReason;
		}

		sItemXASearchExpr = &quot;[Object Id]=&apos;&quot; + sRootItemId +
							&quot;&apos; AND ([Name]=&apos;Algorithm&apos; OR [Name]=&apos;ICCI&apos; OR [Name]=&apos;IMSI&apos; OR [Name]=&apos;Security Key For GSM&apos; OR [Name]=&apos;MSISDN&apos;)&quot;;

		bcItemXA.ClearToQuery();
		bcItemXA.SetViewMode(AllView);
		bcItemXA.ActivateField(&quot;Name&quot;);
		bcItemXA.ActivateField(&quot;Text Value&quot;);
		bcItemXA.ActivateField(&quot;Previous Text Value&quot;);
		bcItemXA.SetSearchExpr(sItemXASearchExpr);
		bcItemXA.ExecuteQuery(ForwardOnly);

		bHasAttrib = bcItemXA.FirstRecord();

		while (bHasAttrib)
		{
			sAttribName     = bcItemXA.GetFieldValue(&quot;Name&quot;);
			sAttribValue    = bcItemXA.GetFieldValue(&quot;Text Value&quot;);;
			sAttribOldValue = bcItemXA.GetFieldValue(&quot;Previous Text Value&quot;);
				
			if (sAttribName == &quot;Algorithm&quot;)
			{
				sAlgorithm = sAttribValue;
			}
			if (sAttribName == &quot;Security Key For GSM&quot;)
			{
				sKI = sAttribValue;
			}
			if (sAttribName == &quot;ICCI&quot;)
			{
				sICCI = sAttribValue;
			}
			if (sAttribName == &quot;MSISDN&quot;)
			{
				sMSISDN = sAttribValue;

				if (sOrderSubType == &quot;Modify MSISDN&quot; &amp;&amp; sTransaction == &quot;DEL&quot;)
					sMSISDN = sAttribOldValue;
			}
			if (sAttribName == &quot;IMSI&quot;)
			{
				sIMSI = sAttribValue;

				if (sOrderSubType == &quot;Modify IMSI&quot; &amp;&amp; sTransaction == &quot;DEL&quot;)
					sIMSI = sAttribOldValue;
			}

			bHasAttrib = bcItemXA.NextRecord();
		}
		
		Clib.strftime(sSysdate, &quot;%d%m%Y%H%M%S&quot;, oSysdate); // DDMMYYYYHHMISS
		sHSSProvId = sSysdate + &quot;_&quot; + iSequence;

		bcBoston.SetViewMode(AllView);
		bcBoston.ClearToQuery();
		bcBoston.NewRecord(NewAfter);
		bcBoston.SetFieldValue(&quot;HSS Provisioning Id&quot;, sHSSProvId);
		bcBoston.SetFieldValue(&quot;Transaction Type&quot;,    sTransaction);
		bcBoston.SetFieldValue(&quot;Order Reason Code&quot;,   sActionReason);
		bcBoston.SetFieldValue(&quot;IMSI&quot;,                sIMSI);
		bcBoston.SetFieldValue(&quot;MSISDN&quot;,              sMSISDN);
		bcBoston.SetFieldValue(&quot;KI&quot;,                  sKI);
		bcBoston.SetFieldValue(&quot;ICCI&quot;,                sICCI);
		bcBoston.SetFieldValue(&quot;Algorithm Id&quot;,        sAlgorithm);
		bcBoston.SetFieldValue(&quot;Brand&quot;,               sBrand);
		bcBoston.SetFieldValue(&quot;Status&quot;,              0);
		bcBoston.WriteRecord();
	}
	catch (e)
	{
		throw (e);
	}
	finally
	{
		oSysdate = null;
		bcBoston = null;
		boBoston = null;
		bcItemXA = null;
		bcItem   = null;
		bcOrder  = null;
		boOrder  = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="02/04/2015 15:57:08"
			   UPDATED_BY="JCARVALHO"
			   CREATED="12/30/2013 13:31:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSearchExpForAddPromotion"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSearchExpForAddPromotion(Inputs, Outputs)
{
	try
	{
		var promotionGroupCode = Inputs.GetProperty (&quot;Promotion Group Code&quot;);
		var strCondition4 = &quot;&quot;;
		var newSearchExp = &quot;1&lt;&gt;1 &quot;; 
		var hasRecord ;
		var  testStr = &quot;&quot;;
		var boparameter : BusObject= TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcparameter : BusComp= boparameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
		var searchExp = &quot;[Condition5]=&apos;&quot; + promotionGroupCode + &quot;&apos; AND [Function]=&apos;VF Add Promotion&apos;&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;promotionGroupCode&quot;,promotionGroupCode);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		bcparameter.ActivateField(&quot;Function&quot;);
		bcparameter.ActivateField(&quot;Condition4&quot;);
		bcparameter.ActivateField(&quot;Condition5&quot;)
		bcparameter.ClearToQuery();
		bcparameter.SetUserProperty(&quot;DISTINCT&quot;,&quot;true&quot;);
		bcparameter.SetSearchExpr(searchExp);
		bcparameter.ExecuteQuery(ForwardOnly);
		var hasRecord = bcparameter.FirstRecord();
		if (hasRecord ){
			while( hasRecord)
			{	
				strCondition4 = bcparameter.GetFieldValue(&quot;Condition4&quot;);
				if (  testStr.indexOf(strCondition4 + &quot;;&quot;) &lt;0 ){
					newSearchExp = newSearchExp + &quot; OR [Product Part Number] = &apos;&quot; + strCondition4 + &quot;&apos;&quot;;
					testStr = testStr + strCondition4 + &quot;;&quot;
				}
	
				hasRecord =	bcparameter.NextRecord();
			}
		}
		else
		{
			newSearchExp = &quot;&quot;;
		}	
		Outputs.SetProperty (&quot;value&quot;, newSearchExp);
	}
	finally
	{
		 bcparameter 		= null;
		 boparameter 		= null;
		 inProp				= null;
		 outProp			= null;
		 BS					= null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeleteProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeleteProduct(Inputs,Outputs)
{
	try{
		var OrderLineId = Inputs.GetProperty(&quot;Order Line Id&quot;)
		var XOrderBO	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var HPLineItems : BusComp = XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);	
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderLineId&quot;,OrderLineId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		with (HPLineItems)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Id] = &apos;&quot;+OrderLineId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				DeleteRecord();
			}
		}
	}
	catch (e)
	{	
		var sResult;
		var ErrorMsg = e.toString();
		defined (e.errText) ? sResult = e.errText : sResult = e.toString();
		Outputs.SetProperty(&quot;ErrorMsg&quot;,sResult);
	}
	finally
	{
		HPLineItems  		= null;
		XOrderBO			= null;
		inProp				= null;
		outProp			= null;
		BS					= null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ExportLTETransactions"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/******************************************************************************
*CREATED BY : SAMET CAN
*CREATED ON : 16.12.2013
*DESCRIPTION: CR798_TC-4958_Boston
******************************************************************************/
function ExportLTETransactions()
{
	try
	{
		var boBoston  : BusObject = TheApplication().GetBusObject(&quot;VF Boston&quot;);
		var bcBoston  : BusComp   = boBoston.GetBusComp(&quot;VF Boston&quot;);
		var boLTEItem : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcLTEItem : BusComp   = boLTEItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boItem    : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem    : BusComp   = boItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sLastExportDate    = &quot;&quot;;
		var sLTEItemSearchExpr = &quot;&quot;;
		var bExportLTE         = false;
		var sItemStatus        = &quot;&quot;;
		var sItemActionCode    = &quot;&quot;;
		var sItemActionType    = &quot;&quot;;
		var sRootItemId        = &quot;&quot;;
		var sOrderId           = &quot;&quot;;
		var sOrderSubType      = &quot;&quot;;
		var iSequence          = 0;
		var sItemSearchExpr    = &quot;&quot;;

		var sStatusComplete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);
		var sActionAdd      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var sActionDelete   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
		var sActionSuspend  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Suspend&quot;);
		var sActionResume   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Resume&quot;);
		var sModifyMSISDN   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;, &quot;102&quot;);
		var sModifyIMSI     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;, &quot;103&quot;);

		bcBoston.ClearToQuery();
		bcBoston.SetViewMode(AllView);
		bcBoston.SetSortSpec(&quot;Created(DESCENDING)&quot;);
		bcBoston.ExecuteQuery(ForwardOnly);

		if (bcBoston.FirstRecord())
		{
			sLastExportDate   = bcBoston.GetFieldValue(&quot;Created&quot;);
			sLTEItemSearchExpr = &quot;[Status]=&apos;&quot; + sStatusComplete + &quot;&apos; AND [Created]&gt;&apos;&quot; + sLastExportDate +
								 &quot;&apos; AND [Part Number] = &apos;9082&apos;&quot;;
		}
		else
		{
			sLTEItemSearchExpr = &quot;[Status]=&apos;&quot; + sStatusComplete +
								 &quot;&apos; AND [Created] &gt; Timestamp()-7 AND [Part Number] = &apos;9082&apos;&quot;; //one week ago
		}

		bcLTEItem.ClearToQuery();
		bcLTEItem.SetViewMode(AllView);
		bcLTEItem.ActivateField(&quot;Status&quot;);
		bcLTEItem.ActivateField(&quot;Action Code&quot;);
		bcLTEItem.ActivateField(&quot;TELCO Root Item Action Type&quot;);
		bcLTEItem.ActivateField(&quot;Root Order Item Id&quot;);
		bcLTEItem.ActivateField(&quot;Order Header Id&quot;);
		bcLTEItem.ActivateField(&quot;Order Sub Type&quot;);
		bcLTEItem.SetSearchExpr(sLTEItemSearchExpr);
		bcLTEItem.SetSortSpec(&quot;Created(ASCENDING)&quot;);
		bcLTEItem.ExecuteQuery(ForwardOnly);

		if (!bcLTEItem.FirstRecord())
		{
			return;
		}

		do
		{
			sItemStatus     = bcLTEItem.GetFieldValue(&quot;Status&quot;);
			sItemActionCode = bcLTEItem.GetFieldValue(&quot;Action Code&quot;);
			sItemActionType = bcLTEItem.GetFieldValue(&quot;TELCO Root Item Action Type&quot;);
			sRootItemId     = bcLTEItem.GetFieldValue(&quot;Root Order Item Id&quot;);
			sOrderId        = bcLTEItem.GetFieldValue(&quot;Order Header Id&quot;);
			sOrderSubType   = bcLTEItem.GetFieldValue(&quot;Order Sub Type&quot;);

			if (sItemActionType == null || sItemActionType == &quot;&quot;)
			{
				sItemActionType = sOrderSubType;
			}

			if (sItemActionCode == sActionDelete || sItemActionCode == sActionSuspend)
			{
				iSequence += 1;
				CreateLTETransaction(sOrderId, sRootItemId, &quot;DEL&quot;, &quot;&quot;, iSequence);
			}
			else if (sItemActionCode == sActionAdd || sItemActionCode == sActionResume)
			{
				iSequence += 1;
				CreateLTETransaction(sOrderId, sRootItemId, &quot;CRE&quot;, &quot;&quot;, iSequence);
			}
			else
			{
				if (sItemActionType == sModifyMSISDN)
				{
					iSequence += 1;
					CreateLTETransaction(sOrderId, sRootItemId, &quot;DEL&quot;, &quot;Modify MSISDN&quot;, iSequence);
					iSequence += 1;
					CreateLTETransaction(sOrderId, sRootItemId, &quot;CRE&quot;, &quot;Modify MSISDN&quot;, iSequence);
				}
				else if (sItemActionType == sModifyIMSI)
				{
					iSequence += 1;
					CreateLTETransaction(sOrderId, sRootItemId, &quot;DEL&quot;, &quot;Modify IMSI&quot;, iSequence);
					iSequence += 1;
					CreateLTETransaction(sOrderId, sRootItemId, &quot;CRE&quot;, &quot;Modify IMSI&quot;, iSequence);
				}
				else
				{
					sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
									  &quot;&apos; AND ([Part Number]=&apos;1103&apos; OR [Part Number]=&apos;1108&apos; OR [Part Number]=&apos;1109&apos; OR [Part Number]=&apos;1116&apos; OR [Part Number]=&apos;14079&apos; OR [Part Number]=&apos;16012&apos; OR [Part Number]=&apos;60008&apos;)&quot;;

					bcItem.ClearToQuery();
					bcItem.SetViewMode(AllView);
					bcItem.SetSearchExpr(sItemSearchExpr);
					bcItem.ExecuteQuery(ForwardOnly);

					if (bcItem.FirstRecord())
					{
						iSequence += 1;
						CreateLTETransaction(sOrderId, sRootItemId, &quot;DEL&quot;, &quot;&quot;, iSequence);
						iSequence += 1;
						CreateLTETransaction(sOrderId, sRootItemId, &quot;CRE&quot;, &quot;&quot;, iSequence);
					}
				}
			}
		}
		while (bcLTEItem.NextRecord());
	}
	catch (e)
	{
		throw (e);
	}
	finally
	{ 
		boItem    = null;
		bcItem    = null;
		boLTEItem = null;
		bcLTEItem = null;
		boBoston  = null;
		bcBoston  = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="02/04/2015 22:08:25"
			   UPDATED_BY="JCARVALHO"
			   CREATED="12/30/2013 13:31:31"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FieldSanitization"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FieldSanitization (Inputs, Outputs)
{
try{
	var BO= TheApplication().GetBusObject(Inputs.GetProperty(&quot;busobjname&quot;));
	var BC= BO.GetBusComp(Inputs.GetProperty(&quot;buscompname&quot;));
	 
	with (BC)
	{
		//Execute query with searchspec
		ActivateField(Inputs.GetProperty(&quot;fieldname&quot;));
		var sSearchspec = Inputs.GetProperty(&quot;searchspec&quot;);
		if(sSearchspec != &quot;&quot;)	//GEN_REQ_092
			SetSearchExpr(sSearchspec);
		ExecuteQuery(ForwardOnly);
		var IsRec = FirstRecord();
		while(IsRec)
		{
			var sField = Inputs.GetProperty(&quot;fieldname&quot;);
			var sFieldVal =	Inputs.GetProperty(&quot;fieldvalue&quot;);
			SetFieldValue(sField,sFieldVal); //&quot;&apos;&quot;+sField+&quot;&apos;&quot;
			WriteRecord();
			IsRec = NextRecord();
		}
	}
}
finally
{
    sField = null;
    sFieldVal = null;
    IsRec = null;
    sSearchspec = null;
    BC = null;
    BO = null;
}

}"
			   SEQUENCE="9"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="01/09/2013 12:25:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FieldStatusSanitization"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FieldStatusSanitization(Inputs,Outputs)
{
	try
	{
		var oBO			= TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var oBC			= oBO.GetBusComp(&quot;Asset Mgmt - Asset - Header - HP 4&quot;);
	 
	 	var sInactive 	= &quot;Inactive&quot;;
	    var sCancelled 	= &quot;Cancelled&quot;;
	    var sFrozen 	= &quot;Frozen&quot;;
	    var sClosed 	= &quot;Closed&quot;;
	    var sLimited 	= &quot;Limited&quot;;
	    var sActive 	= &quot;Active&quot;;
	
		with (oBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;VF Credit Status&quot;);
			ActivateField(&quot;VF Customer Status&quot;);
			ActivateField(&quot;VF Dunning Status&quot;);
			ActivateField(&quot;VF Fraud Status&quot;);
			ActivateField(&quot;VF Document Missing Status&quot;);
			SetSearchExpr(&quot;[Id] = [Root Asset Id] AND [VF Document Missing Status] IS NULL&quot;);
			ExecuteQuery(ForwardOnly);
			var IsRec = FirstRecord();
			while(IsRec)
			{
				var sStatus 		= GetFieldValue(&quot;Status&quot;);
				var sCredStatCode 	= GetFieldValue(&quot;VF Credit Status&quot;);
				var sCustStatCode	= GetFieldValue(&quot;VF Customer Status&quot;);
				var sDunnStatCode	= GetFieldValue(&quot;VF Dunning Status&quot;);
				var sFraudStatCode	= GetFieldValue(&quot;VF Fraud Status&quot;);
				var sDocStatusCode	= &quot;000&quot;;
				
				var sCredStat 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sCredStatCode);
				var sCustStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sCustStatCode);
				var sDunnStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sDunnStatCode);
				var sFraudStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sFraudStatCode);
				var sDocStatus	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sDocStatusCode);
				
				SetFieldValue(&quot;VF Document Missing Status&quot;,sDocStatusCode);
			
				if(sStatus == sInactive)
					SetFieldValue(&quot;VF Final Status&quot;,sInactive);
				else if (sCustStat == sCancelled || sDunnStat == sCancelled || sDocStatus == sCancelled)
					SetFieldValue(&quot;VF Final Status&quot;,sCancelled);
				else if (sCustStat == sFrozen || sDunnStat == sFrozen || sDocStatus == sFrozen)
					SetFieldValue(&quot;VF Final Status&quot;,sFrozen);
				else if (sCredStat == sClosed || sFraudStat == sClosed || sDunnStat == sClosed || sCustStat == sClosed || sDocStatus == sClosed)
					SetFieldValue(&quot;VF Final Status&quot;,sClosed);
				else if ((sCredStat == sLimited || sFraudStat == sLimited || sCustStat == sLimited || sDunnStat == sLimited || sDocStatus == sLimited)
				&amp;&amp; sFraudStat != sFrozen &amp;&amp; sFraudStat != sCancelled &amp;&amp; sFraudStat != sClosed)
					SetFieldValue(&quot;VF Final Status&quot;,sLimited);
				else if(sCredStat == sActive &amp;&amp; sFraudStat == sActive &amp;&amp; sCustStat == sActive &amp;&amp; sDunnStat == sActive &amp;&amp; sDocStatus == sActive)
					SetFieldValue(&quot;VF Final Status&quot;,sActive);
			
				WriteRecord();
				IsRec = NextRecord();
			}
		}
    }
    catch(e)
    {
    	throw(e);
    }
    finally
    {
	    oBC = null;
	    oBO = null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="02/14/2013 12:52:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FinalStatusSanitization"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FinalStatusSanitization(Inputs,Outputs)
{
	try
	{
		var oBO			= TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var oBC			= oBO.GetBusComp(&quot;Asset Mgmt - Asset - Header - HP 4&quot;);
	 
	 	var sInactive 	= &quot;Inactive&quot;;
	    var sCancelled 	= &quot;Cancelled&quot;;
	    var sFrozen 	= &quot;Frozen&quot;;
	    var sClosed 	= &quot;Closed&quot;;
	    var sLimited 	= &quot;Limited&quot;;
	    var sActive 	= &quot;Active&quot;;
	    var sFinalStatus=&quot;&quot;;
	    
	
		with (oBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;VF Credit Status&quot;);
			ActivateField(&quot;VF Customer Status&quot;);
			ActivateField(&quot;VF Dunning Status&quot;);
			ActivateField(&quot;VF Fraud Status&quot;);
			ActivateField(&quot;VF Document Missing Status&quot;);
			SetSearchExpr(&quot;[Id] = [Root Asset Id]&quot;);
			ExecuteQuery(ForwardOnly);
			var IsRec = FirstRecord();
			while(IsRec)
			{
				var sStatus 		= GetFieldValue(&quot;Status&quot;);
				var sCredStatCode 	= GetFieldValue(&quot;VF Credit Status&quot;);
				var sCustStatCode	= GetFieldValue(&quot;VF Customer Status&quot;);
				var sDunnStatCode	= GetFieldValue(&quot;VF Dunning Status&quot;);
				var sFraudStatCode	= GetFieldValue(&quot;VF Fraud Status&quot;);
				var sDocStatusCode	= GetFieldValue(&quot;VF Document Missing Status&quot;);
				
				var sCredStat 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sCredStatCode);
				var sCustStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sCustStatCode);
				var sDunnStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sDunnStatCode);
				var sFraudStat	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sFraudStatCode);
				var sDocStatus	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_FINAL_STATUS_CALC&quot;, sDocStatusCode);
				
				if(sStatus == sInactive)
					sFinalStatus = sInactive;
		
				else if(sCredStat == sActive &amp;&amp; sFraudStat == sActive &amp;&amp; sCustStat == sActive &amp;&amp; sDunnStat == sActive &amp;&amp; sDocStatus == sActive)
					sFinalStatus = sActive;
		
				else if(sCustStat == sCancelled || sDunnStat == sCancelled || sDocStatus == sCancelled)
					sFinalStatus = sCancelled;
		
				else if (sCustStat == sFrozen || sDunnStat == sFrozen || sDocStatus == sFrozen)
					sFinalStatus = sFrozen;
		
				else if(sCredStat == sClosed || sFraudStat == sClosed || sDunnStat == sClosed || sCustStat == sClosed || sDocStatus == sClosed)
					sFinalStatus = sClosed;
		
				else if((sCredStat == sLimited || sFraudStat == sLimited || sCustStat == sLimited || sDunnStat == sLimited || sDocStatus == sLimited)
					&amp;&amp; sFraudStat != sFrozen &amp;&amp; sFraudStat != sCancelled &amp;&amp; sFraudStat != sClosed)
					sFinalStatus = sLimited;
					
				SetFieldValue(&quot;VF Final Status&quot;, sFinalStatus);
				WriteRecord();
				IsRec = NextRecord();
			}
		}
    }
    catch(e)
    {
    	throw(e);
    }
    finally
    {
	    oBC = null;
	    oBO = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="04/15/2013 19:56:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAssetInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAssetInfo(Inputs,Outputs)
{
	try
	{
		var boAsset 	 :BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var bcAssetEntry :BusComp   = boAsset.GetBusComp (&quot;Asset Mgmt - Asset - Header (Simple)&quot;);
		var searchSpec = Inputs.GetProperty(&quot;searchSpec&quot;);
		var result;
		var resultCode = &quot;0&quot;;
		var resultMessage = &quot;Success&quot;;
		bcAssetEntry.ActivateField(&quot;Asset Id&quot;);
		bcAssetEntry.ActivateField(&quot;Status&quot;);
		bcAssetEntry.ActivateField(&quot;Integration Id&quot;);
		bcAssetEntry.ActivateField(&quot;Parent Asset Id&quot;);
		bcAssetEntry.ActivateField(&quot;Product Part Number&quot;);
		bcAssetEntry.ActivateField(&quot;Owner Account Id&quot;);
		bcAssetEntry.ActivateField(&quot;Owner Account Code&quot;);
		bcAssetEntry.ActivateField(&quot;VF MSISDN&quot;);
		bcAssetEntry.ActivateField(&quot;Root Asset Id&quot;);
		bcAssetEntry.ActivateField(&quot;Billing Account Code&quot;);
			
		bcAssetEntry.SetViewMode(AllView);
		bcAssetEntry.ClearToQuery();
		// Begin: Review Input validation: Scripting 15 null check Added 25may2012 Udbhav IDC
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);	
		inProp.SetProperty(&quot;searchSpec&quot;,searchSpec);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End	
		bcAssetEntry.SetSearchExpr(searchSpec);
		bcAssetEntry.ExecuteQuery(ForwardOnly);//Scripting 31: No child query present 25may2012 Udbhav IDC VFTK
		
		if ( bcAssetEntry.FirstRecord() )
		{
			Outputs.SetProperty(&quot;Status&quot;,bcAssetEntry.GetFieldValue(&quot;Status&quot;) );
			Outputs.SetProperty(&quot;Product Part Number&quot;,bcAssetEntry.GetFieldValue(&quot;Product Part Number&quot;) );
			Outputs.SetProperty(&quot;Owner Account Id&quot;,bcAssetEntry.GetFieldValue(&quot;Owner Account Id&quot;) );
			Outputs.SetProperty(&quot;VF MSISDN&quot;,bcAssetEntry.GetFieldValue(&quot;VF MSISDN&quot;) );						
			Outputs.SetProperty(&quot;Owner Account Code&quot;,bcAssetEntry.GetFieldValue(&quot;Owner Account Code&quot;) );
			Outputs.SetProperty(&quot;Root Asset Id&quot;,bcAssetEntry.GetFieldValue(&quot;Root Asset Id&quot;) );
		}
		else
		{
			resultCode    = &quot;1&quot;;
			resultMessage = &quot;Failed&quot;;
		}
	}
	catch(e)
	{
		resultCode = &quot;-1&quot;;
		resultMessage = e.toString();
	}
	finally
	{
		 Outputs.SetProperty(&quot;ResultMessage&quot;,resultMessage);
		 Outputs.SetProperty(&quot;ResultCode&quot;,resultCode);
		 bcAssetEntry    = null;
		 boAsset = null;
		 inProp 	= null;	
		 outProp 	= null;
		 BS 		= null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="07/17/2014 16:50:25"
			   UPDATED_BY="ACAMBAS"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAssetStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAssetStatus(Inputs,Outputs)
{
	try
	{
		var assetInfoInfo : PropertySet = TheApplication().NewPropertySet();
		var assetInfoOutput : PropertySet = TheApplication().NewPropertySet();
		assetInfoInfo.SetProperty(&quot;searchSpec&quot;, Inputs.GetProperty(&quot;searchSpec&quot;));
	
		this.GetAssetInfo(assetInfoInfo,assetInfoOutput);
		
		var resultCode =assetInfoOutput.GetProperty(&quot;ResultCode&quot;);
		var resultMessage = assetInfoOutput.GetProperty(&quot;resultMessage&quot;)
		if ( resultCode == &quot;0&quot; )
		{
			Outputs.SetProperty(&quot;Status&quot;,assetInfoOutput.GetProperty(&quot;Status&quot;));
		}	
	}
	catch(e){
		resultCode = &quot;-1&quot;;
		resultMessage = e.toString();
	}
	finally{
		Outputs.SetProperty(&quot;ResultMessage&quot;,resultMessage);
		Outputs.SetProperty(&quot;ResultCode&quot;,resultCode);
		assetInfoInfo = null;
		assetInfoOutput = null;	
	}	
}"
			   SEQUENCE="13"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBillingAccountInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBillingAccountInfo(Inputs,Outputs)
{//this functions returns one billing account info.
	try
	{
		var boAccount        	:BusObject	= TheApplication ().GetBusObject(&quot;X HP Order Entry&quot;);
		var bcBillingAccount 	:BusComp	= boAccount.GetBusComp (&quot;HP Submit - Billing Account&quot;);
		var searchSpec = Inputs.GetProperty(&quot;searchSpec&quot;);
		var resultCode = &quot;0&quot;;
		var resultMessage = &quot;Success&quot;;
		bcBillingAccount.ActivateField(&quot;Account Code&quot;);
		bcBillingAccount.ActivateField(&quot;Account Status Code&quot;);
		bcBillingAccount.ClearToQuery ();
		bcBillingAccount.SetViewMode (AllView);
		// Begin: Review Input validation: Scripting 15 null check Added 25may2012 Udbhav IDC
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);	
		inProp.SetProperty(&quot;searchSpec&quot;,searchSpec);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End
		bcBillingAccount.SetSearchExpr (searchSpec);
		bcBillingAccount.ExecuteQuery (ForwardOnly);//Scripting 31: No child query present 25may2012 Udbhav IDC VFTK
		
		if ( bcBillingAccount.FirstRecord ())
		{
			Outputs.SetProperty(&quot;Account Status Code&quot;, bcBillingAccount.GetFieldValue(&quot;Account Status Code&quot;));
		
		}
		else{
			resultCode = &quot;1&quot;;
			resultMessage = &quot;Not Found&quot;;
		}
	}
	catch (e){
		resultCode = &quot;-1&quot;;
		resultMessage = e.toString(); 
	}
	finally
	{
		Outputs.SetProperty(&quot;ResultMessage&quot;, resultMessage);
		Outputs.SetProperty(&quot;ResultCode&quot;, resultCode);
		bcBillingAccount 	= null;
		boAccount        	= null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCxParameterWithGivenExp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCxParameterWithGivenExp(Inputs, Outputs)
{
	try
	{
		var searchExp = Inputs.GetProperty (&quot;SearchExp&quot;);
		
		var searchExp2 = &quot;&quot;;	//VFTR RETROFITS | TiagoRocha | 27.04.2015
		var strValue = &quot;&quot;;
		var strCondition1 = &quot;&quot;;
		var strCondition2 = &quot;&quot;;
		var strCondition4 =&quot;&quot;;
		var strCondition3 = &quot;&quot;;
		var strCondition5 =&quot;&quot;;
		var strCondition6 = &quot;&quot;;
		var strCondition7 = &quot;&quot;;
		var strAttrib02 = &quot;&quot;;
		var strComments = &quot;&quot;;
		var strFunction = &quot;&quot;;		
		var strRelProdCount = 0;	//VFTR RETROFITS | TiagoRocha | 27.04.2015
		var boparameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcparameter : BusComp = boparameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
		var result =&quot;KO&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;searchExp&quot;,searchExp);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		bcparameter.ActivateField(&quot;Function&quot;);
		bcparameter.ActivateField(&quot;Name&quot;);
		bcparameter.ActivateField(&quot;Value&quot;);
		bcparameter.ActivateField(&quot;Condition1&quot;);
		bcparameter.ActivateField(&quot;Condition2&quot;);
		bcparameter.ActivateField(&quot;Condition3&quot;);
		bcparameter.ActivateField(&quot;Condition4&quot;);
		bcparameter.ActivateField(&quot;Condition5&quot;);
		bcparameter.ActivateField(&quot;Condition6&quot;);
		bcparameter.ActivateField(&quot;Condition7&quot;);
		bcparameter.ActivateField(&quot;Attrib02&quot;);
		bcparameter.ActivateField(&quot;Comments&quot;);
	
		bcparameter.ClearToQuery();
		bcparameter.SetSearchExpr(searchExp);
		bcparameter.ExecuteQuery(ForwardOnly);
		strRelProdCount = bcparameter.CountRecords();	//VFTR RETROFITS | TiagoRocha | 27.04.2015
		if(bcparameter.FirstRecord())
		{
			result =&quot;OK&quot;;
			strValue = bcparameter.GetFieldValue(&quot;Value&quot;);
			strCondition1 = bcparameter.GetFieldValue(&quot;Condition1&quot;);
			strCondition2 = bcparameter.GetFieldValue(&quot;Condition2&quot;);
			strCondition3 = bcparameter.GetFieldValue(&quot;Condition3&quot;);
			strCondition4 = bcparameter.GetFieldValue(&quot;Condition4&quot;);
			strCondition5 = bcparameter.GetFieldValue(&quot;Condition5&quot;);
			strCondition6 = bcparameter.GetFieldValue(&quot;Condition6&quot;);
			strCondition7 = bcparameter.GetFieldValue(&quot;Condition7&quot;);
			strAttrib02 = bcparameter.GetFieldValue(&quot;Attrib02&quot;);
			strComments = bcparameter.GetFieldValue(&quot;Comments&quot;);
			strFunction = bcparameter.GetFieldValue(&quot;Function&quot;);
			searchExp2 = searchExp+&quot; AND ([Id]&lt;&gt;&apos;&quot;+bcparameter.GetFieldValue(&quot;Id&quot;)+&quot;&apos;)&quot;;	//VFTR RETROFITS | TiagoRocha | 27.04.2015
		}
		Outputs.SetProperty (&quot;Value&quot;, strValue);
		Outputs.SetProperty (&quot;Cons1&quot;, strCondition1);
		Outputs.SetProperty (&quot;Cons2&quot;, strCondition2);
		Outputs.SetProperty (&quot;Cons3&quot;, strCondition3);
		Outputs.SetProperty (&quot;Cons4&quot;, strCondition4);
		Outputs.SetProperty (&quot;Cons5&quot;, strCondition5);
		Outputs.SetProperty (&quot;Cons6&quot;, strCondition6);	
		Outputs.SetProperty (&quot;Cons7&quot;, strCondition7);
		Outputs.SetProperty (&quot;Attr2&quot;, strAttrib02);
		Outputs.SetProperty (&quot;Description&quot;, strComments);
		Outputs.SetProperty (&quot;Function&quot;, strFunction);
		Outputs.SetProperty (&quot;RelProdCount&quot;, strRelProdCount);	//VFTR RETROFITS | TiagoRocha | 27.04.2015
		Outputs.SetProperty (&quot;SearchExp2&quot;, searchExp2);			//VFTR RETROFITS | TiagoRocha | 27.04.2015
	}
	finally
	{
		 Outputs.SetProperty (&quot;result&quot;, result);
		 bcparameter 	= null;
		 boparameter 	= null;
		 inProp			= null;
		 outProp		= null;
		 BS				= null;
	}	
}"
			   SEQUENCE="15"
			   UPDATED="04/29/2015 22:53:25"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetMotherMaidenName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetMotherMaidenName(Inputs, Outputs)
{
    try {
        var origName = Inputs.GetProperty (&quot;name&quot;);
        
        var newString = origName.substring(0,2); 
        var stringSize = origName.length - 1;

 		for(var i =2; i &lt;= stringSize; i++)
		{
		    newString = newString + &quot;*&quot;;
		}
		
    	Outputs.SetProperty (&quot;out&quot;, newString);
    	
    }
    catch(e)
	{
		throw(e);
	}
	finally
	{
			
	}
    
}"
			   SEQUENCE="16"
			   UPDATED="01/10/2014 08:22:56"
			   UPDATED_BY="SADMIN"
			   CREATED="12/05/2013 14:52:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetPositionName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetPositionName(Inputs,Outputs)
{
	try
	{
		var boEmp :BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
		var bcEmp :BusComp   = boEmp.GetBusComp (&quot;Employee&quot;);
		//var boPos :BusObject = TheApplication().GetBusObject(&quot;Position&quot;);
		var bcPos :BusComp   = boEmp.GetBusComp (&quot;Position&quot;);
		
		Outputs.SetProperty(&quot;Position&quot;,&quot;&quot;);
		
		var login = Inputs.GetProperty(&quot;Login&quot;);
		var prPosId;
		
		bcEmp.SetViewMode(AllView);
		bcEmp.ClearToQuery();
		bcEmp.ActivateField(&quot;Primary Position Id&quot;);
		bcEmp.SetSearchSpec(&quot;Login Name&quot;,login);
		bcEmp.ExecuteQuery(ForwardOnly);
		
		if (bcEmp.FirstRecord())
		{
			prPosId = bcEmp.GetFieldValue(&quot;Primary Position Id&quot;);
			
			bcPos.SetViewMode(AllView);
			bcPos.ClearToQuery();
			bcPos.ActivateField(&quot;Name&quot;);
			bcPos.SetSearchSpec(&quot;Id&quot;, prPosId);
			bcPos.ExecuteQuery(ForwardOnly);
			
			if(bcPos.FirstRecord())
				Outputs.SetProperty(&quot;Position&quot;,bcPos.GetFieldValue(&quot;Name&quot;));
		}			
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Position&quot;,&quot;&quot;);
	}
	finally
	{
		 bcPos    = null;
		 bcEmp	 = null;
		 //boPos = null;
		 boEmp 	= null;	
	}
}"
			   SEQUENCE="17"
			   UPDATED="02/24/2016 14:26:41"
			   UPDATED_BY="RPIRES"
			   CREATED="02/24/2016 13:59:46"
			   CREATED_BY="RPIRES">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetShopIdNameByEmpId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetShopIdNameByEmpId(Inputs, Outputs)
{
    try {
        var employeeId = Inputs.GetProperty (&quot;employeeId&quot;);
        var boEmployee : BusObject = TheApplication().GetBusObject(&quot;Employee&quot;);
        var bcEmployee : BusComp = boEmployee.GetBusComp(&quot;VF Employee&quot;);
        
        //Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;employeeId&quot;,employeeId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
        bcEmployee.ActivateField(&quot;Shop Id&quot;);
        bcEmployee.ActivateField(&quot;Shop Name&quot;);
        bcEmployee.ActivateField(&quot;Division&quot;);
        bcEmployee.ClearToQuery();
        bcEmployee.SetSearchSpec(&quot;Employee Id&quot;, employeeId);
        bcEmployee.ExecuteQuery(ForwardOnly);

        var shopId = &quot;&quot;;
        var shopName = &quot;&quot;;
        var division = &quot;&quot;;
 
		if(bcEmployee.FirstRecord())
		{
			shopId = bcEmployee.GetFieldValue(&quot;Shop Id&quot;);
			shopName = bcEmployee.GetFieldValue(&quot;Shop Name&quot;);
			division = bcEmployee.GetFieldValue(&quot;Division&quot;);
		}
    	Outputs.SetProperty (&quot;shopId&quot;, shopId);
    	Outputs.SetProperty (&quot;shopName&quot;, shopName);
    	Outputs.SetProperty (&quot;division&quot;, division);
    }
	finally
	{
		inProp	= null;
		outProp	= null;
		BS		= null;
		bcEmployee = null;
		boEmployee = null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="HasProductExistInOrderWithGivenExp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function HasProductExistInOrderWithGivenExp(Inputs, Outputs)
{	
	try
	{
		var completed = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var AddActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var searchExp = Inputs.GetProperty (&quot;SearchExp&quot;);
		var assetIntegrationId = Inputs.GetProperty (&quot;Root Asset Integration ID&quot;);
		var maxPromotionCount = Inputs.GetProperty (&quot;Max Promotion Count&quot;);
		var boAssetEntry		: BusObject = TheApplication().GetBusObject(&quot;VF Add Promotion BO&quot;);
		var bcAssetEntry		: BusComp = boAssetEntry.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var searchSpec = &quot;[Integration Id] = &apos;&quot;+ assetIntegrationId + &quot;&apos;&quot;; // AND (&quot; + searchExp + &quot;) AND [Status] = &apos;&quot;+ completed + &quot;&apos; AND [Action Code] = &apos;&quot; + AddActionCode +  &quot;&apos;&quot;;	
		var value = &quot;No&quot;;
		var mainAssetRowId = &quot;&quot;;
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;assetIntegrationId&quot;,assetIntegrationId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		bcAssetEntry.SetViewMode(AllView);
		bcAssetEntry.ClearToQuery();
		bcAssetEntry.SetSearchExpr(searchSpec);
		bcAssetEntry.ExecuteQuery(ForwardOnly);

		if ( bcAssetEntry.FirstRecord() )
		{
			mainAssetRowId = bcAssetEntry.GetFieldValue(&quot;Id&quot;);
			searchSpec = &quot;[Root Asset Id] = &apos;&quot;+ mainAssetRowId + &quot;&apos;AND (&quot; + searchExp + &quot;)&quot; ;	
			bcAssetEntry.SetViewMode(AllView);
			bcAssetEntry.ClearToQuery();
			bcAssetEntry.SetSearchExpr(searchSpec);
     		bcAssetEntry.ExecuteQuery(ForwardOnly);
			if ( bcAssetEntry.CountRecords() &lt; ToNumber(maxPromotionCount) )
			{
				value = &quot;No&quot;;
			}
			else{
				value = &quot;Yes&quot;;
			}
		}
		else
		{
			value = &quot;No&quot;;
		}
		Outputs.SetProperty (&quot;value&quot;, value);
	}
	finally
	{
		bcAssetEntry		= null;
		boAssetEntry		= null;
		inProp				= null;
		outProp				= null;
		BS					= null;
	}	
}"
			   SEQUENCE="19"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="IsAssetDisconnected"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function IsAssetDisconnected(Inputs,Outputs)
{
	try
	{
		var assetStatusOutput : PropertySet = TheApplication().NewPropertySet();
		var assetStatusInput : PropertySet = TheApplication().NewPropertySet();
		var assetStatus;
		var result = &quot;False&quot;;
		var resultCode = &quot;0&quot;;
		var resultMessage = &quot;Success&quot;;
		var InactiveCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var searchSpec = &quot;[Asset Id] = &apos;&quot; + Inputs.GetProperty(&quot;Asset Id&quot;) + &quot;&apos; AND [Parent Asset Id] is null AND ([Product Part Number] = &apos;1000&apos; OR [Product Part Number] = &apos;21400&apos;)&quot;;
		assetStatusInput.SetProperty(&quot;searchSpec&quot;, searchSpec);
	
		this.GetAssetStatus(assetStatusInput,assetStatusOutput);
		if (  assetStatusOutput.GetProperty(&quot;ResultCode&quot;) == &quot;0&quot; ){
			assetStatus = assetStatusOutput.GetProperty(&quot;Status&quot;);
			if ( assetStatus == InactiveCode ){
				result = &quot;True&quot;;
			}
		}
		else{
			resultCode = assetStatusOutput.GetProperty(&quot;ResultCode&quot;);
			resultMessage = assetStatusOutput.GetProperty(&quot;ResultMessage&quot;);
		}
	}
	catch(e){
		resultCode = &quot;-1&quot;;
		resultMessage = e.toString();
	}
	finally{
		Outputs.SetProperty(&quot;result&quot;,result);
		Outputs.SetProperty(&quot;ResultCode&quot;,resultCode);
		Outputs.SetProperty(&quot;ResultMessage&quot;,resultMessage);
		assetStatusOutput = null;
		assetStatusInput = null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="IsBillingAccountActive"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function IsBillingAccountActive(Inputs, Outputs)
{//set billing account code in inputs variable with &quot;Billing Account Code&quot; property name.
	try
	{
		 var billingAccountStatusOutput : PropertySet = TheApplication().NewPropertySet();
		 var billingAccountStatusInput : PropertySet = TheApplication().NewPropertySet();
		 var status ;
		 var resultCode = &quot;0&quot;;
		 var resultMessage = &quot;Success&quot;;
		 var activeCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;,&quot;100&quot;);
		 var noInvoiceCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;BILLING_ACCOUNT_STATUS&quot;,&quot;130&quot;);
		 var searchSpec =  &quot;[Account Code] =&apos;&quot; + Inputs.GetProperty(&quot;Billing Account Code&quot;) + &quot;&apos;&quot;;
		 billingAccountStatusInput.SetProperty(&quot;searchSpec&quot;,searchSpec);
		 
		 GetBillingAccountInfo(billingAccountStatusInput,billingAccountStatusOutput); 
		 if ( billingAccountStatusOutput.GetProperty(&quot;ResultCode&quot;) == &quot;0&quot; ){
		 	var billingAccountStatus = billingAccountStatusOutput.GetProperty(&quot;Account Status Code&quot;);
		  	resultCode = billingAccountStatusOutput.GetProperty(&quot;ResultCode&quot;);
		  	resultMessage = billingAccountStatusOutput.GetProperty(&quot;ResultMessage&quot;);
		  	Outputs.SetProperty(&quot;1&quot;,billingAccountStatus);
		  	Outputs.SetProperty(&quot;2&quot;,activeCode);
		 	if (  billingAccountStatus == activeCode || billingAccountStatus == noInvoiceCode ){
		 		status = &quot;True&quot;;
		 	}
		 	else{
		 		status = &quot;False&quot;;
		 	}
		 	Outputs.SetProperty(&quot;status&quot;,status);
		 }
		 else{
		 	resultCode = billingAccountStatusOutput.GetProperty(&quot;ResultCode&quot;);
		  	resultMessage = billingAccountStatusOutput.GetProperty(&quot;ResultMessage&quot;);
		 }
		 
	}
	catch(e){
			resultCode = &quot;-1&quot;;
		  	resultMessage = e.toString();
	}
	finally{
		Outputs.SetProperty(&quot;ResultCode&quot;,resultCode);
		Outputs.SetProperty(&quot;ResultMessage&quot;,resultMessage);
		billingAccountStatusOutput = null;
		billingAccountStatusInput= null;	
	}
}"
			   SEQUENCE="21"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="IsOrderRequestOpen"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function IsOrderRequestOpen(Inputs,Outputs)
{
	try
	{
		var resultCode = &quot;0&quot;;
		var resultMessage = &quot;Success&quot;;
		var result = &quot;True&quot;;
		var AssetId = Inputs.GetProperty(&quot;Asset Id&quot;); 
		var boNoLink :BusObject	= TheApplication().GetBusObject(&quot;VF TK Suspend Resume NoLink BO&quot;);
		var bcOrder  :BusComp	= boNoLink.GetBusComp(&quot;VF TK Suspend Resume Staging BC&quot;);
		var errorCode 			= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTK_SUSPRES_BATCH_STATUS&quot;,&quot;03&quot;);
		var processedCode 		= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTK_SUSPRES_BATCH_STATUS&quot;,&quot;04&quot;);
		var errorInRequestCode 	= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTK_SUSPRES_BATCH_STATUS&quot;,&quot;05&quot;);
		var searchSpec = &quot;[Asset Id] = &apos;&quot; + AssetId + &quot;&apos; AND ([Status] &lt;&gt; &apos;03&apos; AND [Status] &lt;&gt;&apos;04&apos; AND [Status] &lt;&gt;&apos;05&apos;) &quot;;
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		with(bcOrder)
		{
			ActivateField(&quot;Asset Id&quot;);
			ActivateField(&quot;Status&quot;);																																	
			SetViewMode(AllView);
			ClearToQuery();
			// Begin: Scripting 15 null check Added 25may2012 Udbhav IDC
			inProp.SetProperty(&quot;AssetId&quot;,AssetId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End
			SetSearchExpr(searchSpec);//Scripting 31: No child query present 25may2012 Udbhav IDC VFTK
			ExecuteQuery(ForwardOnly);
			if ( FirstRecord ()){
				resultCode = &quot;1&quot;;
				resultMessage = &quot;Failed&quot;;
				result = &quot;True&quot;;
			}
			else{
				result = &quot;False&quot;;
			}
			Outputs.SetProperty(&quot;Result&quot;,result);
		}
	}
	catch(e)
	{
		resultCode = &quot;-1&quot;;
		resultMessage = e.toString();
	}
	finally{
		Outputs.SetProperty(&quot;Result&quot;,result);
		Outputs.SetProperty(&quot;ResultMessage&quot;, resultMessage);
		Outputs.SetProperty(&quot;ResultCode&quot;, resultCode);
		bcOrder 			= null;
		boNoLink 			= null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="IsProductExistInMobileLine"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function IsProductExistInMobileLine(Inputs,Outputs)
{
	try
	{
			var result = &quot;error&quot;;
			var OrderEntryBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
			var OrderLineItems : BusComp = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
			var AddActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
			var ExistingActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);
			var strModified = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;); //SCALISKAN DEF-8287
			var PartNum			= Inputs.GetProperty(&quot;PartNum&quot;);	
			var RootId			= Inputs.GetProperty(&quot;RootId&quot;);	
			var OrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
			
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			inProp.SetProperty(&quot;RootId&quot;,RootId);
			inProp.SetProperty(&quot;PartNum&quot;,PartNum);	
			inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			
			OrderLineItems.SetViewMode(AllView);
			OrderLineItems.ClearToQuery();
			OrderLineItems.SetSearchExpr(&quot;[Order Header Id]=&apos;&quot; + OrderId + &quot;&apos; AND [Root Order Item Id] = &apos;&quot; + RootId + &quot;&apos; AND [Part Number] = &apos;&quot;+PartNum+&quot;&apos; AND ([Action Code] = &apos;&quot;+AddActionCode+&quot;&apos; OR [Action Code] =&apos;&quot; + ExistingActionCode +  &quot;&apos; OR [Action Code] =&apos;&quot;+ strModified +&quot;&apos;)&quot;);  //SCALISKAN DEF-8287
			OrderLineItems.ExecuteQuery(ForwardOnly);
			if (OrderLineItems.FirstRecord())
			{
				result = &quot;true&quot;;
				Outputs.SetProperty(&quot;CurrProdId&quot;,OrderLineItems.GetFieldValue(&quot;Id&quot;)); //SCALISKAN DEF-8287
			}
			else
			{				
				result = &quot;false&quot;;				
			}
							
	}
	catch(e){
		result = &quot;error&quot;;
	}
	finally{
			Outputs.SetProperty(&quot;Result&quot;,result);
			OrderLineItems 	= null;
			OrderEntryBO 	= null;		
			inProp			= null;
			outProp			= null;
			BS				= null;
	}
}"
			   SEQUENCE="23"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupName (Input , Output)
{
try
	{	
	   	var type = Input.GetProperty(&quot;LOV&quot;) ;
	  	var val = Input.GetProperty(&quot;Val&quot;) ;;
	  	var name = null;
	   	var strParameterSrcExpr = &quot;[Type] = &apos;&quot;+type+&quot;&apos;&quot;+ &quot; AND [Value] = &apos;&quot;+val+&quot;&apos;&quot;;
	  	var boHPOrderEntry : BusObject = TheApplication().GetBusObject (&quot;HP Order Entry&quot;);
		var bcLOV : BusComp = boHPOrderEntry.GetBusComp (&quot;List Of Values&quot;);
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		bcLOV.ClearToQuery ();
		bcLOV.SetViewMode (AllView);
		bcLOV.ActivateField (&quot;Name&quot;);
		// Begin: Review Input validation: Scripting 15 null check Added 25may2012 Udbhav IDC
		inProp.SetProperty(&quot;type&quot;,type);
		inProp.SetProperty(&quot;val&quot;,val);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End
		bcLOV.SetSearchExpr (strParameterSrcExpr);
		bcLOV.ExecuteQuery(ForwardOnly);//Scripting 31: No child query present 25may2012 Udbhav IDC VFTK
		
		if (bcLOV.FirstRecord ())
		{
			name = bcLOV.GetFieldValue (&quot;Name&quot;);
		} 
		
		Output.SetProperty (&quot;Name&quot;, name);
	}
	finally
	{
	bcLOV = null;
	boHPOrderEntry = null;
	inProp 	= null;
	outProp = null;
	BS 		= null;
	}
}"
			   SEQUENCE="24"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="04/06/2012 16:18:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SanitizationAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SanitizationAsset(Inputs,Outputs)
{
	try
	{

		var boAsset 	 	:BusObject = TheApplication().GetBusObject(&quot;VF SR Creation BO&quot;);
		var boParam 	 	:BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);				
		var bcAsset 	 	:BusComp   = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var bcParam 	 	:BusComp   = boParam.GetBusComp (&quot;ACS NI Parameter&quot;);
		var boProdInfo 	 	:BusObject = TheApplication().GetBusObject(&quot;ISS CP Loader&quot;);	
		var bcProdInfo 	 	:BusComp   = boProdInfo.GetBusComp (&quot;Cfg ISS Sub Objects&quot;);
		var boProd	 	 	:BusObject = TheApplication().GetBusObject(&quot;VF Internal Product&quot;);
		var bcProd	 	 	:BusComp   = boProd.GetBusComp (&quot;Internal Product - ISS Admin&quot;);
				
		with(bcParam)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Value&quot;);	
			ActivateField(&quot;Function&quot;);			
			SetSearchExpr(&quot;[Function] = &apos;VFAssetSanInactive&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var sIsRecordPar = FirstRecord();
			while(sIsRecordPar)
			{
			var strpartnum = GetFieldValue(&quot;Value&quot;);
			with(bcAsset)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Product Part Number&quot;);
					ActivateField(&quot;Status&quot;);
					var ptova = &quot;[Product Part Number] = &apos;&quot;+ strpartnum +&quot;&apos; AND ([Status] = &apos;Active&apos; OR [Status] = &apos;Suspended&apos;)&quot;;
					SetSearchExpr(&quot;[Product Part Number] = &apos;&quot;+ strpartnum +&quot;&apos; AND ([Status] = &apos;Active&apos; OR [Status] = &apos;Suspended&apos;)&quot;);
					ExecuteQuery(ForwardOnly);
					var sIsRecord = FirstRecord();
					while(sIsRecord)//For each division we will change the value with corresponding Position mapped in the CX_PARAMETER
					{										
					SetFieldValue(&quot;Status&quot;,&quot;Inactive&quot;);										
					sIsRecord = NextRecord();
					 }
				}
			sIsRecordPar = NextRecord();	
			}
		
		with(bcParam)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Value&quot;);
			ActivateField(&quot;Name&quot;);				
			ActivateField(&quot;Function&quot;);			
			SetSearchExpr(&quot;[Function] = &apos;VFAssetSanMod&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var sIsRecordPar = FirstRecord();
			while(sIsRecordPar)
			{
			var stroldtariff = GetFieldValue(&quot;Name&quot;);
			var strnewtariff = GetFieldValue(&quot;Value&quot;);
			var strpartnum = GetFieldValue(&quot;Condition1&quot;);
			var strtariffroot = GetFieldValue(&quot;Condition3&quot;);						
			with (bcProdInfo)
	          {
	            SetViewMode(AllView);
	            ClearToQuery();
	            ActivateField(&quot;Orig Id&quot;);
	            ActivateField(&quot;Port Id&quot;);
	            SetSearchExpr (&quot;[Item Name] = &apos;&quot;+strnewtariff+&quot;&apos; AND [Last Version] = &apos;999999999&apos;&quot;);
	            ExecuteQuery(ForwardOnly);
	            if (FirstRecord()) 
	            {
	              var PortValidProdId = GetFieldValue(&quot;Orig Id&quot;);
	              var ProdPortId = GetFieldValue(&quot;Port Id&quot;);	          
	              
		            with(bcProd)
						{
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;Id&quot;);
							ActivateField(&quot;Name&quot;);							
							SetSearchExpr(&quot;[Name] = &apos;&quot;+ strnewtariff +&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord()) 
	            			{										
							var strProdID  = GetFieldValue(&quot;Id&quot;);										
							 }
						with(bcAsset)
							{
								SetViewMode(AllView);
								ClearToQuery();
								ActivateField(&quot;Product Part Number&quot;);
								ActivateField(&quot;Status&quot;);								
								SetSearchExpr(&quot;[Product Part Number] = &apos;&quot;+ strpartnum +&quot;&apos; AND ([Status] = &apos;Active&apos; OR [Status] = &apos;Suspended&apos;)&quot;);
								ExecuteQuery(ForwardOnly);
								var sIsRecord = FirstRecord();
								while(sIsRecord)//For each division we will change the value with corresponding Position mapped in the CX_PARAMETER
								{
								var RootAssetId = GetFieldValue(&quot;Root Asset Id&quot;);
								SetFieldValue(&quot;Product Id&quot;, strProdID);										
								SetFieldValue(&quot;Prod Item Id&quot;, PortValidProdId);
								SetFieldValue(&quot;Product Port Id&quot;, ProdPortId);
								sIsRecord = NextRecord();
								WriteRecord();	
								SetViewMode(AllView);
								ClearToQuery();
								ActivateField(&quot;Id&quot;);
								ActivateField(&quot;VF Tariff Plan&quot;);								
								SetSearchExpr(&quot;[Id] = &apos;&quot;+ RootAssetId +&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);									
								if (FirstRecord()) 
									{										
									SetFieldValue(&quot;VF Tariff Plan&quot;, strtariffroot);
									WriteRecord();
									SetViewMode(AllView);
									ClearToQuery();
									ActivateField(&quot;Product Part Number&quot;);
									ActivateField(&quot;Status&quot;);								
									SetSearchExpr(&quot;[Product Part Number] = &apos;&quot;+ strpartnum +&quot;&apos; AND ([Status] = &apos;Active&apos; OR [Status] = &apos;Suspended&apos;)&quot;);
									ExecuteQuery(ForwardOnly);
									var sIsRecord = FirstRecord();										
									 }																								
								 }
								}
							}
				  }
	            } 
				sIsRecordPar = NextRecord();	
				}
		}
		Outputs.SetProperty(&quot;Status&quot;,&quot;Completed&quot;);
	}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		boAsset = null;
		bcAsset = null;		
	}
}"
			   SEQUENCE="25"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/29/2013 12:18:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SanitizationOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SanitizationOrder(Inputs,Outputs)
{
	try
	{
		var sCreated = &quot;&quot;;
		var sPrimPos = &quot;&quot;;
		var boOrder	 	:BusObject = TheApplication().GetBusObject(&quot;VF Position Sanitization Order BO&quot;);
		var bcOrder	 	:BusComp   = boOrder.GetBusComp (&quot;VF Position Sanitization Order BC&quot;);
		var bcEmpl		:BusComp   = boOrder.GetBusComp (&quot;Employee&quot;);
		var sIsRecord;

		with(bcOrder)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;VF Created By Division Name&quot;);
			SetSearchExpr(&quot;[Id] &lt;&gt; &apos;0-1&apos; AND [VF Status] &lt;&gt; &apos;Cancelled&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			sIsRecord = FirstRecord();
			while(sIsRecord)//For each division we will change the value with corresponding Position mapped in the CX_PARAMETER
			{
				sCreated = GetFieldValue(&quot;Created By&quot;);
				with(bcEmpl)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Primary Position&quot;);
					SetSearchExpr(&quot;[Id] = &apos;&quot;+sCreated+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						sPrimPos = GetFieldValue(&quot;Primary Position&quot;);
						bcOrder.SetFieldValue(&quot;VF Created By Division Name&quot;, sPrimPos);
						bcOrder.WriteRecord();
					}						
				}
				sIsRecord = NextRecord();
			}
		}
		Outputs.SetProperty(&quot;Status&quot;,&quot;Completed&quot;);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcOrder = null;
		bcEmpl = null;
		boOrder = null;
	}
}"
			   SEQUENCE="26"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/04/2013 15:51:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SanitizationSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SanitizationSR(Inputs,Outputs)
{
	try
	{
		var sNewPos;
		var sOldDiv;
		var sNewPosId;
		var sOldDivId;
		var sOwnerId;
		var sPrimPosId;
		var boSR 	 	:BusObject = TheApplication().GetBusObject(&quot;VF Service Request Light&quot;);
		var bcSR 	 	:BusComp   = boSR.GetBusComp (&quot;VF Service Request Light&quot;);
		var bcParam 	:BusComp   = boSR.GetBusComp (&quot;ACS NI Parameter (Simple)&quot;);
		var bcEmpl		:BusComp   = boSR.GetBusComp (&quot;Employee&quot;);
		var sIsRecord;
		var sIsRecord2;

		with(bcParam)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Value&quot;);//Name of the old Division
			ActivateField(&quot;Condition1&quot;);//Name of the New Position
			ActivateField(&quot;Condition2&quot;);//Id of the New Position
			ActivateField(&quot;Condition3&quot;);//Id of the old Division
			SetSearchExpr(&quot;[Function] = &apos;VFSanitySR&apos; AND [Name] = &apos;Position&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			sIsRecord = FirstRecord();
			while(sIsRecord)//For each division we will change the value with corresponding Position mapped in the CX_PARAMETER
			{
				sOldDiv = GetFieldValue(&quot;Value&quot;);
				sNewPos = GetFieldValue(&quot;Condition1&quot;);
				sNewPosId = GetFieldValue(&quot;Condition2&quot;);//this value need to be filled in the PArameter via Loader before running the sanitization script;
				sOldDivId = GetFieldValue(&quot;Condition3&quot;);
				with(bcSR)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Owned By Group Id&quot;);
					ActivateField(&quot;Owned By Id&quot;);
					SetSearchExpr(&quot;[Id] &lt;&gt; &apos;0-1&apos; AND [Owned By Group Id]=&apos;&quot;+sOldDivId+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					sIsRecord2 = FirstRecord();
					while(sIsRecord2)
					{
					sOwnerId = GetFieldValue(&quot;Owned By Id&quot;);
					if(sOwnerId !=&quot;&quot;)
					{
						with(bcEmpl)
						{
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;Primary Position Id&quot;);
							SetSearchExpr(&quot;[Id] = &apos;&quot;+sOwnerId+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								sPrimPosId = GetFieldValue(&quot;Primary Position Id&quot;);
								bcSR.SetFieldValue(&quot;Owned By Group Id&quot;,sPrimPosId);
								bcSR.WriteRecord();
							}	
						}
					}
					else
					{	
						SetFieldValue(&quot;Owned By Group Id&quot;,sNewPosId);
						WriteRecord();
					}
					sIsRecord2 = NextRecord();
					}					
				}
				sIsRecord = NextRecord();
			}
		}	
		Outputs.SetProperty(&quot;Status&quot;,&quot;Completed&quot;);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcParam = null;
		bcSR = null;
		boSR = null;
	}
}"
			   SEQUENCE="27"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/04/2013 15:51:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SanitizationSRInter"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SanitizationSRInter(Inputs,Outputs)
{
	try
	{
		var sNewPos = &quot;&quot;;
		var sOldDiv= &quot;&quot;;
		var sNewPosId= &quot;&quot;;
		var sOldDivId= &quot;&quot;;
		var sOwnerId= &quot;&quot;;
		var sPrimPosId= &quot;&quot;;
		var OrgId= &quot;&quot;;
		var OrgName= &quot;&quot;;
		var sPrimOrgId= &quot;&quot;;
		var OldOrgId= &quot;&quot;;
		var SRId= &quot;&quot;;
		var boSR 	 	:BusObject = TheApplication().GetBusObject(&quot;VF Service Request Light&quot;);
		var bcSR 	 	:BusComp   = boSR.GetBusComp (&quot;VF Service Request Light&quot;);
		var bcParam 	:BusComp   = boSR.GetBusComp (&quot;ACS NI Parameter (Simple)&quot;);
		var SRInter		:BusComp   = boSR.GetBusComp (&quot;VF Service Request Organization Light&quot;);
		var bcEmpl		:BusComp   = boSR.GetBusComp (&quot;Employee&quot;);
		var sIsRecord;
		var sIsRecord2;

		with(bcParam)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Value&quot;);//Name of the old Division
			ActivateField(&quot;Condition1&quot;);//Name of the New Position
			ActivateField(&quot;Condition2&quot;);//Id of the New Position
			ActivateField(&quot;Condition3&quot;);//Id of the old Division
			ActivateField(&quot;Condition4&quot;);//Name of the New Organization
			ActivateField(&quot;Comments&quot;);//Id of the New Organization
			SetSearchExpr(&quot;[Function] = &apos;VFSanitySR&apos; AND [Name] = &apos;Position&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			sIsRecord = FirstRecord();
			while(sIsRecord)//For each division we will change the value with corresponding Position mapped in the CX_PARAMETER
			{
				sOldDiv = GetFieldValue(&quot;Value&quot;);
				sNewPos = GetFieldValue(&quot;Condition1&quot;);
				sNewPosId = GetFieldValue(&quot;Condition2&quot;);//this value need to be filled in the PArameter via Loader before running the sanitization script;
				sOldDivId = GetFieldValue(&quot;Condition3&quot;);
				OrgId = GetFieldValue(&quot;Condition4&quot;);
				OrgName = GetFieldValue(&quot;Comments&quot;);
				with(bcSR)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Owned By Group Id&quot;);
					ActivateField(&quot;Owned By Id&quot;);
					SetSearchExpr(&quot;[Id] &lt;&gt; &apos;0-1&apos; AND [Owned By Group Id]=&apos;&quot;+sNewPosId+&quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					sIsRecord2 = FirstRecord();
					while(sIsRecord2)
					{
					sOwnerId = GetFieldValue(&quot;Owned By Id&quot;);
					OldOrgId = GetFieldValue(&quot;Primary Organization Id&quot;);
					SRId = GetFieldValue(&quot;Id&quot;);
					if(sOwnerId !=&quot;&quot;)
					{
						with(bcEmpl)
						{
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;Primary Organization Id&quot;);
							SetSearchExpr(&quot;[Id] = &apos;&quot;+sOwnerId+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								sPrimOrgId = GetFieldValue(&quot;Primary Organization Id&quot;);	
								bcSR.SetFieldValue(&quot;Primary Organization Id&quot;,sPrimOrgId);
								bcSR.WriteRecord();
								
								with(SRInter)
								{
									SetViewMode(AllView);
									ClearToQuery();
									SetSearchExpr(&quot;[Organization Id] = &apos;&quot;+sPrimOrgId+&quot;&apos; AND [Service Request Id] = &apos;&quot;+SRId+&quot;&apos;&quot;);
									ExecuteQuery(ForwardOnly);
									if (!FirstRecord())
									{
										SetViewMode(AllView);
										ClearToQuery();
										ActivateField(&quot;Organization Id&quot;);
										SetSearchExpr(&quot;[Organization Id] = &apos;&quot;+OldOrgId+&quot;&apos; AND [Service Request Id] = &apos;&quot;+SRId+&quot;&apos;&quot;);
										ExecuteQuery(ForwardOnly);
										if (FirstRecord())
										{
											SetFieldValue(&quot;Organization Id&quot;,sPrimOrgId);
											WriteRecord();
										}
									}
								}
							}	
						}
					}
					else
					{	
						SetFieldValue(&quot;Primary Organization Id&quot;,OrgId);
						WriteRecord();
						with(SRInter)
						{
							SetViewMode(AllView);
							ClearToQuery();
							SetSearchExpr(&quot;[Organization Id] = &apos;&quot;+OrgId+&quot;&apos; AND [Service Request Id] = &apos;&quot;+SRId+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (!FirstRecord())
							{
								SetViewMode(AllView);
								ClearToQuery();
								ActivateField(&quot;Organization Id&quot;);
								SetSearchExpr(&quot;[Organization Id] = &apos;&quot;+OldOrgId+&quot;&apos; AND [Service Request Id] = &apos;&quot;+SRId+&quot;&apos;&quot;);
								ExecuteQuery(ForwardOnly);
								if (FirstRecord())
								{
									SetFieldValue(&quot;Organization Id&quot;,OrgId);
									WriteRecord();
								}
							}
							
						}
					}
					sIsRecord2 = NextRecord();
					}					
				}
				sIsRecord = NextRecord();
			}
		}
		Outputs.SetProperty(&quot;Status&quot;,&quot;Completed&quot;);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcParam = null;
		bcSR = null;
		SRInter = null;
		boSR = null;
	}
}"
			   SEQUENCE="28"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/04/2013 15:51:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SanitizationVFAccountPayType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SanitizationVFAccountPayType(Inputs,Outputs)
{
	try
	{

		var boAsset 	 	:BusObject = TheApplication().GetBusObject(&quot;VF SR Creation BO&quot;);
		var bcAsset 	 	:BusComp   = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);

		with(bcAsset)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Product Part Number&quot;);
			ActivateField(&quot;Status&quot;);
			ActivateField(&quot;VF Account Pay Type&quot;);
			ActivateField(&quot;VF Tariff Plan&quot;);
			SetSearchExpr(&quot;[Product Part Number] = &apos;1000&apos; AND ([Status] = &apos;Active&apos; OR [Status] = &apos;Suspended&apos;) AND [VF Account Pay Type] is not null&quot;);
			ExecuteQuery(ForwardOnly);
			var sIsRecord = FirstRecord();
			while(sIsRecord)//For each division we will change the value with corresponding Position mapped in the CX_PARAMETER
			{
				var strtariff = GetFieldValue(&quot;VF Tariff Plan&quot;);
				var strAccPay = GetFieldValue(&quot;VF Account Pay Type&quot;);
				if(strAccPay == &quot;PostPaid&quot;)
					{
						if(strtariff == &quot;M2M0004 – Data&quot; || strtariff == &quot;M2M0005 – Data&quot; || strtariff == &quot;M2M00011 – Data&quot;)
						{					
								SetFieldValue(&quot;VF Account Pay Type&quot;,&quot;Postpaid OIV odenmedi&quot;);
							   							
						}
						else
						         SetFieldValue(&quot;VF Account Pay Type&quot;,&quot;Postpaid OIV odendi&quot;);
                 				 WriteRecord();
					}
					else if(strAccPay == &quot;PostOden&quot;)
					{
						if(strtariff == &quot;M2M0004 – Data&quot; || strtariff == &quot;M2M0005 – Data&quot; || strtariff == &quot;M2M00011 – Data&quot;)
						{					
								SetFieldValue(&quot;VF Account Pay Type&quot;,&quot;Postoden OIV odenmedi&quot;);
							   							
						}
						else
						         SetFieldValue(&quot;VF Account Pay Type&quot;,&quot;Postoden OIV odendi&quot;);
                 				 WriteRecord();
					}					
				sIsRecord = NextRecord();
			 }
		}	
		Outputs.SetProperty(&quot;Status&quot;,&quot;Completed&quot;);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		boAsset = null;
		bcAsset = null;		
	}
}"
			   SEQUENCE="29"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="03/04/2013 15:51:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
    if (  MethodName ==&quot;GetCxParameterWithGivenExp&quot;){
    	GetCxParameterWithGivenExp(Inputs,Outputs)	;
    	return (CancelOperation);
	
    }
    else if (  MethodName ==&quot;HasProductExistInOrderWithGivenExp&quot;){
    	HasProductExistInOrderWithGivenExp(Inputs,Outputs)	;
    	return (CancelOperation);
	
    }
    else if (  MethodName ==&quot;CreateSearchExpForAddPromotion&quot;){
    	CreateSearchExpForAddPromotion(Inputs,Outputs)	;
    	return (CancelOperation);
	
    }
    else if ( MethodName == &quot;AddPromotion&quot;){
    	AddPromotion(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;GetShopIdNameByEmpId&quot;){
    	GetShopIdNameByEmpId(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName ==&quot;IsBillingAccountActive&quot;){
    	IsBillingAccountActive(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName ==&quot;GetBillingAccountStatus&quot;){
    	GetBillingAccountStatus(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;GetAssetStatus&quot;){
    	GetAssetStatus(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;GetAssetInfo&quot;){
    	GetAssetInfo(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;IsAssetDisconnected&quot;){
    	IsAssetDisconnected(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;IsOrderRequestOpen&quot;){
    	IsOrderRequestOpen(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;CreateHeaderForTibco&quot;){
    	CreateHeaderForTibco(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;LookupName&quot;){
    	LookupName(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;BillCycle&quot;){
    	BillCycle(Inputs,Outputs);
    	return (CancelOperation);
    }   
    else if ( MethodName == &quot;FieldSanitization&quot;){
    	FieldSanitization(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;FieldStatusSanitization&quot;){
    	FieldStatusSanitization(Inputs,Outputs);
    	return (CancelOperation);
    } 
    else if ( MethodName == &quot;SanitizationSR&quot;){
    	SanitizationSR(Inputs,Outputs);
    	return (CancelOperation);
    }
	else if ( MethodName == &quot;SanitizationSRInter&quot;){
    	SanitizationSRInter(Inputs,Outputs);
    	return (CancelOperation);
    }
	else if ( MethodName == &quot;SanitizationOrder&quot;){
    	SanitizationOrder(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;SanitizationVFAccountPayType&quot;){
    	SanitizationVFAccountPayType(Inputs,Outputs);
    	return (CancelOperation);
    } 
     else if ( MethodName == &quot;SanitizationAsset&quot;){
    	SanitizationAsset(Inputs,Outputs);
    	return (CancelOperation);
    }
     else if ( MethodName == &quot;FinalStatusSanitization&quot;){
    	FinalStatusSanitization(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;SetOrderPreventCancelation&quot;){
    	SetOrderPreventCancelation(Inputs,Outputs);
    	return (CancelOperation);
    }
    else if ( MethodName == &quot;GetMotherMaidenName&quot;){
    	GetMotherMaidenName(Inputs,Outputs);
    	return (CancelOperation);
	}
	else if ( MethodName == &quot;ExportLTETransactions&quot;){
    	ExportLTETransactions(Inputs,Outputs);
    	return (CancelOperation);
	}
	else if ( MethodName == &quot;CheckOLI&quot;){
    	CheckOLI(Inputs,Outputs);
    	return (CancelOperation);
	}
	else if ( MethodName == &quot;GetPositionName&quot;){
    	GetPositionName(Inputs,Outputs);
    	return (CancelOperation);
	}
 	else if ( MethodName == &quot;VFGetGIBEstablishDate&quot;){
  		VFGetGIBEstablishDate(Inputs,Outputs);
  		return (CancelOperation);
  	}
  	    
	return (ContinueOperation);
}"
			   SEQUENCE="32"
			   UPDATED="08/11/2016 00:12:27"
			   UPDATED_BY="SSANTOS"
			   CREATED="03/19/2012 08:24:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOrderPreventCancelation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/******************************************************************************
*CREATED BY : SEZGIN CALISKAN
*CREATED ON : 21.11.2013
*DESCRIPTION: CR 798 M2M Self Service - Phase 3, 
	Sets the Prevent Automatic Cancellation flag of created order under the Bulk Request.
******************************************************************************/
function SetOrderPreventCancelation (Inputs,Outputs)
{
	try
	{
		var boAboBulkReq 	:BusObject = TheApplication().GetBusObject(&quot;ABO Bulk Request&quot;);
		var bcBulkReqHeader	:BusComp   = boAboBulkReq.GetBusComp (&quot;ABO Bulk Request Header&quot;);
		var bcBulkReqActSet	:BusComp   = boAboBulkReq.GetBusComp (&quot;ABO Bulk Request Action Set&quot;);
		var bcOrderEnrty 	:BusComp   = boAboBulkReq.GetBusComp (&quot;Order Entry - Orders&quot;);

		var strBulkReqId	= Inputs.GetProperty(&quot;BulkHeaderId&quot;);
		var strCancelFlg	= Inputs.GetProperty(&quot;CancelFlag&quot;);
		var bActSetRow = false;

		if(strBulkReqId!=&quot;&quot; &amp;&amp; strBulkReqId!=null)
		{
			with(bcBulkReqHeader)
			{
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Id]=&apos;&quot;+strBulkReqId+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					with(bcBulkReqActSet)
					{
						SetViewMode(AllView);
						ExecuteQuery(ForwardOnly);
						bActSetRow = FirstRecord();
						while(bActSetRow)
						{
							with(bcOrderEnrty)
							{
								SetViewMode(AllView);
								ActivateField(&quot;VF Prevent Automatic Cancellation&quot;);
								ExecuteQuery(ForwardOnly);
								if(FirstRecord())
								{
									SetFieldValue(&quot;VF Prevent Automatic Cancellation&quot;,strCancelFlg);
									WriteRecord();
								}
							}
							bActSetRow = NextRecord();
						}
					}
				}
			}
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcOrderEnrty	= null;
		bcBulkReqActSet = null;
		bcBulkReqHeader	= null;
		boAboBulkReq 	= null;	
	}
}"
			   SEQUENCE="30"
			   UPDATED="02/24/2016 13:59:46"
			   UPDATED_BY="RPIRES"
			   CREATED="12/05/2013 10:32:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VFGetGIBEstablishDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VFGetGIBEstablishDate(Inputs, Outputs)
{
	/*
	* DEF-11280 - NB22362 - 20160727
	* Query for the latest GIB record associated with a given customer account and returns 
	* the Establish Date field value from that GIB record
	*
	* Inputs - AccountId - customer account row id
	*/

	try
	{
		var BOGIB : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var BCGIB : BusComp = BOGIB.GetBusComp(&quot;VF GIB Company Info&quot;);
		var BCGIBResponse: BusComp = BOGIB.GetBusComp(&quot;VF GIB Response&quot;);
		
		var strAccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var strEstablishDate = &quot;&quot;;
		var strResponseId = &quot;&quot;;
		
		if(strAccountId != &quot;&quot;)
		{
			with(BCGIBResponse)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Account Id&quot;);
				SetSearchSpec(&quot;Account Id&quot;, strAccountId);
				SetSortSpec(&quot;Created(DESCENDING)&quot;);
				ExecuteQuery(ForwardBackward);
					
				if(FirstRecord())
				{
					strResponseId = GetFieldValue(&quot;Id&quot;);

					with(BCGIB)
					{
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;VF GIB Response Id&quot;);
						ActivateField(&quot;Created&quot;);
						ActivateField(&quot;Establish Date&quot;);
						SetSearchSpec(&quot;VF GIB Response Id&quot;, strResponseId);
						SetSortSpec(&quot;Created(DESCENDING)&quot;);
						ExecuteQuery(ForwardBackward);
							
						if(FirstRecord())
						{		
							strEstablishDate = GetFieldValue(&quot;Establish Date&quot;);
							Outputs.SetProperty(&quot;out&quot;, strEstablishDate);
						}
					}
				}
			}
		}	
	}
	
    catch(e)
	{
		throw(e);
	}
	
	finally
	{
		Outputs.SetProperty(&quot;out&quot;, strEstablishDate);
		BCGIB = null;
		BOGIB = null;
		BCGIBResponse = null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="08/11/2016 14:52:42"
			   UPDATED_BY="SSANTOS"
			   CREATED="08/10/2016 22:01:35"
			   CREATED_BY="SSANTOS">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



