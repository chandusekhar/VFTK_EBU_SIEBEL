<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="VF WP 11"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF Authorize Control"
	   UI_FREEZE="N"
	   UPDATED="12/09/2016 10:32:35"
	   UPDATED_BY="JMARQUES"
	   CREATED="06/08/2011 21:18:42"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="VF WP 11"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Authorized Check"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="12/09/2016 10:18:50"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="JMARQUES"
		   UPDATED="12/09/2016 10:23:50"
		   UPDATED_BY="JMARQUES"
		   CREATED="06/08/2011 21:20:17"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Authorized Check"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="06/08/2011 21:20:50"
			   UPDATED_BY="SADMIN"
			   CREATED="06/08/2011 21:20:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VF WP 11"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="isAuthorizedUser"
			   UPDATED="06/28/2011 19:50:53"
			   UPDATED_BY="SADMIN"
			   CREATED="06/08/2011 21:21:28"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="06/10/2011 16:50:40"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:07:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error_Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="06/10/2011 16:50:41"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:11:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error_Description"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="06/10/2011 16:50:56"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:11:31"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ICCI"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="06/28/2011 19:50:53"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:10:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IsAuthorizedUser"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="06/10/2011 16:51:02"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:11:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LoggedMSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/10/2011 16:51:05"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:10:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MSISDN"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/10/2011 16:50:09"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:10:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status_Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="06/09/2011 12:11:51"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 12:11:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="isAuthorizedUser"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/08/2011 21:21:53"
				   UPDATED_BY="SADMIN"
				   CREATED="06/08/2011 21:21:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;isAuthorizedUser&quot;);
	{
		isAuthorizedUser(Inputs, Outputs);
		return (CancelOperation);	
	}
	return (ContinueOperation);
}"
			   SEQUENCE="2"
			   UPDATED="06/09/2011 18:09:20"
			   UPDATED_BY="SADMIN"
			   CREATED="06/09/2011 11:12:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="isAuthorizedUser"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function isAuthorizedUser (Inputs,Outputs)
{
	try
	{
		var strBillingAccountCodeIN		= Inputs.GetProperty(&quot;BillingAccountCode&quot;);
		var strBillingAccountCode   	= &quot;&quot;;
		var strLoggedMSISDN 			= Inputs.GetProperty(&quot;LoggedMSISDN&quot;);
		var strMSISDN 					= Inputs.GetProperty(&quot;MSISDN&quot;);
		var strICCIIN					= Inputs.GetProperty(&quot;ICCI&quot;);
		var strICCI						= &quot;&quot;;
		var strContactId				= &quot;&quot;;
		var strIsAuthorizedUser 		= &quot;N&quot;;
		var strSearchExpr				= &quot;&quot;;
		var strAccountId				= &quot;&quot;;
		var strRepresentativeId			= &quot;&quot;;
		var strRepresentativeMobileNo	= &quot;&quot;;
		var strBillToContact			= &quot;&quot;;
		var strBillToContactMobileNo	= &quot;&quot;;
		var strMSISDNBillToContact		= &quot;&quot;;
		var strMSISDNRepresentativeId 	= &quot;&quot;;
		var strMSISDNContactId			= &quot;&quot;;
		var strContactType				= &quot;&quot;;
		var strSelfcareAdminUser 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;,&quot;Self Care Admin&quot;);
		var strExpr1				= &quot;&quot;;
		var strExpr2				= &quot;&quot;;
		var strExpr3				= &quot;&quot;;
		var BoAsset					= TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var BoAccount				= TheApplication().GetBusObject(&quot;Account&quot;);
		var BcBillingAccount 		= BoAsset.GetBusComp(&quot;HP Submit - Billing Account&quot;);
		var BcAccount 				= BoAsset.GetBusComp(&quot;HP Submit - Account&quot;);
		var BcAsset					= BoAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var BcContact				= BoAccount.GetBusComp(&quot;Contact HP&quot;);
		var strOwnerAccntIdMSISDN	= &quot;&quot;;
		var strOwnerAccntIdLoggedMSISDN = &quot;&quot;;
	
		if (strMSISDN == &quot;&quot; &amp;&amp; strICCIIN == &quot;&quot; &amp;&amp; strBillingAccountCodeIN == &quot;&quot;)
		{
			Outputs.SetProperty (&quot;Status_Code&quot;, &quot;1&quot;);
			Outputs.SetProperty (&quot;Error_Code&quot;, &quot;SBL-28100&quot;);
			Outputs.SetProperty (&quot;Error_Description&quot;, &quot;Missing input parameters&quot;);
			return (CancelOperation);
		}
		else if ((strMSISDN != &quot;&quot; &amp;&amp; strICCIIN != &quot;&quot;) || (strMSISDN != &quot;&quot; &amp;&amp; strBillingAccountCodeIN != &quot;&quot;) || (strBillingAccountCodeIN != &quot;&quot; &amp;&amp; strICCIIN != &quot;&quot;) || (strMSISDN != &quot;&quot; &amp;&amp; strICCIIN != &quot;&quot; &amp;&amp; strBillingAccountCodeIN!= &quot;&quot;))
		{
			Outputs.SetProperty (&quot;Status_Code&quot;, &quot;1&quot;);
			Outputs.SetProperty (&quot;Error_Code&quot;, &quot;SBL-28101&quot;);
			Outputs.SetProperty (&quot;Error_Description&quot;, &quot;Too many inputs&quot;);
			return (CancelOperation);
		}
		else
		{
			var inProp 	:PropertySet	= TheApplication().NewPropertySet();
			var outProp :PropertySet	= TheApplication().NewPropertySet();
			var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strLoggedMSISDN&quot;,strLoggedMSISDN); //Id Validation
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
			
			if(strMSISDN != &quot;&quot; &amp;&amp; strMSISDN != null)
			{			
				with(BcAsset)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Owner Account Id&quot;);
					SetSearchSpec(&quot;Serial Number&quot;, strMSISDN);
					strExpr3 = &quot;[Serial Number] = &apos;&quot;+ strMSISDN +&quot;&apos; AND  ([Status] = &apos;&quot;+ TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;)+&quot;&apos; OR [Status] = &apos;&quot;+ TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;)+&quot;&apos;)&quot;;
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						strOwnerAccntIdMSISDN = GetFieldValue(&quot;Owner Account Id&quot;);
					}
				}
			}
			
           	BcAsset.SetViewMode(AllView);
			BcAsset.ClearToQuery();
			BcAsset.ActivateField(&quot;Billing Account Code&quot;);
			BcAsset.ActivateField(&quot;Owner Account Id&quot;);
			BcAsset.ActivateField(&quot;Owner Contact Id&quot;);
			BcAsset.ActivateField(&quot;Status&quot;);
			BcAsset.ActivateField(&quot;ICCD&quot;);
			BcAsset.SetSearchSpec(&quot;Serial Number&quot;, strLoggedMSISDN);
			strExpr1 = &quot;[Serial Number] = &apos;&quot;+ strLoggedMSISDN +&quot;&apos; AND  ([Status] = &apos;&quot;+ TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;)+&quot;&apos; OR [Status] = &apos;&quot;+ TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;)+&quot;&apos;)&quot;;
			BcAsset.SetSearchExpr(strExpr1);	
			BcAsset.ExecuteQuery(ForwardOnly);
			if(BcAsset.FirstRecord())
			{
				strBillingAccountCode = BcAsset.GetFieldValue(&quot;Billing Account Code&quot;);
				strContactId 		  = BcAsset.GetFieldValue(&quot;Owner Contact Id&quot;);
				strOwnerAccntIdLoggedMSISDN = BcAsset.GetFieldValue(&quot;Owner Account Id&quot;);
				
				with (BcContact)
				{
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Type&quot;);
					SetSearchSpec(&quot;Id&quot;, strContactId);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						strContactType = GetFieldValue(&quot;Type&quot;);
					}
				}	
				
				if(strContactType == strSelfcareAdminUser &amp;&amp; strOwnerAccntIdLoggedMSISDN == strOwnerAccntIdMSISDN)
					strIsAuthorizedUser = &quot;Y&quot;;	
					
				BcBillingAccount.SetViewMode(AllView);
				BcBillingAccount.ClearToQuery();
				BcBillingAccount.ActivateField(&quot;Bill To Contact Id&quot;);
				BcBillingAccount.SetSearchSpec(&quot;Account Code&quot;, strBillingAccountCode);
				BcBillingAccount.ExecuteQuery(ForwardOnly);
				if(BcBillingAccount.FirstRecord())
				{
					strBillToContact 	= BcBillingAccount.GetFieldValue(&quot;Bill To Contact Id&quot;);
					strAccountId = BcBillingAccount.GetFieldValue(&quot;Parent Account Id&quot;);
					BcAccount.SetViewMode(AllView);
					BcAccount.ClearToQuery();
					BcAccount.ActivateField(&quot;Contact Id&quot;);
					BcAccount.ActivateField(&quot;Primary Contact Id&quot;);
					BcAccount.SetSearchSpec(&quot;Id&quot;, strAccountId);
					BcAccount.ExecuteQuery(ForwardOnly);
					if(BcAccount.FirstRecord())
					{
						strRepresentativeId   = BcAccount.GetFieldValue(&quot;Primary Contact Id&quot;);
					}
				}
				else
				{
					Outputs.SetProperty(&quot;Status_Code&quot;,&quot;1&quot;);
					Outputs.SetProperty(&quot;Error_Code&quot;,&quot;SBL-28005&quot;);
					Outputs.SetProperty(&quot;Error_Description&quot;,&quot;Billing Account not found&quot;);
					return (CancelOperation);
				}
			}
			else
			{
				Outputs.SetProperty(&quot;Status_Code&quot;,&quot;1&quot;);
				Outputs.SetProperty(&quot;Error_Code&quot;,&quot;SBL-28007&quot;);
				Outputs.SetProperty(&quot;Error_Description&quot;,&quot;MSISDN Code Not Found&quot;);
				return (CancelOperation);
			}
			if (strMSISDN!=&quot;&quot; || strICCIIN   !=&quot;&quot;)
			{
				if(strICCIIN!=&quot;&quot;)
				{
					strICCI = strICCIIN;
					BcAsset.SetViewMode(AllView);
		       		BcAsset.ClearToQuery();
					BcAsset.ActivateField(&quot;Billing Account Code&quot;);
					BcAsset.ActivateField(&quot;Status&quot;);
					BcAsset.SetSearchSpec(&quot;ICCD&quot;, strICCIIN);
					BcAsset.SetSearchSpec(&quot;Status&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;));
					BcAsset.ExecuteQuery(ForwardOnly);
					if(BcAsset.FirstRecord())
					{
						strBillingAccountCode   = BcAsset.GetFieldValue(&quot;Billing Account Code&quot;);
						strMSISDN		    	= BcAsset.GetFieldValue(&quot;Serial Number&quot;);
						strMSISDNContactId		= BcAsset.GetFieldValue(&quot;Owner Contact Id&quot;);
					}
					else
					{
						Outputs.SetProperty(&quot;Status_Code&quot;,&quot;1&quot;);
						Outputs.SetProperty(&quot;Error_Code&quot;,&quot;SBL-28027&quot;);
						Outputs.SetProperty(&quot;Error_Description&quot;,&quot;ICCI not found&quot;);
						return (CancelOperation);
					}
				}
				if(strMSISDN!=&quot;&quot; &amp;&amp; strICCIIN==&quot;&quot;)
				{	
					BcAsset.SetViewMode(AllView);
					BcAsset.ClearToQuery();
					BcAsset.ActivateField(&quot;Billing Account Code&quot;);
					BcAsset.ActivateField(&quot;Owner Contact Id&quot;);
					BcAsset.ActivateField(&quot;Status&quot;);
					BcAsset.ActivateField(&quot;ICCD&quot;);
					strExpr2 = &quot;[Serial Number] = &apos;&quot;+ strMSISDN +&quot;&apos; AND  ([Status] = &apos;&quot;+ TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;)+&quot;&apos; OR [Status] = &apos;&quot;+ TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;)+&quot;&apos;)&quot;;
					BcAsset.SetSearchExpr(strExpr2);	
					BcAsset.ExecuteQuery(ForwardOnly);
					if(BcAsset.FirstRecord())
					{
						strBillingAccountCode 	= BcAsset.GetFieldValue(&quot;Billing Account Code&quot;);
						strICCI 			  	= BcAsset.GetFieldValue(&quot;ICCD&quot;);
						strMSISDNContactId		= BcAsset.GetFieldValue(&quot;Owner Contact Id&quot;);
					}
					else
					{
						Outputs.SetProperty(&quot;Status_Code&quot;,&quot;1&quot;);
						Outputs.SetProperty(&quot;Error_Code&quot;,&quot;SBL-28007&quot;);
						Outputs.SetProperty(&quot;Error_Description&quot;,&quot;MSISDN Code Not Found&quot;);
						return (CancelOperation);
					}
				}
				BcBillingAccount.SetViewMode(AllView);
				BcBillingAccount.ClearToQuery();
				BcBillingAccount.ActivateField(&quot;Bill To Contact Id&quot;);
				BcBillingAccount.ActivateField(&quot;Bill To Contact Cellular Number&quot;);
				BcBillingAccount.SetSearchSpec(&quot;Account Code&quot;, strBillingAccountCode);
				BcBillingAccount.ExecuteQuery(ForwardOnly);
				if(BcBillingAccount.FirstRecord())
				{
					strMSISDNBillToContact 	 = BcBillingAccount.GetFieldValue(&quot;Bill To Contact Id&quot;);
					strBillToContactMobileNo = BcBillingAccount.GetFieldValue(&quot;Bill To Contact Cellular Number&quot;);
					strBillToContactMobileNo = strBillToContactMobileNo.substring(2,12);
					strAccountId = BcBillingAccount.GetFieldValue(&quot;Parent Account Id&quot;);
					BcAccount.SetViewMode(AllView);
					BcAccount.ClearToQuery();
					BcAccount.ActivateField(&quot;Contact Type&quot;);
					BcAccount.ActivateField(&quot;Primary Contact Id&quot;);
					BcAccount.ActivateField(&quot;Primary Contact Cell Number&quot;);
					BcAccount.SetSearchSpec(&quot;Id&quot;, strAccountId);
					BcAccount.ExecuteQuery(ForwardOnly);
					if(BcAccount.FirstRecord())
					{
						strMSISDNRepresentativeId   = BcAccount.GetFieldValue(&quot;Primary Contact Id&quot;);
						strRepresentativeMobileNo	= BcAccount.GetFieldValue(&quot;Primary Contact Cell Number&quot;);		
						strRepresentativeMobileNo = strRepresentativeMobileNo.substring(2,12);		
						
						if(strContactId == &quot;&quot; || (strContactId != strBillToContact &amp;&amp; strContactId != strRepresentativeId))
						{
							if(strLoggedMSISDN == strRepresentativeMobileNo || strLoggedMSISDN == strBillToContactMobileNo)
							{
								strIsAuthorizedUser = &quot;Y&quot;;
								Outputs.SetProperty(&quot;Status_Code&quot;,&quot;0&quot;);
							    Outputs.SetProperty(&quot;IsAuthorizedUser&quot;,strIsAuthorizedUser);
							    Outputs.SetProperty(&quot;ICCI&quot;,strICCI);
							    Outputs.SetProperty(&quot;BillingAccountCode&quot;,strBillingAccountCode);
						        return (CancelOperation);
							}
							else
							{
								Outputs.SetProperty(&quot;Status_Code&quot;,&quot;0&quot;);
							    Outputs.SetProperty(&quot;IsAuthorizedUser&quot;,strIsAuthorizedUser);
							    Outputs.SetProperty(&quot;ICCI&quot;,strICCI);
							    Outputs.SetProperty(&quot;BillingAccountCode&quot;,strBillingAccountCode);
						        return (CancelOperation);
							}
						}
						else
						{
							if(strMSISDNBillToContact == strContactId || strMSISDNRepresentativeId == strContactId)
							{
								strIsAuthorizedUser = &quot;Y&quot;;
								Outputs.SetProperty(&quot;Status_Code&quot;,&quot;0&quot;);
							    Outputs.SetProperty(&quot;IsAuthorizedUser&quot;,strIsAuthorizedUser);
							    Outputs.SetProperty(&quot;ICCI&quot;,strICCI);
							    Outputs.SetProperty(&quot;BillingAccountCode&quot;,strBillingAccountCode);
						        return (CancelOperation);
							}
							else
							{
								Outputs.SetProperty(&quot;Status_Code&quot;,&quot;0&quot;);
							    Outputs.SetProperty(&quot;IsAuthorizedUser&quot;,strIsAuthorizedUser);
							    Outputs.SetProperty(&quot;ICCI&quot;,strICCI);
							    Outputs.SetProperty(&quot;BillingAccountCode&quot;,strBillingAccountCode);
						        return (CancelOperation);
							}
						}
					}
				}
				else
				{
					Outputs.SetProperty(&quot;Status_Code&quot;,&quot;1&quot;);
					Outputs.SetProperty(&quot;Error_Code&quot;,&quot;SBL-28005&quot;);
					Outputs.SetProperty(&quot;Error_Description&quot;,&quot;Billing Account not found&quot;);
					return (CancelOperation);
				}
			}				
						
			if(strBillingAccountCodeIN != &quot;&quot; &amp;&amp; strMSISDN==&quot;&quot; &amp;&amp; strICCIIN ==&quot;&quot;)
			{
				strBillingAccountCode = strBillingAccountCodeIN;
				BcBillingAccount.SetViewMode(AllView);
				BcBillingAccount.ClearToQuery();
				BcBillingAccount.ActivateField(&quot;Bill To Contact Id&quot;);
				BcBillingAccount.SetSearchSpec(&quot;Account Code&quot;, strBillingAccountCodeIN);
				BcBillingAccount.ExecuteQuery(ForwardOnly);
				if(BcBillingAccount.FirstRecord())
				{
					strMSISDNBillToContact 	= BcBillingAccount.GetFieldValue(&quot;Bill To Contact Id&quot;);
					strAccountId = BcBillingAccount.GetFieldValue(&quot;Parent Account Id&quot;);
					BcAccount.SetViewMode(AllView);
					BcAccount.ClearToQuery();
					BcAccount.ActivateField(&quot;Primary Contact Id&quot;);
					BcAccount.SetSearchSpec(&quot;Id&quot;, strAccountId);
					BcAccount.ExecuteQuery(ForwardOnly);
					if(BcAccount.FirstRecord())
					{
						strMSISDNRepresentativeId   = BcAccount.GetFieldValue(&quot;Primary Contact Id&quot;);
						if(strContactId != strBillToContact &amp;&amp;  strContactId != strRepresentativeId)
						{
							Outputs.SetProperty(&quot;Status_Code&quot;,&quot;0&quot;);
						    Outputs.SetProperty(&quot;IsAuthorizedUser&quot;,strIsAuthorizedUser);
						    Outputs.SetProperty(&quot;BillingAccountCode&quot;,strBillingAccountCodeIN);
					        return (CancelOperation);
						}
						else
						{
							if(strMSISDNRepresentativeId == strContactId || strMSISDNBillToContact == strBillToContact)
							{
								strIsAuthorizedUser = &quot;Y&quot;;
								Outputs.SetProperty(&quot;Status_Code&quot;,&quot;0&quot;);
							    Outputs.SetProperty(&quot;IsAuthorizedUser&quot;,strIsAuthorizedUser);
							    Outputs.SetProperty(&quot;BillingAccountCode&quot;,strBillingAccountCodeIN);
						        return (CancelOperation);
							}
						else
							{
								Outputs.SetProperty(&quot;Status_Code&quot;,&quot;0&quot;);
							    Outputs.SetProperty(&quot;IsAuthorizedUser&quot;,strIsAuthorizedUser);
							    Outputs.SetProperty(&quot;BillingAccountCode&quot;,strBillingAccountCodeIN);
						        return (CancelOperation);
							}
						}
					}
				}
				else
				{
					Outputs.SetProperty(&quot;Status_Code&quot;,&quot;1&quot;);
					Outputs.SetProperty(&quot;Error_Code&quot;,&quot;SBL-28005&quot;);
					Outputs.SetProperty(&quot;Error_Description&quot;,&quot;Billing Account not found&quot;);
					return (CancelOperation);
				}
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;StatusCode&quot;,&quot;1&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;,e.errCode);
		Outputs.SetProperty(&quot;ErrorDescription&quot;,e.errText);
		throw(e);
		return (CancelOperation);
	}
	finally
	{
		BcBillingAccount 	= null;
		BcAccount 			= null;
		BcAsset				= null;
		BcContact			= null;
		BoAsset				= null;
		BoAccount			= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="12/09/2016 10:23:50"
			   UPDATED_BY="JMARQUES"
			   CREATED="06/09/2011 11:22:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



