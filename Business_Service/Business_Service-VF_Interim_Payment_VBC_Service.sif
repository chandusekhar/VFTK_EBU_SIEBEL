<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="LOCKED BY VTAO UI UPGRADE (Control Alignment)"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="Account"
	   UI_FREEZE="N"
	   UPDATED="05/09/2017 15:54:57"
	   UPDATED_BY="LROSADO"
	   CREATED="01/01/1980 00:00:00"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="ACSPSHAH 16Jul2010. Created for YTS Inquiry Service"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Interim Payment VBC Service"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="05/09/2017 16:49:40"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="LROSADO"
		   UPDATED="05/09/2017 16:49:40"
		   UPDATED_BY="LROSADO"
		   CREATED="09/30/2010 13:29:54"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateDescriptionForSR"
			   UPDATED="06/27/2011 13:56:12"
			   UPDATED_BY="SADMIN"
			   CREATED="05/20/2011 12:44:23"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Address"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:22"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:47:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="Address2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/27/2011 13:56:12"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 13:03:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="City"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:25"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 13:03:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Description"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2011 19:10:26"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:50:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Email"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:27"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:47:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FaxNumber"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:28"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:47:19"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="InvoiceAmnt"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:29"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:47:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="InvoiceDueDate"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:30"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:46:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="InvoiceNr"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:31"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:46:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PostalCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:32"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 13:03:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Province"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 19:10:33"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 13:03:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateDescriptionForSR"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/20/2011 12:44:58"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 12:44:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="OutstandingBalInq"
			   UPDATED="05/29/2012 08:30:45"
			   UPDATED_BY="SADMIN"
			   CREATED="09/08/2011 13:48:22"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sOutBal"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/29/2012 08:30:45"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2011 13:48:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sOutBalLastUpd"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/29/2012 08:30:45"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2011 13:48:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetBillingAccountCodeForSR"
			   UPDATED="05/20/2011 16:37:10"
			   UPDATED_BY="SADMIN"
			   CREATED="05/20/2011 14:01:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/20/2011 14:02:33"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 14:02:33"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OpenDate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/20/2011 16:36:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 16:36:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SRId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/20/2011 14:02:04"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 14:02:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetBillingAccountCodeForSR"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/20/2011 14:02:02"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 14:02:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckErrorMessage"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckErrorMessage(strErrorCode)
{

 try
 {
 	var strErrorMsg=&quot;&quot;;
	if(strErrorCode==&quot;VFTK-Tibco-0001&quot;)
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;298&quot;);
	}
	else if(strErrorCode==&quot;VFTK-Tibco-0002&quot;)
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;299&quot;);
	}
	else if(strErrorCode==&quot;VFTK-Tibco-0003&quot;)
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;300&quot;);
	}
	else if(strErrorCode==&quot;VFTK-Tibco-0004&quot;)
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;301&quot;);
	}
	else if(strErrorCode==&quot;VFTK-Tibco-0005&quot;||strErrorCode==&quot;VFTK-CDRL-0001&quot;)//VFTK-CDRL-0001- this is present in interface TD.
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R142_346&quot;);//R142_349&quot;);
	}
	else if(strErrorCode==&quot;VFTK-Tibco-0048&quot;|| strErrorCode==&quot;VFTK-UUTL-0002&quot;)
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R142_367&quot;); //R142_350&quot;);
	}
	else if(strErrorCode==&quot;VFTK-Tibco-0049&quot;)
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R142_366&quot;); //R142_351&quot;);
	}
	else if(strErrorCode==&quot;VFTK-Tibco-0052&quot;)
	{
		strErrorMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R142_368&quot;);//R142_352&quot;);
	}
	if(TheApplication().GetProfileAttr(&quot;QueryMethod&quot;)==&quot;Y&quot;)
	{
		TheApplication().SetProfileAttr(&quot;IntError&quot;,strErrorMsg);
		TheApplication().SetProfileAttr(&quot;QueryMethod&quot;, &quot;&quot;);
	}
	else
	{
		TheApplication().RaiseErrorText(strErrorMsg);
	}
 }
 catch(e)
 {
 	TheApplication().SetProfileAttr(&quot;QueryMethod&quot;, &quot;&quot;);
 	throw e;
 }
}"
			   SEQUENCE="1"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:56:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateDescriptionForSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateDescriptionForSR(Inputs, Outputs)
{
	var sInvoiceNumber = Inputs.GetProperty(&quot;InvoiceNr&quot;);
	var sInvoiceDueDt = Inputs.GetProperty(&quot;InvoiceDueDate&quot;);
	var sInvoiceAmount = Inputs.GetProperty(&quot;InvoiceAmnt&quot;);
	var sFaxNumber = Inputs.GetProperty(&quot;FaxNumber&quot;);
	var sEmail = Inputs.GetProperty(&quot;Email&quot;);
	var sAddress1 = Inputs.GetProperty(&quot;Address&quot;);
	var sPostalCode = Inputs.GetProperty(&quot;PostalCode&quot;);
	var sProvince = Inputs.GetProperty(&quot;Province&quot;);
	var sCity = Inputs.GetProperty(&quot;City&quot;);
	var Description = &quot;&quot;;
	var Delivery = &quot;&quot;;
	
	if(sFaxNumber != &quot;&quot;)
		Delivery = &quot;FAX sent to: &quot;+ sFaxNumber;
	else if(sEmail != &quot;&quot;)
		Delivery = &quot;E-mail sent to: &quot;+sEmail;
	else if(sAddress1 != &quot;&quot; || sPostalCode != &quot;&quot; || sProvince != &quot;&quot; || sCity != &quot;&quot;)
		Delivery = &quot;Mail sent to: &quot;+sAddress1+&quot;, &quot;+sPostalCode+&quot;, &quot;+sProvince+&quot;, &quot;+sCity;
	
	Description = &quot;Invoice number: &quot;+sInvoiceNumber+&quot;; Invoice Due Date: &quot;+sInvoiceDueDt+&quot;; Invoice Amount: &quot;+sInvoiceAmount;
	Description = Description + &quot;; &quot; + Delivery;
	Outputs.SetProperty(&quot;Description&quot;,Description);
}"
			   SEQUENCE="2"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:57:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetChildByType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetChildByType(psInput, sChildType, &amp;psChild)
{
//*****************************************************
//** Function:GetChildByType
//** Inputs : Inputs
//** Outputs: Outputs
//** Returns: None.
//*****************************************************
//** Revision History:
//** 01 - 08/02/2011 - Parasuram Mainam
//**    Create New - VFTK Project R142-WP15 Release 
//*****************************************************
  for(var i=0; i&lt;psInput.GetChildCount(); i++)
  {
    var sCurrType = psInput.GetChild(i).GetType();
    if(sCurrType == sChildType)
    {
      psChild = psInput.GetChild(i);
      return;
    }
    if(psChild == &quot;&quot;)
			GetChildByType(psInput.GetChild(i), sChildType,psChild);	
  }
}"
			   SEQUENCE="3"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:56:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Init"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Init(Inputs,Outputs)
{
	/* ACS AC 20100920 Created.
	The Below scirpt initialise the VBC Fields*/

	try
	{
		var svcParms = Inputs.GetProperty(&quot;Parameters&quot;);
		var svcSource = Inputs.GetProperty(&quot;Remote Source&quot;);
		var vbcParms = svcParms + &quot;,&quot; + svcSource;
		var search = Inputs.GetProperty(&quot;Business Component Name&quot;);
		var busObj = TheApplication().GetBusObject(&quot;Account&quot;);
		var busComp = busObj.GetBusComp(&quot;SRF Field&quot;);
		var record;
		busComp.ClearToQuery();
		//VFTK Junaid 20120519 - Scripting 15: Null check is not required since it&apos;s a vanilla behaviour that BC name will be passed always to VBC &apos;Init&apos; method
		busComp.ActivateField(&quot;Name&quot;);
		busComp.SetSearchSpec(&quot;Business Component&quot;,search);
		busComp.ExecuteQuery(ForwardOnly);
	
		record = busComp.FirstRecord();
	
		var dateVar = new Date();
		
		/*--GMARQUES - VFTRCBU-13442  (Commented code in order to remove distinction between CRM and PRM)
		//if added for PRM functionality
		if (TheApplication().GetProfileAttr(&quot;ApplicationName&quot;) == &quot;Siebel eChannel&quot;)
			dateVar.setMonth(dateVar.getMonth() - 8);
		else
		--GMARQUES - VFTRCBU-13442  (Commented code in order to remove distinction between CRM and PRM)*/
		dateVar.setMonth(dateVar.getMonth() - 6);
			
		var strDate=(dateVar.getMonth()+1) + &apos;/&apos; + dateVar.getDate() +&apos;/&apos; + dateVar.getFullYear();
	
		var dtToday = new Date();
		var strDateToday=(dtToday.getMonth()+1) + &apos;/&apos; + dtToday.getDate() +&apos;/&apos; + dtToday.getFullYear();
	
		while (record != &quot;0&quot;)
		{
			var fName = busComp.GetFieldValue(&quot;Name&quot;);
			if (fName != &quot;SSA Primary Field&quot;)
			{
				Outputs.SetProperty(fName, &quot;&quot;);
				switch(fName)
				{
					case &quot;PERIOD_START_DATE&quot;:
						Outputs.SetProperty(fName, strDate);
						break;
					case &quot;PERIOD_END_DATE&quot;:
						Outputs.SetProperty(fName, strDateToday);
						break;
				}
			}
			record = busComp.NextRecord();
		}
		return (CancelOperation);
	}
	finally
	{
		busComp = null;
		busObj = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:58:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupName(sType,sVal)
{
	try
	{
		var name = &quot;&quot;;
		var ActiveFlag = &quot;Y&quot;;
		var strParameterSrcExpr = &quot;[Type] = &apos;&quot;+sType+&quot;&apos; AND [Value] = &apos;&quot;+sVal+&quot;&apos; AND [Active] = &apos;&quot;+ ActiveFlag + &quot;&apos;&quot;;
		var boLOV : BusObject = TheApplication().GetBusObject (&quot;List Of Values&quot;);
		var bcLOV : BusComp = boLOV.GetBusComp (&quot;List Of Values&quot;);
	
		with(bcLOV)
		{
			SetViewMode(AllView);	
			ActivateField (&quot;Name&quot;);
			ActivateField (&quot;Language&quot;);
			ClearToQuery();
			SetSearchExpr (strParameterSrcExpr);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord ())
			{
				name = GetFieldValue (&quot;Name&quot;);
			}
		}
		return(name);
	}
	finally
	{
		bcLOV = null;
		boLOV = null;

	}
}"
			   SEQUENCE="7"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="04/11/2013 11:57:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Query"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Query(Inputs, Outputs)
{
	try
	{
		//Start Add by Parasuram for R142-WP15 on 05/12/2011.
		var sInvoiceFromLoad = TheApplication().GetProfileAttr(&quot;InvoiceFromLoad&quot;);
		
		if(sInvoiceFromLoad == &quot;Y&quot;)
		{
			var sActivateControlInvoice = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ACT_CONTR_INV&quot;,&quot;VF_ACT_CONTR_INV&quot;);
			if(sActivateControlInvoice == &quot;Y&quot;)
			{
				var sIndex = TheApplication().GetProfileAttr(&quot;InvoiceIndex&quot;);
				if(sIndex != &quot;1111111&quot;)
				{
					TheApplication().SetProfileAttr(&quot;InvoiceIndex&quot;,sIndex+&quot;1&quot;);
					return(CancelOperation);
				}
			}
		}
		var strBillingCode=&quot;&quot;;
		var strIntPayStartEndDateFlag=&quot;&quot;;
		var strInvoiceStatusReq = &quot;&quot;;
		strIntPayStartEndDateFlag = TheApplication().GetProfileAttr(&quot;IntPayStartEndDate&quot;);
		strBillingCode=TheApplication().GetProfileAttr(&quot;IPBillingCode&quot;);
		var psEmpty : PropertySet =TheApplication().NewPropertySet();
		var strP2 : PropertySet = TheApplication().NewPropertySet();
		var strP3 : PropertySet = TheApplication().NewPropertySet();
		var psInputs  : PropertySet;
		var psOutputs : PropertySet;
		var svcWF : Service;
		var sPaymStat = &quot;&quot;;
		var sActiveView = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;); //GEN_REQ_059 13.12.201
		//Vaibhav: PA is set on Billing Account drilldown from Account-Asset view (PRM Appln)
		var PRMBillingCode = TheApplication().GetProfileAttr(&quot;PRMBillingCode&quot;);
		if(PRMBillingCode != &quot;&quot;)
			strBillingCode = PRMBillingCode;
		
		//TLGA-2162
		var Action = TheApplication().GetProfileAttr(&quot;ACTION&quot;);
		var Transaction = TheApplication().GetProfileAttr(&quot;TRANSACTION&quot;);
		var psIn  : PropertySet = TheApplication().NewPropertySet();
		var psOut : PropertySet = TheApplication().NewPropertySet();
		var InvoiceCancellationInput : PropertySet = TheApplication().NewPropertySet();
		var svcWorkFlow;
		var spaymentStatus;
		if (Action == &quot;Execute&quot; &amp;&amp; (Transaction == &quot;Correction&quot; || Transaction == &quot;Cancellation&quot;))
		{	
		//	TheApplication().SetProfileAttr(&quot;ACTION&quot;,&quot;&quot;);
		//	TheApplication().SetProfileAttr(&quot;TRANSACTION&quot;,&quot;&quot;);	
			svcWorkFlow	  = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
			psIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Invoice Cancellation WF&quot;);

			psIn.SetProperty(&quot;INVOICE_NUMBER&quot;, TheApplication().GetProfileAttr(&quot;INVOICE_NUMBER&quot;));
			spaymentStatus = TheApplication().GetProfileAttr(&quot;PAYMENT_STATUS&quot;);
			psIn.SetProperty(&quot;PAYMENT_METHOD&quot;, TheApplication().GetProfileAttr(&quot;PAYMENT_METHOD&quot;));
			psIn.SetProperty(&quot;PAYMENT_STATUS&quot;, LookupName(&quot;VF_PAYMENT_STATUS_DESC&quot;, spaymentStatus)); // VFTRCBU-37790
			psIn.SetProperty(&quot;ACTION&quot;, &quot;Execute&quot;);
			if (Transaction == &quot;Correction&quot;)
				psIn.SetProperty(&quot;TRANSACTION&quot;,&quot;Correction&quot;);
			else
				psIn.SetProperty(&quot;TRANSACTION&quot;,&quot;Cancellation&quot;);

			svcWorkFlow.InvokeMethod(&quot;RunProcess&quot;, psIn, psOut);
			if(psOut.GetProperty(&quot;Status Code&quot;) == 0){
				TheApplication().SetProfileAttr(&quot;ACTION&quot;,&quot;&quot;);
				TheApplication().SetProfileAttr(&quot;TRANSACTION&quot;,&quot;&quot;);
			}
			else
			{
					var strErrCode = psOut.GetProperty(&quot;Error Code&quot;);
					var strErrMsg = psOut.GetProperty(&quot;Error Message&quot;).toUpperCase(); 
					var LngErrCode=&quot;&quot;;
					//VFTRCBU Retrofits - Tiago Rocha - 28.01.2015
					var strErrMsg1 = &quot;&quot;;					
					var GenOpBS = TheApplication().GetService(&quot;ACS NI General Operations&quot;);
					var pset_Inputs  = TheApplication().NewPropertySet();
					var pset_Outputs = TheApplication().NewPropertySet();
					pset_Inputs.SetProperty(&quot;Code&quot;, &quot;421&quot;);
					pset_Inputs.SetProperty(&quot;MessageCategory&quot;, &quot;VF Message Category&quot;);
					pset_Outputs = GenOpBS.InvokeMethod(&quot;GetLookupMsg&quot;, pset_Inputs);
					strErrMsg1 = pset_Outputs.GetProperty(&quot;Message&quot;);
					if (strErrMsg)
				    {
 						TheApplication().RaiseErrorText(strErrMsg1+&quot; &quot;+strErrMsg);
 					}
 					//VFTRCBU Retrofits - End
			} 
		}	// End TLGA-2162			
		if(sActiveView ==&quot;VF CDR Inquiry View&quot; || sActiveView == &quot;VF Billing Account CDR Inquiry View&quot;) //GEN_REQ_059 13.12.2012
		{
			if(TheApplication().GetProfileAttr(&quot;IPBillingCode&quot;)==&quot;&quot;)
			{
				strBillingCode=TheApplication().GetProfileAttr(&quot;CDR_BillingCode&quot;);
			}
			else
			{
				strBillingCode=TheApplication().GetProfileAttr(&quot;IPBillingCode&quot;);
			}
		}
		var strStartDate = TheApplication().GetProfileAttr(&quot;IPStartDate&quot;);
		var strEndDate = TheApplication().GetProfileAttr(&quot;IPEndDate&quot;);

		//End-Parasuram
		//a.de.lucia reprint/disply invoice managment
		var sInvStartDt = TheApplication().GetProfileAttr(&quot;DispInvStartDate&quot;);
		var sInvEndDt = TheApplication().GetProfileAttr(&quot;DispInvEndDate&quot;);
		//end
		var strPaymentStatus = TheApplication().GetProfileAttr(&quot;Payment Status&quot;);
		var strInvType = TheApplication().GetProfileAttr(&quot;Invoice Type&quot;);
		
		//start Add by Parasuram for R142-WP15 on 05/12/2011.
		var dateVar = new Date();
		/*--GMARQUES - VFTRCBU-13442  (Commented code in order to remove distinction between CRM and PRM)
		//if added for PRM functionality
		if (TheApplication().GetProfileAttr(&quot;ApplicationName&quot;) == &quot;Siebel eChannel&quot;)
			dateVar.setMonth(dateVar.getMonth() - 8); //for PRM functionality
		else
		--GMARQUES - VFTRCBU-13442  (Commented code in order to remove distinction between CRM and PRM)*/
		dateVar.setMonth(dateVar.getMonth() - 6);
		var strDate=(dateVar.getMonth()+1) + &apos;/&apos; + dateVar.getDate() +&apos;/&apos; + dateVar.getFullYear();
		var dtToday = new Date();
		var strDateToday=(dtToday.getMonth()+1) + &apos;/&apos; + dtToday.getDate() +&apos;/&apos; + dtToday.getFullYear();
		var strP3Out :PropertySet;
		//end
		var strUnpaid = &quot;&quot;;

		/*		//a.de.lucia - if no value is found for START DATE and END DATE, START DATE = Today - 6 months, END DATE = Today*/
		//Start Add by Parasuram for WP 15
		
		strStartDate=(strStartDate==&quot;&quot;)?strDate:strStartDate;
		strEndDate=(strEndDate==&quot;&quot;)?strDateToday:strEndDate;
		
		
		if(strStartDate!=&quot;&quot;)
		{
			Clib.strftime(strStartDate,&quot;%m/%d/%Y&quot;,new Date(strStartDate));
		}
		if(strEndDate!=&quot;&quot;)
		{
		   Clib.strftime(strEndDate,&quot;%m/%d/%Y&quot;,new Date(strEndDate));
		}
		
		if(sInvStartDt == &quot;&quot; || sInvStartDt == null)
			sInvStartDt = strStartDate;
		if(sInvEndDt == &quot;&quot; || sInvEndDt == null)
			sInvEndDt = strEndDate;
			
	 	
		if(TheApplication().GetProfileAttr(&quot;IntError&quot;)!=&quot;&quot;)
		{	
			psEmpty.SetProperty(&quot;PERIOD_START_DATE&quot;, sInvStartDt);
			psEmpty.SetProperty(&quot;PERIOD_END_DATE&quot;, sInvEndDt);
			psEmpty.SetProperty(&quot;BILLING_ACCOUNT_NUM&quot;, strBillingCode);
			Outputs.AddChild(psEmpty);
		} //RPIRES added sActiveView validation for VFTRCBU-26944; RPIRES: Added &quot;SkipIPQuery&quot; validation to skip VBC extra query during BC PreQuery
		else if (strBillingCode != &quot;&quot; &amp;&amp; (sActiveView != &quot;&quot; || TheApplication().GetProfileAttr(&quot;IPAssetContext&quot;) == &quot;Y&quot; || TheApplication().GetProfileAttr(&quot;FromSearchView&quot;) == &quot;&quot; || TheApplication().GetProfileAttr(&quot;FromSearchView&quot;) == null) &amp;&amp; TheApplication().GetProfileAttr(&quot;SkipIPQuery&quot;) != &quot;Y&quot;)  
		{ //end - Parasuram
			TheApplication().SetProfileAttr(&quot;FromSearchView&quot;,&quot;&quot;);
			TheApplication().SetProfileAttr(&quot;IPAssetContext&quot;,&quot;&quot;);
			psInputs  = TheApplication().NewPropertySet();
			psOutputs = TheApplication().NewPropertySet();
			svcWF	  = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
			var strP1;
			var strErrorMsg=&quot;&quot;;
			var i;
			psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU Retrieve Invoices WF&quot;);
			psInputs.SetProperty(&quot;BILLING_ACCOUNT_CODE_Value&quot;, strBillingCode);
			
			if(sInvStartDt!=&quot;&quot;)
			{
			   Clib.strftime(sInvStartDt,&quot;%m/%d/%Y&quot;,new Date(sInvStartDt));
			}
			if(sInvEndDt!=&quot;&quot;)
			{
			   Clib.strftime(sInvEndDt,&quot;%m/%d/%Y&quot;,new Date(sInvEndDt));
			}
			if(TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;) == &quot;VF PDF Viewing View&quot; || TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;) == &quot;VF Invoice Reprint View&quot; ||
			   sActiveView == &quot;VF Billing Account Portal Summary View&quot; || sActiveView == &quot;VF Billing Account Invoice Summary View&quot; ||  sActiveView == &quot;VF Billing Account Invoice Details View&quot;) //GEN_REQ_059 13.12.2012
			{
				//a.de.lucia - setting Start Date and End Date to retrieve information about invoices
				psInputs.SetProperty(&quot;inStartDate&quot;,strStartDate);
				psInputs.SetProperty(&quot;inEndDate&quot;,strEndDate);
			}
			else if (TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;) != &quot;VF Payment Installments View&quot; || sActiveView == &quot;VF Billing Account Payments Installment View&quot;)
			{
				psInputs.SetProperty(&quot;inStartDate&quot;, sInvStartDt);
				psInputs.SetProperty(&quot;inEndDate&quot;, sInvEndDt);
			}
			else
			{
				psInputs.SetProperty(&quot;inStartDate&quot;, &quot;&quot;);
				psInputs.SetProperty(&quot;inEndDate&quot;, &quot;&quot;);
			}

			/*if(strInvType == &quot;1&quot;) //commented for TLG-6368 Retrofit
			{
				//psInputs.SetProperty(&quot;inInvoiceTypeId&quot;, strInvType); // WA#04 - JFONSECA
			}	
			else
				psInputs.SetProperty(&quot;INVOICE_TYPE_ID&quot;, &quot;0&quot;);*/
		
			if(strInvType == &quot;&quot; || strInvType == null)
			{
				psInputs.SetProperty(&quot;inInvoiceTypeId&quot;, &quot;0&quot;);
			}
			
			if(strPaymentStatus != &quot;&quot;)
			{
				psInputs.SetProperty(&quot;inPaymentStatus&quot;, strPaymentStatus);
			}
			if(strInvoiceStatusReq == &quot;&quot;)// GEN_REQ_157 Prashant
			{
				psInputs.SetProperty(&quot;inInvoiceStatusReq&quot;, &quot;0&quot;);
			}
			//else
			//{
			//}// GEN_REQ_157 Prashant
			if(strIntPayStartEndDateFlag == &quot;Y&quot;)
			{
				psInputs.SetProperty(&quot;inStartDate&quot;, &quot;&quot;);
				psInputs.SetProperty(&quot;inEndDate&quot;, &quot;&quot;);
			}
			
			//++ 03112014 - WA#26 - RPIRES
			var baBO : BusObject = TheApplication().GetBusObject(&quot;VFTRCBU Billing Account HP&quot;);
			var baBC : BusComp = baBO.GetBusComp(&quot;VF Billing Account HP&quot;);
			var billingAccntId = &quot;&quot;;	
			with(baBC)
			{	
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Account Code&quot;, strBillingCode);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
					billingAccntId = GetFieldValue(&quot;Id&quot;);
			}
			psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU Retrieve Invoices WF&quot;); 
			psInputs.SetProperty(&quot;inSearchExpr&quot;, &quot;[VF Billing Account HP 2.Account Code]=&apos;&quot;+strBillingCode+&quot;&apos;&quot;); 
			psInputs.SetProperty(&quot;inDummyBAId&quot;, billingAccntId);
			svcWF.InvokeMethod(&quot;RunProcess&quot;, psInputs, psOutputs);
			//TheApplication().SetProfileAttr(&quot;IPBillingCode&quot;,&quot;&quot;);
		 	
			if(psOutputs.GetProperty(&quot;Error Code&quot;) == 0)
			{		
				var psChild=&quot;&quot;;
				GetChildByType(psOutputs, &quot;ListOfVFTRCBU Payments Response IO&quot;, psChild);
				if(psChild==&quot;&quot;)
				{
					strP3=TheApplication().NewPropertySet();
					strP3.SetProperty (&quot;PERIOD_START_DATE&quot;, strStartDate);
					strP3.SetProperty (&quot;PERIOD_END_DATE&quot;, strEndDate);
					strP3.SetProperty(&quot;BILLING_ACCOUNT_NUM&quot;, strBillingCode);
					Outputs.AddChild(strP3);
				}
				else
				{	
					var psChild1=&quot;&quot;;
					GetChildByType(psOutputs, &quot;VF Interim Payment Test Billing Accounts VBC&quot;, psChild1);
					if(psChild1==&quot;&quot;)
					{
						strP3=TheApplication().NewPropertySet();
						strP3.SetProperty (&quot;PERIOD_START_DATE&quot;, strStartDate);
						strP3.SetProperty (&quot;PERIOD_END_DATE&quot;, strEndDate);
						strP3.SetProperty(&quot;BILLING_ACCOUNT_NUM&quot;, strBillingCode);
						Outputs.AddChild(strP3);					
					}
					else
					{
						var sInvoiceFromLoad = TheApplication().GetProfileAttr(&quot;InvoiceFromLoad&quot;);
						if(sInvoiceFromLoad == &quot;Y&quot;)
							var nInternalCount = 0;
						
						//var boCustomer = TheApplication().GetBusObject(&quot;Account&quot;);
						//var bcCustomer = boCustomer.GetBusComp(&quot;Account&quot;);
						
						var cnt = psChild.GetChildCount();
						for(i=0;i&lt;cnt;i++)
						{
							strP1=psChild.GetChild(i).GetType();
							if (strP1 == &quot;VF Interim Payment Test Billing Accounts VBC&quot;)
							{
								strP2 = TheApplication().NewPropertySet();
								strP3=TheApplication().NewPropertySet();	
								strP2=psChild.GetChild(i);
								strBillingCode = strP2.GetProperty(&quot;BILLING_ACCOUNT_NO&quot;);
								strP2.SetProperty(&quot;PERIOD_START_DATE&quot;, strStartDate);
								strP2.SetProperty(&quot;PERIOD_END_DATE&quot;, strEndDate);
								strP2.SetProperty(&quot;VF_TOT_OUTBAL&quot;, &quot;&quot;);	
								strP2.SetProperty(&quot;SELECT&quot;, &quot;Y&quot;);
								strP2.SetProperty(&quot;VF_TOT_OUTBAL_LAST_UPD&quot;, &quot;&quot;);
								strP2.SetProperty(&quot;BILLING_ACCOUNT_NUM&quot;, strBillingCode);
								if (LookupName(&quot;VF_PAYMENT_STATUS_DESC&quot;,strP2.GetProperty(&quot;PAYMENT_STATUS_DESC&quot;)) == &quot;Unpaid&quot;)
									strP2.SetProperty(&quot;VF Refund Method RO Calc&quot;, &quot;Y&quot;);
									
								strP3 = strP2.Copy();
								if (strBillingCode != &quot;&quot;)
								{
									Outputs.AddChild(strP3);
								}
								else
								{
									strP3=TheApplication().NewPropertySet();
									strP3.SetProperty (&quot;PERIOD_START_DATE&quot;, strStartDate);
									strP3.SetProperty (&quot;PERIOD_END_DATE&quot;, strEndDate);
									strP3.SetProperty(&quot;BILLING_ACCOUNT_NUM&quot;, strBillingCode);
									Outputs.AddChild(strP3);	
								}
								if(sInvoiceFromLoad == &quot;Y&quot;)
								{
									nInternalCount++;
									if(nInternalCount == 6)
									{
										break;
									}
								}
							}//if
						}//for
					}// 
				}	
			}//if status code
			//-- 03112014 - WA#26 - RPIRES
			else
			{		
				strP3=TheApplication().NewPropertySet();
				strP3.SetProperty (&quot;PERIOD_START_DATE&quot;, strStartDate);
				strP3.SetProperty (&quot;PERIOD_END_DATE&quot;, strEndDate);
				strP3.SetProperty(&quot;BILLING_ACCOUNT_NUM&quot;, strBillingCode);
				Outputs.AddChild(strP3);
				TheApplication().SetProfileAttr(&quot;QueryMethod&quot;, &quot;Y&quot;);
				var strErrorCode = psOutputs.GetProperty(&quot;Error Code&quot;);
				var strErrorMessage = psOutputs.GetProperty(&quot;Error Message&quot;);
				//CheckErrorMessage(strErrorCode);
				TheApplication().SetProfileAttr(&quot;IntError&quot;,strErrorMessage);
				TheApplication().SetProfileAttr(&quot;QueryMethod&quot;, &quot;&quot;);
			}
		//end -  Parasuram
		
		// WF VFTRCBU-31249 --&gt;
		//Line Codes Realocated in order to be cleaned only in efective execution of WF VFTRCBU-31249
		 TheApplication().SetProfileAttr(&quot;Payment Status&quot;,&quot;&quot;);
		 TheApplication().SetProfileAttr(&quot;Invoice Type&quot;, &quot;&quot;);
		 //&lt;-- WF VFTRCBU-31249	
		 
		 }
		 //Added by Parasuram on 07/12/2011
		 if(TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;)==&quot;VF Invoice Reprint View&quot;||
		    TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;)==&quot;VF Payment Installments View&quot;||
		 	  TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;)==&quot;VF PDF Viewing View&quot;)
		 {
		 	TheApplication().SetProfileAttr(&quot;IPBillingCode&quot;,&quot;&quot;);
		 }
		 //end
	}
	catch(e)
	{
		TheApplication().SetProfileAttr(&quot;Payment Status&quot;,&quot;&quot;);
		TheApplication().SetProfileAttr(&quot;Invoice Type&quot;, &quot;&quot;);
		TheApplication().SetProfileAttr(&quot;DispInvStartDate&quot;,&quot;&quot;);
		TheApplication().SetProfileAttr(&quot;DispInvEndDate&quot;,&quot;&quot;);
		//start Add by Parasuram for R142-WP15.
		TheApplication().SetProfileAttr(&quot;IPStartDate&quot;,&quot;&quot;);
		TheApplication().SetProfileAttr(&quot;IPEndDate&quot;,&quot;&quot;); 
		TheApplication().SetProfileAttr(&quot;IPBillingCode&quot;,&quot;&quot;);
		//end

		throw(e);
	}
	finally
	{
		TheApplication().SetProfileAttr(&quot;IPStartDate&quot;,&quot;&quot;); //RCRISPIM: VFTRCBU-11807
		TheApplication().SetProfileAttr(&quot;IPEndDate&quot;,&quot;&quot;); //RCRISPIM: VFTRCBU-11807			
		baBC = null;
		baBO = null;
		//start Add by Parasuram for R142-WP15.
		svcWF = null;
		psInputs = null;
		psOutputs = null;
		psEmpty = null;
		strP2 = null;
		strP3 = null;
		strP3Out = null;
		TheApplication().SetProfileAttr(&quot;IntPayStartEndDate&quot;,&quot;&quot;);
//		TheApplication().SetProfileAttr(&quot;ACTION&quot;,&quot;&quot;);
//		TheApplication().SetProfileAttr(&quot;TRANSACTION&quot;,&quot;&quot;);
		//end
	}
}"
			   SEQUENCE="8"
			   UPDATED="05/09/2017 16:20:27"
			   UPDATED_BY="LROSADO"
			   CREATED="09/08/2011 09:58:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreCanInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreCanInvokeMethod (MethodName, &amp;CanInvoke)
{
	CanInvoke = &quot;True&quot;;
	return (ContinueOperation);
}"
			   SEQUENCE="12"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 10:00:27"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
//*****************************************************
//** Function: Service_PreInvokeMethod
//** Purpose:  Modified to invoke Outstanding Balance Inquiry Web Service.
//** 1) Added switch 2) OutbalInquiry WS invcation code.
//** Inputs :  MethodName, Inputs
//** Outputs:  Outputs
//** Returns:  None.
//*****************************************************
//** Revision History:
//** 01 - 05/13/2011 - Parasuram Mainam
//**    Modified - VFTK Project R142-WP15 Release 
//*****************************************************
try
{
	var oApp=TheApplication();
	var psRow : PropertySet =oApp.NewPropertySet();
	switch(MethodName)
	{
		case &quot;Init&quot;:
			Init (Inputs, Outputs);
			return(CancelOperation);
		case &quot;Query&quot;:
			var IPBillingCode = TheApplication().GetProfileAttr(&quot;IPBillingCode&quot;);
			var CDR_BillingCode = TheApplication().GetProfileAttr(&quot;CDR_BillingCode&quot;);
			
			//Vaibhav: PA is set on Billing Account drilldown from Account-Asset view (PRM Appln)
			var PRMBillingCode = TheApplication().GetProfileAttr(&quot;PRMBillingCode&quot;);
			if((IPBillingCode !=&quot;&quot; || CDR_BillingCode !=&quot;&quot; || PRMBillingCode != &quot;&quot;)) //&amp;&amp; TheApplication().GetProfileAttr(&quot;invoiceInquiryButton&quot;) == &quot;Y&quot;) //WA#04 - JFONSECA
			{
				Query (Inputs, Outputs);
				TheApplication().SetProfileAttr(&quot;invoiceInquiryButton&quot;,&quot;&quot;);
			}	
			else
			{
				var dateVar = new Date();
				/*--GMARQUES - VFTRCBU-13442  (Commented code in order to remove distinction between CRM and PRM)
				//if added for PRM functionality
				if (TheApplication().GetProfileAttr(&quot;ApplicationName&quot;) == &quot;Siebel eChannel&quot;)
					dateVar.setMonth(dateVar.getMonth() - 8);
				else
				--GMARQUES - VFTRCBU-13442  (Commented code in order to remove distinction between CRM and PRM)*/
				dateVar.setMonth(dateVar.getMonth() - 6);
					
				var strDate=(dateVar.getMonth()+1) + &apos;/&apos; + dateVar.getDate() +&apos;/&apos; + dateVar.getFullYear();
			
				var dtToday = new Date();
				var strDateToday=(dtToday.getMonth()+1) + &apos;/&apos; + dtToday.getDate() +&apos;/&apos; + dtToday.getFullYear();
				psRow.SetProperty(&quot;PERIOD_START_DATE&quot;, strDate);
				psRow.SetProperty(&quot;PERIOD_END_DATE&quot;, strDateToday);
				psRow.SetProperty(&quot;VF_TOT_OUTBAL&quot;, &quot;&quot;);
				Outputs.AddChild(psRow);
				
			}
			return(CancelOperation);
		case &quot;OutstandingBalInq&quot;:
			SetOutBalDetails (Inputs, Outputs);
			return(CancelOperation);
		case &quot;Update&quot;:
			if(oApp.GetProfileAttr(&quot;IPThresholdCheck&quot;)==&quot;Y&quot;)
			{
				return(CancelOperation);
			}
			return (Update(Inputs, Outputs));
		case &quot;CreateDescriptionForSR&quot;:
			CreateDescriptionForSR(Inputs,Outputs);
			return(CancelOperation);
		case &quot;SetBillingAccountCodeForSR&quot;:
			SetBillingAccountCodeForSR(Inputs,Outputs);
			return(CancelOperation);
	}
	return (ContinueOperation);
}
finally
{
	oApp=null;
	psRow = null;
}
}"
			   SEQUENCE="13"
			   UPDATED="01/03/2017 14:36:10"
			   UPDATED_BY="DSOUSA"
			   CREATED="09/08/2011 10:00:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetBillingAccountCodeForSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetBillingAccountCodeForSR(Inputs,Outputs)
{
	try
	{
		var oBO : BusObject = TheApplication().GetBusObject(&quot;Billing Account&quot;);
		var oBC : BusComp = oBO.GetBusComp(&quot;Service Request (Simple)&quot;);
		var sBillAccntCode = Inputs.GetProperty(&quot;BillingAccountCode&quot;);
		var sServReqID = Inputs.GetProperty(&quot;SRId&quot;);
		//VFTK Junaid 20120519 - Added for Oracle Review 15
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;sServReqID&quot;, sServReqID); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End
		var sCreationDate = Inputs.GetProperty(&quot;OpenDate&quot;);
		with(oBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;Opened Date&quot;);
			SetSearchSpec(&quot;Id&quot;,sServReqID);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()){
				SetFieldValue(&quot;Billing Account Id&quot;,sBillAccntCode);
				SetFieldValue(&quot;Opened Date&quot;,sCreationDate);
				WriteRecord();
			}
		}
	}
	finally
	{
		oBC	= null;
		oBO	= null;
		BS	= null;
		outProp	= null;
		inProp	= null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:59:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOutBalDetails"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetOutBalDetails(Inputs, Outputs)
{
//*****************************************************
//** Function:SetOutBalDetails
//** Purpose: Invokes Outstanding Balance Inquiry WS and gets details.
//** Inputs : Inputs
//** Outputs: Outputs
//** Returns: None.
//*****************************************************
//** Revision History:
//** 01 - 05/13/2011 - Parasuram Mainam
//**    Create New - VFTK Project R142-WP15 Release 
//*****************************************************
 try
 {
 	var oApp=TheApplication();
	var strBACode=oApp.GetProfileAttr(&quot;IPBillingCode&quot;);
	var sOutBal=&quot;&quot;;
	var sOutBalLastUpdate=&quot;&quot;;
	var psInputs : PropertySet;
	var psOutputs : PropertySet;
	var oWF : Service;
	if(strBACode!=&quot;&quot;)
	{
		psInputs=oApp.NewPropertySet();
		psOutputs=oApp.NewPropertySet();
		var strTranactionId= Clib.rand() + &quot;&quot; + new Date().getTime();
		strTranactionId=&quot;Siebel-&quot; + strTranactionId.substring(0,10);
		oWF= oApp.GetService(&quot;Workflow Process Manager&quot;);
		psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Retrieve Outstanding Balance WF&quot;);
		psInputs.SetProperty(&quot;BILLING_ACCOUNT_CODE&quot;, strBACode);
		//psInputs.SetProperty(&quot;CUSTOMER_CODE&quot;, strCustCode);
		psInputs.SetProperty(&quot;TRANSACTION_ID&quot;, strTranactionId);			
		psInputs.SetProperty(&quot;sOutBalVBCReq&quot;, &quot;N&quot;);				
		oWF.InvokeMethod(&quot;RunProcess&quot;, psInputs, psOutputs);			
		if(psOutputs.GetProperty(&quot;Status Code&quot;)==0)
		{
			sOutBal=psOutputs.GetProperty(&quot;sOutBalance&quot;);
			sOutBalLastUpdate=psOutputs.GetProperty(&quot;sOutBalanceLastUpdate&quot;);
			Outputs.SetProperty(&quot;sOutBal&quot;, sOutBal);
			Outputs.SetProperty(&quot;sOutBalLastUpd&quot;, sOutBalLastUpdate);
		}//if
		else
		{
			var strErrorCode = psOutputs.GetProperty(&quot;Error Code&quot;);
			CheckErrorMessage(strErrorCode);
		}
	 }
 }
 finally
 {
	oWF=null;
	psInputs=null;
	psOutputs=null;
	oApp.SetProfileAttr(&quot;IPBillingCode&quot;,&quot;&quot;);
	oApp.SetProfileAttr(&quot;IPCustomerCode&quot;, &quot;&quot;);
	oApp.SetProfileAttr(&quot;IPOutBalInquiry&quot;, &quot;&quot;);
	oApp=null;
 }
}"
			   SEQUENCE="10"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:59:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Update"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Update(Inputs,Outputs)
{
	try
	{
		var child;
		var childCount = Inputs.GetChildCount();
		var fieldName, fieldValue;
		var row : PropertySet = TheApplication().NewPropertySet();
		var TotalOutBal;
		
		// Go through each child in Inputs and construct
		// necessary sql statements for update and query
		for (var i = 0; i &lt; childCount; i++)
		{
			child = Inputs.GetChild(i);
			fieldName = child.GetProperty(&quot;Field Name&quot;);
			fieldValue = child.GetProperty(&quot;Field Value&quot;);
			if (child.GetProperty(&quot;Changed&quot;) == &quot;true&quot;)
			{
			 if (fieldName == &quot;VF_TOT_OUTBAL&quot; &amp;&amp; fieldValue &gt; 0)
			 {
			 	TotalOutBal = fieldValue/100;
			 	fieldValue = TotalOutBal;
			 }
			 row.SetProperty(fieldName, fieldValue);	
			}
		}
		
		Outputs.AddChild(row);
		return (CancelOperation);
	}
	finally
	{
		child = null;
		row = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:59:43"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getField"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getField( inSearchStr, inFieldName )
{
// This function returns the value of &quot;inFieldName&quot; field from the Search Specification.
	try{	
		var result = &quot;&quot;;
		var sub_result;
		var sub_string_field; 
		var position_of_char;
		var buffer;
		 
		if (inSearchStr == null || inSearchStr.length == 0)
			return null;
		
		//Finding the name of the field in the search specification
		//selecting the whole string after the name of the field
		sub_result = Clib.strstr( inSearchStr, inFieldName );
		if(sub_result != null)
		{
			sub_string_field = Clib.strstr( sub_result, &quot;\&quot;&quot; );
			
			//Ottengo l&apos;indice a cui si trova il carattere &apos;&quot;&apos;, delimitatore finale del valore ricercato 
			position_of_char = sub_string_field.indexOf( &quot;\&quot;&quot;, 1 );
			buffer = new Buffer( sub_string_field );
			
			//Memorizzo il valore ricercato
			result = buffer.subBuffer( 1, position_of_char ).toString();
			var LastChar = result.substring(Clib.strlen(result)-1,Clib.strlen(result)); 
			if (LastChar==&apos;*&apos;)
			result=result.substring(0,Clib.strlen(result)-1);
			buffer = null;
		}
		return result;	
	}catch (e)
	{
		var dbg = e.errText;
		return null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="09/08/2011 09:58:12"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="insertNewInvoice"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function insertNewInvoice (Inputs, Outputs)
{
try{     
    var strBACode = Inputs.GetProperty(&quot;BILLING_ACCOUNT_NUM&quot;);
    var strRowId = Inputs.GetProperty(&quot;strRowId&quot;);
    var strInvoiceNum = Inputs.GetProperty(&quot;INVOICE_NUMBER&quot;);
    var strInvoiceCreatDate = Inputs.GetProperty(&quot;INVOICE_CREATION_DATE&quot;);
    var strInvoiceDueDate = Inputs.GetProperty(&quot;INVOICE_DUE_DATE&quot;);
    var strTypeMainPage = TheApplication().InvokeMethod (&quot;LookupValue&quot;, &quot;VF_GET_INVOICE_PDF&quot;, &quot;MainPage&quot;);
    var strTypeTrafficDetails = TheApplication().InvokeMethod (&quot;LookupValue&quot;, &quot;VF_GET_INVOICE_PDF&quot;, &quot;TrafficDetails&quot;);
    var strTypeHidden = TheApplication().InvokeMethod (&quot;LookupValue&quot;, &quot;VF_GET_INVOICE_PDF&quot;, &quot;Hidden&quot;);
    var boAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;); 
    var bcBillingAccount : BusComp = boAccount.GetBusComp(&quot;Billing Account&quot;);
    var bcBillingAccountAttachment : BusComp = boAccount.GetBusComp(&quot;VF Attach&quot;);
    
	//Begin - Scripting 15 - Input validation
	var inProp 	:PropertySet = TheApplication().NewPropertySet();
	var outProp	: PropertySet = TheApplication().NewPropertySet();
	var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;strRowId&quot;,strRowId);
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
	//End - Scripting 15
			
    bcBillingAccount.ClearToQuery();
	bcBillingAccount.SetViewMode(AllView);
    bcBillingAccount.SetSearchSpec(&quot;Id&quot;, strRowId);
    bcBillingAccount.ExecuteQuery(ForwardOnly);
	if(bcBillingAccount.FirstRecord())
	{
      var strSelectedBA = bcBillingAccount.GetFieldValue(&quot;Account Code&quot;);   
      if(strSelectedBA==strBACode)
      {
			with(bcBillingAccountAttachment)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;VF Invoice Number&quot;, strInvoiceNum);
				ExecuteQuery(ForwardOnly);
				if(!FirstRecord())
				{
					//controllo se gia esiste l&apos;invoice sotto questo BA
					//for main page
					if (strTypeHidden != &quot;M&quot; &amp;&amp; strTypeHidden != &quot;H&quot;){
					NewRecord(NewAfter);   	
					SetFieldValue(&quot;VF Invoice Number&quot;,strInvoiceNum);
					SetFieldValue(&quot;VF Invoice Creation Date&quot;,strInvoiceCreatDate);
					SetFieldValue(&quot;VF Invoice Due Date&quot;,strInvoiceDueDate);
					SetFieldValue(&quot;AccntFileName&quot;,&quot;MainPage_&quot;+strInvoiceNum);
					SetFieldValue(&quot;VF File Type&quot;,strTypeMainPage);
					WriteRecord();
				}
				
				//for traffic details
				if (strTypeHidden != &quot;T&quot; &amp;&amp; strTypeHidden != &quot;H&quot;)
				{
					NewRecord(NewAfter);   	
					SetFieldValue(&quot;VF Invoice Number&quot;,strInvoiceNum);
					SetFieldValue(&quot;VF Invoice Creation Date&quot;,strInvoiceCreatDate);
					SetFieldValue(&quot;VF Invoice Due Date&quot;,strInvoiceDueDate);
					SetFieldValue(&quot;VF File Type&quot;,strTypeTrafficDetails);
					SetFieldValue(&quot;AccntFileName&quot;,&quot;TrafficPage_&quot;+strInvoiceNum);
					WriteRecord();
				}
			}  
		}     
      }
    }	
  }
  finally
  {
    bcBillingAccountAttachment = null;
    bcBillingAccount = null;
    boAccount = null;
    inProp		= null;
	outProp		= null;
	BS			= null;
  }
}"
			   SEQUENCE="6"
			   UPDATED="03/22/2016 14:06:49"
			   UPDATED_BY="RPIRES"
			   CREATED="02/22/2013 14:29:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



