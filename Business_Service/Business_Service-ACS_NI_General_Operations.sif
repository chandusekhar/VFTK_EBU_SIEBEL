<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="ACS NI"
	   UI_FREEZE="N"
	   UPDATED="01/17/2018 17:26:01"
	   UPDATED_BY="IBM_TFERREIRA"
	   CREATED="01/31/2009 12:28:34"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="ACS 14-Aug-07: Created. This is a collection of general purpose methods that can be called from any script"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="ACS NI General Operations"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="01/17/2018 16:23:56"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="IBM_TFERREIRA"
		   UPDATED="01/17/2018 17:26:01"
		   UPDATED_BY="IBM_TFERREIRA"
		   CREATED="01/31/2009 16:14:27"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="ACS NI General Operations"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="01/31/2009 16:18:21"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalculateBillCycle"
			   UPDATED="05/31/2011 20:34:15"
			   UPDATED_BY="SADMIN"
			   CREATED="05/27/2011 18:11:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/31/2011 20:34:15"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2011 18:11:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/27/2011 18:13:04"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2011 18:13:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RootItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/27/2011 18:53:04"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2011 18:53:04"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CalculateBillCycle"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/27/2011 18:12:02"
				   UPDATED_BY="SADMIN"
				   CREATED="05/27/2011 18:11:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VF Diva R21 20110916: Created New for WP02."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalculateNumberBytes"
			   UPDATED="10/14/2011 10:40:53"
			   UPDATED_BY="SADMIN"
			   CREATED="09/16/2011 10:39:52"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/14/2011 10:40:37"
				   UPDATED_BY="SADMIN"
				   CREATED="10/14/2011 10:40:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Message_Body"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/16/2011 10:43:49"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 10:43:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OutPut"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/16/2011 10:44:21"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 10:44:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CallCDRInquiryWS"
			   UPDATED="10/20/2011 20:32:41"
			   UPDATED_BY="SADMIN"
			   CREATED="10/20/2011 20:32:41"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CDRError"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/20/2011 20:32:41"
				   UPDATED_BY="SADMIN"
				   CREATED="10/20/2011 20:32:41"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="CDRError"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="10/20/2011 20:32:41"
					   UPDATED_BY="SADMIN"
					   CREATED="10/20/2011 20:32:41"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CallCDRInquiryWS"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/20/2011 20:32:41"
				   UPDATED_BY="SADMIN"
				   CREATED="10/20/2011 20:32:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Amul 20120321 - Created for C_MSP00000609"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CallGIBforPRM"
			   UPDATED="03/27/2012 09:02:21"
			   UPDATED_BY="SADMIN"
			   CREATED="03/27/2012 09:02:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CallGIBforPRM"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/27/2012 09:02:21"
				   UPDATED_BY="SADMIN"
				   CREATED="03/27/2012 09:02:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="EJM CR680 - Exposed function"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CallInqBG"
			   UPDATED="04/09/2015 23:33:23"
			   UPDATED_BY="SADMIN"
			   CREATED="06/03/2013 09:20:36"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="From Applet"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/13/2015 01:23:21"
				   UPDATED_BY="SADMIN"
				   CREATED="03/13/2015 01:23:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="List"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/03/2013 09:20:36"
				   UPDATED_BY="SADMIN"
				   CREATED="06/03/2013 09:20:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="06/03/2013 09:20:36"
				   UPDATED_BY="SADMIN"
				   CREATED="06/03/2013 09:20:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Primary Contact Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/03/2013 09:20:36"
				   UPDATED_BY="SADMIN"
				   CREATED="06/03/2013 09:20:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Show SWE"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/09/2015 23:33:23"
				   UPDATED_BY="SADMIN"
				   CREATED="04/09/2015 23:33:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CallInqBG"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/11/2013 08:14:44"
				   UPDATED_BY="SADMIN"
				   CREATED="06/11/2013 08:14:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 07-03-2007: The script will check if a modify order can be created for the and return a flag indicating this. This script is used in all the asset applets present in the customer portal view, as well as in all web service Modify Order events"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckCreateModifyOrder"
			   UPDATED="01/31/2009 16:16:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Asset Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CreateModifyFlag"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckCreateModifyOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS MC R1.3 20100714 - Newly Created for GIB Requirement."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckGIBFields"
			   UPDATED="10/08/2010 20:54:08"
			   UPDATED_BY="SADMIN"
			   CREATED="07/22/2010 08:53:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/22/2010 08:53:42"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status_Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="pset_SiebelMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strAdmin"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strIsActiveGIB"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strRegNo"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="str_CompType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="str_CompanyTitle"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="str_TaxName"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Date"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="today"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="08/17/2010 15:54:51"
				   UPDATED_BY="SADMIN"
				   CREATED="08/17/2010 15:54:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckGIBFields"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="09/30/2010 16:45:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckLIWithoutContact"
			   UPDATED="12/28/2011 19:21:28"
			   UPDATED_BY="SADMIN"
			   CREATED="12/28/2011 19:21:28"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LIExists"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/28/2011 19:21:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/28/2011 19:21:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/28/2011 19:21:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/28/2011 19:21:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckLIWithoutContact"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/28/2011 19:21:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/28/2011 19:21:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK AMul 20111123 - Created for CR205, using it in Order&apos;s applet bowser script"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckLastSubscription"
			   UPDATED="11/23/2011 18:50:32"
			   UPDATED_BY="SADMIN"
			   CREATED="11/23/2011 18:50:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Msg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/23/2011 18:50:32"
				   UPDATED_BY="SADMIN"
				   CREATED="11/23/2011 18:50:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/23/2011 18:50:32"
				   UPDATED_BY="SADMIN"
				   CREATED="11/23/2011 18:50:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckLastSubscription"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/23/2011 18:50:32"
				   UPDATED_BY="SADMIN"
				   CREATED="11/23/2011 18:50:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckLineItemAction"
			   UPDATED="10/13/2010 21:47:07"
			   UPDATED_BY="SADMIN"
			   CREATED="10/13/2010 21:47:07"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckLineItemAction"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/13/2010 21:47:07"
				   UPDATED_BY="SADMIN"
				   CREATED="10/13/2010 21:47:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckRiskDescription"
			   UPDATED="05/30/2011 18:07:16"
			   UPDATED_BY="SADMIN"
			   CREATED="05/30/2011 18:05:56"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RiskDescription"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/30/2011 18:07:16"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 18:07:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RiskStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/30/2011 18:06:12"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 18:06:12"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckRiskDescription"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/30/2011 18:06:11"
				   UPDATED_BY="SADMIN"
				   CREATED="05/30/2011 18:06:11"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="R2.1 - WP03 - SAS Controls extension"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckSAS"
			   UPDATED="01/26/2012 12:36:28"
			   UPDATED_BY="SADMIN"
			   CREATED="01/26/2012 12:36:28"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/26/2012 12:36:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/26/2012 12:36:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SearchString"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/26/2012 12:36:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/26/2012 12:36:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckSAS"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/26/2012 12:36:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/26/2012 12:36:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 07-03-2007: The script will check if an order can be submitted for the and return a flag indicating this. This script is used in the sales order view, as well as in all web service Modify Order events"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckSubmitOrder"
			   UPDATED="01/31/2009 16:16:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CreateModifyFlag"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckSubmitOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckTranFeeSkip"
			   UPDATED="11/25/2011 13:17:09"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2011 19:55:10"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Login"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/25/2011 13:17:09"
				   UPDATED_BY="SADMIN"
				   CREATED="11/25/2011 13:17:09"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Login"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/25/2011 13:17:09"
					   UPDATED_BY="SADMIN"
					   CREATED="11/25/2011 13:17:09"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2011 19:55:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2011 19:55:10"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/18/2011 19:55:10"
					   UPDATED_BY="SADMIN"
					   CREATED="11/18/2011 19:55:10"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2011 19:55:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2011 19:55:10"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderReason"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/18/2011 19:55:10"
					   UPDATED_BY="SADMIN"
					   CREATED="11/18/2011 19:55:10"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderSubType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2011 19:55:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2011 19:55:10"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderSubType"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/18/2011 19:55:10"
					   UPDATED_BY="SADMIN"
					   CREATED="11/18/2011 19:55:10"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2011 19:55:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2011 19:55:10"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderType"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/18/2011 19:55:10"
					   UPDATED_BY="SADMIN"
					   CREATED="11/18/2011 19:55:10"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/18/2011 19:55:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2011 19:55:10"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/18/2011 19:55:10"
					   UPDATED_BY="SADMIN"
					   CREATED="11/18/2011 19:55:10"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckTranFeeSkip"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/18/2011 19:55:10"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2011 19:55:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ControlSkipPosition"
			   UPDATED="04/23/2015 20:18:24"
			   UPDATED_BY="SADMIN"
			   CREATED="04/23/2015 20:18:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ControlNum"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/23/2015 20:18:24"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2015 20:18:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ControlType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/23/2015 20:18:24"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2015 20:18:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/23/2015 20:18:24"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2015 20:18:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderSubType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/23/2015 20:18:24"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2015 20:18:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/23/2015 20:18:24"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2015 20:18:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ControlSkipPosition"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/23/2015 20:18:24"
				   UPDATED_BY="SADMIN"
				   CREATED="04/23/2015 20:18:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method create a copy of all Line Items with action Update. The original Line Item will be updated to delete and the new one will be updated to add"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CopyUpdateLineItems"
			   UPDATED="01/31/2009 16:16:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CopyUpdateLineItems"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This Script is used to correct an error in hierarchial IOs caused by Siebel CR - 12-JNXE39."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CorrectProductIO"
			   UPDATED="01/31/2009 16:16:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FieldName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CorrectProductIO"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS MC R1.3 20100714 - Newly Created for GIB Requirement."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateGIBFailureSR"
			   UPDATED="09/30/2010 16:45:35"
			   UPDATED_BY="SADMIN"
			   CREATED="07/23/2010 21:57:40"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/23/2010 21:57:40"
				   UPDATED_BY="SADMIN"
				   CREATED="07/23/2010 21:57:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateGIBFailureSR"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="09/30/2010 16:45:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS MC R1.3 20100714 - Newly Created for GIB Requirement."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateGIBSR"
			   UPDATED="09/30/2010 16:45:35"
			   UPDATED_BY="SADMIN"
			   CREATED="07/22/2010 08:53:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/22/2010 08:53:42"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateGIBSR"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="09/30/2010 16:45:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method takes an AssetId as input, creates a modify order for this asset and returns the Id of the created Order."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateModifyOrder"
			   UPDATED="01/31/2009 16:16:01"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Method"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:01"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateModifyOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateSR"
			   UPDATED="01/31/2009 16:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Area"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Asset Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Description"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Owner Group"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Service Request Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Sub Area"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Sub Status"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Type"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateSR"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DateToString"
			   UPDATED="01/31/2009 16:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Date"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="dDate"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DateToString"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method will return the value of a particular attribute from an order."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ExtractAttribValue"
			   UPDATED="01/31/2009 16:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LineItemName"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ExtractAttribValue"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method will return the value of a particular attribute from an order based upon Line Item Id."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ExtractAttribValue_Id"
			   UPDATED="01/31/2009 16:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LineItemId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ExtractAttribValue_Id"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method will extract and return an attribute value from an integration object."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ExtractValueFromXML"
			   UPDATED="01/31/2009 16:15:26"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ExtractValueFromXML"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 13-02-2007: This method will get a buscomp name and row_id and will move the focus to the selected record in the buscomp. (buscomp should be present in the current BO)"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FocusOnRecord"
			   UPDATED="01/31/2009 16:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BuscompName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RecordId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="FocusOnRecord"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:26"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:26"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Mamta R1.4.2 - Added to manage GIB Order Flow for WP17."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GIBOrder"
			   UPDATED="05/20/2011 13:15:45"
			   UPDATED_BY="SADMIN"
			   CREATED="05/20/2011 13:15:07"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/20/2011 13:15:40"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 13:15:40"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GIBOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/20/2011 13:15:36"
				   UPDATED_BY="SADMIN"
				   CREATED="05/20/2011 13:15:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetAssetIntegrationId"
			   UPDATED="01/31/2009 16:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Asset Integration Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Line Item Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetAssetIntegrationId"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetAvailableCampaignList"
			   UPDATED="06/09/2011 21:48:45"
			   UPDATED_BY="SADMIN"
			   CREATED="06/09/2011 20:52:10"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AvailableCampaignList"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Output"
				   UPDATED="06/09/2011 21:48:31"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 21:11:59"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="AvailableCampaignList"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/09/2011 21:48:31"
					   UPDATED_BY="SADMIN"
					   CREATED="06/09/2011 21:48:31"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AverageInvoice"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/09/2011 21:48:34"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 21:06:52"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="AverageInvoice"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/09/2011 21:48:34"
					   UPDATED_BY="SADMIN"
					   CREATED="06/09/2011 21:48:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LineType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/09/2011 21:48:41"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 21:48:02"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LineType"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/09/2011 21:48:41"
					   UPDATED_BY="SADMIN"
					   CREATED="06/09/2011 21:48:41"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RiskStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/09/2011 21:48:38"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 21:06:37"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="RiskStatus"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/09/2011 21:48:38"
					   UPDATED_BY="SADMIN"
					   CREATED="06/09/2011 21:48:38"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TotalInvoice"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/09/2011 21:48:45"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 21:06:47"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="TotalInvoice"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="06/09/2011 21:48:45"
					   UPDATED_BY="SADMIN"
					   CREATED="06/09/2011 21:48:45"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetAvailableCampaignList"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/09/2011 20:52:29"
				   UPDATED_BY="SADMIN"
				   CREATED="06/09/2011 20:52:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetDisplayValues"
			   UPDATED="07/11/2011 14:33:10"
			   UPDATED_BY="SADMIN"
			   CREATED="07/11/2011 14:33:10"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ActionType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/11/2011 14:33:10"
				   UPDATED_BY="SADMIN"
				   CREATED="07/11/2011 14:33:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/11/2011 14:33:10"
				   UPDATED_BY="SADMIN"
				   CREATED="07/11/2011 14:33:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strStatus"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/11/2011 14:33:10"
				   UPDATED_BY="SADMIN"
				   CREATED="07/11/2011 14:33:10"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AT 21-08-2006: This method will search code of messages."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetLookupMsg"
			   UPDATED="01/31/2009 16:17:28"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Code"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:28"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:28"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Message"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:28"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:28"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MessageCategory"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="MessageCategory"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:28"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:28"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetLookupMsg"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VF Diva R21 20110916: created new for WP02."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetLookupMsgArg"
			   UPDATED="09/16/2011 16:39:38"
			   UPDATED_BY="SADMIN"
			   CREATED="09/16/2011 16:37:41"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Arg1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/16/2011 16:39:30"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 16:38:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Arg2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/16/2011 16:39:32"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 16:38:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Arg3"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/16/2011 16:39:38"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 16:38:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/16/2011 16:37:41"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 16:37:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/16/2011 16:37:41"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 16:37:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MessageCategory"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/16/2011 16:37:41"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2011 16:37:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetLookupValue"
			   UPDATED="04/11/2010 11:07:59"
			   UPDATED_BY="SADMIN"
			   CREATED="04/11/2010 11:07:59"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/11/2010 11:07:59"
				   UPDATED_BY="SADMIN"
				   CREATED="04/11/2010 11:07:59"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LOV Name"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="04/11/2010 11:07:59"
					   UPDATED_BY="SADMIN"
					   CREATED="04/11/2010 11:07:59"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/11/2010 11:07:59"
				   UPDATED_BY="SADMIN"
				   CREATED="04/11/2010 11:07:59"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LOV Type"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="04/11/2010 11:07:59"
					   UPDATED_BY="SADMIN"
					   CREATED="04/11/2010 11:07:59"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV Value"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/11/2010 11:07:59"
				   UPDATED_BY="SADMIN"
				   CREATED="04/11/2010 11:07:59"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LOV Value"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="04/11/2010 11:07:59"
					   UPDATED_BY="SADMIN"
					   CREATED="04/11/2010 11:07:59"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetLookupValue"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/11/2010 11:07:59"
				   UPDATED_BY="SADMIN"
				   CREATED="04/11/2010 11:07:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK MC R1.3 20100802 - Added for Langugae to be also as input"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetLookupValueLang"
			   UPDATED="09/30/2010 16:45:35"
			   UPDATED_BY="SADMIN"
			   CREATED="08/04/2010 14:03:25"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/04/2010 14:03:25"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LOV Name"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/04/2010 14:03:25"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LOV Type"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV Value"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/04/2010 14:03:25"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LOV Value"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Lang"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/04/2010 14:03:25"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Lang"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetLookupValueLang"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="09/30/2010 16:45:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Kiran R2.1 - Added to Get order data needed for browser script to run on submit"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetOrderData"
			   UPDATED="12/06/2011 13:21:14"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2011 19:29:28"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/01/2011 19:29:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2011 19:29:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Sub Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/01/2011 19:29:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2011 19:29:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Type Calc"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/01/2011 19:29:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2011 19:29:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/01/2011 19:29:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2011 19:29:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF Dealer Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/01/2011 19:29:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2011 19:29:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF Shop Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/01/2011 19:29:28"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2011 19:29:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetOrderData"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/06/2011 13:21:14"
				   UPDATED_BY="SADMIN"
				   CREATED="12/06/2011 13:21:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS MV 2-8-2007: This methid will retrieve the parameter attributes based on parameter Name"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetParameter"
			   UPDATED="02/15/2013 15:08:15"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Cons1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Cons123"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/15/2013 15:08:15"
				   UPDATED_BY="SADMIN"
				   CREATED="02/15/2013 15:08:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Cons2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Cons3"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Description"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Function"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Value"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:02"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetParameter"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="FG"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetParameterMVL"
			   UPDATED="05/24/2015 17:39:45"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2015 17:39:45"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Function"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2015 17:39:45"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2015 17:39:45"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2015 17:39:45"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2015 17:39:45"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RoleList"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2015 17:39:45"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2015 17:39:45"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetParameterMVL"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/24/2015 17:39:45"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2015 17:39:45"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetParameterWithConstraint"
			   UPDATED="12/30/2017 12:05:31"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="12/30/2017 12:05:31"
			   CREATED_BY="IBM_MERVEO">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetParameterWithConstraint"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/30/2017 12:05:31"
				   UPDATED_BY="IBM_MERVEO"
				   CREATED="12/30/2017 12:05:31"
				   CREATED_BY="IBM_MERVEO">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VF MC R1.3 20100716 -Added for GIB."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetParentLIC"
			   UPDATED="03/19/2012 08:24:15"
			   UPDATED_BY="SADMIN"
			   CREATED="07/22/2010 08:53:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ParentDisplay"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ParentDisplay"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Result"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="LOV Type as Input"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="svc_In_LOV_Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="svc_In_LOV_Type"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Language Code as Input"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="Y"
				   NAME="svc_In_Language"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/19/2012 08:24:15"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   COMMENTS="ACS_Removal"
					   DISPLAY_NAME="svc_In_Language"
					   INACTIVE="Y"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/19/2012 08:24:15"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Display Value as Input"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="svc_In_Value"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="07/22/2010 08:53:42"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="svc_In_Value"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetParentLIC"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="09/30/2010 16:45:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS 04-10-2007: Returns the LIC"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Get_Language_IndependentCode"
			   UPDATED="03/28/2012 11:38:16"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Fambio(Rel2.1): General Porpuse"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV_NAME"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/28/2012 11:38:16"
				   UPDATED_BY="SADMIN"
				   CREATED="03/28/2012 11:38:16"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="LOV_NAME"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="03/28/2012 11:38:16"
					   UPDATED_BY="SADMIN"
					   CREATED="03/28/2012 11:38:16"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="LOV Type as Input"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="svc_In_LOV_Type"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="svc_In_LOV_Type"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:28"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:28"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Language Code as Input"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="svc_In_Language"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="svc_In_Language"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:28"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:28"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Diaplay Value as Input"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="svc_In_Value"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="svc_In_Value"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:28"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:28"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Is among allowable statuses (0 or 1)"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="svc_Out_Status_Allowable"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:28"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="svc_Out_Status_Allowable"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:28"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:28"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Get_Language_IndependentCode"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method will take the EAI response message as input and return the status and error message."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="HandleEAIResponse"
			   UPDATED="01/31/2009 16:16:03"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Siebel Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="StatusCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="HandleEAIResponse"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LoadFile"
			   UPDATED="01/31/2009 16:17:29"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FileName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="FileName"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:29"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:29"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SIM_Row_Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LoadFile"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method will log the error message and error code parameters into a file that is maintained as an LOV. It is used in background workflows to log the errors"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LogWorkflowErrors"
			   UPDATED="01/31/2009 16:16:03"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OtherInputs1"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OtherInputs2"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LogWorkflowErrors"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="log description &amp; values sent as array to the full file name specified"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Log_Values"
			   UPDATED="01/31/2009 16:17:29"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="A brief description of the record being logged"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Description"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Description"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:29"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:29"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="Actual values to be logged, passed as a string of values separated with &quot;;&quot;"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ValuesArray"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ValuesArray"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:29"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:29"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="Log_Values"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Mamta -Added for R1.4.2 WP17."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LoggingBS"
			   UPDATED="05/18/2011 15:01:12"
			   UPDATED_BY="SADMIN"
			   CREATED="05/18/2011 13:46:07"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Customer Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/18/2011 13:49:00"
				   UPDATED_BY="SADMIN"
				   CREATED="05/18/2011 13:47:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Logging Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/18/2011 13:48:32"
				   UPDATED_BY="SADMIN"
				   CREATED="05/18/2011 13:48:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LoggingBS"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/18/2011 13:46:36"
				   UPDATED_BY="SADMIN"
				   CREATED="05/18/2011 13:46:36"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="LookupName"
			   UPDATED="06/11/2013 08:14:44"
			   UPDATED_BY="SADMIN"
			   CREATED="06/11/2013 08:14:44"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LOV"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/11/2013 08:14:44"
				   UPDATED_BY="SADMIN"
				   CREATED="06/11/2013 08:14:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Val"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="06/11/2013 08:14:44"
				   UPDATED_BY="SADMIN"
				   CREATED="06/11/2013 08:14:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="LookupName"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/11/2013 08:14:44"
				   UPDATED_BY="SADMIN"
				   CREATED="06/11/2013 08:14:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method will modify the value of a particular attribute from an order."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ModifyAttribValue"
			   UPDATED="01/31/2009 16:16:03"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AttributeValue"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="LineItemName"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ModifyAttribValue"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method will take the attribute values of an asset and populate them into the Previous Text Value of the corresponding orders attributes. It takes the Order Id as input."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="PopulateOrderAttrOldVal"
			   UPDATED="01/31/2009 16:16:03"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="PopulateOrderAttrOldVal"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 26-07-2006: This method is used to remove the siebel envelope before sending the outbound message"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SendMessageToEAI"
			   UPDATED="01/31/2009 16:16:03"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Datamap Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Source IO Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Target IO Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="WS Business Service"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="WS Method Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SendMessageToEAI"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS AD 20-11-2006: This is a common script that takes an order id as input and submits it."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SubmitOrder"
			   UPDATED="01/31/2009 16:16:03"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="StatusCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:03"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:03"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SubmitOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:27"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:27"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateDashBoard"
			   UPDATED="12/23/2011 08:02:01"
			   UPDATED_BY="SADMIN"
			   CREATED="12/23/2011 08:02:01"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateDashBoard"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/23/2011 08:02:01"
				   UPDATED_BY="SADMIN"
				   CREATED="12/23/2011 08:02:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="ACS MC R1.3 20100714 - Newly Created for GIB Requirement."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="VFGIBCall"
			   UPDATED="05/24/2011 10:12:18"
			   UPDATED_BY="SADMIN"
			   CREATED="10/08/2010 20:54:08"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 10:11:53"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 10:11:53"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VFGIBCall"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/24/2011 10:12:09"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 10:12:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strAdmin"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strCompType"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strGIBNR"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOK"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strTAXOFF"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strTITLE"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strTaxID"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="VFGIBCall"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="10/08/2010 20:54:08"
				   UPDATED_BY="SADMIN"
				   CREATED="10/08/2010 20:54:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="Mamta 20110204 - Added to resolve GIB Crash Issue by calling VF Response GIB Data Workflow in this method."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="VFResponseGIB"
			   UPDATED="02/09/2011 15:49:59"
			   UPDATED_BY="SADMIN"
			   CREATED="02/09/2011 15:49:59"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IS_ACTIVE"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Registration No"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="pset_SiebelMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="VFResponseGIB"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Mamta - Added to Call VF Refresh SmartScript Workflow to avoid crash as the WF was invoked on Browser Script directly."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="VFSmartScriptWF"
			   UPDATED="07/13/2011 18:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="02/15/2011 11:57:45"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="Mamta 20110204 - Added to resolve GIB Crash Issue by calling VF Verify GIB Workflow in this method."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="VFVerifyGIB"
			   UPDATED="02/09/2011 15:49:59"
			   UPDATED_BY="SADMIN"
			   CREATED="02/09/2011 15:49:59"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Account Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="COMPANY_TYPE"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DOD_TITLE"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TAX_NO"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TAX_OFFICE_NAME"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF GIB Status Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="pset_SiebelMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="VFVerifyGIB"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="02/09/2011 15:49:59"
				   UPDATED_BY="SADMIN"
				   CREATED="02/09/2011 15:49:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkKargo"
			   UPDATED="01/24/2011 17:31:44"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2011 17:31:43"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Res"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Res"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/24/2011 17:31:44"
					   UPDATED_BY="SADMIN"
					   CREATED="01/24/2011 17:31:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Number"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResCount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ResCount"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/24/2011 17:31:44"
					   UPDATED_BY="SADMIN"
					   CREATED="01/24/2011 17:31:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Number"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ResLimit"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ResLimit"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/24/2011 17:31:44"
					   UPDATED_BY="SADMIN"
					   CREATED="01/24/2011 17:31:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="orderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/24/2011 17:31:44"
					   UPDATED_BY="SADMIN"
					   CREATED="01/24/2011 17:31:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkKargoProduct"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkPaymentStatus"
			   UPDATED="01/24/2011 17:31:44"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2011 17:31:44"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="orderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/24/2011 17:31:44"
					   UPDATED_BY="SADMIN"
					   CREATED="01/24/2011 17:31:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Res"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Res"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/24/2011 17:31:44"
					   UPDATED_BY="SADMIN"
					   CREATED="01/24/2011 17:31:44"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkPaymentStatus"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/24/2011 17:31:44"
				   UPDATED_BY="SADMIN"
				   CREATED="01/24/2011 17:31:44"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkSVB"
			   UPDATED="04/12/2011 18:10:51"
			   UPDATED_BY="SADMIN"
			   CREATED="08/27/2010 13:41:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Res"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/21/2010 16:39:01"
				   UPDATED_BY="SADMIN"
				   CREATED="10/18/2010 16:09:43"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Res"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="10/21/2010 16:39:01"
					   UPDATED_BY="SADMIN"
					   CREATED="10/18/2010 16:09:43"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/27/2010 13:41:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="orderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkSVB"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/12/2011 18:10:51"
				   UPDATED_BY="SADMIN"
				   CREATED="09/30/2010 16:45:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkSVBGroup"
			   UPDATED="11/18/2010 20:06:34"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2010 20:06:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/18/2010 20:06:34"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2010 20:06:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="orderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/18/2010 20:06:34"
					   UPDATED_BY="SADMIN"
					   CREATED="11/18/2010 20:06:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Res"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/18/2010 20:06:34"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2010 20:06:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Res"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/18/2010 20:06:34"
					   UPDATED_BY="SADMIN"
					   CREATED="11/18/2010 20:06:34"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkSVBGroup"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/18/2010 20:06:34"
				   UPDATED_BY="SADMIN"
				   CREATED="11/18/2010 20:06:34"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkSVBSimNumber"
			   UPDATED="09/30/2010 16:45:35"
			   UPDATED_BY="SADMIN"
			   CREATED="08/27/2010 13:41:34"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/27/2010 13:41:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BillingAccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Res"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/28/2010 08:58:20"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Res"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="partNum"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="08/27/2010 13:41:34"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="partNum"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="09/30/2010 16:45:35"
					   UPDATED_BY="SADMIN"
					   CREATED="09/30/2010 16:45:35"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkSVBSimNumber"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/30/2010 16:45:35"
				   UPDATED_BY="SADMIN"
				   CREATED="09/30/2010 16:45:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkSVBorVPNdoc"
			   UPDATED="07/13/2011 18:16:02"
			   UPDATED_BY="SADMIN"
			   CREATED="07/07/2011 20:21:41"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2011 20:21:41"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 20:21:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Res"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2011 20:21:41"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 20:21:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="orderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/07/2011 20:21:41"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2011 20:21:41"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkVPNGroup"
			   UPDATED="05/17/2010 13:24:57"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2010 13:24:57"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Owner Account Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/17/2010 13:24:57"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2010 13:24:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Result"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/17/2010 13:24:57"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2010 13:24:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF MSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/17/2010 13:24:57"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2010 13:24:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="checkVPNGroup"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/17/2010 13:24:57"
				   UPDATED_BY="SADMIN"
				   CREATED="05/17/2010 13:24:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateBillCycle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateBillCycle(Inputs,Outputs)
{
	try
	{
		var IntegrationId = &quot;&quot;;
		var InstallDate = &quot;&quot;;
		
		var BillingAccountId = Inputs.GetProperty(&quot;BillingAccountId&quot;);
		var AccBO 		:BusObject	= TheApplication().GetBusObject(&quot;Account&quot;);
		var InvProfBC 	:BusComp	= AccBO.GetBusComp(&quot;Com Invoice Profile&quot;);
		
		with(InvProfBC)
		{
			// Review Input validation: Scripting 15 null check Added 8may2012 Udbhav IDC
			var inProp 	:PropertySet	= TheApplication().NewPropertySet();
			var outProp :PropertySet	= TheApplication().NewPropertySet();
			var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;BillingAccountId&quot;,BillingAccountId); //Id Validation
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
			/*** End Validation Input part ***/

			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Bill Cycle&quot;);
			SetSearchExpr(&quot;[Account Id] = &apos;&quot;+BillingAccountId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				var BillCycle = GetFieldValue(&quot;Bill Cycle&quot;);
			}
		}

		var RootItemId 	= Inputs.GetProperty(&quot;RootItemId&quot;);
		var XOrderBO 	:BusObject	= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemBC :BusComp	= XOrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var AssetBC 	:BusComp	= XOrderBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		
		with(OrderItemBC)
		{

			// Review Input validation: Scripting 15 null check Added 8may2012 Udbhav IDC

			/*** Begin Validation Input Part ***/ 
			var inPropOI 	:PropertySet	= TheApplication().NewPropertySet();
			var outPropOI 	:PropertySet	= TheApplication().NewPropertySet();
			inPropOI.SetProperty(&quot;RootItemId&quot;,RootItemId); //Id Validation
			BS.InvokeMethod(&quot;Input Validation&quot;,inPropOI, outPropOI); // Query Input Validation
			/*** End Validation Input part ***/

			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(&quot;[Id] = &apos;&quot;+RootItemId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed 8may2012 Udbhav IDC
			if (FirstRecord())
			{
				IntegrationId = GetFieldValue(&quot;Asset Integration Id&quot;);
			}
		}

		with(AssetBC)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Install Date&quot;);
			ClearToQuery();
			// Review Input validation: Scripting 15 null check Added 8may2012 Udbhav IDC

			/*** Begin Validation Input Part ***/ 
			var inPropAsset		:PropertySet	= TheApplication().NewPropertySet();
			var outPropAsset 	:PropertySet	= TheApplication().NewPropertySet();
			inPropAsset.SetProperty(&quot;IntegrationId&quot;,IntegrationId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inPropAsset, outPropAsset);
			/*** End Validation Input part ***/
			
			SetSearchExpr(&quot;[Integration Id] = &apos;&quot;+IntegrationId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed 8may2012 Udbhav IDC
			if (FirstRecord())
			{
				InstallDate = GetFieldValue(&quot;Install Date&quot;);
			}	
		}

	
	    var sysdate = new Date();    
	    var sysdatestring = ((sysdate.getMonth()+1)+ &quot;/&quot; + sysdate.getDate() + &quot;/&quot; + sysdate.getFullYear());  
	    var instDate = new Date(InstallDate);
	        
		var CurrBillCycleDate = new Date(((instDate.getMonth()+1)+ &quot;/&quot; + BillCycle + &quot;/&quot; + instDate.getFullYear()));     
	    var month = instDate.getMonth()+2;
	    var year  = instDate.getFullYear();
	    if (month == 13)
	    {
	    	month=1;
	    	year=year+1;
	    }
		var NextBillCycleDate = new Date(((month)+ &quot;/&quot; + BillCycle + &quot;/&quot; + year));
	    
	    var result = &quot;NC&quot;;
	    
	    if (CurrBillCycleDate &gt; instDate)
	    {
	    	if (sysdate &gt; CurrBillCycleDate)
	    	{
	    		result = &quot;C&quot;;
	    	}
	   	}
	   	else if(sysdate &gt; NextBillCycleDate)
	   	{
	   		result = &quot;C&quot;;
	   	}
	    
		Outputs.SetProperty(&quot;Result&quot;,result);
	}
	finally
	{
		AssetBC	= null;
		OrderItemBC = null;
		InvProfBC = null;
		inProp 	= null;
		outProp = null;
		BS 	= null;
		XOrderBO = null;
		AccBO = null;
		inPropOI 	= null;
		outPropOI 	= null;
		inPropAsset = null;
		outPropAsset = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="07/04/2012 17:30:53"
			   UPDATED_BY="SADMIN"
			   CREATED="05/27/2011 18:14:41"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateNumberBytes"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateNumberBytes(Inputs, Outputs)
{
		/************************************************************************************
		* VFTK Diva 15-Sep-11 : Created                                                     *
		* Description      :  Counts the number of messages in the SMS body
		**************************************************************************************/
		try
		{	  
			  var MessageBody = Inputs.GetProperty(&quot;Message_Body&quot;);
				var NoLength = MessageBody.length;
				var Max_SMS = 160;
				var Num_MSGs = &quot;&quot;;
				var IsLatin = &quot;NO&quot;;
				var strError = &quot;&quot;;
				var oLOVBO:BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;);
				var oLOVBC:BusComp = oLOVBO.GetBusComp(&quot;List Of Values&quot;);
				for (var i=0; i&lt;NoLength; i++)
			  {
			  		var co = MessageBody.charCodeAt(i);
			      if (co &gt; 127)
			      {
			      		IsLatin = &quot;YES&quot;
			      		break;
			      }
			  }
				if(IsLatin == &quot;YES&quot;)
				{
						var Max_SMS = 70;
				}	
				
				Num_MSGs = NoLength/Max_SMS;
				Num_MSGs = ToInteger(Num_MSGs);
				Num_MSGs = Num_MSGs + 1;
		
				var MaxAllowed = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;MAX_ALLOWED_SMS&quot;, &quot;MAX_ALLOWED_SMS&quot;);
				//VFTK Junaid 20120529 - Added for defect C_MSP00001469
				if(MaxAllowed == &quot;&quot;)
				{
					with(oLOVBC)
					{
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Value&quot;);
						SetSearchSpec(&quot;Name&quot;,&quot;MAX_ALLOWED_SMS&quot;);
						SetSearchSpec(&quot;Type&quot;,&quot;MAX_ALLOWED_SMS&quot;);
						ExecuteQuery(ForwardOnly);
						if(FirstRecord())
							MaxAllowed = GetFieldValue(&quot;Value&quot;);
					}
				}
				//End
				if(Num_MSGs &gt; MaxAllowed)
				{
						strError = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_047&quot;, Num_MSGs, MaxAllowed);
						//TheApplication().RaiseErrorText(strError);
				}
				Outputs.SetProperty(&quot;OutPut&quot;, Num_MSGs);
				Outputs.SetProperty(&quot;ErrorMsg&quot;, strError);
		}
		finally
		{
			oLOVBC = null;
			oLOVBO = null;		
		}
}"
			   SEQUENCE="2"
			   UPDATED="07/04/2012 17:30:46"
			   UPDATED_BY="SADMIN"
			   CREATED="09/16/2011 10:46:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallBundleWF"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallBundleWF (Inputs, Outputs)
{
	try
	{
		var strAccnt : BusObject = TheApplication().ActiveBusObject();
		var BillAcct : BusComp;
		var strBillingAccnt = &quot;&quot;;
		
		if (strAccnt.Name() != &quot;PRM VF TR BO-Demo&quot; &amp;&amp; strAccnt.Name() != &quot;Account&quot; &amp;&amp; strAccnt.Name() != &quot;Billing Account&quot; &amp;&amp; strAccnt.Name() != &quot;VF Account&quot; &amp;&amp; strAccnt.Name() != &quot;VF TRK PRM Account&quot;)
			return(CancelOperation);
		else
		{			
			if (TheApplication().GetProfileAttr(&quot;ApplicationName&quot;) == &quot;Siebel eChannel&quot;){
				 BillAcct= strAccnt.GetBusComp(&quot;VF PRM Billing Account&quot;);		
				 strBillingAccnt = strAccnt.GetBusComp(&quot;VF PRM Billing Account&quot;).GetFieldValue(&quot;Account Code&quot;);
			}
			else{
				BillAcct = strAccnt.GetBusComp(&quot;Billing Account&quot;);	
				strBillingAccnt	= strAccnt.GetBusComp(&quot;Billing Account&quot;).GetFieldValue(&quot;Account Code&quot;);
			}
			var inProp :PropertySet     = TheApplication().NewPropertySet();
			var outProp :PropertySet    = TheApplication().NewPropertySet();
			var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			var strBCCopy	= strAccnt.GetBusComp(&quot;VF Bundle Inquiry VBC Copy&quot;);
			var strBC		= strAccnt.GetBusComp(&quot;VF Bundle Inquiry VBC&quot;);
			var strYear 	= strBCCopy.GetFieldValue(&quot;YEAR&quot;);
			var strMonth 	= strBCCopy.GetFieldValue(&quot;MONTH&quot;);
			var sMonth 		= strBCCopy.GetFieldValue(&quot;MONTH&quot;);
			var sYear 		= strBCCopy.GetFieldValue(&quot;YEAR&quot;);
			var strBundleType = strBCCopy.GetFieldValue(&quot;BUNDLE PERIOD&quot;);
			var sBilledPeriod = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BUNDLE_TYPE&quot;,&quot;Billed Bundle&quot;);
	
			if(sMonth &lt; 10)
			sMonth = &quot;0&quot; + sMonth; //PROD00027835
				//Modified the condition: C_MSP00000393
				if(strBundleType == sBilledPeriod)
					TheApplication().SetProfileAttr(&quot;paBundlePeriod&quot;,sMonth +&apos;/&apos; + sYear);
				else
					TheApplication().SetProfileAttr(&quot;paBundlePeriod&quot;,&quot;&quot;);
			
			TheApplication().SetProfileAttr(&quot;PABillingAccnt&quot;, strBillingAccnt);
			TheApplication().SetProfileAttr(&quot;PABundleYear&quot;, strYear);
			TheApplication().SetProfileAttr(&quot;PABundleMonth&quot;, strMonth);
			TheApplication().SetProfileAttr(&quot;PABundleType&quot;, strBundleType);
		
			if(strBC!=null)
			{
				with(strBC)
				{
					ClearToQuery();
				    ExecuteQuery(ForwardBackward);
				}
			}
			var strErr = TheApplication().GetProfileAttr(&quot;BundleError&quot;);
			if(strErr != &quot;&quot;)
			{
				with(BillAcct)
				{
					ClearToQuery();
					inProp.SetProperty(&quot;strBillingAccnt&quot;, strBillingAccnt);
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
					//VFTK Junaid 20120520 - Scripting 15 not needed as field cannot be null
					SetSearchSpec(&quot;Account Code&quot;,strBillingAccnt);
					ExecuteQuery(ForwardBackward);
				}
			}
			return (CancelOperation);
		}			
	}
	
	finally
	{
    	BillAcct		= null;
		strBillingAccnt	= null;
		inProp     		= null;
		outProp   		= null;
		BS 				= null;
		strBCCopy		= null;
		strBC			= null;
 		strAccnt 		= null;
	}	
}"
			   SEQUENCE="3"
			   UPDATED="07/17/2013 14:05:00"
			   UPDATED_BY="SADMIN"
			   CREATED="07/18/2011 18:54:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallCDRInquiryWS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallCDRInquiryWS (Inputs, Outputs)
{
	try
	{
		var sEM 				= &quot;&quot;;
		var strBillingCode		= &quot;&quot;;
		var strInvoiceNumber	= &quot;&quot;;
		var oApp 	= TheApplication();
		var boAc 	: BusObject	= oApp.ActiveBusObject();
		var bcIP 	: BusComp	= boAc.GetBusComp(&quot;VF Interim Payment&quot;);
		var bcCDR 	: BusComp	= boAc.GetBusComp(&quot;VF CDR Inquiry VBC&quot;);
		var bcBA 	: BusComp	= boAc.GetBusComp(&quot;Billing Account&quot;);

		if(bcCDR!=null)
		{	
			/*if(bcCDR.GetFieldValue(&quot;MIN_DURATION_IN&quot;)!=&quot;&quot; ||bcCDR.GetFieldValue(&quot;MAX_DURATION_IN&quot;)!=&quot;&quot;)
			{
				if(bcCDR.GetFieldValue(&quot;CALL_TYPE_IN&quot;)==&quot;&quot;)
				{
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_039&quot;));
				}
			}*/
		}
	   
		if(bcBA != null)
		{
			with(bcBA)
			{
				strBillingCode=GetFieldValue(&quot;Account Code&quot;);
				TheApplication().SetProfileAttr(&quot;CDR_BillingCode&quot;,strBillingCode);
			}
		}
	 
		 if(bcIP!=null)
		 {
			strInvoiceNumber=bcIP.GetFieldValue(&quot;INVOICE_NUMBER&quot;);
			TheApplication().SetProfileAttr(&quot;CDR_InvoiceNumber&quot;, strInvoiceNumber);
		 }
	  var sMethodName=TheApplication().GetProfileAttr(&quot;CDRMethodName&quot;);
	  TheApplication().SetProfileAttr(&quot;ExportCDR&quot;, &quot;&quot;);
	  
	  switch(sMethodName)
	  {
		case &quot;UnbilledCDR&quot;:
			TheApplication().SetProfileAttr(&quot;CDR_UnbilledCDR&quot;, &quot;Y&quot;);
			TheApplication().SetProfileAttr(&quot;ExportCDR&quot;, &quot;U&quot;);
			break;
		case &quot;ExportQuery&quot;:
			TheApplication().SetProfileAttr(&quot;CDR_ExportQuery&quot;, &quot;Y&quot;);
		case &quot;BilledCDR&quot;:
			TheApplication().SetProfileAttr(&quot;ExportCDR&quot;, &quot;B&quot;);
		case &quot;ExecuteQuery&quot;:
			TheApplication().SetProfileAttr(&quot;CDR_QueryCDR&quot;, &quot;Y&quot;);
	  }
	  GetCDRProfileAttibutes();
	  
	  if(bcCDR!=null)
	  {
		if(sMethodName == &quot;BilledCDR&quot; &amp;&amp; strInvoiceNumber == &quot;&quot;)
		{	
			var strBilledCDRMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_364&quot;); //AD7005
			TheApplication().SetProfileAttr(&quot;CDRError&quot;, strBilledCDRMsg);
		}
		else
		{
			bcCDR.ClearToQuery ();
			bcCDR.ActivateField(&quot;TOTAL_NUMBER_OF_CDRs&quot;);

			if(TheApplication().GetProfileAttr(&quot;CDRMethodName&quot;) == &quot;ExportQuery&quot; )
			{
				bcCDR.ExecuteQuery(ForwardOnly);
			}
			else{
				bcCDR.ExecuteQuery(ForwardBackward);
			}
		}
	   }
	   var strErrMsg = TheApplication().GetProfileAttr(&quot;CDRError&quot;);
	   if(strErrMsg!=&quot;&quot;)
	   {
			with(bcBA)
			{
			 var bRecord=FirstRecord();
	         while(bRecord)
	         {
	            if(GetFieldValue(&quot;Account Code&quot;)==strBillingCode)
	            {
	            	break;
	            }
	            bRecord = NextRecord();
	         }
			}//with
		}
		if(TheApplication().GetProfileAttr(&quot;CDR_ExportQuery&quot;)!=&quot;Y&quot;)
		{		
			//var sEM=&quot;&quot;;
		    if(bcCDR!=null)
		    {
	  		  var iNumberofCDRs=bcCDR.GetFieldValue(&quot;TOTAL_NUMBER_OF_CDRs&quot;);
			  var iMaxRecords=oApp.InvokeMethod(&quot;LookupValue&quot;,&quot;MAXIMUM_CDR&quot;, &quot;MaxCDRList&quot;);
			  if(iMaxRecords==&quot;&quot;)
			  {
					iMaxRecords=25;
			  }
			  if(ToNumber(iNumberofCDRs)&gt;ToNumber(iMaxRecords))
			  {
				sEM = oApp.LookupMessage(&quot;VF Message Category&quot;, &quot;338&quot;, iNumberofCDRs);
			  }
		    }//if bcCDR
		}
	    if(strErrMsg!=&quot;&quot;)
	    {
	    	Outputs.SetProperty(&quot;CDRError&quot;, strErrMsg);	
	    }
	    else if(sEM!=&quot;&quot;)
	    {
	    	Outputs.SetProperty(&quot;CDRError&quot;, sEM);
	    }
		return (CancelOperation);	
	}
	finally
	{
		oApp 	= null;
		bcIP 	= null;
		bcCDR 	= null;
		bcBA 	= null;
		boAc 	= null;
	}	
}"
			   SEQUENCE="4"
			   UPDATED="05/14/2015 23:45:41"
			   UPDATED_BY="SADMIN"
			   CREATED="09/08/2011 10:52:53"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallGIBforPRM"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallGIBforPRM(Inputs,Outputs)
{
	//Amul - Created this method for PostActivation task in order to bypass GIB validation error - C_MSP00000609
	try 
	{
		var boOrder		: BusObject;
		var bcOrder		: BusComp;
		var bsWfrMgr 	: Service;	
		var WFInputs 	: PropertySet;
	   	var WFOutputs 	: PropertySet;
		boOrder			= TheApplication().ActiveBusObject();
		bcOrder			= boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);	
		bsWfrMgr 		= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	   	WFInputs 		= TheApplication ().NewPropertySet (); 
	   	WFOutputs 		= TheApplication ().NewPropertySet (); 
	   	var strProfile 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_SCENARIO&quot;,&quot;GIBCustomerVer&quot;);
	   	
	   	with(bcOrder)
	   	{
		   	WFInputs.SetProperty(&quot;Account Id&quot;,GetFieldValue(&quot;Account Id&quot;));
		   	WFInputs.SetProperty(&quot;Order Id&quot;,GetFieldValue(&quot;Id&quot;));
		   	WFInputs.SetProperty(&quot;Message Type&quot;,&quot;VF Multiple Button Test&quot;);
		   	WFInputs.SetProperty(&quot;GIB Actual Company Name&quot;, GetFieldValue(&quot;Account&quot;));
		   	WFInputs.SetProperty(&quot;GIB Actual Tax Office&quot;, GetFieldValue(&quot;VF Customer Tax Office&quot;));
			WFInputs.SetProperty(&quot;GIB Actual Company Type&quot;, GetFieldValue(&quot;Flag PF&quot;));
			WFInputs.SetProperty(&quot;GIB Actual Verification Status&quot;, GetFieldValue(&quot;VF GIB Ver Status&quot;));
		   	WFInputs.SetProperty(&quot;DCA Profile&quot;, GetFieldValue(&quot;VF Authorized Profile&quot;));
		   	WFInputs.SetProperty(&quot;Profile Mode&quot;,strProfile);
		   	WFInputs.SetProperty(&quot;InquiryType&quot;,&quot;Undetailed&quot;);
		   	WFInputs.SetProperty(&quot;ProcessName&quot;,&quot;VF New GIB WF&quot;);
		   	bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;,WFInputs,WFOutputs);
		    var OrderSubmit = WFOutputs.GetProperty(&quot;OrderSubmit&quot;);
		    
		    if(OrderSubmit==&quot;Y&quot;)
			{
				SetFieldValue(&quot;VF GIB Call&quot;,&quot;Y&quot;);
				WriteRecord();
			} 
		}
	}
	finally 
	{
		bcOrder		= null;
		boOrder		= null;
		bsWfrMgr	= null;
		WFInputs	= null;
		WFOutputs	= null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="09/03/2012 17:43:43"
			   UPDATED_BY="SADMIN"
			   CREATED="03/27/2012 09:02:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallInqBG"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallInqBG(Inputs,Outputs)
{
/***********************************************************************************
* VFTK Junaid 11/11/2011	: Created                                                 
* Description      			: Used to get the inquiry message  
***********************************************************************************/
	try
	{
		//var sBGLVersion = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_BGL_LIST&quot;,&quot;Version&quot;); //-- VFTRCBU-13025
		var sList = Inputs.GetProperty(&quot;List&quot;);
		var PrimaryContactId = Inputs.GetProperty(&quot;Primary Contact Id&quot;);
		var fromApplet = Inputs.GetProperty(&quot;From Applet&quot;);
		var sListBlack = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BG_LIST&quot;,&quot;BLACK&quot;);
		var sMessage = &quot;&quot;;
		/*WA22 TCOSTA */
		// made changes to make the method return an html table if called from an applet
		// added the optional input argument &quot;From Applet&quot; to the method
		// if this argument has the value = Yes, the html variable is the return
		var html = &quot;&quot;;
		var sMess = &quot;&quot;;
		var pset_Inputs1 : PropertySet = TheApplication().NewPropertySet();
		var pset_Outputs1 : PropertySet = TheApplication().NewPropertySet();
		var svc1 : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		/*if(sBGLVersion == &quot;V1&quot;)
		{
			pset_Inputs1.SetProperty(&quot;ProcessName&quot;, &quot;VF Black Grey List&quot;);
		} 
		else 
		{*/  //-- VFTRCBU-13025
			pset_Inputs1.SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU Black Grey List Inquiry WF&quot;);
		//} //-- VFTRCBU-13025
		
		//Vaibhav 22/03/2012: Added else part to set ListType property - C_MSP00000658
		if(sList == sListBlack)
			pset_Inputs1.SetProperty(&quot;ListType&quot;, &quot;Black&quot;);
		else
			pset_Inputs1.SetProperty(&quot;ListType&quot;, &quot;Grey&quot;);
			
		pset_Inputs1.SetProperty(&quot;Primary Contact Id&quot;, PrimaryContactId);
		svc1.InvokeMethod(&quot;RunProcess&quot;, pset_Inputs1,pset_Outputs1);
		if(pset_Outputs1.GetProperty(&quot;Status Code&quot;) == &quot;0&quot;)
		{		
			var i;
			var BGInq = pset_Outputs1.GetChild(0).GetChild(0).GetChild(0);
			if(BGInq.GetChildCount() == 0 || (pset_Outputs1.GetProperty(&quot;Error Code&quot;) == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ERROR_CODE&quot;,&quot;VFTK-GIB-0000&quot;)))
			{
				if(sList == sListBlack){
					sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_083&quot;);
					html = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_083&quot;);
					Outputs.SetProperty(&quot;Show SWE&quot;,&quot;Yes&quot;);
				}else{
					sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_082&quot;);
					html = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_082&quot;);
					Outputs.SetProperty(&quot;Show SWE&quot;,&quot;Yes&quot;);
				}
			}
			else
			{
				var cnt = BGInq.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChildCount();
				if(sList == sListBlack)
					sMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_087&quot;);
				else
					sMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_088&quot;);
				var sId = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Id&quot;);
				var sPlatform = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Platform&quot;);
				var sType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Type&quot;);
				html += sMess + &quot;\n\n&quot;;
				html += &quot;&lt;table border=&apos;1&apos; style=&apos;border:1px solid black;border-collapse: collapse;&apos;&gt;&quot;
				/*if(sBGLVersion == &quot;V1&quot;)  VFTRCBU-15685
				{
			//TC-5726 | VFTRCBU Retrofits | TiagoRocha 20.01.2015
				var sCustomerID= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Siebel Customer Id&quot;);
				//sMessage = sMess + &quot;\n\n&quot; + sId + &quot;\t&quot; + sPlatform + &quot;\t&quot; + sType + &quot;\n&quot;;
			    sMessage = sMess + &quot;\n\n&quot; + sId + &quot;\t&quot; + sPlatform + &quot;\t&quot; + sType +&quot;\t&quot; + sCustomerID +&quot;\n&quot;;
				//sMessage = sMessage + &quot;--------\t--------\t--------\n&quot;;	
				sMessage = sMessage + &quot;--------\t--------\t--------\t--------\n&quot;;
				html += &quot;&lt;tr&gt;&quot;;
				html += &quot;&lt;td&gt;&quot; + sId + &quot;&lt;/td&gt;&quot;;
				html += &quot;&lt;td&gt;&quot; + sPlatform + &quot;&lt;/td&gt;&quot;;
				html += &quot;&lt;td&gt;&quot; + sType + &quot;&lt;/td&gt;&quot;;
				html += &quot;&lt;/tr&gt;&quot;;
				}
				else
				{*/ 
					/*WA22 JPASTOR */
					var sInvoiceSuspFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;InvoiceSuspFlag&quot;);
					var sInvoiceFreezeFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;InvoiceFreezeFlag&quot;);
					var sFraudFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;FraudFlag&quot;);
					var sCreditRiskFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;CreditRiskFlag&quot;);
					var sManualFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;ManualFlag&quot;);
					sMessage = sMess + &quot;\n\n&quot; + sId + &quot;\t&quot; + sPlatform + &quot;\t&quot; + sType + &quot;\t&quot; + sInvoiceSuspFlagLabel + &quot;\t&quot; + sInvoiceFreezeFlagLabel + &quot;\t&quot; + sFraudFlagLabel + &quot;\t&quot; + sCreditRiskFlagLabel + &quot;\t&quot; + sManualFlagLabel + &quot;\n&quot;;
					sMessage = sMessage + &quot;\n--------\t--------\t--------\t--------\t--------\t--------\t--------\t--------\n&quot;;
//					sMessage = sMessage + &quot;--\t--------\t----\t-----------------\t-------------------\t----------\t----------------\t-----------\n&quot;;
					html += &quot;&lt;tr&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sId + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sPlatform + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sType + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sInvoiceSuspFlagLabel + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sInvoiceFreezeFlagLabel + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sFraudFlagLabel + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sCreditRiskFlagLabel + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;td&gt;&quot; + sManualFlagLabel + &quot;&lt;/td&gt;&quot;;
					html += &quot;&lt;/tr&gt;&quot;;				
				//}
				for ( i=0;i&lt; cnt;i++)
				{
					html += &quot;&lt;tr&gt;&quot;;
					var res = BGInq.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(i);
					var sCustType = res.GetProperty(&quot;RecordFlag&quot;);
					var sCustId = res.GetProperty(&quot;CustomerID&quot;);
					var sCustPlatform = res.GetProperty(&quot;Platform&quot;);
					//var sCustomerID = res.GetProperty(&quot;SIEBEL_CUSTOMER_ID&quot;); //TC-5726 | VFTRCBU Retrofits | TiagoRocha 20.01.2015
					var sCustomerID = res.GetProperty(&quot;SiebelCustomerId&quot;);
					
					/*if(sBGLVersion == &quot;V2&quot;) VFTRCBU-15685
					{*/
						/*WA22 JPASTOR */
						var sInvoiceSuspFlag = res.GetProperty(&quot;InvoiceSuspendFlag&quot;);
						var sInvoiceFreezeFlag = res.GetProperty(&quot;InvoiceFreezeFlag&quot;);
						var sFraudFlag = res.GetProperty(&quot;FraudFlag&quot;);
						var sCreditRiskFlag = res.GetProperty(&quot;CreditRiskFlag&quot;);
						var sManualFlag = res.GetProperty(&quot;ManualFlag&quot;);
					//}
					var sSiebel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;S&quot;);
					var sChannel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;C&quot;);
					var sSblChnl = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;SC&quot;);
					
					var sBusiness = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;C&quot;);
					var sConsumer = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;A&quot;);
					if(sCustPlatform != &quot;&quot;)
					{
						if(sCustPlatform == &quot;S&quot;)
							sCustPlatform = sSiebel;
						else if(sCustPlatform == &quot;I&quot;)
							sCustPlatform = sChannel;
						else
							sCustPlatform = sSblChnl;
					}
					if(sCustType != &quot;&quot;)
					{
						if(sCustType == &quot;C&quot;)
							sCustType = sBusiness;
						else
							sCustType = sConsumer;
					}
					/*if (sBGLVersion == &quot;V1&quot;)
					{
						//sMessage = sMessage + sCustId + &quot;\t&quot; + sCustPlatform + &quot;\t&quot; + sCustType + &quot;\n&quot;; //TC-5726
						sMessage = sMessage + sCustId + &quot;\t&quot; + sCustPlatform + &quot;\t&quot; + sCustType + &quot;\t&quot; + sCustomerID + &quot;\n&quot;; // VFTRCBU Retrofits | TiagoRocha 20.01.2015
						html += &quot;&lt;td&gt;&quot; + sCustId + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sCustPlatform + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sCustType + &quot;&lt;/td&gt;&quot;;
					}
					else
					{*/
					
					//ACAMBAS: VFTRCBU-31883 - Start
					if(sCustId == &quot;&quot;) {
						sCustId	= sCustomerID;
					}
					//ACAMBAS: VFTRCBU-31883 - End
					
						sMessage = sMessage + sCustId + &quot;\t&quot; + sCustPlatform + &quot;\t&quot; + sCustType + &quot;\t&quot; + sInvoiceSuspFlag + &quot;\t&quot; + sInvoiceFreezeFlag + &quot;\t&quot; + sFraudFlag + &quot;\t&quot; + sCreditRiskFlag + &quot;\t&quot; + sManualFlag + &quot;\n&quot;;
						html += &quot;&lt;td&gt;&quot; + sCustId + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sCustPlatform + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sCustType + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sInvoiceSuspFlag + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sInvoiceFreezeFlag + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sFraudFlag + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sCreditRiskFlag + &quot;&lt;/td&gt;&quot;;
						html += &quot;&lt;td&gt;&quot; + sManualFlag + &quot;&lt;/td&gt;&quot;;
					//}
					html += &quot;&lt;/tr&gt;&quot;;
				}
				html += &quot;&lt;/table&gt;&quot;;
				Outputs.SetProperty(&quot;Show SWE&quot;,&quot;No&quot;);
			}
		}
		else
		{
			sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_086&quot;);
			html = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_086&quot;);
			Outputs.SetProperty(&quot;Show SWE&quot;,&quot;Yes&quot;);
		}	
		
		if(fromApplet == &quot;Yes&quot;){
			Outputs.SetProperty(&quot;Message&quot;,html);
		}else{
			Outputs.SetProperty(&quot;Message&quot;,sMessage);
		}
	}
	finally
	{
		res =null;
		BGInq = null;
		pset_Inputs1 = null;
		pset_Outputs1 = null;
		svc1 = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="08/09/2016 00:24:08"
			   UPDATED_BY="SADMIN"
			   CREATED="11/11/2011 19:20:54"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallInterimPaymentWf"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallInterimPaymentWf (Inputs, Outputs)
{
	try
	{
		var bcBA : BusComp;
		var oApp	= TheApplication();
		var boAc	: BusObject = oApp.ActiveBusObject();
		// [Added on 12/09/2011 by kiran][Condition has been added for PRM Application]
		var AppName	=  TheApplication().GetProfileAttr(&quot;ApplicationName&quot;);
		if (AppName == &quot;Siebel eChannel&quot;)
		{
			bcBA=boAc.GetBusComp(&quot;VF PRM Billing Account&quot;);
		}
		else
		{
			bcBA=boAc.GetBusComp(&quot;Billing Account&quot;);
		}
		
		var strBACode=&quot;&quot;;
		var strStart=&quot;&quot;;
		var strEnd=&quot;&quot;;
		if(bcBA!=null)
		{
			with(bcBA)
		 	{
			  	strBACode=GetFieldValue(&quot;Account Code&quot;);
			  	oApp.SetProfileAttr(&quot;IPBillingCode&quot;,strBACode);
	  	}
			var bcIP : BusComp =boAc.GetBusComp(&quot;VF Interim Payment&quot;);
			if(bcIP!=null)
			{
				strEnd=oApp.GetProfileAttr(&quot;IPEndDate&quot;);
				bcIP.ClearToQuery ();
				bcIP.ExecuteQuery(ForwardBackward);
			}
		}
		var strErrMsg= TheApplication().GetProfileAttr(&quot;IntError&quot;);

		if(strErrMsg!=&quot;&quot;)
		{
			with(bcBA)
			{
				var bRecord=FirstRecord();
		         while(bRecord)
		         {
		            if(GetFieldValue(&quot;Account Code&quot;)==strBACode)
		            {
		            	break;
		            }
		            bRecord = NextRecord();
		         }
			}
		}
		/*oApp.SetProfileAttr(&quot;IPStartDate&quot;,&quot;&quot;);
		oApp.SetProfileAttr(&quot;IPEndDate&quot;,&quot;&quot;);
		oApp.SetProfileAttr(&quot;IPBillingCode&quot;,&quot;&quot;);*/		
		return (CancelOperation);	
	}
	finally
	{
		bcIP=null;
		bcBA=null;
		boAc=null;
		oApp=null;
	}	
}"
			   SEQUENCE="7"
			   UPDATED="04/15/2013 19:56:06"
			   UPDATED_BY="SADMIN"
			   CREATED="09/08/2011 10:52:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallMSISDNWF"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallMSISDNWF (Inputs, Outputs)
{
	try
	{
				var strBC			:BusComp;
				var strAccnt		:BusObject	= TheApplication().ActiveBusObject();
				var BillAcct : BusComp;
				if (TheApplication().GetProfileAttr(&quot;ApplicationName&quot;) != &quot;Siebel eChannel&quot;){
				BillAcct= strAccnt.GetBusComp(&quot;Billing Account&quot;);
				var strBillingAccnt	= BillAcct.GetFieldValue(&quot;Account Code&quot;);
				}
				var VFBundle		:BusComp	= strAccnt.GetBusComp(&quot;VF Bundle Inquiry VBC Copy&quot;);
				var sMonth 			= VFBundle.GetFieldValue(&quot;MONTH&quot;);
				var sYear 			= VFBundle.GetFieldValue(&quot;YEAR&quot;);
				var strBundleType 	= VFBundle.GetFieldValue(&quot;BUNDLE PERIOD&quot;);
				var sBilledPeriod 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BUNDLE_TYPE&quot;,&quot;Billed Bundle&quot;);

				if(sMonth &lt; 10)
				sMonth = &quot;0&quot; + sMonth; //PROD00027835
								
				//Added the condition to set PA &quot;paBP&quot;: C_MSP00000393
				if(strBundleType == sBilledPeriod)
					TheApplication().SetProfileAttr(&quot;paBP&quot;,sMonth +&apos;/&apos; + sYear);
				else
					TheApplication().SetProfileAttr(&quot;paBP&quot;, &quot;&quot;);
				
				var strActBC	= Inputs.GetProperty(&quot;ActBC&quot;);
				var strMSISDN = &quot;&quot;;
				if(strActBC == &quot;MSISDN&quot;)
				{
					strBC 	= strAccnt.GetBusComp(&quot;VF MSISDN Inquiry VBC&quot;);
					strMSISDN = strBC.GetFieldValue(&quot;MSISDN&quot;);
					TheApplication().SetProfileAttr(&quot;PAMSISDNBundle&quot;, strMSISDN);
				}
				else
				{
					strBC 	= strAccnt.GetBusComp(&quot;VF MSISDN Based Bundle Inquiry VBC&quot;);
				}				
				
				if(strBC!=null)	
				{
					with(strBC)
					{
						ClearToQuery();
					    ExecuteQuery(ForwardBackward);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed
					}
				}
				var strErr = TheApplication().GetProfileAttr(&quot;MSISDNError&quot;);
				if(strErr != &quot;&quot; &amp;&amp;  strErr!= null &amp;&amp; strBillingAccnt != &quot;&quot; &amp;&amp; strBillingAccnt != null) // Review Input validation: Scripting 15 null check Added 4/24/2012 Udbhav IDC

				{
					with(BillAcct)
					{
						ClearToQuery();
						SetSearchSpec(&quot;Account Code&quot;,strBillingAccnt);
						ExecuteQuery(ForwardBackward);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed
					}
				}
		return (CancelOperation);	
			
	}
	finally
	{
		strBC	= null;
		BillAcct = null;
		VFBundle = null;
		strAccnt = null;
	}	
}"
			   SEQUENCE="8"
			   UPDATED="04/12/2013 10:51:41"
			   UPDATED_BY="SADMIN"
			   CREATED="07/26/2011 18:44:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallUpdateBGList"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallUpdateBGList (Inputs, Outputs)
{
	try
	{
			var strAccnt  	: BusObject 	= TheApplication().GetBusObject(&quot;Account&quot;);
			var strAccntBC	: BusComp	= strAccnt.GetBusComp(&quot;Account HP&quot;);
			var AssetBO 	: BusObject	= TheApplication().GetBusObject(&quot;Asset Management&quot;);
			var AssetBC 	: BusComp	= AssetBO.GetBusComp(&quot;Asset Mgmt - Asset - Header Light&quot;);
			var strReason 	= Inputs.GetProperty(&quot;strReason&quot;);
			var strMSISDN 	= Inputs.GetProperty(&quot;strMSISDN&quot;);
			var strTCId 	= Inputs.GetProperty(&quot;strTCId&quot;);
			var strCCNum 	= Inputs.GetProperty(&quot;strCCNum&quot;);
			var strDesc		= Inputs.GetProperty(&quot;strDesc&quot;);
			var strInstallDate = &quot;&quot;;
			with(strAccntBC)
			{
				SetViewMode(AllView);
				ClearToQuery();
				if(strCCNum != &quot;&quot;)
				{
					SetSearchSpec(&quot;Account Number&quot;, strCCNum);
					ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no other BC called for this BO, so query cannot be removed
					if(FirstRecord())
					{
						var strPrContId = strAccntBC.GetFieldValue(&quot;Primary Contact Id&quot;);	
					}
				}	
			}			
			if (strMSISDN != &quot;&quot;)
			{
					
				var strActiveStat = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);
				with(AssetBC)
				{
					ActivateField(&quot;Install Date&quot;);
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchSpec(&quot;VF MSISDN&quot;, strMSISDN);
					SetSearchSpec(&quot;Status&quot;, strActiveStat);
					ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no other BC called for this BO, so query cannot be removed
					if(FirstRecord())
					{
							strInstallDate = GetFieldValue(&quot;Install Date&quot;);
					}
				}
			}
			
			var wrkflwBS 	:Service		= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
			var strInputs 	:PropertySet	= TheApplication().NewPropertySet();
			var strOutputs 	:PropertySet	= TheApplication().NewPropertySet();
			
			strInputs.SetProperty(&quot;ProcessName&quot;, &quot;VF CepAran BG Update Workflow&quot;);
			strInputs.SetProperty(&quot;MSISDN&quot;, strMSISDN);
			if(TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;)==&quot;VF Cep Aran Black List View&quot;)
			{
				strInputs.SetProperty(&quot;LIST_TYPE&quot;,3);
			}
			else
			{
				strInputs.SetProperty(&quot;LIST_TYPE&quot;,2);
			}	
			strInputs.SetProperty(&quot;Action&quot;, &quot;Remove&quot;);
			strInputs.SetProperty(&quot;REASON&quot;, strReason);		
			strInputs.SetProperty(&quot;DESCRIPTION&quot;,strDesc);
			strInputs.SetProperty(&quot;START_DATE&quot;, strInstallDate);
			strInputs.SetProperty(&quot;SIEBEL_CUSTOMER_ID&quot;, strCCNum);
			strInputs.SetProperty(&quot;Primary Contact Id&quot;, strPrContId);
			wrkflwBS.InvokeMethod(&quot;RunProcess&quot;, strInputs, strOutputs);
			
			var strstatusCode = strOutputs.GetProperty(&quot;StatusCode&quot;);
			var strErrorCode = strOutputs.GetProperty(&quot;Error Code&quot;);
	     	var strErrorDesc = strOutputs.GetProperty(&quot;Error Message&quot;);
	     	var strErrorSuccess = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_UPDT_CODE&quot;,&quot;VFTK-BLGLUPD-0000&quot;);
	     	if(strErrorCode == strErrorSuccess)
	     	{
		     	var strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_049&quot;);		     	
	     	}
	     	else
	     	{
	     		var strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_050&quot;);
	     	}
			Outputs.SetProperty(&quot;OutPut&quot;, strMsg);
			Outputs.SetProperty(&quot;Status Code&quot;,strstatusCode);			
	}
	finally
	{
		strAccntBC = null;
		strAccnt = null;
		AssetBC	= null;
		AssetBO	= null;
		wrkflwBS = null;	
		strInputs = null;
		strOutputs = null;
	}	
}"
			   SEQUENCE="9"
			   UPDATED="07/04/2012 17:35:58"
			   UPDATED_BY="SADMIN"
			   CREATED="09/21/2011 13:00:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ChangeDateToEAI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ChangeDateToEAI (Inputs, Outputs)
{
	try
	{
		var psInputs   : PropertySet = TheApplication().NewPropertySet ();
		var psOutputs  : PropertySet = TheApplication().NewPropertySet ();
		var psInputs1  : PropertySet = TheApplication().NewPropertySet ();
		var psOutputs1 : PropertySet = TheApplication().NewPropertySet ();
		
		var intChildCount = 0;
		var intCounter    = 0;
		
		psInputs  = Inputs.GetChild (0);
		psOutputs = Inputs.GetChild (0);
		
		intChildCount = psInputs.GetChildCount();
		for (intCounter = 0; intCounter &lt; intChildCount; intCounter++)
		{
			psInputs1 = psInputs.GetChild (intCounter);
			psOutputs.RemoveChild (intCounter);
			ChangeDateToEAI (psInputs1, psOutputs1);
			psOutputs.AddChild (psOutputs1);
		}
	}
	/*catch (e)// 11/03/2013 VF TR - Exception errors for Oracle Review
	{
	}*/
	finally
	{
		Outputs.AddChild (psOutputs);
		psInputs	= null;
		psOutputs  = null;
		psInputs1  = null;
		psOutputs1 = null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="03/13/2013 20:14:21"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCreateModifyOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCreateModifyOrder (Inputs, Outputs)
{
	/************************************************************************************
	* ACS AD 07-Mar-07 : Created                                                        *
	* Description      : The script will check if a modify order can be created for the *
	*                    and return a flag indicating this. This script is used in all  *
	*                    the asset applets present in the customer portal view, as well *
	*                    as in all web service event that create modification orders.   *
	************************************************************************************/
	try
	{
		var strAssetId        = Inputs.GetProperty (&quot;Asset Id&quot;);
		var strAssetSrcExpr   = &quot;[Id] = &apos;&quot;+strAssetId+&quot;&apos;&quot;;
		var strOrderLiSrcExpr = &quot;&quot;;
		var strIntegrationId  = &quot;&quot;;
		var strOrdItemStatus  = &quot;&quot;;	
		var booRecordExists;	
		var boAsset : BusObject = TheApplication ().GetBusObject (&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp = boAsset.GetBusComp (&quot;TELCO Asset - Simple&quot;);	
		var boOrderLineItems : BusObject = TheApplication ().GetBusObject (&quot;TELCO Order Item - Simple&quot;);
		var bcOrderLineItems : BusComp = boOrderLineItems.GetBusComp (&quot;TELCO Line Items - Simple&quot;);
		
		if (strAssetId.length &gt; 0)
		{
			bcAsset.ClearToQuery ();
			bcAsset.SetViewMode (AllView);
			bcAsset.ActivateField (&quot;Integration Id&quot;);
			
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strAssetId&quot;,strAssetId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			bcAsset.SetSearchExpr (strAssetSrcExpr);
			bcAsset.ExecuteQuery(ForwardOnly);
			
			if (bcAsset.FirstRecord ())
			{
				strIntegrationId = bcAsset.GetFieldValue (&quot;Integration Id&quot;);
				
				strOrderLiSrcExpr = &quot;[Asset Integration Id] = &apos;&quot;+strIntegrationId+&quot;&apos;&quot;;
				
				bcOrderLineItems.ClearToQuery ();
				bcOrderLineItems.SetViewMode (AllView);
				bcOrderLineItems.ActivateField (&quot;Asset Integration Id&quot;);
				bcOrderLineItems.ActivateField (&quot;Status&quot;);
				bcOrderLineItems.SetSearchExpr (strOrderLiSrcExpr);
				bcOrderLineItems.ExecuteQuery(ForwardOnly);//VFTK Venkata 16/05/2012 Scripting31: No changes since querys based on different BO&apos;s
				
				booRecordExists = bcOrderLineItems.FirstRecord ();
				
				while (booRecordExists)
				{
					strOrdItemStatus = bcOrderLineItems.GetFieldValue (&quot;Status&quot;);
					
					if (strOrdItemStatus == &quot;Open&quot; || strOrdItemStatus == &quot;In-transit&quot; || strOrdItemStatus == &quot;Installed&quot;)
					{
						Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;N&quot;);
						break;
					}
					else
					{
						Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;Y&quot;);
					}
					booRecordExists = bcOrderLineItems.NextRecord ();
				}
			}
			else
			{
				TheApplication ().RaiseErrorText (&quot;The Asset Id is blank&quot;);
			}
		}
		else
		{
			TheApplication ().RaiseErrorText (&quot;Asset Id &quot;+strAssetId+&quot; is not valid&quot;);
		}
		
		if (Outputs.GetProperty (&quot;CreateModifyFlag&quot;) == &quot;&quot;)
		{
			Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;Y&quot;);
		}
	}
	catch (e)
	{
		Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;N&quot;);
		throw e;
	}
	finally
	{
		bcAsset           = null;
		bcOrderLineItems  = null;
		inProp 			  = null;
		outProp			  = null;
		BS				  = null;
		boOrderLineItems  = null;
		boAsset           = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDealerConf"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckDealerConf (Inputs, Outputs)
{
	try 
	{
		var OrderId	   = Inputs.GetProperty(&quot;SearchExpr&quot;);
		var strOrderSrcExpr = &quot;[Order Id] = &apos;&quot;+OrderId+&quot;&apos;&quot;;	  
		var boOrder    : BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
		var bcOrder    : BusComp = boOrder.GetBusComp (&quot;HP Submit - Order Entry - Orders&quot;);  
		
		var strpending	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);
		var	strMessageCategory 	= &quot;&quot;;
		var strCode				= &quot;&quot;;
		var	sMsg				= &quot;&quot;;
		var boName = &quot;Order Entry (Sales)&quot;;
		var bcName = &quot;Order Entry - Orders&quot;;
		var result = &quot;KO&quot;;

		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		var bsRefreshComp : Service = TheApplication().GetService(&quot;SIS OM PMT Service&quot;);  
		var psInputs   : PropertySet = TheApplication().NewPropertySet();
		var psOutputs  : PropertySet = TheApplication().NewPropertySet();
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Status&quot;);
		bcOrder.ActivateField(&quot;Dealer Confirmation&quot;);
	    bcOrder.SetSearchExpr (strOrderSrcExpr);
		bcOrder.ExecuteQuery(ForwardOnly);
		var Continue=bcOrder.FirstRecord(); 
		
		if (Continue)
	 	{
	 		var OrderStatus = bcOrder.GetFieldValue(&quot;Status&quot;);
	 		if (OrderStatus == strpending)
	 		{
		 		var DealerFlag = bcOrder.GetFieldValue(&quot;Dealer Confirmation&quot;);
		 		if (DealerFlag == &quot;&quot;)
		 		{
		 			result = &quot;OK&quot; ;
		 		}
		 	}
		}
		Outputs.SetProperty(&quot;Result&quot;,result);	
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
	}
	finally
	{
		bcOrder = null ;
		boOrder = null ;
		bsRefreshComp = null;
		psInputs   = null;
		psOutputs	= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}	
}"
			   SEQUENCE="12"
			   UPDATED="09/03/2012 17:43:43"
			   UPDATED_BY="SADMIN"
			   CREATED="10/14/2011 17:57:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDuplicateOldNewSubStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/********************************************************************************************************
NAME:          CheckDuplicateOldNewSubStatus
DESCRIPTION:   This method allows to check duplicate old &amp; new sub status
RETURNS:       Counter
AUTHOR:        Baran Bozoglu 
DATE CREATED:  12/30/2011
UPDATES:                            
*********************************************************************************************************/
function CheckDuplicateOldNewSubStatus(Inputs,Outputs)
{
     try
     {
        var oAppObj    = TheApplication();
        var counter      = 0;
        var strSearchExpr   = Inputs.GetProperty(&quot;strSearchExpr&quot;);

        var strBusObject  :BusObject	= oAppObj.GetBusObject(&quot;ACS SR Tripplet&quot;);
        var strCurBusComp :BusComp	= strBusObject.GetBusComp(&quot;VF SR Status Change&quot;);
        var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);                             
          with(strCurBusComp)
          {
               ClearToQuery();
               SetViewMode(AllView);//VFTK Venkata 19/04/2012 Added as per Oracle review
               // Begin: Scripting 15 null check Added 25may2012 Udbhav IDC
				inProp.SetProperty(&quot;strSearchExpr&quot;,strSearchExpr);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				//End
               SetSearchExpr(strSearchExpr);
               counter = CountRecords();
          }
          Outputs.SetProperty(&quot;Counter&quot;,counter);//VFTK Venkata 19/04/2012 CountRecords() used for some purpose so didn&apos;t removed
     }
     finally
     {
        strCurBusComp = null;
        strBusObject  = null;
        oAppObj       = null; 
        inProp 	= null;
		outProp = null;
		BS 		= null;                  
     }             
}"
			   SEQUENCE="13"
			   UPDATED="09/03/2012 17:43:43"
			   UPDATED_BY="SADMIN"
			   CREATED="04/05/2012 12:12:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="ACS MC R1.3 20100524 - Newly Created for GIB Requirement."
			   INACTIVE="N"
			   NAME="CheckGIBFields"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckGIBFields (Inputs, Outputs)
{
	/******************************************************************************
	* ACS  14-JULY-10 :	 Created by Mamta                                                 
	* Description     :  This script is used for to call GIB Verification Automatically
	*					 
    *				     
	******************************************************************************/
	try
	{
		var strAccountId       = Inputs.GetProperty(&quot;Account Id&quot;);
		var str_CompType =&quot;&quot;;
		var boAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAccount : BusComp = boAccount.GetBusComp(&quot;Account&quot;);
		var svc_ACSNIGeneralOperations : Service;
		var pset_Inputs2  : PropertySet;
		var pset_Outputs2 : PropertySet;
		var svc_WorkflowProcMgr : Service;
		var pset_Inputs  : PropertySet;
		var pset_Outputs : PropertySet;
		var svc_WorkflowProcMgr1 : Service;
		var pset_Inputs1  : PropertySet;
		var pset_Outputs1 : PropertySet;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strAccountId&quot;,strAccountId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with(bcAccount)
		{
			ActivateField(&quot;VF GIB Ver Status&quot;);
			ActivateField(&quot;VF GIB Down Calc&quot;);
			ActivateField(&quot;VF GIB Lang Calc&quot;);
			ActivateField(&quot;VF GIB Individual Calc&quot;);
			ActivateField(&quot;VF GIB Corporate Calc&quot;);
			ActivateField(&quot;VF GIB Unver Status Calc&quot;);
			ActivateField(&quot;VF GIB Status Code&quot;);
			ActivateField(&quot;VF GIB Ver Status Calc&quot;);
			ActivateField(&quot;VF GIB Appr Status Calc&quot;);
			ActivateField(&quot;VF GIB Status Calc&quot;);
			ActivateField(&quot;VF GIB Reg Number&quot;);
			ActivateField(&quot;VF GIB Last Ver Date&quot;);
			ActivateField(&quot;VF Acquired Status&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Id&quot;, strAccountId);
			ExecuteQuery(ForwardOnly);
            if(FirstRecord())
			{
					var strGIBDown = GetFieldValue(&quot;VF GIB Down Calc&quot;);
					var lang = GetFieldValue(&quot;VF GIB Lang Calc&quot;);
					var strIndividual = GetFieldValue(&quot;VF GIB Individual Calc&quot;);
					var strCorporate =  GetFieldValue(&quot;VF GIB Corporate Calc&quot;);							
					svc_ACSNIGeneralOperations = TheApplication().GetService (&quot;ACS NI General Operations&quot;);
					pset_Inputs2  = TheApplication().NewPropertySet();
					pset_Outputs2 = TheApplication().NewPropertySet();
					var strTaxOffice = TheApplication().GetProfileAttr(&quot;strTaxOffice&quot;);
					var strTitle = TheApplication().GetProfileAttr(&quot;strTitle&quot;);
					var strFlag = GetFieldValue(&quot;Flag PF&quot;);
					var strTaxId = TheApplication().GetProfileAttr(&quot;strTaxId&quot;);
					var status = GetFieldValue(&quot;VF GIB Status Calc&quot;);
					var strGIBStat = GetFieldValue(&quot;VF GIB Ver Status&quot;);
					var strGIBVerDown = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerifiedDown&quot;);
					var strGIBApprDown = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBApprovedDown&quot;);
					if(strTaxId==&quot;&quot;)
					{
						strTaxId=GetFieldValue(&quot;VF Tax Number&quot;);
					}																							
					
					if(strTitle==&quot;&quot;)
					{							
						strTitle=GetFieldValue(&quot;Name&quot;);
					}
					
					if(strTaxOffice==&quot;&quot;)
					{							
						strTaxOffice=GetFieldValue(&quot;VF Tax Office&quot;);
					}						
					svc_WorkflowProcMgr = TheApplication().GetService (&quot;Workflow Process Manager&quot;);
					pset_Inputs  = TheApplication().NewPropertySet();
					pset_Outputs = TheApplication().NewPropertySet();
					pset_Inputs.SetProperty(&quot;Account Id&quot;, strAccountId);
					pset_Inputs.SetProperty(&quot;InquiryType&quot;,&quot;Undetailed&quot;);				
					pset_Inputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Verify GIB Data&quot;);
					svc_WorkflowProcMgr.InvokeMethod(&quot;RunProcess&quot;, pset_Inputs,pset_Outputs);
					
					var pset_SiebelMessage = TheApplication().NewPropertySet();
					pset_SiebelMessage = pset_Outputs.GetChild(0);
					
					var str_TaxName       = pset_Outputs.GetProperty(&quot;TAX_OFFICE_NAME&quot;);
					var str_CompanyTitle  = pset_Outputs.GetProperty(&quot;DOD_TITLE&quot;);
					var str_TaxId    = pset_Outputs.GetProperty(&quot;TAX_NO&quot;);
					var str_CompTypeOut    = pset_Outputs.GetProperty(&quot;COMPANY_TYPE&quot;);
					if(str_CompTypeOut==&quot;1&quot;)
					{				  
					  str_CompType =&quot;Y&quot;;
					  str_CompTypeOut = strIndividual;
					}
					else if(str_CompTypeOut!=&quot;1&quot;)
					{			
						str_CompType=&quot;N&quot;;
						str_CompTypeOut = strCorporate;
					}
					var str_StatusCode    = pset_Outputs.GetProperty(&quot;VF GIB Status Code&quot;);
					var str_GIB_VerStatus = GetFieldValue(&quot;VF GIB Ver Status Calc&quot;);
					var str_GIB_AppStatus = GetFieldValue(&quot;VF GIB Appr Status Calc&quot;);
					var str_GIB_UnVerStatus = GetFieldValue(&quot;VF GIB Unver Status Calc&quot;);
					
					var strTAXOFF = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;151&quot;);								
					var strTITLE =  TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;152&quot;);
					var strTaxID =  TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;168&quot;);
					var strCompType =  TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;169&quot;);
					var strOK = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;153&quot;);				
					var str_Message=&quot;&quot;;
					//Scenario A2.B GIB does not retrieve error
					if(str_StatusCode == &quot;0&quot;)
					{
						//Scenario A2.B.2
						if((str_TaxId!=strTaxId)||(str_TaxName != strTaxOffice)||(str_CompanyTitle != strTitle)||(str_CompType!=strFlag))
						{
							str_Message = strTAXOFF+str_TaxName+&quot;\n&quot;+strTITLE+str_CompanyTitle+&quot;\n&quot;+strTaxID+str_TaxId+&quot;\n&quot;+strCompType+str_CompTypeOut+&quot;\n&quot;+strOK;
							//Scenario A2.B.2.1
							if((status==&quot;Y&quot;)||(strGIBStat==strGIBVerDown)||(strGIBStat==strGIBApprDown))
							{
								Outputs.SetProperty(&quot;Result&quot;,&quot;OK&quot;);
							}//Scenario A2.B.2.1
							//Scenario A2.B.2.2a
						 	else
							{
								TheApplication().SetProfileAttr(&quot;VF Modified Cust&quot;,&quot;Y&quot;);
								var svc_WorkflowProcMgr1 = TheApplication().GetService (&quot;Workflow Process Manager&quot;);
								var pset_Inputs1  = TheApplication().NewPropertySet();
								var pset_Outputs1 = TheApplication().NewPropertySet();							
								pset_Inputs1.SetProperty(&quot;Account Id&quot;, strAccountId);
								pset_Inputs1.AddChild(pset_SiebelMessage);
								pset_Inputs1.SetProperty(&quot;ProcessName&quot;, &quot;VF Response GIB Data Workflow&quot;);					
								svc_WorkflowProcMgr.InvokeMethod(&quot;RunProcess&quot;, pset_Inputs1,pset_Outputs1);
								var strIsActiveGIB = pset_Outputs1.GetProperty(&quot;IS_ACTIVE&quot;);
								var strRegNo =  pset_Outputs1.GetProperty(&quot;Registration No&quot;);
								TheApplication().SetProfileAttr(&quot;Result&quot;,&quot;KO&quot;);
								TheApplication().SetProfileAttr(&quot;Message&quot;,str_Message);
								TheApplication().SetProfileAttr(&quot;strIsActiveGIB&quot;,strIsActiveGIB);
								TheApplication().SetProfileAttr(&quot;strRegNo&quot;,strRegNo);
								TheApplication().SetProfileAttr(&quot;str_TaxName&quot;,str_TaxName);
								TheApplication().SetProfileAttr(&quot;strGIBTaxId&quot;,str_TaxId);
								TheApplication().SetProfileAttr(&quot;str_CompanyTitle&quot;,str_CompanyTitle);
								TheApplication().SetProfileAttr(&quot;str_CompType&quot;,str_CompType);
								var Admin = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;155&quot;);
								TheApplication().SetProfileAttr(&quot;Admin&quot;,Admin);
							}
							//Scenario A2.B.2.2a					
						}//TaxOfficeMismatches
						else //TaxOfficeMatches	
						{								
					   	 	TheApplication().SetProfileAttr(&quot;VF Modified Cust&quot;,&quot;Y&quot;);
							TheApplication().SetProfileAttr(&quot;Result&quot;,&quot;GIBMatches&quot;);																
							var svc_WorkflowProcMgr1 = TheApplication().GetService (&quot;Workflow Process Manager&quot;);
							var pset_Inputs1  = TheApplication().NewPropertySet();
							var pset_Outputs1 = TheApplication().NewPropertySet();							
							pset_Inputs1.SetProperty(&quot;Account Id&quot;, strAccountId);
							pset_Inputs1.AddChild(pset_SiebelMessage);
							pset_Inputs1.SetProperty(&quot;ProcessName&quot;, &quot;VF Response GIB Data Workflow&quot;);					
							svc_WorkflowProcMgr.InvokeMethod(&quot;RunProcess&quot;, pset_Inputs1,pset_Outputs1);
							var strIsActiveGIB = pset_Outputs1.GetProperty(&quot;IS_ACTIVE&quot;);
							TheApplication().SetProfileAttr(&quot;strIsActiveGIB&quot;,strIsActiveGIB);
							var strRegNo =  pset_Outputs1.GetProperty(&quot;Registration No&quot;);						
							TheApplication().SetProfileAttr(&quot;strRegNo&quot;,strRegNo);
						}									 															
					}//StatusCode=0
					else if(str_StatusCode == &quot;1&quot;)  //StatusCode=1
					{
						var svc_WorkflowProcMgr1 = TheApplication().GetService (&quot;Workflow Process Manager&quot;);
						var pset_Inputs1  = TheApplication().NewPropertySet();
						var pset_Outputs1 = TheApplication().NewPropertySet();							
						pset_Inputs1.SetProperty(&quot;Account Id&quot;, strAccountId);
						pset_Inputs1.AddChild(pset_SiebelMessage);
						pset_Inputs1.SetProperty(&quot;ProcessName&quot;, &quot;VF Response GIB Data Workflow&quot;);					
						svc_WorkflowProcMgr.InvokeMethod(&quot;RunProcess&quot;, pset_Inputs1,pset_Outputs1);
						if((status==&quot;Y&quot;)||(strGIBStat==strGIBVerDown)||(strGIBStat==strGIBApprDown))
						{
							Outputs.SetProperty(&quot;Result&quot;,&quot;OK&quot;);			
						}					
						else
						{
							TheApplication().SetProfileAttr(&quot;VF Modified Cust&quot;,&quot;Y&quot;);
							Outputs.SetProperty(&quot;Result&quot;,&quot;YES&quot;);					
						}			
					}//StatusCode=1					
				}//Record Found		
			}			
		return(CancelOperation);
	}		
	finally
	{	
		bcAccount 		= null;
		inProp 			= null;
		outProp	 		= null;
		BS		 		= null;
		svc_ACSNIGeneralOperations = null;
		pset_Inputs2  	= null;
		pset_Outputs2 	= null;
		svc_WorkflowProcMgr = null;
		pset_Inputs  	= null;
		pset_Outputs 	= null;
		pset_SiebelMessage = null;
		svc_WorkflowProcMgr1 = null;
		pset_Inputs1 	= null;
		pset_Outputs1 	= null;
		boAccount 		= null;		
	}
}"
			   SEQUENCE="14"
			   UPDATED="09/03/2012 17:43:43"
			   UPDATED_BY="SADMIN"
			   CREATED="07/22/2010 08:53:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLIWithoutContact"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLIWithoutContact(Inputs, Outputs)
{
	try
	{
		//Check for any LI withour any contact associated
		var lsOrderId 		= Inputs.GetProperty(&quot;OrderId&quot;);
		var loOrderBO		: BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		//var BcOrder			:BusComp = loOrderBO.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var loLineItemBC	: BusComp = loOrderBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;lsOrderId&quot;,lsOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		
		//with(BcOrder)
		//{
		//	ClearToQuery();
		//	SetViewMode(AllView);
		//	SetSearchSpec(&quot;Id&quot;,lsOrderId);
		//	ExecuteQuery(ForwardOnly);
		//	if(FirstRecord())
		//	{
				with(loLineItemBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					var lsSearchExpr = &quot;[Parent Order Item Id] IS NULL AND [Contact Last Name] IS NULL AND [Order Header Id] = &apos;&quot;+lsOrderId+&quot;&apos;&quot;;
					SetSearchExpr(lsSearchExpr);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
						Outputs.SetProperty(&quot;LIExists&quot;, &quot;Y&quot;);
					else
						Outputs.SetProperty(&quot;LIExists&quot;, &quot;N&quot;);			
				}
		//	}
		//}
	}
	finally
	{
		//BcOrder = null;
		loLineItemBC	= null;
		loOrderBO		= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="12/28/2011 19:21:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLastSubscription"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLastSubscription(Inputs, Outputs)
{
	try
	{	
		var boAccount 	:BusObject;
		var boBillAccnt :BusObject;
		var boOrderEntryLineItems : BusObject;
		var AssetBC 	:BusComp; 
		var bcBillAccnt :BusComp;
		var bcIntPay 	:BusComp;
		var bcOrderEntryLineItems :BusComp;
		var bcComInv 	:BusComp;
		
		// &lt;TLG-3410&gt;
		var boOrder 	:BusObject;
		var bcOrder 	:BusComp;
		// &lt;/TLG-3410&gt;
		
		var Appl 				=  TheApplication();
		var orderId 			= Inputs.GetProperty(&quot;OrderId&quot;);
		var strMessageCategory 	= &quot;VF Message Category&quot;;
		var Msg2 				= Appl.LookupMessage(strMessageCategory, &quot;R21_101&quot;);
		boOrderEntryLineItems 	= Appl.GetBusObject(&quot;X Order Entry&quot;);
		AssetBC     			= boOrderEntryLineItems.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		bcOrderEntryLineItems 	= boOrderEntryLineItems.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		boBillAccnt 			= Appl.GetBusObject(&quot;Billing Account&quot;);
		boAccount 				= Appl.GetBusObject(&quot;Account&quot;);
		bcBillAccnt				= boBillAccnt.GetBusComp(&quot;Billing Account&quot;);
		bcIntPay				= boBillAccnt.GetBusComp(&quot;VF Interim Payment&quot;);
		bcComInv 				= boAccount.GetBusComp(&quot;Com Invoice Profile&quot;);
		
		// &lt;TLG-3410&gt;
		boOrder 				= Appl.GetBusObject(&quot;X Order Entry&quot;);
		bcOrder 				= boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var strSubmitting	 	= Appl.InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submitting&quot;);
		var strSubmitPending 	= Appl.InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submitted-Pending&quot;);
		var strInTransit 		= Appl.InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;In-transit&quot;);
		var strOpen 			= Appl.InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Open&quot;);
  	  	var orderSubType 		= Appl.InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;116&quot;); // Suspend-Voluntary
		// &lt;/TLG-3410&gt;
		
		var ActiveStatus 		= Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var Cnt 		= 0; 
		var Today 		= new Date();
		var Today1 		= new Date();
		var CurrentOLI 	= &quot;&quot;;
		var BillId 		= &quot;&quot;;
		var BillCode 	= &quot;&quot;;
		var BillCycle 	= &quot;&quot;;
		var BillCycleDate = &quot;&quot;;
		var BillCycleMonth = &quot;&quot;;
		var BillCycleYear = &quot;&quot;;
		var NextDay 	= &quot;&quot;;
		var DueDate 	= &quot;&quot;;
		var CutOffDate	= &quot;&quot;;
		var CutOffMonth = &quot;&quot;;
		var CutOffYear  = &quot;&quot;;
		var AccId		= &quot;&quot;;
		var enter		= false;
		with(bcOrderEntryLineItems)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Billing Account Id&quot;);
			ActivateField(&quot;Owner Account Id&quot;);
			var Expr = &quot;[Order Header Id] = &apos;&quot;+orderId+&quot;&apos; AND ([Part Number] = &apos;1000&apos; OR [Part Number] = &apos;50000&apos; OR [Part Number] = &apos;70000&apos;)&quot;; //VFTRCBU-28739 - RPIRES: added 70000
			SetSearchExpr(Expr);// Review Input validation: Scripting 15 null check not required as mandatory in BS Method Argument 4/24/2012 Udbhav IDC
			ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed
			CurrentOLI = FirstRecord();
			if(CurrentOLI)
			{
				BillId  = GetFieldValue(&quot;Billing Account Id&quot;);
				AccId	= GetFieldValue(&quot;Owner Account Id&quot;);
			}
		}
		if(BillId != &quot;&quot; &amp;&amp; BillId != null &amp;&amp; AccId != &quot;&quot; &amp;&amp; AccId != null) // Review Input validation: Scripting 15 null check added 4/24/2012 Udbhav IDC
		{
			with(AssetBC)
			{
		         SetViewMode(AllView);
		         ClearToQuery();
		         SetSearchExpr(&quot;[Billing Account Id] =  &apos;&quot;+BillId+&quot;&apos;  AND [Owner Account Id] = &apos;&quot;+AccId+&quot;&apos; AND ([Product Part Number] = &apos;1000&apos; OR [Product Part Number] = &apos;50000&apos; OR [Product Part Number] = &apos;70000&apos;) AND [Status] =&apos;&quot;+ActiveStatus+&quot;&apos;&quot;); //VFTRCBU-28739 - RPIRES: added 70000
		         //ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed
		         //if(FirstRecord())//Removed CountRecords() and added FirstRecord() check instead
		         	//enter = true;
		         ExecuteQuery(ForwardBackward);	
				 var sCount = CountRecords();
				 //if (sCount &lt;= 1)
				 	//enter = true;
				 
				// &lt;TLG-3410&gt;
				with(bcOrder)
				{
					ClearToQuery();
					SetViewMode(AllView);
					//var strOpenStatus = &quot;([Status] = &apos;&quot; + strSubmitPending + &quot;&apos; OR [Status] = &apos;&quot; + strInTransit + &quot;&apos; OR [Status] = &apos;&quot; + strOpen +  &quot;&apos;)&quot;;
					var strOpenStatus = &quot;([Status] = &apos;&quot; + strSubmitting + &quot;&apos; OR [Status] = &apos;&quot; + strOpen +  &quot;&apos;)&quot;;
					SetSearchExpr(strOpenStatus + &quot; AND [Billing Account Id] = &apos;&quot; + BillId + &quot;&apos; AND [Order Sub Type] = &apos;&quot; + orderSubType + &quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					var openOrderCount = CountRecords();
					if (sCount - openOrderCount &lt;= 1)
						enter = true;
				}
				// &lt;/TLG-3410&gt;
			}
		}
		if(enter)
		{
			with(bcBillAccnt)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;VF Bill Cycle&quot;);
				SetSearchSpec(&quot;Id&quot;,BillId);//Review Input validation: Scripting 15 null check not added as checked above 4/24/2012 Udbhav IDC
				ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed
				if(FirstRecord())
				{
					BillCycle = GetFieldValue(&quot;VF Bill Cycle&quot;);
					BillCode = GetFieldValue(&quot;Account Code&quot;);
				}
			}	
	
			var Message1=&quot;&quot;;
			var Message2=&quot;&quot;;
			var Message3=&quot;&quot;;
			var Message4=&quot;&quot;;
			var MessageNote=&quot;&quot;;// DD TLGA-3952
			var FinalMsg=&quot;&quot;;
			if(BillCode != &quot;&quot;) // Review Input validation: Scripting 15 null check added 4/24/2012 Udbhav IDC
			{
				with(bcIntPay)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;BILLING_ACCOUNT_NUM&quot;);
					ActivateField(&quot;PAYMENT_STATUS_DESC&quot;);
					ActivateField(&quot;VF Unpaid&quot;);
					ActivateField(&quot;VF CutOff&quot;);
					SetSearchSpec(&quot;BILLING_ACCOUNT_NUM&quot;,BillCode);
					Appl.SetProfileAttr(&quot;IntPayStartEndDate&quot;,&quot;Y&quot;);
					ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no link between the BC’s in BO, so Child query cannot be removed
					var InvProf = FirstRecord();
					/*//Message 1
					if(InvProf)
					{
						var sCutOffDate =GetFieldValue(&quot;INVOICE_CREATION_DATE&quot;);
						if(sCutOffDate!=&quot;&quot;)
						{
							//Clib.strftime(CutOffDate,&quot;%B %Y&quot;, new Date(sCutOffDate));
							var dtInv = new Date(sCutOffDate);
							Clib.strftime(CutOffDate,&quot;%B&quot;, dtInv);
							CutOffMonth	= Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,CutOffDate);
							Clib.strftime(CutOffYear,&quot;%Y&quot;, dtInv);
							Message1 = Appl.LookupMessage(strMessageCategory, &quot;R21_098&quot;,CutOffMonth,CutOffYear);			
						}
						else
						{
							var month = Today.getMonth();
							if(month == 11)
								Today.setFullYear(Today.getFullYear()+1, month+1, Today.getDay())
							else
								Today.setMonth(month+1,Today.getDay());
							
							var dtBillCycle = new Date(Today);
							Clib.strftime(BillCycleDate,&quot;%B&quot;, dtBillCycle);
							BillCycleMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,BillCycleDate);
							Clib.strftime(BillCycleYear,&quot;%Y&quot;, dtBillCycle);
							Message1 = Appl.LookupMessage(strMessageCategory, &quot;R21_098&quot;,BillCycleMonth,BillCycleYear);
						}
					}
					*/
					while(InvProf)
					{
					var sDueAmt = GetFieldValue(&quot;INVOICE_DUE_AMOUNT&quot;);
					var sDueDate = GetFieldValue(&quot;INVOICE_DUE_DATE&quot;);
					var sCutOffDt = GetFieldValue(&quot;INVOICE_CUTOFF_DATE&quot;);
					var sDueMonth = &quot;&quot;;
					var sDueYear = &quot;&quot;;
					var Unpaid  = GetFieldValue(&quot;VF Unpaid&quot;);
	
					var sPayment =GetFieldValue(&quot;PAYMENT_STATUS_DESC_CALC&quot;);
					var sLOVPay= Appl.InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PAYMENT_STATUS_DESC&quot;, &quot;Unpaid&quot;);
					//Message 1 DD 
					var sCutoffDate= GetFieldValue(&quot;VF CutOff&quot;);
					Today = new Date();
					//if(sCutoffDate == &quot;Y&quot; &amp;&amp; sDueAmt!=&quot;&quot;)
					//{
						var TodayDate = Today.getDate();
						if (BillCycle == 1 &amp;&amp; TodayDate == BillCycle)
						{
							Today.setMonth(Today.getMonth()-1);
							var dtBillCycle = new Date(Today);
							Clib.strftime(BillCycleDate,&quot;%B&quot;, dtBillCycle);
							BillCycleMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,BillCycleDate);
							Clib.strftime(BillCycleYear,&quot;%Y&quot;, dtBillCycle);
							Message1=Appl.LookupMessage(strMessageCategory, &quot;R21_095&quot;, BillCycleMonth,BillCycleYear);
						}
						else if (BillCycle == 1 || TodayDate &lt;= BillCycle)
						{
							//Today.setMonth(Today.getMonth()+1,Today.getDay());
							//Clib.strftime(BillCycleDate,&quot;%B %Y&quot;, new Date(Today));
							var dtBillCycle = new Date(Today);
							Clib.strftime(BillCycleDate,&quot;%B&quot;, dtBillCycle);
							BillCycleMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,BillCycleDate);
							Clib.strftime(BillCycleYear,&quot;%Y&quot;, dtBillCycle);
							Message1=Appl.LookupMessage(strMessageCategory, &quot;R21_095&quot;, BillCycleMonth,BillCycleYear);
						}
						else if (TodayDate &gt; BillCycle)
						{
							//Clib.strftime(BillCycleDate,&quot;%B %Y&quot;, new Date(Today));
							Today.setMonth(Today.getMonth()+1);
							var dtBillCycle = new Date(Today);
							Clib.strftime(BillCycleDate,&quot;%B&quot;, dtBillCycle);
							BillCycleMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,BillCycleDate);
							Clib.strftime(BillCycleYear,&quot;%Y&quot;, dtBillCycle);
							Message1	= Appl.LookupMessage(strMessageCategory, &quot;R21_095&quot;, BillCycleMonth,BillCycleYear);
						}				
					//}//Msg 1 if
						//Message 2
						
						if(sPayment==sLOVPay)
						{
						  	if(sDueDate != &quot;&quot;)
							{	//var curLang = TheApplication().InvokeMethod(&quot;Language&quot;);
								//var dt = new Date(sDueDate);
								var dt = new Date(sCutOffDt);
								Clib.strftime(sDueDate,&quot;%B&quot;, dt);
								sDueMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,sDueDate);
								Clib.strftime(sDueYear,&quot;%Y&quot;, dt);
								if(Cnt == 0)
								{
									Message2=Appl.LookupMessage(strMessageCategory, &quot;R21_096&quot;, sDueAmt,sDueMonth,sDueYear);
								}
								else
								{
									if(Message2==&quot;&quot;)
										Message2=Appl.LookupMessage(strMessageCategory, &quot;R21_096&quot;, sDueAmt,sDueMonth,sDueYear);
									else
										Message2=Message2+Appl.LookupMessage(strMessageCategory, &quot;R21_099&quot;, sDueAmt,sDueMonth,sDueYear);
								}
							}	
							//Message 3
							var Unpaid = GetFieldValue(&quot;VF Unpaid&quot;);
							if(Unpaid == &quot;Y&quot;)
							{
								Message3= Appl.LookupMessage(strMessageCategory, &quot;R21_097&quot;);
							}
						}//payment status if 
						else
						{ //TLGA-3036
							var Unpaid = GetFieldValue(&quot;VF Unpaid&quot;);
							
							if(Unpaid == &quot;Y&quot; &amp;&amp; GetFieldValue(&quot;PAYMENT_DATE&quot;) &gt; sDueDate)
							{
								Message3= Appl.LookupMessage(strMessageCategory, &quot;R21_097&quot;);
							}
						}//end TLGA-3036
						//Message 4
					var sCutoffDate= GetFieldValue(&quot;VF CutOff&quot;);
					Today1 = new Date();
					if(sCutoffDate == &quot;Y&quot; &amp;&amp; sDueAmt!=&quot;&quot; &amp;&amp; sPayment==sLOVPay)
					{
						var TodayDate = Today1.getDate();
						if (BillCycle == 1 &amp;&amp; TodayDate == BillCycle)
						{
							Today1.setMonth(Today1.getMonth()-2);
							//Clib.strftime(BillCycleDate,&quot;%B %Y&quot;, new Date(Today));
							var dtBillCycle = new Date(Today1);
							Clib.strftime(BillCycleDate,&quot;%B&quot;, dtBillCycle);
							BillCycleMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,BillCycleDate);
							Clib.strftime(BillCycleYear,&quot;%Y&quot;, dtBillCycle);
							Message4=Appl.LookupMessage(strMessageCategory, &quot;R21_098&quot;, BillCycleMonth,BillCycleYear);
						}
						else if (BillCycle == 1 || TodayDate &lt;= BillCycle)
						{
							Today1.setMonth(Today1.getMonth()-1);
							//Clib.strftime(BillCycleDate,&quot;%B %Y&quot;, new Date(Today));
							var dtBillCycle = new Date(Today1);
							Clib.strftime(BillCycleDate,&quot;%B&quot;, dtBillCycle);
							BillCycleMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,BillCycleDate);
							Clib.strftime(BillCycleYear,&quot;%Y&quot;, dtBillCycle);
							Message4=Appl.LookupMessage(strMessageCategory, &quot;R21_098&quot;, BillCycleMonth,BillCycleYear);
						}
						else if (TodayDate &gt; BillCycle)
						{
							//Clib.strftime(BillCycleDate,&quot;%B %Y&quot;, new Date(Today));
							var dtBillCycle = new Date(Today1);
							Clib.strftime(BillCycleDate,&quot;%B&quot;, dtBillCycle);
							BillCycleMonth = Appl.InvokeMethod(&quot;LookupValue&quot;,&quot;MONTH_NAME&quot;,BillCycleDate);
							Clib.strftime(BillCycleYear,&quot;%Y&quot;, dtBillCycle);
							Message4	= Appl.LookupMessage(strMessageCategory, &quot;R21_098&quot;, BillCycleMonth,BillCycleYear);
						}		
					}//Msg 4 if
					InvProf = NextRecord();
					Cnt++;
				  }
				}
			}
			if(Message2 != &quot;&quot;) Message2 = Message2+Msg2;
			
			if(Message1!=&quot;&quot;||Message2!=&quot;&quot;||Message3!=&quot;&quot;||Message4!=&quot;&quot;)
			{
				MessageNote=Appl.LookupMessage(strMessageCategory, &quot;R21_X_INVOICE_MSG&quot;);// DD TLGA-3952
									
				//FinalMsg=Message1+&quot;\n&quot;+Message2+&quot;\n&quot;+Message3+&quot;\n&quot;+Message4;// DD TLGA-3952
				FinalMsg=Message1+&quot;\n&quot;+Message2+&quot;\n&quot;+Message3+&quot;\n&quot;+Message4+&quot;\n&quot;//+MessageNote;// DD TLGA-3952
				Outputs.SetProperty(&quot;Msg&quot;, FinalMsg);
			}
			else
			{
				Outputs.SetProperty(&quot;Msg&quot;, &quot;&quot;);
			}
		}			
	}
	finally
	{
		AssetBC = null;
		bcOrderEntryLineItems = null;
		bcComInv 	= null;
		bcBillAccnt = null;
		bcIntPay 	= null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		bcOrder 	= null;
		boOrder		= null;
		boBillAccnt = null;
		boAccount	= null;
		boOrderEntryLineItems = null;	
	}
	
}"
			   SEQUENCE="16"
			   UPDATED="01/17/2018 16:59:15"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="11/23/2011 18:50:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLineItemAction"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLineItemAction (Inputs, Outputs)
{
/**************************************************
 NAME:    		CheckLineItemAction

 INPUTS:   		OrderId, Product Part Num
 RETURNS: 		Action OR Not found
 AUTHOR:   		F. Lazaretti
 DATE CREATED:  06/10/2010
 UPDATES:  
 **************************************************/
	try
	{	
		var	strOrderId 		= Inputs.GetProperty(&quot;Order Id&quot;);
		var	strPartNum 		= Inputs.GetProperty(&quot;Part Number&quot;);
		var strActionCode	= &quot;KO&quot;;
		var skip = &quot;N&quot;;
		var OrderBO      : BusObject =  TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemBC  : BusComp =  OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		inProp.SetProperty(&quot;strPartNum&quot;,strPartNum);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		var ItemSrc = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Part Number] = &apos;&quot;+strPartNum+&quot;&apos;&quot;;
		with(OrderItemBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(ItemSrc);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				strActionCode =  GetFieldValue(&quot;Action Code&quot;);
				ActivateField(&quot;VF Skip Penality&quot;);	//TLG-1209
				skip = GetFieldValue(&quot;VF Skip Penality&quot;);
			}
		}
		
		Outputs.SetProperty(&quot;Action Code&quot;, strActionCode);
		Outputs.SetProperty(&quot;Skip&quot;, skip);
	}
	finally
	{
		inProp		= null;
		outProp		= null;
		BS			= null;
		OrderItemBC	= null;
		OrderBO		= null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="03/28/2013 11:15:12"
			   UPDATED_BY="SADMIN"
			   CREATED="10/13/2010 21:47:07"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckRepeatedSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckRepeatedSR(Inputs, Outputs) 
{
	try 
	{
		var strCustCode = Inputs.GetProperty (&quot;Account Number&quot;);
		var strType = Inputs.GetProperty (&quot;SR Type&quot;);
		var strArea = Inputs.GetProperty (&quot;Area&quot;);
		var strSubArea = Inputs.GetProperty (&quot;Sub-Area&quot;);
		var strTripletNo = Inputs.GetProperty(&quot;VF Triplet No&quot;);
		var strRepeatedSR = &quot;N&quot;;
		var strSRNum = Inputs.GetProperty(&quot;SRNum&quot;);
		var srBO : BusObject = TheApplication().GetBusObject(&quot;VF Service Request Assignment&quot;);
		var srBC : BusComp = srBO.GetBusComp(&quot;VF Service Request Assignment&quot;);
		var ClosedStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;)
		with (srBC)
		{
			SetViewMode(AllView);
			ActivateField(&quot;VF Customer Account Code&quot;);
			ActivateField(&quot;SR Type&quot;);
			ActivateField(&quot;Sub-Area&quot;);
			ActivateField(&quot;SR Number&quot;);
			ClearToQuery();
			if (strCustCode != &quot;&quot;)
			{
				SetSearchSpec(&quot;VF Customer Account Code&quot;, strCustCode);
			}
			else
			{
				SetSearchSpec(&quot;VF SR Category&quot;, &quot;NET FAULT&quot;);
			}
			if (strTripletNo == &quot;&quot;)
			{
				SetSearchSpec(&quot;SR Type&quot;, strType);
				SetSearchSpec(&quot;Area&quot;, strArea);
				SetSearchSpec(&quot;Sub-Area&quot;, strSubArea);
			}
			else 
			{
				SetSearchSpec(&quot;VF Triplet No&quot;, strTripletNo);
			}
				
		//	SetSearchExpr(&quot;[Status] &lt;&gt;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;)); //TLG-4438
			
			ExecuteQuery(ForwardOnly);
			var founded = &quot;N&quot;;
			var record = FirstRecord();
			while (record &amp;&amp; founded != &quot;Y&quot;)
			{
				if (strSRNum != GetFieldValue(&quot;SR Number&quot;))
				{
					var dDate = new Date(GetFieldValue(&quot;Created&quot;));
					var dToday = new Date();	
					var iTodaySec = dToday.getTime()/1000;
					var iDateSec = dDate.getTime()/1000;		
					var iDiff = Clib.difftime(iTodaySec,iDateSec);
					var iDiffDays = ((iDiff/60)/60)/24
				
					if(iDiffDays &lt; 60)
					{
					
						var strStatus = GetFieldValue(&quot;Status&quot;);
						if(strStatus != ClosedStatus){
						strRepeatedSR = &quot;Y&quot;;
						founded = &quot;Y&quot;;
						}
					}
				}
				record = NextRecord();				
			}
		}		
		Outputs.SetProperty(&quot;RepeatedSR&quot;, strRepeatedSR);		
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;RepeatedSR&quot;, &quot;N&quot;);	
	}
	finally
	{
		srBC = null;
		srBO = null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="11/13/2013 18:50:29"
			   UPDATED_BY="SADMIN"
			   CREATED="12/02/2009 15:10:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckRiskDescription"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckRiskDescription(Inputs,Outputs)
{
	try
	{
		var CXParBO : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var CXParBC : BusComp = CXParBO.GetBusComp(&quot;ACS NI Parameter&quot;);
		var RiskStatus = Inputs.GetProperty(&quot;RiskStatus&quot;);
		var RiskDescription = &quot;&quot;;
		
		if (RiskStatus == &quot;&quot;) {
			RiskStatus == &quot;0&quot;;
		}
		
		with(CXParBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Function] = &apos;VF Risk Status&apos; AND [Name] = &apos;&quot;+RiskStatus+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				if (TheApplication().InvokeMethod(&quot;Language&quot;)==&quot;TRK&quot;)
				{
					RiskDescription = GetFieldValue(&quot;Comments&quot;);
				}
				else
				{
					RiskDescription = GetFieldValue(&quot;Value&quot;);
				}
			}
		}
		Outputs.SetProperty(&quot;RiskDescription&quot;,RiskDescription);
	}
	/*catch(e)// 11/03/2013 VF TR - Exception errors for Oracle Review
	{
		var error = e.toString();
	}*/
	finally
	{
		CXParBC = null;
		CXParBO = null;
	}
}"
			   SEQUENCE="21"
			   UPDATED="07/10/2013 20:39:37"
			   UPDATED_BY="SADMIN"
			   CREATED="05/30/2011 18:09:12"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckRole"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckRole(Role)
{

	//CR43 - RLOURENCO - added to be used in ControlSkipPosition method. Internal use only.
	try
	{
		var oBS:Service = TheApplication().GetService(&quot;ACS NI General Operations&quot;);
		var oPSInputs:PropertySet = TheApplication().NewPropertySet();
		var oPSOutputs:PropertySet = TheApplication().NewPropertySet();
		var sHasRole = &quot;N&quot;;
		var sRoleList = &quot;&quot;;		
		
		oPSInputs.SetProperty(&quot;Function&quot;,&quot;VF_ROLE_LIST&quot;);
		oPSInputs.SetProperty(&quot;Name&quot;,&quot;TransfCrossCustomerFeeSkip&quot;);
		
		oBS.InvokeMethod(&quot;GetParameter&quot;, oPSInputs, oPSOutputs);
		
		sRoleList = oPSOutputs.GetProperty(&quot;Cons123&quot;);
		
		oBS = TheApplication().GetService(&quot;TELCO Order Management Utilities&quot;);
		oPSInputs.Reset();
		oPSOutputs.Reset();
		
		oPSInputs.SetProperty(&quot;roles&quot;, sRoleList);
		oBS.InvokeMethod(&quot;UserHasRole&quot;, oPSInputs, oPSOutputs);
		return oPSOutputs.GetProperty(&quot;hasRole&quot;);
		
		
	}
	catch(e)
	{
		throw(e);
	}	
	finally
	{
		oPSOutputs = null;
		oPSInputs = null;
		oBS = null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="11/02/2015 10:35:12"
			   UPDATED_BY="SADMIN"
			   CREATED="10/26/2015 16:31:37"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSAS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSAS(Inputs, Outputs)
{
	try
	{
		var AssetBO : BusObject = TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var AssetBC : BusComp = AssetBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var SearchString = Inputs.GetProperty(&quot;SearchString&quot;);
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;SearchString&quot;,SearchString);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		with(AssetBC)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Owner Account Id&quot;);
			ActivateField(&quot;VF Average Invoice Amount&quot;);
			ActivateField(&quot;VF Risk Status&quot;);
			ActivateField(&quot;Status&quot;);
			SetSearchExpr(SearchString);
			ExecuteQuery(ForwardOnly);
			if(!FirstRecord())
				Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
			else
				Outputs.SetProperty(&quot;Result&quot;,&quot;OK&quot;);
		}			
	}
	finally
	{
		AssetBC = null;
		AssetBO = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="23"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/26/2012 12:36:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSubmitOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSubmitOrder (Inputs, Outputs)
{
	/************************************************************************************
	* ACS AD 07-Mar-07 : Created                                                        *
	* Description      : The script will check if an order can be submitted and returns *
	*                    a flag indicating this. This script is used in the Sales Order *
	*                    view, as well as in all web service events that submit orders. *
	************************************************************************************/
	try
	{
		var strOrderId        = Inputs.GetProperty (&quot;Order Id&quot;);
		var strOrderSrcExpr   = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strOrderLiSrcExpr = &quot;&quot;;
		var strIntegrationId  = &quot;&quot;;
		var strOrdItemStatus  = &quot;&quot;;
		
		var booSimpleItemRecordExists;
		var booLineItemRecordExists;
		
		var boOrderEntry : BusObject = TheApplication ().GetBusObject (&quot;TELCO Order Item - Simple&quot;);
		//var bcOrderEntry : BusComp = boOrderEntry.GetBusComp (&quot;TELCO Orders - Simple&quot;);
		var bcOrderLineItemsSimple : BusComp = boOrderEntry.GetBusComp (&quot;TELCO Line Items - Simple&quot;);

		var boOrderLineItems : BusObject = TheApplication ().GetBusObject (&quot;TELCO Order Item - Simple&quot;);
		var bcOrderLineItems : BusComp = boOrderLineItems.GetBusComp (&quot;TELCO Line Items - Simple&quot;);
		
		//bcOrderEntry.ClearToQuery ();
		//bcOrderEntry.SetViewMode (AllView);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);	
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		//bcOrderEntry.SetSearchExpr (strOrderSrcExpr);
		//bcOrderEntry.ExecuteQuery(ForwardOnly);
		
		//if (bcOrderEntry.FirstRecord ())
		//{
			bcOrderLineItemsSimple.ClearToQuery ();
			bcOrderLineItemsSimple.SetViewMode (AllView);
			bcOrderLineItemsSimple.ActivateField(&quot;Asset Integration Id&quot;);
			bcOrderLineItemsSimple.SetSearchSpec (&quot;Order Header Id&quot;,strOrderId);
			bcOrderLineItemsSimple.ExecuteQuery(ForwardOnly);
			booSimpleItemRecordExists = bcOrderLineItemsSimple.FirstRecord ();
			
			while (booSimpleItemRecordExists)
			{
				strIntegrationId = bcOrderLineItemsSimple.GetFieldValue (&quot;Asset Integration Id&quot;);
				
				strOrderLiSrcExpr = &quot;[Asset Integration Id] = &apos;&quot;+strIntegrationId+&quot;&apos;&quot;;
				
				bcOrderLineItems.ClearToQuery ();
				bcOrderLineItems.ActivateField (&quot;Asset Integration Id&quot;);
				bcOrderLineItems.ActivateField (&quot;Status&quot;);
				bcOrderLineItems.SetViewMode (AllView);
				bcOrderLineItems.SetSearchExpr (strOrderLiSrcExpr);
				bcOrderLineItems.ExecuteQuery(ForwardOnly);//VFTK Venkata 16052012 Scripting31: No Changes since querys based on different BO&apos;s
				
				booLineItemRecordExists = bcOrderLineItems.FirstRecord ();
				
				while (booLineItemRecordExists)
				{
					strOrdItemStatus = bcOrderLineItems.GetFieldValue (&quot;Status&quot;);
					
					if (strOrdItemStatus == &quot;Open&quot; || strOrdItemStatus == &quot;In-transit&quot; || strOrdItemStatus == &quot;Installed&quot;)
					{
						Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;N&quot;);
						break;
					}
					else
					{
						Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;Y&quot;);
					}
					booLineItemRecordExists = bcOrderLineItems.NextRecord ();
				}
				booSimpleItemRecordExists = bcOrderLineItemsSimple.NextRecord ();
			}
		//}
		
		if (Outputs.GetProperty (&quot;CreateModifyFlag&quot;) == &quot;&quot;)
		{
			Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;Y&quot;);
		}
	}
	catch (e)
	{
		Outputs.SetProperty (&quot;CreateModifyFlag&quot;, &quot;N&quot;);
		throw e;
	}
	finally
	{
		//bcOrderEntry              = null;
		bcOrderLineItemsSimple    = null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		bcOrderLineItems          = null;
		boOrderLineItems          = null;
		//bcOrderLineItems          = null;
		boOrderEntry              = null;
		inProp					  = null;
		outProp					  = null;
		BS						  = null;
	}
}"
			   SEQUENCE="24"
			   UPDATED="01/17/2018 17:07:02"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTranFeeSkip"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckTranFeeSkip (Inputs, Outputs)
{
	try
	{
		var OrderType = &quot;&quot;;
		var OrderSubType = &quot;&quot;;
		var OrderReason = &quot;&quot;;
		var OrderId = &quot;&quot;;
		var RootProductPartNum = &quot;&quot;;
		var TransFound = false;
		var Consumer = false;
		var PreviousModifyMSISDN = true;
		var RootAssetIntegId = &quot;&quot;;
		var Complete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var CtrlInputs = TheApplication().NewPropertySet();
		var CtrlOutputs = TheApplication().NewPropertySet();
		
		var sResult = &quot;&quot;;
		var sErrorMsg = &quot;&quot;;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var OrderTypeLic = &quot;&quot;;
		var OrderSubTypeLic = &quot;&quot;;
		var OrderReasonLic = &quot;&quot;;
		
		OrderId = Inputs.GetProperty(&quot;OrderId&quot;);
				
		var BOPar :BusObject;
		var BCPar :BusComp;
		
		var BOOrder :BusObject;
		var BCOrderItem :BusComp;

		OrderType = Inputs.GetProperty(&quot;OrderType&quot;);
		OrderSubType = Inputs.GetProperty(&quot;OrderSubType&quot;);
		OrderReason = Inputs.GetProperty(&quot;OrderReason&quot;);

		OrderTypeLic = LookupName(&quot;FS_ORDER_TYPE&quot;,OrderType);
		if (OrderSubType != &quot;&quot;)
		{
			OrderSubTypeLic = LookupName(&quot;ORDER_SUB_TYPE&quot;,OrderSubType);
		}
		if (OrderReason != &quot;&quot;)
		   OrderReasonLic = LookupName(&quot;ACS_ORDER_REASON&quot;,OrderReason);
		
		
		BOPar = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		BCPar = BOPar.GetBusComp(&quot;ACS NI Parameter&quot;);

		with(BCPar)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Function] = &apos;AddTransactionFee&apos; AND [Name] = &apos;&quot;+OrderTypeLic+&quot;&apos; AND [Value] = &apos;&quot;+OrderSubTypeLic+&quot;&apos; AND [Condition1] = &apos;&quot;+OrderReasonLic+&quot;&apos; AND [Attrib01]&lt;&gt;&apos;N&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				TransFound = true;
			}				
		}	
	
		if(TransFound)
		{
			BOOrder = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
			BCOrderItem = BOOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
			with(BCOrderItem)
			{
				SetViewMode(AllView);
				ClearToQuery();
				
				inProp.SetProperty(&quot;OrderId&quot;,OrderId);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				//End - Scripting 15
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Root Order Item Id] = [Id] AND [Part Number] = &apos;50000&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
				{
					RootAssetIntegId = GetFieldValue(&quot;Asset Integration Id&quot;);
					Consumer = true;				
				}
			}
			
			if(Consumer)
			{
				if (OrderSubTypeLic == &quot;102&quot;)
				{
					PreviousModifyMSISDN = false;
					BOOrder = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
					BCOrderItem = BOOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
					with(BCOrderItem)
					{					
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(&quot;[Asset Integration Id] = &apos;&quot;+RootAssetIntegId+&quot;&apos; AND [Order Sub Type] = &apos;&quot;+OrderSubType+&quot;&apos; AND [Order Header Id] &lt;&gt; &apos;&quot;+OrderId+&quot;&apos; AND [Status] = &apos;&quot;+Complete+&quot;&apos;&quot;);
						ExecuteQuery(ForwardOnly);
						if (FirstRecord())
						{
							PreviousModifyMSISDN = true;				
						}	
					}
					BCOrderItem = null;
					BOOrder = null;									
				}
				if (PreviousModifyMSISDN)
				{
					CtrlInputs.SetProperty(&quot;ControlNum&quot;,&quot;120&quot;);
					CtrlInputs.SetProperty(&quot;ControlType&quot;,&quot;TransFee&quot;);
					CtrlInputs.SetProperty(&quot;OrderSubType&quot;,OrderSubTypeLic);
					ControlSkipPosition (CtrlInputs, CtrlOutputs);
					sResult = CtrlOutputs.GetProperty(&quot;Result&quot;);
					if (sResult == &quot;OK&quot;)
					{
						sErrorMsg = CtrlOutputs.GetProperty(&quot;ErrorMsg&quot;);	
					}
				}
			}
		}
		var LoginName = TheApplication().LoginName();
		Outputs.SetProperty(&quot;Result&quot;,sErrorMsg);
		Outputs.SetProperty(&quot;Login&quot;,LoginName);
	}
	finally
	{
		BCOrderItem = null;
		BOOrder = null;
		CtrlOutputs = null;
		CtrlInputs = null;
		BCPar = null;
		BOPar = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="30"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2011 19:55:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ControlSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//CR062 ISTDEV Erdem
function ControlSR(Inputs, Outputs) 
{
	try 
	{
		//Variables Decleared 
		var strCustCode = Inputs.GetProperty (&quot;Account Number&quot;);
		var strType = Inputs.GetProperty (&quot;SR Type&quot;);
		var strArea = Inputs.GetProperty (&quot;Area&quot;);
		var strSubArea = Inputs.GetProperty (&quot;Sub-Area&quot;);
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var strActiveFlag = &quot;&quot;;
		var SRDesc = &quot;&quot;;
		var SRrow = &quot;&quot;;
		var LOVClosed	=  TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;);
		 
		//Getting Service Request and SR Notes BC for queries		
		var srBO : BusObject = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var srBC : BusComp = srBO.GetBusComp(&quot;Service Request&quot;);
		var srBCnote : BusComp = srBO.GetBusComp(&quot;PLW Request Note&quot;);
		
		srBC.SetViewMode(AllView); 
		// VFTK Junaid 20120514 - As per Oracle31 moved child query with parent query.
		srBCnote.SetViewMode(AllView);
		srBC.ActivateField(&quot;Account Number&quot;);
		srBC.ActivateField(&quot;SR Type&quot;);
		srBC.ActivateField(&quot;Sub-Area&quot;);
		srBC.ActivateField(&quot;Status&quot;);
		srBC.ActivateField(&quot;Description&quot;);
		srBC.ActivateField(&quot;Created&quot;);
		srBCnote.ActivateField(&quot;Source Id&quot;);
		srBCnote.ActivateField(&quot;Created&quot;);
		srBCnote.ActivateField(&quot;Note&quot;);
		srBC.ClearToQuery();
		srBCnote.ClearToQuery();
		if (strCustCode != &quot;&quot;)
		{
			srBC.SetSearchSpec(&quot;Account Number&quot;, strCustCode);
		}//if
		else
		{
			srBC.SetSearchSpec(&quot;VF SR Category&quot;, &quot;NET FAULT&quot;);
		}//else
		
		//Query Service Requests for Triplet and arrange by creation date
		//VFTK Junaid 20120514 - Added validation as per Oracle 15
		inProp.SetProperty(&quot;strType&quot;,strType);
		inProp.SetProperty(&quot;strArea&quot;, strArea); 
		inProp.SetProperty(&quot;strArea&quot;, strSubArea); 
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
		//End
		srBC.SetSearchSpec(&quot;SR Type&quot;, strType);
		srBC.SetSearchSpec(&quot;Area&quot;, strArea);
		srBC.SetSearchSpec(&quot;Sub-Area&quot;, strSubArea);
		srBC.SetSearchSpec(&quot;Status&quot;, LOVClosed);
		srBC.SetSortSpec(&quot;Created (DESCENDING)&quot;);
		srBCnote.SetSortSpec(&quot;Created (DESCENDING)&quot;); 
		srBC.ExecuteQuery(ForwardOnly);

		if (srBC.FirstRecord())
		{
		 	
			strActiveFlag = &quot;N&quot;;	
			SRrow = srBC.GetFieldValue(&quot;Id&quot;);
			if (srBCnote.FirstRecord())
			{
				SRDesc = srBCnote.GetFieldValue(&quot;Note&quot;);
			}//if
			else
			{
				SRDesc = &quot;-&quot;; 
			}//else
					
			Outputs.SetProperty(&quot;ActiveFlag&quot;, strActiveFlag);
			Outputs.SetProperty(&quot;SRDesc&quot;, SRDesc);
			Outputs.SetProperty(&quot;StatusCode&quot;, &quot;0&quot;);
		}//if
		else
		{
			strActiveFlag = &quot;Y&quot;;
		}
	} //try
	catch(e)
	{
		Outputs.SetProperty(&quot;StatusCode&quot;, &quot;1&quot;);	
	}
	finally
	{
		srBCnote = null;
		srBC = null;
		srBO = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="33"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="07/13/2011 12:34:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ControlSkipPosition"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ControlSkipPosition (Inputs, Outputs)
{
	try
	{
		var CurrentPositionType = &quot;Teste&quot;; //GetPositionType();
		var Msg = &quot;&quot;;
		var XOrderbo : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var ControlSkipbc : BusComp = XOrderbo.GetBusComp(&quot;VF Controls Skip&quot;);
		var ControlNum = Inputs.GetProperty(&quot;ControlNum&quot;);
		var ControlType = Inputs.GetProperty(&quot;ControlType&quot;);
		var OrderSubType = Inputs.GetProperty(&quot;OrderSubType&quot;);
		var Result = &quot;KO&quot;;
		var sRole = &quot;&quot;;
		var isRecord;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;ControlNum&quot;,ControlNum);
		inProp.SetProperty(&quot;ControlType&quot;,ControlType);
		inProp.SetProperty(&quot;CurrentPositionType&quot;,CurrentPositionType);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with(ControlSkipbc)
		{
			SetViewMode(AllView);
			ClearToQuery();
			//SANTOSP - 04/2015 - VFTRCBU-1769
			//SetSearchExpr(&quot;[Control Num] = &apos;&quot;+ControlNum+&quot;&apos; AND [Control Type] = &apos;&quot;+ControlType+&quot;&apos; AND [Position Type] = &apos;&quot;+CurrentPositionType+&quot;&apos;&quot;);
			SetSearchExpr(&quot;[Control Num] = &apos;&quot;+ControlNum+&quot;&apos; AND [Control Type] = &apos;&quot;+ControlType+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			
			isRecord = FirstRecord();
			
			while (isRecord)
			{
				if (TheApplication().InvokeMethod(&quot;Language&quot;) == &quot;TRK&quot;)
				{
					Msg = GetFieldValue(&quot;Error Message Trk&quot;);
				}
				else
				{
					Msg = GetFieldValue(&quot;Error Message Enu&quot;);
				}				
				
				/* //SANTOSP - 04/2015 - VFTRCBU-1769
				if (CurrentPositionType == &quot;Role8&quot;)
				{
					if (OrderSubType == &quot;128&quot;)
					{
						Result = &quot;OK&quot;;
					}
				}
				else
				{
					Result = &quot;OK&quot;;
				}
				*/
				sRole = GetFieldValue(&quot;Position Type&quot;);
				if(TheApplication().UserHasRole(sRole))
				{
					//CR43 - Added to remove hardcoded role
					var sTransfCrossCustomerFeeSkip = CheckRole(sRole);
					if(sTransfCrossCustomerFeeSkip == &quot;Y&quot;)
					{
						if(OrderSubType == &quot;128&quot;)
							Result = &quot;OK&quot;;
						else
						{
							Result = &quot;KO&quot;;
							break;
						}
					}	
					else
						Result = &quot;OK&quot;;
				}
				isRecord = NextRecord();
			}			
		}
		Outputs.SetProperty(&quot;Result&quot;,Result);
		Outputs.SetProperty(&quot;ErrorMsg&quot;,Msg);
	}
	/*catch(e)// 11/03/2013 VF TR - Exception errors for Oracle Review
	{
		var error = e.toString();
	}*/
	finally
	{
		ControlSkipbc = null;
		XOrderbo = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="32"
			   UPDATED="11/02/2015 10:35:12"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2011 19:55:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CopyUpdateLineItems"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CopyUpdateLineItems (Inputs, Outputs)
{
	try
	{
		var strOrderId = Inputs.GetProperty (&quot;OrderId&quot;);
		
		var boOrderEntry  : BusObject = TheApplication ().GetBusObject (&quot;Order Entry&quot;);
		var bcOrderEntry  : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		var bcOrderItem   : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Line Items&quot;);
		var bcOrderItemXA : BusComp = boOrderEntry.GetBusComp (&quot;Order Item XA&quot;);

		var strOrderSearchExpr = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strOrderItemAction = &quot;&quot;;
		var strParOrderItemId  = &quot;&quot;;
		var strOrderItemId     = &quot;&quot;;
		var strItemPriceListId = &quot;&quot;;
		var strItemXaNewVal    = &quot;&quot;;
		var strOrderItemXAAction = &quot;&quot;;
		var strItemXAName = &quot;&quot;;

		var booOrderItemExists;
		var booOrderXAExists;
		var dtSysDate = new Date ();
	
		bcOrderEntry.ClearToQuery ();
		bcOrderEntry.SetViewMode (AllView);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);	
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		bcOrderEntry.SetSearchExpr (strOrderSearchExpr);
		bcOrderEntry.ExecuteQuery(ForwardOnly);//Scripting31: No changes since no child query exists
		
		if (bcOrderEntry.FirstRecord ())
		{
			booOrderItemExists = bcOrderItem.FirstRecord ();
			while (booOrderItemExists)
			{
				strOrderItemAction = bcOrderItem.GetFieldValue (&quot;Action Code&quot;);
				strParOrderItemId  = bcOrderItem.GetFieldValue (&quot;Parent Order Item Id&quot;);
				strOrderItemId     = bcOrderItem.GetFieldValue (&quot;Id&quot;);
				//AM-ACS. 8th Feb 2007. Added to get Pricelist.
				strItemPriceListId = bcOrderItem.GetFieldValue (&quot;Price List Id&quot;);
			
				if (strOrderItemAction == &quot;Update&quot; &amp;&amp; strParOrderItemId.length &gt; 0)
				{
					bcOrderItem.NewRecord (NewBeforeCopy);	
					bcOrderItem.SetFieldValue (&quot;Action Code&quot;, &quot;Add&quot;);
					bcOrderItem.SetFieldValue (&quot;Exchange Date&quot;, bcOrderItem.GetFieldValue(&quot;Created&quot;));
					bcOrderItem.SetFieldValue (&quot;Item Price List Id&quot;, strItemPriceListId);
					bcOrderItem.SetFieldValue (&quot;Root Order Item Id&quot;, strParOrderItemId);
					bcOrderItem.WriteRecord ();
					booOrderXAExists = bcOrderItemXA.FirstRecord ();
					while (booOrderXAExists)
					{
						if (bcOrderItemXA.GetFieldValue (&quot;Name&quot;) == &quot;Refill Amount&quot;) 
						{
							bcOrderItemXA.SetFieldValue (&quot;Value&quot;,&quot;0&quot;);
						}
						bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;, &quot;Add&quot;);
						bcOrderItemXA.WriteRecord ();
						booOrderXAExists = bcOrderItemXA.NextRecord ();
					}
					
					bcOrderItem.NextRecord ();
					bcOrderItem.SetFieldValue (&quot;Action Code&quot;, &quot;Delete&quot;);
					strItemPriceListId = bcOrderItem.GetFieldValue (&quot;Item Price List Id&quot;);
					bcOrderItem.WriteRecord ();

					booOrderXAExists = bcOrderItemXA.FirstRecord ();
					while (booOrderXAExists)
					{
						strOrderItemXAAction = bcOrderItemXA.GetFieldValue (&quot;Action Code&quot;);
						if (strOrderItemXAAction == &quot;Update&quot;) 
						{
							strItemXaNewVal = bcOrderItemXA.GetFieldValue (&quot;Value&quot;);
							strItemXAName = bcOrderItemXA.GetFieldValue (&quot;Name&quot;);
							bcOrderItemXA.SetFieldValue (&quot;Value&quot;,bcOrderItemXA.GetFieldValue (&quot;Previous Text Value&quot;));
						}	
						var strOrderItemXAName = bcOrderItemXA.GetFieldValue (&quot;Name&quot;);
						if (strOrderItemXAName == &quot;Refill Amount&quot;) 
						{
							bcOrderItemXA.SetFieldValue (&quot;Value&quot;,&quot;0&quot;);
						}	
						bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;, &quot;Delete&quot;);
						bcOrderItemXA.WriteRecord ();
						booOrderXAExists = bcOrderItemXA.NextRecord ();
					}
					bcOrderItem.SetFieldValue (&quot;Action Code&quot;, &quot;Delete&quot;);
				}
				booOrderItemExists = bcOrderItem.NextRecord ();
			}
		}
	}
	finally
	{
		bcOrderEntry         = null;
		bcOrderItem          = null;
		bcOrderItemXA        = null;
		boOrderEntry         = null;
		inProp				 = null;
		outProp				 = null;
		BS					 = null;
	}
}"
			   SEQUENCE="34"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="ACS MC R1.3 20100524 - Newly Created for GIB Requirement."
			   INACTIVE="N"
			   NAME="CreateGIBFailureSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateGIBFailureSR (Inputs, Outputs)
{
	/******************************************************************************
	* ACS  14-JULY-10 :	 Created                                                  
	* Description     :  This is a general purpose script that can be used to
    *				     create Service Request with specific triplets for 
    				     given the Service Request details
	*                    as input whenever Customer Validation fails for GIB 
					     more than 3 times.
	******************************************************************************/
	try
	{
		var strAccountId       = Inputs.GetProperty(&quot;Account Id&quot;);
		var psInputs  : PropertySet = TheApplication ().NewPropertySet ();
    	var psOutputs : PropertySet = TheApplication ().NewPropertySet ();
    	var bsGenOperations : Service =TheApplication().GetService(&quot;ACS General Operations&quot;);
        
        //Get and translate SR Parameters
        psInputs.SetProperty (&quot;Function&quot;, &quot;GIBFailureSR&quot;);
       	psInputs.SetProperty (&quot;Name&quot;, &quot;GIB Failure SR&quot;);
        
        bsGenOperations.InvokeMethod (&quot;GetParameter&quot;, psInputs, psOutputs);
        
        var SRType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_FAILURE_SR_LOV&quot;, psOutputs.GetProperty(&quot;Value&quot;));
        var SRArea = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_FAILURE_SR_LOV&quot;, psOutputs.GetProperty(&quot;Cons1&quot;));
        var SRSubArea = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_FAILURE_SR_LOV&quot;, psOutputs.GetProperty(&quot;Cons2&quot;));
        var SRStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;, psOutputs.GetProperty(&quot;Cons3&quot;));
        var SRSubStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;, psOutputs.GetProperty(&quot;Description&quot;));
        var SRCategory =TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;VF_SR_CATEGORY&quot;,&quot;Standard&quot;);
		
		//Calling GetLookupMsg for Getting Description for GIB SR
		var psInputsMsg  : PropertySet = TheApplication ().NewPropertySet ();
    	var psOutputsmsg : PropertySet = TheApplication ().NewPropertySet ();
		psInputsMsg.SetProperty(&quot;Code&quot;,&quot;157&quot;);
		psInputsMsg.SetProperty(&quot;MessageCategory&quot;,&quot;VF Message Category&quot;);
		bsGenOperations.InvokeMethod (&quot;GetLookupMsg&quot;, psInputsMsg, psOutputsmsg);
		var SRDescription = psOutputsmsg.GetProperty(&quot;Message&quot;);
       	//Get Owner
       	psInputs.SetProperty (&quot;Function&quot;, &quot;GIBFailureSR&quot;);
       	psInputs.SetProperty (&quot;Name&quot;, &quot;GIB Failure SR Owner&quot;);
       
       	bsGenOperations.InvokeMethod (&quot;GetParameter&quot;, psInputs, psOutputs);
       	var SROwner = psOutputs.GetProperty(&quot;Value&quot;);          
       	//Create SR
		psInputs  = TheApplication ().NewPropertySet ();
       	psOutputs = TheApplication ().NewPropertySet ();
       	
		psInputs.SetProperty (&quot;Account Id&quot;, strAccountId);
       	psInputs.SetProperty (&quot;Type&quot;, SRType);
       	psInputs.SetProperty (&quot;Area&quot;, SRArea);
       	psInputs.SetProperty (&quot;Sub Area&quot;, SRSubArea);
       	psInputs.SetProperty (&quot;Status&quot;, SRStatus);
       	psInputs.SetProperty (&quot;Sub Status&quot;, SRSubStatus);
       	psInputs.SetProperty (&quot;Owner Group&quot;, SROwner);
       	psInputs.SetProperty(&quot;VF SR Category&quot;,SRCategory);
       	psInputs.SetProperty(&quot;Description&quot;,SRDescription);
       
       	bsGenOperations.InvokeMethod (&quot;CreateSR&quot;, psInputs, psOutputs);        	        	

		return(CancelOperation);
	}
	finally
	{
		psInputs	= null;
		psOutputs	= null;
		psInputsMsg	= null;
		psOutputsmsg = null;
		bsGenOperations = null;
	}		
}"
			   SEQUENCE="35"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="07/23/2010 21:57:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="ACS MC R1.3 20100524 - Newly Created for GIB Requirement."
			   INACTIVE="N"
			   NAME="CreateGIBSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateGIBSR (Inputs, Outputs)
{
	/******************************************************************************
	* ACS  14-JULY-10 :	 Created                                                  
	* Description     :  This is a general purpose script that can be used to
    *				     create Service Request with specific triplets for 
    				     given the Service Request details
	*                    as input whenever Customer Validation fails for GIB 
					     by Cancel Operation done by User on the Pop-Up Applet
	******************************************************************************/
	try
	{
		var strAccountId       = Inputs.GetProperty(&quot;Account Id&quot;);
		
		var psInputs  : PropertySet = TheApplication ().NewPropertySet ();
    	var psOutputs : PropertySet = TheApplication ().NewPropertySet ();
    	var bsGenOperations : Service =TheApplication().GetService(&quot;ACS General Operations&quot;);
        
        //Get and translate SR Parameters
        psInputs.SetProperty (&quot;Function&quot;, &quot;GIBCancelSR&quot;);
       	psInputs.SetProperty (&quot;Name&quot;, &quot;GIBSR&quot;);
        
        bsGenOperations.InvokeMethod (&quot;GetParameter&quot;, psInputs, psOutputs);
        
        var SRType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_SR_LOV&quot;, psOutputs.GetProperty(&quot;Value&quot;));
        var SRArea = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_SR_LOV&quot;, psOutputs.GetProperty(&quot;Cons1&quot;));
        var SRSubArea = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_SR_LOV&quot;, psOutputs.GetProperty(&quot;Cons2&quot;));
        var SRStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;, psOutputs.GetProperty(&quot;Cons3&quot;));
        var SRSubStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_SUB_STATUS&quot;, psOutputs.GetProperty(&quot;Description&quot;));
        var SRCategory =TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;VF_SR_CATEGORY&quot;,&quot;Standard&quot;);
		
		//Calling GetLookupMsg for Getting Description for GIB SR
		var psInputsMsg  : PropertySet= TheApplication ().NewPropertySet ();
    	var psOutputsmsg : PropertySet= TheApplication ().NewPropertySet ();
		psInputsMsg.SetProperty(&quot;Code&quot;,&quot;149&quot;);
		psInputsMsg.SetProperty(&quot;MessageCategory&quot;,&quot;VF Message Category&quot;);
		bsGenOperations.InvokeMethod (&quot;GetLookupMsg&quot;, psInputsMsg, psOutputsmsg);
		var SRDescription = psOutputsmsg.GetProperty(&quot;Message&quot;);
    	 	
        	//Get Owner
        	psInputs.SetProperty (&quot;Function&quot;, &quot;GIBCancelSR&quot;);
        	psInputs.SetProperty (&quot;Name&quot;, &quot;GIB SR Owner&quot;);
        	bsGenOperations.InvokeMethod (&quot;GetParameter&quot;, psInputs, psOutputs);
        	var SROwner = psOutputs.GetProperty(&quot;Value&quot;);
        	//Create SR
			psInputs  = TheApplication ().NewPropertySet ();
        	psOutputs = TheApplication ().NewPropertySet ();
        	
			psInputs.SetProperty (&quot;Account Id&quot;, strAccountId);
        	psInputs.SetProperty (&quot;Type&quot;, SRType);
        	psInputs.SetProperty (&quot;Area&quot;, SRArea);
        	psInputs.SetProperty (&quot;Sub Area&quot;, SRSubArea);
        	psInputs.SetProperty (&quot;Status&quot;, SRStatus);
        	psInputs.SetProperty (&quot;Sub Status&quot;, SRSubStatus);
        	psInputs.SetProperty (&quot;Owner Group&quot;, SROwner);
        	psInputs.SetProperty(&quot;VF SR Category&quot;,SRCategory);
        	psInputs.SetProperty(&quot;Description&quot;,SRDescription);
        
        	bsGenOperations.InvokeMethod (&quot;CreateSR&quot;, psInputs, psOutputs);        	        	
			return(CancelOperation);
	}
	finally
	{
		psInputs	= null;
		psOutputs	= null;
		psInputsMsg	= null;
		psOutputsmsg = null;
		bsGenOperations = null;
	}		
}"
			   SEQUENCE="36"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="07/22/2010 08:53:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateInteraction"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateInteraction(Inputs,Outputs)
{
	try
	{
		var strArea 		= Inputs.GetProperty(&quot;Area&quot;);
		var strSubArea  	= Inputs.GetProperty(&quot;Sub Area&quot;);
		var strAccount		= Inputs.GetProperty(&quot;Account&quot;); 
		var strSRType		= Inputs.GetProperty(&quot;Type&quot;);
		var strSRId	    	= Inputs.GetProperty(&quot;SRId&quot;);
		var strAssetId	    = Inputs.GetProperty(&quot;Asset Id&quot;);
		var strMSISDN	    = Inputs.GetProperty(&quot;MSISDN&quot;);
		var strStatus		= Inputs.GetProperty(&quot;Status&quot;);
		var strDesc			= Inputs.GetProperty(&quot;Description&quot;);
		var strRaiseError	= Inputs.GetProperty(&quot;Raise Onwer Team Error&quot;);
		var strChannel		= Inputs.GetProperty(&quot;Channel&quot;);
		var strIntId        = &quot;&quot;;
		var bcPickMSISDN	: BusComp;
		var boAccount		: BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var bcContactLog	: BusComp = boAccount.GetBusComp(&quot;Contact Log&quot;);
		var bcContactLogWrite : BusComp = boAccount.GetBusComp (&quot;Contact Log (Avaya)&quot;);
		
		bcContactLogWrite.NewRecord(NewAfter);
		bcContactLogWrite.SetFieldValue(&quot;Account&quot;,strAccount);
		bcContactLogWrite.SetFieldValue(&quot;SR Type&quot;,strSRType);
		bcContactLogWrite.SetFieldValue(&quot;Area&quot;,strArea);
		bcContactLogWrite.SetFieldValue(&quot;Sub-Area&quot;,strSubArea); 
		bcContactLogWrite.SetFieldValue(&quot;Contact Type&quot;,&quot;CALL - INBOUND&quot;);
		bcContactLogWrite.SetFieldValue(&quot;Asset Id&quot;, strAssetId);
		bcContactLogWrite.SetFieldValue(&quot;Description&quot;, strDesc);
		bcContactLogWrite.SetFieldValue(&quot;Contact Type&quot;, strChannel);
		
		var strStatusLIC = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_LOG_STATUS&quot;, strStatus);

		if(strStatusLIC.length &gt; 0)
			bcContactLogWrite.SetFieldValue(&quot;Contact Log Status&quot;, strStatusLIC);		
		
		if (strSRId.length != 0)
		{
			bcContactLogWrite.SetFieldValue(&quot;Parent SR Id&quot;,strSRId);
		}
			
		bcContactLogWrite.WriteRecord();

		strIntId = bcContactLogWrite.GetFieldValue(&quot;Id&quot;);
		
		if(strMSISDN.length &gt; 0)
		{
			bcContactLogWrite.ClearToQuery();
			bcContactLogWrite.SetViewMode(AllView);
			bcContactLogWrite.ActivateField(&quot;Called From Number&quot;);
			bcContactLogWrite.SetSearchExpr(&quot;[Id] = &apos;&quot;+strIntId+&quot;&apos;&quot;);
			bcContactLogWrite.ExecuteQuery(ForwardOnly);
			if(bcContactLogWrite.FirstRecord())
			{
				bcPickMSISDN = bcContactLogWrite.GetPicklistBusComp(&quot;Called From Number&quot;);
				bcPickMSISDN.ClearToQuery();
				bcPickMSISDN.SetViewMode(AllView);
				bcPickMSISDN.ActivateField(&quot;Serial Number&quot;);
				//Begin - Scripting 15 - Input validation
				var inProp 	:PropertySet = TheApplication().NewPropertySet();
				var outProp	: PropertySet = TheApplication().NewPropertySet();
				var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
				inProp.SetProperty(&quot;strMSISDN&quot;,strMSISDN);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				//End - Scripting 15
				bcPickMSISDN.SetSearchExpr(&quot;[Serial Number] = &apos;&quot;+strMSISDN+&quot;&apos;&quot;);
				bcPickMSISDN.ExecuteQuery(ForwardOnly);//VFTK Venkata scripting31: No changes since no link exist
				
				if(bcPickMSISDN.FirstRecord())
				{
					bcPickMSISDN.Pick();
				}
				
				bcContactLogWrite.WriteRecord();
			}
		}	
		
		Outputs.SetProperty(&quot;InteractionId&quot;, strIntId);
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;InteractionId&quot;, &quot;&quot;);
		if(strRaiseError == &quot;Y&quot;)
		{
			throw(e);
		}
	}
	finally
	{
		inProp		= null;
		outProp		= null;
		BS			= null;
		bcPickMSISDN	= null;
		bcContactLogWrite = null;
		bcContactLog = null;
		boAccount	= null;
	}
}"
			   SEQUENCE="37"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="06/16/2010 06:10:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateModifyOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateModifyOrder (Inputs, Outputs)
{
	try
	{
		var strAssetId       = Inputs.GetProperty (&quot;AssetId&quot;);
		var strMethod        = Inputs.GetProperty (&quot;Method&quot;);
		var strAccountId     = &quot;&quot;;
		var strBillAccountId = &quot;&quot;;
		var strOrderId       = &quot;&quot;;
		var strAssetIntId    = &quot;&quot;;
		
		var strAssetSrcExpr     = &quot;[Id] = &apos;&quot;+strAssetId+&quot;&apos;&quot;;
		var strAccountSrcExpr   = &quot;&quot;;
		var strBillAccntSrcExpr = &quot;&quot;;
		var strOrderItemSrcExpr = &quot;&quot;;
		
		var psInputs  : PropertySet = TheApplication ().NewPropertySet ();
		var psOutputs : PropertySet = TheApplication ().NewPropertySet ();
		
		var boAccount    : BusObject = TheApplication ().GetBusObject (&quot;Account&quot;);
		var bcAccount    : BusComp = boAccount.GetBusComp (&quot;Account&quot;);
		var bcBillingAcc : BusComp = boAccount.GetBusComp (&quot;Billing Account&quot;);
		var bcAccntAsset : BusComp = boAccount.GetBusComp (&quot;Asset Mgmt - Asset - Header&quot;);
		
		var boAsset : BusObject = TheApplication ().GetBusObject (&quot;Asset Management&quot;);
		var bcAsset : BusComp = boAsset.GetBusComp (&quot;Asset Mgmt - Asset - Header&quot;);
		
		var boOrderItem : BusObject = TheApplication ().GetBusObject (&quot;Order Item&quot;);
		var bcOrderItem : BusComp = boOrderItem.GetBusComp (&quot;Order Entry - Line Items&quot;);
		
		bcAsset.ClearToQuery ();
		bcAsset.SetViewMode (AllView);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strAssetId&quot;,strAssetId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		bcAsset.SetSearchExpr (strAssetSrcExpr);
		bcAsset.ExecuteQuery(ForwardOnly);
		
		if (bcAsset.FirstRecord ())
		{
			strAccountId     = bcAsset.GetFieldValue (&quot;Owner Account Id&quot;);
			strBillAccountId = bcAsset.GetFieldValue (&quot;Billing Account Id&quot;);
			var strWebServiceCall = bcAsset.GetFieldValue (&quot;Web Service Call&quot;);
			var strCfgRelFlag = bcAsset.GetFieldValue (&quot;Cfg Latest Released Flag&quot;);
						
			strAccountSrcExpr   = &quot;[Id] = &apos;&quot;+strAccountId+&quot;&apos;&quot;;
			strBillAccntSrcExpr = &quot;[Id] = &apos;&quot;+strBillAccountId+&quot;&apos;&quot;;
		}
		else
		{
			TheApplication ().RaiseErrorText (&quot;The Asset Id :: &quot;+strAssetId+&quot; does not exist&quot;);
		}
		
		bcAccount.ClearToQuery ();
		bcAccount.SetViewMode(AllView);
		bcAccount.SetSearchExpr (strAccountSrcExpr);
		bcAccount.ExecuteQuery(ForwardOnly);
		
		if (bcAccount.FirstRecord ())
		{
			bcBillingAcc.ClearToQuery ();
			bcBillingAcc.SetViewMode (AllView);
			bcBillingAcc.SetSearchExpr (strBillAccntSrcExpr);
			bcBillingAcc.ExecuteQuery(ForwardOnly);
			
			if (bcBillingAcc.FirstRecord ())
			{
				bcAccntAsset.ClearToQuery ();
				bcAccntAsset.SetViewMode (AllView);
				bcAccntAsset.SetSearchExpr (strAssetSrcExpr);
				bcAccntAsset.ExecuteQuery(ForwardOnly);
				
				if (bcAccntAsset.FirstRecord ())
				{
					bcAccntAsset.InvokeMethod (strMethod, psInputs, psOutputs);
					
					strAssetIntId = bcAccntAsset.GetFieldValue (&quot;Integration Id&quot;);
					strOrderItemSrcExpr = &quot;[Asset Integration Id] = &apos;&quot; + strAssetIntId + &quot;&apos;&quot;;
					
					bcOrderItem.ClearToQuery ();
					bcOrderItem.SetViewMode (AllView);
					bcOrderItem.ActivateField (&quot;Order Header Id&quot;);
					bcOrderItem.ActivateField (&quot;Asset Integration Id&quot;);
					bcOrderItem.SetSortSpec(&quot;Created (DESCENDING)&quot;);
					bcOrderItem.SetSearchExpr (strOrderItemSrcExpr);
					bcOrderItem.ExecuteQuery(ForwardOnly);
					
					if (bcOrderItem.FirstRecord ())
					{
						strOrderId = bcOrderItem.GetFieldValue (&quot;Order Header Id&quot;);
					}
				}
			}
		}
	}
	finally
	{
		Outputs.SetProperty (&quot;OrderId&quot;, strOrderId);
		psInputs            = null;
		psOutputs           = null;		
		bcAccount           = null;
		bcAsset             = null;
		bcBillingAcc        = null;
		bcAccntAsset        = null;
		boAsset             = null;	
		bcOrderItem			= null;
		boOrderItem			= null;	
		boAccount           = null;
		inProp				= null;
		outProp				= null;
		BS					= null;
	}
}"
			   SEQUENCE="38"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSR (Inputs, Outputs)
{
	/******************************************************************************
	* ACS  01-Aug-07 : Created                                                  
	* Description    : This is a general pourpose script that can be used to
    *				   create Service Request given the Service Request details
	*                  as input.                         
	******************************************************************************/
	try
	{
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	
		var boServiceReq : BusObject = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcServiceReq : BusComp = boServiceReq.GetBusComp(&quot;Service Request&quot;);
		
		var strOwner = Inputs.GetProperty(&quot;Owner Group&quot;); 
		var strStatus = Inputs.GetProperty(&quot;Status&quot;);
		var strSubStatus = Inputs.GetProperty(&quot;Sub Status&quot;);
		var strArea = Inputs.GetProperty(&quot;Area&quot;);
		var strSubArea = Inputs.GetProperty(&quot;Sub Area&quot;);
		var strType = Inputs.GetProperty(&quot;Type&quot;);
		var strAccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var strAssetId = &quot;&quot;;
		var strDesc = &quot;&quot;;
		
		//get the Customer Organization Id
		var boAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var bcAccount : BusComp = boAccount.GetBusComp(&quot;Account&quot;);
		var bcPickOwner : BusComp;
		
		bcAccount.ClearToQuery();
		bcAccount.SetViewMode(AllView);
		bcAccount.ActivateField(&quot;Organization Id&quot;);
		// VFTK Junaid 20120514 - Added for Oracle Review 15
		inProp.SetProperty(&quot;strAccountId&quot;, strAccountId); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End		
		bcAccount.SetSearchSpec(&quot;Id&quot;, strAccountId);
		bcAccount.ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
	
		if (bcAccount.FirstRecord())
		{
			var strOrgId = bcAccount.GetFieldValue(&quot;Organization Id&quot;);
		}		
		
		bcServiceReq.NewRecord(NewAfter);
		var strSRid = bcServiceReq.GetFieldValue(&quot;Id&quot;);
		var psInputs : PropertySet = TheApplication().NewPropertySet();
		var psOutputs: PropertySet = TheApplication().NewPropertySet();
		psInputs.SetProperty(&quot;Service Request Id&quot;, strSRid);
		psInputs.SetProperty(&quot;Organization Id&quot;, strOrgId);
		//Set SR Oganization Same as Customer/Order Organization
		SetItemOrganization(psInputs, psOutputs);
		bcServiceReq.SetFieldValue(&quot;Status&quot;, strStatus);
		bcServiceReq.SetFieldValue(&quot;Sub-Status&quot;, strSubStatus);
		bcServiceReq.SetFieldValue(&quot;Account Id&quot;, strAccountId);
		bcServiceReq.SetFieldValue(&quot;SR Type&quot;, strType);
		bcServiceReq.WriteRecord();
		
	
		
		bcServiceReq.ClearToQuery();
		bcServiceReq.SetViewMode(AllView);
		bcServiceReq.ActivateField(&quot;Sub-Area&quot;);
		bcServiceReq.ActivateField(&quot;Area&quot;);
		bcServiceReq.ActivateField(&quot;Asset Id&quot;);
		bcServiceReq.ActivateField(&quot;Owned By Group Id&quot;);
		bcServiceReq.ActivateField(&quot;Owner Group&quot;);
		bcServiceReq.ActivateField(&quot;Description&quot;);
		bcServiceReq.ActivateField(&quot;Account Status&quot;);
		bcServiceReq.ActivateField(&quot;Priority&quot;);
		//VFTK junaid 20120514 - Added for oracle review 15
		inProp      = TheApplication().NewPropertySet();
		inProp.SetProperty(&quot;strSRid&quot;, strSRid); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End
		bcServiceReq.SetSearchSpec(&quot;Id&quot;, strSRid);
		bcServiceReq.ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
		
		if(bcServiceReq.FirstRecord())
		{
			var accstatus = bcServiceReq.GetFieldValue(&quot;Account Status&quot;);
			bcServiceReq.SetFieldValue(&quot;Asset Id&quot;, strAssetId);
			bcServiceReq.SetFieldValue(&quot;Type&quot;, strType);
			bcServiceReq.SetFieldValue(&quot;Area&quot;, strArea);
			bcServiceReq.SetFieldValue(&quot;Sub-Area&quot;, strSubArea);
			bcServiceReq.SetFieldValue(&quot;Description&quot;, strDesc);
			
			bcPickOwner = bcServiceReq.GetPicklistBusComp(&quot;Owner Group&quot;);
			bcPickOwner.ClearToQuery();
			bcPickOwner.SetViewMode(AllView);
			bcPickOwner.ActivateField(&quot;Name&quot;);
			//VFTK junaid 20120514 - Added for oracle review 15
			inProp      = TheApplication().NewPropertySet();
			inProp.SetProperty(&quot;strOwner&quot;, strOwner); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
			//End
			bcPickOwner.SetSearchSpec(&quot;Name&quot;, strOwner);
			bcPickOwner.ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review

			var recordExists = bcPickOwner.FirstRecord ();
		
			if(bcPickOwner.FirstRecord())
			{
				bcPickOwner.Pick();
				var strOwnerGroupId = bcPickOwner.GetFieldValue(&quot;Id&quot;);
				bcServiceReq.SetFieldValue(&quot;Owned By Group Id&quot;, strOwnerGroupId);
			}		
			bcServiceReq.WriteRecord();
		}		
		Outputs.SetProperty (&quot;Service Request Id&quot;, strSRid);

	}
	finally
	{
		inProp = null;
		outProp = null;
		BS = null;
		bcPickOwner = null;
		bcServiceReq = null;
		boServiceReq = null;
		psInputs = null;
		psOutputs = null;
		bcAccount	= null;
		boAccount = null;
	}			
}"
			   SEQUENCE="39"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DateToString"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DateToString (dDate)
{ 
	/******************************************************************************
	* ACS AD 26-Jul-06 : Created                                                  *
	* Description      : This is a general pourpose script that takes a date as   *
	*                    input and returns its string equivalent.                 *
	******************************************************************************/
	var sMonth = ToString(dDate.getMonth() + 1); 
	if (sMonth.length == 1)
	{
		sMonth = &quot;0&quot; + sMonth;
	} 
	var sDay = ToString(dDate.getDate()); 
	if (sDay.length == 1) 
	{
		sDay = &quot;0&quot; + sDay;
	} 
	var sHours = ToString(dDate.getHours());
	if (sHours.length == 1) 
	{
		sHours = &quot;0&quot; + sHours;
	}
	var sMinutes = ToString(dDate.getMinutes());
	if (sMinutes.length == 1) 
	{
		sMinutes = &quot;0&quot; + sMinutes;
	} 
	var sSeconds = ToString(dDate.getSeconds());
	if (sSeconds.length == 1) 
	{
		sSeconds = &quot;0&quot; + sSeconds;
	} 
	if (sHours == &quot;00&quot; &amp;&amp; sMinutes == &quot;00&quot; &amp;&amp; sSeconds == &quot;00&quot;)
	{
	    return (sMonth +&quot;/&quot;+ sDay +&quot;/&quot; + dDate.getFullYear());
    }
	else 
    {
	    return (dDate.getFullYear() + sMonth + sDay + &quot;_&quot; + sHours + sMinutes + sSeconds);
    }
}"
			   SEQUENCE="40"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ExtractAttribValue"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ExtractAttribValue (Inputs, Outputs)
{
	/******************************************************************************
	* ACS AD 26-Jul-06 : Created                                                  *
	* Description      : This is a general pourpose script that can be used to    *
	*                    extract attribute values of a particular attribute of    *
	*                    a product. It takes the Order Id, Line Item Product Name *
	*                    and the attribute name as input and gives tha attribute  *
	*                    value as output.                                         *
	******************************************************************************/
	try
	{
		// ACS AD 26-07-06 :: Extract the input arguements
		var strOrderId       = Inputs.GetProperty(&quot;OrderId&quot;);
		//VFTK Junaid 20120520 - Added for Oracle Review 15
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;, strOrderId); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End
		var strLineItemName  = Inputs.GetProperty (&quot;LineItemName&quot;);
		var strAttributeName = Inputs.GetProperty (&quot;AttributeName&quot;);
		
		var strOrderSRCExpr   = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strProductName    = &quot;&quot;;
		var strAttributeValue = &quot;&quot;;
		var strAttribName     = &quot;&quot;;
		
		var booRecordExists;
		var booRecordExists1;
		var booRecordFound = &quot;N&quot;;
		
		// ACS AD 26-07-06 :: Create BO, BC instances
		var boOrderEntry     :BusObject	= TheApplication().GetBusObject (&quot;TELCO Order Item - Simple&quot;);
		//var bcOrderEntry     :BusComp	= boOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		var bcOrderLineItems :BusComp	= boOrderEntry.GetBusComp (&quot;TELCO Line Items - Simple&quot;);
		var bcOrderItemXA    :BusComp	= boOrderEntry.GetBusComp (&quot;TELCO Line Items XA - Simple&quot;);
		
		// ACS AD 26-07-06 :: Query the components to find the attribute value
		//bcOrderEntry.ClearToQuery ();
		//bcOrderEntry.SetViewMode (AllView);
		//bcOrderEntry.SetSearchExpr (strOrderSRCExpr);
		//bcOrderEntry.ExecuteQuery(ForwardOnly);//Review Parent-Child Query: There is no query for other BC’s in BO, so this query cannot be removed 4/24/2012 Udbhav IDC
		
		//if (bcOrderEntry.FirstRecord ())
		//{
			bcOrderLineItems.ClearToQuery ();
			bcOrderLineItems.SetViewMode (AllView);
			bcOrderLineItems.ActivateField (&quot;Product&quot;);
			bcOrderItemXA.ActivateField(&quot;Display Name&quot;);
			bcOrderItemXA.ActivateField(&quot;Value&quot;);
			bcOrderLineItems.SetSearchSpec (&quot;Order Header Id&quot;,strOrderId);
			bcOrderLineItems.ExecuteQuery(ForwardOnly);
			booRecordExists = bcOrderLineItems.FirstRecord ();
			
		if(booRecordExists)
		{
			while (booRecordExists &amp;&amp; booRecordFound == &quot;N&quot;)
			{
				strProductName = bcOrderLineItems.GetFieldValue(&quot;Product&quot;);
				
				if ((strProductName == strLineItemName) || (strLineItemName.length == 0))
				{
					booRecordExists1 = bcOrderItemXA.FirstRecord ();
					while (booRecordExists1 &amp;&amp; booRecordFound == &quot;N&quot;)
					{
						strAttribName = bcOrderItemXA.GetFieldValue (&quot;Display Name&quot;);
						if (strAttribName == strAttributeName)
						{
							strAttributeValue = bcOrderItemXA.GetFieldValue (&quot;Value&quot;);
							booRecordFound = &quot;Y&quot;;
						}
						booRecordExists1 = bcOrderItemXA.NextRecord ();
					}
				}
				booRecordExists = bcOrderLineItems.NextRecord ();
			}
		}
		else
		{
			TheApplication().RaiseErrorText (&quot;Order Id &quot;+strOrderId+&quot; is not valid&quot;);
		}
		Outputs.SetProperty (&quot;AttributeValue&quot;, strAttributeValue);
	}
	finally
	{
		//bcOrderEntry      = null;
		bcOrderLineItems  = null;
		bcOrderItemXA     = null;
		boOrderEntry      = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="41"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ExtractAttribValue_Id"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ExtractAttribValue_Id (Inputs, Outputs)
{
	try
	{
		// ACS AD 26-07-06 :: Extract the input arguements
		var strOrderId       = Inputs.GetProperty(&quot;OrderId&quot;);
		var strLineItemId  = Inputs.GetProperty (&quot;LineItemId&quot;);
		var strAttributeName = Inputs.GetProperty (&quot;AttributeName&quot;);
		
		var strOrderSRCExpr   = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strProductId      = &quot;&quot;;
		var strAttributeValue = &quot;&quot;;
		var strAttribName     = &quot;&quot;;
		
		var booRecordExists;
		var booRecordExists1;
		var booRecordFound = &quot;N&quot;;
		
		// ACS AD 26-07-06 :: Create BO, BC instances
		var boOrderEntry     : BusObject = TheApplication().GetBusObject (&quot;TELCO Order Item - Simple&quot;);
		//var bcOrderEntry     : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		var bcOrderLineItems : BusComp = boOrderEntry.GetBusComp (&quot;TELCO Line Items - Simple&quot;);
		var bcOrderItemXA    : BusComp = boOrderEntry.GetBusComp (&quot;TELCO Line Items XA - Simple&quot;);
		
		// ACS AD 26-07-06 :: Query the components to find the attribute value
		//bcOrderEntry.ClearToQuery ();
		//bcOrderEntry.SetViewMode (AllView);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);	
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		//bcOrderEntry.SetSearchExpr (strOrderSRCExpr);//VFTK Venkata 16/05/2012 Scripting15:No changes since OrderId is required input
		//bcOrderEntry.ExecuteQuery(ForwardOnly);//VFTK Venkata 16/05/2012 Scripting31:No changes since no child query exists
		
		//if (bcOrderEntry.FirstRecord ())
		//{
			bcOrderLineItems.ClearToQuery ();
			bcOrderLineItems.SetViewMode (AllView);
			bcOrderLineItems.SetSearchSpec (&quot;Order Header Id&quot;,strOrderId);
			bcOrderItemXA.ActivateField(&quot;Display Name&quot;);
			bcOrderItemXA.ActivateField(&quot;Value&quot;);
			bcOrderLineItems.ExecuteQuery(ForwardOnly);
			booRecordExists = bcOrderLineItems.FirstRecord ();
		
		if(booRecordExists)
		{
			while (booRecordExists &amp;&amp; booRecordFound == &quot;N&quot;)
			{
				strProductId = bcOrderLineItems.GetFieldValue (&quot;Id&quot;);
				
				if (strProductId == strLineItemId)
				{
					booRecordExists1 = bcOrderItemXA.FirstRecord ();
					while (booRecordExists1 &amp;&amp; booRecordFound == &quot;N&quot;)
					{
						strAttribName = bcOrderItemXA.GetFieldValue (&quot;Display Name&quot;);
						if (strAttribName == strAttributeName)
						{
							strAttributeValue = bcOrderItemXA.GetFieldValue (&quot;Value&quot;);
							booRecordFound = &quot;Y&quot;;
						}
						booRecordExists1 = bcOrderItemXA.NextRecord ();
					}
				}
				booRecordExists = bcOrderLineItems.NextRecord ();
			}
		}
		else
		{
			TheApplication().RaiseErrorText (&quot;Order Id &quot;+strOrderId+&quot; is not valid&quot;);
		}
		Outputs.SetProperty (&quot;AttributeValue&quot;, strAttributeValue);
	}
	finally
	{
		//bcOrderEntry      = null;
		bcOrderLineItems  = null;
		bcOrderItemXA     = null;
		inProp			  = null;
		boOrderEntry      = null;
		outProp			  = null;
		BS				  = null;
	}
}"
			   SEQUENCE="42"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ExtractValueFromXML"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ExtractValueFromXML (psInputs, psOutputs)
{
	try
	{
		var psInputs1  : PropertySet = TheApplication().NewPropertySet ();
		var psOutputs1 : PropertySet = TheApplication().NewPropertySet ();
		var strFieldName     = psInputs.GetProperty (&quot;Field Name&quot;);
		var strInvoiceResult = &quot;&quot;;	
		var intCounter    = 0;
		var intChildCount = 0;
		
		if (psInputs.PropertyExists(strFieldName))
		{
			psOutputs.SetProperty(&quot;Field Value&quot;, psInputs.GetProperty (strFieldName));
		}
		else
		{
			intChildCount = psInputs.GetChildCount();
			for (intCounter = 0; intCounter &lt; intChildCount; intCounter++)
			{
				psInputs1 = psInputs.GetChild (intCounter);
				psInputs1.SetProperty (&quot;Field Name&quot;, strFieldName);
				ExtractValueFromXML (psInputs1, psOutputs1);
				strInvoiceResult = psOutputs1.GetProperty (&quot;Field Value&quot;);
				
				if (strInvoiceResult.length &gt; 0)
				{
					psOutputs.SetProperty(&quot;Field Value&quot;, strInvoiceResult);
					break;
				}
			}
		}
	}
	finally
	{
		psInputs1 = null;
		psOutputs1 = null;
	}
}"
			   SEQUENCE="43"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GIBOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GIBOrder(Inputs,Outputs)
{
	try
	{
		var strGIBEnabled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_ABLE_LOV&quot;,&quot;GIBEnabled&quot;);
		if(strGIBEnabled==&quot;Y&quot;)
		{
			var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
			var bcOrder : BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
			var bcLineItem : BusComp = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
			var bcItemXA : BusComp = 	boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);		
			var CheckGIBDate = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_DATE&quot;,&quot;GIBdate&quot;);
			var strOrderId = Inputs.GetProperty(&quot;Order Id&quot;);
			//VFTK Junaid 20120520 - Added for Oracle Review 15
			var inProp :PropertySet     = TheApplication().NewPropertySet();
			var outProp :PropertySet    = TheApplication().NewPropertySet();
			var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strOrderId&quot;, strOrderId); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
			//End
			var strSearchSpec = &quot;[Order Header Id]=&apos;&quot;+strOrderId+&quot;&apos; AND [Product Number]=&apos;1000&apos;&quot;;
			var strSearchSpecRoaming = &quot;[Order Header Id]=&apos;&quot;+strOrderId+&quot;&apos; AND [Product Number]=&apos;1110&apos;&quot;;
			var strSearchIC = &quot;[Order Header Id]=&apos;&quot;+strOrderId+&quot;&apos; AND [Product Number]=&apos;1111&apos;&quot;;	
			var Add= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
			var Update =TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Modified&quot;);
			var strGIBVerLookup=TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerified&quot;);
			var GIBAppr = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBApproved&quot;);
			var GIBApprDown = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBApprovedDown&quot;);
			var GIBVerDown = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerifiedDown&quot;);
			var GIBDown = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverifiedDown&quot;);
			var GIBUnverified = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;);
			var strNoTaxId = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;, &quot;noTaxId&quot;);
			var GIBAccStatLook = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;Y&quot;);	
			bcOrder.SetViewMode(AllView);
			bcOrder.ClearToQuery();
			bcOrder.ActivateField(&quot;VF Tax Number&quot;);
			bcOrder.ActivateField(&quot;VF GIB Account Status&quot;);
			bcOrder.ActivateField(&quot;VF GIB Ver Status&quot;);
			bcOrder.ActivateField(&quot;VF GIB Date Calc&quot;);
			bcOrder.ActivateField(&quot;VFOrderSubCalc&quot;);
			bcOrder.ActivateField(&quot;VFOrderTypeCalc&quot;);
			bcOrder.ActivateField(&quot;VF GIB Order Calc&quot;);
			bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderId);
			bcOrder.ExecuteQuery(ForwardOnly);
			var booRecord = bcOrder.FirstRecord();
			if(booRecord)
			{
				var strTaxNumber = bcOrder.GetFieldValue(&quot;VF Tax Number&quot;);
				var strGIBCompStat = bcOrder.GetFieldValue(&quot;VF GIB Account Status&quot;);
				var strGIBVerstat = bcOrder.GetFieldValue(&quot;VF GIB Ver Status&quot;);
				var strGIBType = bcOrder.GetFieldValue(&quot;VF GIB Order Calc&quot;);
				var GIBLastVerDate = bcOrder.GetFieldValue(&quot;VF GIB Date Calc&quot;);
				var strGIBOrderSubType = bcOrder.GetFieldValue(&quot;VFOrderSubCalc&quot;);
				var strOrderType = bcOrder.GetFieldValue(&quot;VFOrderTypeCalc&quot;);
				if(strOrderType==&quot;Y&quot;)
				{				//Scripting 31: Child Query cannot be removed since the validation is done before Child BC query
					bcLineItem.SetViewMode(AllView);
					bcLineItem.ClearToQuery();
					bcLineItem.SetSearchExpr(strSearchSpec);
					bcLineItem.ExecuteQuery(ForwardOnly);
					var booRecord = bcLineItem.FirstRecord();
					if(booRecord)
					{
						if(strGIBVerstat==strGIBVerLookup||strGIBVerstat==GIBAppr||strGIBVerstat==GIBApprDown || strGIBVerstat==GIBVerDown)
						{
							if(strGIBCompStat==GIBAccStatLook)
							{
								if(GIBLastVerDate&gt;(CheckGIBDate*30))
								{
									Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
									Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);									
								}								
							}
							else
							{								
								Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
								Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);	
							}
						}
						else if((strGIBVerstat==GIBDown)||(strGIBVerstat==GIBUnverified))
						{
							Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
							Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);							
							Outputs.SetProperty(&quot;DisplayMsg20&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;296&quot;));							
						}							
					}	
				}
				else if(strGIBType==&quot;Y&quot;)
				{
					bcLineItem.SetViewMode(AllView);
					bcLineItem.ClearToQuery();
					bcLineItem.SetSearchExpr(strSearchSpec);
					bcLineItem.ExecuteQuery(ForwardOnly);
					var booRecord = bcLineItem.FirstRecord();
					if(booRecord)
					{
						if(strGIBVerstat==strGIBVerLookup||strGIBVerstat==GIBAppr||strGIBVerstat==GIBApprDown || strGIBVerstat==GIBVerDown)
						{
							if(strGIBCompStat==GIBAccStatLook)
							{
								if(GIBLastVerDate&gt;(CheckGIBDate*30))
								{
									Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));	
									Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);
								}
								else
								{
								}
							}
							else
							{
								Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
								Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);	
							}
						}
						else if((strGIBVerstat==GIBDown)||(strGIBVerstat==GIBUnverified))
						{
							Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
							Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);							
							Outputs.SetProperty(&quot;DisplayMsg20&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;296&quot;));							
						}
					}
				}			
				else if(strGIBOrderSubType==&quot;Y&quot;)
				{
					bcLineItem.SetViewMode(AllView);
					bcLineItem.ClearToQuery();
					bcLineItem.SetSearchExpr(strSearchSpecRoaming);
					bcLineItem.ExecuteQuery(ForwardOnly);
					var booRecord = bcLineItem.FirstRecord();
					if(booRecord)
					{
						var strRoamingId = bcLineItem.GetFieldValue(&quot;Id&quot;);
						//VFTK Junaid 20120520 - Scripting 15 not needed as getfieldvalue of id wont return a null value
						var strSearchSpecXA = &quot;[Object Id]=&apos;&quot; +strRoamingId + &quot;&apos; AND ([Display Name]=&apos;Roaming Data Bar&apos;  OR [Display Name]=&apos;Roaming Voice Bar&apos;) AND [Text Value]=&apos;Y&apos;  AND ([Action Code]=&apos;&quot; +Add+&quot;&apos; OR [Action Code]=&apos;&quot; +Update+ &quot;&apos;)&quot;;
						bcItemXA.SetViewMode(AllView);
						bcItemXA.ClearToQuery();
						bcItemXA.SetSearchExpr(strSearchSpecXA);
						bcItemXA.ExecuteQuery(ForwardOnly);
						var strRoamingExist = bcItemXA.FirstRecord();
						if(strRoamingExist)
						{
							if(strGIBVerstat==strGIBVerLookup||strGIBVerstat==GIBAppr||strGIBVerstat==GIBApprDown || strGIBVerstat==GIBVerDown)
							{
								if(strGIBCompStat==GIBAccStatLook)
								{
									if(GIBLastVerDate&gt;(CheckGIBDate*30))
									{
										Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
										Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);
									}
									else
									{
									}
								}
								else
								{
									Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
									Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);	
								}
							}
							else if((strGIBVerstat==GIBDown)||(strGIBVerstat==GIBUnverified))
							{
								Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
								Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);							
								Outputs.SetProperty(&quot;DisplayMsg20&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;296&quot;));							
							}						
						}
						else
						{
							bcLineItem.SetViewMode(AllView);
							bcLineItem.ClearToQuery();
							bcLineItem.SetSearchExpr(strSearchIC);
							bcLineItem.ExecuteQuery(ForwardOnly);
							var booRecord = bcLineItem.FirstRecord();
							if(booRecord)
							{
								if(strGIBVerstat==strGIBVerLookup||strGIBVerstat==GIBAppr||strGIBVerstat==GIBApprDown || strGIBVerstat==GIBVerDown)
								{
									if(strGIBCompStat==GIBAccStatLook)
									{
										if(GIBLastVerDate&gt;(CheckGIBDate*30))
										{
											Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));	
											Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);
										}
										else
										{
										}
									}
									else
									{
										Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
										Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);	
									}
								}
								else if((strGIBVerstat==GIBDown)||(strGIBVerstat==GIBUnverified))
								{
									Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
									Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);							
									Outputs.SetProperty(&quot;DisplayMsg20&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;296&quot;));							
								}	
							}
						}					
					}
					else
					{
						bcLineItem.SetViewMode(AllView);
						bcLineItem.ClearToQuery();
						bcLineItem.SetSearchExpr(strSearchIC);
						bcLineItem.ExecuteQuery(ForwardOnly);
						var booRecord = bcLineItem.FirstRecord();
						if(booRecord)
						{
							if(strGIBVerstat==strGIBVerLookup||strGIBVerstat==GIBAppr||strGIBVerstat==GIBApprDown || strGIBVerstat==GIBVerDown)
							{
								if(strGIBCompStat==GIBAccStatLook)
								{
									if(GIBLastVerDate&gt;(CheckGIBDate*30))
									{
										Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
										Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);	
									}
									else
									{
									}
								}
								else
								{
									Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
									Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);
								}
							}
							else if((strGIBVerstat==GIBDown)||(strGIBVerstat==GIBUnverified))
							{
								Outputs.SetProperty(&quot;DisplayMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
								Outputs.SetProperty(&quot;VFTaxNumber&quot;,strTaxNumber);							
								Outputs.SetProperty(&quot;DisplayMsg20&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;296&quot;));							
							}	
						}
					}
				}				
			}		
		}
	}
	finally
	{
		Outputs.SetProperty(&quot;VFGIBVerStat&quot;,strGIBVerstat);
		inProp = null;
		outProp = null;
		BS = null;
		bcOrder = null;
		bcLineItem = null;
		bcItemXA	= null;
		boOrder 	= null;
	}
}"
			   SEQUENCE="61"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/20/2011 13:16:07"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAssetIntegrationId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAssetIntegrationId (Inputs, Outputs)
{
	try
	{
		var strOrderItemId = Inputs.GetProperty (&quot;Line Item Id&quot;);
		var strAssetIntegrationId = &quot;&quot;;
		var strSearchExpr = &quot;[Id] = &apos;&quot;+strOrderItemId+&quot;&apos;&quot;;
	
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderItemId&quot;,strOrderItemId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		var boOrderItem : BusObject = TheApplication ().GetBusObject (&quot;TELCO Order Item - Simple&quot;);	
		var bcOrderItem : BusComp = boOrderItem.GetBusComp (&quot;TELCO Line Items - Simple&quot;);
		
		bcOrderItem.ClearToQuery ();
		bcOrderItem.SetViewMode(AllView);
		bcOrderItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcOrderItem.SetSearchExpr (strSearchExpr);
		bcOrderItem.ExecuteQuery (ForwardOnly);
		
		if (bcOrderItem.FirstRecord ())
		{
			strAssetIntegrationId = bcOrderItem.GetFieldValue (&quot;Asset Integration Id&quot;);
		}
	}
	finally
	{
		Outputs.SetProperty (&quot;Asset Integration Id&quot;, strAssetIntegrationId);
		bcOrderItem = null;
		boOrderItem	= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="45"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAvailableCampaignList"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAvailableCampaignList(Inputs,Outputs)
{
	try
	{
		var RiskStatus = Inputs.GetProperty(&quot;RiskStatus&quot;);
		var TotalInvoice = Inputs.GetProperty(&quot;TotalInvoice&quot;);
		var AverageInvoice = Inputs.GetProperty(&quot;AverageInvoice&quot;);
		var LineType = Inputs.GetProperty(&quot;LineType&quot;);
		var SearchStr = &quot;&quot;; 
		if (LineType == &quot;MNP&quot;)//Scripting 15: The inputs can have null value also so we cannot apply null check.
		{
			SearchStr = &quot;[Function] = &apos;VFCampaigns&apos; AND (([Attrib01] = &apos;&quot;+RiskStatus+&quot;&apos; AND [Attrib03] = &apos;&quot;+AverageInvoice+&quot;&apos;) OR ([Attrib01] is null AND [Attrib03] is null))&quot;;
		}
		else if (LineType == &quot;BASE&quot;)
		{
			SearchStr = &quot;[Function] = &apos;VFCampaigns&apos; AND (([Attrib01] = &apos;&quot;+RiskStatus+&quot;&apos; AND [Attrib02] = &apos;&quot;+TotalInvoice+&quot;&apos;) OR ([Attrib01] is null AND [Attrib02] is null))&quot;;		
		}
		
		var PrevProdName = &quot;&quot;;
		var ProdName = &quot;&quot;;
		var outPropset : PropertySet = TheApplication().NewPropertySet();
		outPropset.SetType(&quot;AvailableCampaignList&quot;);
		var ItemsNumber = 1;
		var propSetName = &quot;&quot;;
		var propSetValue = &quot;&quot;;		
		var CXParBO : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var CXParBC : BusComp = CXParBO.GetBusComp(&quot;ACS NI Parameter&quot;);
		with(CXParBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(SearchStr);
			SetSortSpec(&quot;Name(ASCENDING)&quot;);
			ExecuteQuery(ForwardOnly);
			var isCamp = FirstRecord();
			while (isCamp)
			{
				ProdName = GetFieldValue(&quot;Name&quot;);
				if (ProdName != PrevProdName)
				{
					propSetName  = &quot;AvailableCampaignList&quot;+ItemsNumber;
					propSetValue  = ProdName;
					outPropset.SetProperty (propSetName, propSetValue);
					ItemsNumber++;
				}
				PrevProdName = ProdName;
				isCamp = NextRecord();
			}
		}
		outPropset.SetType(&quot;AvailableCampaignList&quot;);
		Outputs.AddChild(outPropset);
	}
	finally
	{
		CXParBC = null;
		CXParBO = null;
		outPropset = null;
	}
}"
			   SEQUENCE="46"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="06/09/2011 21:13:18"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCDRProfileAttibutes"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCDRProfileAttibutes()
{
//*****************************************************
//** Function: GetCDRProfileAttibutes
//** Purpose:  Gets query attributes CDR form applet.
//** Inputs :  MethodName, Inputs
//** Outputs:  Outputs
//** Returns:  None.
//*****************************************************
//** Revision History:
//** 01 - 06/11/2011 - Parasuram Mainam
//**    VFTK Project R142-WP15 Release - Created New.
//*****************************************************
	try
	{
		  var oApp=TheApplication();
		  var bcCDR	: BusComp = oApp.ActiveBusObject().GetBusComp(&quot;VF CDR Inquiry VBC&quot;);
		  var sExpr = &quot;&quot;;
		  if(bcCDR!=null)
		  {
		    with(bcCDR)
		    {
					var strCdrSourceCode=GetFieldValue(&quot;CDR_SOURCE_CODE_IN&quot;);
					if(strCdrSourceCode!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_CdrSourceCode&quot;, strCdrSourceCode);
						sExpr=sExpr+&quot;[CDR_SOURCE_CODE]=[&quot;+strCdrSourceCode+&quot;]\n&quot;;
					}
					/*
					var strMaxAmount=GetFieldValue(&quot;MAX_AMOUNT_IN&quot;);
					if(strMaxAmount!=&quot;&quot;)
					{
						strMaxAmount=strMaxAmount*1000000+&quot;&quot;;		
						oApp.SetProfileAttr(&quot;CDR_MaxAmount&quot;, strMaxAmount);
						sExpr=sExpr+&quot;[MAX_AMOUNT]=[&quot;+strMaxAmount+&quot;]\n&quot;;
					}
					var strMinAmount=GetFieldValue(&quot;MIN_AMOUNT_IN&quot;);
					if(strMinAmount!=&quot;&quot;)
					{
						strMinAmount=strMinAmount*1000000+&quot;&quot;;
						oApp.SetProfileAttr(&quot;CDR_MinAmount&quot;, strMinAmount);
						sExpr=sExpr+&quot;[MIN_AMOUNT]=[&quot;+strMinAmount+&quot;]\n&quot;;
					}
					var strMinDuration=GetFieldValue(&quot;MIN_DURATION_IN&quot;);
					if(strMinDuration!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_MinDuration&quot;, strMinDuration);
						sExpr=sExpr+&quot;[MIN_DURATION]=[&quot;+strMinDuration+&quot;]\n&quot;;
					}
					var strMaxDuration=GetFieldValue(&quot;MAX_DURATION_IN&quot;);
					if(strMaxDuration!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_MaxDuration&quot;, strMaxDuration);
						sExpr=sExpr+&quot;[MAX_DURATION]=[&quot;+strMaxDuration+&quot;]\n&quot;;
					}*/
					var strCallType=GetFieldValue(&quot;CALL_TYPE_IN&quot;);
					if(strCallType!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_CallType&quot;, strCallType);
						sExpr=sExpr+&quot;[CALL_TYPE]=[&quot;+strCallType+&quot;]\n&quot;;
					}
					var strCalledNumber=GetFieldValue(&quot;CALLED_NUMBER_IN&quot;);
					if(strCalledNumber!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_CalledNumber&quot;, strCalledNumber);
						sExpr=sExpr+&quot;[CALLED_NUMBER]=[&quot;+strCalledNumber+&quot;]\n&quot;;
					}
					var strCalledOperator=GetFieldValue(&quot;CALLED_OPERATOR_IN&quot;);
					if(strCalledOperator!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_CalledOperator&quot;, strCalledOperator);
						sExpr=sExpr+&quot;[CALLED_OPERATOR]=[&quot;+strCalledOperator+&quot;]\n&quot;;
					}
					/*
					var strCallingNumber=GetFieldValue(&quot;CALLING_NUMBER_IN&quot;);
					if(strCallingNumber!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_CallingNumber&quot;, strCallingNumber);
						sExpr=sExpr+&quot;[CALLING_NUMBER]=[&quot;+strCallingNumber+&quot;]\n&quot;;
					}
					var strMaxDiscountAmount=GetFieldValue(&quot;MAX_DISCOUNT_AMOUNT_IN&quot;);
					if(strMaxDiscountAmount!=&quot;&quot;)
					{
						strMaxDiscountAmount=strMaxDiscountAmount*1000000+&quot;&quot;;
						oApp.SetProfileAttr(&quot;CDR_MaxDiscountAmount&quot;, strMaxDiscountAmount);
						sExpr=sExpr+&quot;[MAX_DISCOUNT_AMOUNT]=[&quot;+strMaxDiscountAmount+&quot;]\n&quot;;
					}
					var strMinDiscountAmount=GetFieldValue(&quot;MIN_DISCOUNT_AMOUNT_IN&quot;);
					if(strMinDiscountAmount!=&quot;&quot;)
					{
						strMinDiscountAmount=strMinDiscountAmount*1000000+&quot;&quot;;
						oApp.SetProfileAttr(&quot;CDR_MinDiscountAmount&quot;, strMinDiscountAmount);
						sExpr=sExpr+&quot;[MIN_DISCOUNT_AMOUNT]=[&quot;+strMinDiscountAmount+&quot;]\n&quot;;
					}*/
					var strPeriodEndDate=GetFieldValue(&quot;PERIOD_END_DATE_IN&quot;);
					if(strPeriodEndDate!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_PeriodEndDate&quot;, strPeriodEndDate);
						sExpr=sExpr+&quot;[PERIOD_END_DATE]=[&quot;+strPeriodEndDate+&quot;]\n&quot;;
					}
					var strPeriodStartDate=GetFieldValue(&quot;PERIOD_START_DATE_IN&quot;);
					if(strPeriodStartDate!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_PeriodStartDate&quot;, strPeriodStartDate);
						sExpr=sExpr+&quot;[PERIOD_START_DATE]=[&quot;+strPeriodStartDate+&quot;]\n&quot;;
					}
					//JIRA-18014:Begin:20151005
					var strHideZero=GetFieldValue(&quot;HIDE_ZERO_IN&quot;);
					if(strHideZero!=&quot;&quot;)
					{
						oApp.SetProfileAttr(&quot;CDR_HideZero&quot;, strHideZero);
						sExpr=sExpr+&quot;[HIDE_ZERO_IN]=[&quot;+strHideZero+&quot;]\n&quot;;
					}
					//JIRA-18014:End
			}//with CDR Bc
			if(sExpr!=&quot;&quot;)
			{
				oApp.SetProfileAttr(&quot;CDR_SearchExpr&quot;, sExpr);
			}
		}//if null
	}
	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		bcCDR	= null;
		oApp	= null;
		//bcCDR	= null;
	}
}"
			   SEQUENCE="47"
			   UPDATED="01/17/2018 17:17:13"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="09/08/2011 10:53:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetDisplayValues"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetDisplayValues(Inputs, Outputs)
{
	try
	{
		var strBarring		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,&quot;Barring&quot;);
		var strMTUnbar		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,&quot;MTUnbar&quot;);
		var strUnbarring	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,&quot;Unbarring&quot;);
		var strResume		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,&quot;Resume&quot;);
		var strSuspension	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,&quot;Suspension&quot;);
		var strNone			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_FRAUD_TYPE&quot;,&quot;None&quot;);
		var strOpenStatus	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_CUT_CA_STATUS&quot;,&quot;Open&quot;);
		
		var strActionType	= Inputs.GetProperty(&quot;ActionType&quot;);
		var strStatus		= Inputs.GetProperty(&quot;strStatus&quot;);
	
		if((strStatus == strOpenStatus) &amp;&amp; (strActionType == strBarring || strActionType == strMTUnbar || strActionType == strUnbarring || strActionType == strResume || strActionType == strNone || strActionType == strSuspension))
		{
			if(strActionType == strBarring || strActionType == strMTUnbar)
				Outputs.SetProperty(&quot;Result&quot;,&quot;2&quot;);
			//CR172b
			else if(strActionType == strSuspension)
				Outputs.SetProperty(&quot;Result&quot;,&quot;3&quot;);
			//End of CR172b
			else 
				Outputs.SetProperty(&quot;Result&quot;,&quot;1&quot;);
		}
		else
			Outputs.SetProperty(&quot;Result&quot;,&quot;0&quot;);
	}
	finally{}
}"
			   SEQUENCE="48"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="07/11/2011 14:33:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetLookupMsg"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************************************
	Name 		: Anshita Tiwari                                                              
	Description : Search the Code associated to the Messages
	Inputs		: strCode
	Outputs		: strMsg
	Date 		: 21/08/2006                                 	
**************************************************************************/
function GetLookupMsg (Inputs, Outputs)
{
	try
	{
		var strCode	           = Inputs.GetProperty(&quot;Code&quot;);
		var strMessageCategory = Inputs.GetProperty(&quot;MessageCategory&quot;);		
		var strMessage = TheApplication().LookupMessage(strMessageCategory, strCode);
		
		Outputs.SetProperty(&quot;Message&quot;,strMessage);
	}
	finally
	{
		strMessage = null;
		strCode    = null;
		strMessageCategory = null;
	}
}"
			   SEQUENCE="49"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetLookupMsgArg"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetLookupMsgArg (Inputs, Outputs)
{
/**************************************************************************
	Name 		    : Diva                                                            
	Description : Search the Code associated to the Messages
	Inputs		  : strCode, MessageCategory, Arg1, Arg2, Arg3
	Outputs		  : strMsg
	Date 		    : 16/09/2011                                 	
**************************************************************************/
	var strCode	           = Inputs.GetProperty(&quot;Code&quot;);
	var strMessageCategory = Inputs.GetProperty(&quot;MessageCategory&quot;);
	var Arg1 = Inputs.GetProperty(&quot;Arg1&quot;);
	var Arg2 = Inputs.GetProperty(&quot;Arg2&quot;);
	var Arg3 = Inputs.GetProperty(&quot;Arg3&quot;);
	var strMessage = TheApplication().LookupMessage(strMessageCategory, strCode, Arg1, Arg2, Arg3);	
	Outputs.SetProperty(&quot;Message&quot;,strMessage);
}"
			   SEQUENCE="50"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="09/16/2011 15:31:19"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetLookupValue"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetLookupValue(Inputs, Outputs)
{
	//Oracle Review October 2011 - use the LookupValue
	try
	{
	   	var type = Inputs.GetProperty(&quot;LOV Type&quot;);
	   	var name = Inputs.GetProperty(&quot;LOV Name&quot;);
		Outputs.SetProperty(&quot;LOV Value&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,type, name));		   	
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;LOV Value&quot;,&quot;KO&quot;);		
	}
}"
			   SEQUENCE="51"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="04/11/2010 11:07:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="VFTK MC R1.3 20100802 - Added for Passing Language as input."
			   INACTIVE="N"
			   NAME="GetLookupValueLang"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetLookupValueLang(Inputs, Outputs)
{
	try
	{
		var boList  	    : BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var bcList		 	: BusComp = boList.GetBusComp(&quot;List Of Values&quot;);
		var langcode 		= TheApplication().InvokeMethod(&quot;Language&quot;);
		var langInput 		= Inputs.GetProperty(&quot;Lang&quot;);
		var type 			= Inputs.GetProperty(&quot;LOV Type&quot;);
		var name 			= Inputs.GetProperty(&quot;LOV Name&quot;);

		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;type&quot;,type);
		inProp.SetProperty(&quot;name&quot;,name);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		//Oracle Review October 2011 - use the LookupValue
	   	if(langInput == &quot;&quot; || langInput == langcode)
			Outputs.SetProperty(&quot;LOV Value&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,type, name));
		else{
			with (bcList)
			{
				ClearToQuery();
			    ActivateField(&quot;Value&quot;);
			   	SetSearchSpec(&quot;Type&quot;,type);
			   	SetSearchSpec(&quot;Name&quot;,name);
			   	SetSearchSpec(&quot;Language&quot;,langInput);
			   	SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
				{
					Outputs.SetProperty(&quot;LOV Value&quot;,GetFieldValue(&quot;Value&quot;));	
				}
				else
				{
					Outputs.SetProperty(&quot;LOV Value&quot;,&quot;KO&quot;);
				}
			}
		}
	}
	catch(e)
	{
		Outputs.SetProperty(&quot;LOV Value&quot;,&quot;KO&quot;);		
	}	
	finally
	{
		inProp		= null;
		outProp		= null;
		BS			= null;
		bcList			= null;
		boList			= null;
	}
	
}"
			   SEQUENCE="52"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="08/04/2010 14:03:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetOrderData"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetOrderData(Inputs,Outputs)
{
	try 
	{
		var boOrder : BusObject =TheApplication().ActiveBusObject();
		if (boOrder.Name() != &quot;VF TRK PRM Order Entry (Sales)&quot; || boOrder.Name() != &quot;Order Entry (Sales)&quot; || boOrder.Name() != &quot;Order Entry (Simple)&quot; || boOrder.Name() != &quot;VF TRK PRM Account&quot;)
			return (CancelOperation);
		else
		{
			var bcOrder : BusComp =boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);	
			bcOrder.ActiveField(&quot;Order Type Calc&quot;);
			Outputs.SetProperty (&quot;Order Sub Type&quot;, bcOrder.GetFieldValue(&quot;Order Sub Type&quot;));	
			Outputs.SetProperty (&quot;Order Type Calc&quot;, bcOrder.GetFieldValue(&quot;Order Type Calc&quot;));
			Outputs.SetProperty (&quot;VF Shop Code&quot;, bcOrder.GetFieldValue(&quot;VF Shop Code&quot;));
			Outputs.SetProperty (&quot;VF Dealer Code&quot;, bcOrder.GetFieldValue(&quot;VF Dealer Code&quot;));
			Outputs.SetProperty (&quot;Status&quot;, bcOrder.GetFieldValue(&quot;Status&quot;));
			Outputs.SetProperty (&quot;Subclass&quot;, bcOrder.GetFieldValue(&quot;VF Customer Sub Class&quot;));			
		}
	}//end of try 
	finally 
	{
		bcOrder=null;
		boOrder=null;		
	}
}"
			   SEQUENCE="53"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2011 19:29:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetParameter"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetParameter(Inputs, Outputs)
{
	/************************************************************************************
	* ACS MV 2-aug-07  : Created                                                        *
	* Description      : This script takes the Function and Param Name as input and retu*
	*                   rns corresponding values associated to the parameter            *
	* Inputs	  	   : Function (mandatory), Name (Mandatory)                         *
	* Outputs	       : Value (mandatory), Cons1,2,3 (opt), Description (opt)          *  
	************************************************************************************/
	try
	{
		var strFunction = Inputs.GetProperty (&quot;Function&quot;);
		var strName = Inputs.GetProperty (&quot;Name&quot;);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strFunction&quot;,strFunction);
		inProp.SetProperty(&quot;strName&quot;,strName);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		var boparameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcparameter : BusComp = boparameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
	
		bcparameter.ActivateField(&quot;Value&quot;);
		bcparameter.ActivateField(&quot;Condition1&quot;);
		bcparameter.ActivateField(&quot;Condition2&quot;);
		bcparameter.ActivateField(&quot;Condition3&quot;);
		bcparameter.ActivateField(&quot;Comments&quot;);
	
		bcparameter.ClearToQuery();
		bcparameter.SetSearchSpec(&quot;Function&quot;,strFunction);
		bcparameter.SetSearchSpec(&quot;Name&quot;,strName);
		bcparameter.ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
		if(bcparameter.FirstRecord())
		{
			var strValue = bcparameter.GetFieldValue(&quot;Value&quot;);
			var strCondition1 = bcparameter.GetFieldValue(&quot;Condition1&quot;);
			var strCondition2 = bcparameter.GetFieldValue(&quot;Condition2&quot;);
			var strCondition3 = bcparameter.GetFieldValue(&quot;Condition3&quot;);
			var strComments = bcparameter.GetFieldValue(&quot;Comments&quot;);
		}
		
		Outputs.SetProperty (&quot;Value&quot;, strValue);
		Outputs.SetProperty (&quot;Cons1&quot;, strCondition1);
		Outputs.SetProperty (&quot;Cons2&quot;, strCondition2);
		Outputs.SetProperty (&quot;Cons3&quot;, strCondition3);
		Outputs.SetProperty (&quot;Cons123&quot;, strCondition1+strCondition2+strCondition3);
		Outputs.SetProperty (&quot;Description&quot;, strComments);	
	}
	finally
	{
    	bcparameter       = null;
    	boparameter       = null;
    	inProp		= null;
		outProp		= null;
		BS			= null;
	}	
}"
			   SEQUENCE="54"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetParameterMVL"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/************************************************************************************
* Created  		: 20-05-2015                                                        *
* Created by	: FGUEDES															*
* Description   : It takes the Function and Param Name as input and returns			*
*                    corresponding mvl values associated to the parameter           *
* Inputs	  	: Function (mandatory), Name (Mandatory)                         	*
* Outputs	    : RoleList          												*  
************************************************************************************/
function GetParameterMVL(Inputs:PropertySet, Outputs:PropertySet)
{
	try 
	{
		var sFunc = Inputs.GetProperty (&quot;Function&quot;);
		var sName = Inputs.GetProperty (&quot;Name&quot;);
		
		var sRoleList = &quot;&quot;;
		var isRecord = &quot;&quot;;
		var isRecordMVG = &quot;&quot;;
		
		var oBO : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);;
		var oBC : BusComp = oBO.GetBusComp(&quot;ACS NI Parameter&quot;);
		var oMVGRole : BusComp;
		
		Outputs.SetProperty(&quot;RoleList&quot;,&quot;&quot;);
		
		with (oBC) 
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VFTRCBU Role MVF&quot;);
			SetSearchSpec(&quot;Function&quot;, sFunc);
			SetSearchSpec(&quot;Name&quot;, sName);
			ExecuteQuery(ForwardOnly);

			isRecord = FirstRecord();
			
			if (isRecord)
			{
				oMVGRole = oBC.GetMVGBusComp(&quot;VFTRCBU Role MVF&quot;);
				oMVGRole.ActivateField(&quot;Name&quot;);
				oMVGRole.ExecuteQuery(ForwardOnly);			
							
				isRecordMVG = oMVGRole.FirstRecord();
								
				if (isRecordMVG)
				{
					with (oMVGRole)
					{
						while(isRecordMVG)
						{						
							sRoleList = sRoleList + GetFieldValue(&quot;Name&quot;) + &quot;,&quot;;							
							isRecordMVG = NextRecord();
						}						
					}
				}								
			}
		}	
	
		Outputs.SetProperty(&quot;RoleList&quot;, sRoleList.substring(0, sRoleList.length-1));			
	}
	catch(e)
	{
		throw(e);
	}	
	finally {
		oMVGRole = null;
		oBC = null;
		oBO = null;
	}
}"
			   SEQUENCE="55"
			   UPDATED="11/25/2015 10:16:39"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2015 17:39:45"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetParameterValue"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetParameterValue(str_Function, str_Name)
{
	/************************************************************************************
	* ACS  10-aug-07  : Created                                                        *
	* Description     : This script takes the Function and Name as input and returns   *
			            the corresponding Parameter value                              *
	* Input 	      : Function (mandatory), Name (Mandatory)                         *
	* Return          : Parameter Value						                           *  
	************************************************************************************/
	try
	{
		//check parameters are not empty
		if(str_Function == &quot;&quot; || str_Name == &quot;&quot;)
		{
			TheApplication().RaiseErrorText(&quot;Parameters Passed Cannot be Null or Empty&quot;);
			return(CancelOperation);
		}//if
	
		var boparameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcparameter : BusComp = boparameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
	
		with(bcparameter)
		{
			ActivateField(&quot;Value&quot;);
			ClearToQuery();
			SetSearchSpec(&quot;Function&quot;, str_Function);
			SetSearchSpec(&quot;Name&quot;, str_Name);
			ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review

			if(FirstRecord())
				return GetFieldValue(&quot;Value&quot;);
		}//with			
	}
	finally
	{
    	bcparameter       = null;
    	boparameter       = null;
	}
}//function"
			   SEQUENCE="56"
			   UPDATED="11/25/2015 10:16:39"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetParameterWithConstraint"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetParameterWithConstraint(Inputs, Outputs)
{
	/************************************************************************************
	* [IBMMOLAMLI] - Sales Agile 2nd Sprint - Golf SimCard  :created                    *                          *
	* Description      : This script takes the Function and Param Name and Contraint1   *
	*						as input and returns corresponding values associated        *
	*						to the parameter               								*
	* Inputs	  	   : Function (mandatory), Name (Mandatory), Cons1 (Mandatory)      *
	* Outputs	       : Value (mandatory)										        *  
	************************************************************************************/
	try
	{
		var strFunction = Inputs.GetProperty (&quot;Function&quot;);
		var strName = Inputs.GetProperty (&quot;Name&quot;);
		var strCons1 = Inputs.GetProperty (&quot;Cons1&quot;);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strFunction&quot;,strFunction);
		inProp.SetProperty(&quot;strName&quot;,strName);
		inProp.SetProperty(&quot;strCons1&quot;,strCons1);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		var boparameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcparameter : BusComp = boparameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
	
		bcparameter.ActivateField(&quot;Value&quot;);
		bcparameter.ActivateField(&quot;Condition1&quot;);
		bcparameter.ActivateField(&quot;Condition2&quot;);
		//bcparameter.ActivateField(&quot;Condition3&quot;);
		//bcparameter.ActivateField(&quot;Comments&quot;);
	
		bcparameter.ClearToQuery();
		bcparameter.SetSearchSpec(&quot;Function&quot;,strFunction);
		bcparameter.SetSearchSpec(&quot;Name&quot;,strName);
		bcparameter.SetSearchSpec(&quot;Condition1&quot;,strCons1);
		bcparameter.ExecuteQuery(ForwardOnly); 
		if(bcparameter.FirstRecord())
		{
			var strValue = bcparameter.GetFieldValue(&quot;Value&quot;);
			//var strCondition1 = bcparameter.GetFieldValue(&quot;Condition1&quot;);
			var strCondition2 = bcparameter.GetFieldValue(&quot;Condition2&quot;);
			//var strCondition3 = bcparameter.GetFieldValue(&quot;Condition3&quot;);
			//var strComments = bcparameter.GetFieldValue(&quot;Comments&quot;);
		}
		
		Outputs.SetProperty (&quot;Value&quot;, strValue);
		//Outputs.SetProperty (&quot;Cons1&quot;, strCondition1);
		Outputs.SetProperty (&quot;Cons2&quot;, strCondition2);
		//Outputs.SetProperty (&quot;Cons3&quot;, strCondition3);
		//Outputs.SetProperty (&quot;Cons123&quot;, strCondition1+strCondition2+strCondition3);
		//Outputs.SetProperty (&quot;Description&quot;, strComments);	
	}
	finally
	{
    	bcparameter       = null;
    	boparameter       = null;
    	inProp		= null;
		outProp		= null;
		BS			= null;
	}	
}"
			   SEQUENCE="57"
			   UPDATED="12/30/2017 12:05:31"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="12/30/2017 12:05:31"
			   CREATED_BY="IBM_MERVEO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="VF MC R1.3 20100716 - Added for GIB."
			   INACTIVE="N"
			   NAME="GetParentLIC"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetParentLIC(Inputs, Outputs)
{
	try
	{
		//Get the Input Args
		var str_Lov_Type = Inputs.GetProperty(&quot;svc_In_LOV_Type&quot;);
		var str_DisplayValue = Inputs.GetProperty(&quot;svc_In_Value&quot;);  
			
		//Get the Lov BO &amp; BC
		var obj_Lov_Bo : BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;);
        var obj_Lov_Bc : BusComp = obj_Lov_Bo.GetBusComp(&quot;List Of Values&quot;);
    			
		//Query the Lov Bc for allowable statuses
		with(obj_Lov_Bc)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Parent Id&quot;);
			ActivateField(&quot;Parent&quot;);
			ClearToQuery();
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;str_Lov_Type&quot;,str_Lov_Type);
			inProp.SetProperty(&quot;str_DisplayValue&quot;,str_DisplayValue);
			inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			var strCallSrcExpr = &quot;[Type] = &apos;&quot;+str_Lov_Type+&quot;&apos; AND [Value]=&apos;&quot;+str_DisplayValue+&quot;&apos;&quot;;
			SetSearchExpr(strCallSrcExpr);
			ExecuteQuery(ForwardOnly);
			//return whether allowable status found or not
			if(FirstRecord())
			{
				Outputs.SetProperty(&quot;Result&quot;,&quot;OK&quot;);
				var strParentId = GetFieldValue(&quot;Parent Id&quot;);
				var strParentLIC = GetFieldValue(&quot;Parent&quot;);
				if(strParentId!=&quot;&quot;)
				{
					ActivateField(&quot;Value&quot;);
					SetViewMode(AllView);				
					ClearToQuery();
					SetSearchSpec(&quot;Id&quot;, strParentId);
					SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
					{
						var strParentDisplay = GetFieldValue(&quot;Value&quot;);
					}
					Outputs.SetProperty(&quot;ParentDisplay&quot;,strParentDisplay);	
				}				
			}				
			else
			{
				Outputs.SetProperty(&quot;Result&quot;,&quot;KO&quot;);
			}			
		}//with
	}//try
	finally
	{
		obj_Lov_Bc = null;
		obj_Lov_Bo = null;
		inProp 	= null;
		outProp = null;
		BS 	= null;
	}
}//function"
			   SEQUENCE="58"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="07/22/2010 08:53:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetPositionType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetPositionType()
{
	try
	{
		var BOPosition					: BusObject = TheApplication().GetBusObject(&quot;Position&quot;);
		var BCPosition					: BusComp = BOPosition.GetBusComp(&quot;Position&quot;);
		var strPositionName				= TheApplication().PositionName();
	
		var strPositionType=&quot;&quot;;
		if(strPositionName != &quot;&quot;)
		{
			with(BCPosition)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Position Type&quot;);
				SetSearchSpec (&quot;Name&quot;, strPositionName);
				ExecuteQuery(ForwardOnly);
					
				if(FirstRecord())
				{
					strPositionType = GetFieldValue(&quot;Position Type&quot;);
					return(strPositionType);		
				}
			}
		}	
	}
	finally
	{
		BCPosition = null;
		BOPosition = null;
	}
}"
			   SEQUENCE="59"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="11/18/2011 19:55:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetProductPortId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetProductPortId (Inputs,Outputs)
{
 	/************************************************************
	* AUTHOR: Antony Xavier David                               *
	* DESCRIPTION: This script will return the Product Port Id  *
	*              of a product. This field needs to be updated *
	*              in the Order Line Items, if the Simple BC is *
	*              used to create the record.                   *
	* DATE CREATED: 1-Feb-2007                                    *
	************************************************************/
	try
	{
		var AdminProdBO : BusObject = TheApplication().GetBusObject(&quot;Admin ISS Product Definition&quot;);
		var IntProdISSAdminBC : BusComp = AdminProdBO.GetBusComp(&quot;Internal Product - ISS Admin&quot;);
		var ISSProdVODBC : BusComp = AdminProdBO.GetBusComp(&quot;ISS Product VOD BusComp&quot;);
		var ISSProdVerBC : BusComp = AdminProdBO.GetBusComp(&quot;ISS Product Versions BusComp&quot;);
		var ProdStructBC : BusComp = AdminProdBO.GetBusComp(&quot;ISS Product Structure Admin BusComp&quot;);
		
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var sParProdName			= Inputs.GetProperty(&quot;ParProdName&quot;);
		var sVersion				= Inputs.GetProperty(&quot;Version&quot;);
		var sChildProdName			= Inputs.GetProperty(&quot;ChildProdName&quot;);
	
		//Query for the Product Version.
		with (IntProdISSAdminBC)
		{
			SetViewMode(AllView);
			ISSProdVerBC.SetViewMode(AllView);
			ClearToQuery();
			//VFTK Junaid 20120514 - Moved child query as per oracle review 31
			ISSProdVODBC.ClearToQuery();
			//VFTK Junaid 20120514 - Added for Oracle Review 15
			inProp.SetProperty(&quot;sParProdName&quot;, sParProdName); 
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
			//End
			SetSearchSpec(&quot;Name&quot;,sParProdName);	
			ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
			//Query the Product Version BC.
			if (ISSProdVODBC.FirstRecord())
			{
				with (ISSProdVerBC)
				{
					SetViewMode(AllView);
					ClearToQuery();
					//VFTK Junaid 20120514 - Added for Oracle Review 15
					inProp = TheApplication().NewPropertySet();
					inProp.SetProperty(&quot;sVersion&quot;, sVersion);
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
					//End
					SetSearchSpec(&quot;Product Name&quot;,sParProdName);
					SetSearchSpec(&quot;Display Version&quot;,sVersion);
					ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review

					if (FirstRecord())
					{
						with (ProdStructBC) 
						{	 
							ClearToQuery();
							//VFTK Junaid 20120514 - Added for Oracle Review 15
							inProp = TheApplication().NewPropertySet();
							inProp.SetProperty(&quot;sChildProdName&quot;, sChildProdName);
							BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
							//End
							SetSearchSpec(&quot;Item Name&quot;,sChildProdName);
							ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review

							if (FirstRecord())
							{
								Outputs.SetProperty(&quot;Product Port Id&quot;,GetFieldValue(&quot;Orig Id&quot;));
							}
						}//End of with(ProdStructBC)
					}
				}	
			}
		}
 	}
	/*catch (e)// 11/03/2013 VF TR - Exception errors for Oracle Review
	{
	}*/
	finally
	{
		IntProdISSAdminBC = null;
		ISSProdVODBC = null;
		ISSProdVerBC = null;
		ProdStructBC = null;
		AdminProdBO = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="60"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Get_Language_IndependentCode"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Get_Language_IndependentCode(Inputs, Outputs)
{
	/*SK:04-OCT-2007
		This function takes in Lov Type, Display Value and Language Code as input set.
		The output would be either (0 or 1)
		0 when the Display Value could not be located in the Lov Type
		1 when the Display value could be located in the Lov Type

		Fambio Rel2.1: Return also the lov name*/	
	try
	{
		//Get the Input Args
		var str_Lov_Type = Inputs.GetProperty(&quot;svc_In_LOV_Type&quot;);
		var str_DisplayValue = Inputs.GetProperty(&quot;svc_In_Value&quot;);
		var str_LanguageCode = Inputs.GetProperty(&quot;svc_In_Language&quot;);
			
		//Get the Lov BO &amp; BC
		var obj_Lov_Bo : BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;);
        var obj_Lov_Bc : BusComp = obj_Lov_Bo.GetBusComp(&quot;List Of Values&quot;);
        
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;str_LanguageCode&quot;,str_LanguageCode);
		inProp.SetProperty(&quot;str_Lov_Type&quot;,str_Lov_Type);
		inProp.SetProperty(&quot;str_DisplayValue&quot;,str_DisplayValue);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15    			

		with(obj_Lov_Bc)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Active&quot;);
			ActivateField(&quot;Name&quot;);
			SetSearchSpec(&quot;Language&quot;, str_LanguageCode);
			SetSearchSpec(&quot;Type&quot;, str_Lov_Type);
			SetSearchSpec(&quot;Value&quot;, str_DisplayValue);
			SetSearchSpec(&quot;Active&quot;,&quot;Y&quot;);
			ExecuteQuery(ForwardOnly);
			//return whether allowable status found or not
			if(FirstRecord()){
				Outputs.SetProperty(&quot;svc_Out_Status_Allowable&quot;,&quot;1&quot;);
				Outputs.SetProperty(&quot;LOV_NAME&quot;,GetFieldValue(&quot;Name&quot;));
			}
			else{
				Outputs.SetProperty(&quot;svc_Out_Status_Allowable&quot;,&quot;0&quot;);	
				Outputs.SetProperty(&quot;LOV_NAME&quot;,&quot;&quot;);
			}
		}//with
	}//try
	finally
	{
		obj_Lov_Bc = null;
		obj_Lov_Bo = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}//function"
			   SEQUENCE="44"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="HandleEAIResponse"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function HandleEAIResponse (Inputs, Outputs)
{
	try
	{
		var psInputs  : PropertySet = TheApplication().NewPropertySet();
		var psOutputs : PropertySet = TheApplication().NewPropertySet();			
		var strStatusCode = &quot;&quot;;
		var strErrorMsg   = &quot;&quot;;	
		if (Inputs.GetChildCount() &gt; 0)
		{
			//ACS AD 25-Oct-06: Check for an error message and throw an error if present
			psInputs.SetProperty (&quot;Field Name&quot;, &quot;StatusCode&quot;);
			psInputs.AddChild (Inputs.GetChild (0));
			ExtractValueFromXML (psInputs, psOutputs);
			strStatusCode = psOutputs.GetProperty (&quot;Field Value&quot;);
			if (strStatusCode != &apos;0&apos;)
			{
				psInputs  = TheApplication().NewPropertySet();
				psOutputs = TheApplication().NewPropertySet();
				
				psInputs.SetProperty (&quot;Field Name&quot;, &quot;ErrorDescription&quot;);
				psInputs.AddChild (Inputs.GetChild (0));
				
				ExtractValueFromXML (psInputs, psOutputs);
				strErrorMsg = psOutputs.GetProperty(&quot;Field Value&quot;);
			}
		}
	}
	finally
	{
		Outputs.SetProperty (&quot;StatusCode&quot;, strStatusCode);
		Outputs.SetProperty (&quot;ErrorMessage&quot;, strErrorMsg);
		psInputs  = null;
		psOutputs = null;
	}
}"
			   SEQUENCE="62"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InvokeServiceMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InvokeServiceMethod(Inputs,Outputs)
{
	var oBS : Service;
	try
	{
		var sServiceName = Inputs.GetProperty(&quot;ServiceName&quot;);
		var sServiceMethod = Inputs.GetProperty(&quot;MethodName&quot;);
		
		oBS = TheApplication().GetService(sServiceName);
		
		oBS.InvokeMethod(sServiceMethod,Inputs,Outputs);
	}
	finally
	{
		oBS = null;
	}
}"
			   SEQUENCE="63"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="03/13/2013 20:14:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LoadFile"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LoadFile (Inputs, Outputs)
{
	try
	{
		var strFileName    = Inputs.GetProperty (&quot;FileName&quot;);
		var str_SIM_Row_Id = Inputs.GetProperty(&quot;SIM_Row_Id&quot;);
		var strCurrentLine = &quot;&quot;;
		var strPath        = &quot;&quot;;
		var strLogFile     = &quot;&quot;;
		//to replace the new line char with empty string as fgets reads a string 
		//along with the newline char if any
		var re_pattern = /(\n)/g;
		var arrFields = new Array;
		
		/*** Begin Validation Input Part ***/ 
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var inPropIMSI 	:PropertySet	= TheApplication().NewPropertySet();
		var outPropIMSI :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var boParameters :BusObject	= TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
    	var bcParameters :BusComp	= boParameters.GetBusComp (&quot;ACS NI Parameter&quot;);
    	
		var boIMSI 		:BusObject	= TheApplication ().GetBusObject (&quot;ACS NI IMSI&quot;);
		var bcIMSI 		:BusComp	= boIMSI.GetBusComp (&quot;ACS NI IMSI&quot;);
		
		var obj_SIM_Bo 	:BusObject	= TheApplication ().GetBusObject (&quot;ACS NI IMSI Load Guiding1&quot;);
		var obj_SIM_Bc 	:BusComp	= obj_SIM_Bo.GetBusComp (&quot;ACS NI IMSI Load Guiding1&quot;);
		
    	var strParameterExpr    = &quot;[Function] = &apos;File Path&apos; AND [Name] = &apos;SIM Load&apos;&quot;;
    	var strParameterLogExpr = &quot;[Function] = &apos;File Path&apos; AND [Name] = &apos;SIM Load Log&apos;&quot;;
    	var strICCCode	        = &quot;&quot;;
    	var strBlankCheck       = &quot;&quot;;
		var StrDate      	    = new Date ();
		var dtSysDate		    = DateToString(StrDate);
		
		var intSuccessCounter = 0;
		var intFailureCounter = 0;
    	
    	bcParameters.ClearToQuery ();
    	bcParameters.SetViewMode (AllView);
    	bcParameters.ActivateField (&quot;Function&quot;);
    	bcParameters.ActivateField (&quot;Name&quot;);
    	bcParameters.ActivateField (&quot;Value&quot;);
    	bcParameters.SetSearchExpr (strParameterExpr);//null check not req harcoded serch expr
    	bcParameters.ExecuteQuery(ForwardOnly);//The query is only for one BC in BO,query cannot be removed 7may2012 Udbhav IDC VFTK
    	
    	if (bcParameters.FirstRecord ())
    	{
    		strPath = bcParameters.GetFieldValue (&quot;Value&quot;);
    	}
    	
    	bcParameters.ClearToQuery ();
    	bcParameters.SetViewMode (AllView);
    	bcParameters.ActivateField (&quot;Function&quot;);
    	bcParameters.ActivateField (&quot;Name&quot;);
    	bcParameters.ActivateField (&quot;Value&quot;);
    	bcParameters.SetSearchExpr (strParameterLogExpr);//null check not req harcoded serch expr
    	bcParameters.ExecuteQuery(ForwardOnly);//The query is only for one BC in BO,query cannot be removed 7may2012 Udbhav IDC VFTK
    	
    	if (bcParameters.FirstRecord ())
    	{
    		strLogFile = bcParameters.GetFieldValue (&quot;Value&quot;);
			strLogFile = strLogFile + &quot;_&quot; + dtSysDate + &quot;.txt&quot;;
    	}

		bcIMSI.ActivateField (&quot;ICC Code&quot;);
		bcIMSI.ActivateField (&quot;IMSI Number&quot;);
		bcIMSI.ActivateField (&quot;PIN&quot;);
		bcIMSI.ActivateField (&quot;PUK&quot;);
		bcIMSI.ActivateField (&quot;PIN2&quot;);
		bcIMSI.ActivateField (&quot;PUK2&quot;);
		bcIMSI.ActivateField (&quot;Public Card Type&quot;);
		bcIMSI.ActivateField (&quot;Bar Code&quot;);
		bcIMSI.ActivateField (&quot;HLR City&quot;);
		bcIMSI.ActivateField (&quot;Product Code&quot;);
		bcIMSI.ActivateField (&quot;Expiration Date&quot;);						
		
		var fpReadFile = Clib.fopen(strPath+strFileName,&quot;rt&quot;);
		var fpLogFile  = Clib.fopen(strLogFile ,&quot;wt&quot;);
		
		if (fpReadFile == null)
		{
			with(obj_SIM_Bc)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Status&quot;);
				// Review Input validation: Scripting 15 null check Added 7may2012 Udbhav IDC
	
				inProp.SetProperty(&quot;str_SIM_Row_Id&quot;,str_SIM_Row_Id); //Id Validation
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); // Query Input Validation
				/*** End Validation Input part ***/ 
				SetSearchSpec(&quot;Id&quot;, str_SIM_Row_Id);
				ExecuteQuery(ForwardOnly);//The query is only for one BC in BO,query cannot be removed 7may2012 Udbhav IDC VFTK
				if(FirstRecord())
				{
					//if any loading failures update status as below
					SetFieldValue(&quot;Status&quot;, &quot;File Not Found&quot;);
				
					//Populating Counters
					SetFieldValue(&quot;Loaded Sim&quot;, &quot;0&quot;);
					SetFieldValue(&quot;Error Sim&quot;, &quot;0&quot;);
					SetFieldValue(&quot;Total Sim&quot;, &quot;0&quot;);	
						
					WriteRecord();
				}//if
			}
			Clib.fputs (&quot;File &quot;+strPath+strFileName+&quot; was not found&quot;, fpLogFile);
		}
		else
		{
			Clib.fputs (&quot;File &quot;+strPath+strFileName+&quot; was found&quot;, fpLogFile);
			strCurrentLine = Clib.fgets(fpReadFile);
			
			while (strCurrentLine != null &amp;&amp; strCurrentLine != &quot;&quot;)
			{
				try
				{
					intSuccessCounter++;

					strBlankCheck = strCurrentLine.replace(&quot; &quot;,&quot;&quot;);
					if (strBlankCheck.length &gt; 0)
					{
						//Replace \n with empty string			
						strCurrentLine = strCurrentLine.replace(re_pattern,&quot;&quot;);
						strICCCode = strCurrentLine.substring(0,19);
						
						bcIMSI.ClearToQuery ();
						bcIMSI.SetViewMode (AllView);
						// Review Input validation: Scripting 15 null check Added 7may2012 Udbhav IDC

						/*** Begin Validation Input Part ***/ 
						
						inPropIMSI.SetProperty(&quot;str_SIM_Row_Id&quot;,str_SIM_Row_Id); //Id Validation
						BS.InvokeMethod(&quot;Input Validation&quot;,inPropIMSI, outPropIMSI); // Query Input Validation
						/*** End Validation Input part ***/ 
						bcIMSI.SetSearchSpec (&quot;strICCCode&quot;, strICCCode);
						bcIMSI.ExecuteQuery (ForwardOnly);//The query is only for one BC in BO,query cannot be removed 7may2012 Udbhav IDC VFTK
						
						if (!bcIMSI.FirstRecord ())
						{
							bcIMSI.NewRecord (NewAfter);
							bcIMSI.SetFieldValue (&quot;ICC Code&quot;, strICCCode);
							bcIMSI.SetFieldValue (&quot;Bar Code&quot;, strCurrentLine.substring(11,19));
							bcIMSI.SetFieldValue (&quot;IMSI Number&quot;, strCurrentLine.substring(20,35));
							bcIMSI.SetFieldValue (&quot;PIN&quot;, strCurrentLine.substring(36,40));
							bcIMSI.SetFieldValue (&quot;PUK&quot;, strCurrentLine.substring(41,49));
							bcIMSI.SetFieldValue (&quot;PIN2&quot;, strCurrentLine.substring(50,54));
							bcIMSI.SetFieldValue (&quot;PUK2&quot;, strCurrentLine.substring(55,63));
							bcIMSI.SetFieldValue (&quot;Public Card Type&quot;, strCurrentLine.substring(64,104));
							bcIMSI.SetFieldValue (&quot;HLR City&quot;, strCurrentLine.substring(105,120));
							bcIMSI.SetFieldValue (&quot;Product Code&quot;, strCurrentLine.substring(121,127));
							
							var strDate = strCurrentLine.substring(128,135).toString();
							var strYear = strDate.substr(0,4);
							var strMonth = strDate.substr(5,7);
							var strDefDate = &quot;01&quot;;
							
							var strnewDate = strMonth+&quot;/&quot;+strDefDate+&quot;/&quot;+strYear;
							bcIMSI.SetFieldValue (&quot;Expiration Date&quot;, strnewDate);
							bcIMSI.WriteRecord ();
						}
					}
					
				}
				catch (e)
				{
					intFailureCounter++;
					intSuccessCounter--;
					Clib.fputs (&quot;Error Loading Record&quot;, fpLogFile);
					Clib.fputs (strCurrentLine, fpLogFile);
					Clib.fputs (&quot;The error is &quot;+e.toString (), fpLogFile);
				}
				strCurrentLine = Clib.fgets(fpReadFile);
			}//while
			Clib.fputs (&quot;Records Successfully Loaded :: &quot; + intSuccessCounter, fpLogFile);
			Clib.fputs (&quot;Records Failed Loading :: &quot; + intFailureCounter, fpLogFile);
			
			//If Load Successful Update SIM Status to Loaded
			with(obj_SIM_Bc)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Status&quot;);
				SetSearchSpec(&quot;Id&quot;, str_SIM_Row_Id);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					//if any loading failures update status as below
					if(intFailureCounter)
						SetFieldValue(&quot;Status&quot;, &quot;Partially Loaded&quot;);
					else
						SetFieldValue(&quot;Status&quot;, &quot;Loaded&quot;);
					
					//Populating Counters
					SetFieldValue(&quot;Loaded Sim&quot;, intSuccessCounter);
					SetFieldValue(&quot;Error Sim&quot;, intFailureCounter);
					SetFieldValue(&quot;Total Sim&quot;, ToNumber(intSuccessCounter) + ToNumber(intFailureCounter));	
						
					WriteRecord();
				}//if
			}//with	
			Clib.fclose (fpReadFile);
			Clib.fclose (fpLogFile);
		}//else
	}//try
	/*catch (e)
	{
	}*/
	finally
	{
		bcIMSI         = null;
		boIMSI         = null;
		obj_SIM_Bc     = null;
		obj_SIM_Bo     = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
		outPropIMSI	= null;
		inPropIMSI	= null;
		bcParameters= null;
		boParameters = null;
	}
}"
			   SEQUENCE="65"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LogInputs"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LogInputs (Inputs, Outputs)
{
	/************************************************************************************
	* ACS AD 06-Jun-07 : Created                                                        *
	* Description      : This business service method is used for debugging. It will    *
	*                    write the values provided as input into the file name provided *
	*                    as input. Please ensure that the file path is also input.      *
	************************************************************************************/

		var strInput1   = Inputs.GetProperty (&quot;Input1&quot;);
		var strInput2   = Inputs.GetProperty (&quot;Input2&quot;);
		var strInput3   = Inputs.GetProperty (&quot;Input3&quot;);
		var strFileName = Inputs.GetProperty (&quot;FileName&quot;);

}"
			   SEQUENCE="68"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LogWorkflowErrors"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LogWorkflowErrors (Inputs, Outputs)
{
	/******************************************************************************
	* ACS AD 26-Jul-06 : Created                                                  *
	* Description      : This is a general purpose script that will take the Error*
	*                    Code and Error Message as input arguements and write them*
	*                    to a file mentioned in the LOVs. This method is ment for *
	*                    error handling in back ground workflows.                 *
	******************************************************************************/

		var strErrorCode     = Inputs.GetProperty (&quot;ErrorCode&quot;);
		var strErrorMessage  = Inputs.GetProperty (&quot;ErrorMessage&quot;);
		var strOtherInputs1  = Inputs.GetProperty (&quot;OtherInputs1&quot;);
		var strOtherInputs2  = Inputs.GetProperty (&quot;OtherInputs2&quot;);
	
		var strDebugFileName = TheApplication ().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_WF_TRACE_FILE&quot;, &quot;FileName&quot;);
		var strDebugFlag     = TheApplication ().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_WF_TRACE_FLAG&quot;, &quot;Value&quot;);
	
		var dtDate      	= new Date ();
		var strSysDate		= DateToString(dtDate);
		strDebugFileName    = strDebugFileName + &quot;_&quot; + strSysDate + &quot;.txt&quot;;
		var strDebugMessage = strOtherInputs1 + &quot;\n&quot; + strOtherInputs2 + &quot;\nError Code :: &quot; + strErrorCode + &quot;\nError Message :: &quot;+strErrorMessage;
		
		if (strDebugFlag == &quot;Y&quot;)
		{
			if (strDebugFileName.length &gt; 0)
			{
				var fpLogFile = Clib.fopen (strDebugFileName, &quot;w&quot;);	
				Clib.fputs (strDebugMessage, fpLogFile);
				Clib.fclose (fpLogFile);
			}
		}
	
}"
			   SEQUENCE="69"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Log_Values"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Log_Values(str_Outline, arr_Values)
{
	//Input 1:: Description of the record to be logged
	//Input 2:: Values to log as an array
	try
	{
		var obj_Date      	     = new Date ();
		var str_SysDate		     = DateToString(obj_Date);
		var str_FilePathFileName = GetParameterValue(&quot;File Path&quot;, &quot;ACS_Global_Error_Log_File&quot;);
		var ptr_File             = Clib.fopen(str_FilePathFileName, &quot;a+&quot;);
		
		if(null != ptr_File)
		{
			Clib.fputs(&quot;DATE:: &quot; + obj_Date + &quot;\n&quot;, ptr_File);
			Clib.fputs(&quot;Description:: &quot; + str_Outline + &quot;\n&quot;, ptr_File);
			for(var int_Index = 0; int_Index &lt; arr_Values.length; int_Index++)
				Clib.fputs(arr_Values[int_Index] + &quot;\t&quot;, ptr_File);
			Clib.fputs(&quot;\n***\n&quot;, ptr_File);
			Clib.fclose(ptr_File);
		}//if
	}//try
	finally{}
}//function"
			   SEQUENCE="66"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LoggingBS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LoggingBS(Inputs,Outputs)
{
    try
    {
	   	var bsService : Service = TheApplication().GetService(&quot;VF Logging BS&quot;);
	    var BSInputs : PropertySet = TheApplication ().NewPropertySet (); 
	    var BSOutputs : PropertySet = TheApplication ().NewPropertySet ();
	    var strLoggingId = Inputs.GetProperty(&quot;Logging Id&quot;);
	    var strCode = Inputs.GetProperty(&quot;Customer Code&quot;);
	    var ProfileMode = Inputs.GetProperty(&quot;Profile Mode&quot;);
	    BSInputs.SetProperty(&quot;Logging Id&quot;,strLoggingId);
	    BSInputs.SetProperty(&quot;Customer Code&quot;,strCode);
	    BSInputs.SetProperty(&quot;Profile Mode&quot;,&quot;GIBCustomerVerDA&quot;);
	    bsService.InvokeMethod(&quot;LoggingGIB&quot;,BSInputs,BSOutputs);
	}
	finally
	{
		BSInputs=null;
		BSOutputs =null;
		bsService=null;
	}
}"
			   SEQUENCE="67"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="05/18/2011 13:51:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LookupName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LookupName(Inputs,Outputs)
{
	try
	{
		
		var type = Inputs.GetProperty(&quot;LOV&quot;) ;  	
		var val = Inputs.GetProperty(&quot;Val&quot;) ;	  	
		var name = null;
			
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;type&quot;,type);
		inProp.SetProperty(&quot;val&quot;,val);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		var strParameterSrcExpr = &quot;[Type] = &apos;&quot;+type+&quot;&apos; AND [Value] = &apos;&quot;+val+&quot;&apos; AND [Active] = &apos;Y&apos;&quot;;
		var boHPOrderEntry:BusObject;
		var bcLOV:BusComp;
		boHPOrderEntry = TheApplication().GetBusObject (&quot;HP Order Entry&quot;);
		bcLOV = boHPOrderEntry.GetBusComp (&quot;List Of Values&quot;);
	
		bcLOV.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
		bcLOV.ActivateField (&quot;Name&quot;);
		bcLOV.ClearToQuery ();
		bcLOV.SetSearchExpr (strParameterSrcExpr);
		bcLOV.ExecuteQuery(ForwardOnly);
		
		if (bcLOV.FirstRecord ())
		{
		 	name = bcLOV.GetFieldValue (&quot;Name&quot;);
		}
		Outputs.SetProperty (&quot;Name&quot;, name);
	}
	finally
	{
		bcLOV = null;
		boHPOrderEntry = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="70"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="11/18/2011 19:55:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyAttribValue"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyAttribValue (Inputs, Outputs)
{
	try
	{
		// ACS AD 26-07-06 :: Extract the input arguements
		var strOrderId       = Inputs.GetProperty(&quot;OrderId&quot;);
		//VFTK Junaid 20120520 - Added for Oracle Review 15
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;, strOrderId); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End
		var strLineItemName  = Inputs.GetProperty (&quot;LineItemName&quot;);
		var strAttributeName = Inputs.GetProperty (&quot;AttributeName&quot;);
		var strAttributeValue = Inputs.GetProperty (&quot;AttributeValue&quot;);
		
		var strOrderSRCExpr   = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strProductName    = &quot;&quot;;
		var strAttribName     = &quot;&quot;;
	
		var booRecordExists;
		var booRecordExists1;
		var booRecordFound = &quot;N&quot;;
		
		// ACS AD 26-07-06 :: Create BO, BC instances
		var boOrderEntry     :BusObject	= TheApplication().GetBusObject (&quot;Order Entry&quot;);
		var bcOrderEntry     :BusComp	= boOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		var bcOrderLineItems :BusComp	= boOrderEntry.GetBusComp (&quot;Order Entry - Line Items&quot;);
		var bcOrderItemXA    :BusComp	= boOrderEntry.GetBusComp (&quot;Order Item XA&quot;);
		
		bcOrderItemXA.ActivateField (&quot;Action Code&quot;);
		// ACS AD 26-07-06 :: Query the components to find the attribute value
		bcOrderEntry.ClearToQuery ();
		bcOrderEntry.SetViewMode (AllView);
		bcOrderEntry.SetSearchExpr (strOrderSRCExpr);// Review Input validation: Scripting 15 null check not required as mandatory in BS Method Argument 4/24/2012 Udbhav IDC
		bcOrderEntry.ExecuteQuery(ForwardOnly);
		
		if (bcOrderEntry.FirstRecord ())
		{
			booRecordExists = bcOrderLineItems.FirstRecord ();
			
			while (booRecordExists)
			{
				strProductName = bcOrderLineItems.GetFieldValue (&quot;Product&quot;);
				
				if ((strProductName == strLineItemName) || (strLineItemName.length == 0))
				{
					booRecordExists1 = bcOrderItemXA.FirstRecord ();
					while (booRecordExists1 &amp;&amp; booRecordFound == &quot;N&quot;)
					{
						strAttribName = bcOrderItemXA.GetFieldValue (&quot;Display Name&quot;);
						if (strAttribName == strAttributeName)
						{
							bcOrderLineItems.SetFieldValue (&quot;Action Code&quot;,&quot;Update&quot;);
							bcOrderItemXA.SetFieldValue (&quot;Action Code&quot;,&quot;Update&quot;);
							bcOrderItemXA.SetFieldValue (&quot;Value&quot;, strAttributeValue);
							bcOrderItemXA.WriteRecord ();
							bcOrderLineItems.WriteRecord ();
						}
						booRecordExists1 = bcOrderItemXA.NextRecord ();
					}
				}
				booRecordExists = bcOrderLineItems.NextRecord ();
			}
		}
		else
		{
			TheApplication().RaiseErrorText (&quot;Order Id &quot;+strOrderId+&quot; is not valid&quot;);
		}
	}
	finally
	{
		bcOrderEntry      = null;
		bcOrderLineItems  = null;
		bcOrderItemXA     = null;
		boOrderEntry      = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="71"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyOrderFormTaskUI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyOrderFormTaskUI (Inputs, Outputs) 
{
	try
	{
		var strAccountId       = Inputs.GetProperty(&quot;Account Id&quot;);
		var strBillAccntId  = Inputs.GetProperty (&quot;Billing Account Id&quot;);
		var strOrderId  = Inputs.GetProperty (&quot;Order Id&quot;);

		var booOrderExists;
		var booItemExists;
		var strOrderSRCExpr   	 = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strLineItemSRCExpr   = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		
		var boOrderEntry     : BusObject = TheApplication().GetBusObject (&quot;Order Entry&quot;);
		var bcOrderEntry     : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		var bcOrderEntryItem : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Line Items&quot;);
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);	
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		bcOrderEntry.ClearToQuery ();
		bcOrderEntry.SetViewMode (AllView);
		bcOrderEntry.SetSearchExpr (strOrderSRCExpr);
		//Scripting31: Moved child query to parent-Start
		bcOrderEntryItem.ClearToQuery ();
		bcOrderEntryItem.SetViewMode (AllView);
		bcOrderEntryItem.SetSearchExpr (strLineItemSRCExpr);
		//Scripting31: Moved child query to parent-End	
		bcOrderEntry.ExecuteQuery(ForwardOnly);
		
		booOrderExists = bcOrderEntry.FirstRecord();
		
		if (booOrderExists != 0)	
		{
			bcOrderEntry.SetFieldValue (&quot;Account Id&quot;, strAccountId);
			bcOrderEntry.SetFieldValue (&quot;Billing Account Id&quot;, strBillAccntId);
			bcOrderEntry.SetFieldValue (&quot;Order Type Id&quot;, &quot;1-23GI&quot;);
			bcOrderEntry.WriteRecord ();
		
			booItemExists = bcOrderEntryItem.FirstRecord();
			//update the billing account value in line items
			while (booItemExists)
			{
				bcOrderEntryItem.SetFieldValue (&quot;Billing Account Id&quot;, strBillAccntId);
				bcOrderEntryItem.WriteRecord ();
				booItemExists = bcOrderEntryItem.NextRecord ();		
			}
		}
		else
		{
			TheApplication().RaiseErrorText (&quot;Order Id &quot;+strOrderId+&quot; is not valid&quot;);
		}
	}
	finally
	{
		bcOrderEntry      = null;
		bcOrderEntryItem  = null;
		inProp			  = null;
		outProp			  = null;
		BS				  = null;
		boOrderEntry      = null;		
	}
}"
			   SEQUENCE="72"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PopulateOrderAttrOldVal"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function PopulateOrderAttrOldVal (Inputs, Outputs)
{
	try
	{
		var boOrderEntry  : BusObject = TheApplication ().GetBusObject (&quot;Order Entry&quot;);
		var bcOrderEntry  : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		var bcOrderItem   : BusComp = boOrderEntry.GetBusComp (&quot;Order Entry - Line Items&quot;);
		var bcOrderItemXA : BusComp = boOrderEntry.GetBusComp (&quot;Order Item XA&quot;);

		var boAssetManagement : BusObject = TheApplication ().GetBusObject (&quot;Asset Management&quot;);
		var bcAssetMgmt       : BusComp = boAssetManagement.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var bcAssetMgmtXA     : BusComp = boAssetManagement.GetBusComp (&quot;Asset Mgmt - Asset XA&quot;);

		var strOrderId = Inputs.GetProperty (&quot;OrderId&quot;);
		var strOrderSearchExpr = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		var strAssetSearchExpr = &quot;&quot;;
		var strAssetId         = &quot;&quot;;
		var strAssetAttrName   = &quot;&quot;;
		var strAssetAttrValue  = &quot;&quot;;
		var strOrderAttrName   = &quot;&quot;;

		var booOrderItemExists;
		var booOrderXAExists;
		var booAssetExists;
		var booAssetXAExists;
	
		bcOrderEntry.ClearToQuery ();
		bcOrderEntry.SetViewMode (AllView);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		bcOrderEntry.SetSearchExpr (strOrderSearchExpr);
		bcOrderEntry.ExecuteQuery(ForwardOnly);
		
		if (bcOrderEntry.FirstRecord ())
		{
			booOrderItemExists = bcOrderItem.FirstRecord ();
			while (booOrderItemExists)
			{
				strAssetId = bcOrderItem.GetFieldValue (&quot;Asset Integration Id&quot;);
				
				strAssetSearchExpr = &quot;[Integration Id] = &apos;&quot;+strAssetId+&quot;&apos;&quot;;

				bcAssetMgmt.ClearToQuery ();
				bcAssetMgmt.SetViewMode (AllView);
				bcAssetMgmt.SetSearchExpr (strAssetSearchExpr);
				bcAssetMgmt.ExecuteQuery(ForwardOnly);//VFTK Venkata 16052012 Scripting31: No changes since no child query

				booAssetExists = bcAssetMgmt.FirstRecord ();

				while (booAssetExists)
				{
					booAssetXAExists = bcAssetMgmtXA.FirstRecord ();
					
					while (booAssetXAExists)
					{
						strAssetAttrName  = bcAssetMgmtXA.GetFieldValue (&quot;Display Name&quot;);
						strAssetAttrValue = bcAssetMgmtXA.GetFieldValue (&quot;Value&quot;);

						booOrderXAExists = bcOrderItemXA.FirstRecord ();
						while (booOrderXAExists)
						{
							strOrderAttrName = bcOrderItemXA.GetFieldValue (&quot;Display Name&quot;);
							if (strAssetAttrName == strOrderAttrName)
							{
								bcOrderItemXA.SetFieldValue (&quot;Previous Text Value&quot;, strAssetAttrValue);
								bcOrderItemXA.WriteRecord ();
							}
							booOrderXAExists = bcOrderItemXA.NextRecord ();
						}
						booAssetXAExists = bcAssetMgmtXA.NextRecord ();
					}
					booAssetExists = bcAssetMgmt.NextRecord ();
				}
				booOrderItemExists = bcOrderItem.NextRecord ();
			}
		}
	}
	finally
	{
		bcOrderEntry       = null;
		bcOrderItem        = null;
		bcOrderItemXA      = null;
		bcAssetMgmt        = null;
		bcAssetMgmtXA      = null;
		inProp 			   = null;
		outProp			   = null;
		BS				   = null;
		boOrderEntry       = null;
		boAssetManagement  = null;
	}
}"
			   SEQUENCE="73"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RemoveList"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RemoveList(Inputs,Outputs)
{
	var i = 0;
	var CurrRec = TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).FirstSelected();
	var strMsg = &quot;&quot;;
	if(!CurrRec)
	{
		strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_048&quot;);
		TheApplication().RaiseErrorText(strMsg);
	}
	while(CurrRec)
	{
			i = i + 1;
			CurrRec = TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).NextSelected();
	}
	if (i &gt; 1)
	{
		strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_010&quot;);
		TheApplication().RaiseErrorText(strMsg);
	}
	else
		Outputs.SetProperty(&quot;Error&quot;,&quot;N&quot;);
}"
			   SEQUENCE="74"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="10/31/2011 14:38:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SendNotificationEmail"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SendNotificationEmail(Inputs,Outputs)
{ // method restored for TLGA-3928
	try
	{
		var svcOutboundCommunicationsManager = null;
		
		var psOCMInputs 		= null;
		var psOCMOutputs 		= null;

		var psTemplateInputs 	= null;
		var psTemplateOutputs 	= null;
		
		var sFromAddress 		= null;
		var sMsgToList 			= null;
		var sMsgSubject 		= null;
		var sMsgBody 			= null;
		
		var strRowID 				= Inputs.GetProperty(&quot;RowId&quot;);
		var strCommTemplateName 	= Inputs.GetProperty(&quot;CommTemplateName&quot;);
		var strLOVType 				= Inputs.GetProperty(&quot;LOVType&quot;);
		var strFromAddress			= Inputs.GetProperty(&quot;FromAddress&quot;);
		var strToAddress 			= Inputs.GetProperty(&quot;ToAddress&quot;);
		var strSourceBusObj 		= Inputs.GetProperty(&quot;SourceBusObj&quot;);
		
		psOCMOutputs 		= TheApplication().NewPropertySet();
		psTemplateOutputs 	= TheApplication().NewPropertySet();
		
		svcOutboundCommunicationsManager = TheApplication().GetService(&quot;Outbound Communications Manager&quot;);
		
		sFromAddress	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,strLOVType,strFromAddress);
		sMsgToList 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,strLOVType,strToAddress);
		
		var boparameter : BusObject = TheApplication().GetBusObject(strSourceBusObj);
		var bcparameter : BusComp = boparameter.GetBusComp(&quot;Billing Account&quot;);
	
		bcparameter.ActivateField(&quot;Parent Account Id&quot;);
	
		bcparameter.ClearToQuery();
		bcparameter.SetSearchSpec(&quot;Id&quot;,strRowID);
		bcparameter.ExecuteQuery(ForwardOnly);
		
		if(bcparameter.FirstRecord())
		{
			var strParentRowID = bcparameter.GetFieldValue(&quot;Parent Account Id&quot;);
		}
		else
		{
			alert(&quot;Parent Row Id of Billing Account BC can not be found!&quot;);
			return (CancelOperation);
		}

		psTemplateInputs = TheApplication().NewPropertySet(); 
		psTemplateInputs.SetProperty(&quot;CommTemplateName&quot;, strCommTemplateName);
		psTemplateInputs.SetProperty(&quot;SourceId&quot;, strParentRowID);
		psTemplateInputs.SetProperty(&quot;SourceBusObj&quot;,strSourceBusObj);
		psTemplateInputs.SetProperty(&quot;Recipid&quot;,&quot;&quot;);
		psTemplateInputs.SetProperty(&quot;RecipBusComp&quot;,&quot;&quot;);
		
		svcOutboundCommunicationsManager.InvokeMethod(&quot;ExpandCommTemplate&quot;, psTemplateInputs, psTemplateOutputs);
		sMsgSubject = psTemplateOutputs.GetProperty(&quot;ExpandedSubject&quot;);
		sMsgBody	= psTemplateOutputs.GetProperty(&quot;ExpandedText&quot;);
		
		psOCMInputs = TheApplication().NewPropertySet();                      
		psOCMInputs.SetProperty(&quot;FromAddress&quot;, sFromAddress);
		psOCMInputs.SetProperty(&quot;MsgToList&quot;, sMsgToList);
		psOCMInputs.SetProperty(&quot;MsgSubject&quot;, sMsgSubject); 
		psOCMInputs.SetProperty(&quot;MsgBody&quot;, sMsgBody);

		svcOutboundCommunicationsManager.InvokeMethod(&quot;SendSmtpMessage&quot;, psOCMInputs, psOCMOutputs);		
	}
	
	finally
	{
		svcOutboundCommunicationsManager 	= null;
		psOCMInputs 						= null;
		psOCMOutputs 						= null;
		sFromAddress 						= null;
		sMsgToList 							= null;
		sMsgSubject 						= null;
		sMsgBody 							= null;
		strRowID 							= null;
		strCommTemplateName 				= null;
		strLOVType 							= null;
		strFromAddress						= null;
		strToAddress 						= null;
		strSourceBusObj 					= null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		bcparameter							= null;
		boparameter							= null;
	}
}"
			   SEQUENCE="75"
			   UPDATED="01/17/2018 17:26:01"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="09/03/2013 15:01:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName)
	{
		case &quot;LookupName&quot;:
	  		LookupName(Inputs,Outputs);
	  		return(CancelOperation);
	  		break;
		case &quot;CheckLIWithoutContact&quot;:
			CheckLIWithoutContact(Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;UpdateDashBoard&quot;:
			UpdateDashBoard(Inputs, Outputs);
			return (CancelOperation);
			break;	
		case &quot;isFutureDate&quot;:
			isFutureDate(Inputs, Outputs);
			return (CancelOperation);
			break;		
		case &quot;Get_Language_IndependentCode&quot;:
			Get_Language_IndependentCode(Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;checkSVBorVPNdoc&quot;:
			checkSVBorVPNdoc (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;Log_Values&quot;:
			var arr_Values = Inputs.GetProperty(&quot;ValuesArray&quot;);
			arr_Values = arr_Values.split(&quot;;&quot;);
			Log_Values(Inputs.GetProperty(&quot;Description&quot;), arr_Values);
			return (CancelOperation);
			break;
		case &quot;LoadFile&quot;:
			LoadFile (Inputs, Outputs);
			return (CancelOperation);
			break;	
		//CR062
		case &quot;ControlSR&quot;:
			ControlSR(Inputs, Outputs);
			return (CancelOperation);
			break;	
		//CR062
		case &quot;LogInputs&quot;:
			LogInputs (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;ModifyOrderFormTaskUI&quot;:
			ModifyOrderFormTaskUI (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;ChangeDateToEAI&quot;:
			ChangeDateToEAI (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;GetProductPortId&quot;:
			GetProductPortId (Inputs,Outputs);
			return (CancelOperation);
			break;
		case &quot;SubmitOrder&quot;:
			SubmitOrder (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;CreateModifyOrder&quot;:
			CreateModifyOrder (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;HandleEAIResponse&quot;:
			HandleEAIResponse (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;ExtractValueFromXML&quot;:
			ExtractValueFromXML (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;CopyUpdateLineItems&quot;:
			CopyUpdateLineItems (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;GetLookupMsg&quot;:
			GetLookupMsg (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;ExtractAttribValue&quot;:
			ExtractAttribValue (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;ModifyAttribValue&quot;:
			ModifyAttribValue (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;PopulateOrderAttrOldVal&quot;:
			PopulateOrderAttrOldVal (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;LogWorkflowErrors&quot;:
			LogWorkflowErrors (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;DateToString&quot;:
			DateToString (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;ExtractAttribValue_Id&quot;:
			ExtractAttribValue_Id (Inputs, Outputs);
			return (CancelOperation);
			break;	
		case &quot;CheckCreateModifyOrder&quot;:
			CheckCreateModifyOrder (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;CheckSubmitOrder&quot;:
			CheckSubmitOrder (Inputs, Outputs);
			return (CancelOperation);
			break;			
		case &quot;GetAssetIntegrationId&quot;:
			GetAssetIntegrationId (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;CreateSR&quot;:
			CreateSR (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;CreateInteraction&quot;:
			CreateInteraction (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;GetParameter&quot;:
			GetParameter (Inputs, Outputs);
			return (CancelOperation);
			break;						
		case &quot;CheckRepeatedSR&quot;:
			CheckRepeatedSR (Inputs, Outputs);
			return(CancelOperation);
			break;		
		case &quot;GetLookupValue&quot;:
			GetLookupValue (Inputs, Outputs);
			return(CancelOperation);
			break;	
		case &quot;checkVPNGroup&quot;:
			checkVPNGroup (Inputs, Outputs );
			return(CancelOperation);
			break;		
		//Mamta Added for GIB Requirement for R1.3
		case &quot;GetParentLIC&quot;:
			GetParentLIC (Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckGIBFields&quot;:
			CheckGIBFields (Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;VFGIBCall&quot;:
			VFGIBCall(Inputs,Outputs)
			return(CancelOperation);
			break;
		//Mamta Added for GIB Requirement for R1.3
		//Mamta Added for GIB Requirement for R1.3 But not in use as of now
		case &quot;CreateGIBSR&quot;:
			CreateGIBSR (Inputs, Outputs);
			return(CancelOperation);
			break;		
		case &quot;CreateGIBFailureSR&quot;:
			CreateGIBFailureSR (Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;GetLookupValueLang&quot;:
			GetLookupValueLang (Inputs, Outputs);
			return(CancelOperation);
			break;		
		//Mamta Added for GIB Requirement for R1.3 But not in use as of now
			case &quot;checkSVB&quot;:
			checkSVB (Inputs, Outputs );
			return(CancelOperation);
			break;
			case &quot;checkSVBSimNumber&quot;:
			checkSVBSimNumber (Inputs, Outputs );
			return(CancelOperation);
			break;
			case &quot;checkSVBGroup&quot;:
			checkSVBGroup(Inputs, Outputs);
			return (CancelOperation);
			break;
			//GR DEFECT PROD00023368
			case &quot;checkSVBDiscount&quot;:
			checkSVBDiscount(Inputs, Outputs);
			return (CancelOperation);
			break;
		// F. Lazaretti - R 1.3			
		case &quot;CheckLineItemAction&quot;:
			TheApplication().Trace (&quot;ACS :: ACS Order Management :: Service_PreInvokeMethod :: Ending&quot;);
			CheckLineItemAction (Inputs, Outputs);
			return (CancelOperation);
			break;
		//A.Eren - R 1.4 CR 187 Rule1	
		case &quot;checkKargo&quot;:
			checkKargo (Inputs, Outputs );
			return(CancelOperation);
			break;	
		//A. Eren - R 1.4 CR 187 Rule2	
		case &quot;checkPaymentStatus&quot;:
			checkPaymentStatus (Inputs, Outputs );
			return(CancelOperation);
			break;
		//Added to Resolve GIB Crash Issue
		case &quot;VFVerifyGIB&quot;:
			VFVerifyGIB (Inputs, Outputs );
			return(CancelOperation);
			break;
		case &quot;VFResponseGIB&quot;:
			VFResponseGIB (Inputs, Outputs );
			return(CancelOperation);
			break;	//Added to Resolve GIB Crash Issue
		case &quot;VFSmartScriptWF&quot;:    	//Added to Resolve SmartScript Crash Issue
			VFSmartScriptWF (Inputs, Outputs );
			return(CancelOperation);
			break;		//Added to Resolve SmartScript Crash Issue
		case &quot;LoggingBS&quot;:    	//Added to Call Logging BS WP17
			LoggingBS (Inputs, Outputs );
			return(CancelOperation);
			break;			//Added to Call Logging BS WP17			
		case &quot;GIBOrder&quot;:    	//Added to Manage GIB Order Flow for  WP17
			GIBOrder (Inputs, Outputs );
			return(CancelOperation);
			break;
		case &quot;CalculateBillCycle&quot;:
			CalculateBillCycle (Inputs, Outputs );
			return(CancelOperation);
			break;	
		case &quot;GetParameterMVL&quot;:
			GetParameterMVL(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CheckRiskDescription&quot;:
			CheckRiskDescription (Inputs, Outputs );
			return(CancelOperation);
			break;
			
		case &quot;GetAvailableCampaignList&quot;:	
			GetAvailableCampaignList (Inputs, Outputs );
			return(CancelOperation);
			break;	
			
		case &quot;GetDisplayValues&quot;:
			GetDisplayValues(Inputs, Outputs);
			return(CancelOperation);
			break;	
			
		case &quot;CallBundleWF&quot;:	//Added as per WP15 by Amulya						
			CallBundleWF(Inputs, Outputs);
			return(CancelOperation);
			break;
			
		case &quot;CallMSISDNWF&quot;:							
			CallMSISDNWF(Inputs, Outputs);
			return(CancelOperation);
			break;
		//Added for WP 15 on 22/Aug/2011 by Parasuram 
		case &quot;CallInterimPaymentWf&quot;:		
			CallInterimPaymentWf(Inputs, Outputs);
			return(CancelOperation);
			break;
		case &quot;CallCDRInquiryWS&quot;:			//Added for WP15				
			CallCDRInquiryWS(Inputs, Outputs);
			return(CancelOperation);
			break;			
		case &quot;CalculateNumberBytes&quot;: //WP07 Diva start
			CalculateNumberBytes(Inputs, Outputs);
			return(CancelOperation);
			break; 
			
		case &quot;GetLookupMsgArg&quot;: 
			GetLookupMsgArg(Inputs, Outputs);
			return(CancelOperation);
			break; // WP07 end
			
		case &quot;CallUpdateBGList&quot;:  //WP01 R2.1 Diva Added
			CallUpdateBGList(Inputs, Outputs);
			return(CancelOperation);
			break; //End
		
		case &quot;CheckDealerConf&quot;:			//Added for CR 332				
			CheckDealerConf(Inputs, Outputs);
			return(CancelOperation);
			break;	
		
		//WP01 R2.1 Junaid Added on 12/10/2011
		case &quot;SubmitList&quot;:
			SubmitList(Inputs,Outputs)
			return(CancelOperation);
			break;
			
		case &quot;RemoveList&quot;:
			RemoveList(Inputs,Outputs);
			return(CancelOperation);
			break;
		//End
		
		//WP01 R2.1 Junaid Added on 11/11/2011	
		case &quot;CallInqBG&quot;:
			CallInqBG(Inputs,Outputs);
			return(CancelOperation);
			break;
		//End
		case &quot;CheckTranFeeSkip&quot;:
			CheckTranFeeSkip(Inputs, Outputs);
			return(CancelOperation);
			break;

		//Added below script by Amulya for CR205			
		case &quot;CheckLastSubscription&quot;:
			CheckLastSubscription(Inputs, Outputs);
			return(CancelOperation);
			break;
		//[Added by Kiran for WP08][Getting Order data needed for browser script]	
		case &quot;GetOrderData&quot;:
			GetOrderData(Inputs,Outputs)
			return(CancelOperation);
			break;
 		case &quot;CheckSAS&quot;:
 			CheckSAS(Inputs,Outputs);
 			return(CancelOperation);
 			break;	
		case &quot;CallGIBforPRM&quot;:
			CallGIBforPRM(Inputs,Outputs)
			return(CancelOperation);
			break;
		case &quot;CheckDuplicateOldNewSubStatus&quot;: // COPS ID3 BB//         
            CheckDuplicateOldNewSubStatus(Inputs, Outputs);
            return(CancelOperation);
            break;
        case &quot;InvokeServiceMethod&quot;:
        	InvokeServiceMethod(Inputs,Outputs);
        	return(CancelOperation);
        	break;
        case &quot;SendNotificationEmail&quot;: // CR528-Dunning
            SendNotificationEmail(Inputs, Outputs);
            return(CancelOperation);
            break;
        case &quot;ControlSkipPosition&quot;:
            ControlSkipPosition(Inputs, Outputs);
            return(CancelOperation);
            break;
        case &quot;GetParameterWithConstraint&quot;: //[IBMMOLAMLI] - Sales Agile 2nd Sprint - Golf SimCard
            GetParameterWithConstraint(Inputs, Outputs);
            return(CancelOperation);
            break;
            
	}
	return (ContinueOperation);
}"
			   SEQUENCE="85"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetItemOrganization"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetItemOrganization (Inputs,Outputs)
{		
	try
	{
		var booMVGRecordExists;
		var bcMVGOrganization : BusComp;
		var bcAssocOrganization : BusComp;
		var SRId = Inputs.GetProperty(&quot;Service Request Id&quot;);
		var OrgId = Inputs.GetProperty(&quot;Organization Id&quot;);
		
		var boSR   : BusObject =  TheApplication().GetBusObject(&quot;Service Request&quot;); 
		var bcSR   : BusComp =  boSR.GetBusComp(&quot;Service Request&quot;);
		var j;	
	
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;SRId&quot;,SRId);
		inProp.SetProperty(&quot;OrgId&quot;,OrgId);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		bcSR.ClearToQuery ();
		bcSR.SetViewMode(AllView);
		bcSR.ActivateField (&quot;Organization&quot;);
		bcSR.SetSearchSpec (&quot;Id&quot;, SRId);
	    bcSR.ExecuteQuery(ForwardOnly);
	    	
	    j = bcSR.FirstRecord();
	
	    if (j)
	    {
			bcMVGOrganization = bcSR.GetMVGBusComp (&quot;Organization&quot;);
			bcAssocOrganization = bcSR.GetMVGBusComp (&quot;Organization&quot;).GetAssocBusComp();
			bcAssocOrganization.ActivateField(&quot;Id&quot;);
			bcAssocOrganization.SetSearchExpr (&quot;[Id] = &apos;&quot;+OrgId+&quot;&apos;&quot;);
			bcAssocOrganization.ExecuteQuery(ForwardOnly);
			if (bcAssocOrganization.FirstRecord ())
			{
				bcAssocOrganization.Associate (NewBefore);			
				booMVGRecordExists = bcMVGOrganization.FirstRecord ();
				
				while (booMVGRecordExists)
				{
					if (bcMVGOrganization.GetFieldValue (&quot;Id&quot;) == OrgId)
					{
						bcMVGOrganization.SetFieldValue (&quot;SSA Primary Field&quot;, &quot;Y&quot;);
						bcMVGOrganization.WriteRecord ();
						bcSR.WriteRecord();
					}
					booMVGRecordExists = bcMVGOrganization.NextRecord ();
				}
			}   				
	   	 }//if j
	}
	finally
	{
		bcMVGOrganization = null;
		bcAssocOrganization = null;		
		bcSR = null;
		boSR = null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	} 			
	return (CancelOperation);
}"
			   SEQUENCE="76"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubmitList"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/***********************************************************************************
* VFTK Junaid 14/10/2011	: Created                                                 
* Description      			: Used to check the mandatory fields and the WF for inquiry and add process for 
*							  specified list.
***********************************************************************************/

function SubmitList(Inputs,Outputs)
{
	try
	{
		var sList 		= Inputs.GetProperty(&quot;sList&quot;);
		var sAction 	= Inputs.GetProperty(&quot;sAction&quot;);
		var sCustType 	= Inputs.GetProperty(&quot;sCustType&quot;);
		var sCitizenship = Inputs.GetProperty(&quot;sCitizenship&quot;);
		if(sList != &quot;&quot; &amp;&amp; sAction != &quot;&quot; &amp;&amp; sCustType != &quot;&quot;)
		{
			var sActionAdd 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_LIST_ACTION&quot;,&quot;Action Add&quot;);
			var sListBlack 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_LIST_NAME&quot;,&quot;Black List&quot;);
			var sListCepAran 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_LIST_NAME&quot;,&quot;Cep Aran Black List&quot;);
			var sListCreditCard = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_LIST_NAME&quot;,&quot;Credit Card Black List&quot;);
			var sListGrey 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_LIST_NAME&quot;,&quot;Grey List&quot;);
			var sConsumer 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLT_CUSTOMER_TYPE&quot;,&quot;BLT Consumer&quot;);
			var sTurkish 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLT_NATIONALITY&quot;,&quot;BLT Turkish&quot;);
			var sFirstName 		= Inputs.GetProperty(&quot;sFirstName&quot;);
			var sLastName 		= Inputs.GetProperty(&quot;sLastName&quot;);
			var sFatherName 	= Inputs.GetProperty(&quot;sFatherName&quot;);
			var sDOB 			= Inputs.GetProperty(&quot;sDOB&quot;);
			var sBirthPlace 	= Inputs.GetProperty(&quot;sBirthPlace&quot;);
			var sGender 		= Inputs.GetProperty(&quot;sGender&quot;);
			var sTaxId 			= Inputs.GetProperty(&quot;sTaxId&quot;);
			var sFirmName 		= Inputs.GetProperty(&quot;sFirmName&quot;);
			var sTaxCity 		= Inputs.GetProperty(&quot;sTaxCity&quot;);
			var sTaxOff 		= Inputs.GetProperty(&quot;sTaxOff&quot;);
			var sExpr 			= &quot;&quot;;
			var strMsg 			=&quot;&quot;;
			var strMsg1 		=&quot;&quot;;
			var strMsg2 		=&quot;&quot;;
			var strMsg3 		=&quot;&quot;;
			var strMsg4 		=&quot;&quot;;
			var strMsg5 		=&quot;&quot;;
			var strMsg6 		=&quot;&quot;;
			TheApplication().SetProfileAttr(&quot;List&quot;,sList);
			TheApplication().SetProfileAttr(&quot;Action&quot;,sAction);
			if(sAction != sActionAdd &amp;&amp; (sList == sListCepAran || sList == sListCreditCard))
			{
				if(sList == sListCepAran)
				{
					if((sFirstName != &quot;&quot; &amp;&amp; sLastName != &quot;&quot;) || sCustType != sConsumer)
					{
						TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).ClearToQuery();			
						TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).ExecuteQuery(ForwardBackward);
					}//Review Parent-Child Query: The Query is only on one BC’s in BO, so query cannot be removed 4/24/2012 Udbhav IDC
					else
					{
						strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_060&quot;);
						strMsg1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;First Name&quot;);
	  					strMsg2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Last Name&quot;);						  
						TheApplication().RaiseErrorText(strMsg + &quot;\r&quot; + strMsg1 + &quot;\r&quot; + strMsg2);	 				
					}
				}
				else
				{
					if((sFirstName != &quot;&quot; &amp;&amp; sLastName != &quot;&quot;) || sCustType != sConsumer)
					{
						TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).ClearToQuery();			
						TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).ExecuteQuery(ForwardBackward);
					}//Review Parent-Child Query: The Query is only on one BC’s in BO, so query cannot be removed 4/24/2012 Udbhav IDC
					else
					{
						strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_060&quot;);
						strMsg1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;First Name&quot;);
	  					strMsg2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Last Name&quot;);						  
  				    	TheApplication().RaiseErrorText(strMsg + &quot;\r&quot; + strMsg1 + &quot;\r&quot; + strMsg2);	 				
					}
				}
			}
			else if(sAction == sActionAdd &amp;&amp; (sList == sListBlack || sList == sListGrey))
			{
				//Inactived by WA#22 - MPONTE 2014.07.31
				//if(sFirstName != &quot;&quot; &amp;&amp; sLastName != &quot;&quot; &amp;&amp; sFatherName != &quot;&quot; &amp;&amp; sDOB != &quot;&quot; &amp;&amp; sBirthPlace != &quot;&quot; &amp;&amp; sGender != &quot;&quot;)
				if(sFirstName != &quot;&quot; &amp;&amp; sLastName != &quot;&quot; &amp;&amp; sFatherName != &quot;&quot; &amp;&amp; sDOB != &quot;&quot; &amp;&amp; sBirthPlace != &quot;&quot;)
				{
					if(sCustType != sConsumer &amp;&amp; (sTaxId == &quot;&quot; || sTaxOff == &quot;&quot; || sTaxCity == &quot;&quot; || sFirmName == &quot;&quot;))
					{
						strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_060&quot;);
					    strMsg1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Tax ID&quot;);
						strMsg2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Tax Office&quot;);
						strMsg3 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Firm Name&quot;);
						TheApplication().RaiseErrorText(strMsg + &quot;\r&quot; + strMsg1 + &quot;\r&quot; + strMsg2 + &quot;\r&quot; + strMsg3);
					}
					else
					{
						Outputs.SetProperty(&quot;Error&quot;,&quot;N&quot;);
					}
				}
				else
				{
					strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_060&quot;);
				    strMsg1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;First Name&quot;);
					strMsg2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Last Name&quot;);
					strMsg3 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Father Name&quot;);
					strMsg4 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Birth Date&quot;);
					strMsg5 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Place of Birth&quot;);
					//Inactived by WA#22 - MPONTE 2014.07.31
					//strMsg6 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Gender&quot;); 
					//TheApplication().RaiseErrorText(strMsg + &quot;\r&quot; + strMsg1 + &quot;\r&quot; + strMsg2 + &quot;\r&quot; + strMsg3 + &quot;\r&quot; + strMsg4 + &quot;\r&quot; + strMsg5 + &quot;\r&quot; + strMsg6);
					TheApplication().RaiseErrorText(strMsg + &quot;\r&quot; + strMsg1 + &quot;\r&quot; + strMsg2 + &quot;\r&quot; + strMsg3 + &quot;\r&quot; + strMsg4 + &quot;\r&quot; + strMsg5);
					
				}
			}
			else if(sAction != sActionAdd &amp;&amp; (sList == sListBlack || sList == sListGrey))
			{
				if((sFirstName != &quot;&quot; &amp;&amp; sLastName != &quot;&quot;) || sCustType != sConsumer)
				{
					TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).ClearToQuery();			
					TheApplication().ActiveBusObject().GetBusComp(&quot;VF Black List Transaction VBC&quot;).ExecuteQuery(ForwardBackward);
				}//Review Parent-Child Query: The Query is only on one BC’s in BO, so query cannot be removed 4/24/2012 Udbhav IDC
					
				else
				{
				  	strMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_060&quot;);
				  	strMsg1 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;First Name&quot;);
 					strMsg2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BLACK_TRANSACTION&quot;,&quot;Last Name&quot;);						  
				 	TheApplication().RaiseErrorText(strMsg + &quot;\r&quot; + strMsg1 + &quot;\r&quot; + strMsg2);	 				
				}
			}
		}
	}
	catch(e)
	{			
		TheApplication().SetProfileAttr(&quot;List&quot;,&quot;&quot;);
		TheApplication().SetProfileAttr(&quot;Action&quot;,&quot;&quot;);	
		throw(e);
	}
}"
			   SEQUENCE="77"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="10/12/2011 10:23:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubmitOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SubmitOrder (Inputs, Outputs)
{
	/************************************************************************************
	* ACS AD 26-Jul-06 : Created                                                        *
	* Description      : This script takes the Order Id as input and submits the said   *
	*                    order if its status is &apos;Pending&apos;.                              *
	************************************************************************************/
	try
	{
		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;,&quot;Y&quot;);
		
		var strOrderId     = Inputs.GetProperty (&quot;OrderId&quot;);
		var strOrderStatus = &quot;&quot;;		
		var psInputs : PropertySet = TheApplication().NewPropertySet();
		var psOutputs : PropertySet = TheApplication().NewPropertySet();		
		var bsWorkflowProcMgr : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);		
		var booLineItemExists;
		var booOrderExists;
		
		//Initialize the BO and BC
    	var boOrder : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
    	var bcOrder : BusComp = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcOrderItem : BusComp = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		//Query for Order
		bcOrder.ClearToQuery();
		bcOrder.SetViewMode(AllView);
		bcOrder.ActivateField(&quot;Status&quot;);
		bcOrder.SetSearchSpec (&quot;Id&quot;, strOrderId);
		//Scripting31: Moved child query to parent-Start
		bcOrderItem.ClearToQuery();
		bcOrderItem.SetViewMode(AllView);
		bcOrderItem.ActivateField(&quot;Order Header Id&quot;);
	    bcOrderItem.SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
		//Scripting31: Moved child query to parent-End
		
    	bcOrder.ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
		
		booOrderExists = bcOrder.FirstRecord();
		
		if (booOrderExists != 0)
		{	
			strOrderStatus = bcOrder.GetFieldValue (&quot;Status&quot;);
			if (strOrderStatus != &quot;Pending&quot; &amp;&amp; strOrderStatus != &quot;Error&quot; &amp;&amp; strOrderStatus != &quot;Submitted-Pending&quot;)
			{
				TheApplication().RaiseErrorText (&quot;Orders with status &quot;+strOrderStatus+&quot; cannot be submitted&quot;);
			}
		
			booLineItemExists = bcOrderItem.FirstRecord();
			//If Item exists, call reprice signal
			if (booLineItemExists != 0)
    		{
				bcOrderItem.InvokeMethod(&quot;CalculatePriceAll&quot;);
			}
    	}	 	 
    	//Call the &apos;XWF SIS OM Submit Order Process&apos; WF for Order Submit with
    	//&apos;OrderID&apos; as input parameter
	
		psInputs.SetProperty(&quot;ProcessName&quot;, &quot;XWF SIS OM Submit Order Process&quot;);
		psInputs.SetProperty(&quot;Object Id&quot;, strOrderId);
		psInputs.SetProperty(&quot;Popup Message&quot;, &quot;N&quot;);
	
		bsWorkflowProcMgr.InvokeMethod(&quot;RunProcess&quot;,psInputs,psOutputs);
		
		//Populate the output values
		Outputs.SetProperty(&quot;ErrorMessage&quot;, &quot;&quot;);
		Outputs.SetProperty(&quot;StatusCode&quot;, &quot;0&quot;);
		Outputs.SetProperty(&quot;ErrorCode&quot;, &quot;0&quot;);
	}
	catch (e)
	{
		Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorMessage&quot;, e.toString ());
	}
	finally
	{
		psInputs          = null;
		psOutputs         = null;
		bsWorkflowProcMgr = null;
    	bcOrder           = null;
		bcOrderItem       = null;
    	boOrder           = null;
		inProp			  = null;
		outProp			  = null;
		BS				  = null;
	}
}"
			   SEQUENCE="78"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="01/31/2009 16:17:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateDashBoard"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateDashBoard()
{
	try
	{
		var svc				: Service = TheApplication().GetService(&quot;Persistent Customer Dashboard&quot;);
		var inputs 			: PropertySet = TheApplication().NewPropertySet();
		var outputs 		: PropertySet = TheApplication().NewPropertySet();
		var lsAccSearched	= TheApplication().GetProfileAttr(&quot;SearchedAccId&quot;);
		
		if(lsAccSearched != &quot;&quot;)
		{
			inputs.SetProperty(&quot;Source Name&quot;, &quot;Base View&quot;);
			inputs.SetProperty(&quot;Buscomp Name&quot;, &quot;Account&quot;);
			inputs.SetProperty(&quot;RowId&quot;, lsAccSearched);
		
			svc.InvokeMethod(&quot;Update Dashboard&quot;,inputs,outputs);
		}
	}
	finally
	{
		svc = null;
		inputs = null;
		outputs = null;
	}
}"
			   SEQUENCE="79"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="12/23/2011 08:02:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="ACS MC R1.3 20100524 - Newly Created for GIB Requirement."
			   INACTIVE="N"
			   NAME="VFGIBCall"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VFGIBCall (Inputs, Outputs)
{	
	try
	{													
		var strOrderId = Inputs.GetProperty(&quot;Order Id&quot;);
		var boOrderEntry : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcOrder : BusComp = boOrderEntry.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var strTaxId = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;);		
		if ((strOrderId != &quot;undefined&quot;) || (strOrderId != &quot;&quot;) || (strOrderId != null))
		{	bcOrder.SetViewMode(AllView);
			bcOrder.ClearToQuery();
			bcOrder.ActivateField(&quot;VF GIB Call&quot;);
			bcOrder.ActivateField(&quot;VFOrderSubCalc&quot;);
			bcOrder.ActivateField(&quot;VFOrderTypeCalc&quot;);
			bcOrder.ActivateField(&quot;VF GIB Order Calc&quot;);
			bcOrder.ActivateField(&quot;VF Tax Number&quot;);
			bcOrder.SetSearchSpec(&quot;Id&quot;,strOrderId);
			bcOrder.ExecuteQuery(ForwardOnly);
			if(bcOrder.FirstRecord())
			{			
				var strGIBType = bcOrder.GetFieldValue(&quot;VF GIB Order Calc&quot;);
				var strGIBOrderSubType = bcOrder.GetFieldValue(&quot;VFOrderSubCalc&quot;);
				var strOrderType = bcOrder.GetFieldValue(&quot;VFOrderTypeCalc&quot;);
				var strGIBCall = bcOrder.GetFieldValue(&quot;VF GIB Call&quot;);
				var strTaxNumber = bcOrder.GetFieldValue(&quot;VF Tax Number&quot;);	
			}
		}
		var strGIBENABLED = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_GIB_ABLE_LOV&quot;,&quot;GIBEnabled&quot;);
		Outputs.SetProperty(&quot;strTAXOFF&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;151&quot;));
		Outputs.SetProperty(&quot;GIBDisable&quot;,strGIBENABLED);															
		Outputs.SetProperty(&quot;strTITLE&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;152&quot;));	
		Outputs.SetProperty(&quot;strTaxID&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;168&quot;));																		
		Outputs.SetProperty(&quot;strCompType&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;169&quot;));	
		Outputs.SetProperty(&quot;strOK&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;153&quot;));
		Outputs.SetProperty(&quot;strAdmin&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;155&quot;));	
		Outputs.SetProperty(&quot;strGIBNR&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;210&quot;));
		Outputs.SetProperty(&quot;NoTaxOffice&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TAX_OFFICE&quot;,&quot;taxOffice&quot;));
		Outputs.SetProperty(&quot;NoTaxId&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;));
		Outputs.SetProperty(&quot;Suspect&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;80&quot;));
		Outputs.SetProperty(&quot;Prospect&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;90&quot;));
		Outputs.SetProperty(&quot;Active&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;95&quot;));
		Outputs.SetProperty(&quot;WarningMsg07&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;290&quot;));
		Outputs.SetProperty(&quot;WarningMsg06&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;291&quot;));
		Outputs.SetProperty(&quot;WarningMsg20&quot;,TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;296&quot;));
		Outputs.SetProperty(&quot;Acquired&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;100&quot;));
		Outputs.SetProperty(&quot;GIBUnVerStatus&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;));
		Outputs.SetProperty(&quot;GIBUnVerDownStatus&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverifiedDown&quot;));
		Outputs.SetProperty(&quot;GIBVerStatus&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerified&quot;));
		Outputs.SetProperty(&quot;GIBApprStatus&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBApproved&quot;));
		Outputs.SetProperty(&quot;GIBApprDownStatus&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBApprovedDown&quot;));
		Outputs.SetProperty(&quot;GIBVerDownStatus&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBVerifiedDown&quot;));
		Outputs.SetProperty(&quot;FraudReason&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_REASON&quot;,&quot;Fraud&quot;));
		Outputs.SetProperty(&quot;MissingDoc&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_REASON&quot;,&quot;Missing Document&quot;));
		Outputs.SetProperty(&quot;OrderStatus&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;));
		Outputs.SetProperty(&quot;CustomerType&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_TYPE&quot;,&quot;102&quot;));
		if(((strGIBType==&quot;Y&quot;)||(strGIBOrderSubType==&quot;Y&quot;)||(strOrderType==&quot;Y&quot;)) &amp;&amp;((strGIBENABLED==&quot;Y&quot;)&amp;&amp;(strTaxNumber!=strTaxId)))
		{
			Outputs.SetProperty(&quot;VFGIBCall&quot;,strGIBCall);
		}	
		return(CancelOperation);
	}
	finally
	{		
		bcOrder = null;
		boOrderEntry = null;
	}
}"
			   SEQUENCE="81"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="10/08/2010 20:54:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VFResponseGIB"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VFResponseGIB(pset_Inputs,pset_Outputs)
{           
    try
    {
		var strAccountId = pset_Inputs.GetProperty(&quot;Account Id&quot;);
		var pset_SiebelMessage = TheApplication ().NewPropertySet ();
		pset_SiebelMessage = pset_Inputs.GetChild(0);
		var bsWfrMgr : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var Inputs : PropertySet = TheApplication ().NewPropertySet (); 
		var Outputs : PropertySet = TheApplication ().NewPropertySet (); 
		Inputs.SetProperty(&quot;Account Id&quot;, strAccountId);
		Inputs.AddChild(pset_SiebelMessage);
		Inputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Response GIB Data Workflow&quot;);                                                              
		bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;, Inputs,Outputs);
		var strIsActive = Outputs.GetProperty(&quot;IS_ACTIVE&quot;);
		var strRegNo =  Outputs.GetProperty(&quot;Registration No&quot;);              
		pset_Outputs.SetProperty(&quot;IS_ACTIVE&quot;,strIsActive);
		pset_Outputs.SetProperty(&quot;Registration No&quot;,strRegNo);
		return(CancelOperation);
    }
    finally
    {
		bsWfrMgr =null;
		pset_SiebelMessage = null;
		Inputs=null;
		Outputs=null;
    }          
}"
			   SEQUENCE="82"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="02/09/2011 15:49:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VFSmartScriptWF"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VFSmartScriptWF(Inputs,Outputs)
{           
    try
    {		
		var bsWfrMgr : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var Inputs : PropertySet = TheApplication ().NewPropertySet (); 
		var Outputs : PropertySet = TheApplication ().NewPropertySet ();		
		Inputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Refresh SmartScript Workflow&quot;);                                                              
		bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;, Inputs,Outputs);		
		return(CancelOperation);
    }
    finally
    {       
       bsWfrMgr =null;
       Inputs=null;
       Outputs=null;       
    }          
}"
			   SEQUENCE="83"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="02/15/2011 11:57:45"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VFVerifyGIB"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function VFVerifyGIB(pset_Inputs,pset_Outputs)
{           
     try
     {      
       var strAccountId = pset_Inputs.GetProperty(&quot;Account Id&quot;);
       var pset_SiebelMessage : PropertySet = TheApplication ().NewPropertySet ();
       var bsWfrMgr : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
       var WFInputs : PropertySet = TheApplication ().NewPropertySet (); 
       var WFOutputs : PropertySet = TheApplication ().NewPropertySet (); 
       WFInputs.SetProperty(&quot;Account Id&quot;,strAccountId);        
       WFInputs.SetProperty(&quot;InquiryType&quot;,&quot;Undetailed&quot;);
       WFInputs.SetProperty(&quot;ProcessName&quot;,&quot;VF Verify GIB Data&quot;);
       bsWfrMgr.InvokeMethod(&quot;RunProcess&quot;,WFInputs,WFOutputs);
       var strTaxOfficeName = WFOutputs.GetProperty(&quot;TAX_OFFICE_NAME&quot;);
       var strTitle = WFOutputs.GetProperty(&quot;DOD_TITLE&quot;);
       var TAX_NO = WFOutputs.GetProperty(&quot;TAX_NO&quot;);
       var COMPANY_TYPE = WFOutputs.GetProperty(&quot;COMPANY_TYPE&quot;);
       var strStatusCode = WFOutputs.GetProperty(&quot;VF GIB Status Code&quot;);
       pset_SiebelMessage = WFOutputs.GetChild (0);
       pset_Outputs.AddChild (pset_SiebelMessage);
       pset_Outputs.SetProperty(&quot;TAX_OFFICE_NAME&quot;,strTaxOfficeName);
       pset_Outputs.SetProperty(&quot;DOD_TITLE&quot;,strTitle);
       pset_Outputs.SetProperty(&quot;TAX_NO&quot;,TAX_NO);
       pset_Outputs.SetProperty(&quot;COMPANY_TYPE&quot;,COMPANY_TYPE);
       pset_Outputs.SetProperty(&quot;VF GIB Status Code&quot;,strStatusCode);
       return(CancelOperation);              
     }
     finally
     {
            bsWfrMgr =null;
            WFInputs=null;
            WFOutputs=null;
            pset_SiebelMessage= null;
     }
}"
			   SEQUENCE="84"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="02/09/2011 15:49:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateFutureDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateFutureDate(strEnd)
{
//*****************************************************
//** Function: ValidateFutureDate
//** Purpose:  End date should not be future date
//** Inputs :  None.
//** Outputs:  None.
//** Returns:  None.
//*****************************************************
//** Revision History:
//** 01 - 05/13/2011 - Parasuram Mainam
//**    R142 - WP 15 Billing Inquiry - Created New.
//*****************************************************
	var dtEnd=new Date(strEnd);
	var dtToday=new Date();
	if(dtEnd&gt;dtToday)
	{
		TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;287&quot;));
	}
}"
			   SEQUENCE="80"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="09/08/2011 10:54:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkKargo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkKargo(Inputs, Outputs)
{

    try
    {
		var App 		= TheApplication();
		var AssetBO		 	: BusObject = App.GetBusObject(&quot;Asset Management&quot;);
		var AssetBC			: BusComp = AssetBO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		
		var ParamBO			: BusObject = App.GetBusObject(&quot;ACS NI Parameter&quot;);
		var ParamBC			: BusComp = ParamBO.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
		
		var OrderItemBO    : BusObject = App.GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemBC    : BusComp = OrderItemBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var inProp 	: PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var orderId			= Inputs.GetProperty(&quot;orderId&quot;);
		var Active          = App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);	
		var Suspended       = App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Suspended&quot;);
		var Open			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Open&quot;);
		var Installed       = App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Installed&quot;);
		var Failed			= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Failed&quot;);
		var Pending		    = App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Pending&quot;);
		var InTransit	    = App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;In-transit&quot;);
		var SubPending      = App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Submitted-Pending&quot;);
		var Waiting 		= App.InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Waiting&quot;);
		var New				= App.InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var TransferReason  = App.InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1121&quot;);
		var recordCount    = 0;
		var CountOrder     = 0;
		var Limit = 0;
		var ProductSearchSpecOrder; 
		var ProductSearchSpecAsset;
		var k = 0;
		var result = &quot;OK&quot;;
	   
		// Query for to get the products that wanted to be limited with Fuction VFProductList
		with (ParamBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Function&quot;);
			ActivateField(&quot;Name&quot;);
			ActivateField(&quot;Value&quot;);
			SetSearchSpec(&quot;Function&quot;, &quot;VFProductList&quot;);
			ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
		}	//   Counts the Kargo Product on Asset Level
		if (ParamBC.FirstRecord())  	//   To get each product to check from CX parameter table
		{
			do
			{
				if (k != 0)
				{
					ProductSearchSpecOrder = ProductSearchSpecOrder + &quot; OR [Part Number] = &apos;&quot; + ParamBC.GetFieldValue(&quot;Name&quot;)+&quot;&apos;&quot;;
					ProductSearchSpecAsset = ProductSearchSpecAsset + &quot; OR [Product Part Number] = &apos;&quot; + ParamBC.GetFieldValue(&quot;Name&quot;)+&quot;&apos;&quot;;
				}
				else
				{
					ProductSearchSpecOrder =  &quot;( [Part Number] = &apos;&quot; + ParamBC.GetFieldValue(&quot;Name&quot;)+&quot;&apos;&quot;;
					ProductSearchSpecAsset =  &quot;( [Product Part Number] = &apos;&quot; + ParamBC.GetFieldValue(&quot;Name&quot;)+&quot;&apos;&quot;;
				}
				k++;
			} 
			while (ParamBC.NextRecord());
			ProductSearchSpecOrder = ProductSearchSpecOrder + &quot;)&quot;;
			ProductSearchSpecAsset = ProductSearchSpecAsset + &quot;)&quot;;		
		   var SearchSpecAsset = &quot;[Order Header Id]= &apos;&quot;+orderId+&quot;&apos; AND [Action Code]=&apos;&quot;+New+&quot;&apos; AND &quot;+ProductSearchSpecOrder+&quot;&quot;;
		   with(OrderItemBC)  // Check if there is Kargo Product inside the order
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Order Header Id&quot;);
				ActivateField(&quot;Action Code&quot;);
				ActivateField(&quot;Part Number&quot;);
				ActivateField(&quot;Account Id&quot;);
				//Begin - Scripting 15 - Input validation
			
				inProp.SetProperty(&quot;orderId&quot;,orderId);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				//End - Scripting 15
				SetSearchExpr(SearchSpecAsset);
				ExecuteQuery(ForwardOnly);
				CountOrder = CountRecords();
			}
		   if (OrderItemBC.FirstRecord())
		   {
		        var CustomerId     = OrderItemBC.GetFieldValue(&quot;Account Id&quot;);    
		     var SearchSpecAsset= &quot;[Owner Account Id]= &apos;&quot;+CustomerId+&quot;&apos; AND ([Status]=&apos;&quot;+Active+&quot;&apos;OR [Status]=&apos;&quot;+Suspended+&quot;&apos;) AND &quot;+ProductSearchSpecAsset+&quot;&quot;;
			 with(AssetBC)   // Query to get the number of assets
			 {
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Owner Account Id&quot;);
					ActivateField(&quot;Status&quot;);
					ActivateField(&quot;Product Part Number&quot;);
					SetSearchExpr(SearchSpecAsset);
					recordCount = CountRecords (); 
			 }   
		 	var SearchSpecAsset= &quot;[Account Id]= &apos;&quot;+CustomerId+&quot;&apos; AND ([Status]=&apos;&quot;+Open+&quot;&apos;OR [Status]=&apos;&quot;+Installed+&quot;&apos; OR [Status]=&apos;&quot;+Failed+&quot;&apos;OR [Status]=&apos;&quot;+InTransit+&quot;&apos;OR [Status]=&apos;&quot;+SubPending+&quot;&apos; OR [Status]=&apos;&quot;+Pending+&quot;&apos; OR [Status]=&apos;&quot;+Waiting+&quot;&apos;) AND &quot;+ProductSearchSpecOrder+&quot; AND [Action Code]=&apos;&quot;+New+&quot;&apos; AND [TELCO Root Item Action Reason] &lt;&gt;&apos;&quot;+TransferReason+&quot;&apos;&quot;; //JMARQUES WA#39
		    with(OrderItemBC)  // Counts all orders that adds the kargo product in sttatus explained above
			{
					SetViewMode(AllView);
					ClearToQuery();  
					ActivateField(&quot;Account Id&quot;);
					ActivateField(&quot;Status&quot;);
					ActivateField(&quot;Part Number&quot;);
					ActivateField(&quot;Action Code&quot;);
				    ActivateField(&quot;TELCO Root Item Action Reason&quot;); //JMARQUES WA#39
					SetSearchExpr(SearchSpecAsset);
					recordCount =  recordCount + CountRecords(); 
			} 
			with (ParamBC)
		   	{
			   	SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Function&quot;);
				ActivateField(&quot;Value&quot;);
				SetSearchSpec(&quot;Function&quot;, &quot;VFLimitKargo&quot;);
				ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
			   	}
			   	var ParamBCisRecord = ParamBC.FirstRecord();
			   	if(ParamBCisRecord)
			   	{
			   		Limit = ParamBC.GetFieldValue(&quot;Value&quot;);
					if (recordCount &gt; Limit)
			    	{
			         	var gap1  = recordCount - CountOrder ;  // Total number of Kargo products excluding our submitted order
			          	var gap2  = Limit - gap1;	// Total number of Kargo products that can be activated
			          	result=&quot;KO&quot;;
			         	Outputs.SetProperty(&quot;ResCount&quot;,gap2); 
			          	Outputs.SetProperty(&quot;ResLimit&quot;,Limit);      
			    	 }
			    }
		  	}
		 }	  
		 Outputs.SetProperty(&quot;Res&quot;,result);
	 }
	 catch(e) 
	 {
		var errormessagecount = e.toString()
		Outputs.SetProperty(&quot;Res&quot;,&quot;KO&quot;); 
	 }
	 finally
	 {
		AssetBC 		= null;
		ParamBC 		= null;
		OrderItemBC 	= null;
		AssetBO 		= null;
		OrderItemBO 	= null;
		ParamBO 		= null;
		inProp			= null;
		outProp			= null;
		BS				= null;
	 }	
}"
			   SEQUENCE="15"
			   UPDATED="06/01/2015 12:23:57"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2011 17:31:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkPaymentStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkPaymentStatus(Inputs, Outputs )
{
	try 
	{
    var ParamBO			: BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
    var ParamBC		    : BusComp = ParamBO.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
    
    var OrderItemBO    : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
    var OrderItemBC    : BusComp = OrderItemBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
     
    var AssetXABO      : BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
    var AssetXABC      : BusComp = AssetXABO.GetBusComp(&quot;HP Submit - X Asset Mgmt - Asset XA&quot;);
    	  
	var OrderId         = Inputs.GetProperty(&quot;OrderId&quot;);
	var Complete		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
	var New				= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
	var SuspendCredit    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;114&quot;);
	var SuspendFraud    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;115&quot;);
	var MNPActivation   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
	var NewActivation   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;225&quot;);
	var ModifyOptions   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;232&quot;);
	var Respond  = &quot;&quot;;   // The Response will be held in this value
	var currentDate     = new Date;  
	var FinishResponse  = &quot;0&quot;;
	// Query for to get the products that wanted to be limited with Fuction VFProductList
    with (ParamBC)
    {
    	ClearToQuery();
    	SetViewMode(AllView);
		ActivateField(&quot;Name&quot;);
		ActivateField(&quot;Value&quot;);
		SetSearchSpec(&quot;Function&quot;, &quot;VFProductList&quot;);
		ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
	}
	//   Check if the order contains Cargo Product
	if (ParamBC.FirstRecord())
	{
	 	do
	 	{		
		var ProductNumber  	= ParamBC.GetFieldValue(&quot;Name&quot;);
        var Limit 			= ParamBC.GetFieldValue(&quot;Value&quot;);
        var SearchSpecAsset= &quot;[Order Header Id]= &apos;&quot;+OrderId+&quot;&apos; AND [Action Code]=&apos;&quot;+New+&quot;&apos; AND [Part Number]=&apos;&quot;+ProductNumber+&quot;&apos;&quot;;
		with(OrderItemBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Order Header Id&quot;);
			ActivateField(&quot;Action Code&quot;);
			ActivateField(&quot;Root Asset Integration Id&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;TELCO Root Item Action Reason&quot;); // WA#39 JMARQUES - VF Order Header Reason
			ActivateField(&quot;TELCO Root Item Action Type&quot;); // WA#39 JMARQUES - Order Sub Type
			ActivateField(&quot;Activation Date&quot;);
			ActivateField(&quot;Account Id&quot;);
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;OrderId&quot;,OrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(SearchSpecAsset);
			ExecuteQuery(ForwardOnly);
		}
			if (OrderItemBC.FirstRecord())  // If there is a Kargo product in Add status inside the order
			{
				var CustomerId   = OrderItemBC.GetFieldValue(&quot;Account Id&quot;);
				var OrderSubType = OrderItemBC.GetFieldValue(&quot;TELCO Root Item Action Type&quot;); //WA#39 - JMARQUES
				var OrderReason  = OrderItemBC.GetFieldValue(&quot;TELCO Root Item Action Reason&quot;); //WA#39 - JMARQUES
			    if (OrderSubType == MNPActivation)
			    {
			    	Respond = &quot;OK&quot;   //It&apos;s  a new MNP Activation, no control order continues
			    	FinishResponse = &quot;1&quot;
			    	break;
			    }
			    else if (OrderReason == NewActivation)
			    {
			    	Respond = &quot;KO2&quot; // Order Submission is prevented
			    	FinishResponse = &quot;1&quot;
			    	break;
			    }
			    else if (OrderReason == ModifyOptions)
			    {
			    	do
			    	{
			    	var AssetIntegId = OrderItemBC.GetFieldValue(&quot;Root Asset Integration Id&quot;);
			        with (AssetXABC)   //Query to check the Donor Operator value of subscription
    				{
					   	SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Activation Date&quot;);
						ActivateField(&quot;Text Value&quot;);
						SetSearchSpec(&quot;Name&quot;, &quot;Donor Operator&quot;);
						SetSearchSpec(&quot;Integration Id&quot;,AssetIntegId);
						ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
					}
					if (AssetXABC.FirstRecord())
					{
						var CompanyVal	   = AssetXABC.GetFieldValue(&quot;Text Value&quot;);
				        var dDate = new Date(AssetXABC.GetFieldValue(&quot;Activation Date&quot;));
						var iTodaySec = currentDate.getTime()/1000;
						var iDateSec = dDate.getTime()/1000;
   						var iDiff = Clib.difftime(iTodaySec,iDateSec);
   						var iDiffHours = (iDiff/60)/60;	
   						var SearchSpecAsset2= &quot;[Asset Integration Id]= &apos;&quot;+AssetIntegId+&quot;&apos; AND [Status]=&apos;&quot;+Complete+&quot;&apos; AND ([TELCO Root Item Action Type]=&apos;&quot;+SuspendCredit+&quot;&apos; OR [TELCO Root Item Action Type]=&apos;&quot;+SuspendFraud+&quot;&apos;) AND [Completed Date] &gt; Timestamp()-90 &quot;; //JMARQUES WA#39
					if (CompanyVal == &quot;&quot; || CompanyVal == &quot;VTAS&quot;)    // If it is not a MNP Line
					{
						if (iDiffHours &gt;= (30*24*3))  // If 90 Days passed since Activation Date
   						{
								with(OrderItemBC)  // Query to find Suspend-Credit/Fraud orders
							      {
									SetViewMode(AllView);
									ClearToQuery();
									ActivateField(&quot;Asset Integration Id&quot;);
									ActivateField(&quot;Status&quot;);
									ActivateField(&quot;TELCO Root Item Action Type&quot;); //JMARQUES WA#39
									ActivateField(&quot;Completed Date&quot;);
									SetSearchExpr(SearchSpecAsset2);
									ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
							      }	   						
    					     if (OrderItemBC.FirstRecord()) // If there is any Suspend-Credit/Fraud order completed
    					     {
    					     	Respond = &quot;KO&quot; 
    					     	FinishResponse = &quot;1&quot;
    					     	break;
    					     }
    					     else
    					     {
    					     	Respond = &quot;OK&quot;
    					     }
   						}
   						else   // If 90 Days did not pass since Activation Date
   						{
   							Respond = &quot;KO2&quot;;
   							FinishResponse = &quot;1&quot;;
   							break;
   						}
   					}
					else   // If it is a MNP Line
					{
   						with(OrderItemBC)    // Query to find Suspend-Credit/Fraud orders
						{
								SetViewMode(AllView);
								ClearToQuery();
								ActivateField(&quot;Asset Integration Id&quot;);
								ActivateField(&quot;Status&quot;);
								ActivateField(&quot;TELCO Root Item Action Type&quot;); //JMARQUES WA#39
								ActivateField(&quot;Completed Date&quot;);
								SetSearchExpr(SearchSpecAsset2);
								ExecuteQuery(ForwardOnly);
						}
   						if (OrderItemBC.FirstRecord())    // If there is any Suspend-Credit/Fraud order completed
    					{
    					     Respond = &quot;KO&quot;
    					     FinishResponse = &quot;1&quot;;
    					     break;
    					}
    					else
    					{
    					     Respond = &quot;OK&quot;
    					}	
					}
					}
					} while (OrderItemBC.NextRecord()&amp;&amp;FinishResponse == &quot;0&quot;);
				}	    
	 	 }
	 	 else
		 {
		    Outputs.SetProperty(&quot;Res&quot;,&quot;OK&quot;);    
		 }       
		 }  while (ParamBC.NextRecord() &amp;&amp; FinishResponse == &quot;0&quot;);

      }          
     Outputs.SetProperty(&quot;Res&quot;, Respond);
     }
     catch (e)
     {
     	var errormessagestatus = e.toString();
        Respond= &quot;KO&quot;
     	Outputs.SetProperty(&quot;Res&quot;, Respond);
     }
     finally
     { 
     	ParamBC = null;
     	AssetXABC = null;
     	OrderItemBC = null;
     	inProp 	= null;
		outProp	= null;
		BS		= null;
     	OrderItemBO = null;
    	ParamBO = null;
     	AssetXABO = null;
     }
}"
			   SEQUENCE="19"
			   UPDATED="06/01/2015 12:23:57"
			   UPDATED_BY="SADMIN"
			   CREATED="01/24/2011 17:31:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkSVB"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkSVB(Inputs, Outputs )
{
	try
	{		  
		var OrderBO      	: BusObject =  TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var Assetbo : BusObject;
		var AssetXAbc : BusComp;
		var OrderItemXABC : BusComp;
		var orderId	   		= Inputs.GetProperty(&quot;orderId&quot;);	
		var result 			= &quot;&quot;;
		var array 			= new Array;
		var array2 			= new Array;
		var ArrResult		= new Array;
		var partNum    		= null;
		var actionCode		= null;
		var statusItem 		= null;
		var Id 				= null;
		var BillingAccountId= null;
		var actionNew		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var modActionCd  	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;Modified&quot;);
		var i 				= 0;
		var activeOrders 	= 0;
		var bsSVB 			: Service = TheApplication().GetService(&quot;VF SVB Management&quot;);
		var svbInputs 		: PropertySet = TheApplication().NewPropertySet();
		var svbOutputs 		: PropertySet = TheApplication().NewPropertySet();
		var OrderItemBC  	: BusComp =  OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		with(OrderItemBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Order Header Id&quot;);
			
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;orderId&quot;,orderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchSpec(&quot;Order Header Id&quot;, orderId);//VFTK Venkata 16/05/2012 Scripting15: No changes since orderId is required input
			SetSortSpec(&quot;Part Number(ASCENDING)&quot;);
			ExecuteQuery(ForwardOnly);
			var OrderItemBCExists = FirstRecord();
			while(OrderItemBCExists)
			{	   
				Id =GetFieldValue(&quot;Id&quot;);
				partNum = GetFieldValue(&quot;Part Number&quot;);
				BillingAccountId = GetFieldValue(&quot;Billing Account Id&quot;);
				actionCode = GetFieldValue(&quot;Action Code&quot;);
				
				if ((partNum == &quot;4010&quot; || partNum == &quot;7010&quot; ||partNum == &quot;8010&quot; ||partNum == &quot;9010&quot; ||partNum == &quot;10010&quot;) &amp;&amp; ((actionCode == actionNew)||(actionCode == modActionCd))) 
				{
					OrderItemXABC = OrderBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
					with(OrderItemXABC)
					{
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Name&quot;);
						ActivateField(&quot;Value&quot;);
						SetSearchSpec(&quot;Object Id&quot;, Id);
						SetSearchSpec(&quot;Name&quot;, &quot;Group #&quot;);							
						ExecuteQuery(ForwardOnly);//VFTK Venkata 16/05/2012 Scripting31: Not changed since child query based on condition
						var OrderItemXABCExists = FirstRecord();
						if (OrderItemXABCExists)
						{
							var SVBGroupNumber = GetFieldValue(&quot;Value&quot;);

						}
					}	
					array[i] = partNum;
					array2[i] = SVBGroupNumber;

					i++;
				}	   	
				OrderItemBCExists = NextRecord();
			}
		}  
	    var arraylength = i;
		var z=0;
		var y=0;
		while(z &lt; arraylength)
		{   
			var strActive 			= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
			var res 				  = array[y];				
				//Added for Optimization
				Assetbo = TheApplication().GetBusObject(&quot;Asset Management&quot;);
				AssetXAbc = Assetbo.GetBusComp(&quot;Asset Mgmt - Asset XA Light&quot;);			
				var ProdPartNum			= ToNumber(res)-10;
				var SVBGroupNumber 		= array2[y];
				var SearchXA = &quot;[Text Value] = &apos;&quot;+SVBGroupNumber+&quot;&apos; AND [Product Part Number] = &apos;&quot;+ProdPartNum+&quot;&apos;&quot;;
				with(AssetXAbc)
				{
					SetViewMode(AllView);
					ActivateField(&quot;Object Id&quot;);
					ActivateField(&quot;Owner Account Id&quot;); //it&apos;s not force active on the bs used
					ClearToQuery();
					SetSearchExpr(SearchXA);
					ExecuteQuery(ForwardOnly);
					var booRecordExists = FirstRecord (); 
					if (booRecordExists)
					{		
						var objectId = GetFieldValue(&quot;Object Id&quot;);
						var ownerAccountId = GetFieldValue(&quot;Owner Account Id&quot;);
						var activeSimNo = &quot;SVB Active SIM No&quot;;
						var maxSimNo	= &quot;SVB MAX SIM No&quot;; 
						var SearchXA2 = &quot;[Object Id] = &apos;&quot;+objectId+&quot;&apos; AND [Name] = &apos;&quot;+activeSimNo+&quot;&apos;&quot;;
						SetViewMode(AllView);
						ActivateField(&quot;Value&quot;);
						ClearToQuery();
						SetSearchExpr(SearchXA2);
						ExecuteQuery(ForwardOnly);
						var booXARecordExists = FirstRecord (); 
						if (booXARecordExists)
						{
							var ActiveSimNumber = GetFieldValue(&quot;Value&quot;);		
						}
						else
						{
							ArrResult[z] = &quot;SVB Active SIM No not found&quot;;
							z++;
							y++;
						}
						svbInputs.SetProperty(&quot;AccountId&quot;, ownerAccountId );
						svbInputs.SetProperty(&quot;SVBGroupNo&quot;,SVBGroupNumber);
						bsSVB.InvokeMethod(&quot;checkSVBorders&quot;, svbInputs , svbOutputs);
						activeOrders = svbOutputs.GetProperty(&quot;ActiveSVBOrders&quot;);
						var SearchXA3 = &quot;[Object Id] = &apos;&quot;+objectId+&quot;&apos; AND [Name] = &apos;&quot;+maxSimNo+&quot;&apos;&quot;;
						SetViewMode(AllView);
						ClearToQuery();
						ActivateField(&quot;Value&quot;);
						SetSearchExpr(SearchXA3);			
						ExecuteQuery(ForwardOnly);
						var booXARecordExists = FirstRecord (); 
						if (booXARecordExists)
						{
							var MaxSimNumber = AssetXAbc.GetFieldValue(&quot;Value&quot;);				
							var MSN = ToNumber(MaxSimNumber);
							var ASN = ToNumber(ActiveSimNumber);
							var AO  = ToNumber(activeOrders);
							var simPlusOrders = ASN + AO;
							if (MSN &lt;= simPlusOrders)
							{

								ArrResult[z] = &quot;KO&quot;;
								z++;
								y++;
							}
							if(MSN &gt; simPlusOrders)
							{

								ArrResult[z] = &quot;OK&quot;;
								z++;
								y++;	
							}
						}
						else
						{

							ArrResult[z] = &quot;SVB MAX SIM No not found&quot;;
							z++;
							y++;
						}
					}
				}	
		}
		arraylength = z;
		var res = &quot;OK&quot;;
		var j=0; 	
		while (j &lt; arraylength)
    	{
    		result = ArrResult[j];
    		if(result == &quot;KO&quot;)
    		{

    			res = &quot;KO&quot;;
    		}    		
    		j++;
    	}	
		Outputs.SetProperty(&quot;Res&quot;, res);
	}
	finally
	{

		OrderItemBC			= null;
		AssetXAbc			= null;
		OrderItemXABC		= null;
		bsSVB 			    = null;
		svbInputs 		    = null;
		svbOutputs 		    = null;
		inProp				= null;
		outProp				= null;
		BS					= null;		
		Assetbo				= null;
		OrderBO				= null;
	}
}"
			   SEQUENCE="25"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="08/27/2010 13:41:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkSVBDiscount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkSVBDiscount(Inputs, Outputs )
{
	try 
	{
		var accountBo			: BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var AssetMgmtAssHeadBc	: BusComp = accountBo.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var strActive 			= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var res 				= null;
		var BillingAccountId	= Inputs.GetProperty(&quot;BillingAccountId&quot;);
		var ProductNumber 		= 5005;
		res = &quot;OK&quot;;
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;BillingAccountId&quot;,BillingAccountId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		AssetMgmtAssHeadBc.SetViewMode(AllView);
		AssetMgmtAssHeadBc.ClearToQuery();
		AssetMgmtAssHeadBc.SetSearchSpec(&quot;Billing Account Id&quot;, BillingAccountId);
		AssetMgmtAssHeadBc.SetSearchSpec(&quot;Status&quot;, strActive );
		AssetMgmtAssHeadBc.SetSearchSpec(&quot;Product Part Number&quot;, ProductNumber );
		AssetMgmtAssHeadBc.ExecuteQuery(ForwardOnly);

		if(AssetMgmtAssHeadBc.FirstRecord())
			res = &quot;KO&quot;;
		Outputs.SetProperty(&quot;Res&quot;,res);
	}
	finally
	{
		inProp		= null;
		outProp		= null;
		BS			= null;
		AssetMgmtAssHeadBc	= null;
		accountBo			= null;
	}
}"
			   SEQUENCE="26"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="04/20/2011 13:04:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkSVBGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkSVBGroup(Inputs, Outputs )
{
	try 
	{

		var accountBo			: BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var AssetMgmtAssHeadBc	: BusComp = accountBo.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var strActive 			= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var res 				= null;
		var BillingAccountId	= Inputs.GetProperty(&quot;BillingAccountId&quot;);
		var ProductNumber 		= 4000;
		var Count				= 0;
		
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;BillingAccountId&quot;,BillingAccountId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with(AssetMgmtAssHeadBc)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchSpec(&quot;Billing Account Id&quot;, BillingAccountId);
			SetSearchSpec(&quot;Status&quot;, strActive );
			SetSearchSpec(&quot;Product Part Number&quot;, ProductNumber );
			Count = CountRecords();//CountRecords cannot be removed since its used in Message returneds

			if (Count == 1)
			{
				res = &quot;KO&quot;;
			}
			else
			{
				res = &quot;OK, &quot;+Count+&quot; SVB Voice Group&quot;;
			}
		}
		Outputs.SetProperty(&quot;Res&quot;,res);
	}
	catch (e)
	{
		//please do not remove otherwise if in case of error e LOOP can crash the server. 
		throw e;
	}
	finally
	{
		AssetMgmtAssHeadBc	= null;
		accountBo			= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="27"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="11/18/2010 20:06:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkSVBSimNumber"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkSVBSimNumber(Inputs, Outputs )
{
	try
	{
		var accountBo			: BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var AssetMgmtAssHeadBc	: BusComp = accountBo.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var AssetMgmtAssXA		: BusComp = accountBo.GetBusComp(&quot;TELCO Asset XA - Simple&quot;);
		var strActive 			= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);	
		var BillingAccountId	= Inputs.GetProperty(&quot;BillingAccountId&quot;);
		var ProdPartNum			= Inputs.GetProperty(&quot;partNum&quot;);
	
		AssetMgmtAssHeadBc.SetViewMode(AllView);
		AssetMgmtAssHeadBc.ClearToQuery();
	
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;ProdPartNum&quot;,ProdPartNum);
		inProp.SetProperty(&quot;BillingAccountId&quot;,BillingAccountId);	
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		AssetMgmtAssHeadBc.SetSearchSpec(&quot;Product Part Number&quot;, ProdPartNum);
		AssetMgmtAssHeadBc.SetSearchSpec(&quot;Billing Account Id&quot;, BillingAccountId);
		AssetMgmtAssHeadBc.SetSearchSpec(&quot;Status&quot;, strActive );
		
		AssetMgmtAssHeadBc.ExecuteQuery(ForwardOnly);

		var booRecordExists = AssetMgmtAssHeadBc.FirstRecord (); 
		if (booRecordExists)
		{		
			var objectId = AssetMgmtAssHeadBc.GetFieldValue(&quot;Id&quot;);
			var activeSimNo = &quot;SVB Active SIM No&quot;;
			var maxSimNo	= &quot;SVB MAX SIM No&quot;; 
			
			AssetMgmtAssXA.SetViewMode(AllView);
			AssetMgmtAssXA.ClearToQuery();
			AssetMgmtAssXA.ActivateField(&quot;Value&quot;);
			AssetMgmtAssXA.SetSearchSpec(&quot;Object Id&quot;, objectId);
			AssetMgmtAssXA.SetSearchSpec(&quot;Name&quot;, activeSimNo);			
			AssetMgmtAssXA.ExecuteQuery(ForwardOnly);
			
			var booXARecordExists = AssetMgmtAssXA.FirstRecord (); 
				if (booXARecordExists)
				{
					var ActiveSimNumber = AssetMgmtAssXA.GetFieldValue(&quot;Value&quot;);		
				}
			
			AssetMgmtAssXA.SetViewMode(AllView);
			AssetMgmtAssXA.ClearToQuery();
			AssetMgmtAssXA.ActivateField(&quot;Value&quot;);
			AssetMgmtAssXA.ActivateField(&quot;Name&quot;);
			AssetMgmtAssXA.SetSearchSpec(&quot;Object Id&quot;, objectId);
			AssetMgmtAssXA.SetSearchSpec(&quot;Name&quot;, maxSimNo);			
			AssetMgmtAssXA.ExecuteQuery(ForwardOnly);
			
			var booXARecordExists = AssetMgmtAssXA.FirstRecord (); 
			if (booXARecordExists)
			{
				var MaxSimNumber = AssetMgmtAssXA.GetFieldValue(&quot;Value&quot;);		
				var MSN = ToNumber(MaxSimNumber);
				var ASN = ToNumber(ActiveSimNumber);
				
				if (MSN &lt;= ASN)
				{
					Outputs.SetProperty(&quot;Res&quot;,&quot;KO&quot;);
				}
				if(MSN &gt; ASN)
				{
					Outputs.SetProperty(&quot;Res&quot;,&quot;OK&quot;);
				}
			}
		}
	}
	finally
	{
		AssetMgmtAssHeadBc	= null;
		AssetMgmtAssXA		= null;
		accountBo	= null;
		inProp		= null;
		outProp		= null;
		BS			= null;
	}
}"
			   SEQUENCE="29"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="08/27/2010 13:41:34"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkSVBorVPNdoc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkSVBorVPNdoc(Inputs, Outputs)
{
try
{
	// check doc attachment existing and doc type when SVB or VPN product exists.
	// CRER-R4 GR 13-06-2011
    var OrderBO  : BusObject = TheApplication().GetBusObject(&quot;Order Entry&quot;);
    var OrderBC   : BusComp  = OrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
   	var OrderItemBC  : BusComp   = OrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
    var OrderAttach : BusComp = OrderBO.GetBusComp(&quot;Order Entry Attachment&quot;);
    var Res = &quot;OK&quot;;
    var PartNum = &quot;&quot;;
    var docType = &quot;&quot;;
    var IsItem =  false;
    
    var orderId	   	= Inputs.GetProperty(&quot;orderId&quot;);
    var Message1		= TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD5003&quot;);
    var Message2		= TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD5004&quot;);
    
	OrderBC.SetViewMode(AllView);
	OrderBC.ClearToQuery();
	OrderBC.ActivateField(&quot;Order Header Id&quot;);
	//Begin - Scripting 15 - Input validation
	var inProp 	:PropertySet = TheApplication().NewPropertySet();
	var outProp	: PropertySet = TheApplication().NewPropertySet();
	var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
	inProp.SetProperty(&quot;orderId&quot;,orderId);
	BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
	//End - Scripting 15
	OrderBC.SetSearchSpec(&quot;Id&quot;, orderId);
	//Scripting31: Moved child query to parent-Start
	OrderItemBC.SetViewMode(AllView);
	OrderItemBC.ClearToQuery();
	OrderItemBC.ActivateField(&quot;Order Header Id&quot;);
	OrderItemBC.SetSearchSpec(&quot;Part Number&quot;, &quot;[Part Number] = &apos;10010&apos; OR [Part Number] = &apos;4010&apos; OR [Part Number] = &apos;7010&apos; OR [Part Number] = &apos;9010&apos; OR [Part Number] = &apos;8010&apos; OR [Part Number] = &apos;3001&apos;&quot;);
	OrderItemBC.SetSearchSpec(&quot;Action Code&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;));
	//Scripting31: Moved child query to parent-End
	OrderBC.ExecuteQuery(ForwardOnly);
	
	if (OrderBC.FirstRecord())
	{
		if (IsItem)
		{
			OrderAttach.SetViewMode(AllView);
			OrderAttach.ClearToQuery();
			OrderAttach.ExecuteQuery(ForwardOnly);
			if (!OrderAttach.FirstRecord())
			{
				Res = &quot;KO&quot;;	
				Outputs.SetProperty(&quot;Message&quot;,Message1);	
			}
			else
			{
				while(IsItem)
				{
					PartNum = OrderItemBC.GetFieldValue(&quot;Part Number&quot;);
					if(PartNum == &quot;3001&quot;)
					{
						OrderAttach.SetViewMode(AllView);
						OrderAttach.ClearToQuery();
						OrderAttach.SetSearchSpec(&quot;VF Doc Type&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DOC_TYPE&quot;,&quot;VPN&quot;));
						OrderAttach.ExecuteQuery(ForwardOnly);
						if (!OrderAttach.FirstRecord())
						{
							Res = &quot;KO&quot;;	
						}
					}
					else
					{
						OrderAttach.SetViewMode(AllView);
						OrderAttach.ClearToQuery();
						OrderAttach.SetSearchSpec(&quot;VF Doc Type&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_DOC_TYPE&quot;,&quot;SVB&quot;));
						OrderAttach.ExecuteQuery(ForwardOnly);
						if (!OrderAttach.FirstRecord())
						{
							Res = &quot;KO&quot;;	
						}
					}
					IsItem = OrderItemBC.NextRecord();
				}
				Outputs.SetProperty(&quot;Message&quot;,Message2);
			}
		}
	}
	Outputs.SetProperty(&quot;Res&quot;,Res);	
}
finally
{
	OrderAttach	= null;
	OrderItemBC	= null;
	OrderBC		= null;
	OrderBO		= null;
	inProp		= null;
	outProp		= null;
	BS			= null;
}
}"
			   SEQUENCE="28"
			   UPDATED="10/26/2015 16:31:37"
			   UPDATED_BY="SADMIN"
			   CREATED="07/07/2011 20:21:41"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkVPNGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkVPNGroup(Inputs, Outputs )
{
	 try
	 {
		 var strOwnerAccntId 	= Inputs.GetProperty(&quot;Owner Account Id&quot;);
		 var strMsisdnDeact		= Inputs.GetProperty(&quot;VF MSISDN&quot;);
		 var lookupStatusActive = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		 var strVPNGroupPartNum = &quot;3000&quot;;
	     var strAttr = &quot;Main Number&quot;;
			 //Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var BOAccount 			: BusObject;
		var BCAssetMgntAsset 	: BusComp;
		var BCAssetMgntAssetXA  : BusComp;
			 
		 if(strMsisdnDeact.length &gt;0)
		 { 
			 BOAccount 			= TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
			 BCAssetMgntAsset 	= BOAccount.GetBusComp(&quot;TELCO Asset - Simple&quot;);
			 BCAssetMgntAssetXA	= BOAccount.GetBusComp(&quot;TELCO Asset XA - Simple&quot;);
			 
			 BCAssetMgntAsset.SetViewMode(AllView);
			 BCAssetMgntAsset.ClearToQuery();
	
			inProp.SetProperty(&quot;strOwnerAccntId&quot;,strOwnerAccntId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15 
			
			 BCAssetMgntAsset.SetSearchSpec(&quot;Product Part Number&quot;, strVPNGroupPartNum);
			 BCAssetMgntAsset.SetSearchSpec(&quot;Owner Account Id&quot;, strOwnerAccntId);
			 BCAssetMgntAsset.SetSearchSpec(&quot;Status&quot;, lookupStatusActive);
			 //Scripting31: Moved child query to parent-Start
			 BCAssetMgntAssetXA.SetViewMode(AllView);
			 BCAssetMgntAssetXA.ClearToQuery();
			 BCAssetMgntAssetXA.ActivateField(&quot;Object Id&quot;);
			 BCAssetMgntAssetXA.ActivateField(&quot;Name&quot;);
			 BCAssetMgntAssetXA.ActivateField(&quot;Text Value&quot;);
			 BCAssetMgntAssetXA.SetSearchSpec(&quot;Name&quot;,strAttr);
			 //Scripting31: Moved child query to parent-End
			 BCAssetMgntAsset.ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review
			 	 		
			 var BOOVpnExists = BCAssetMgntAsset.FirstRecord();
			 var VPNMainNumb = &quot;&quot;;
			 if(BOOVpnExists)
			 {
		 	    var BOOExists = BCAssetMgntAssetXA.FirstRecord();
	 	    	if(BOOExists)
	    		{
	    			VPNMainNumb = BCAssetMgntAssetXA.GetFieldValue(&quot;Text Value&quot;);	 
	    		}	    
		 	}
		 		
	 		if(strMsisdnDeact == VPNMainNumb)
 			{
	 			Outputs.SetProperty(&quot;Result&quot;, true);
 			} 		
 			else
 			{
 				Outputs.SetProperty(&quot;Result&quot;, false);
 			}
		}
	}
	finally
	{
		inProp		= null;
		outProp		= null;
		BS			= null;
		BCAssetMgntAsset = null;
		BCAssetMgntAssetXA = null;
		BOAccount 	= null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="02/05/2016 08:43:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/17/2010 13:24:57"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="isFutureDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function isFutureDate(Inputs,Outputs)
{
	try
	{
		var date1 = Inputs.GetProperty(&quot;date1&quot;);
		var date2 = Inputs.GetProperty(&quot;date2&quot;);
		var result = 0;
		var diff = 0;
		var equalDates = &quot;N&quot;;
		
		var date1msec = 0;
		var date2msec = 0;
		
		var date1Date = new Date(date1);
		var date2Date = new Date(date2);
	
		date1msec = date1Date.getTime();
		date2msec = date2Date.getTime();
		
		diff = date1msec - date2msec;
		
		if(diff &gt;= 0)
			result = 0;
		else
			result = 1;
		
		if(diff == 0)
			equalDates = &quot;Y&quot;;
		
		Outputs.SetProperty(&quot;result&quot;,result);
		Outputs.SetProperty(&quot;diff&quot;,diff);
		Outputs.SetProperty(&quot;equalDates&quot;,equalDates);
	
	}
	finally
	{
		date1 = null;
		date2 = null;
		date1msec = null;
		date2msec = null;
		result = null;
		diff = null;
	}
}"
			   SEQUENCE="64"
			   UPDATED="01/17/2018 16:30:58"
			   UPDATED_BY="IBM_TFERREIRA"
			   CREATED="11/10/2010 11:32:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



