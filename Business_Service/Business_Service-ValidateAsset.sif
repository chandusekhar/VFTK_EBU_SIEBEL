<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="05/20/2015 12:00:07"
   UPDATED_BY="SADMIN"
   CREATED="05/19/2015 19:58:21"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="N"
	   COMMENTS="New Project for Asset Management"
	   INACTIVE="N"
	   LANGUAGE_LOCKED="TRK"
	   LOCKED="Y"
	   LOCKED_DATE="08/18/2016 15:58:43"
	   NAME="Asset Management"
	   UI_FREEZE="N"
	   LOCKED_BY_NAME="VF_KOZTURK"
	   UPDATED="08/19/2016 08:45:11"
	   UPDATED_BY="VF_KOZTURK"
	   CREATED="08/17/1998 18:50:31"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="Migration Batch Validation"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="ValidateAsset"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="08/19/2016 08:32:10"
		   UPDATED_BY="VF_KOZTURK"
		   CREATED="05/09/2016 12:20:20"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="ValidateAsset"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   REDO="Y"
			   TRANSLATE="Y"
			   UPDATED="05/09/2016 12:20:20"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:20"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateParallelFromFile"
			   UPDATED="05/09/2016 12:20:20"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:20"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateParallelFromFile"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:20"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:20"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GETHOST"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GETHOST"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetEligReason"
			   UPDATED="06/27/2016 03:04:58"
			   UPDATED_BY="SADMIN"
			   CREATED="06/27/2016 03:04:58"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetEligReason"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="06/27/2016 03:04:58"
				   UPDATED_BY="SADMIN"
				   CREATED="06/27/2016 03:04:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetExplanationMsg"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetExplanationMsg"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="HandSetValidation"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="HandSetValidation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ManageValidation"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ManageValidation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ManageValidation2_1"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ManageValidation2_1"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="StartValidation"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="StartValidation"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ValidateAsset"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ValidateAsset"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/09/2016 12:20:21"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:20:21"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Call"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Call(In,Out)
{
	/*var bo = TheApplication().GetBusObject(&quot;VF Mob Sign Application BC&quot;);
	var bc = bo.GetBusComp(&quot;VF Mob Sign Application BC&quot;);
	
	var pIn = TheApplication().NewPropertySet();
	var pOut = TheApplication().NewPropertySet();
	with (bc) {
	SetViewMode(AllView);
	ClearToQuery();
	ActivateField(&quot;VF MSISDN Id&quot;); //RCRISPIM: Retrofits 2015 February Minor
	SetSearchExpr(&quot;[VF MSISDN Id]=&apos;DOS1&apos;&quot;);
	ExecuteQuery(ForwardOnly);
	if (FirstRecord()) {
		pIn.SetProperty(&quot;DocName&quot;,GetFieldValue(&quot;VF MSISDN Id&quot;));
	 	ManageValidation2_1(pIn, pOut); 
	}
    }*/

}"
			   SEQUENCE="1"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateParallelFromFile"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateParallelFromFile(Input, Output) {
 try {
 
	   var Entsvc = TheApplication().GetService(&quot;Asynchronous Server Requests&quot;);
	   var inputPropSet = TheApplication().NewPropertySet();
	   var outputPropSet = TheApplication().NewPropertySet();
	   var child = TheApplication().NewPropertySet();
	   var count = Input.GetProperty(&quot;Count&quot;);
   
		for(var i=1; i&lt;=count; i++)
		{
			inputPropSet.SetProperty(&quot;Component&quot;, &quot;WfProcMgr&quot;);
			inputPropSet.SetProperty(&quot;Method&quot;, &quot;RunBatch&quot;);
			child.SetProperty(&quot;ProcessName&quot;, &quot;VF Start Validation Process WF&quot;);
			child.SetProperty(&quot;SearchSpec&quot;, &quot;[VF MSISDN Id]=&apos;DOS&quot;+i+ &quot;&apos;&quot;);
			inputPropSet.AddChild(child);
			Entsvc.InvokeMethod(&quot;SubmitRequest&quot;, inputPropSet, outputPropSet);
			inputPropSet.Reset();
		}	   
	   
 } catch (e) {
  Output.SetProperty(&quot;Error&quot;, e.toString());
 }

}"
			   SEQUENCE="2"
			   UPDATED="05/09/2016 12:20:21"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetEligReason"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetEligReason(Inputs,Outputs)
{
	try{
		
		var err;		
		
		var psIn = TheApplication().NewPropertySet();
		var psOut = TheApplication().NewPropertySet();
		var temp = TheApplication().NewPropertySet();
		var tmName = &quot;&quot;;
		var sErrorMessages =&quot;&quot;;
		temp = Inputs.Copy();

		var temCount = temp.GetChildCount();

			for (var i = 0; i &lt; temp.GetChildCount(); i++)
			{
				tmName = temp.GetType();
				tmName = temp.GetChild(i).GetType();
				temCount = temp.GetChild(i).GetChildCount();
				
				if(temp.GetChild(i).GetType() == &quot;Line Item&quot; &amp;&amp; temp.GetChild(i).GetProperty(&quot;Eligibility Status&quot;) == &quot;N&quot;)
				{
					sErrorMessages = TheApplication().GetProfileAttr(&quot;BV_ELIG_REASON&quot;);
					if (sErrorMessages != &quot;&quot;)				
						sErrorMessages = sErrorMessages + &quot;\n\rThe product &quot; + temp.GetChild(i).GetProperty(&quot;Name&quot;) + 
							&quot; has the following messages:&quot;;
					else
						sErrorMessages = &quot;The product &quot; + temp.GetChild(i).GetProperty(&quot;Name&quot;) + &quot; has the following messages:&quot;;
						
					sErrorMessages = sErrorMessages+ &quot; - &quot; + temp.GetChild(i).GetProperty(&quot;Eligibility Reason&quot;);
				
					TheApplication().SetProfileAttr(&quot;BV_ELIG_REASON&quot;,sErrorMessages);
					
				}
				if(temp.GetChild(i).GetChildCount()&gt;0)
				{
					psIn=temp.GetChild(i);
					GetEligReason(psIn,psOut);
				}				
			}
	
		
	}
	catch(e)
	{
	err = e.toString();	
	}
	finally
	{
	}
}"
			   SEQUENCE="3"
			   UPDATED="06/27/2016 03:04:58"
			   UPDATED_BY="SADMIN"
			   CREATED="06/27/2016 03:04:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetExplanationMsg"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetExplanationMsg(Inputs, Outputs) {
	try {

		var strNestedCall = Inputs.GetProperty(&quot;NestedCall&quot;);
		var temp = &quot;&quot;;
		var psIn = TheApplication().NewPropertySet();
		var psOut = TheApplication().NewPropertySet();
		Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;&quot;);

		temp = Inputs.Copy();

		if (temp.GetType() == &quot;Line Item&quot;) {
			if (temp.GetProperty(&quot;Expl1&quot;) != &quot;&quot;) {
				Outputs.SetProperty(&quot;ErrorMsg&quot;, temp.GetProperty(&quot;Expl1&quot;));
				//Outputs.SetProperty(&quot;ActionCode&quot;,temp.GetProperty(&quot;Action Code&quot;));
				//Outputs.SetProperty(&quot;ProdName&quot;,temp.GetProperty(&quot;Name&quot;));
				return;
			} else if (temp.GetProperty(&quot;Expl0&quot;) != &quot;&quot;) {
				Outputs.SetProperty(&quot;ErrorMsg&quot;, temp.GetProperty(&quot;Expl0&quot;));
				//Outputs.SetProperty(&quot;ActionCode&quot;,temp.GetProperty(&quot;Action Code&quot;));
				//Outputs.SetProperty(&quot;ProdName&quot;,temp.GetProperty(&quot;Name&quot;));
				return;
			}

			for (var i = 0; i &lt; temp.GetChildCount(); i++) {
				if (temp.GetChild(i).GetType() == &quot;Line Item&quot;) {

					psIn = temp.GetChild(i);
					psIn.SetProperty(&quot;NestedCall&quot;, &quot;Y&quot;);
					GetExplanationMsg(psIn, psOut);
					Outputs.SetProperty(&quot;ErrorMsg&quot;, psOut.GetProperty(&quot;ErrorMsg&quot;));
					//Outputs.SetProperty(&quot;ActionCode&quot;,psOut.GetProperty(&quot;ActionCode&quot;));
					//Outputs.SetProperty(&quot;ProdName&quot;,psOut.GetProperty(&quot;ProdName&quot;));
					if (psOut.GetProperty(&quot;ErrorMsg&quot;) != &quot;&quot;)
						break;
				}
			}

		}
	}
	finally {
		temp = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="06/27/2016 03:04:59"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="HandSetValidation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function HandSetValidation(Input,Output)
{
 try
 {
  var BO = TheApplication().GetBusObject(&quot;VF Groups BO - Copy&quot;);
  var BC= BO.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
  var BO1 = TheApplication().GetBusObject(&quot;VF Groups BO - Copy&quot;);
  var BC1= BO1.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
  
  var bIsReq = false;
  var bIsReq1 = false;
  var strPromIntegId = &quot;&quot;;
  var pIn = TheApplication().NewPropertySet();
  var pOut = TheApplication().NewPropertySet();
  
  with(BC)
  {
   ClearToQuery();
   SetViewMode(AllView);
   ActivateField(&quot;Prod Prom Instance Id&quot;);
   SetSearchExpr(&quot;[Prod Prom Id] is not null and [Parent Asset Id] is null and [Status]&lt;&gt;&apos;Inactive&apos; AND [Product Part Number] = &apos;1000&apos;&quot;);
   ExecuteQuery(ForwardOnly);
   bIsReq = FirstRecord();
   while(bIsReq)
   {
    strPromIntegId= GetFieldValue(&quot;Prod Prom Instance Id&quot;);
    with(BC1)
    {
     ClearToQuery();
     SetViewMode(AllView);
     ActivateField(&quot;Prod Prom Instance Id&quot;);
     SetSearchExpr(&quot;[Prod Prom Instance Id] =&apos;&quot;+strPromIntegId+&quot;&apos; and [Parent Asset Id] is null and [Status]&lt;&gt;&apos;Inactive&apos; AND [Product Part Number] &lt;&gt; &apos;1000&apos;&quot;);
     ExecuteQuery(ForwardOnly);
     bIsReq1 = FirstRecord();
     while(bIsReq1)
     {
      pIn.SetProperty(&quot;ObjectId&quot;,GetFieldValue(&quot;Id&quot;));
      pIn.SetProperty(&quot;RootItemId&quot;,GetFieldValue(&quot;Id&quot;));
      StartValidation(pIn,pOut);
      bIsReq1 = NextRecord();
     }
     
    }
    bIsReq = NextRecord();
   }
   
  }
 }
 catch(e)
 {  
 }
 finally
 {
 }
}"
			   SEQUENCE="5"
			   UPDATED="06/27/2016 03:04:59"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageValidation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageValidation(Input, Output) {
 try {

  try {

   var FirstNum = ToNumber(Input.GetProperty(&quot;FirstNum&quot;));
   var LastNum = ToNumber(Input.GetProperty(&quot;LastNum&quot;));
   var strSearchSpec = Input.GetProperty(&quot;SearchSpec&quot;);
   var Entsvc = TheApplication().GetService(&quot;Asynchronous Server Requests&quot;);
   var num = &quot;&quot;;
   var inputPropSet = TheApplication().NewPropertySet();
   var outputPropSet = TheApplication().NewPropertySet();
   var child = TheApplication().NewPropertySet();

   if (strSearchSpec != &quot;&quot;) {
    inputPropSet.SetProperty(&quot;Component&quot;, &quot;WfProcMgr&quot;);
    inputPropSet.SetProperty(&quot;Method&quot;, &quot;RunBatch&quot;);
    child.SetProperty(&quot;ProcessName&quot;, &quot;VF Start Validatation Process&quot;);
    child.SetProperty(&quot;SearchSpec&quot;, strSearchSpec);
    inputPropSet.AddChild(child);
    Entsvc.InvokeMethod(&quot;SubmitRequest&quot;, inputPropSet, outputPropSet);
   }
   for (FirstNum; FirstNum &lt;= LastNum; FirstNum++) {
    if (LastNum &gt; 9 &amp;&amp; FirstNum &lt;= 9) {
     num = &quot;0&quot; + FirstNum;
    } else {
     num = FirstNum;
    }

    inputPropSet.Reset();
    inputPropSet.SetProperty(&quot;Component&quot;, &quot;WfProcMgr&quot;);
    inputPropSet.SetProperty(&quot;Method&quot;, &quot;RunBatch&quot;);

    child.SetProperty(&quot;ProcessName&quot;, &quot;VF Start Validatation Process&quot;);
    child.SetProperty(&quot;SearchSpec&quot;, &quot;[Prod Prom Id] is not null and [Status]&lt;&gt;&apos;Inactive&apos; and [Product Id] =&apos;2-RT26K&apos; and [MSISDN] LIKE &apos;*&quot; + num + &quot;&apos;&quot;);

    inputPropSet.AddChild(child);

    Entsvc.InvokeMethod(&quot;SubmitRequest&quot;, inputPropSet, outputPropSet);
   }

  } catch (e) {
   Output.SetProperty(&quot;Error&quot;, e.toString());
  }

 } catch (e) {
  Output.SetProperty(&quot;Error&quot;, e.toString());
 }

}"
			   SEQUENCE="6"
			   UPDATED="06/27/2016 03:04:59"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageValidation2_1"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageValidation2_1(Input, Output) {
	try {
		try {
			var fileName = Input.GetProperty(&quot;DocName&quot;);
			var Path = Input.GetProperty(&quot;Path&quot;);
			var Type = Input.GetProperty(&quot;Type&quot;);
			var Entsvc = TheApplication().GetService(&quot;Asynchronous Server Requests&quot;);
			var num = &quot;&quot;;

			fileName = fileName + &quot;.txt&quot;;
			var bIsReq = false;
			
			var strCurrLnReadyFile = &quot;&quot;;
			var arrSplitLine = new Array;
			var row_id = &quot;&quot;;
			var pIn = TheApplication().NewPropertySet();
			var pOut = TheApplication().NewPropertySet();

			var assetBO = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
			var assetBC = assetBO.GetBusComp(&quot;TELCO Asset - Simple&quot;);
			var fpReadReadyFile = Clib.fopen(Path + fileName, &quot;rt&quot;);
			strCurrLnReadyFile = Clib.fgets(fpReadReadyFile);

			while (strCurrLnReadyFile != &quot;&quot; &amp;&amp; strCurrLnReadyFile != null) {
			
				arrSplitLine = strCurrLnReadyFile.split(&quot;\n&quot;);
				num = arrSplitLine[0];

				with (assetBC) {
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Asset Id&quot;);
					ActivateField(&quot;MSISDN&quot;);
					if(Type == &quot;MSISDN&quot;)
					{
						SetSearchExpr(&quot;[MSISDN] = &apos;&quot; + num + &quot;&apos; AND [Status] &lt;&gt; &apos;Inactive&apos;&quot;);
					}
					else
					{
						SetSearchExpr(&quot;[Asset Id] = &apos;&quot; + num + &quot;&apos; AND [Status] &lt;&gt; &apos;Inactive&apos;&quot;);
					}
					ExecuteQuery(ForwardOnly);
					bIsReq = FirstRecord();

					if (bIsReq) {
						row_id = GetFieldValue(&quot;Asset Id&quot;);
						pIn.SetProperty(&quot;ObjectId&quot;, row_id);
						pIn.SetProperty(&quot;RootItemId&quot;, row_id);
						pIn.SetProperty(&quot;MSISDN&quot;, num);	
						StartValidation(pIn, pOut);
					}
				}			
				strCurrLnReadyFile = Clib.fgets(fpReadReadyFile);
			}
			Clib.fclose(fpReadReadyFile);

		} catch (e) {
			Output.SetProperty(&quot;Error&quot;, e.toString());
		}

	} catch (e) {
		Output.SetProperty(&quot;Error&quot;, e.toString());		
	}
finally
{
	try
	{
		Clib.fclose(fpReadReadyFile);
	}
	catch(e)
	}
}"
			   SEQUENCE="7"
			   UPDATED="06/27/2016 03:04:59"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod(MethodName, Inputs, Outputs) {
	switch (MethodName) {
	case &quot;ValidateAsset&quot;:
		ValidateAsset(Inputs, Outputs);
		return (CancelOperation);
		break;
	case &quot;ManageValidation&quot;:
		ManageValidation(Inputs, Outputs);
		return (CancelOperation);
		break;
	case &quot;StartValidation&quot;:
		StartValidation(Inputs, Outputs);
		return (CancelOperation);
		break;
	case &quot;GETHOST&quot;:
		Call(Inputs, Outputs);
		return (CancelOperation);
		break;
	case &quot;HandSetValidation&quot;:
		HandSetValidation(Inputs, Outputs);
		return (CancelOperation);
		break;
	case &quot;CreateParallelFromFile&quot;:
		CreateParallelFromFile(Inputs, Outputs);
		return (CancelOperation);
		break;
	case &quot;ManageValidation2_1&quot;:
		ManageValidation2_1(Inputs, Outputs);
		return (CancelOperation);
		break;
		
	case &quot;GetEligReason&quot;:
		GetEligReason(Inputs, Outputs);
		return (CancelOperation);
		break;

		

	}
	return (ContinueOperation);
}"
			   SEQUENCE="10"
			   UPDATED="06/27/2016 03:04:59"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="StartValidation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function StartValidation(Input, Output) {
	try {

		var strObjectId = Input.GetProperty(&quot;ObjectId&quot;);
		var strRootItemId = Input.GetProperty(&quot;RootItemId&quot;);
		var strMSISDN = Input.GetProperty(&quot;MSISDN&quot;);
		var strErrorMsg = &quot;&quot;;

		var pIn = TheApplication().NewPropertySet();
		var pOut = TheApplication().NewPropertySet();

		var bo = TheApplication().GetBusObject(&quot;eAuto WMS Warranty Policy&quot;);
		var bc = bo.GetBusComp(&quot;FS Asset Warranty&quot;);

		if (strObjectId != &quot;&quot; &amp;&amp; strRootItemId != &quot;&quot;) {

			with (bc) {
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Asset Id&quot;); //RCRISPIM: Retrofits 2015 February Minor
				SetSearchExpr(&quot;[Asset Id]=&apos;&quot; + strRootItemId + &quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord()) {
					return;
				}

			}

			pIn.SetProperty(&quot;ObjectId&quot;, strObjectId);
			pIn.SetProperty(&quot;RootItemId&quot;, strRootItemId);
			pIn.SetProperty(&quot;Mode&quot;, &quot;Asset&quot;);
			pIn.SetProperty(&quot;Session&quot;, &quot;Y&quot;);

			ValidateAsset(pIn, pOut);

			strErrorMsg = pOut.GetProperty(&quot;ErrorMsg&quot;);
			var strProdName = pOut.GetProperty(&quot;ProdName&quot;);

			//if (strErrorMsg != &quot;&quot;) {
			//strErrorMsg = strErrorMsg.substring(0,450);
			with (bc) {
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;External Reference Number&quot;);
				ActivateField(&quot;Asset Id&quot;);
				ActivateField(&quot;Asset Measurement Id&quot;);
				ActivateField(&quot;Warranty Id&quot;);
				ActivateField(&quot;Revision Remarks&quot;);
				ActivateField(&quot;Asset Age UOM&quot;);

				NewRecord(NewAfter);
				SetFieldValue(&quot;External Reference Number&quot;, strErrorMsg.substring(0, 450));
				SetFieldValue(&quot;Asset Id&quot;, strRootItemId);
				SetFieldValue(&quot;Asset Measurement Id&quot;, strMSISDN);
				SetFieldValue(&quot;Warranty Id&quot;, GetFieldValue(&quot;Id&quot;));
				SetFieldValue(&quot;Asset Age UOM&quot;, strProdName.substring(0, 30));
				var maxlen = strErrorMsg.length;
				var maxlen2 = ToNumber(maxlen) - ToNumber(450);
				var err1 = strErrorMsg.substring(0, 450);
				var err2 = strErrorMsg.substring(450);
				if (maxlen &gt; 450 &amp;&amp; (maxlen2) &gt; 250)
					SetFieldValue(&quot;Revision Remarks&quot;, err2.substring(0, 250));
				else if (maxlen &gt; 450)
					SetFieldValue(&quot;Revision Remarks&quot;, err2);
				WriteRecord();
			}
			//}
		}
	} catch (e) {
		strErrorMsg = e.toString();
	}
	finally {
		pIn = null;
		pOut = null;

		bo = null;
		bc = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="06/27/2016 03:04:59"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateAsset(Inputs, Outputs) {
	try {
		var srvQuery;
		var assetId = Inputs.GetProperty(&quot;RootItemId&quot;); // Line Item Id
		var srvBV;
		var srvCT;

		var pSet1 = TheApplication().NewPropertySet();
		var pSet2 = TheApplication().NewPropertySet();
		var pSet3 = TheApplication().NewPropertySet();
		var pSet4 = TheApplication().NewPropertySet();
		var pSet5 = TheApplication().NewPropertySet();
		var strErrorMsg = &quot;&quot;;
		var strBatchVal = &quot;&quot;;
		var strExpl0 = &quot;&quot;;
		var strExpl1 = &quot;&quot;;
		var strExpl2 = &quot;&quot;;
		var strExpl3 = &quot;&quot;;
		var strExpl4 = &quot;&quot;;
		var strExpl5 = &quot;&quot;;

		//TheApplication().SetProfileAttr(&quot;BV_MAN_GET_ELIG_MSG&quot;, &quot;Y&quot;);
		//TheApplication().SetProfileAttr(&quot;WA_SR_3-12504825041_BV_FLAG&quot;, &quot;Y&quot;);

		srvQuery = TheApplication().GetService(&quot;EAI Siebel Adapter&quot;);
		pSet1.SetProperty(&quot;OutputIntObjectName&quot;, &quot;VF SIS OM Asset&quot;);
		pSet1.SetProperty(&quot;SearchSpec&quot;, &quot;[Header.Id] =  &apos;&quot; + assetId + &quot;&apos; AND [Line Item.Status] &lt;&gt; &apos;Inactive&apos;&quot;);
		srvQuery.InvokeMethod(&quot;Query&quot;, pSet1, pSet5);
	
		srvCT = TheApplication().GetService(&quot;VF ChangePPType&quot;);
		srvCT.InvokeMethod(&quot;ChangePPType&quot;, pSet5, pSet3);

		srvBV = TheApplication().GetService(&quot;Remote Complex Object Instance Service&quot;);

		pSet2.AddChild(pSet3);
		pSet2.SetProperty(&quot;RootId&quot;, assetId);
		//pSet2.SetProperty(&quot;ProductId&quot; , &quot;2-RT26K&quot;) ;
		pSet2.SetProperty(&quot;ObjId&quot;, assetId);
		pSet2.SetProperty(&quot;SkipCfgEligibilityCheck&quot;, &quot;N&quot;);
		//pSet2.SetProperty(&quot;DisablePricing&quot;, &quot;Y&quot;);
		pSet2.SetProperty(&quot;DetailedExpl&quot;, &quot;N&quot;);
		pSet2.SetProperty(&quot;IntObjName&quot;, &quot;SIS OM Asset&quot;);
		pSet2.SetProperty(&quot;Mode&quot;, &quot;Asset&quot;);
		pSet2.SetProperty(&quot;SetInstance&quot;, &quot;Y&quot;);
		srvBV.InvokeMethod(&quot;BatchValidate&quot;, pSet2, pSet4);
		strErrorMsg = pSet4.GetProperty(&quot;Error Message&quot;);
		strBatchVal = pSet4.GetProperty(&quot;Batch Validation Status&quot;);
		var ProdName = pSet4.GetChild(0).GetChild(1).GetChild(0).GetChild(0).GetChild(0).GetProperty(&quot;Name&quot;);
		Outputs.SetProperty(&quot;ProdName&quot;, ProdName);
		/*
		var inp1 = TheApplication().NewPropertySet();
		var out1 = TheApplication().NewPropertySet();

		inp1.SetProperty(&quot;ProcessName&quot;, &quot;VF ParseEligReason&quot;);
		TheApplication().GetService(&quot;Workflow Process Manager&quot;).InvokeMethod(&quot;RunProcess&quot;, inp1, out1);

		var bsEAI_XML_WriteToFile = TheApplication().GetService(&quot;EAI XML Write to File&quot;);
		var file = Inputs.GetProperty(&quot;File&quot;); // Line Item Id

		pSet4.SetProperty(&quot;FileName&quot;,file);
		bsEAI_XML_WriteToFile.InvokeMethod(&quot;WritePropSet&quot;, pSet4,Outputs);
		 */
		if (strErrorMsg == &quot;Y&quot;) {

			strErrorMsg = &quot;&quot;;
			for (var i = 0; i &lt; pSet4.GetChild(0).GetChild(0).GetChildCount(); i++) {

				try {
					if (pSet4.GetChild(0).GetChild(0).GetChild(i).GetType() == &quot;Eligibility Message&quot;) {
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl0&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl0&quot;);
						}
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl1&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl1&quot;);
						}
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl2&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl2&quot;);
						}
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl3&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl3&quot;);
						}

						for (var j = 0; j &lt; pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChildCount() &gt; 0; j++) {
							if ((ToNumber(j) + 1 % 2) == 1) {
								strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetChild(j).GetProperty(&quot;Eligibility Reason&quot;);
							}
						}
					}
				} catch (e) {}
				try {
					if (pSet4.GetChild(0).GetChild(0).GetChild(i).GetType() == &quot;Customize Message&quot;) {

						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl0&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl0&quot;);
						}
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl1&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl1&quot;);
						}
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl2&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl2&quot;);
						}
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).PropertyExists(&apos;Expl3&apos;)) {
							strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetProperty(&quot;Expl3&quot;);
						}
						if (pSet4.GetChild(0).GetChild(0).GetChild(i).GetChildCount() &gt; 0) {

							if (pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).PropertyExists(&apos;Expl0&apos;)) {
								strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetProperty(&quot;Expl0&quot;);
							}
							if (pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).PropertyExists(&apos;Expl1&apos;)) {
								strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetProperty(&quot;Expl1&quot;);
							}
							if (pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).PropertyExists(&apos;Expl2&apos;)) {
								strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetProperty(&quot;Expl2&quot;);
							}
							if (pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).PropertyExists(&apos;Expl3&apos;)) {
								strErrorMsg = strErrorMsg + &quot; &quot; + pSet4.GetChild(0).GetChild(0).GetChild(i).GetChild(0).GetProperty(&quot;Expl3&quot;);
							}
						}
					}
				} catch (e) {}
			}

			var rExp = new RegExp(&quot;&lt;p&gt;&lt;/p&gt;&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;&lt;p&gt;&lt;/p&gt;&quot;, &quot;&quot;);
			}
			rExp = new RegExp(&quot;There is a conflict with your last request.&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;There is a conflict with your last request.&quot;, &quot;&quot;);
			}
			rExp = new RegExp(&quot;Please click the Undo button to undo your last request.&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;Please click the Undo button to undo your last request.&quot;, &quot;&quot;);
			}
			rExp = new RegExp(&quot;Checking post-pick eligibility failed:&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;Checking post-pick eligibility failed:&quot;, &quot;&quot;);
			}
			rExp = new RegExp(&quot;For a detailed explanation of this conflict, please click the Explanation button.&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;For a detailed explanation of this conflict, please click the Explanation button.&quot;, &quot;&quot;);
			}

			rExp = new RegExp(&quot;The item that you are trying to customize contains invalid sub-items or attributes or does not comply with the corresponding customizable product definition.  Do you wish to proceed and have the invalid selections removed or fixed?&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;The item that you are trying to customize contains invalid sub-items or attributes or does not comply with the corresponding customizable product definition.  Do you wish to proceed and have the invalid selections removed or fixed?&quot;, &quot;&quot;);
			}

			var rExp = new RegExp(&quot;&lt;b&gt;&lt;/b&gt;&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;&lt;b&gt;&lt;/b&gt;&quot;, &quot;&quot;);
			}
			var rExp = new RegExp(&quot;&lt;br&gt;&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;&lt;br&gt;&quot;, &quot;&quot;);
			}
			var rExp = new RegExp(&quot;(SBL-CFG-00163)&quot;);
			while (rExp.test(strErrorMsg)) {
				strErrorMsg = strErrorMsg.replace(&quot;(SBL-CFG-00163)&quot;, &quot;&quot;);
			}
			Outputs.SetProperty(&quot;ErrorMsg&quot;, strErrorMsg);
		} else if (strBatchVal != &quot;Valid&quot;) {
			var strBatchValMsg = pSet4.GetChild(0).GetChild(5).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
			pSet4.Reset();
			GetExplanationMsg(strBatchValMsg, pSet4);
			Outputs.SetProperty(&quot;ErrorMsg&quot;, TheApplication().GetProfileAttr(&quot;BV_ELIG_REASON&quot;) + &quot; &quot; + pSet4.GetProperty(&quot;ErrorMsg&quot;));
		}
	} catch (e) {
		Outputs.SetProperty(&quot;ErrorMsg&quot;, e.toString());
	}
	finally {
		strExpl0 = null;
		strExpl1 = null;
		strExpl2 = null;
		strExpl3 = null;
		strExpl4 = null;
		strExpl5 = null;
		srvBV = null;
		srvQuery = null;
		srvCT = null;		
		pSet1 = null;
		pSet2 = null;
		pSet3 = null;
		pSet4 = null;
		pSet5 = null;
		strBatchVal=null;
		strErrorMsg=null;

		//TheApplication().SetProfileAttr(&quot;BV_MAN_GET_ELIG_MSG&quot;, &quot;&quot;);
		//TheApplication().SetProfileAttr(&quot;WA_SR_3-12504825041_BV_FLAG&quot;, &quot;&quot;);
		//TheApplication().SetProfileAttr(&quot;BV_ELIG_REASON&quot;, &quot;&quot;);
	}
}"
			   SEQUENCE="9"
			   UPDATED="08/19/2016 08:32:10"
			   UPDATED_BY="VF_KOZTURK"
			   CREATED="05/09/2016 12:20:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



