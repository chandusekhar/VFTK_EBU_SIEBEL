<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="ACS Portal"
	   UI_FREEZE="N"
	   UPDATED="09/12/2016 18:02:11"
	   UPDATED_BY="JMARQUES"
	   CREATED="01/31/2009 12:28:34"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="8/4/2005 MV added forACS Portal"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="ACS Order Portal"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="09/12/2016 17:07:09"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="JMARQUES"
		   UPDATED="09/12/2016 17:38:19"
		   UPDATED_BY="JMARQUES"
		   CREATED="01/31/2009 16:14:28"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="ACS Order Portal"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="01/31/2009 16:18:22"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:18:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CancelOrderBatch"
			   UPDATED="11/24/2013 20:31:51"
			   UPDATED_BY="SADMIN"
			   CREATED="11/24/2013 20:31:51"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/24/2013 20:31:51"
				   UPDATED_BY="SADMIN"
				   CREATED="11/24/2013 20:31:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CancelOrderBatch"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/24/2013 20:31:51"
				   UPDATED_BY="SADMIN"
				   CREATED="11/24/2013 20:31:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CancelOrderUI"
			   UPDATED="03/08/2013 21:17:18"
			   UPDATED_BY="SADMIN"
			   CREATED="03/08/2013 21:17:18"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/08/2013 21:17:18"
				   UPDATED_BY="SADMIN"
				   CREATED="03/08/2013 21:17:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CancelOrderUI"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/08/2013 21:17:18"
				   UPDATED_BY="SADMIN"
				   CREATED="03/08/2013 21:17:18"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckIMEIRelease"
			   UPDATED="12/24/2013 14:07:29"
			   UPDATED_BY="SADMIN"
			   CREATED="12/24/2013 14:07:29"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Order Header Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/24/2013 14:07:29"
				   UPDATED_BY="SADMIN"
				   CREATED="12/24/2013 14:07:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Root Id"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/24/2013 14:07:29"
				   UPDATED_BY="SADMIN"
				   CREATED="12/24/2013 14:07:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckIMEIRelease"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/24/2013 14:07:29"
				   UPDATED_BY="SADMIN"
				   CREATED="12/24/2013 14:07:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOrder"
			   UPDATED="01/31/2009 16:17:33"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:11"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="X_1-0712160019-049"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrMsg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrMsg"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ReasonFlg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ReasonFlg"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="StatusCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="StatusCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DisconnectMNPOrder"
			   UPDATED="09/16/2010 16:16:23"
			   UPDATED_BY="SADMIN"
			   CREATED="04/22/2010 09:10:25"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DonorOperator"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MSISDN"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PortID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PortingDateTime"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Reason"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RecipientOperator"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ReferenceNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input / Output"
				   UPDATED="09/16/2010 16:16:23"
				   UPDATED_BY="SADMIN"
				   CREATED="09/16/2010 16:16:23"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DisconnectMNPOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/22/2010 09:10:25"
				   UPDATED_BY="SADMIN"
				   CREATED="04/22/2010 09:10:25"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DisconnectOrder"
			   UPDATED="04/21/2010 15:21:02"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:12"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AssetId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:14"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:14"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MSISDN"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PortingDateTime"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/21/2010 15:21:02"
				   UPDATED_BY="SADMIN"
				   CREATED="04/21/2010 15:21:02"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Reason"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="StatusCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DisconnectOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="MC ACS - Newly Created for Generating the Sequence."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetRootTransaction"
			   UPDATED="05/19/2010 15:57:39"
			   UPDATED_BY="SADMIN"
			   CREATED="05/19/2010 15:57:39"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Number"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Output"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/19/2010 15:57:39"
				   UPDATED_BY="SADMIN"
				   CREATED="05/19/2010 15:57:39"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetRootTransaction"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/19/2010 15:57:39"
				   UPDATED_BY="SADMIN"
				   CREATED="05/19/2010 15:57:39"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ReleaseIMEIeconf"
			   UPDATED="11/19/2013 10:31:09"
			   UPDATED_BY="SADMIN"
			   CREATED="11/19/2013 10:31:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderHeader"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/19/2013 10:31:09"
				   UPDATED_BY="SADMIN"
				   CREATED="11/19/2013 10:31:09"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderHeader"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/19/2013 10:31:09"
					   UPDATED_BY="SADMIN"
					   CREATED="11/19/2013 10:31:09"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RowId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/19/2013 10:31:09"
				   UPDATED_BY="SADMIN"
				   CREATED="11/19/2013 10:31:09"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="RowId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="11/19/2013 10:31:09"
					   UPDATED_BY="SADMIN"
					   CREATED="11/19/2013 10:31:09"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ReleaseIMEIeconf"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/19/2013 10:31:09"
				   UPDATED_BY="SADMIN"
				   CREATED="11/19/2013 10:31:09"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="RetrieveOrder"
			   UPDATED="01/31/2009 16:16:15"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:12"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Integration Object"
				   HIDDEN="N"
				   INACTIVE="N"
				   INTEGRATION_OBJECT="ACS Order Portal"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="RetrieveOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="SBL_SUBMITORDER-1009090435-153"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SubmitOrder"
			   UPDATED="01/31/2009 16:17:33"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:12"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="X_1-0712160019-049"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrMsg"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:17:33"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="01/31/2009 16:17:33"
					   UPDATED_BY="SADMIN"
					   CREATED="01/31/2009 16:17:33"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Integration Object"
				   HIDDEN="N"
				   INACTIVE="N"
				   INTEGRATION_OBJECT="ACS Order Portal"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SubmitOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UnlockPSNT"
			   UPDATED="12/24/2013 14:07:30"
			   UPDATED_BY="SADMIN"
			   CREATED="12/24/2013 14:07:29"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/24/2013 14:07:29"
				   UPDATED_BY="SADMIN"
				   CREATED="12/24/2013 14:07:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UnlockPSNT"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/24/2013 14:07:30"
				   UPDATED_BY="SADMIN"
				   CREATED="12/24/2013 14:07:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateOrder"
			   UPDATED="01/31/2009 16:16:15"
			   UPDATED_BY="SADMIN"
			   CREATED="01/31/2009 16:15:12"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Integration Object"
				   HIDDEN="N"
				   INACTIVE="N"
				   INTEGRATION_OBJECT="ACS Order Portal"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="01/31/2009 16:16:15"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:16:15"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="UpdateOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/31/2009 16:15:29"
				   UPDATED_BY="SADMIN"
				   CREATED="01/31/2009 16:15:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CancelOrderBatch"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CancelOrderBatch (Inputs, Outputs)
{	
	try
	{
		var	AppName				= TheApplication().GetProfileAttr(&quot;ApplicationName&quot;);
		var	strOrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
	
		if((strOrderId == &quot;&quot;|| strOrderId == null)&amp;&amp;(AppName == &quot;Siebel eChannel&quot;))
		{
			return (CancelOperation);
		}
		var oBO					: BusObject =  TheApplication().GetBusObject(&quot;VF X HP Order Entry&quot;);
		var bcOrderItem				: BusComp =  oBO.GetBusComp(&quot;HP Order Entry - Line Items&quot;);
		var boOrder				: BusObject =  TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var bcOrder				: BusComp =  boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		//var bcOrderItem			: BusComp =  boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		
		var bcOrderItemXA       : BusComp =  oBO.GetBusComp(&quot;Order Item XA (Simple)&quot;);
		var Cancelled			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
		var strPending          = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);
		var strSubPending       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Submitted-Pending&quot;)
		var strParked       	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Parked&quot;);
		var bsGenOperations     : Service= TheApplication().GetService (&quot;ACS General Operations&quot;);

		var strIMSI = &quot;&quot;;
		var strMSISDN = &quot;&quot;;
		var booOrderItemExists;
		var InputIMEI :PropertySet= TheApplication().NewPropertySet();
		var OutputIMEI:PropertySet= TheApplication().NewPropertySet();
		var psInputs  :PropertySet= TheApplication ().NewPropertySet ();
		var psOutputs :PropertySet= TheApplication ().NewPropertySet ();
		var psInputsVPN  :PropertySet= TheApplication ().NewPropertySet ();
		var psOutputsVPN :PropertySet= TheApplication ().NewPropertySet ();
		var inProp  :PropertySet= TheApplication().NewPropertySet();
		var outProp :PropertySet= TheApplication().NewPropertySet();
		var BS 		:Service	= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psInput : PropertySet = TheApplication().NewPropertySet();
		var psOutput : PropertySet = TheApplication().NewPropertySet();
		var oServiceShortNum : Service = TheApplication().GetService(&quot;VF ManageVPNShortNumber BS&quot;);

		var boParameters : BusObject = TheApplication ().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameters : BusComp = boParameters.GetBusComp (&quot;ACS NI Parameter (Simple)&quot;);
		var imsiAttrName = &quot;IMSI&quot;; //Default the attribute to IMSI
		var msisdnAttrName = &quot;MSISDN&quot;;//Default the attribute to MSISDN
		var strOrderType;
		var strOrderSubType;
		var IMSIUnlockFlag = &quot;N&quot;;
		var MSISDNUnlockFlag = &quot;N&quot;;
		var strUnlockPartNumIMSI;
		var strUnlockPartNumMSISDN;
		var actionCodeIMSI;
		var actionCodeMSISDN;
		var sGroupId = &quot;&quot;;
		var sShortNumber =&quot;&quot;;
		var sRootAssetIntegId = &quot;&quot;;
		var sErrorMessage =&quot;&quot;;
		var strVPN = &quot;3001&quot;;

		//Get the Attribute Name for IMSI and MSISDN
		//Query the System Parameters for IMSI
		with(bcParameters)
		{	ClearToQuery ();
			SetViewMode(AllView);//Mamta-Updated as p er Oracle Review
			ActivateField (&quot;Value&quot;);
			ActivateField (&quot;Condition1&quot;);
			ActivateField (&quot;Condition2&quot;);	
			ActivateField (&quot;Condition3&quot;);
			SetSearchSpec (&quot;Function&quot;,&quot;Modify Options&quot;);
			SetSearchSpec (&quot;Name&quot;,&quot;Change IMSI Attribute&quot;);//scripting 15: null check not req
			ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review

			//If IMSI parameter exists get the IMSI
			if(FirstRecord() )
			{
				imsiAttrName = GetFieldValue(&quot;Value&quot;);
			}
			//Query the System Parameters for MSISDN
			ClearToQuery ();
			SetViewMode(AllView);//Mamta-Updated as per Oracle Review
			ActivateField (&quot;Value&quot;);
			ActivateField (&quot;Condition1&quot;);
			ActivateField (&quot;Condition2&quot;);	
			ActivateField (&quot;Condition3&quot;);
			SetSearchSpec (&quot;Function&quot;,&quot;Modify Options&quot;);
			SetSearchSpec (&quot;Name&quot;,&quot;Change MSISDN Attribute&quot;);//scripting 15: null check not req
			ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review

			//If MSISDN parameter exists get the MSISDN
			if(FirstRecord() )
			{
				msisdnAttrName = GetFieldValue(&quot;Value&quot;);
			}
		}

		//Query for the Order to be cancelled
		var strOrderSrcspec = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;

		bcOrder.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Id&quot;);
		bcOrder.ActivateField(&quot;Status&quot;);
		bcOrder.ActivateField(&quot;X Action Type&quot;);
		bcOrder.ActivateField(&quot;Order Sub Type Calc&quot;);
		// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
			inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End 
		bcOrder.SetSearchExpr(strOrderSrcspec);
		bcOrder.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review

		if(bcOrder.FirstRecord() )
		{
			//Get the parameters from the System Paramters
			strOrderType = bcOrder.GetFieldValue(&quot;X Action Type&quot;);
			strOrderSubType = bcOrder.GetFieldValue(&quot;Order Sub Type Calc&quot;);

			// CR034 - MNP Reject SimCard
			var sOrdType 	= bcOrder.GetFieldValue(&quot;Order Type&quot;);
			var sOrdSubType = bcOrder.GetFieldValue(&quot;Order Sub Type&quot;);
			var sMNPPortIn 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
			var sNewServ 		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Add New Service&quot;);
			var sModify 		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Modify Product &amp; Service&quot;);
		  	var sModifyMSISDN 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;102&quot;);
		  	var sModifyIMSI 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		  	var sMNPPortIn 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);

			if (sOrdType == sNewServ || (sOrdType == sModify &amp;&amp; (sOrdSubType == sModifyMSISDN || sOrdSubType == sModifyIMSI)) || sOrdSubType == sMNPPortIn)
				InvokeReleaseMsisdn(strOrderId,&quot;N&quot;,sOrdSubType);

			//this is set to the Order Sub Type to null in case it is null
			if (strOrderSubType == null)
			{
				strOrderSubType = &quot;null&quot;;
			}
			
			//Query the System Parameters for IMSI
			with(bcParameters)
			{	
				ClearToQuery ();
				SetViewMode(AllView);//Mamta-Updated as per Oracle Review
				ActivateField (&quot;Value&quot;);	
				ActivateField (&quot;Condition3&quot;);
				SetSearchSpec (&quot;Function&quot;,&quot;Cancel Order UI&quot;);
				SetSearchSpec (&quot;Condition1&quot;,strOrderType);
				SetSearchSpec (&quot;Condition2&quot;,strOrderSubType);
				SetSearchSpec (&quot;Name&quot;,imsiAttrName);
				// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
				inProp  = TheApplication().NewPropertySet();
				inProp.SetProperty(&quot;strOrderType&quot;,strOrderType);
				//inProp.SetProperty(&quot;strOrderSubType&quot;,strOrderSubType);
				inProp.SetProperty(&quot;imsiAttrName&quot;,imsiAttrName);
				inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				//End 
				ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
			
				//If IMSI parameter exists set the flag to &quot;Y&quot;
				if(FirstRecord() )
				{
					IMSIUnlockFlag = &quot;Y&quot;;
					strUnlockPartNumIMSI = GetFieldValue(&quot;Value&quot;);
					actionCodeIMSI = GetFieldValue(&quot;Condition3&quot;);
				}
			
				//Query the System Parameters for MSISDN
				ClearToQuery ();
				SetViewMode(AllView);//Mamta-Updated as per Oracle Review
				ActivateField (&quot;Value&quot;);
				ActivateField (&quot;Condition3&quot;);	
				SetSearchSpec (&quot;Function&quot;,&quot;Cancel Order UI&quot;);
				SetSearchSpec (&quot;Condition1&quot;,strOrderType);
				SetSearchSpec (&quot;Condition2&quot;,strOrderSubType);
				SetSearchSpec (&quot;Name&quot;,msisdnAttrName);//null check done above
				ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
				
				//If MSISDN parameter exists set the flag to &quot;Y&quot;
				if (FirstRecord() )
				{
					MSISDNUnlockFlag = &quot;Y&quot;;
					strUnlockPartNumMSISDN = GetFieldValue(&quot;Value&quot;);
					actionCodeMSISDN = GetFieldValue(&quot;Condition3&quot;);
				}
			}
		}
		//Get the order status and change it to &apos;cancelled&apos; if it is &apos;pending&apos; and &apos;submitted-pending&apos;
		if (bcOrder.FirstRecord ())
	   	{	
	   		var strOrderIdrec	= bcOrder.GetFieldValue(&quot;Id&quot;);
	   		var strOrderStatus	= bcOrder.GetFieldValue(&quot;Status&quot;); 
	   		if (strOrderStatus == strPending || strOrderStatus == strSubPending || strOrderStatus == strParked)
	   		{
   				bcOrder.SetFieldValue(&quot;Status&quot;,Cancelled);
   				bcOrder.WriteRecord();
		   		//Get the line items of the order
		   		bcOrderItem.SetViewMode(AllView);
		   		bcOrderItem.ClearToQuery();
				bcOrderItem.ActivateField(&quot;Status&quot;);
				bcOrderItem.ActivateField(&quot;Root Asset Integration Id&quot;);
				bcOrderItem.ActivateField(&quot;Product&quot;);
				// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
					inProp  = TheApplication().NewPropertySet();
					inProp.SetProperty(&quot;strOrderIdrec&quot;,strOrderIdrec);
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
					//End 
			    bcOrderItem.SetSearchSpec (&quot;Order Header Id&quot;, strOrderIdrec);

	    		bcOrderItemXA.ClearToQuery();//Scripting 31:moved the code up to remove child query
		   		bcOrderItemXA.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
				bcOrderItemXA.ActivateField(&quot;Object Id&quot;);
				bcOrderItemXA.ActivateField(&quot;Name&quot;);
				bcOrderItemXA.ActivateField(&quot;Value&quot;);
				bcOrderItemXA.ActivateField(&quot;Product Part Num&quot;);
				bcOrderItemXA.ActivateField(&quot;Action Code Calc&quot;);
				bcOrderItem.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
		   		booOrderItemExists	= bcOrderItem.FirstRecord ();
		   		while (booOrderItemExists)
		   		{
		   			var sProd = bcOrderItem.GetFieldValue(&quot;Product&quot;);
		   			var strLineItemId = bcOrderItem.GetFieldValue(&quot;Id&quot;);
		   			var strpart = bcOrderItem.GetFieldValue(&quot;Part Number&quot;);
		   			var straction = bcOrderItem.GetFieldValue(&quot;Action Code&quot;);
		   			var parentPartNum;
		   			var currentActionCode;
		   			
		   			//Set the line item status
		   			bcOrderItem.SetFieldValue(&quot;Status&quot;,Cancelled);
			   		bcOrderItem.WriteRecord();
			   		var ItemXAExist = bcOrderItemXA.FirstRecord();
			   		while(ItemXAExist)
			   		{
			   			//Get the part num of the parent order item product
			   			parentPartNum = bcOrderItemXA.GetFieldValue(&quot;Product Part Num&quot;);
			   		
			   			//Get the action code of the current item attribute
			   			currentActionCode = bcOrderItemXA.GetFieldValue(&quot;Action Code Calc&quot;);
			   			
			   			var strAttrName = bcOrderItemXA.GetFieldValue(&quot;Name&quot;);
			   			
			   			if( (strAttrName == imsiAttrName) &amp;&amp;
			   				(parentPartNum == strUnlockPartNumIMSI) &amp;&amp;
			   				(currentActionCode == actionCodeIMSI)  )
			   			{
			   				strIMSI = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}
			   			
			   			else if((strAttrName == msisdnAttrName) &amp;&amp; 
			   					(parentPartNum == strUnlockPartNumMSISDN) &amp;&amp;
			   					(currentActionCode == actionCodeMSISDN))
			   			{
			   				strMSISDN = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}		
			   			if(strAttrName == &quot;Group #&quot; &amp;&amp;  (parentPartNum == strVPN))
			   			{
							sGroupId = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}
			  			if(strAttrName == &quot;Short Number&quot; &amp;&amp; (currentActionCode == &quot;New&quot; || currentActionCode == &quot;Modified&quot; ) &amp;&amp;  (parentPartNum == strVPN))
			   			{
							sShortNumber = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}
			   				   			
			   			ItemXAExist = bcOrderItemXA.NextRecord();
			   		}				   						   		
			   		
					if((sProd == &quot;VF_VPN&quot; || sProd == &quot;PSTN&quot;) &amp;&amp; sGroupId !=&quot;&quot; &amp;&amp; sShortNumber != &quot;&quot;)
			   		{
			   			sRootAssetIntegId = bcOrderItem.GetFieldValue(&quot;Root Asset Integration Id&quot;);
						TheApplication().SetProfileAttr(&quot;VPNGroupId&quot;, sGroupId);
						TheApplication().SetProfileAttr(&quot;RootAssetIntegId&quot;, sRootAssetIntegId);
						psInputs.SetProperty(&quot;ActionType&quot;, &quot;Unlock&quot;);
						psInputs.SetProperty(&quot;ShortNumber&quot;,  sShortNumber);
						psInputs.SetProperty(&quot;ReservationEntity&quot;, &quot;ORDER&quot;);
						oServiceShortNum.InvokeMethod(&quot;ManageVPNShortNumber&quot;, psInputs, psOutputs);
						sErrorMessage = psOutputs.GetProperty(&quot;ErrorMessage&quot;);
						if(sErrorMessage != &quot;&quot;)
							return (CancelOperation);
						sShortNumber =&quot;&quot;;
						sGroupId =&quot;&quot;;
					}					
			   		booOrderItemExists	= bcOrderItem.NextRecord();
		   		} 		   	
			   		// WP1 ManagIMEI YGhazi ---begin	

			   		var strSearchExpr           = &quot;&quot;;
			   		var OldIMEI =&quot;&quot;;
			   		var RowId = &quot;&quot;;
			   		var strAdd        = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
			   		var strIMEISearch   = &quot;[Action Code] = &apos;&quot;+strAdd+&quot;&apos; AND [Order Header Id] = &apos;&quot;+strOrderIdrec+&quot;&apos; AND ([VF IMEI] is not null OR [VF Adapter Number] is not null)&quot;;
			   		var TransactionId = &quot;&quot;;
			   		with(bcOrderItem){
 			   		SetViewMode(AllView);
			   		ClearToQuery();
					ActivateField(&quot;VF IMEI&quot;);
					ActivateField(&quot;Parent Order Transaction Id&quot;);
					ActivateField(&quot;VF Adapter Number&quot;);
					ActivateField(&quot;Order Header Id&quot;);
					ActivateField(&quot;Id&quot;);
				    SetSearchExpr (strIMEISearch);//null check done above					    
				    with(bcOrderItemXA)
					{
						ClearToQuery();
						SetViewMode(AllView); 
					 	ActivateField(&quot;Action Code&quot;);
					    strSearchExpr = &quot;[Action Code] = &apos;&quot;+strAdd+&quot;&apos; AND ([Name] = &apos;IMEI&apos; OR [Name] = &apos;Adapter&apos;)&quot;;/*AND [Object Id] =&apos;&quot;+strOrderItemId+&quot;&apos;&quot;;*/ 
				 		SetSearchExpr (strSearchExpr);//null check not req value coming from lov
				 	}					    
					ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
					var strIMEIFind = FirstRecord (); 
			   		while(strIMEIFind)
				   	{
						var strattrib = &quot;&quot;;
						var strOrderItemId =  GetFieldValue(&quot;Id&quot;);
						if (GetFieldValue(&quot;VF IMEI&quot;) !=&quot;&quot;){
							 OldIMEI = GetFieldValue(&quot;VF IMEI&quot;);
							 InputIMEI.SetProperty(&quot;Type&quot;,&quot;IMEI&quot;);
						}
					    else if (GetFieldValue(&quot;VF Adapter Number&quot;)!=&quot;&quot;){		 
					     	 OldIMEI = GetFieldValue(&quot;VF Adapter Number&quot;);
					     	 InputIMEI.SetProperty(&quot;Type&quot;,&quot;Adapter&quot;);
						}						    	
						RowId = GetFieldValue(&quot;Id&quot;);
						TransactionId = GetFieldValue(&quot;Parent Order Transaction Id&quot;);
						InputIMEI.SetProperty(&quot;IMEI&quot;,&quot;&quot;);
      						InputIMEI.SetProperty(&quot;OldIMEI&quot;,OldIMEI);
       					InputIMEI.SetProperty(&quot;RowId&quot;,RowId);
       					InputIMEI.SetProperty(&quot;MSISDN&quot;,strMSISDN);
       					InputIMEI.SetProperty(&quot;TransactionId&quot;,TransactionId);
				   		ManageIMEI(InputIMEI, OutputIMEI); 					   		
				   		SetFieldValue(&quot;VF IMEI&quot;, &quot;&quot;);
				   		SetFieldValue(&quot;VF Adapter Number&quot;, &quot;&quot;);
				  	    WriteRecord();
				  	    with(bcOrderItemXA)
						{
							if(FirstRecord())
								DeleteRecord();
					 	}
				  	    strIMEIFind = NextRecord();
				   		}
		   			}	   			  
	   		}
	   		else
	   		{	   			
	   		    psInputs.SetProperty (&quot;Code&quot;, &quot;043&quot;);
	   		    psInputs.SetProperty (&quot;MessageCategory&quot;, &quot;ACS Messages&quot;);	   		
	   		    bsGenOperations.InvokeMethod (&quot;GetLookupMsg&quot;, psInputs, psOutputs);
                var strErrMessage = psOutputs.GetProperty (&quot;Message&quot;);
	   		    //TheApplication ().RaiseErrorText (psOutputs.GetProperty (&quot;Message&quot;)); 
				return (CancelOperation);
	   		}	   		
	   	} //End Order Loop
	   	sendFDOCancelSMS(strOrderId); //CR722
		Outputs.SetProperty (&quot;StatusCode&quot;, &quot;0&quot;);
		Outputs.SetProperty (&quot;ErrCode&quot;, &quot;0&quot;);
		Outputs.SetProperty (&quot;ErrMsg&quot;, &quot;&quot;);
		return (CancelOperation);
	}//End of try	
	finally
	{
	inProp		= null;
	outProp		= null;
	BS			= null;
	bcParameters	= null;
	boParameters	= null;
	bcOrderItemXA	= null;
	bcOrderItem		= null;
	bcOrder			= null;
	boOrder			= null;
	bsGenOperations	= null;
	InputIMEI		= null;
	OutputIMEI		= null;
	psInputs		= null;
	psOutputs		= null;
	psInput = null;
	psOutput = null;
	oServiceShortNum = null;
	//OrdBC = null;
	//ActBO = null;
	oBO = null;

	}
}"
			   SEQUENCE="1"
			   UPDATED="07/17/2014 18:22:29"
			   UPDATED_BY="PSILVA"
			   CREATED="11/24/2013 20:31:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CancelOrderUI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CancelOrderUI (Inputs, Outputs)
{	
	try
	{
		var	AppName				= TheApplication().GetProfileAttr(&quot;ApplicationName&quot;);
		var	strOrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
		TheApplication().SetProfileAttr(&quot;InsideTask&quot;,&quot;N&quot;);
		if((strOrderId == &quot;&quot;|| strOrderId == null)&amp;&amp;(AppName == &quot;Siebel eChannel&quot;))
		{
			strOrderId = TheApplication().GetProfileAttr(&quot;VFPA_OrderId&quot;);
			if (strOrderId == &quot;&quot; || strOrderId == null)
			{
				strOrderId = TheApplication().GetProfileAttr(&quot;reasonOrderId&quot;);
				if (strOrderId == &quot;&quot;)
					return (CancelOperation);
			}
		}
		var oBO					: BusObject =  TheApplication().GetBusObject(&quot;VF X HP Order Entry&quot;);
		var bcOrderItem				: BusComp =  oBO.GetBusComp(&quot;HP Order Entry - Line Items&quot;);
		var boOrder				: BusObject =  TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var bcOrder				: BusComp =  boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcOrderItemXA       : BusComp =  oBO.GetBusComp(&quot;Order Item XA (Simple)&quot;);
		var Cancelled			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
		var strPending          = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);
		var strSubPending       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Submitted-Pending&quot;)
		var strParked       	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Parked&quot;);
		var bsGenOperations     : Service= TheApplication().GetService (&quot;ACS General Operations&quot;);
		var sMNPPortIn 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
		var sNewServ 		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Add New Service&quot;);
		var sModify 		= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Modify Product &amp; Service&quot;);
		var sModifyMSISDN 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;102&quot;);
		var sModifyIMSI 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		var sMNPPortIn 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
		var sFWRMIG			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;137&quot;);
		var sMNPPortInCanc 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;112&quot;);
		var strIMSI = &quot;&quot;;
		var strMSISDN = &quot;&quot;;
		var booOrderItemExists;
		var InputPSTN :PropertySet= TheApplication().NewPropertySet();
		var OutputPSTN :PropertySet= TheApplication().NewPropertySet();
		var InputIMEI :PropertySet= TheApplication().NewPropertySet();
		var OutputIMEI:PropertySet= TheApplication().NewPropertySet();
		var psInputs  :PropertySet= TheApplication ().NewPropertySet ();
		var psOutputs :PropertySet= TheApplication ().NewPropertySet ();
		var psInputsVPN  :PropertySet= TheApplication ().NewPropertySet ();
		var psOutputsVPN :PropertySet= TheApplication ().NewPropertySet ();
		var inProp  :PropertySet= TheApplication().NewPropertySet();
		var outProp :PropertySet= TheApplication().NewPropertySet();
		var BS 		:Service	= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psInput : PropertySet = TheApplication().NewPropertySet();
		var psOutput : PropertySet = TheApplication().NewPropertySet();
		var oServiceShortNum : Service = TheApplication().GetService(&quot;VF ManageVPNShortNumber BS&quot;);
		var boParameters : BusObject = TheApplication ().GetBusObject (&quot;ACS NI Parameter&quot;);
		var bcParameters : BusComp = boParameters.GetBusComp (&quot;ACS NI Parameter (Simple)&quot;);
		var imsiAttrName = &quot;IMSI&quot;; 
		var msisdnAttrName = &quot;MSISDN&quot;;
		var strOrderType;
		var strOrderSubType;
		var IMSIUnlockFlag = &quot;N&quot;;
		var MSISDNUnlockFlag = &quot;N&quot;;
		var strUnlockPartNumIMSI;
		var strUnlockPartNumMSISDN;
		var actionCodeIMSI;
		var actionCodeMSISDN;
		var sGroupId = &quot;&quot;;
		var sShortNumber =&quot;&quot;;
		var sRootAssetIntegId = &quot;&quot;;
		var sErrorMessage =&quot;&quot;;
		var strVPN = &quot;3001&quot;;
		with(bcParameters)
		{	ClearToQuery ();
			SetViewMode(AllView);//Mamta-Updated as p er Oracle Review
			ActivateField (&quot;Value&quot;);
			ActivateField (&quot;Condition1&quot;);
			ActivateField (&quot;Condition2&quot;);	
			ActivateField (&quot;Condition3&quot;);
			SetSearchSpec (&quot;Function&quot;,&quot;Modify Options&quot;);
			SetSearchSpec (&quot;Name&quot;,&quot;Change IMSI Attribute&quot;);//scripting 15: null check not req
			ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
			//If IMSI parameter exists get the IMSI
			if(FirstRecord() )
			{
				imsiAttrName = GetFieldValue(&quot;Value&quot;);
			}
			//Query the System Parameters for MSISDN
			ClearToQuery ();
			SetViewMode(AllView);//Mamta-Updated as per Oracle Review
			ActivateField (&quot;Value&quot;);
			ActivateField (&quot;Condition1&quot;);
			ActivateField (&quot;Condition2&quot;);	
			ActivateField (&quot;Condition3&quot;);
			SetSearchSpec (&quot;Function&quot;,&quot;Modify Options&quot;);
			SetSearchSpec (&quot;Name&quot;,&quot;Change MSISDN Attribute&quot;);//scripting 15: null check not req
			ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
			//If MSISDN parameter exists get the MSISDN
			if(FirstRecord() )
			{
				msisdnAttrName = GetFieldValue(&quot;Value&quot;);
			}
		}
		//Query for the Order to be cancelled
		var strOrderSrcspec = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		bcOrder.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Id&quot;);
		bcOrder.ActivateField(&quot;Status&quot;);
		bcOrder.ActivateField(&quot;X Action Type&quot;);
		bcOrder.ActivateField(&quot;Order Sub Type Calc&quot;);
		// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
			inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End 
		bcOrder.SetSearchExpr(strOrderSrcspec);
		bcOrder.ExecuteQuery(ForwardOnly); 
		if(bcOrder.FirstRecord() )
		{
			strOrderType = bcOrder.GetFieldValue(&quot;X Action Type&quot;);
			strOrderSubType = bcOrder.GetFieldValue(&quot;Order Sub Type Calc&quot;);
			// CR034 - MNP Reject SimCard
			var sOrdType 	= bcOrder.GetFieldValue(&quot;Order Type&quot;);
			var sOrdSubType = bcOrder.GetFieldValue(&quot;Order Sub Type&quot;);
		  	//Defect 4603
		  	var sVpn = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;110&quot;);
		  	var sModifyOption = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;111&quot;);
		  	//Defect 2293
		    var strOrderIdrec	= bcOrder.GetFieldValue(&quot;Id&quot;);
	   		var strOrderStatus	= bcOrder.GetFieldValue(&quot;Status&quot;);
	   		var sOrderSubType 	= bcOrder.GetFieldValue(&quot;Order Sub Type&quot;);
			if (strOrderStatus == strPending || strOrderStatus == strSubPending || strOrderStatus == strParked)
			{
				if ((sOrdType == sNewServ &amp;&amp; sOrdSubType != sMNPPortInCanc) || (sOrdType == sModify &amp;&amp; (sOrdSubType == sModifyMSISDN || sOrdSubType == sModifyIMSI)) || sOrdSubType == sMNPPortIn || sOrdSubType == sFWRMIG)
					InvokeReleaseMsisdn(strOrderId,&quot;N&quot;,sOrdSubType);
				if ((sOrdType == sNewServ &amp;&amp; sOrdSubType == sVpn) || (sOrdType == sModify &amp;&amp; sOrdSubType == sModifyOption))
				{
					InputPSTN.SetProperty(&quot;OrderId&quot;,strOrderId);
					UnlockPSNT(InputPSTN,OutputPSTN);
				}
			}
			if (strOrderSubType == null)
				strOrderSubType = &quot;null&quot;;
			with(bcParameters)
			{	
				ClearToQuery ();
				SetViewMode(AllView);//Mamta-Updated as per Oracle Review
				ActivateField (&quot;Value&quot;);	
				ActivateField (&quot;Condition3&quot;);
				SetSearchSpec (&quot;Function&quot;,&quot;Cancel Order UI&quot;);
				SetSearchSpec (&quot;Condition1&quot;,strOrderType);
				SetSearchSpec (&quot;Condition2&quot;,strOrderSubType);
				SetSearchSpec (&quot;Name&quot;,imsiAttrName);
				inProp  = TheApplication().NewPropertySet();
				inProp.SetProperty(&quot;strOrderType&quot;,strOrderType);
				inProp.SetProperty(&quot;imsiAttrName&quot;,imsiAttrName);
				inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
			
				//If IMSI parameter exists set the flag to &quot;Y&quot;
				if(FirstRecord() )
				{
					IMSIUnlockFlag = &quot;Y&quot;;
					strUnlockPartNumIMSI = GetFieldValue(&quot;Value&quot;);
					actionCodeIMSI = GetFieldValue(&quot;Condition3&quot;);
				}
			
				//Query the System Parameters for MSISDN
				ClearToQuery ();
				SetViewMode(AllView);//Mamta-Updated as per Oracle Review
				ActivateField (&quot;Value&quot;);
				ActivateField (&quot;Condition3&quot;);	
				SetSearchSpec (&quot;Function&quot;,&quot;Cancel Order UI&quot;);
				SetSearchSpec (&quot;Condition1&quot;,strOrderType);
				SetSearchSpec (&quot;Condition2&quot;,strOrderSubType);
				SetSearchSpec (&quot;Name&quot;,msisdnAttrName);//null check done above
				ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
				
				//If MSISDN parameter exists set the flag to &quot;Y&quot;
				if (FirstRecord() )
				{
					MSISDNUnlockFlag = &quot;Y&quot;;
					strUnlockPartNumMSISDN = GetFieldValue(&quot;Value&quot;);
					actionCodeMSISDN = GetFieldValue(&quot;Condition3&quot;);
				}
			}
		}
		//Get the order status and change it to &apos;cancelled&apos; if it is &apos;pending&apos; and &apos;submitted-pending&apos;
		if (bcOrder.FirstRecord ())
	   	{	
	   		if (strOrderStatus == strPending || strOrderStatus == strSubPending || strOrderStatus == strParked)
	   		{
   				bcOrder.SetFieldValue(&quot;Status&quot;,Cancelled);
   				bcOrder.WriteRecord();
		   		//Get the line items of the order
		   		bcOrderItem.SetViewMode(AllView);
		   		bcOrderItem.ClearToQuery();
				bcOrderItem.ActivateField(&quot;Status&quot;);
				bcOrderItem.ActivateField(&quot;Root Asset Integration Id&quot;);
				bcOrderItem.ActivateField(&quot;Product&quot;);
				// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
					inProp  = TheApplication().NewPropertySet();
					inProp.SetProperty(&quot;strOrderIdrec&quot;,strOrderIdrec);
					BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
					//End 
			    bcOrderItem.SetSearchSpec (&quot;Order Header Id&quot;, strOrderIdrec);
	    		bcOrderItemXA.ClearToQuery();//Scripting 31:moved the code up to remove child query
		   		bcOrderItemXA.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
				bcOrderItemXA.ActivateField(&quot;Object Id&quot;);
				bcOrderItemXA.ActivateField(&quot;Name&quot;);
				bcOrderItemXA.ActivateField(&quot;Value&quot;);
				bcOrderItemXA.ActivateField(&quot;Product Part Num&quot;);
				bcOrderItemXA.ActivateField(&quot;Action Code Calc&quot;);
				bcOrderItem.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
		   		booOrderItemExists	= bcOrderItem.FirstRecord ();
		   		while (booOrderItemExists)
		   		{
		   			var sProd = bcOrderItem.GetFieldValue(&quot;Product&quot;);
		   			var strLineItemId = bcOrderItem.GetFieldValue(&quot;Id&quot;);
		   			var strpart = bcOrderItem.GetFieldValue(&quot;Part Number&quot;);
		   			var straction = bcOrderItem.GetFieldValue(&quot;Action Code&quot;);
		   			var parentPartNum;
		   			var currentActionCode;
		   			
		   			//Set the line item status
		   			bcOrderItem.SetFieldValue(&quot;Status&quot;,Cancelled);
			   		bcOrderItem.WriteRecord();
			   		var ItemXAExist = bcOrderItemXA.FirstRecord();
			   		while(ItemXAExist)
			   		{
			   			//Get the part num of the parent order item product
			   			parentPartNum = bcOrderItemXA.GetFieldValue(&quot;Product Part Num&quot;);
			   			//Get the action code of the current item attribute
			   			currentActionCode = bcOrderItemXA.GetFieldValue(&quot;Action Code Calc&quot;);
			   			var strAttrName = bcOrderItemXA.GetFieldValue(&quot;Name&quot;);
			   			if( (strAttrName == imsiAttrName) &amp;&amp;
			   				(parentPartNum == strUnlockPartNumIMSI) &amp;&amp;
			   				(currentActionCode == actionCodeIMSI)  )
			   			{
			   				strIMSI = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}
			   			else if((strAttrName == msisdnAttrName) &amp;&amp; 
			   					(parentPartNum == strUnlockPartNumMSISDN) &amp;&amp;
			   					(currentActionCode == actionCodeMSISDN))
			   			{
			   				strMSISDN = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}		
			   			if(strAttrName == &quot;Group #&quot; &amp;&amp;  (parentPartNum == strVPN))
			   			{
							sGroupId = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}
			  			if(strAttrName == &quot;Short Number&quot; &amp;&amp; (currentActionCode == &quot;New&quot; || currentActionCode == &quot;Modified&quot; ) &amp;&amp;  (parentPartNum == strVPN))
			   			{
							sShortNumber = bcOrderItemXA.GetFieldValue(&quot;Value&quot;);
			   			}   			
			   			ItemXAExist = bcOrderItemXA.NextRecord();
			   		}				   						   		
					if(sOrderSubType != sMNPPortInCanc &amp;&amp; (sProd == &quot;VF_VPN&quot; || sProd == &quot;PSTN&quot;) &amp;&amp; sGroupId !=&quot;&quot; &amp;&amp; sShortNumber != &quot;&quot;)
			   		{
			   			sRootAssetIntegId = bcOrderItem.GetFieldValue(&quot;Root Asset Integration Id&quot;);
						TheApplication().SetProfileAttr(&quot;VPNGroupId&quot;, sGroupId);
						TheApplication().SetProfileAttr(&quot;RootAssetIntegId&quot;, sRootAssetIntegId);
						psInputs.SetProperty(&quot;ActionType&quot;, &quot;Unlock&quot;);
						psInputs.SetProperty(&quot;ShortNumber&quot;,  sShortNumber);
						psInputs.SetProperty(&quot;ReservationEntity&quot;, &quot;ORDER&quot;);
						oServiceShortNum.InvokeMethod(&quot;ManageVPNShortNumber&quot;, psInputs, psOutputs);
						sErrorMessage = psOutputs.GetProperty(&quot;ErrorMessage&quot;);
						if(sErrorMessage != &quot;&quot;)
							TheApplication().RaiseErrorText(sErrorMessage);		
						sShortNumber =&quot;&quot;;
						sGroupId =&quot;&quot;;
					}					
			   		booOrderItemExists	= bcOrderItem.NextRecord();
		   		} 		   	
			   		// WP1 ManagIMEI YGhazi ---begin	
			   		var strSearchExpr           = &quot;&quot;;
			   		var OldIMEI =&quot;&quot;;
			   		var RowId = &quot;&quot;;
			   		var strAdd        = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
			   		var strIMEISearch   = &quot;[Action Code] = &apos;&quot;+strAdd+&quot;&apos; AND [Order Header Id] = &apos;&quot;+strOrderIdrec+&quot;&apos; AND ([VF IMEI] is not null OR [VF Adapter Number] is not null)&quot;;
			   		var TransactionId = &quot;&quot;;
			   		with(bcOrderItem){
 			   		SetViewMode(AllView);
			   		ClearToQuery();
					ActivateField(&quot;VF IMEI&quot;);
					ActivateField(&quot;Parent Order Transaction Id&quot;);
					ActivateField(&quot;VF Adapter Number&quot;);
					ActivateField(&quot;Order Header Id&quot;);
					ActivateField(&quot;Id&quot;);
				    SetSearchExpr (strIMEISearch);//null check done above					    
				    with(bcOrderItemXA)
					{
						ClearToQuery();
						SetViewMode(AllView); 
					 	ActivateField(&quot;Action Code&quot;);
					    strSearchExpr = &quot;[Action Code] = &apos;&quot;+strAdd+&quot;&apos; AND ([Name] = &apos;IMEI&apos; OR [Name] = &apos;Adapter&apos;)&quot;;/*AND [Object Id] =&apos;&quot;+strOrderItemId+&quot;&apos;&quot;;*/ 
				 		SetSearchExpr (strSearchExpr);//null check not req value coming from lov
				 	}					    
					ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
					var strIMEIFind = FirstRecord (); 
			   		while(strIMEIFind)
				   	{
						var strattrib = &quot;&quot;;
						var strOrderItemId =  GetFieldValue(&quot;Id&quot;);
						if (GetFieldValue(&quot;VF IMEI&quot;) !=&quot;&quot;){
							 OldIMEI = GetFieldValue(&quot;VF IMEI&quot;);
							 InputIMEI.SetProperty(&quot;Type&quot;,&quot;IMEI&quot;);
						}
					    else if (GetFieldValue(&quot;VF Adapter Number&quot;)!=&quot;&quot;){		 
					     	 OldIMEI = GetFieldValue(&quot;VF Adapter Number&quot;);
					     	 InputIMEI.SetProperty(&quot;Type&quot;,&quot;Adapter&quot;);
						}						    	
						RowId = GetFieldValue(&quot;Id&quot;);
						TransactionId = GetFieldValue(&quot;Parent Order Transaction Id&quot;);
						InputIMEI.SetProperty(&quot;IMEI&quot;,&quot;&quot;);
      						InputIMEI.SetProperty(&quot;OldIMEI&quot;,OldIMEI);
       					InputIMEI.SetProperty(&quot;RowId&quot;,RowId);
       					InputIMEI.SetProperty(&quot;MSISDN&quot;,strMSISDN);
       					InputIMEI.SetProperty(&quot;TransactionId&quot;,TransactionId);
				   		ManageIMEI(InputIMEI, OutputIMEI); 					   		
				   		SetFieldValue(&quot;VF IMEI&quot;, &quot;&quot;);
				   		SetFieldValue(&quot;VF Adapter Number&quot;, &quot;&quot;);
				  	    WriteRecord();
				  	    with(bcOrderItemXA)
						{
							if(FirstRecord())
								DeleteRecord();
					 	}
				  	    strIMEIFind = NextRecord();
				   		}
		   			}	   			  
	   		}
	   		else
	   		{	   			
	   		    psInputs.SetProperty (&quot;Code&quot;, &quot;043&quot;);
	   		    psInputs.SetProperty (&quot;MessageCategory&quot;, &quot;ACS Messages&quot;);	   		
	   		    bsGenOperations.InvokeMethod (&quot;GetLookupMsg&quot;, psInputs, psOutputs);
                var strErrMessage = psOutputs.GetProperty (&quot;Message&quot;);
	   		    TheApplication ().RaiseErrorText (psOutputs.GetProperty (&quot;Message&quot;)); 
				return (CancelOperation);
	   		}	   		
	   	} //End Order Loop
	   	sendFDOCancelSMS(strOrderId); //CR722
		Outputs.SetProperty (&quot;StatusCode&quot;, &quot;0&quot;);
		Outputs.SetProperty (&quot;ErrCode&quot;, &quot;0&quot;);
		Outputs.SetProperty (&quot;ErrMsg&quot;, &quot;&quot;);
		return (CancelOperation);
	}//End of try	
	finally
	{
	inProp		= null;
	outProp		= null;
	BS			= null;
	bcParameters	= null;
	boParameters	= null;
	bcOrderItemXA	= null;
	bcOrderItem		= null;
	bcOrder			= null;
	boOrder			= null;
	bsGenOperations	= null;
	InputIMEI		= null;
	OutputIMEI		= null;
	psInputs		= null;
	psOutputs		= null;
	psInput = null;
	psOutput = null;
	oServiceShortNum = null;
	//OrdBC = null;
	//ActBO = null;
	oBO = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="04/22/2015 15:16:13"
			   UPDATED_BY="SADMIN"
			   CREATED="07/18/2014 17:11:56"
			   CREATED_BY="PSILVA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAssetMetropolis"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAssetMetropolis(Inputs,Outputs)
{
	try
	{
		var strMSISDN = Inputs.GetProperty(&quot;MSISDN&quot;);
		var strReturn = false;
		
		var App = TheApplication();
		var boAsset : BusObject = App.GetBusObject(&quot;Asset Management&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var bcAssetMetro : BusComp   = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		
		var strProdSubType = App.InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;METROPOLIS&quot;);
		var strAssetStatus = App.InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var strRootAssetId = &quot;&quot;;
		
		var strSearchExpr = &quot;[Serial Number] = &apos;&quot;+ strMSISDN +&quot;&apos; and [Status] = &apos;&quot;+ strAssetStatus +&quot;&apos;&quot;;
		with(bcAsset)
		{
			ClearToQuery ();
			SetViewMode (AllView);
			ActivateField (&quot;Root Asset Id&quot;);
			ActivateField (&quot;Serial Number&quot;);
			ActivateField (&quot;Status&quot;);
			SetSearchExpr (strSearchExpr);
			ExecuteQuery (ForwardOnly);
		}
		
		if (bcAsset.FirstRecord ())
      	{
			strRootAssetId = bcAsset.GetFieldValue (&quot;Root Asset Id&quot;);
		
			var strSearchExprMetro = &quot;[Root Asset Id] = &apos;&quot;+ strRootAssetId +&quot;&apos; and [VF Product Sub Type] = &apos;&quot;+ strProdSubType +&quot;&apos; and [Status] = &apos;&quot;+ strAssetStatus +&quot;&apos;&quot;;
			with(bcAssetMetro)
			{
				ClearToQuery ();
				SetViewMode (AllView);
				ActivateField (&quot;Root Asset Id&quot;);
				ActivateField (&quot;VF Product Sub Type&quot;);
				ActivateField (&quot;Status&quot;);
				SetSearchExpr (strSearchExprMetro);
				ExecuteQuery (ForwardOnly);
			}
			
			if (bcAssetMetro.FirstRecord ())
				strReturn = true;
		}
		return (strReturn);
	}
	finally
	{
		bcAssetMetro = null;
		bcAsset = null;
		boAsset = null;
		App = null;
	}

}"
			   SEQUENCE="3"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="04/24/2015 16:55:11"
			   CREATED_BY="PSILVA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckICCI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckICCI(strOrderItemId)
{
	try
	{
		var oBO					: BusObject =  TheApplication().GetBusObject(&quot;MACD Performance Quote&quot;);		
		var bcOrderItemXA       : BusComp =  oBO.GetBusComp(&quot;MACD Order Item XA&quot;);
		var strMSG 			= &quot;KO&quot;;
		
		with(bcOrderItemXA)
		{
			ClearToQuery();
	   		SetViewMode(AllView);
			ActivateField(&quot;Text Value&quot;);
			ActivateField(&quot;Previous Text Value&quot;);
			SetSearchExpr(&quot;[Object Id]=&apos;&quot;+strOrderItemId+&quot;&apos; AND [Name]=&apos;ICCI&apos;&quot;);
			ExecuteQuery(ForwardOnly);
	   		if(FirstRecord ())
	   		{
				if(GetFieldValue(&quot;Text Value&quot;)!=GetFieldValue(&quot;Previous Text Value&quot;))
				{
					strMSG = &quot;OK&quot;;
				}
			}
		}
		return strMSG;
	}
	catch(e)
	{
		return &quot;KO&quot;;
	}
	finally{
		bcOrderItemXA	= null;
		oBO				= null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="04/22/2015 15:16:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckIMEIRelease"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckIMEIRelease(Inputs, Outputs)
{
	try
	{
		var OrderId = Inputs.GetProperty(&quot;Order Header Id&quot;);
		var sRootItemId = Inputs.GetProperty(&quot;Root Id&quot;);
		
		var OrderEntryBO : BusObject	= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderLineItems : BusComp	= OrderEntryBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var ActionDel = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var strHandset = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;HANDSET&quot;);
		var actioncd = &quot;&quot;;
		var strPType = &quot;&quot;;
		var ItemId = &quot;&quot;;
		
		var sSearchExpr = &quot;[Order Header Id] = &apos;&quot;+OrderId+&quot;&apos; AND [Root Order Item Id] = &apos;&quot;+sRootItemId+&quot;&apos; AND [VF Product Type] = &apos;&quot;+strHandset+&quot;&apos;&quot;;
		var bsOrderPort : Service= TheApplication().GetService (&quot;ACS Order Portal&quot;);
		var InputIMEI :PropertySet= TheApplication().NewPropertySet();
		var OutputIMEI:PropertySet= TheApplication().NewPropertySet();
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		
		if(sRootItemId != &quot;&quot;)
		{
			with(OrderLineItems)
			{
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;VF Product Type&quot;);
				ActivateField(&quot;Action Code&quot;);
				SetSearchExpr(sSearchExpr);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())				
				{
					strPType = GetFieldValue(&quot;VF Product Type&quot;);
					actioncd = GetFieldValue(&quot;Action Code&quot;);
					ItemId = GetFieldValue(&quot;Id&quot;);
					if(strPType == strHandset &amp;&amp; actioncd == ActionDel)
					{
						InputIMEI.SetProperty(&quot;RowId&quot;,ItemId); 
						InputIMEI.SetProperty(&quot;OrderHeader&quot;, OrderId);
						InputIMEI.SetProperty(&quot;Scenario&quot;, &quot;DeleteHandsets&quot;); //TLG-5119
						bsOrderPort.InvokeMethod(&quot;ReleaseIMEIeconf&quot;, InputIMEI, OutputIMEI);
					}
				}
			}
		}
		return(CancelOperation);
	}
	finally
	{
		OrderLineItems = null;
		OrderEntryBO = null;
		bsOrderPort = null;
		InputIMEI = null;
		OutputIMEI = null;
		inProp 	= null;
		outProp = null;
		BS 		= null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="12/24/2013 14:07:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrder (Inputs, Outputs)
{
	/************************************************************************************************
		Name			: Sudhir Goyal
		Date			: 30-07-07
		Description		: To check the Order Reason field is not blank for Terminate/Suspend/Resume
						  Order.
	*************************************************************************************************/
	try
	{		
		var	strOrderId			= Inputs.GetProperty(&quot;OrderId&quot;);
		var boOrder				: BusObject =  TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var bcOrder				: BusComp =  boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);		
		var booOrderItemExists;		
		var strOrderSrcspec = &quot;[Id] = &apos;&quot;+strOrderId+&quot;&apos;&quot;;
		
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15		
		bcOrder.ActivateField(&quot;Id&quot;);
		bcOrder.ActivateField(&quot;Order Type&quot;);
		bcOrder.ActivateField(&quot;Order Sub Type&quot;);
		bcOrder.ActivateField(&quot;Order Reason&quot;);				
		bcOrder.SetSearchExpr(strOrderSrcspec);
		bcOrder.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
		
		booOrderItemExists = bcOrder.FirstRecord();
		
		if (booOrderItemExists)
		{				
			var strOrderType	= bcOrder.GetFieldValue (&quot;Order Type&quot;);
			var strOrderSubType	= bcOrder.GetFieldValue (&quot;Order Sub Type&quot;);							
			var strOrderReason	= bcOrder.GetFieldValue (&quot;Order Reason&quot;);	
							
			if (strOrderType == &quot;Disconnect&quot; || strOrderSubType == &quot;Suspend Order&quot; || strOrderSubType == &quot;Resume Order&quot;)
			{
				if (strOrderReason == &quot;&quot;)
				{
					Outputs.SetProperty (&quot;ReasonFlg&quot;, &quot;Y&quot;);
					Outputs.SetProperty (&quot;StatusCode&quot;, &quot;0&quot;);
					Outputs.SetProperty (&quot;ErrCode&quot;, &quot;0&quot;);
					Outputs.SetProperty (&quot;ErrMsg&quot;, &quot;&quot;);
				}
				else
				{
					Outputs.SetProperty (&quot;ReasonFlg&quot;, &quot;N&quot;);
					Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
					Outputs.SetProperty (&quot;ErrCode&quot;, &quot;1&quot;);
					Outputs.SetProperty (&quot;ErrMsg&quot;, &quot;&quot;);
				}							
			}
			else
			{
				Outputs.SetProperty (&quot;ReasonFlg&quot;, &quot;N&quot;);
				Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
				Outputs.SetProperty (&quot;ErrCode&quot;, &quot;1&quot;);
				Outputs.SetProperty (&quot;ErrMsg&quot;, &quot;&quot;);			
			}
		}
	}
	catch (e)
	{		
		Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrMsg&quot;, &quot;&quot;);
	}
	finally 
	{	
		bcOrder         = null;
		boOrder         = null;
		inProp      = null;
		outProp      = null;
		BS      = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DisconnectMNPOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*********************************************************************************************************************
History: FCABRAL-02/02/2015, 1.Adding Product Consumer, PartNUM = 70000 and filter Root Item to Simplify (CBU Project)
							 2.Changed The BO: Order Entry to Order Entry (Sales) (CBU Project)
							 3.New Order Creation by OMS Frame Workflow (CBU Project)
							 4.New Order Submission by OMS Frame Method(CBU Project)
							 5.Field Order Reason was obsolete It was changed to Root Line Item TELCO Action Reason
**********************************************************************************************************************/
function DisconnectMNPOrder (Inputs, Outputs)
{
	try
	{
		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;,&quot;Y&quot;);
		var strDONOROPERATORLOV 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;DONOROPERATOR&quot;);
		var strRECIPIENTPERATORLOV  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_ICCB_ATTRIB&quot;,&quot;RECIPIENT&quot;);

		var strOrderId          	= &quot;&quot;;
		var strAssetId          	= Inputs.GetProperty (&quot;AssetId&quot;);
		var strMSISDN           	= Inputs.GetProperty (&quot;MSISDN&quot;);
		var strReason	        	= Inputs.GetProperty (&quot;Reason&quot;);
		var strPortingDateTime  	= Inputs.GetProperty (&quot;PortingDateTime&quot;);
		var strDonorOperator	 	= Inputs.GetProperty (&quot;DonorOperator&quot;);
		var strRecipientOperator 	= Inputs.GetProperty (&quot;RecipientOperator&quot;);
		var strPortId				= Inputs.GetProperty (&quot;PortID&quot;);
		var strReferenceNumber 		= Inputs.GetProperty (&quot;ReferenceNumber&quot;);
		var strVFTRMetropolisSRDate	= Inputs.GetProperty (&quot;X_VFTR_METROPOLIS_SR_DATE&quot;);
		//r1.3 added sub type for MNP out disconnection Order	
		var strMNPSubType			= TheApplication ().InvokeMethod (&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;126&quot;);
		var strEventType			= &quot;&quot;;
		
		var bsGenOperCBU : Service = TheApplication ().GetService (&quot;VF General Operations&quot;);
		var bsGeneralOperations : Service = TheApplication ().GetService (&quot;ACS General Operations&quot;);
		var psMETROin: PropertySet = TheApplication ().NewPropertySet();
		var psMETROout: PropertySet = TheApplication ().NewPropertySet();
		var psInputs :PropertySet = TheApplication ().NewPropertySet ();
		var psOutputs :PropertySet = TheApplication ().NewPropertySet ();
		var psCXInputs :PropertySet = TheApplication ().NewPropertySet ();
		var psCXOutputs :PropertySet = TheApplication ().NewPropertySet ();
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var inPropOM  :PropertySet	= TheApplication().NewPropertySet();
		var outPropOM :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var BS_OM	:Service		= TheApplication().GetService(&quot;ACS Order Management&quot;);
		var Active 	= TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var Suspended = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);
		
		var bsWPRAsync :Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psWFInput :PropertySet = TheApplication().NewPropertySet();
		var psWFOutput :PropertySet = TheApplication().NewPropertySet();		
		var strOrderRootId		= &quot;&quot;;
				
		var strAssetSearchExpr1  = &quot;[Serial Number] = &apos;&quot;+strMSISDN+&quot;&apos; AND ([Product Part Number] = &apos;1000&apos; OR [Product Part Number] = &apos;70000&apos;) AND ([Status] = &apos;&quot;+Active+&quot;&apos; OR [Status] = &apos;&quot;+Suspended+&quot;&apos;)&quot;; // jmarques VFTRCBU-33297
		var boAsset              : BusObject = TheApplication ().GetBusObject (&quot;Asset Management&quot;);
		var bcAsset              : BusComp = boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var strBillingAccountId;
		
		var psInputsReason :PropertySet;
        var psOutputsReason :PropertySet;
        var VFOrderBS :Service;
		bcAsset.ClearToQuery ();
		bcAsset.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
		bcAsset.ActivateField (&quot;Serial Number&quot;);
		bcAsset.ActivateField (&quot;Status&quot;);
		bcAsset.ActivateField (&quot;Billing Account Id&quot;);
		bcAsset.ActivateField (&quot;Integration Id&quot;);
		// Begin: Scripting 15 null check Added 11may2012 Udbhav IDC
		inProp.SetProperty(&quot;Id&quot;,strMSISDN);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End
		bcAsset.SetSearchExpr (strAssetSearchExpr1);
		bcAsset.ExecuteQuery (ForwardOnly);
		
		if (bcAsset.FirstRecord ())
		{
			strAssetId           = bcAsset.GetFieldValue (&quot;Id&quot;);
		    strBillingAccountId  = bcAsset.GetFieldValue (&quot;Billing Account Id&quot;);
		}
		else
		{
			TheApplication().RaiseErrorText (&quot;Please check the Phone Number.&quot;);
		}
		
		//psInputs.SetProperty (&quot;Event Type&quot;, &quot;126&quot;); TLGA-2175
		// *Old 3*
		///psInputs.SetProperty (&quot;AssetId&quot;, strAssetId);
		///psInputs.SetProperty (&quot;Method&quot;, &quot;eSalesDisconnectProdSvc&quot;);
		///bsGeneralOperations.InvokeMethod (&quot;CreateModifyOrder&quot;, psInputs, psOutputs);
		///strOrderId = psOutputs.GetProperty (&quot;OrderId&quot;);
		// *Old 3*
		
		// New 3
			//psWFInput.SetProperty(&quot;Asset Action&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_ACTION&quot;, &quot;Disconnect&quot;));
			
		inPropOM.SetProperty(&quot;AssetIntegrationId&quot;, bcAsset.GetFieldValue (&quot;Integration Id&quot;));
		BS_OM.InvokeMethod(&quot;ResetAssetOrders&quot;,inPropOM, outPropOM);
		var Result = outPropOM.GetProperty(&quot;Result&quot;);
		
		if (Result != &quot;KO&quot;) 
		{	
			psWFInput.SetProperty(&quot;Asset Action&quot;, &quot;Deleted&quot;);			
			psWFInput.SetProperty(&quot;Asset Action Type&quot;, &quot;126&quot;);
			psWFInput.SetProperty(&quot;Asset Integration Id&quot;, bcAsset.GetFieldValue (&quot;Integration Id&quot;));
			psWFInput.SetProperty(&quot;Object Id&quot;, bcAsset.GetFieldValue (&quot;Owner Account Id&quot;));
			psWFInput.SetProperty(&quot;Reuse Active Order&quot;, &quot;N&quot;);			
			psWFInput.SetProperty(&quot;SkipGUINavigation&quot;, &quot;Y&quot;);						
			psWFInput.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Process Account Root Asset Action&quot;);
			bsWPRAsync.InvokeMethod(&quot;RunProcess&quot;, psWFInput, psWFOutput);
			strOrderId = psWFOutput.GetProperty(&quot;Order Id&quot;);
			strOrderRootId = psWFOutput.GetProperty(&quot;Root Item Id&quot;);
		}	
		else
		{
			TheApplication().RaiseErrorText(&quot;&quot;);
		}		
		// New 3	
		var boOrderEntry     :BusObject	= TheApplication ().GetBusObject (&quot;Order Entry (Sales)&quot;);
		var BcOrderEntry 	 :BusComp	= boOrderEntry.GetBusComp  (&quot;Order Entry - Orders&quot;);
		var bcOrderLineItems :BusComp	= boOrderEntry.GetBusComp  (&quot;Order Entry - Line Items (Simple)&quot;);
		var bcOrderItemXA    :BusComp	= boOrderEntry.GetBusComp  (&quot;Order Item XA (Simple)&quot;);

		BcOrderEntry.ClearToQuery ();
		BcOrderEntry.SetViewMode (AllView);
		BcOrderEntry.ActivateField (&quot;Order Reason&quot;);
		BcOrderEntry.ActivateField (&quot;Billing Account Id&quot;);
		BcOrderEntry.ActivateField(&quot;Port Out Date&quot;);
		/**/
		BcOrderEntry.ActivateField(&quot;Reference Number&quot;);
		BcOrderEntry.ActivateField(&quot;Transaction Id&quot;);
		BcOrderEntry.ActivateField(&quot;Port Id&quot;);
		BcOrderEntry.ActivateField(&quot;Order Type Constriant&quot;);
		/**/
		// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
			inProp = TheApplication().NewPropertySet();
			inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End 

		BcOrderEntry.SetSearchSpec (&quot;Id&quot;,strOrderId);
		BcOrderEntry.ExecuteQuery(ForwardOnly);
		var strOrderExits = BcOrderEntry.FirstRecord ();
		
		var myBS	: Service = TheApplication().GetService (&quot;ACS Sequence Generator&quot;);
 		var inputs	: PropertySet = TheApplication().NewPropertySet ();
 		var outputs	: PropertySet = TheApplication().NewPropertySet ();
 		// Call Business Service with Root Transction unique sequence
 		inputs.SetProperty (&quot;SequenceType&quot;, &quot;OrderRootTransaction&quot;);
 		myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
 		var Out		= outputs.GetProperty(&quot;Sequence&quot;);
		while (Out.length &lt; 13)
 		{
 			Out = &quot;0&quot;+Out;
 		}

		if (strOrderExits)
		{
			
			var sysdate  = &quot;&quot;;
			Clib.strftime(sysdate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
			psInputsReason = TheApplication().NewPropertySet();
            psOutputsReason = TheApplication().NewPropertySet();
            /*VFOrderBS = TheApplication().GetService(&quot;VF Orders&quot;);
            psInputsReason.SetProperty(&quot;OrderId&quot;,strOrderId);
            /*psInputsReason.SetProperty(&quot;OrderSubType&quot;,BcOrderEntry.GetFieldValue(&quot;Order Type Constriant&quot;));
            psInputsReason.SetProperty(&quot;OrderSubType&quot;, strEventType);
            psInputsReason.SetProperty(&quot;Reason&quot;,strReason);
            VFOrderBS.InvokeMethod(&quot;PickReason&quot;,psInputsReason,psOutputsReason);
            /*inserted due to problem related to dobule wtrite record*/
            BcOrderEntry.ClearToQuery ();
			BcOrderEntry.SetViewMode (AllView);
			BcOrderEntry.ActivateField (&quot;Order Reason&quot;);
			BcOrderEntry.ActivateField (&quot;Billing Account Id&quot;);
			BcOrderEntry.ActivateField(&quot;Port Out Date&quot;);
			BcOrderEntry.ActivateField(&quot;First Submit Date&quot;);
			/**/
			BcOrderEntry.ActivateField(&quot;Reference Number&quot;);
			BcOrderEntry.ActivateField(&quot;Transaction Id&quot;);
			BcOrderEntry.ActivateField(&quot;Port Id&quot;);
			/**/
			BcOrderEntry.SetSearchSpec (&quot;Id&quot;,strOrderId);//Scripting 15:null check done above
			
			bcOrderLineItems.ClearToQuery();
			bcOrderLineItems.SetViewMode (AllView);
			bcOrderLineItems.ActivateField (&quot;TELCO Action Reason&quot;);	
			bcOrderLineItems.ActivateField (&quot;TELCO Action Type LIC&quot;);
			bcOrderLineItems.ActivateField (&quot;VF Actor Status Old Calc&quot;);
			bcOrderLineItems.ActivateField (&quot;Account Market Class LIC&quot;);
			bcOrderLineItems.ActivateField (&quot;VF Logical Reason&quot;);
			bcOrderLineItems.ActivateField (&quot;VFTR Metropolis Complain Date&quot;);		
			bcOrderLineItems.SetSearchSpec (&quot;Part Number&quot;,&quot;1000 OR 70000&quot;); // script 31 :moved code up to remove child query
			//bcOrderLineItems.SetSearchSpec (&quot;Id&quot;,strOrderRootId); // Included by CBU Project to be used by OSM Frame -- JMARQUES - ROOT ID returned is not allways 70000 or 1000 -- VFTRCBU-33297
			
			bcOrderItemXA.ClearToQuery ();
			bcOrderItemXA.SetViewMode (AllView);
			bcOrderItemXA.ActivateField(&quot;Name&quot;);// script 31 :moved code up to remove child query
				
			BcOrderEntry.ExecuteQuery(ForwardOnly);
			if (BcOrderEntry.FirstRecord())
			{
				BcOrderEntry.SetFieldValue(&quot;Billing Account Id&quot;,strBillingAccountId);
				BcOrderEntry.SetFieldValue(&quot;Order Date&quot;,sysdate);
				BcOrderEntry.SetFieldValue(&quot;First Submit Date&quot;,sysdate);
				BcOrderEntry.SetFieldValue(&quot;Port Out Date&quot;,strPortingDateTime);
				BcOrderEntry.SetFieldValue(&quot;Port Id&quot;,strPortId);
				BcOrderEntry.SetFieldValue(&quot;Transaction Id&quot;, &quot;SBL&quot;+Out);
				BcOrderEntry.SetFieldValue(&quot;Reference Number&quot;,strReferenceNumber);
				TheApplication().SetProfileAttr(&quot;reasonOrderId&quot;,strOrderId);
				//*Old 5 *
				//var strMNPReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1020&quot;);
				//BcOrderEntry.SetFieldValue(&quot;Order Reason&quot;,strMNPReason);
				//*Old 5 *
				TheApplication().SetProfileAttr(&quot;reasonOrderId&quot;,&quot;&quot;);
				BcOrderEntry.WriteRecord ();

				var booRecordExists = bcOrderLineItems.FirstRecord ();
				while (booRecordExists)
				{	
					if (bcOrderLineItems.GetFieldValue(&quot;Part Number&quot;)==&quot;1000&quot;)
					{
						var booRecordExists1 = bcOrderItemXA.FirstRecord ();
						while (booRecordExists1)
						{	
							var AttrName = bcOrderItemXA.GetFieldValue(&quot;Name&quot;);	
							if (AttrName==strDONOROPERATORLOV)
							{
								bcOrderItemXA.SetFieldValue (&quot;Value&quot;,strDonorOperator);
								bcOrderItemXA.WriteRecord ();
							}	
							else if(AttrName==strRECIPIENTPERATORLOV)
							{	
								bcOrderItemXA.SetFieldValue (&quot;Value&quot;, strRecipientOperator);
								bcOrderItemXA.WriteRecord ();
							}
						 booRecordExists1 = bcOrderItemXA.NextRecord();	
					    }
					 }   
				    else
				    {
						bcOrderLineItems.SetFieldValue(&quot;VF Donor Operator&quot;,strDonorOperator);
						bcOrderLineItems.SetFieldValue(&quot;VFTRCBU Recipient Id&quot;,strRecipientOperator); 
						
						//Metropolis Validation
						psMETROin.SetProperty(&quot;MSISDN&quot;,strMSISDN);
						var MetroExist = CheckAssetMetropolis(psMETROin,psMETROout);
						
						if (MetroExist == false)
							bcOrderLineItems.SetFieldValue(&quot;VFTR Metropolis Complain Date&quot;,&quot;&quot;);
						else
							bcOrderLineItems.SetFieldValue(&quot;VFTR Metropolis Complain Date&quot;,strVFTRMetropolisSRDate);
				    }
				    //MNP WA#18
					var strSearchExp = &quot;[Condition2] = &apos;&quot;+ bcOrderLineItems.GetFieldValue(&quot;TELCO Action Type LIC&quot;) +&quot;&apos; and [Condition4] = &apos;&quot;+ bcOrderLineItems.GetFieldValue(&quot;VF Actor Status Old Calc&quot;) +&quot;&apos; and [Attrib02] = &apos;&quot;+ bcOrderLineItems.GetFieldValue(&quot;Account Market Class LIC&quot;) +&quot;&apos;&quot;
					psCXInputs. SetProperty (&quot;SearchExp&quot;, strSearchExp);
					bsGenOperCBU.InvokeMethod (&quot;GetCxParameterWithGivenExp&quot;, psCXInputs, psCXOutputs);
					var strCondition6 = psCXOutputs.GetProperty (&quot;Cons6&quot;)
				    
				    bcOrderLineItems.SetFieldValue(&quot;VF Logical Reason&quot;,strCondition6);
					
					//*New 5
					var strMNPReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1020&quot;);
					bcOrderLineItems.SetFieldValue(&quot;TELCO Action Reason&quot;,strMNPReason);					
					//*New 5
					
					booRecordExists = bcOrderLineItems.NextRecord ();
				}
			}
		    SetOrganization(strOrderId);
			
			// Old 4
			///psInputs. SetProperty (&quot;OrderId&quot;, strOrderId);
			///bsGeneralOperations.InvokeMethod (&quot;SubmitOrder&quot;, psInputs, psOutputs);
			///var strErrorMessage = psOutputs.GetProperty (&quot;ErrorMessage&quot;);
			// Old 4
			
			// New 4
			
			try
			{
				var strErrorMessage = &quot;&quot;;
				TheApplication().SetProfileAttr(&quot;TELCOSkipGUINavigation&quot;,&quot;Y&quot;);
				TheApplication().SetProfileAttr(&quot;TELCOGUISubmission&quot;,&quot;N&quot;);
				BcOrderEntry.InvokeMethod(&quot;TELCOSubmitOrder&quot;);				
			}
			catch (e)
			{
				strErrorMessage = e.toString();	  
			}
	
			// New 4
			if (strErrorMessage.length != &quot;&quot;)
			{
				Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
				Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;1&quot;);
				Outputs.SetProperty (&quot;ErrorMessage&quot;,strErrorMessage);
			}
			else
			{
				Outputs.SetProperty (&quot;StatusCode&quot;, &quot;0&quot;);
				Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;0&quot;);
				Outputs.SetProperty (&quot;ErrorMessage&quot;, &quot;&quot;);
				Outputs.SetProperty (&quot;OrderId&quot;, strOrderId);
			}
	    }
	}
	
	catch (e)
	{
		Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorMessage&quot;, e.toString());
	}
	finally
	{
		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;,&quot;N&quot;);
		
		psInputs            = null;
		psOutputs           = null;
		psCXInputs            = null;
		psCXOutputs           = null;
		bsGeneralOperations = null;
		bsGenOperCBU    = null;
		inProp 			= null;
		outProp 		= null;
		inPropOM 		= null;
		outPropOM   	= null;
		BS 				= null;
		BS_OM			= null;
		BcOrderEntry	= null;
		bcOrderItemXA	= null;
		bcOrderLineItems= null;
		boOrderEntry	= null;
		myBS			= null;
		inputs			= null;
		outputs			= null;
		psInputsReason	= null;
		psOutputsReason	= null;
		VFOrderBS		= null;
		bcAsset			= null;
		boAsset			= null;
	    psMETROin       = null;
	    psMETROout      = null;
		psWFInput		= null;
		psWFOutput		= null;
		bsWPRAsync		= null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="09/12/2016 17:38:19"
			   UPDATED_BY="JMARQUES"
			   CREATED="04/22/2010 09:10:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DisconnectOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DisconnectOrder (Inputs, Outputs)
{
	try
	{
		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;,&quot;Y&quot;);
		
		var strOrderId          	= &quot;&quot;;
		var strAssetId          	= Inputs.GetProperty (&quot;AssetId&quot;);
		var strMSISDN           	= Inputs.GetProperty (&quot;MSISDN&quot;);
		var strReason	        	= Inputs.GetProperty (&quot;Reason&quot;);
		var strPortingDateTime  	= Inputs.GetProperty (&quot;PortingDateTime&quot;);
		var strDonorOperator	 	= Inputs.GetProperty (&quot;RecipientOperator&quot;);
		var strRecipientOperator 	= Inputs.GetProperty (&quot;DonorOperator&quot;);
		var sysdate  = &quot;&quot;;
		Clib.strftime(sysdate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));

		var bsGeneralOperations : Service = TheApplication ().GetService (&quot;ACS General Operations&quot;);
		var psInputs : PropertySet = TheApplication ().NewPropertySet ();
		var psOutputs : PropertySet= TheApplication ().NewPropertySet ();		
		var Active = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var Suspended = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);	
		var strAssetSearchExpr1  = &quot;[Serial Number] = &apos;&quot;+strMSISDN+&quot;&apos; AND ([Status] = &apos;&quot;+Active+&quot;&apos; OR [Status] = &apos;&quot;+Suspended+&quot;&apos;)&quot;;
		var boAsset              :BusObject	= TheApplication ().GetBusObject (&quot;Asset Management&quot;);
		var bcAsset              :BusComp	= boAsset.GetBusComp (&quot;Asset Mgmt - Asset&quot;);
		var strBillingAccountId;
		
		bcAsset.ClearToQuery ();
		bcAsset.SetViewMode (AllView);//Mamta-Updated as per Oracle Review
		bcAsset.ActivateField (&quot;Serial Number&quot;);
		bcAsset.ActivateField (&quot;Status&quot;);
		bcAsset.ActivateField (&quot;Billing Account Id&quot;);
		// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
			var inProp  :PropertySet	= TheApplication().NewPropertySet();
			var outProp :PropertySet	= TheApplication().NewPropertySet();
			var BS 	    :Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strMSISDN&quot;,strMSISDN);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End 

		bcAsset.SetSearchExpr (strAssetSearchExpr1);
		bcAsset.ExecuteQuery (ForwardOnly);//Review Parent-Child Query: The query is only for one BC in BO,query cannot be removed 11may2012 Udbhav IDC VFTK
		
		if (bcAsset.FirstRecord ())
		{
			strAssetId           = bcAsset.GetFieldValue (&quot;Id&quot;);
		    strBillingAccountId  = bcAsset.GetFieldValue (&quot;Billing Account Id&quot;);
		}
		else
		{
			TheApplication().RaiseErrorText (&quot;Please check the Phone Number.&quot;);
		}
			
		psInputs. SetProperty (&quot;AssetId&quot;, strAssetId);
		psInputs. SetProperty (&quot;Method&quot;, &quot;eSalesDisconnectProdSvc&quot;);
		
		bsGeneralOperations.InvokeMethod (&quot;CreateModifyOrder&quot;, psInputs, psOutputs);
		strOrderId = psOutputs.GetProperty (&quot;OrderId&quot;);
			
		var BoOrderEntry : BusObject = TheApplication ().GetBusObject (&quot;Order Entry&quot;);
		var BcOrderEntry : BusComp = BoOrderEntry.GetBusComp (&quot;Order Entry - Orders&quot;);
		BcOrderEntry.ClearToQuery ();
		BcOrderEntry.SetViewMode(AllView);
		BcOrderEntry.ActivateField (&quot;Order Reason&quot;);
		BcOrderEntry.ActivateField (&quot;Billing Account Id&quot;);
		BcOrderEntry.ActivateField(&quot;Port Out Date&quot;);
		// Begin: Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
			inProp  = TheApplication().NewPropertySet();
			inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End 
		BcOrderEntry.SetSearchSpec (&quot;Id&quot;,strOrderId);
		BcOrderEntry.ExecuteQuery(ForwardOnly);//Review Parent-Child Query: The query is only for one BC in BO,query cannot be removed 11may2012 Udbhav IDC VFTK
		var strOrderExits = BcOrderEntry.FirstRecord ();

		if (strOrderExits)
		{
			BcOrderEntry.SetFieldValue(&quot;Order Reason&quot;,strReason);
			BcOrderEntry.SetFieldValue(&quot;Billing Account Id&quot;,strBillingAccountId);
			BcOrderEntry.SetFieldValue(&quot;Port Out Date&quot;,strPortingDateTime);
			BcOrderEntry.SetFieldValue(&quot;First Submit Date&quot;,sysdate);
			BcOrderEntry.SetFieldValue(&quot;Order Date&quot;,sysdate);
			BcOrderEntry.WriteRecord ();
		}
	
		//Order Submission
		psInputs. SetProperty (&quot;OrderId&quot;, strOrderId);
		
		bsGeneralOperations.InvokeMethod (&quot;SubmitOrder&quot;, psInputs, psOutputs);
		var strErrorMessage = psOutputs.GetProperty (&quot;ErrorMessage&quot;);
		if (strErrorMessage.length != &quot;&quot;)
		{
			Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
			Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;1&quot;);
			Outputs.SetProperty (&quot;ErrorMessage&quot;,strErrorMessage);
		}
		else
		{
			Outputs.SetProperty (&quot;StatusCode&quot;, &quot;0&quot;);
			Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;0&quot;);
			Outputs.SetProperty (&quot;ErrorMessage&quot;, &quot;&quot;);
			Outputs.SetProperty (&quot;OrderId&quot;, strOrderId);
		}
	}
	catch (e)
	{
		Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorMessage&quot;, e.toString());
	}
	finally
	{		
		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;,&quot;N&quot;);
		psInputs            = null;
		psOutputs           = null;
		bsGeneralOperations = null;
		inProp 		= null;
		outProp 	= null;
		BS 			= null;
		bcAsset 	= null;
		boAsset 	= null;
		BcOrderEntry = null;
		BoOrderEntry = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetParameters"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetParameters (InputParameter , OutputParameter)
{
	try
	{		  	
	  	var strParameterSrcExpr = &quot;[Type] = &apos;VFTK_ICCB_CONNECTION&apos; AND [Name] = &apos;DNS&apos;&quot;;
	  	var boHPOrderEntry : BusObject = TheApplication().GetBusObject (&quot;HP Order Entry&quot;);
		var bcLOV : BusComp = boHPOrderEntry.GetBusComp (&quot;List Of Values&quot;);
		var dns;
		
		bcLOV.ClearToQuery ();
		bcLOV.SetViewMode (AllView);
		bcLOV.ActivateField (&quot;Type&quot;);
		bcLOV.ActivateField (&quot;Name&quot;);
		bcLOV.ActivateField (&quot;Value&quot;);
		bcLOV.ActivateField (&quot;Description&quot;);
		bcLOV.SetSearchExpr (strParameterSrcExpr);
		bcLOV.ExecuteQuery(ForwardOnly);
		
		if (bcLOV.FirstRecord ())
		{
			dns = bcLOV.GetFieldValue (&quot;Description&quot;);
		}
		OutputParameter.SetProperty (&quot;DNS&quot;, dns);
	}
	finally
	{
		bcLOV = null;
		boHPOrderEntry = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="11/21/2013 07:59:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="MC ACS - Newly Created for Generating the Sequence."
			   INACTIVE="N"
			   NAME="GetRootTransaction"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetRootTransaction(Inputs, Outputs)
{
/*******************************************************************************************************
* Author          : Mamta Chandak
  Date            : 17 May 2010
  Description     : Generate Sequence using ACS Sequence Generator Business Service Get Sequence Method to
  					populate Root Transction Id
 Updated		:
 Name		: 
 Date		: 
 Description : 
*******************************************************************************************************/  							
	try
	{
		var myBS	: Service = TheApplication().GetService (&quot;ACS Sequence Generator&quot;);
		var inputs	: PropertySet = TheApplication().NewPropertySet ();
		var outputs	: PropertySet = TheApplication().NewPropertySet ();
		// Call Business Service with Root Transction unique sequence
		inputs.SetProperty (&quot;SequenceType&quot;, &quot;OrderRootTransaction&quot;);
		myBS.InvokeMethod (&quot;GetSequence&quot;, inputs, outputs);
		var Out		= outputs.GetProperty(&quot;Sequence&quot;);
		while (Out.length &lt; 13)
		{
			Out = &quot;0&quot;+Out;
 		}
 		Outputs.SetProperty(&quot;Output&quot;, &quot;SBL&quot;+Out);	 
	}//End of try
	finally
	{
		 myBS=null;
		 inputs=null;
		 outputs=null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="05/19/2010 15:57:39"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InvokeReleaseMsisdn"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// CR034 - MNP Reject SimCard
function InvokeReleaseMsisdn(sOrderId,sBulk,sSubType)
{
	try
	{
		var oBoOrd 	: BusObject		= TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
		var oBcOLI 	: BusComp		= oBoOrd.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var svc	   	: Service 		= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psInput	: PropertySet 	= TheApplication().NewPropertySet();
		var psOutput: PropertySet 	= TheApplication().NewPropertySet();
		var sModifyIMSI 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);
		var sMNPPortIn      = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;106&quot;);
		var sMNPPortInCanc  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;112&quot;); 
		var sExpr 					= &quot;&quot;;
		var sOliId					= &quot;&quot;;	
		var integId					= &quot;&quot;;
		var strICCID				= &quot;&quot;;
		var strMSISDN				= &quot;&quot;;
		if(sOrderId != null &amp;&amp; sOrderId != &quot;&quot;)
		{
			with(oBcOLI)
			{
				var sExpr = &quot;[Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos; AND [Id] = [Root Order Item Id]&quot;;
				ClearToQuery ();
				ActivateField (&quot;MSISDN&quot;);
				ActivateField (&quot;ICCID&quot;);
				ActivateField(&quot;Asset Integration Id&quot;);
				SetViewMode(AllView);
				SetSearchExpr(sExpr);
				ExecuteQuery(ForwardOnly);
				var IsRec = FirstRecord();
			   	while(IsRec)
			   	{   integId = oBcOLI.GetFieldValue(&quot;Asset Integration Id&quot;);
			   		strMSISDN = GetFieldValue(&quot;MSISDN&quot;);
		   			if (sBulk == &quot;Y&quot;)
						psInput.SetProperty(&quot;pi_msisdn&quot;,strMSISDN);
			   		sOliId = GetFieldValue(&quot;Id&quot;);
			   		strICCID = GetFieldValue(&quot;ICCID&quot;);
			   		psInput.SetProperty(&quot;Order Id&quot;,sOrderId);
			   		psInput.SetProperty(&quot;Object Id&quot;,sOliId);
			   		psInput.SetProperty(&quot;Integration Id&quot;,integId);
			   		psInput.SetProperty(&quot;ProcessName&quot;, &quot;VF Check Attribute Values WF&quot;);
			   		psInput.SetProperty(&quot;Bulk&quot;,sBulk);//PROD00031094
			   		
		   			switch (sSubType)
							{
								case sModifyIMSI:
						   				psInput.SetProperty(&quot;pi_icci&quot;, strICCID);
								   		psInput.SetProperty(&quot;pi_msisdn&quot;,&quot;&quot;);
								   		psInput.SetProperty(&quot;Bulk&quot;,&quot;N&quot;);
								   		psInput.SetProperty(&quot;AttrName&quot;,&quot;ICCI&quot;);	 		
						   				svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
						   				UnLockICCID(strICCID, integId);
						   		break;
						   		
						   		case sMNPPortIn:
						   		case sMNPPortInCanc:
						   				psInput.SetProperty(&quot;pi_icci&quot;, &quot;&quot;);
						   				psInput.SetProperty(&quot;pi_msisdn&quot;,strMSISDN);
						   				psInput.SetProperty(&quot;AttrName&quot;,&quot;MSISDN&quot;);
								   		svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
								   		psInput.SetProperty(&quot;pi_icci&quot;, strICCID);
								   		psInput.SetProperty(&quot;pi_msisdn&quot;,&quot;&quot;);
								   		psInput.SetProperty(&quot;Bulk&quot;,&quot;N&quot;);
								   		psInput.SetProperty(&quot;AttrName&quot;,&quot;ICCI&quot;);   		
						   				svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
						   				UnLockICCID(strICCID, integId);
						   		break;		
						   		
						   		default:
						   				psInput.SetProperty(&quot;pi_icci&quot;, &quot;&quot;);
						   				psInput.SetProperty(&quot;pi_msisdn&quot;,strMSISDN);
								   		psInput.SetProperty(&quot;AttrName&quot;,&quot;MSISDN&quot;);
								   		svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
										psInput.SetProperty(&quot;pi_icci&quot;, strICCID);
								   		psInput.SetProperty(&quot;pi_msisdn&quot;,&quot;&quot;);
								   		psInput.SetProperty(&quot;Bulk&quot;,&quot;N&quot;);
								   		psInput.SetProperty(&quot;AttrName&quot;,&quot;ICCI&quot;);		
						   				svc.InvokeMethod(&quot;RunProcess&quot;,psInput,psOutput);
						   				UnLockICCID(strICCID, integId);
							   	break;
							}
			   		
			   		
					IsRec = NextRecord();
			   	}
			}
		}
	}

	finally
	{
		svc		= null;
		psInput = null;
		psOutput= null;
		oBcOLI 	= null;
		oBoOrd 	= null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="12/27/2012 19:36:28"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageIMEI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageIMEI(InputIMEI, OutputIMEI)
{	
	try{
		//var strWS : Service = TheApplication().GetService(&quot;ManageIMEIPortType&quot;); - inactived by WA#22 MPONTE 2014.07.28
		var strWS			: Service = TheApplication().GetService(&quot;EBUAdapterICCBServicesPortType&quot;);
		var OrderBO 		: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemXABC	: BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);	
		var psArg_in 		: PropertySet = TheApplication().NewPropertySet();
		var psArg_out 		: PropertySet = TheApplication().NewPropertySet();
		var psInputs 		: PropertySet = TheApplication().NewPropertySet();
		var psOutputs 		: PropertySet = TheApplication().NewPropertySet();
        var IMEI			= InputIMEI.GetProperty(&quot;IMEI&quot;);
        var OldIMEI			= InputIMEI.GetProperty(&quot;OldIMEI&quot;);
        var RowId 			= InputIMEI.GetProperty(&quot;RowId&quot;);
        var TransactionId	= InputIMEI.GetProperty(&quot;TransactionId&quot;);
        var Type 			= InputIMEI.GetProperty(&quot;Type&quot;);
		var MSISDN			= InputIMEI.GetProperty(&quot;MSISDN&quot;);
		var strScenario		= InputIMEI.GetProperty(&quot;Scenario&quot;); //TLG-5119
		var strUserName 	= TheApplication ().LoginName ();
		var TimeStamp 		= new Date();
		var sysdatestring 	= ((TimeStamp.getMonth()+1)+ &quot;/&quot; + TimeStamp.getDate() + &quot;/&quot; + TimeStamp.getFullYear() +&quot; &quot;+ TimeStamp.getHours()+&quot;:&quot;+ TimeStamp.getMinutes()+&quot;:&quot;+ TimeStamp.getSeconds());
		var OrderChannel 	= &quot;SIEBEL&quot;;	
	    var CampaignCode = &quot;&quot;;
	    var SearchAttr = &quot;&quot;;
	    if (Type == &quot;IMEI&quot;)
	    {
	    	SearchAttr = &quot;[Object Id]=&apos;&quot;+RowId+&quot;&apos; AND [Name]=&apos;Campaign Code&apos;&quot;;
	    }
	    else if (Type == &quot;Adapter&quot;)
	    {
	    	SearchAttr = &quot;[Object Id]=&apos;&quot;+RowId+&quot;&apos; AND [Name]=&apos;Adapter&apos;&quot;;
	    }
	    with(OrderItemXABC)
	    {
	        SetViewMode(AllView);
			ClearToQuery();
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;RowId&quot;,RowId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			SetSearchExpr(SearchAttr);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				CampaignCode= GetFieldValue(&quot;Value&quot;);
			}
		}
		
		// Build the input with the proper hierarchy.	
		var Body 			: PropertySet = TheApplication().NewPropertySet();
		var Header 			: PropertySet = TheApplication().NewPropertySet();
		var ListOfManageIMEI: PropertySet = TheApplication().NewPropertySet();
		var ListOfHeader 	: PropertySet = TheApplication().NewPropertySet();
		var ManIMEIIn		: PropertySet = TheApplication().NewPropertySet();
		var ListOfBody		: PropertySet = TheApplication().NewPropertySet();
		
		Body.SetType(&quot;BODY&quot;);
		Header.SetType(&quot;HEADER&quot;);	
		ListOfManageIMEI.SetType(&quot;ListOfManageIMEIInput&quot;);
		ListOfHeader.SetType(&quot;ListOfHEADER&quot;);
		ListOfBody.SetType(&quot;ListOfBODY&quot;);
		psArg_in.SetType(&quot;ManageIMEIInput_1&quot;);//changed by WA#22 MPONTE 2014.07.29
		ManIMEIIn.SetType(&quot;ManageIMEIInput_1:ManageIMEIInput&quot;);//changed by WA#22 MPONTE 2014.07.29
		
		Body.SetProperty(&quot;MSISDN&quot;, MSISDN);
		Body.SetProperty(&quot;CAMPAIGN_CODE&quot;, CampaignCode);
		Body.SetProperty(&quot;IMEI_BURN&quot;, IMEI );
		Body.SetProperty(&quot;IMEI_RELEASE&quot;, OldIMEI);
		Body.SetProperty(&quot;USER_NAME&quot;, strUserName);
		
		Header.SetProperty(&quot;CHANNEL&quot;, OrderChannel);
		Header.SetProperty(&quot;TIMESTAMP&quot;, sysdatestring); 
		Header.SetProperty(&quot;TRANSACTION_ID&quot;, TransactionId);
			
		psArg_in.AddChild(ListOfHeader);
		psArg_in.AddChild(ListOfBody);
		ListOfHeader.AddChild(Header);
		ListOfBody.AddChild(Body);	
     	ListOfManageIMEI.AddChild(psArg_in);
		ManIMEIIn.AddChild(ListOfManageIMEI);
		psInputs.AddChild(ManIMEIIn);
						
		// Call the WebService
		//strWS.InvokeMethod(&quot;ManageIMEIOperation&quot;, psInputs, psOutputs); - inactived by WA#22 MPONTE 2014.07.28
		strWS.InvokeMethod(&quot;ManageIMEI&quot;, psInputs, psOutputs);	
		
		var ListOfOutput	 	= psOutputs.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
		var StatusCode			= ListOfOutput.GetProperty(&quot;STATUS_CODE&quot;);	
		var ErrorCode		 	= ListOfOutput.GetProperty(&quot;ERROR_CODE&quot;);
		var ErrorDescription 	= ListOfOutput.GetProperty(&quot;ERROR_DESCRIPTION&quot;);
		
		if (StatusCode==&quot;1&quot;)
		{	
			if (strScenario == &quot;DeleteHandsets&quot;) //TLG-5119
				return (ContinueOperation);
			else
			{
				var msgtext = &quot;%1&quot; + &quot;\n\r&quot; + ErrorDescription;
				TheApplication().RaiseErrorText(msgtext, ErrorCode);
			}
		}				
	}
	finally
	{	
		strWS 			= null;
		psArg_in 		= null;
		psArg_out 		= null;
		psInputs 		= null;
		psOutputs 		= null;
		OrderItemXABC	= null;	
		OrderBO 		= null;
		Header 			= null;
		ListOfManageIMEI= null;
		ManIMEIIn		= null;
		Body			= null;
		ListOfHeader	= null;
		ListOfBody		= null;
		ListOfOutput	= null;
		inProp			= null; 
		outProp			= null; 
		BS				= null; 
	}	
}"
			   SEQUENCE="12"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="07/22/2011 12:43:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ModifyOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ModifyOrder (Inputs, Outputs)
{
	try
	{
		// ACS AD 11-Nov-06: Added to stop the AMES code from running when the order is 
		// Created from a webservice.
		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;,&quot;Y&quot;);
		//Call ASI BS &apos;ACS Submit Order - Portal&apos; with method &apos;Insert&apos;
		Inputs.SetProperty(&quot;StatusObject&quot;, &quot;Y&quot;); //&quot;0-P3F0&quot; is equal to yes,in order to tell ASI to return status object
		// ACS AD 13-Nov-06: Start section specific to modify order
		// ACS AD 13-Nov-06: End section specific to modify order
		//Update the Order created earlier
		var ASIIn  :PropertySet= TheApplication().NewPropertySet();
		var ASIOut :PropertySet= TheApplication().NewPropertySet();
				
		Inputs.SetProperty(&quot;SerialNumber&quot;,&quot;99000&quot;);
		SerializeIds (Inputs, ASIIn);
		
    	var StatusObject :PropertySet= TheApplication().NewPropertySet();
    	var BService     :Service	 = TheApplication().GetService(&quot;ACS Order Portal ASI&quot;);

    	BService.InvokeMethod (&quot;Update&quot;,ASIIn,ASIOut);

    	//Get &apos;OrderID&apos; of the new order. ID is returned by &apos;Insert&apos; method
    	//as Status Object (Hierarchy).
    	StatusObject = ASIOut.GetChild(0).GetChild(0).GetChild(0);
    	var OrderId = StatusObject.GetProperty(&quot;Id&quot;);
    	
   	 	// Review Input validation: Scripting 15 null check Added 11may2012 Udbhav IDC
		/*** Begin ***/ 
		var inProp 	:PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;OrderId&quot;,OrderId); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		/*** End ***/ 
    	
    	//MV - 18/9/2006 Added to fix the Pricing
    	//Query for order and corresponding LI and call reprice signal to reprice Line Items
    	
    	//Initialize the BO and BC
    	var OrderBO :BusObject	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
    	var OrderBC :BusComp	= OrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var OrderItemBC :BusComp= OrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		
		//Query for Order
		OrderBC.ClearToQuery();
		OrderBC.SetViewMode(AllView);
		OrderBC.SetSearchSpec (&quot;Id&quot;, OrderId);
		
		OrderItemBC.ClearToQuery();
		OrderItemBC.SetViewMode(AllView);//child clear to query moved up to remove child query
		
    	OrderBC.ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
		
		var ii = OrderBC.FirstRecord();
		
		if (ii != 0)
		{	
			//Search for Order Items
			var i = OrderItemBC.FirstRecord();
			//If Item exists, call reprice signal
			if (i != 0)
    		{
				OrderItemBC.InvokeMethod(&quot;CalculatePriceAll&quot;);
			}
    	}
    	 	
    	//Call the &apos;XWF SIS OM Submit Order Process&apos; WF for Order Submit with
    	//&apos;OrderID&apos; as input parameter
    	var WFIn  :PropertySet= TheApplication().NewPropertySet();
		var WFOut :PropertySet= TheApplication().NewPropertySet();
		var svc   :Service    = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	
		WFIn.SetProperty(&quot;ProcessName&quot;, &quot;XWF SIS OM Submit Order Process&quot;);
		WFIn.SetProperty(&quot;Object Id&quot;, OrderId);
		WFIn.SetProperty(&quot;Popup Message&quot;, &quot;N&quot;);
	
		svc.InvokeMethod(&quot;RunProcess&quot;,WFIn,WFOut);
		
		//Populate the output values
		Outputs.SetProperty(&quot;ErrMsg&quot;, &quot;&quot;);
		Outputs.SetProperty(&quot;ErrCode&quot;, &quot;0&quot;);
		Outputs.SetProperty(&quot;OrderId&quot;, OrderId);
		Outputs.AddChild(ASIOut.GetChild(0));	
	}
	catch (e)
	{
		//If error occurs -&gt; return error message
		var Text = e.errText;
		var Code = e.errCode;
		Outputs.SetProperty(&quot;ErrMsg&quot;, Text);
		Outputs.SetProperty(&quot;ErrCode&quot;, Code);
		Outputs.SetProperty(&quot;OrderId&quot;, OrderId);
		Outputs.AddChild(Inputs.GetChild(0));
	}
	finally
	{
		inProp 	= null;
		outProp = null;
		BS 		= null;
		ASIIn 		= null;
		ASIOut 		= null;
		StatusObject= null;
		BService 	= null;
		OrderItemBC = null;
		OrderBC 	= null;
		OrderBO 	= null;
		WFIn 		= null;
		WFOut 		= null;
		svc 		= null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ReleaseIMEIeconf"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ReleaseIMEIeconf(InputIMEI, OutputIMEI) //TLG-4593
{

try{
		

      			var RowId 			= InputIMEI.GetProperty(&quot;RowId&quot;);
      			var OrderHeader		= InputIMEI.GetProperty(&quot;OrderHeader&quot;);
      			var oBO					: BusObject =  TheApplication().GetBusObject(&quot;VF X HP Order Entry&quot;);
				var bcOrderItem			: BusComp =  oBO.GetBusComp(&quot;HP Order Entry - Line Items&quot;);
				var boOrder				: BusObject =  TheApplication().GetBusObject(&quot;Order Entry&quot;);
				var bcOrder				: BusComp =  boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
			//	var bcOrderItemXA       : BusComp =  oBO.GetBusComp(&quot;Order Item XA (Simple)&quot;);
				var strMSISDN				=&quot;&quot;;	
				var strSearchExpr           =&quot;&quot;;
				var OldIMEI 				=&quot;&quot;;	
				var strIMEISearch   		= &quot; [Order Header Id] = &apos;&quot;+OrderHeader+&quot;&apos; AND ([VF IMEI] is not null )&quot;;
				var TransactionId 			= &quot;&quot;;
						with(bcOrderItem){
							SetViewMode(AllView);
							ClearToQuery();
							ActivateField(&quot;VF IMEI&quot;);
							ActivateField(&quot;Parent Order Transaction Id&quot;);
							ActivateField(&quot;VF Adapter Number&quot;);
							ActivateField(&quot;Order Header Id&quot;);
							ActivateField(&quot;Id&quot;);
							SetSearchExpr (strIMEISearch);//null check done above					    
								
							ExecuteQuery(ForwardOnly); 
							
							var strIMEIFind = FirstRecord (); 
							while(strIMEIFind)
							{
								var strattrib = &quot;&quot;;
								var strOrderItemId =  GetFieldValue(&quot;Id&quot;);
								if (GetFieldValue(&quot;VF IMEI&quot;) !=&quot;&quot;){
									OldIMEI = GetFieldValue(&quot;VF IMEI&quot;);
									InputIMEI.SetProperty(&quot;Type&quot;,&quot;IMEI&quot;);
								}
														    	
							//	RowId = GetFieldValue(&quot;Id&quot;);
								TransactionId = GetFieldValue(&quot;Parent Order Transaction Id&quot;);
								InputIMEI.SetProperty(&quot;IMEI&quot;,&quot;&quot;);
								InputIMEI.SetProperty(&quot;OldIMEI&quot;,OldIMEI);
								InputIMEI.SetProperty(&quot;RowId&quot;,RowId);
								InputIMEI.SetProperty(&quot;MSISDN&quot;,strMSISDN);
								InputIMEI.SetProperty(&quot;TransactionId&quot;,TransactionId);
								ManageIMEI(InputIMEI, OutputIMEI); 
								strIMEIFind = NextRecord();
							}
						}	   			  
					
}
	finally
	{	

		oBO					= null;	
		bcOrderItem			= null;
		boOrder				= null;
		bcOrder				= null;
	//	bcOrderItemXA		= null;
		
	}	
}"
			   SEQUENCE="14"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="11/19/2013 10:31:09"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RetrieveOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveOrder (Inputs, Outputs)
{
	try
	{	
		// Marek Vala 08/04/2005
		// Retrieve Order method is published by Inbound Web service 
		// and called by Customer Portal application to retrieve 
		// the Order data from Siebel to Customer portal.Data are retrieved 
		// calling the ASI with &apos;QueryByExample&apos; method.
		//Call ASI BS &apos;ACS Order Portal ASI&apos; with method &apos;QueryByExample&apos;
		var BService : Service = TheApplication().GetService(&quot;ACS Order Portal ASI&quot;);
    	
    	BService.InvokeMethod (&quot;QueryByExample&quot;,Inputs,Outputs);
    	
    	//set error msg and code to null, becuse they&apos;re mandatory
    	Outputs.SetProperty(&quot;ErrMsg&quot;, &quot;&quot;);
		Outputs.SetProperty(&quot;ErrCode&quot;, &quot;0&quot;);	
	}
	catch (e)
	{
		//If error occurs -&gt; return error message
		var Text = e.errText;
		var Code = e.errCode;
		Outputs.SetProperty(&quot;ErrMsg&quot;, Text);
		Outputs.SetProperty(&quot;ErrCode&quot;, Code);
		//Srinivas 01-Jan-2006
		Outputs.AddChild(Inputs.GetChild(0));
	}
	finally
	{
		BService = null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="15"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SerializeIds"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SerializeIds (Inputs, Outputs)
{
	try
	{
		// Antony David 01/12/2006
		// Has been added to change the &apos;99999&apos; for the Id fields to a sequence.
		var intSequence    = Inputs.GetProperty(&quot;SerialNumber&quot;);
		var intChildCount1 = 0;
		var intCounter1    = 0;
		var psInputs       : PropertySet;
		var psOutputs      : PropertySet;
		var psCollector    : PropertySet = TheApplication().NewPropertySet();
		
		Outputs.AddChild(Inputs.GetChild(0));
		
		intChildCount1 = Outputs.GetChild(0).GetChildCount();
		
		//Replace the Id field with a sequence value if it is &apos;99999&apos;
		if (Outputs.GetChild(0).PropertyExists(&quot;Id&quot;))
		{
			if (Outputs.GetChild(0).GetProperty(&quot;Id&quot;) == &quot;99999&quot;)
			{
				Outputs.GetChild(0).SetProperty(&quot;Id&quot;,intSequence);
				intSequence++;
			}
		}
		
		//Make a recurrsive call for each child property
		for (intCounter1 = 0;intCounter1 &lt; intChildCount1; intCounter1++)
		{
			psInputs  = TheApplication().NewPropertySet();
			psOutputs = TheApplication().NewPropertySet();
			psInputs.SetProperty(&quot;SerialNumber&quot;,intSequence);
			psInputs.AddChild(Outputs.GetChild(0).GetChild(0));
			SerializeIds (psInputs, psOutputs);
			Outputs.GetChild(0).RemoveChild(0);
			psCollector.AddChild(psOutputs.GetChild(0));
			intSequence = psOutputs.GetProperty(&quot;SerialNumber&quot;);
		}
		intCounter1 = 0;
		for (intCounter1 = 0;intCounter1 &lt; intChildCount1; intCounter1++)
		{
			Outputs.GetChild(0).AddChild(psCollector.GetChild(intCounter1));
		}	
		Outputs.SetProperty(&quot;SerialNumber&quot;,intSequence);
	}
	finally
	{
	psInputs	= null;
	psOutputs	= null;
	psCollector	= null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreCanInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreCanInvokeMethod (MethodName, &amp;CanInvoke)
{
	switch (MethodName)
	{
		case &quot;ChangeMSISDN&quot;:
			CanInvoke = &quot;True&quot;;
			break;
		case &quot;ChangeIMSI&quot;:
			CanInvoke = &quot;True&quot;;
			break;
		case &quot;SubmitOrder&quot;:
			CanInvoke = &quot;True&quot;;
			break;
		case &quot;RetrieveOrder&quot;:
			CanInvoke = &quot;True&quot;;
			break;
		case &quot;DisconnectOrder&quot;:
			CanInvoke = &quot;True&quot;;
			break;
		default:
		break;
	}	
}"
			   SEQUENCE="23"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
		switch (MethodName)
		{
			case &quot;CheckIMEIRelease&quot;:
				CheckIMEIRelease (Inputs, Outputs);
				return (CancelOperation);
				break;
			case &quot;ChangeMSISDN&quot;:
				ChangeMSISDN (Inputs, Outputs);
				return (CancelOperation);
				break;
			case &quot;ChangeIMSI&quot;:
				ChangeIMSI (Inputs, Outputs);
				return (CancelOperation);
				break;
			case &quot;SubmitOrder&quot;:
				SubmitOrder (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;RetrieveOrder&quot;:
				RetrieveOrder (Inputs, Outputs);
				return (CancelOperation);
				break;
			case &quot;ModifyOrder&quot;:
				ModifyOrder (Inputs, Outputs);
				return (CancelOperation);
				break;
			case &quot;ChangePriceList&quot;:
				ChangePriceList (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;UpdateOrder&quot;:
				UpdateOrder (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;CancelOrder&quot;:
				CancelOrder (Inputs, Outputs)
				return (CancelOperation);
				break;
				case &quot;CancelOrderBatch&quot;:
				CancelOrderBatch (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;GetRootTransaction&quot;:
				GetRootTransaction (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;CheckOrder&quot;:
				CheckOrder (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;CancelOrderUI&quot;:
				CancelOrderUI (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;DisconnectOrder&quot;:
				DisconnectOrder (Inputs, Outputs)
				return (CancelOperation);
				break;	
			case &quot;DisconnectMNPOrder&quot;:
				DisconnectMNPOrder (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;ReleaseIMEIeconf&quot;:
				ReleaseIMEIeconf (Inputs, Outputs)
				return (CancelOperation);
				break;
			case &quot;UnlockPSNT&quot;:
				UnlockPSNT (Inputs, Outputs)
				return (CancelOperation);
				break;
			default:
				break;
		}		
}"
			   SEQUENCE="24"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOrganization"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
NAME: 		 SetOrganization
DESCRIPTION: 	Set Vodafone Organization on Created Order for visibility of common Users
INPUTS:		sOrderId = Row_Id of Order that needs Organization Set 
RETURNS:		sResult: &quot;&quot; if OK, Error Message otherwise
AUTHOR:		Davide Ruggiero
DATE CREATED: 	26/04/2010
UPDATES:		-
**************************************************/
function SetOrganization(sOrderId)
{
	try
	{
		if(sOrderId != &quot;&quot;)
		{
			var sVodafoneOrg = &quot;Vodafone Organization&quot;;
			var NoLinkBO : BusObject = TheApplication().GetBusObject (&quot;VF TK Suspend Resume NoLink BO&quot;);
			var OrganizationBC : BusComp = NoLinkBO.GetBusComp(&quot;Organization&quot;);
			var LightOrderBC : BusComp = NoLinkBO.GetBusComp(&quot;VF TK SMCF Order Entry - Orders Light BC&quot;);
			var OrderOrganizationBC : BusComp = NoLinkBO.GetBusComp(&quot;Order Business Unit&quot;);
	
			var sResult = &quot;&quot;;
			var bOrganizationFound = false;
			var sOrganizationId = &quot;&quot;;
			var bOrderFound = false;
			//Seek Id for Vodafone Organization 
			with(OrganizationBC)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Name&quot;, sVodafoneOrg);
				ExecuteQuery(ForwardOnly);
				bOrganizationFound = FirstRecord();
				if (bOrganizationFound)
				{
					sOrganizationId = GetFieldValue(&quot;Id&quot;);
				}
				else
				{
					sResult = &quot;Organization not found!&quot;;
				}
			}
			//If Organization Id is found 
			if (bOrganizationFound)
			{
				//Set it on Order
				with(LightOrderBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Primary Organization Id&quot;);
					SetSearchSpec(&quot;Id&quot;, sOrderId);
					ExecuteQuery(ForwardOnly);
					bOrderFound = FirstRecord();
					if (bOrderFound)
					{
						SetFieldValue(&quot;Primary Organization Id&quot;,sOrganizationId);
						WriteRecord();
					}
					else
						sResult = &quot;Order not found!&quot;
				}
				//Then Add a New Record on S_ORDER_BU:
				with(OrderOrganizationBC)
				{
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Organization Id&quot;);
					SetSearchSpec(&quot;Order Id&quot;, sOrderId);
					SetSearchSpec(&quot;Business Unit Id&quot;, sOrganizationId);
					ExecuteQuery(ForwardOnly);
					bOrderFound = FirstRecord();
					if (!bOrderFound)
					{
						NewRecord(NewAfter);
						SetFieldValue(&quot;Order Id&quot;,sOrderId);
						SetFieldValue(&quot;Business Unit Id&quot;,sOrganizationId);
						WriteRecord();
					}
				}
			}
		}
	}
	finally
	{
		OrderOrganizationBC = null;
		LightOrderBC = null;
		OrganizationBC = null;
		NoLinkBO = null;
	}
	return (sResult);
}"
			   SEQUENCE="18"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="05/27/2010 13:55:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UnLockICCID"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UnLockICCID(strICCID, integId)
{
	try
	{
		var strResultCodeICCID = null;
		var strResultMsgICCID  = null;
		var psInput  : PropertySet = TheApplication().NewPropertySet();
		var psOutput : PropertySet = TheApplication().NewPropertySet();
		var svcJavaServices : Service = TheApplication ().GetService (&quot;VF EAI Java Business Service&quot;);
		var InputParameter : PropertySet = TheApplication ().NewPropertySet();	
		var OutputParameter : PropertySet = TheApplication ().NewPropertySet();	
		GetParameters (InputParameter , OutputParameter);
		var dns = OutputParameter.GetProperty(&quot;DNS&quot;);
		psInput.SetProperty (&quot;pi_userid&quot;, TheApplication ().LoginName ());
		psInput.SetProperty (&quot;url&quot;, TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTK_ICCB_CONNECTION&quot;,&quot;Driver&quot;) + dns);
		psInput.SetProperty (&quot;userId&quot;, TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTK_ICCB_CONNECTION&quot;,&quot;UserId&quot;));
		psInput.SetProperty (&quot;password&quot;, TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;VFTK_ICCB_CONNECTION&quot;,&quot;Password&quot;));			
		psInput.SetProperty (&quot;pi_iccid&quot;, strICCID);
		psInput.SetProperty (&quot;pi_lock_type&quot;, &quot;UL&quot;);
		psInput.SetProperty (&quot;pi_integration_id&quot;, integId); 
		svcJavaServices.InvokeMethod (&quot;LockICCID&quot;, psInput, psOutput);
		return (CancelOperation);	
	}
	finally
	{
		OutputParameter 	= null;
		InputParameter 		= null;
		svcJavaServices     = null;	
		psInput           	= null;
		psOutput          	= null;
	}
}"
			   SEQUENCE="19"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="11/21/2013 07:59:52"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UnlockPSNT"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UnlockPSNT(Inputs,Outputs)
{
	var myBS_2;
	var psInputs;
	var psOutputs;
	
	try
	{
		var oBO			: BusObject =  TheApplication().GetBusObject(&quot;VF HP Order Entry Orders for Adj Calc&quot;);
		var bcOrder		: BusComp =  oBO.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcOrderItem	: BusComp =  oBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcOrderXA	: BusComp =  oBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);	
		
		var strOrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var iNextVPN;
		var sIdPSTN;
		var sGroupId;
		var sIntegrationId;
		var sShortNum;	
		var	sIdVPN;
		psInputs = TheApplication().NewPropertySet (); 
        psOutputs = TheApplication().NewPropertySet ();
		
		if (strOrderId != &quot;&quot;)
		{
			with(bcOrder)
			{	
				ClearToQuery ();
				SetViewMode(AllView);
				SetSearchSpec (&quot;Id&quot;,strOrderId);
				ExecuteQuery(ForwardOnly); 			
				if(FirstRecord() )
				{
					with(bcOrderItem)
					{
						ClearToQuery ();
						SetViewMode(AllView);
						ActivateField(&quot;Part Number&quot;);
						SetSearchSpec (&quot;Part Number&quot;,&quot;3000&quot;);//VF_VPN_Group
						ExecuteQuery(ForwardOnly); 
						iNextVPN = FirstRecord();
						while(iNextVPN)
						{
							sIdVPN = GetFieldValue(&quot;Id&quot;);
							with(bcOrderXA)
							{
								ClearToQuery ();
								SetViewMode(AllView);							
								SetSearchSpec (&quot;Name&quot;,&quot;Group #&quot;);
								ExecuteQuery(ForwardOnly); 
								if(FirstRecord())
								{								
									sGroupId = GetFieldValue(&quot;Value&quot;);
									UnlockShortNum(sGroupId,strOrderId,sIdVPN);
								}
							}
							iNextVPN = NextRecord();
						}
					}				
				}
			}
		}
	}
	finally
	{
		psOutputs = null;
		psInputs = null;
		myBS_2 = null;
		bcOrderXA = null;
		bcOrderItem	= null;
		bcOrder	= null;	
		oBO	= null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="12/24/2013 14:07:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UnlockShortNum"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UnlockShortNum(sGroupId,strOrderId,sIdVPN)
{
	var myBS_2;
	var psInputs;
	var psOutputs;
	
	try
	{
		var oBO			: BusObject =  TheApplication().GetBusObject(&quot;VF X HP Order Entry&quot;);		
		var bcOrderItem	: BusComp =  oBO.GetBusComp(&quot;HP Order Entry - Line Items&quot;);
		var bcOrderXA	: BusComp =  oBO.GetBusComp(&quot;Order Item XA (Simple)&quot;);
		
		var iNext;
		var sIdPSTN;		
		var sIntegrationId;
		var sShortNum;		
		psInputs = TheApplication().NewPropertySet (); 
        psOutputs = TheApplication().NewPropertySet ();
		
		with(bcOrderItem)
		{	
			ClearToQuery ();
			SetViewMode(AllView);
			ActivateField(&quot;Part Number&quot;);
			SetSearchSpec (&quot;Order Header Id&quot;,strOrderId);
			SetSearchSpec (&quot;Part Number&quot;,&quot;3004&quot;);
			SetSearchSpec (&quot;Root Order Item Id&quot;,sIdVPN);			
			ExecuteQuery(ForwardOnly); 		
			iNext = FirstRecord();			
			while (iNext)
			{					
				sIdPSTN = GetFieldValue(&quot;Id&quot;);
				sIntegrationId = GetFieldValue(&quot;Integration Id&quot;);
				with(bcOrderXA)
				{
					ClearToQuery ();
					SetViewMode(AllView);							
					SetSearchSpec (&quot;Name&quot;,&quot;Short Number&quot;);//PSTN
					ExecuteQuery(ForwardOnly); 
					if(FirstRecord())
					{
						sShortNum = GetFieldValue(&quot;Value&quot;);
					}
				}
						
				if (sGroupId != &quot;&quot; &amp;&amp; sShortNum != &quot;&quot;)
				{
					//Unlock shortNum
					 myBS_2 = TheApplication().GetService (&quot;VF ManageVPNShortNumber BS&quot;);                  
					 psInputs.SetProperty(&quot;ShortNumber&quot;,  sShortNum);     
					 psInputs.SetProperty(&quot;ShortNumberOld&quot;, &quot;&quot;);     
					 psInputs.SetProperty(&quot;ActionType&quot;, &quot;Unlock&quot;);
					 psInputs.SetProperty(&quot;ReservationEntity&quot;, &quot;ORDER&quot;);
					 psInputs.SetProperty(&quot;VPNGroupId&quot;, sGroupId);
					 psInputs.SetProperty(&quot;RootAssetIntegId&quot;,  sIntegrationId);
					 myBS_2.InvokeMethod(&quot;ManageVPNShortNumber&quot;, psInputs, psOutputs);
				}
				iNext = NextRecord();
			}
		}
	}
	finally
	{
		psOutputs = null;
		psInputs = null;
		myBS_2 = null;
		bcOrderXA = null;
		bcOrderItem	= null;		
		oBO	= null;
	}
}"
			   SEQUENCE="21"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="12/24/2013 14:07:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateOrder (Inputs, Outputs)
{
	try
	{
	// ACS TK 3rd-May-07: Added to let Customer Portal (external systems) modify an order.
		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;,&quot;Y&quot;);
		var DummyPropSet: PropertySet;
    	var StatusObject : PropertySet = TheApplication().NewPropertySet();
    	var ASIIn : PropertySet = TheApplication().NewPropertySet();
    	
		Inputs.SetProperty(&quot;SerialNumber&quot;,&quot;99000&quot;);
		SerializeIds (Inputs, ASIIn);

    	var BService     : Service = TheApplication().GetService(&quot;ACS Order Portal ASI&quot;);
    	BService.InvokeMethod (&quot;InsertOrUpdate&quot;, ASIIn, Outputs);

    	//Get &apos;OrderID&apos; of the new order. ID is returned by &apos;Insert&apos; method
    	//as Status Object (Hierarchy).
    	StatusObject = Outputs.GetChild(0).GetChild(0).GetChild(0);
    	var strOrderId = StatusObject.GetProperty(&quot;Id&quot;);
    			
		//Populate the output values
		Outputs.SetProperty(&quot;ErrMsg&quot;, &quot;&quot;);
		Outputs.SetProperty(&quot;ErrCode&quot;, &quot;0&quot;);
		Outputs.SetProperty(&quot;OrderId&quot;, strOrderId);
		Outputs.AddChild(Outputs.GetChild(0));	
	}
	catch (e)
	{
		//If error occurs -&gt; return error message
		var Text = e.errText;
		var Code = e.errCode;
		DummyPropSet = TheApplication().NewPropertySet();
		DummyPropSet.SetType(&quot;SiebelMessage&quot;);
		Outputs.AddChild(DummyPropSet);  //end of dummy part
	}
	finally
	{
		StatusObject = null;
		ASIIn = null;
		BService = null;
		DummyPropSet = null;
	}
	return (CancelOperation);
}"
			   SEQUENCE="22"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="01/31/2009 16:18:02"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="sendFDOCancelSMS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function sendFDOCancelSMS(orderId)
{
try
{
	var wkfInputs = TheApplication().NewPropertySet();
	var wkfOutputs = TheApplication().NewPropertySet();
	var wkf = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
	
	var boOrderManagement : BusObject = TheApplication ().GetBusObject (&quot;HP Order Entry&quot;);
	var bcOrderManagement : BusComp = boOrderManagement.GetBusComp (&quot;HP Order Entry - Orders&quot;);
	
	bcOrderManagement.ClearToQuery(); 
	bcOrderManagement.SetViewMode(AllView);
	bcOrderManagement.ActivateField(&quot;VF Future Order Flag&quot;);
	bcOrderManagement.SetSearchSpec(&quot;Id&quot;,orderId);
	bcOrderManagement.ExecuteQuery(ForwardOnly);
	
	if(!bcOrderManagement.FirstRecord())
		return;

	if(bcOrderManagement.GetFieldValue(&quot;VF Future Order Flag&quot;) == &quot;Y&quot;)
	{
		wkfInputs.SetProperty(&quot;ProcessName&quot;,&quot;VF Send SMS Notification for Future Order WF&quot;);
		wkfInputs.SetProperty(&quot;Action&quot;,TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;));
		wkfInputs.SetProperty(&quot;Function Name&quot;,&quot;VF Future Order Date SMS&quot;);
		wkfInputs.SetProperty(&quot;Bypass&quot;,&quot;N&quot;);
		wkfInputs.SetProperty(&quot;MSISDN&quot;,&quot;&quot;);
		wkfInputs.SetProperty(&quot;Template&quot;,&quot;&quot;);
		wkfInputs.SetProperty(&quot;Source BO&quot;,&quot;Order Entry (No Link)&quot;);
		wkfInputs.SetProperty(&quot;Status&quot;,&quot;Cancel&quot;);
		wkfInputs.SetProperty(&quot;Object Id&quot;,orderId);
		wkf.InvokeMethod(&quot;RunProcess&quot;,wkfInputs,wkfOutputs);
	}
}
catch(e)
{
	return;
}
finally
{
	wkfInputs = null;
	wkfOutputs = null;
	wkf = null;
	bcOrderManagement = null;
	boOrderManagement = null;	
}	
}"
			   SEQUENCE="16"
			   UPDATED="04/24/2015 16:55:11"
			   UPDATED_BY="PSILVA"
			   CREATED="07/18/2013 00:14:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



