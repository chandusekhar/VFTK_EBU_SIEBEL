<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="Order Entry"
	   UI_FREEZE="N"
	   UPDATED="03/22/2017 09:51:26"
	   UPDATED_BY="DGUERREIRO"
	   CREATED="08/17/1998 18:50:31"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Submit Ref Num Campaign"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="03/10/2017 15:24:02"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="DGUERREIRO"
		   UPDATED="03/22/2017 09:51:26"
		   UPDATED_BY="DGUERREIRO"
		   CREATED="07/04/2011 12:24:22"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="VF Submit Ref Num Campaign"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="07/04/2011 12:24:22"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateAndSubmitOrderAllInOneMove"
			   UPDATED="10/20/2016 18:07:13"
			   UPDATED_BY="MSOUSA"
			   CREATED="08/24/2016 10:15:41"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="VFTRCBU-33588 - HRODRIGUES"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/22/2016 11:13:47"
				   UPDATED_BY="HRODRIGUES"
				   CREATED="09/22/2016 10:40:39"
				   CREATED_BY="HRODRIGUES">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="JIRA-34229"
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sExaToken"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/20/2016 18:07:13"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/20/2016 18:06:47"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sPromoPartNum"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/24/2016 10:16:07"
				   UPDATED_BY="MSOUSA"
				   CREATED="08/24/2016 10:16:07"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sPromoSubTypeDel"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/24/2016 10:16:29"
				   UPDATED_BY="MSOUSA"
				   CREATED="08/24/2016 10:16:29"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sRootAssetAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/24/2016 10:16:42"
				   UPDATED_BY="MSOUSA"
				   CREATED="08/24/2016 10:16:42"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sRootAssetId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/24/2016 10:27:54"
				   UPDATED_BY="MSOUSA"
				   CREATED="08/24/2016 10:27:54"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sRootAssetIntegId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="08/24/2016 10:16:56"
				   UPDATED_BY="MSOUSA"
				   CREATED="08/24/2016 10:16:56"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateAndSubmitOrderAllInOneMove"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="08/24/2016 10:15:49"
				   UPDATED_BY="MSOUSA"
				   CREATED="08/24/2016 10:15:49"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateModifyOrder"
			   UPDATED="11/03/2014 19:47:47"
			   UPDATED_BY="JCARVALHO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/03/2014 19:47:02"
				   UPDATED_BY="JCARVALHO"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="AccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillAccntId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/26/2011 11:08:54"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BillAccntId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DealerCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/03/2014 19:47:10"
				   UPDATED_BY="JCARVALHO"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="DealerCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrorMsg"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ModifyOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ModifyOrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ParentOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/03/2014 19:47:44"
				   UPDATED_BY="JCARVALHO"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ParentOrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ShopCode"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/03/2014 19:47:47"
				   UPDATED_BY="JCARVALHO"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ShopCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateModifyOrder"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeBundled"
			   UPDATED="04/28/2014 17:37:58"
			   UPDATED_BY="SADMIN"
			   CREATED="04/28/2014 17:37:56"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Asset Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/28/2014 17:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:37:57"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="Asset Integration Id"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="04/28/2014 17:37:57"
					   UPDATED_BY="SADMIN"
					   CREATED="04/28/2014 17:37:57"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_METHOD_NAME"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MethodName"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/28/2014 17:37:57"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:37:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   DISPLAY_NAME_-_STRING_REFERENCE="SBL_OBJECT_ID-1004225227-0N8"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/28/2014 17:37:58"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:37:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeBundle"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/28/2014 17:37:58"
				   UPDATED_BY="SADMIN"
				   CREATED="04/28/2014 17:37:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="CR162"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeactivateCampaignAssets"
			   UPDATED="03/10/2017 16:30:22"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="03/10/2017 16:30:22"
			   CREATED_BY="DGUERREIRO">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeactivateCampaignAssets"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/10/2017 16:30:22"
				   UPDATED_BY="DGUERREIRO"
				   CREATED="03/10/2017 16:30:22"
				   CREATED_BY="DGUERREIRO">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeactivateChildProduct"
			   UPDATED="07/28/2011 18:23:31"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeactivateChildProduct"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="CR162"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeactivateNonCampaignAssets"
			   UPDATED="03/10/2017 16:30:22"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="03/10/2017 16:30:22"
			   CREATED_BY="DGUERREIRO">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeactivateNonCampaignAssets"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/10/2017 16:30:22"
				   UPDATED_BY="DGUERREIRO"
				   CREATED="03/10/2017 16:30:22"
				   CREATED_BY="DGUERREIRO">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="CR162"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeactivateRetryCampaignAssets"
			   UPDATED="03/10/2017 16:30:22"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="03/10/2017 16:30:22"
			   CREATED_BY="DGUERREIRO">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeactivateRetryCampaignAssets"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/10/2017 16:30:22"
				   UPDATED_BY="DGUERREIRO"
				   CREATED="03/10/2017 16:30:22"
				   CREATED_BY="DGUERREIRO">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SubmitRefNumCampaign"
			   UPDATED="07/04/2011 12:24:22"
			   UPDATED_BY="SADMIN"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="DealerCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="DealerCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMsg"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ErrorMsg"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="IMEI"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="IMEI"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ParentOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ParentOrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ReferenceNumber"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ReferenceNumber"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ShopCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="ShopCode"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TargetOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="TargetOrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="07/04/2011 12:24:22"
					   UPDATED_BY="SADMIN"
					   CREATED="07/04/2011 12:24:22"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SubmitRefNumCampaign"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="07/04/2011 12:24:22"
				   UPDATED_BY="SADMIN"
				   CREATED="07/04/2011 12:24:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDataOption"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckDataOption(sRootAssetId, sPromoPartNum, sOrderId)
{
	var sResult = &quot;&quot;;

	try
	{
		var boParam  : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParam  : BusComp   = boParam.GetBusComp(&quot;ACS NI Parameter&quot;);
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);

		var sStatusActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var sActionDelete = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var sDataPartNum  = &quot;&quot;;
		var sDataItemId   = &quot;&quot;;
		var bHasAttrib    = false;

		if (sRootAssetId == null || sRootAssetId == &quot;&quot; ||
			sPromoPartNum == null || sPromoPartNum == &quot;&quot; ||
			sOrderId == null || sOrderId == &quot;&quot;)
		{
			sResult = &quot;NDO&quot;;
		}

		bcParam.SetViewMode(AllView);
		bcParam.ClearToQuery();
		bcParam.ActivateField(&quot;Value&quot;)
		bcParam.SetSearchSpec(&quot;Function&quot;, &quot;VFDataOptions&quot;);
		bcParam.SetSearchSpec(&quot;Name&quot;,     sPromoPartNum);
		bcParam.ExecuteQuery(ForwardOnly);

		if (!bcParam.FirstRecord())
		{
			sResult = &quot;NDO&quot;;
		}

		sDataPartNum = bcParam.GetFieldValue(&quot;Value&quot;);

		if (sDataPartNum == null || sDataPartNum == &quot;&quot;)
		{
			sResult = &quot;NDO&quot;;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		bcItem.SetSearchSpec(&quot;Part Number&quot;,     sDataPartNum);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			sResult = &quot;NDO&quot;;
		}

		do
		{
			sDataItemId = bcItem.GetFieldValue(&quot;Id&quot;);

			bcItem.SetFieldValue(&quot;Action Code&quot;,sActionDelete);
			bcItem.WriteRecord();				

			bcItemXA.SetViewMode(AllView);
			bcItemXA.ClearToQuery();
			bcItemXA.ActivateField(&quot;Action Code&quot;);
			bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sDataItemId);
			bcItemXA.ExecuteQuery(ForwardOnly);

			bHasAttrib = bcItemXA.FirstRecord();

			while (bHasAttrib)
			{
				bcItemXA.SetFieldValue(&quot;Action Code&quot;,sActionDelete);
				bcItemXA.WriteRecord();

				bHasAttrib = bcItemXA.NextRecord();
			}
		}
		while (bcItem.NextRecord());
	}
	catch(oExcep)
	{
		defined (oExcep.errText) ? sResult = oExcep.errText : sResult = oExcep.toString();
	}
	finally
	{
		bcParam  = null;
		boParam  = null;
		bcItemXA = null;
		bcItem   = null;
		boOrder  = null;
	}

	return(sResult);
}"
			   SEQUENCE="1"
			   UPDATED="02/16/2015 17:08:13"
			   UPDATED_BY="JCARVALHO"
			   CREATED="07/28/2011 18:23:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOpenOrders"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOpenOrders(sAssetIntegId)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sStatusCancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var sStatusComplete  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var sStatusParked    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Parked&quot;); //DEF-10824

		var sItemSearchExpr = &quot;&quot;

		if (sAssetIntegId == null || sAssetIntegId == &quot;&quot;)
		{
			return false;
		}

			sItemSearchExpr = &quot;[Asset Integration Id]=&apos;&quot; + sAssetIntegId +
						  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled +
						   &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusParked +        //DEF-10824
						  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusComplete + &quot;&apos;&quot;;

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);
		
		if (bcItem.FirstRecord())
		{
			return (bcItem.FirstRecord());
		}

		return (bcItem.FirstRecord());
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}	
}"
			   SEQUENCE="2"
			   UPDATED="05/19/2016 11:23:54"
			   UPDATED_BY="ESANTOS"
			   CREATED="07/28/2011 18:23:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CompleteOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CompleteOrder(sModifyOrderId, sPartNum, sReferenceNumber, sRootLineItemId, sShopCode, sDealerCode, sIMEI)
{
	var sResult = &quot;&quot;;

	try
	{
		var bcUtilities    : Service     = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psUtilitiesIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut : PropertySet = TheApplication().NewPropertySet();
		var boOrder	       : BusObject   = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcProduct      : BusComp     = null;
		var boCfgObject    : BusObject   = TheApplication().GetBusObject(&quot;ISS CP Loader&quot;);
		var bcCfgObject    : BusComp     = null;
		var bcOrder        : BusComp     = null;
		var bcItem         : BusComp     = null;
		var bcProductPick                = null;
		var bcItemXA       : BusComp     = null;
		var boHPOrder      : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcHPItem       : BusComp     = null;
		var bcItemSimple   : BusComp     = null;
		var bcHPOrder      : BusComp     = null;

		var sACTION_ADD            = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var sREASON_MODIFY_OPTIONS = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;232&quot;);

		var sProductId       = &quot;&quot;;
		var sProductName     = &quot;&quot;;
		var sPortValidProdId = &quot;&quot;;
		var sProdPortId      = &quot;&quot;;
		var sNewItemId       = &quot;&quot;;
		var sVodafoneBUId    = &quot;&quot;;
		var sItemSearchExpr  = &quot;&quot;;

		psUtilitiesIn.SetProperty(&quot;ModifyOrderId&quot;,         sModifyOrderId); 
		psUtilitiesIn.SetProperty(&quot;PartNum&quot;,               sPartNum); 
		psUtilitiesIn.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;); //Property for change algorithm
		bcUtilities.InvokeMethod(&quot;Input Validation&quot;, psUtilitiesIn, psUtilitiesOut); // Query Input Validation

		bcProduct = boOrder.GetBusComp(&quot;Internal Product&quot;);

		bcProduct.SetViewMode(AllView);
		bcProduct.ClearToQuery();
		bcProduct.SetSearchExpr(&quot;[Part #]=&apos;&quot; + sPartNum + &quot;&apos;&quot;);
		bcProduct.ExecuteQuery(ForwardOnly);

		if (!bcProduct.FirstRecord())
		{
			return;
		}

		sProductId   = bcProduct.GetFieldValue(&quot;Id&quot;);
		sProductName = bcProduct.GetFieldValue(&quot;Name&quot;);
		
		bcCfgObject = boCfgObject.GetBusComp(&quot;Cfg ISS Sub Objects&quot;);

		bcCfgObject.SetViewMode(AllView);
		bcCfgObject.ClearToQuery();
		bcCfgObject.ActivateField(&quot;Orig Id&quot;);
		bcCfgObject.ActivateField(&quot;Port Id&quot;);
		bcCfgObject.SetSearchExpr(&quot;[SO Id]=&apos;&quot; + sProductId + &quot;&apos; AND [Last Version]=&apos;999999999&apos;&quot;);
		bcCfgObject.ExecuteQuery(ForwardOnly);

		if (bcCfgObject.FirstRecord()) 
		{
			sPortValidProdId = bcCfgObject.GetFieldValue(&quot;Orig Id&quot;);
			sProdPortId      = bcCfgObject.GetFieldValue(&quot;Port Id&quot;);

			if (sProdPortId == &quot;&quot;)
			{
				sProdPortId = sPortValidProdId;
			}
		}

		bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sModifyOrderId + &quot;&apos;&quot;);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		bcItem = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);

		bcItem.NewRecord(NewAfter);

		sNewItemId = bcItem.GetFieldValue(&quot;Id&quot;);

		bcProductPick = bcItem.GetPicklistBusComp(&quot;Product&quot;);

		bcProductPick.ClearToQuery();
		bcProductPick.ActivateField(&quot;Part #&quot;);
		bcProductPick.SetSearchExpr(&quot;[Part #]=&apos;&quot; + sPartNum + &quot;&apos;&quot;);
		bcProductPick.ExecuteQuery(ForwardOnly);

		if (bcProductPick.FirstRecord())
		{			
			bcProductPick.Pick();
		}

		bcItemXA = boOrder.GetBusComp(&quot;Order Item XA&quot;);

		if (sPartNum == &quot;2000&quot;)
		{
			bcItemXA.ClearToQuery();
			bcItemXA.ActivateField(&quot;Object Id&quot;);
			bcItemXA.ActivateField(&quot;Name&quot;);
			bcItemXA.ActivateField(&quot;Action Code&quot;);
			bcItemXA.SetSearchExpr(&quot;[Object Id]=&apos;&quot; + sNewItemId + &quot;&apos;&quot;);
			bcItemXA.ExecuteQuery(ForwardOnly);

			if (bcItemXA.FirstRecord())
			{			
				bcItemXA.SetFieldValue(&quot;Value&quot;,               sIMEI);
				bcItemXA.SetFieldValue(&quot;Previous Text Value&quot;, sIMEI);
				bcItemXA.SetFieldValue(&quot;Action Code&quot;,         sACTION_ADD);
				bcItemXA.WriteRecord();
			}
			else
			{
				bcItemXA.NewRecord(NewAfter);
				bcItemXA.SetFieldValue(&quot;Object Id&quot;,           sNewItemId);
				bcItemXA.SetFieldValue(&quot;Name&quot;,                &quot;IMEI&quot;);
				bcItemXA.SetFieldValue(&quot;Value&quot;,               sIMEI);
				bcItemXA.SetFieldValue(&quot;Previous Text Value&quot;, sIMEI);
				bcItemXA.SetFieldValue(&quot;Action Code&quot;,         sACTION_ADD);
				bcItemXA.WriteRecord();						
			}
		}
		else
		{
			bcItemXA.ClearToQuery();
			bcItemXA.ActivateField(&quot;Action Code&quot;);
			bcItemXA.SetSearchExpr(&quot;[Object Id]=&apos;&quot; + sNewItemId + &quot;&apos; AND [Name]=&apos;Destination Number&apos;&quot;);
			bcItemXA.ExecuteQuery(ForwardOnly);

			if (bcItemXA.FirstRecord())
			{
				bcItemXA.SetFieldValue(&quot;Value&quot;,               sIMEI);
				bcItemXA.SetFieldValue(&quot;Previous Text Value&quot;, sIMEI);
				bcItemXA.SetFieldValue(&quot;Action Code&quot;,         sACTION_ADD);
				bcItemXA.WriteRecord();
			}

			bcItemXA.ClearToQuery();
			bcItemXA.ActivateField(&quot;Part #&quot;);
			bcItemXA.SetSearchExpr(&quot;[Object Id]=&apos;&quot; + sNewItemId + &quot;&apos; AND [Name]=&apos;Duration&apos;&quot;);
			bcItemXA.ExecuteQuery(ForwardOnly);

			if (bcItemXA.FirstRecord())
			{
				bcItemXA.SetFieldValue(&quot;Previous Text Value&quot;, &quot;12&quot;);
				bcItemXA.SetFieldValue(&quot;Action Code&quot;,         sACTION_ADD);
				bcItemXA.WriteRecord();
			}
		}

		bcHPItem = boHPOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);					

		bcHPItem.SetViewMode(AllView);
		bcHPItem.ClearToQuery();
		bcHPItem.ActivateField(&quot;Parent Order Item Id&quot;);
		bcHPItem.ActivateField(&quot;Product Port Id&quot;);
		bcHPItem.ActivateField(&quot;Prod Item Id&quot;);
		bcHPItem.SetSearchExpr(&quot;[Id]=&apos;&quot; + sNewItemId + &quot;&apos;&quot;);
		bcHPItem.ExecuteQuery(ForwardOnly);

		if (bcHPItem.FirstRecord())
		{
			bcHPItem.SetFieldValue(&quot;Root Order Item Id&quot;,   sRootLineItemId);
			bcHPItem.SetFieldValue(&quot;Parent Order Item Id&quot;, sRootLineItemId);
			bcHPItem.SetFieldValue(&quot;Order Header Id&quot;,      sModifyOrderId);
			bcHPItem.SetFieldValue(&quot;Product Port Id&quot;,      sProdPortId);
			bcHPItem.SetFieldValue(&quot;Prod Item Id&quot;,         sPortValidProdId);
			bcHPItem.WriteRecord();
		}

		// Pick Reason
		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sModifyOrderId + &quot;&apos; AND [Id]=[Root Order Item Id]&quot;;

		bcItemSimple = boHPOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);

		bcItemSimple.SetViewMode(AllView)
		bcItemSimple.ClearToQuery();
		bcItemSimple.ActivateField(&quot;TELCO Action Reason&quot;);
		bcItemSimple.ActivateField(&quot;VF Logical Reason&quot;);
		bcItemSimple.SetSearchExpr(sItemSearchExpr);
		bcItemSimple.ExecuteQuery(ForwardOnly);

		if (bcItemSimple.FirstRecord())
		{
			do
			{
				bcItemSimple.SetFieldValue(&quot;TELCO Action Reason&quot;, sREASON_MODIFY_OPTIONS);
				bcItemSimple.SetFieldValue(&quot;VF Logical Reason&quot;,   &quot;000&quot;);
			}
			while (bcItemSimple.NextRecord());

			bcItemSimple.WriteRecord();
		}

		sVodafoneBUId = GetBU(&quot;Vodafone Organization&quot;);

		if (sVodafoneBUId != &quot;&quot;)
		{
			SetBUOrder(sModifyOrderId, sVodafoneBUId);
		}

		bcHPOrder = boHPOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);

		bcHPOrder.SetViewMode(AllView)
		bcHPOrder.ActivateField(&quot;VF Dealer Code&quot;);
		bcHPOrder.ActivateField(&quot;VF Shop Code&quot;);
		bcHPOrder.ActivateField(&quot;Primary Organization Id&quot;);						
		bcHPOrder.ClearToQuery();
		bcHPOrder.SetSearchExpr(&quot;[Id]=&apos;&quot; + sModifyOrderId + &quot;&apos;&quot;);
		bcHPOrder.ExecuteQuery(ForwardOnly);

		if (bcHPOrder.FirstRecord())
		{
			if (sDealerCode !=&quot;&quot; &amp;&amp; sDealerCode != null)//Check for null value
			{
				bcHPOrder.SetFieldValue(&quot;VF Dealer Code&quot;, sDealerCode);
			}

			bcHPOrder.SetFieldValue(&quot;VF Shop Code&quot;, sShopCode);

			if (sVodafoneBUId != &quot;&quot;)
			{
				bcHPOrder.SetFieldValue(&quot;Primary Organization Id&quot;, sVodafoneBUId);
			}

			bcHPOrder.WriteRecord();
		}
	}
	catch(oExcept)
	{
		sResult = oExcept.toString();
		defined (oExcept.errText) ? sResult = oExcept.errText : sResult = oExcept.toString();
	}
	finally
	{
		bcHPOrder      = null;
		bcItemSimple   = null;
		bcHPItem       = null;
		boHPOrder      = null;
		bcItemXA       = null;
		bcProductPick  = null;
		bcItem         = null;
		bcOrder        = null;
		bcCfgObject    = null;
		boCfgObject    = null;
		bcProduct      = null;
		boOrder	       = null;
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bcUtilities    = null;
	}

	return(sResult);
}"
			   SEQUENCE="3"
			   UPDATED="03/10/2017 16:30:23"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CountParentChild"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CountParentChild(sParentAssetId)
{
	try
	{
		var boAsset : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);

		var sStatusInactive  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var sAssetSearchExpr = &quot;&quot;;

		if (sParentAssetId == null || sParentAssetId == &quot;&quot;)
		{
			return false;
		}

		sAssetSearchExpr = &quot;[Parent Asset Id]=&apos;&quot; + sParentAssetId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusInactive + &quot;&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sAssetSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		return (bcAsset.FirstRecord());
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="02/16/2015 16:55:14"
			   UPDATED_BY="JCARVALHO"
			   CREATED="07/28/2011 18:23:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateAndSubmitOrderAllInOneMove"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateAndSubmitOrderAllInOneMove(Inputs, Outputs) 
{
	/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++
	 *  a) New function to encapsulate the processes of creation and submission of debundle orders in one process only.
	 *  b) This new function is called by WF:&quot;VFTRCBU CreateSubmitDebundleOrder WF&quot; which is invoked asynchronously via BS:&quot;Server Requests::SubmitRequest()&quot;
	 *     in function DeactivateChildProduct()
	 * --- */

	try 
	{
		var sRootAssetId = Inputs.GetProperty(&quot;sRootAssetId&quot;);
		var sRootAssetIntegId = Inputs.GetProperty(&quot;sRootAssetIntegId&quot;);
		var sRootAssetAccountId = Inputs.GetProperty(&quot;sRootAssetAccountId&quot;);
		var sPromoSubTypeDel = Inputs.GetProperty(&quot;sPromoSubTypeDel&quot;);
		var sPromoPartNum = Inputs.GetProperty(&quot;sPromoPartNum&quot;);
		var sExaToken = Inputs.GetProperty(&quot;sExaToken&quot;);
		var sOrderId;
		var psDebundleIn = TheApplication().NewPropertySet();
		var psDebundleOut = TheApplication().NewPropertySet();

		if (!CheckOpenOrders(sRootAssetIntegId)) 
		{
		
			//++ Bundled Promotions :: 09.04.2013
			psDebundleIn.SetProperty(&quot;RootAssetIntegId&quot;, sRootAssetIntegId);
			psDebundleIn.SetProperty(&quot;RootAssetAccountId&quot;, sRootAssetAccountId);
			psDebundleIn.SetProperty(&quot;MethodName&quot;, &quot;DebundlePromotion&quot;);
			DeBundle(psDebundleIn, psDebundleOut);
			
			sOrderId = psDebundleOut.GetProperty(&quot;Order Id&quot;);
			Outputs.SetProperty(&quot;ErrorMsg&quot;, psDebundleOut.GetProperty(&quot;Error Message&quot;)); //VFTRCBU-33588 - HRODRIGUES
			Outputs.SetProperty(&quot;ErrorCode&quot;, psDebundleOut.GetProperty(&quot;Error Code&quot;)); //VFTRADM-1512 //VFTRCBU-37258 set error code to proper value

			if (sOrderId != null &amp;&amp; sOrderId != &quot;&quot; &amp;&amp; (psDebundleOut.GetProperty(&quot;Error Code&quot;) == &quot;&quot; || psDebundleOut.GetProperty(&quot;Error Code&quot;) == null)) 
			{
				UpdateOrderData(sRootAssetIntegId, sOrderId, &quot;232&quot;, &quot;Y&quot;, sExaToken); //JIRA-31705:Added argument &quot;Y&quot;  //JIRA-34229:Added argument sExaToken

				if (sPromoSubTypeDel &gt; 0) 
				{
					CheckDataOption(sRootAssetIntegId, sPromoPartNum, sOrderId);
				}

				SubmitOrder(sOrderId);
			}
			//-- Bundled Promotions :: 09.04.2013			
			//CR162 - Set Retry Flag Error if no order is created and no error is outputed
			else if ((sOrderId == null || sOrderId == &quot;&quot;) &amp;&amp; (psDebundleOut.GetProperty(&quot;Error Code&quot;) == &quot;&quot; || psDebundleOut.GetProperty(&quot;Error Code&quot;) == null))
			{
				Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;Retry: No Order Created&quot;);
				Outputs.SetProperty(&quot;ErrorCode&quot;, &quot;01&quot;); //VFTRADM-1512
				
			}		
		}//!if
		//CR162 - Set Retry Flag Error if open/failed orders
		else
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;Retry: There are open orders for the subscriber.&quot;);//VFTRADM-1512
			Outputs.SetProperty(&quot;ErrorCode&quot;, &quot;01&quot;);//VFTRADM-1512
		}

	}
	finally 
	{
		psDebundleIn = null;
		psDebundleOut = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="03/22/2017 09:51:26"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="08/24/2016 10:20:25"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateModifyOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateModifyOrder (Inputs, Outputs)
{
	var sErrorText = &quot;&quot;;

	try
	{
		var bsUtilities     : Service     = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psUtilitiesIn   : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut  : PropertySet = TheApplication().NewPropertySet();
		var boItem          : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem          : BusComp     = boItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA        : BusComp     = boItem.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var bcAsset         : BusComp     = boItem.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var bsManager       : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn     : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut    : PropertySet = TheApplication().NewPropertySet();
		var psFieldListIn   : PropertySet = TheApplication().NewPropertySet();
		var psAttribListIn  : PropertySet = TheApplication().NewPropertySet();
		var psFieldListOut  : PropertySet = null;
		var psAttribListOut : PropertySet = null;
		var psSubmitIn      : PropertySet = TheApplication().NewPropertySet();
		var psSubmitOut     : PropertySet = TheApplication().NewPropertySet();	
		var boOrder	        : BusObject   = null;
		var bcOrder	        : BusComp     = null;

		var sACTION_CODE_ADD      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var sPROD_SUB_TYPE_DECAF  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;DECAF&quot;);
		var sPROD_SUB_TYPE_CINGOZ = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;CINGOZ&quot;);	
		var sPROD_TYPE_HANDSET    = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;HANDSET&quot;);
		var sPROD_GROUP_CAMP      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP&quot;);
		var sSTATUS_ACTIVE        = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);

		var sOrderId           = Inputs.GetProperty(&quot;ParentOrderId&quot;);
		var sShopCode          = Inputs.GetProperty(&quot;ShopCode&quot;);
		var sDealerCode        = Inputs.GetProperty(&quot;DealerCode&quot;);		
		var sSearchExpr        = &quot;&quot;;
		var bHasItem           = false;
		var sItemId            = &quot;&quot;;
		var sParentMSISDN      = &quot;&quot;;
		var sBundleInstanceId  = &quot;&quot;;
		var sItemProdSubType   = &quot;&quot;;
		var sIMEI              = &quot;&quot;;
		var sReferenceNumber   = &quot;&quot;;
		var bLaunchModifyOrder = false;
		var sOwnerAccountId    = &quot;&quot;;
		var sRootAssetIntegId  = &quot;&quot;;
		var	sModifyOrderId     = &quot;&quot;;
		var i                  = 0;

		psUtilitiesIn.SetProperty(&quot;ParOrderId&quot;, sOrderId); //Id Validation
		bsUtilities.InvokeMethod(&quot;Input Validation&quot;, psUtilitiesIn, psUtilitiesOut); // Query Input Validation

		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Id]&lt;&gt;[Root Order Item Id] AND &quot; +
					  &quot;[Action Code]=&apos;&quot; + sACTION_CODE_ADD + &quot;&apos; AND &quot; +
					  &quot;([VF Product Sub Type]=&apos;&quot; + sPROD_SUB_TYPE_DECAF + &quot;&apos; OR&quot; +
					  &quot; [VF Product Sub Type]=&apos;&quot; + sPROD_SUB_TYPE_CINGOZ + &quot;&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Root Service Num&quot;);
		bcItem.ActivateField(&quot;VF IMEI&quot;);
		bcItem.ActivateField(&quot;VF Root Prod Prom Instance Id&quot;); // Bundled Promotions
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ClearToQuery();
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		bHasItem = bcItem.FirstRecord();

		while (bHasItem)				
		{
			sItemId           = bcItem.GetFieldValue(&quot;Id&quot;);
			sParentMSISDN     = bcItem.GetFieldValue(&quot;Root Service Num&quot;);
			sBundleInstanceId = bcItem.GetFieldValue(&quot;VF Root Prod Prom Instance Id&quot;);
			sItemProdSubType  = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sReferenceNumber  = &quot;&quot;;
			sIMEI             = &quot;&quot;;

			//++ BundlePromotions
			if (sBundleInstanceId != &quot;&quot; &amp;&amp; sBundleInstanceId != null)
			{
				psManagerIn.SetProperty(&quot;Header Id&quot;,          sOrderId);
				psManagerIn.SetProperty(&quot;Bundle Instance Id&quot;, sBundleInstanceId);
				psManagerIn.SetProperty(&quot;Context&quot;,            &quot;Order&quot;);
				psManagerIn.SetProperty(&quot;Component Type&quot;,     &quot;Mobile&quot;);

				psFieldListIn.SetType(&quot;Field List&quot;);
				psFieldListIn.SetProperty(&quot;MSISDN&quot;, &quot;&quot;);
				psManagerIn.AddChild(psFieldListIn);

				psAttribListIn.SetType(&quot;Attribute List&quot;);
				psManagerIn.AddChild(psAttribListIn);

				psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Get Bundle Promotion Components Data WF&quot;);

				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

				for (i = 0; i&lt;psManagerOut.GetChildCount(); i++)
				{
					if (psManagerOut.GetChild(i).GetType() == &quot;Field Output&quot;)
						psFieldListOut = psManagerOut.GetChild(i);
					if (psManagerOut.GetChild(i).GetType() == &quot;Attribute Output&quot;)
						psAttribListOut = psManagerOut.GetChild(i);
				}

				sParentMSISDN = psFieldListOut.GetProperty(&quot;MSISDN&quot;);
			}
			//-- BundledPromotions

			if (sItemProdSubType == sPROD_SUB_TYPE_DECAF)
			{
				sIMEI = bcItem.GetFieldValue(&quot;VF IMEI&quot;);

				bcItemXA.SetViewMode(AllView);
				bcItemXA.ClearToQuery();
				bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId);
				bcItemXA.SetSearchSpec(&quot;Name&quot;,      &quot;Reference Number&quot;);
				bcItemXA.ExecuteQuery(ForwardOnly);

				if (bcItemXA.FirstRecord())
				{
					sReferenceNumber = bcItemXA.GetFieldValue(&quot;Value&quot;);
				}

				bcItemXA.SetViewMode(AllView);
				bcItemXA.ClearToQuery();
				bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId);
				bcItemXA.SetSearchSpec(&quot;Name&quot;,      &quot;IMEI&quot;);
				bcItemXA.ExecuteQuery(ForwardOnly);

				if (bcItemXA.FirstRecord())
				{
					sIMEI = bcItemXA.GetFieldValue(&quot;Value&quot;);
				}
			}
			else
			{
				bcItemXA.SetViewMode(AllView);
				bcItemXA.ClearToQuery();
				bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId);
				bcItemXA.SetSearchSpec(&quot;Name&quot;,      &quot;Main Number&quot;);
				bcItemXA.ExecuteQuery(ForwardOnly);

				if (bcItemXA.FirstRecord())
				{
					sReferenceNumber = bcItemXA.GetFieldValue(&quot;Value&quot;);
				}
			}

			bLaunchModifyOrder = (sItemProdSubType == sPROD_SUB_TYPE_DECAF &amp;&amp;
								  sReferenceNumber != null &amp;&amp; sReferenceNumber != &quot;&quot; &amp;&amp; sIMEI != null &amp;&amp; sIMEI != &quot;&quot;)
								 ||
								 (sItemProdSubType == sPROD_SUB_TYPE_CINGOZ &amp;&amp;
								  sReferenceNumber != null &amp;&amp; sReferenceNumber != &quot;&quot;);

			if (!bLaunchModifyOrder)
			{
				sErrorText = &quot;No Reference Number&quot;;
			}

			if (bLaunchModifyOrder)
			{
				bcAsset.SetViewMode(AllView);
				bcAsset.ActivateField(&quot;Root Owner Account Id&quot;);
				bcAsset.ActivateField(&quot;Root Integration Id&quot;);
				bcAsset.ClearToQuery();
				bcAsset.SetSearchSpec(&quot;Serial Number&quot;, sReferenceNumber);
				bcAsset.SetSearchSpec(&quot;Status&quot;,        sSTATUS_ACTIVE);
				bcAsset.ExecuteQuery(ForwardOnly);

				bLaunchModifyOrder = bcAsset.FirstRecord();
			}

			if (bLaunchModifyOrder)
			{
				sOwnerAccountId   = bcAsset.GetFieldValue(&quot;Root Owner Account Id&quot;);
				sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);

				psManagerIn.Reset();
				psManagerOut.Reset();

				psManagerIn.SetProperty(&quot;ProcessName&quot;,          &quot;TELCO Process Account Root Asset Action&quot;);
				psManagerIn.SetProperty(&quot;Object Id&quot;,            sOwnerAccountId);
				psManagerIn.SetProperty(&quot;Asset Integration Id&quot;, sRootAssetIntegId);
				psManagerIn.SetProperty(&quot;Asset Method&quot;,         &quot;ModifyProdSvc&quot;);
				psManagerIn.SetProperty(&quot;Asset Action Type&quot;,    TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;111&quot;));
				psManagerIn.SetProperty(&quot;Reuse Active Order&quot;,   &quot;N&quot;);
				psManagerIn.SetProperty(&quot;SkipGUINavigation&quot;,    &quot;Y&quot;);

				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

				sModifyOrderId = psManagerOut.GetProperty(&quot;Order Id&quot;);

				bLaunchModifyOrder = (sModifyOrderId != null &amp;&amp; sModifyOrderId != &quot;&quot;)
			}

			if (bLaunchModifyOrder)
			{
				boOrder	= TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
				bcOrder = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);

				bcOrder.SetViewMode(AllView);
				bcOrder.ClearToQuery();
				bcOrder.ActivateField(&quot;VF Prevent Automatic Cancellation&quot;);
				bcOrder.SetSearchSpec(&quot;Id&quot;, sModifyOrderId);
				bcOrder.ExecuteQuery(ForwardOnly);

				bLaunchModifyOrder = bcOrder.FirstRecord();
			}

			if (bLaunchModifyOrder)
			{
				bcOrder.SetFieldValue(&quot;VF Prevent Automatic Cancellation&quot;, &quot;Y&quot;);
				bcOrder.WriteRecord();

				psSubmitIn.SetProperty(&quot;ParentOrderId&quot;,   sOrderId);
				psSubmitIn.SetProperty(&quot;TargetOrderId&quot;,   sModifyOrderId);
				psSubmitIn.SetProperty(&quot;ShopCode&quot;,        sShopCode);
				psSubmitIn.SetProperty(&quot;DealerCode&quot;,      sDealerCode);
				psSubmitIn.SetProperty(&quot;IMEI&quot;,            sIMEI);
				psSubmitIn.SetProperty(&quot;ReferenceNumber&quot;, sReferenceNumber);
				psSubmitIn.SetProperty(&quot;SubType&quot;,         sItemProdSubType);
				psSubmitIn.SetProperty(&quot;ParMSISDN&quot;,       sParentMSISDN);

				SubmitRefNumCampaign(psSubmitIn, psSubmitOut);

				sErrorText = psSubmitOut.GetProperty(&quot;ErrorMsg&quot;);
			}

			bHasItem = bcItem.NextRecord();
		}

		Outputs.SetProperty(&quot;ErrorMsg&quot;,      sErrorText);
		Outputs.SetProperty(&quot;ModifyOrderId&quot;, sModifyOrderId);
	}
	catch(oExcept)
	{
		defined (oExcept.errText) ? sErrorText = oExcept.errText : sErrorText = oExcept.toString();

		Outputs.SetProperty(&quot;ErrorMsg&quot;, sErrorText);
	}
	finally
	{
		bcOrder        = null;
		boOrder        = null;
		psSubmitOut    = null;
		psSubmitIn     = null;
		psAttribListIn = null;
		psFieldListIn  = null;
		psManagerOut   = null;
		psManagerIn    = null;
		bsManager      = null;
		bcAsset        = null;
		bcItemXA       = null;
		bcItem         = null;
		boItem         = null;
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="08/24/2016 10:20:25"
			   UPDATED_BY="MSOUSA"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeBundle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeBundle(psManagerIn, psManagerOut) 
{
	var sOrderId = &quot;&quot;;

	try 
	{
		var bsManager : Service = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var sRootAssetIntegId = psManagerIn.GetProperty(&quot;RootAssetIntegId&quot;);
		var sRootAssetAccountId = psManagerIn.GetProperty(&quot;RootAssetAccountId&quot;);
		var sMethodName = psManagerIn.GetProperty(&quot;MethodName&quot;);

		if (sRootAssetIntegId == &quot;&quot; || sRootAssetIntegId == null ||
			sRootAssetAccountId == &quot;&quot; || sRootAssetAccountId == null ||
			sMethodName == &quot;&quot; || sMethodName == null) 
		{
			return sOrderId;
		}

		psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;TELCO Process Account Root Asset Action&quot;);
		psManagerIn.SetProperty(&quot;Object Id&quot;, sRootAssetAccountId);
		psManagerIn.SetProperty(&quot;Asset Integration Id&quot;, sRootAssetIntegId);
		psManagerIn.SetProperty(&quot;Asset Method&quot;, sMethodName);
		psManagerIn.SetProperty(&quot;Asset Action Type&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;111&quot;));
		psManagerIn.SetProperty(&quot;Reuse Active Order&quot;, &quot;N&quot;);
		psManagerIn.SetProperty(&quot;SkipGUINavigation&quot;, &quot;Y&quot;);

		TheApplication().SetProfileAttr(&quot;ACS Webservice Call&quot;, &quot;Y&quot;); //VFTRCBU-18873 - RPIRES - this profile will override value for &quot;SkipGUINavigation&quot; input so it should be set to Y

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
		//sOrderId = psManagerOut.GetProperty(&quot;Order Id&quot;);
	} 
	catch (oExcep) 
	{
		psManagerOut.SetProperty(&quot;Error Message&quot;, oExcep); //VFTRCBU-33588 - HRODRIGUES		
	}
	finally 
	{
		psManagerOut = null;
		psManagerIn = null;
		bsManager = null;		
	}
	return sOrderId;
}"
			   SEQUENCE="11"
			   UPDATED="03/10/2017 16:30:23"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="04/28/2014 17:37:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="CCB210"
			   INACTIVE="N"
			   NAME="DeactivateCampaignAssets"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeactivateCampaignAssets(Inputs, Outputs)
{
	var sErrMsg = &quot;&quot;;

	try
	{
	    /** +++ JIRA:34229:MS:Begin +++ **/
        var exaDt = new Date();
        var exaLOVPrefixToken = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_EXAMETRIC&quot;,&quot;BATCH_DEACT_ASSET_CAMP&quot;);	        
        var sExaToken = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_EXAMETRIC&quot;,&quot;BATCH_DEACT_ASSET_CAMP&quot;) + 
                        exaDt.getFullYear()+
                       (eval(exaDt.getMonth()+1).toString().length==1?(&quot;0&quot;+eval(exaDt.getMonth()+1)):(&quot;&quot;+eval(exaDt.getMonth()+1)))+
                       (exaDt.getDate().toString().length==1?(&quot;0&quot;+exaDt.getDate()):(&quot;&quot;+exaDt.getDate()))+
                       (exaDt.getHours().toString().length==1?(&quot;0&quot;+exaDt.getHours()):(&quot;&quot;+exaDt.getHours()));
	    /** --- JIRA:34229 End   --- **/
	
		/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
		var oBSServerRequest : Service = TheApplication().GetService(&quot;Server Requests&quot;); 
		var opsInputs  : PropertySet = TheApplication().NewPropertySet();
		var opsOutputs : PropertySet = TheApplication().NewPropertySet();
		var opsChild   : PropertySet = TheApplication().NewPropertySet();
		/* --- JIRA-32794:End ---- */
		
		//CBU Retrofit
		var sTempRange = &quot;&quot;;
		var sToday_LOV = &quot;&quot;;
		sTempRange = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VFTRCBU EXPIRED ASSET DAYS&quot;, &quot;DAYS&quot;);

		if (sTempRange == null || sTempRange == &quot;&quot;) {
			sTempRange = 45;
		}
		//CBU Retrofit	

        var boAsset : BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
        var boAssetX: BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);  //JIRA-32794:added
	    var bcAsset : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header (Expire Batch)&quot;);
		var bcCampAsset : BusComp   = boAssetX.GetBusComp(&quot;Asset Mgmt - Asset - Header (Expire Batch)&quot;); //JIRA-32794:modified to use boAssetX
		var oSysdate            = GetCurrentDate();

		var sStatusActive =    TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);	
		var sStatusSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);

		var sToday              = &quot;&quot;;
		var sAssetSearchExpr    = &quot;&quot;;
		var bHasAsset           = false;
		var sRootAssetId        = &quot;&quot;;
		var sRootAssetIntegId   = &quot;&quot;;
		var sRootAssetAccountId = &quot;&quot;;
		var sPromoPartNum       = &quot;&quot;;
		var sPromoSubType       = &quot;&quot;;
		var sPromoSubTypeDel    = &quot;&quot;;
		var sOrderId            = &quot;&quot;;
			
		sToday = (oSysdate.getMonth()+1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
				 &quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();

		//CBU Retrofit		 
		var oBS: Service = TheApplication().GetService(&quot;TELCO DateTime Utils&quot;);
		var Inputs: PropertySet = TheApplication().NewPropertySet();
		var Outputs: PropertySet = TheApplication().NewPropertySet();
		oBS.InvokeMethod(&quot;GetTodayDate&quot;,Inputs,Outputs);
		sToday = Outputs.GetProperty(&quot;Date&quot;);
		

		Inputs.SetProperty(&quot;Date&quot;, sToday);
		Inputs.SetProperty(&quot;Part&quot;, &quot;D&quot;);
		Inputs.SetProperty(&quot;Part Value&quot;, &quot;-&quot; + sTempRange);
		Inputs.SetProperty(&quot;Output Format&quot;, &quot;MM/DD/YYYY&quot;);
		oBS.InvokeMethod(&quot;AddDatePart&quot;, Inputs, Outputs);

		sToday_LOV = Outputs.GetProperty(&quot;Result&quot;);
		//CBU Retrofit				 

		//Search for Campaigns that End Date &lt; Today and Flag = N
		var CampSearchExpr = &quot;([VF Product Group] = &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;) + &quot;&apos;)&quot; +
						   &quot; AND ([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
						   &quot;&apos;) AND [VFTRCBU Batch Process Flag] = &apos;N&apos; AND [Effective End Date]&gt;=&apos;&quot; + sToday_LOV + &quot;&apos; AND [Effective End Date]&lt; &apos;&quot;+sToday+&quot;&apos;&quot;;
		
		bcCampAsset.SetViewMode(AllView);
		bcCampAsset.ClearToQuery();
		bcCampAsset.ActivateField(&quot;Integration Id&quot;);
		bcCampAsset.ActivateField(&quot;VF Product Group&quot;);
		bcCampAsset.ActivateField(&quot;Status&quot;);
		bcCampAsset.ActivateField(&quot;Effective End Date&quot;);
		bcCampAsset.ActivateField(&quot;VFTRCBU Batch Process Flag&quot;);
		bcCampAsset.ActivateField(&quot;VFTRCBU Batch Process Error&quot;); //VFTRADM-1512
		bcCampAsset.SetSearchExpr(CampSearchExpr);		
		bcCampAsset.ExecuteQuery(ForwardOnly);
		var bHasCampAsset = bcCampAsset.FirstRecord();
		
		while (bHasCampAsset)
		{
		
			var sCampAssetIntId = bcCampAsset.GetFieldValue(&quot;Integration Id&quot;);

			// IPHONE HANDSET + IPHONE DATA asset deactivation
			var psDebundleIn = TheApplication().NewPropertySet();
			var psDebundleOut = TheApplication().NewPropertySet();
			
			sAssetSearchExpr = &quot;([Product Part Number]=&apos;1000&apos; OR [Product Part Number]=&apos;70000&apos;)&quot; +
							   &quot; AND [Prod Prom Instance Id] =&apos;&quot; + sCampAssetIntId + &quot;&apos;&quot;;

			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);
			bcAsset.ActivateField(&quot;Product Part Number&quot;);
			bcAsset.ActivateField(&quot;VF Prod Prom Part Num&quot;);
			bcAsset.ActivateField(&quot;VF BP Sub Type&quot;);
			bcAsset.ActivateField(&quot;Root Asset Id&quot;);
			bcAsset.ActivateField(&quot;Root Integration Id&quot;);
			bcAsset.ActivateField(&quot;Root Owner Account Id&quot;);
			bcAsset.SetSearchExpr(sAssetSearchExpr);
			bcAsset.ExecuteQuery(ForwardOnly);
			bHasAsset = bcAsset.FirstRecord();

			while (bHasAsset)
			{
				sRootAssetId        = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);
				sRootAssetIntegId   = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
				sRootAssetAccountId = bcAsset.GetFieldValue(&quot;Root Owner Account Id&quot;);

				sPromoPartNum       = bcAsset.GetFieldValue(&quot;VF Prod Prom Part Num&quot;);
				sPromoSubType       = bcAsset.GetFieldValue(&quot;VF BP Sub Type&quot;);
				sPromoSubTypeDel    = Lookup(&quot;VF_BP_SUBTYPE_DEL&quot;, sPromoSubType);

				if (!CheckOpenOrders(sRootAssetIntegId))//VFTRADM-1509
				{

					/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
					opsInputs.Reset();
					opsOutputs.Reset();
					opsChild.Reset();
	
					opsInputs.SetProperty(&quot;Component&quot;,&quot;WfProcBatchMgr&quot;);
					opsInputs.SetProperty(&quot;Method&quot;,&quot;RunProcess&quot;);
					opsInputs.SetProperty(&quot;Mode&quot;,&quot;DirectDb&quot;);
					opsInputs.SetProperty(&quot;Description&quot;,sExaToken + &quot;|&quot;+&quot;Batch Deactivation Async: &quot;+sRootAssetId); //VFTRCBU-33588 - HRODRIGUES
	
					opsChild.SetProperty(&quot;ProcessName&quot;,&quot;VFTRCBU CreateSubmitDebundleOrder WF&quot;);
					opsChild.SetProperty(&quot;sRootAssetId&quot;,sRootAssetId);
					opsChild.SetProperty(&quot;sRootAssetIntegId&quot;,sRootAssetIntegId);
					opsChild.SetProperty(&quot;sRootAssetAccountId&quot;,sRootAssetAccountId);
					opsChild.SetProperty(&quot;sPromoSubTypeDel&quot;,sPromoSubTypeDel);
					opsChild.SetProperty(&quot;sPromoPartNum&quot;,sPromoPartNum); 
					opsChild.SetProperty(&quot;sCampAssetIntId&quot;,sCampAssetIntId); //VFTRCBU-33588 - HRODRIGUES
					opsChild.SetProperty(&quot;sExaToken&quot;,sExaToken); 
					opsInputs.AddChild(opsChild);
					oBSServerRequest.InvokeMethod(&quot;SubmitRequest&quot;,opsInputs,opsOutputs);
					/* --- JIRA-32794:End: --- */
				}
				else //VFTRADM-1509
				{				
					bcCampAsset.SetFieldValue(&quot;VFTRCBU Batch Process Flag&quot;, &quot;R&quot;);
					bcCampAsset.SetFieldValue(&quot;VFTRCBU Batch Process Error&quot;, &quot;Retry: There are open orders for the subscriber.&quot;); 
					bcCampAsset.WriteRecord();
				}

				bHasAsset = bcAsset.NextRecord();
			}
			
			bHasCampAsset = bcCampAsset.NextRecord();
		}
		
		Outputs.SetProperty(&quot;ErrorCode&quot;, &quot;&quot;); //VFTRADM-1509
	}
	catch(e)
	{
		defined (e.errText) ? sErrMsg = e.errText : sErrMsg = e.toString();		
		Outputs.SetProperty(&quot;ErrorMsg&quot;, sErrMsg);
		Outputs.SetProperty(&quot;ErrorCode&quot;, e.errCode); //VFTRADM-1509
	}
	finally
	{
		oSysdate = null;
	    bcCampAsset = null;
	    bcAsset  = null;
        boAssetX  = null;
        boAsset  = null;
        
		/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
		oBSServerRequest = null;
		opsInputs = null;
		opsOutputs = null;
		opsChild = null;
		/* --- JIRA-32794:End --- */
	}
}"
			   SEQUENCE="7"
			   UPDATED="03/20/2017 16:49:16"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="03/10/2017 16:30:22"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="Deprecated with CCB210"
			   INACTIVE="Y"
			   NAME="DeactivateChildProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeactivateChildProduct(Inputs, Outputs) {

/****************************************************************************************************************************/
/* THIS METHOD HAS BEEN DEPRECATED WITH CCB210. CODE MOVED TO DeactivateCampaignAssets AND TO DeactivationNonCampaignAssets */
/****************************************************************************************************************************/

	var sErrMsg = &quot;&quot;;

	try {
		/** +++ JIRA:34229:MS:Begin +++ **/
		var exaDt = new Date();
		var exaLOVPrefixToken = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VFTRCBU_EXAMETRIC&quot;, &quot;BATCH_DEACT_ASSET_CAMP&quot;);
		var sExaToken = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VFTRCBU_EXAMETRIC&quot;, &quot;BATCH_DEACT_ASSET_CAMP&quot;) +
			exaDt.getFullYear() +
			(eval(exaDt.getMonth() + 1).toString().length == 1 ? (&quot;0&quot; + eval(exaDt.getMonth() + 1)) : (&quot;&quot; + eval(exaDt.getMonth() + 1))) +
			(exaDt.getDate().toString().length == 1 ? (&quot;0&quot; + exaDt.getDate()) : (&quot;&quot; + exaDt.getDate())) +
			(exaDt.getHours().toString().length == 1 ? (&quot;0&quot; + exaDt.getHours()) : (&quot;&quot; + exaDt.getHours()));
		/** --- JIRA:34229 End   --- **/

		/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
		var oBSServerRequest: Service = TheApplication().GetService(&quot;Server Requests&quot;);
		var opsInputs: PropertySet = TheApplication().NewPropertySet();
		var opsOutputs: PropertySet = TheApplication().NewPropertySet();
		var opsChild: PropertySet = TheApplication().NewPropertySet();
		/* --- JIRA-32794:End ---- */

		var sTempRange = &quot;&quot;;
		var sToday_LOV = &quot;&quot;;
		sTempRange = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VFTRCBU EXPIRED ASSET DAYS&quot;, &quot;DAYS&quot;);

		if (sTempRange == null || sTempRange == &quot;&quot;) {
			sTempRange = 45;
		}

		var boLOV: BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var bcLOV: BusComp = boLOV.GetBusComp(&quot;List Of Values&quot;);
		var boAsset: BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		var boAssetX: BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;); //JIRA-32794:added
		var bcAsset: BusComp = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header (Expire Batch)&quot;);
		var bcCampAsset: BusComp = boAssetX.GetBusComp(&quot;Asset Mgmt - Asset - Header (Expire Batch)&quot;); //JIRA-32794:modified to use boAssetX
		var oSysdate = GetCurrentDate();

		var sStatusActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var sStatusSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Suspended&quot;);

		var bHasValue = false;
		var sValue = &quot;&quot;;
		var sSkipProducts = &quot;&quot;;
		var sTodayEnd = &quot;&quot;;
		var sToday = &quot;&quot;;
		var sAssetSearchExpr = &quot;&quot;;
		var bHasAsset = false;
		var sAssetId = &quot;&quot;;
		var sAssetIntegId = &quot;&quot;;
		var sAssetPartNum = &quot;&quot;;
		var sParAssetId = &quot;&quot;;
		var sRootAssetId = &quot;&quot;;
		var sRootAssetIntegId = &quot;&quot;;
		var sRootAssetAccountId = &quot;&quot;;
		var sPromoPartNum = &quot;&quot;;
		var sPromoSubType = &quot;&quot;;
		var sPromoSubTypeDel = &quot;&quot;;
		var sOrderId = &quot;&quot;;

		bcLOV.SetViewMode(AllView);
		bcLOV.ClearToQuery();
		bcLOV.ActivateField(&quot;Value&quot;);
		bcLOV.SetSearchSpec(&quot;Type&quot;, &quot;VF_Child_Product&quot;);
		bcLOV.ExecuteQuery(ForwardOnly);
		bHasValue = bcLOV.FirstRecord();
		while (bHasValue) {
			sValue = bcLOV.GetFieldValue(&quot;Value&quot;);
			sSkipProducts = sSkipProducts + &quot; AND [Product Part Number]&lt;&gt;&apos;&quot; + sValue + &quot;&apos;&quot;;
			bHasValue = bcLOV.NextRecord();
		}
		

		sToday = (oSysdate.getMonth() + 1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		&quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();

		var oBS: Service = TheApplication().GetService(&quot;TELCO DateTime Utils&quot;);
		var Inputs: PropertySet = TheApplication().NewPropertySet();
		var Outputs: PropertySet = TheApplication().NewPropertySet();
		oBS.InvokeMethod(&quot;GetTodayDate&quot;,Inputs,Outputs);
		sToday = Outputs.GetProperty(&quot;Date&quot;);
		

		Inputs.SetProperty(&quot;Date&quot;, sToday);
		Inputs.SetProperty(&quot;Part&quot;, &quot;D&quot;);
		Inputs.SetProperty(&quot;Part Value&quot;, &quot;-&quot; + sTempRange);
		Inputs.SetProperty(&quot;Output Format&quot;, &quot;MM/DD/YYYY&quot;);
		oBS.InvokeMethod(&quot;AddDatePart&quot;, Inputs, Outputs);

		sToday_LOV = Outputs.GetProperty(&quot;Result&quot;);

		//Search for Campaigns that End Date &lt; Today
		//ESANTOS VFTRCBU-36676 - Added condition AND [Effective End Date] &lt; sToday
		var CampSearchExpr = &quot;([VF Product Group] = &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP PROMO&quot;) + &quot;&apos;)&quot; +
			&quot; AND ([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
			&quot;&apos;) AND [VFTRCBU Batch Process Flag] = &apos;N&apos; AND [Effective End Date]&gt;=&apos;&quot; + sToday_LOV + &quot;&apos; AND [Effective End Date]&lt; &apos;&quot;+sToday+&quot;&apos;&quot;;

		bcCampAsset.SetViewMode(AllView);
		bcCampAsset.ClearToQuery();
		bcCampAsset.ActivateField(&quot;Integration Id&quot;);
		bcCampAsset.ActivateField(&quot;VF Product Group&quot;);
		bcCampAsset.ActivateField(&quot;Status&quot;);
		bcCampAsset.ActivateField(&quot;Effective End Date&quot;);
		bcCampAsset.ActivateField(&quot;VFTRCBU Batch Process Flag&quot;);
		bcCampAsset.SetSearchExpr(CampSearchExpr);
		bcCampAsset.SetSortSpec(&quot;&quot;);
		bcCampAsset.ExecuteQuery(ForwardOnly);
		var bHasCampAsset = bcCampAsset.FirstRecord();
		while (bHasCampAsset) {

			var sCampAssetIntId = bcCampAsset.GetFieldValue(&quot;Integration Id&quot;);
			
			//ACAMBAS: VFTRCBU-36637 - Moved to the WF &apos;VFTRCBU CreateSubmitDebundleOrder WF&apos;
			//bcCampAsset.SetFieldValue(&quot;VFTRCBU Batch Process Flag&quot;, &quot;Y&quot;);
			//bcCampAsset.WriteRecord();
			//ACAMBAS: VFTRCBU-36637 - End

			// IPHONE HANDSET + IPHONE DATA asset deactivation
			var psDebundleIn = TheApplication().NewPropertySet();
			var psDebundleOut = TheApplication().NewPropertySet();

			sAssetSearchExpr = &quot;([Product Part Number]=&apos;1000&apos; OR [Product Part Number]=&apos;70000&apos;)&quot; +
				&quot; AND [Prod Prom Instance Id] =&apos;&quot; + sCampAssetIntId + &quot;&apos;&quot;;

			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);
			bcAsset.ActivateField(&quot;Product Part Number&quot;);
			bcAsset.ActivateField(&quot;VF Prod Prom Part Num&quot;);
			bcAsset.ActivateField(&quot;VF BP Sub Type&quot;);
			bcAsset.ActivateField(&quot;Root Asset Id&quot;);
			bcAsset.ActivateField(&quot;Root Integration Id&quot;);
			bcAsset.ActivateField(&quot;Root Owner Account Id&quot;);
			bcAsset.SetSearchExpr(sAssetSearchExpr);
			bcAsset.ExecuteQuery(ForwardOnly);
			bHasAsset = bcAsset.FirstRecord();
			while (bHasAsset) {
				sRootAssetId = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);
				sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
				sRootAssetAccountId = bcAsset.GetFieldValue(&quot;Root Owner Account Id&quot;);

				sPromoPartNum = bcAsset.GetFieldValue(&quot;VF Prod Prom Part Num&quot;);
				sPromoSubType = bcAsset.GetFieldValue(&quot;VF BP Sub Type&quot;);
				sPromoSubTypeDel = Lookup(&quot;VF_BP_SUBTYPE_DEL&quot;, sPromoSubType);

				/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
				opsInputs.Reset();
				opsOutputs.Reset();
				opsChild.Reset();

				opsInputs.SetProperty(&quot;Component&quot;, &quot;WfProcMgr&quot;);
				opsInputs.SetProperty(&quot;Method&quot;, &quot;RunProcess&quot;);
				opsInputs.SetProperty(&quot;Mode&quot;, &quot;DirectDb&quot;);
				opsInputs.SetProperty(&quot;Description&quot;, sExaToken + &quot;|&quot; + &quot;Batch Deactivation Async: &quot; + sRootAssetId); //VFTRCBU-33588 - HRODRIGUES

				opsChild.SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU CreateSubmitDebundleOrder WF&quot;);
				opsChild.SetProperty(&quot;sRootAssetId&quot;, sRootAssetId);
				opsChild.SetProperty(&quot;sRootAssetIntegId&quot;, sRootAssetIntegId);
				opsChild.SetProperty(&quot;sRootAssetAccountId&quot;, sRootAssetAccountId);
				opsChild.SetProperty(&quot;sPromoSubTypeDel&quot;, sPromoSubTypeDel);
				opsChild.SetProperty(&quot;sPromoPartNum&quot;, sPromoPartNum);
				opsChild.SetProperty(&quot;sCampAssetIntId&quot;, sCampAssetIntId); //VFTRCBU-33588 - HRODRIGUES
				opsChild.SetProperty(&quot;sExaToken&quot;, sExaToken);
				opsInputs.AddChild(opsChild);
				oBSServerRequest.InvokeMethod(&quot;SubmitRequest&quot;, opsInputs, opsOutputs);

				//				if (!CheckOpenOrders(sRootAssetIntegId))
				//				{
				//					//++ Bundled Promotions :: 09.04.2013
				//					psDebundleIn.SetProperty(&quot;RootAssetIntegId&quot;,sRootAssetIntegId);
				//					psDebundleIn.SetProperty(&quot;RootAssetAccountId&quot;,sRootAssetAccountId);
				//					psDebundleIn.SetProperty(&quot;MethodName&quot;,&quot;DebundlePromotion&quot;);
				//					DeBundle(psDebundleIn,psDebundleOut);
				//
				//					sOrderId = psDebundleOut.GetProperty(&quot;Order Id&quot;);
				//
				//					if (sOrderId != null &amp;&amp; sOrderId != &quot;&quot;)
				//					{
				//
				//						UpdateOrderData(sRootAssetIntegId, sOrderId, &quot;232&quot;, &quot;Y&quot;); //JIRA-31705:Added argument &quot;Y&quot;
				//
				//						if (sPromoSubTypeDel &gt; 0)
				//						{
				//							CheckDataOption(sRootAssetIntegId, sPromoPartNum, sOrderId);
				//						}
				//
				//						SubmitOrder(sOrderId);
				//					}
				//					//-- Bundled Promotions :: 09.04.2013
				//				}
				/* --- JIRA-32794:End: --- */

				bHasAsset = bcAsset.NextRecord();
			}

			bHasCampAsset = bcCampAsset.NextRecord();
		}

		oSysdate = GetCurrentDate();

		sToday = (oSysdate.getMonth() + 1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		&quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();

		sTodayEnd = (oSysdate.getMonth() + 1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		&quot; &quot; + &quot;00&quot; + &quot;:&quot; + &quot;00&quot; + &quot;:&quot; + &quot;00&quot;;

		// DEF-9688 -&gt; Include Other Roots without campaign
		//ESANTOS VFTRCBU-36676 - Added condition AND [Effective End Date] &lt; sToday
		sAssetSearchExpr = &quot;([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
			&quot;&apos;) AND [Effective End Date2]&gt;=&apos;&quot; + sToday_LOV + &quot;&apos; AND [Effective End Date2] &lt; &apos;&quot;+sToday+
			&quot;&apos; AND [VF Product Group] &lt;&gt; &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP PROMO&quot;) +
			&quot;&apos; AND [VF Product Group] &lt;&gt; &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP CONTAINER&quot;) +
			&quot;&apos; AND [VF Product Type] &lt;&gt; &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;HANDSET&quot;) + &quot;&apos;&quot; +
			&quot; AND [Product Part Number]&lt;&gt;&apos;1000&apos; AND [Product Part Number]&lt;&gt;&apos;70000&apos;&quot; + sSkipProducts;

		LogInsert(&quot;SetSearchExpr : &quot;, sAssetSearchExpr);

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Product Part Number&quot;);
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Root Integration Id&quot;);
		bcAsset.ActivateField(&quot;Parent Asset Id&quot;);
		bcAsset.ActivateField(&quot;Root Asset Id&quot;);
		bcAsset.SetSearchExpr(sAssetSearchExpr);
		bcAsset.SetSortSpec(&quot;&quot;);
		bcAsset.ExecuteQuery(ForwardOnly);
		bHasAsset = bcAsset.FirstRecord();
		while (bHasAsset) {
			sAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);
			sAssetPartNum = bcAsset.GetFieldValue(&quot;Product Part Number&quot;);
			sAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
			sParAssetId = bcAsset.GetFieldValue(&quot;Parent Asset Id&quot;);
			sRootAssetId = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);

			if (sAssetPartNum == &quot;14100&quot; || (!CheckOpenOrders(sRootAssetIntegId))) {

				SetInactiveStatus(sAssetId);
				//RemovePromIntegId (sRootAssetIntegId);
				if (sParAssetId != null &amp;&amp; sParAssetId != &quot;&quot; &amp;&amp; sParAssetId != sRootAssetId) {
					if (!CountParentChild(sParAssetId)) {
						SetInactiveStatus(sParAssetId);
					}
				}
			}

			bHasAsset = bcAsset.NextRecord();
		}

		// Temporary Threshold
		// DEF-9688 --&gt; Included Root=50000, defined in Legacy
		//ESANTOS VFTRCBU-36676 - Added condition AND [Effective End Date] &lt; sToday
		sToday = (oSysdate.getMonth() + 1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		&quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();

		sAssetSearchExpr = &quot;([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
			&quot;&apos;) AND [Effective End Date]&gt;=&apos;&quot; + sToday_LOV + &quot;&apos; AND [Effective End Date] &lt; &apos;&quot;+sToday+
			&quot;&apos; AND ([Root Part Number]=&apos;70000&apos; OR [Root Part Number]=&apos;1000&apos; OR [Root Part Number]=&apos;50000&apos; OR [Root Part Number]=&apos;16999&apos;)&quot; +
			&quot; AND [Product Part Number]=&apos;53012&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Root Integration Id&quot;);
		bcAsset.SetSearchExpr(sAssetSearchExpr);
		bcAsset.SetSortSpec(&quot;&quot;);
		bcAsset.ExecuteQuery(ForwardOnly);
		bHasAsset = bcAsset.FirstRecord();
		while (bHasAsset) {
			sAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);
			sAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);

			if (!CheckOpenOrders(sRootAssetIntegId)) {
				SetInactiveStatus(sAssetId);
				//RemovePromIntegId (sRootAssetIntegId);
			}

			bHasAsset = bcAsset.NextRecord();
		}

		// VFTRCBU-35959 ESANTOS
		// Include products with Product Group and Product Type null
		sToday = (oSysdate.getMonth() + 1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		&quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();

		sAssetSearchExpr = &quot;([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
			&quot;&apos;) AND [Effective End Date2]&lt;&apos;&quot; + sToday +
			&quot;&apos; AND [VF Product Group] is null AND [VF Product Type] is null&quot; + sSkipProducts;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Root Integration Id&quot;);
		bcAsset.SetSearchExpr(sAssetSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);
		bHasAsset = bcAsset.FirstRecord();
		while (bHasAsset) {
			sAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);
			sAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);

			if (!CheckOpenOrders(sRootAssetIntegId)) {
				SetInactiveStatus(sAssetId);
				//RemovePromIntegId (sRootAssetIntegId);
			}

			bHasAsset = bcAsset.NextRecord();
		}
		// End VFTRCBU-35959
	} catch (e) {
		defined(e.errText) ? sErrMsg = e.errText : sErrMsg = e.toString();
		Outputs.SetProperty(&quot;ErrorMsg&quot;, sErrMsg);
	}
	finally {
		oSysdate = null;
		bcAsset = null;
		boAsset = null;
		boAssetX = null;
		bcLOV = null;
		boLOV = null;
		/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
		oBSServerRequest = null;
		opsInputs = null;
		opsOutputs = null;
		opsChild = null;
		/* --- JIRA-32794:End --- */
	}
}"
			   SEQUENCE="8"
			   UPDATED="03/20/2017 16:49:16"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="CCB210"
			   INACTIVE="N"
			   NAME="DeactivateNonCampaignAssets"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeactivateNonCampaignAssets(Inputs, Outputs)
{
	var sErrMsg = &quot;&quot;;

	try
	{
	
		//CBU Retrofit
		var sTempRange = &quot;&quot;;
		var sToday_LOV = &quot;&quot;;
		sTempRange = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VFTRCBU EXPIRED ASSET DAYS&quot;, &quot;DAYS&quot;);

		if (sTempRange == null || sTempRange == &quot;&quot;) {
			sTempRange = 45;
		}
		//CBU Retrofit
			
		var boLOV   : BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		var bcLOV   : BusComp   = boLOV.GetBusComp(&quot;List Of Values&quot;);
        var boAsset : BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);        
	    var bcAsset : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header (Expire Batch)&quot;);		
		var oSysdate            = GetCurrentDate();

		var sStatusActive =    TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);	
		var sStatusSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);

		var bHasValue           = false;
		var sValue              = &quot;&quot;;
		var sSkipProducts       = &quot;&quot;;
		var sTodayEnd           = &quot;&quot;;
		var sToday              = &quot;&quot;;
		var sAssetSearchExpr    = &quot;&quot;;
		var bHasAsset           = false;
		var sAssetId            = &quot;&quot;;
		var sAssetIntegId       = &quot;&quot;;
		var sAssetPartNum       = &quot;&quot;;
		var sParAssetId         = &quot;&quot;;
		var sRootAssetId        = &quot;&quot;;
		var sRootAssetIntegId   = &quot;&quot;;	
			
		bcLOV.SetViewMode(AllView);
		bcLOV.ClearToQuery();
		bcLOV.ActivateField(&quot;Value&quot;);
		bcLOV.SetSearchSpec(&quot;Type&quot;, &quot;VF_Child_Product&quot;);
		bcLOV.ExecuteQuery(ForwardOnly);
		bHasValue = bcLOV.FirstRecord();
			
		while(bHasValue)
		{
			sValue = bcLOV.GetFieldValue(&quot;Value&quot;);
			sSkipProducts = sSkipProducts + &quot; AND [Product Part Number]&lt;&gt;&apos;&quot; + sValue + &quot;&apos;&quot;;
			bHasValue = bcLOV.NextRecord();
		}
		
		//CBU Retrofit		 
		var oBS: Service = TheApplication().GetService(&quot;TELCO DateTime Utils&quot;);
		var Inputs: PropertySet = TheApplication().NewPropertySet();
		var Outputs: PropertySet = TheApplication().NewPropertySet();
		oBS.InvokeMethod(&quot;GetTodayDate&quot;,Inputs,Outputs);
		sToday = Outputs.GetProperty(&quot;Date&quot;);
		

		Inputs.SetProperty(&quot;Date&quot;, sToday);
		Inputs.SetProperty(&quot;Part&quot;, &quot;D&quot;);
		Inputs.SetProperty(&quot;Part Value&quot;, &quot;-&quot; + sTempRange);
		Inputs.SetProperty(&quot;Output Format&quot;, &quot;MM/DD/YYYY&quot;);
		oBS.InvokeMethod(&quot;AddDatePart&quot;, Inputs, Outputs);

		sToday_LOV = Outputs.GetProperty(&quot;Result&quot;);
		//CBU Retrofit		
				
		sToday = (oSysdate.getMonth()+1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		 &quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();
		
		sTodayEnd = (oSysdate.getMonth()+1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
					&quot; &quot; + &quot;00&quot; + &quot;:&quot; + &quot;00&quot; + &quot;:&quot; + &quot;00&quot;;
		
		// DEF-9688 -&gt; Include Other Roots without campaign
		//ESANTOS VFTRCBU-36676 - Added condition AND [Effective End Date] &lt; sToday
		sAssetSearchExpr = &quot;([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
			&quot;&apos;) AND [Effective End Date2]&gt;=&apos;&quot; + sToday_LOV + &quot;&apos; AND [Effective End Date2] &lt; &apos;&quot;+sToday+
			&quot;&apos; AND [VF Product Group] &lt;&gt; &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP PROMO&quot;) +
			&quot;&apos; AND [VF Product Group] &lt;&gt; &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP CONTAINER&quot;) +
			&quot;&apos; AND [VF Product Type] &lt;&gt; &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;HANDSET&quot;) + &quot;&apos;&quot; +
			&quot; AND [Product Part Number]&lt;&gt;&apos;1000&apos; AND [Product Part Number]&lt;&gt;&apos;70000&apos;&quot; + sSkipProducts;

		LogInsert(&quot;SetSearchExpr : &quot;, sAssetSearchExpr);
		
		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Product Part Number&quot;);
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Root Integration Id&quot;);
		bcAsset.ActivateField(&quot;Parent Asset Id&quot;);
		bcAsset.ActivateField(&quot;Root Asset Id&quot;);
		bcAsset.SetSearchExpr(sAssetSearchExpr);		
		bcAsset.ExecuteQuery(ForwardOnly);
		bHasAsset = bcAsset.FirstRecord();

		while (bHasAsset)
		{
			sAssetId          = bcAsset.GetFieldValue(&quot;Id&quot;);
			sAssetPartNum     = bcAsset.GetFieldValue(&quot;Product Part Number&quot;);
			sAssetIntegId     = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
			sParAssetId       = bcAsset.GetFieldValue(&quot;Parent Asset Id&quot;);
			sRootAssetId      = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);

			if (sAssetPartNum == &quot;14100&quot; || (!CheckOpenOrders(sRootAssetIntegId)))
			{

				SetInactiveStatus(sAssetId);
				if (sParAssetId != null &amp;&amp; sParAssetId != &quot;&quot; &amp;&amp; sParAssetId != sRootAssetId)
				{
					if (!CountParentChild(sParAssetId))
					{
						SetInactiveStatus(sParAssetId);
					}
				}
			}
			
			bHasAsset = bcAsset.NextRecord();
		}	
			
		// Temporary Threshold
		// DEF-9688 --&gt; Included Root=50000, defined in Legacy
		//ESANTOS VFTRCBU-36676 - Added condition AND [Effective End Date] &lt; sToday
		sToday = (oSysdate.getMonth() + 1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		&quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();

		sAssetSearchExpr = &quot;([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
			&quot;&apos;) AND [Effective End Date]&gt;=&apos;&quot; + sToday_LOV + &quot;&apos; AND [Effective End Date] &lt; &apos;&quot;+sToday+
			&quot;&apos; AND ([Root Part Number]=&apos;70000&apos; OR [Root Part Number]=&apos;1000&apos; OR [Root Part Number]=&apos;50000&apos; OR [Root Part Number]=&apos;16999&apos;)&quot; +
			&quot; AND [Product Part Number]=&apos;53012&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Root Integration Id&quot;);
 		bcAsset.SetSearchExpr(sAssetSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);
		bHasAsset = bcAsset.FirstRecord();

		while (bHasAsset)
		{
			sAssetId          = bcAsset.GetFieldValue(&quot;Id&quot;);
			sAssetIntegId     = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
		
			if (!CheckOpenOrders(sRootAssetIntegId))
			{
				SetInactiveStatus(sAssetId);
			}

			bHasAsset = bcAsset.NextRecord();
		}
		
		// VFTRCBU-35959 ESANTOS
		// Include products with Product Group and Product Type null
		sToday = (oSysdate.getMonth() + 1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
		&quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();

		sAssetSearchExpr = &quot;([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
			&quot;&apos;) AND [Effective End Date2]&lt;&apos;&quot; + sToday +
			&quot;&apos; AND [VF Product Group] is null AND [VF Product Type] is null&quot; + sSkipProducts;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Root Integration Id&quot;);
		bcAsset.SetSearchExpr(sAssetSearchExpr);	
		bcAsset.ExecuteQuery(ForwardOnly);
		bHasAsset = bcAsset.FirstRecord();
		while (bHasAsset) {
			sAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);
			sAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);

			if (!CheckOpenOrders(sRootAssetIntegId)) {
				SetInactiveStatus(sAssetId);
				//RemovePromIntegId (sRootAssetIntegId);
			}

			bHasAsset = bcAsset.NextRecord();
		}
		// End VFTRCBU-35959		
	}
	catch(e)
	{
		defined (e.errText) ? sErrMsg = e.errText : sErrMsg = e.toString();		
		Outputs.SetProperty(&quot;ErrorMsg&quot;, sErrMsg);
	}
	finally
	{
		oSysdate = null;
	    bcAsset  = null;
        boAsset  = null;
		bcLOV    = null;
		boLOV    = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="03/20/2017 16:49:16"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="03/10/2017 16:30:23"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="CCB210"
			   INACTIVE="N"
			   NAME="DeactivateRetryCampaignAssets"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeactivateRetryCampaignAssets(Inputs, Outputs)
{
	var sErrMsg = &quot;&quot;;

	try
	{
	    /** +++ JIRA:34229:MS:Begin +++ **/
        var exaDt = new Date();
        var exaLOVPrefixToken = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_EXAMETRIC&quot;,&quot;BATCH_DEACT_ASSET_CAMP&quot;);	        
        var sExaToken = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_EXAMETRIC&quot;,&quot;BATCH_DEACT_ASSET_CAMP&quot;) + 
                        exaDt.getFullYear()+
                       (eval(exaDt.getMonth()+1).toString().length==1?(&quot;0&quot;+eval(exaDt.getMonth()+1)):(&quot;&quot;+eval(exaDt.getMonth()+1)))+
                       (exaDt.getDate().toString().length==1?(&quot;0&quot;+exaDt.getDate()):(&quot;&quot;+exaDt.getDate()))+
                       (exaDt.getHours().toString().length==1?(&quot;0&quot;+exaDt.getHours()):(&quot;&quot;+exaDt.getHours()));
	    /** --- JIRA:34229 End   --- **/
	
		/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
		var oBSServerRequest : Service = TheApplication().GetService(&quot;Server Requests&quot;); 
		var opsInputs  : PropertySet = TheApplication().NewPropertySet();
		var opsOutputs : PropertySet = TheApplication().NewPropertySet();
		var opsChild   : PropertySet = TheApplication().NewPropertySet();
		/* --- JIRA-32794:End ---- */
		
		//CBU Retrofit
		var sTempRange = &quot;&quot;;
		var sToday_LOV = &quot;&quot;;
		sTempRange = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VFTRCBU EXPIRED ASSET DAYS&quot;, &quot;DAYS&quot;);

		if (sTempRange == null || sTempRange == &quot;&quot;) {
			sTempRange = 45;
		}
		//CBU Retrofit		

        var boAsset : BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);
        var boAssetX: BusObject = TheApplication().GetBusObject(&quot;Asset Management&quot;);  //JIRA-32794:added
	    var bcAsset : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header (Expire Batch)&quot;);
		var bcCampAsset : BusComp   = boAssetX.GetBusComp(&quot;Asset Mgmt - Asset - Header (Expire Batch)&quot;); //JIRA-32794:modified to use boAssetX
		var oSysdate            = GetCurrentDate();

		var sStatusActive =    TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);	
		var sStatusSuspended = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);

		var sToday              = &quot;&quot;;
		var sAssetSearchExpr    = &quot;&quot;;
		var bHasAsset           = false;
		var sRootAssetId        = &quot;&quot;;
		var sRootAssetIntegId   = &quot;&quot;;
		var sRootAssetAccountId = &quot;&quot;;
		var sPromoPartNum       = &quot;&quot;;
		var sPromoSubType       = &quot;&quot;;
		var sPromoSubTypeDel    = &quot;&quot;;
		var sOrderId            = &quot;&quot;;
			
		sToday = (oSysdate.getMonth()+1) + &quot;/&quot; + oSysdate.getDate() + &quot;/&quot; + oSysdate.getFullYear() +
				 &quot; &quot; + oSysdate.getHours() + &quot;:&quot; + oSysdate.getMinutes() + &quot;:&quot; + oSysdate.getSeconds();
		
		//CBU Retrofit		 
		var oBS: Service = TheApplication().GetService(&quot;TELCO DateTime Utils&quot;);
		var Inputs: PropertySet = TheApplication().NewPropertySet();
		var Outputs: PropertySet = TheApplication().NewPropertySet();
		oBS.InvokeMethod(&quot;GetTodayDate&quot;,Inputs,Outputs);
		sToday = Outputs.GetProperty(&quot;Date&quot;);
		

		Inputs.SetProperty(&quot;Date&quot;, sToday);
		Inputs.SetProperty(&quot;Part&quot;, &quot;D&quot;);
		Inputs.SetProperty(&quot;Part Value&quot;, &quot;-&quot; + sTempRange);
		Inputs.SetProperty(&quot;Output Format&quot;, &quot;MM/DD/YYYY&quot;);
		oBS.InvokeMethod(&quot;AddDatePart&quot;, Inputs, Outputs);

		sToday_LOV = Outputs.GetProperty(&quot;Result&quot;);
		//CBU Retrofit				 

		//Search for Campaigns that End Date &lt; Today and Flag = Retry
		var CampSearchExpr = &quot;([VF Product Group] = &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;) + &quot;&apos;)&quot; +
						   &quot; AND ([Status]=&apos;&quot; + sStatusActive + &quot;&apos; OR [Status]=&apos;&quot; + sStatusSuspended +
						   &quot;&apos;) AND [VFTRCBU Batch Process Flag] = &apos;R&apos; AND [Effective End Date]&gt;=&apos;&quot; + sToday_LOV + &quot;&apos; AND [Effective End Date]&lt; &apos;&quot;+sToday+&quot;&apos;&quot;;
		
		bcCampAsset.SetViewMode(AllView);
		bcCampAsset.ClearToQuery();
		bcCampAsset.ActivateField(&quot;Integration Id&quot;);
		bcCampAsset.ActivateField(&quot;VF Product Group&quot;);
		bcCampAsset.ActivateField(&quot;Status&quot;);
		bcCampAsset.ActivateField(&quot;Effective End Date&quot;);
		bcCampAsset.ActivateField(&quot;VFTRCBU Batch Process Flag&quot;);
		bcCampAsset.SetSearchExpr(CampSearchExpr);		
		bcCampAsset.ExecuteQuery(ForwardOnly);
		var bHasCampAsset = bcCampAsset.FirstRecord();
		
		while (bHasCampAsset)
		{
		
			var sCampAssetIntId = bcCampAsset.GetFieldValue(&quot;Integration Id&quot;);
		
			// IPHONE HANDSET + IPHONE DATA asset deactivation
			var psDebundleIn = TheApplication().NewPropertySet();
			var psDebundleOut = TheApplication().NewPropertySet();
			
			sAssetSearchExpr = &quot;([Product Part Number]=&apos;1000&apos; OR [Product Part Number]=&apos;70000&apos;)&quot; +
							   &quot; AND [Prod Prom Instance Id] =&apos;&quot; + sCampAssetIntId + &quot;&apos;&quot;;

			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);
			bcAsset.ActivateField(&quot;Product Part Number&quot;);
			bcAsset.ActivateField(&quot;VF Prod Prom Part Num&quot;);
			bcAsset.ActivateField(&quot;VF BP Sub Type&quot;);
			bcAsset.ActivateField(&quot;Root Asset Id&quot;);
			bcAsset.ActivateField(&quot;Root Integration Id&quot;);
			bcAsset.ActivateField(&quot;Root Owner Account Id&quot;);
			bcAsset.SetSearchExpr(sAssetSearchExpr);
			bcAsset.ExecuteQuery(ForwardOnly);
			bHasAsset = bcAsset.FirstRecord();

			while (bHasAsset)
			{
				sRootAssetId        = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);
				sRootAssetIntegId   = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
				sRootAssetAccountId = bcAsset.GetFieldValue(&quot;Root Owner Account Id&quot;);

				sPromoPartNum       = bcAsset.GetFieldValue(&quot;VF Prod Prom Part Num&quot;);
				sPromoSubType       = bcAsset.GetFieldValue(&quot;VF BP Sub Type&quot;);
				sPromoSubTypeDel    = Lookup(&quot;VF_BP_SUBTYPE_DEL&quot;, sPromoSubType);

				/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
				opsInputs.Reset();
				opsOutputs.Reset();
				opsChild.Reset();

				opsInputs.SetProperty(&quot;Component&quot;,&quot;WfProcMgr&quot;);
				opsInputs.SetProperty(&quot;Method&quot;,&quot;RunProcess&quot;);
				opsInputs.SetProperty(&quot;Mode&quot;,&quot;DirectDb&quot;);
				opsInputs.SetProperty(&quot;Description&quot;,sExaToken + &quot;|&quot;+&quot;Batch Deactivation Async: &quot;+sRootAssetId); //VFTRCBU-33588 - HRODRIGUES

				opsChild.SetProperty(&quot;ProcessName&quot;,&quot;VFTRCBU CreateSubmitDebundleOrder WF&quot;);
				opsChild.SetProperty(&quot;sRootAssetId&quot;,sRootAssetId);
				opsChild.SetProperty(&quot;sRootAssetIntegId&quot;,sRootAssetIntegId);
				opsChild.SetProperty(&quot;sRootAssetAccountId&quot;,sRootAssetAccountId);
				opsChild.SetProperty(&quot;sPromoSubTypeDel&quot;,sPromoSubTypeDel);
				opsChild.SetProperty(&quot;sPromoPartNum&quot;,sPromoPartNum); 
				opsChild.SetProperty(&quot;sCampAssetIntId&quot;,sCampAssetIntId); //VFTRCBU-33588 - HRODRIGUES
				opsChild.SetProperty(&quot;sExaToken&quot;,sExaToken); 
				opsInputs.AddChild(opsChild);
				oBSServerRequest.InvokeMethod(&quot;SubmitRequest&quot;,opsInputs,opsOutputs);
				/* --- JIRA-32794:End: --- */

				bHasAsset = bcAsset.NextRecord();
			}
			
			bHasCampAsset = bcCampAsset.NextRecord();
		}
		
		Outputs.SetProperty(&quot;ErrorCode&quot;, &quot;&quot;); //VFTRADM-1509
	}
	catch(e)
	{
		defined (e.errText) ? sErrMsg = e.errText : sErrMsg = e.toString();		
		Outputs.SetProperty(&quot;ErrorMsg&quot;, sErrMsg);
		Outputs.SetProperty(&quot;ErrorCode&quot;, e.errCode); //VFTRADM-1509
	}
	finally
	{
		oSysdate = null;
	    bcCampAsset = null;
	    bcAsset  = null;
        boAssetX  = null;
        boAsset  = null;
		/* +++ JIRA-32794:Begin:Improve performance by joining the creation and the submission of the irder in one &quot;move&quot; only and submiting the whole thing asynchronously +++ */
		oBSServerRequest = null;
		opsInputs = null;
		opsOutputs = null;
		opsChild = null;
		/* --- JIRA-32794:End --- */
	}

}"
			   SEQUENCE="10"
			   UPDATED="03/20/2017 16:49:16"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="03/10/2017 16:30:23"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAssetInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAssetInfo(ParOrderId,OutParAsset)
{
	try
	{
		var IntegrationId = &quot;&quot;;
		var RootAssetId = &quot;&quot;;
		var ReferenceNumber = &quot;&quot;;
		var CfgFlag = &quot;&quot;;
		var BillAccntId = &quot;&quot;;
		var ActiveStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var BoOrderEntry 		: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var BcOrderEntryLI 		: BusComp = BoOrderEntry.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var BcOrderXA : BusComp;
		var AssetBC : BusComp;
		//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;ParOrderId&quot;,ParOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
		with(BcOrderEntryLI)
		{
			var AddActionCode = TheApplication ().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+ParOrderId+&quot;&apos; AND [VF Product Sub Type] = &apos;DECAF&apos; AND [Action Code] = &apos;&quot;+AddActionCode+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var ExistDec = FirstRecord();
			while (ExistDec)				
			{
				var RootId = GetFieldValue(&quot;Root Order Item Id&quot;);
				var ItemId = GetFieldValue(&quot;Id&quot;);
				BcOrderXA = BoOrderEntry.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
				with(BcOrderXA)
				{
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Object Id] = &apos;&quot;+ItemId+&quot;&apos; AND [Name] = &apos;Reference Number&apos;&quot;);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
					{
						ReferenceNumber = GetFieldValue(&quot;Value&quot;);
					
						AssetBC = BoOrderEntry.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
						with(AssetBC)
						{
							SetViewMode(AllView);
							ActivateField(&quot;Status&quot;);
							ActivateField(&quot;Billing Account Id&quot;);
							ClearToQuery();
							SetSearchExpr(&quot;[Serial Number] = &apos;&quot;+ReferenceNumber+&quot;&apos;&quot;);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								var Status = GetFieldValue(&quot;Status&quot;);
								if (Status == ActiveStatus)
								{
									IntegrationId = GetFieldValue(&quot;Integration Id&quot;);
									RootAssetId = GetFieldValue(&quot;Id&quot;);
									CfgFlag = GetFieldValue(&quot;Cfg Latest Released Flag&quot;);
									BillAccntId = GetFieldValue(&quot;Billing Account Id&quot;);
								}
							}
						}
					}
				}	
				ExistDec = NextRecord();
			}
		}
		OutParAsset.SetProperty(&quot;IntegrationId&quot;,IntegrationId);
		OutParAsset.SetProperty(&quot;RootAssetId&quot;,RootAssetId);
		OutParAsset.SetProperty(&quot;CfgFlag&quot;,CfgFlag);
		OutParAsset.SetProperty(&quot;BillingAccountId&quot;,BillAccntId);
	}
	catch(e)
	{
		var error = e.toString();	
	}
	finally
	{
		AssetBC = null;
		BcOrderXA = null;
		BcOrderEntryLI = null;
		BoOrderEntry = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="03/10/2017 16:30:23"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBU"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBU(sBUName)
{
	try
	{
		var boOrganization : BusObject = TheApplication().GetBusObject(&quot;Organization&quot;);
		var bcOrganization : BusComp = boOrganization.GetBusComp(&quot;Organization&quot;);
		var sBUId = &quot;&quot;;

		if (sBUName == null || sBUName == &quot;&quot;)
		{
			return (sBUId);
		}

		bcOrganization.SetViewMode(AllView);
		bcOrganization.ClearToQuery();
		bcOrganization.SetSearchSpec(&quot;Name&quot;, sBUName);
		bcOrganization.ExecuteQuery(ForwardOnly);

		if (bcOrganization.FirstRecord())
		{
			sBUId = bcOrganization.GetFieldValue(&quot;Id&quot;);
		}

		return(sBUId);
	}
	finally
	{
		bcOrganization = null;
		boOrganization = null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="03/10/2017 16:30:23"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCurrentDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCurrentDate()
{
	//Created due to Oracle Bug 10589024 : [CR#12-1XHF9OH][FR#12-1XHF9P2] CLIB LIBRARY AND DATE OBJECT HAVE DIFFERENT RESUL
	//Date constructor does not work properly in HP-UX
	var currentDate:chars = &quot;&quot;;

	Clib.strftime(currentDate, &apos;%m/%d/%Y %H:%M:%S&apos;, Clib.localtime(Clib.time()));
	
	return new Date(currentDate);
}"
			   SEQUENCE="14"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="01/24/2017 19:33:04"
			   CREATED_BY="DGUERREIRO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="LogInsert"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function LogInsert(sFieldInfo, sFieldValue)
{
	try
	{
		var boLog : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcLog : BusComp   = boLog.GetBusComp(&quot;VF LOG EVENTS&quot;);

		var sViewName  = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);
		var sLoginName = TheApplication().LoginName();
		var sProcess   = &quot;Sorgu&quot;;

		bcLog.NewRecord(NewAfter);  
		bcLog.SetFieldValue(&quot;Field Info&quot;,   sFieldInfo);
		bcLog.SetFieldValue(&quot;Process Info&quot;, sProcess);
		bcLog.SetFieldValue(&quot;User Name&quot;,    sLoginName);
		bcLog.SetFieldValue(&quot;View&quot;,         sViewName);
		bcLog.SetFieldValue(&quot;Field Value&quot;,  sFieldValue);
		bcLog.WriteRecord();
	}
	finally
	{
		bcLog = null;
		boLog = null;
	}
}"
			   SEQUENCE="15"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="04/30/2014 19:30:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   COMMENTS="Bundled Promotions"
			   INACTIVE="N"
			   NAME="Lookup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Lookup(sType, sValue)
{
	try
	{
		var bsUtils    : Service     = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psUtilsIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilsOut : PropertySet = TheApplication().NewPropertySet();

		var sSearchExpression = &quot;&quot;;

		if (sType == null || sType == &quot;&quot; || sValue == null || sValue == &quot;&quot;)
		{
			return &quot;&quot;;
		}

		sSearchExpression = &quot;[Type] = &apos;&quot; + sType + &quot;&apos; AND [Value] = &apos;&quot; + sValue + &quot;&apos;&quot;;

		psUtilsIn.SetProperty(&quot;Search Expression&quot;, sSearchExpression);

		bsUtils.InvokeMethod(&quot;Lookup&quot;, psUtilsIn, psUtilsOut);

		if (psUtilsOut.GetProperty(&quot;Error Code&quot;) == &quot;0&quot;)
			return psUtilsOut.GetProperty(&quot;Order By&quot;);
		else
			return &quot;&quot;;
	}
	finally
	{
		psUtilsOut = null;
		psUtilsIn  = null;
		bsUtils    = null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="04/28/2014 17:37:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RemovePromIntegId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RemovePromIntegId (sAssetId)
{
	try
	{
		
		var boAsset : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sAssetId);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			bcAsset.SetFieldValue(&quot;Prod Prom Instance Id&quot;, &quot;&quot;);
			bcAsset.WriteRecord();
		}
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="06/03/2016 10:38:20"
			   CREATED_BY="ESANTOS">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;SubmitRefNumCampaign&quot;)
	{
		SubmitRefNumCampaign(Inputs, Outputs);
		return(CancelOperation);
	}
	if (MethodName == &quot;CreateModifyOrder&quot;)
	{
		CreateModifyOrder(Inputs, Outputs);
		return(CancelOperation);
	}	

	if (MethodName == &quot;CreateAndSubmitOrderAllInOneMove&quot;)
	{
		CreateAndSubmitOrderAllInOneMove(Inputs, Outputs);
		return(CancelOperation);
	}
		
	if (MethodName == &quot;DeactivateChildProduct&quot;)
	{
		DeactivateChildProduct(Inputs, Outputs);
		return(CancelOperation);
	}
	//CR162
	if (MethodName == &quot;DeactivateNonCampaignAssets&quot;)
	{
		DeactivateNonCampaignAssets(Inputs, Outputs);
		return(CancelOperation);
	}
	//CR162
	if (MethodName == &quot;DeactivateCampaignAssets&quot;)
	{
		DeactivateCampaignAssets(Inputs, Outputs);
		return(CancelOperation);
	}
	//CR162
	if (MethodName == &quot;DeactivateRetryCampaignAssets&quot;)
	{
		DeactivateRetryCampaignAssets(Inputs, Outputs);
		return(CancelOperation);
	}		
			
	
	return (ContinueOperation);  
}"
			   SEQUENCE="23"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetBUOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetBUOrder(sOrderId, sBusinessUnitId)
{
	try
	{
		var boOrder        : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var bcBusinessUnit : BusComp   = boOrder.GetBusComp(&quot;Order Business Unit&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot; ||
			sBusinessUnitId == null || sBusinessUnitId == &quot;&quot;)
		{
			return;
		}
		
		bcBusinessUnit.SetViewMode(AllView);
		bcBusinessUnit.ClearToQuery();
		bcBusinessUnit.ActivateField(&quot;Organization Id&quot;);
		bcBusinessUnit.ActivateField(&quot;Order Id&quot;);
		bcBusinessUnit.ActivateField(&quot;Business Unit Id&quot;);
		bcBusinessUnit.SetSearchSpec(&quot;Order Id&quot;,         sOrderId);
		bcBusinessUnit.SetSearchSpec(&quot;Business Unit Id&quot;, sBusinessUnitId);
		bcBusinessUnit.ExecuteQuery(ForwardOnly);

		if (bcBusinessUnit.FirstRecord())
		{
			return;
		}

		bcBusinessUnit.NewRecord(NewAfter);
		bcBusinessUnit.SetFieldValue(&quot;Order Id&quot;,         sOrderId);
		bcBusinessUnit.SetFieldValue(&quot;Business Unit Id&quot;, sBusinessUnitId);
		bcBusinessUnit.WriteRecord();
	}
	finally
	{
		bcBusinessUnit = null;
		boOrder	       = null;
	}
}"
			   SEQUENCE="18"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetInactiveStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetInactiveStatus(sAssetId)
{
	try
	{
		var boAsset : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);

		var sStatusInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);

		if (sAssetId == null || sAssetId == &quot;&quot;)
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Status&quot;);
		bcAsset.SetSearchSpec(&quot;Id&quot;, sAssetId);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			bcAsset.SetFieldValue(&quot;Status&quot;, sStatusInactive);
			bcAsset.WriteRecord();
		}
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="19"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/28/2011 18:23:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubmitOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SubmitOrder(sOrderId)
{
	var sResult = &quot;&quot;;

	try
	{
		var bsManager    : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn  : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		psManagerIn.SetProperty(&quot;ProcessName&quot;,     &quot;TELCO Async Submit Order Interface WF&quot;);
		psManagerIn.SetProperty(&quot;Order Id&quot;,        sOrderId);
		psManagerIn.SetProperty(&quot;Cancel On Error&quot;, &quot;N&quot;);
		
		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

	}
	catch(oExcept)
	{
		defined (oExcept.errText) ? sResult = oExcept.errText : sResult = oExcept.toString();	
	}
	finally
	{
		psManagerOut = null;
		psManagerIn  = null;
		bsManager    = null;		
	}

	return(sResult);
}"
			   SEQUENCE="20"
			   UPDATED="03/10/2017 16:30:24"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SubmitRefNumCampaign"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SubmitRefNumCampaign (Inputs, Outputs)
{
	try
	{
		var bsUtilities    : Service     = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		var psUtilitiesIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut : PropertySet = TheApplication().NewPropertySet();
		var boOrder        : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem         : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sPROD_SUB_TYPE_DECAF  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;DECAF&quot;);
		var sPROD_SUB_TYPE_CINGO2 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;CINGOZ&quot;);

		var sProdSubType     = Inputs.GetProperty(&quot;SubType&quot;);
		var sReferenceNumber = Inputs.GetProperty(&quot;ReferenceNumber&quot;);
		var sIMEI            = Inputs.GetProperty(&quot;IMEI&quot;);
		var sModifyOrderId   = Inputs.GetProperty(&quot;TargetOrderId&quot;);
		var sParentMSISDN    = Inputs.GetProperty(&quot;ParMSISDN&quot;);
		var sShopCode        = Inputs.GetProperty(&quot;ShopCode&quot;);	
		var sDealerCode      = Inputs.GetProperty(&quot;DealerCode&quot;);

		var sRootItemId = &quot;&quot;;
		var sPartNum    = &quot;&quot;;
		var sResult     = &quot;&quot;;


		if (sProdSubType == null || sProdSubType == &quot;&quot; ||
			(sProdSubType != sPROD_SUB_TYPE_DECAF &amp;&amp; sProdSubType != sPROD_SUB_TYPE_CINGO2))
		{
			return;
		}

		if (sProdSubType == sPROD_SUB_TYPE_DECAF &amp;&amp;
			(sReferenceNumber == null || sReferenceNumber == &quot;&quot; || sIMEI == null || sIMEI == &quot;&quot;))
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;No Reference Number&quot;);
			return;
		}

		if (sProdSubType == sPROD_SUB_TYPE_CINGO2 &amp;&amp; (sReferenceNumber == null || sReferenceNumber == &quot;&quot;))
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;No Reference Number&quot;);
			return;
		}

		// Begin - Scripting 15 - Input validation
		psUtilitiesIn.SetProperty(&quot;ModifyOrderId&quot;, sModifyOrderId);
		bsUtilities.InvokeMethod(&quot;Input Validation&quot;, psUtilitiesIn, psUtilitiesOut);
		// End - Scripting 15

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sModifyOrderId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())				
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;No Modify Order on Reference Number&quot;);
			return;
		}

		sRootItemId = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);

		if (sProdSubType == sPROD_SUB_TYPE_DECAF)
		{
			sPartNum = &quot;2000&quot;;
		}
		else
		{
			sPartNum = &quot;14300&quot;;
			sIMEI    = sParentMSISDN;
		}

		sResult = CompleteOrder(sModifyOrderId, sPartNum, sReferenceNumber, sRootItemId, sShopCode, sDealerCode, sIMEI);

		if (sResult != &quot;&quot;)
		{
			Outputs.SetProperty(&quot;ErrorMsg&quot;, &quot;Order Configuration failed&quot;);
			return;
		}
		
		sResult = SubmitOrder(sModifyOrderId);

		Outputs.SetProperty(&quot;ErrorMsg&quot;, sResult);
	}
	catch(oExcept)
	{
		Outputs.SetProperty(&quot;ErrorMsg&quot;, oExcept.toString());
	}
	finally
	{
		bcItem         = null;
		boOrder        = null;	
		psUtilitiesOut = null;
		psUtilitiesIn  = null;	
		bsUtilities    = null;	
	}
}"
			   SEQUENCE="21"
			   UPDATED="03/10/2017 16:30:25"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="07/04/2011 12:24:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateOrderData"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateOrderData(sRootAssetIntegId, sOrderId, sActionReasonLIC, bExpireBatchFlg, sExaToken)  //JIRA-31705:Added bExpireBatchFlg argument //JIRA-34229:Added sExaToken argument 
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcAsset : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var bcOrder : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);

		var sAssetDealerCode = &quot;&quot;;
		var sAssetShopCode   = &quot;&quot;;
		var sBusinessUnitId  = &quot;&quot;;
		var sActionReason    = &quot;&quot;;
		var sItemSearchExpr  = &quot;&quot;;

		if (sRootAssetIntegId == null || sRootAssetIntegId == &quot;&quot; ||
			sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;VF Originating Shop Code&quot;);
		bcAsset.ActivateField(&quot;VF Dealer Code&quot;);
		bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sRootAssetIntegId);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sAssetShopCode   = bcAsset.GetFieldValue(&quot;VF Originating Shop Code&quot;);
		sAssetDealerCode = bcAsset.GetFieldValue(&quot;VF Dealer Code&quot;);

		sBusinessUnitId = GetBU(&quot;Vodafone Organization&quot;);

		SetBUOrder(sOrderId, sBusinessUnitId);

		bcOrder.SetViewMode(AllView)
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;VF Prevent Automatic Cancellation&quot;);
		bcOrder.ActivateField(&quot;VF Shop Code&quot;);
		bcOrder.ActivateField(&quot;VFTRCBU ExpireBatch Flag&quot;); //JIRA-31705
		bcOrder.ActivateField(&quot;VF Dealer Code&quot;);
		bcOrder.ActivateField(&quot;Description&quot;); //JIRA-34229
		bcOrder.ActivateField(&quot;Primary Organization Id&quot;);
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		bcOrder.SetFieldValue(&quot;VF Prevent Automatic Cancellation&quot;, &quot;Y&quot;);

		if (sAssetShopCode != null &amp;&amp; sAssetShopCode != &quot;&quot;)
		{
			bcOrder.SetFieldValue(&quot;VF Shop Code&quot;, sAssetShopCode);
		}

		if (sAssetDealerCode != null &amp;&amp; sAssetDealerCode != &quot;&quot;)
		{
			bcOrder.SetFieldValue(&quot;VF Dealer Code&quot;, sAssetDealerCode);
		}

		if (sBusinessUnitId != null &amp;&amp; sBusinessUnitId != &quot;&quot;)
		{
			bcOrder.SetFieldValue(&quot;Primary Organization Id&quot;, sBusinessUnitId);
		}

        //JIRA-31705:Begin
		if (bExpireBatchFlg != null &amp;&amp; bExpireBatchFlg != &quot;&quot;)
		{
			bcOrder.SetFieldValue(&quot;VFTRCBU ExpireBatch Flag&quot;, bExpireBatchFlg);
		}
        //JIRA-31705:End

        //JIRA-34229:Begin
		if (sExaToken != null &amp;&amp; sExaToken != &quot;&quot;)
		{
			bcOrder.SetFieldValue(&quot;Description&quot;, sExaToken);
		}
        //JIRA-34229:End

		bcOrder.WriteRecord();

		if (sActionReasonLIC == null || sActionReasonLIC == &quot;&quot;)
		{
			return;
		}

		sActionReason   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,sActionReasonLIC);
		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Id]=[Root Order Item Id]&quot;;

		bcItem.SetViewMode(AllView)
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;TELCO Action Reason&quot;);
		bcItem.ActivateField(&quot;VF Logical Reason&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		do
		{
			bcItem.SetFieldValue(&quot;TELCO Action Reason&quot;, sActionReason);
			bcItem.SetFieldValue(&quot;VF Logical Reason&quot;,   &quot;000&quot;);
			
		}
		while (bcItem.NextRecord());

		bcItem.WriteRecord();
	}
	finally
	{
		bcItem  = null;
		bcOrder = null;
		bcAsset = null;
		boOrder = null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="03/10/2017 16:30:25"
			   UPDATED_BY="DGUERREIRO"
			   CREATED="12/23/2014 21:06:40"
			   CREATED_BY="JCARVALHO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



