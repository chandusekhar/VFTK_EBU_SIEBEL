<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="20140703 - VFTRCBU Project for WP#18 objects"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VFTRCBU EBU Conversion_Promotions"
	   UI_FREEZE="N"
	   UPDATED="11/09/2016 15:43:08"
	   UPDATED_BY="ESANTOS"
	   CREATED="07/03/2014 14:23:37"
	   CREATED_BY="RLOURENCO"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="WA#39:20140926:functions from old ACNSubmitOrder applet server script"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VFTREBU Convertion Server BS"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="11/09/2016 15:35:21"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="ESANTOS"
		   UPDATED="11/09/2016 15:43:08"
		   UPDATED_BY="ESANTOS"
		   CREATED="09/26/2014 16:06:31"
		   CREATED_BY="MSOUSA">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckAccountNull"
			   UPDATED="03/31/2015 21:42:35"
			   UPDATED_BY="SADMIN"
			   CREATED="03/31/2015 21:42:35"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/31/2015 21:42:35"
				   UPDATED_BY="SADMIN"
				   CREATED="03/31/2015 21:42:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sAct"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/31/2015 21:42:35"
				   UPDATED_BY="SADMIN"
				   CREATED="03/31/2015 21:42:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/31/2015 21:42:35"
				   UPDATED_BY="SADMIN"
				   CREATED="03/31/2015 21:42:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/31/2015 21:42:35"
				   UPDATED_BY="SADMIN"
				   CREATED="03/31/2015 21:42:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckAdapterNo"
			   UPDATED="10/16/2014 19:36:32"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 13:20:53"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:36:32"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:36:15"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:20:58"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:20:58"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:24:06"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:24:06"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckConfigState"
			   UPDATED="10/16/2014 19:36:39"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 14:00:41"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:36:34"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:36:34"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 14:00:56"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 14:00:56"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:24:46"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:24:46"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckDSPreSubmitValidations"
			   UPDATED="10/16/2014 19:36:46"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 16:10:16"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:36:41"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:36:41"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 16:10:23"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 16:10:23"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:25:14"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:25:14"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckGroupHead"
			   UPDATED="10/16/2014 19:36:56"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 18:38:21"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:36:51"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:36:51"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 18:38:25"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 18:38:25"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 18:40:00"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 18:40:00"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:25:34"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:25:34"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckHandsetCampIntegrity"
			   UPDATED="10/16/2014 19:37:05"
			   UPDATED_BY="VMATOS"
			   CREATED="10/01/2014 11:58:34"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:36:58"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:36:58"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 11:58:43"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 11:58:43"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:25:48"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:25:48"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckIMEICampagn"
			   UPDATED="10/16/2014 19:37:21"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 13:11:42"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:37:07"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:37:07"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:11:47"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:11:47"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:26:07"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:26:07"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckLastInvoice"
			   UPDATED="05/27/2015 14:52:52"
			   UPDATED_BY="JCARVALHO"
			   CREATED="09/29/2014 13:21:40"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:38:04"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:38:04"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:31:37"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:31:37"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:29:43"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:29:33"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderStatus"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/27/2015 14:52:52"
				   UPDATED_BY="JCARVALHO"
				   CREATED="09/29/2014 13:27:49"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:28:26"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:28:26"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:26:18"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:26:18"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMNPCustomerPoints"
			   UPDATED="10/16/2014 19:38:18"
			   UPDATED_BY="VMATOS"
			   CREATED="10/01/2014 17:07:02"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="found Discount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 17:07:06"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 17:07:06"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="itemIdWithDiscount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 17:07:24"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 17:07:24"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:38:12"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:38:12"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 17:07:41"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 17:07:41"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 17:07:13"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 17:07:13"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strValidationOnly"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 17:07:50"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 17:07:50"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:26:32"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:26:32"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMPBXGroup"
			   UPDATED="10/16/2014 19:38:29"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 14:43:46"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:38:21"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:38:21"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 14:43:57"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 14:43:57"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:32:52"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:32:52"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMSISDN_ICCID"
			   UPDATED="10/16/2014 19:38:40"
			   UPDATED_BY="VMATOS"
			   CREATED="10/01/2014 12:22:22"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:38:32"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:38:32"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 12:22:28"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 12:22:28"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:33:16"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:33:16"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMetropolis"
			   UPDATED="10/16/2014 19:38:53"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 13:08:06"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:38:44"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:38:44"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:08:14"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:08:14"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:33:30"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:33:30"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckModfyOli"
			   UPDATED="10/16/2014 19:39:04"
			   UPDATED_BY="VMATOS"
			   CREATED="10/01/2014 11:30:54"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:38:57"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:38:57"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 11:31:17"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 11:31:17"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:33:50"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:33:50"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckModifyIMSI"
			   UPDATED="10/16/2014 19:39:40"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 18:37:55"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:39:28"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:39:28"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 18:38:05"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 18:38:05"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:39:40"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:34:03"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOTP"
			   UPDATED="03/31/2015 21:42:35"
			   UPDATED_BY="SADMIN"
			   CREATED="03/31/2015 21:42:35"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/31/2015 21:42:35"
				   UPDATED_BY="SADMIN"
				   CREATED="03/31/2015 21:42:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/31/2015 21:42:35"
				   UPDATED_BY="SADMIN"
				   CREATED="03/31/2015 21:42:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/31/2015 21:42:35"
				   UPDATED_BY="SADMIN"
				   CREATED="03/31/2015 21:42:35"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOnBA"
			   UPDATED="10/01/2014 16:51:25"
			   UPDATED_BY="MSOUSA"
			   CREATED="10/01/2014 16:47:15"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="foundDiscount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 16:47:56"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 16:47:56"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 16:47:23"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 16:47:23"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 16:47:30"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 16:47:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOrder"
			   UPDATED="10/16/2014 19:39:53"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 12:54:39"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:39:48"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:39:48"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 12:54:45"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 12:54:45"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:34:25"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:34:25"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckOrderAttribute"
			   UPDATED="10/16/2014 19:40:01"
			   UPDATED_BY="VMATOS"
			   CREATED="10/01/2014 11:50:58"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:39:56"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:39:56"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 11:51:04"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 11:51:04"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:34:44"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:34:44"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckPSTN"
			   UPDATED="10/16/2014 19:40:08"
			   UPDATED_BY="VMATOS"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:40:04"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:40:04"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 12:46:55"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 12:39:26"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderSubTypeCalc"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 12:39:34"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 12:39:34"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:34:49"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:34:49"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckRequiredConfigFlag"
			   UPDATED="10/16/2014 19:40:15"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 13:39:03"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:40:10"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:40:10"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:39:26"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:39:26"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:35:08"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:35:08"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckSVBAllInOne"
			   UPDATED="10/16/2014 19:40:22"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 13:00:39"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:40:17"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:40:17"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 13:01:09"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 13:01:09"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:35:20"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:35:20"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FindDec"
			   UPDATED="10/16/2014 19:40:33"
			   UPDATED_BY="VMATOS"
			   CREATED="10/01/2014 17:21:47"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 17:22:17"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 17:22:12"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MarketType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 20:52:07"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 20:52:07"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 17:21:51"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 17:21:51"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:40:27"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:40:27"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:35:39"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:35:39"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="FindDiscountProd"
			   UPDATED="10/16/2014 19:40:50"
			   UPDATED_BY="VMATOS"
			   CREATED="10/01/2014 13:42:10"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="foundDiscount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/01/2014 13:43:49"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 13:43:49"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="foundPartNumItemSVB_GROUP"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/01/2014 16:16:29"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 16:16:00"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="itemIdWithDiscount"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/01/2014 13:43:35"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 13:43:35"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:40:45"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:40:45"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 13:42:16"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 13:42:16"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderReason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/07/2014 12:56:16"
				   UPDATED_BY="DGUERREIRO"
				   CREATED="10/01/2014 13:43:11"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderReasonCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/07/2014 12:56:24"
				   UPDATED_BY="DGUERREIRO"
				   CREATED="10/01/2014 13:42:59"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderSubType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 13:42:47"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 13:42:47"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderType"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 13:42:35"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 13:42:35"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strValidationOnly"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/01/2014 13:43:22"
				   UPDATED_BY="MSOUSA"
				   CREATED="10/01/2014 13:43:22"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:35:46"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:35:46"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GIBOrderMgmt"
			   UPDATED="09/29/2014 20:53:34"
			   UPDATED_BY="MSOUSA"
			   CREATED="09/29/2014 20:52:38"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 20:53:10"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 20:53:10"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strGIBCompStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 20:53:30"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 20:53:30"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 20:52:44"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 20:52:44"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="checkMTTGroup"
			   UPDATED="10/16/2014 19:41:06"
			   UPDATED_BY="VMATOS"
			   CREATED="09/29/2014 18:39:07"
			   CREATED_BY="MSOUSA">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="oResult"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/16/2014 19:40:58"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:40:58"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strBAId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 19:05:39"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 19:05:39"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strOrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/29/2014 19:05:32"
				   UPDATED_BY="MSOUSA"
				   CREATED="09/29/2014 19:05:32"
				   CREATED_BY="MSOUSA">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="strWkf"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/16/2014 19:36:00"
				   UPDATED_BY="VMATOS"
				   CREATED="10/16/2014 19:36:00"
				   CREATED_BY="VMATOS">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddSVBFee"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddSVBFee(Inputs:PropertySet, Outputs:PropertySet)
{
	try {
	
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);		//WA39:MSS
	
		var BoOrderEntry : BusObject	= TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);
	 	var BcOrderEntryLI : BusComp	= BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
	 	var bcOrder : BusComp			= BoOrderEntry.GetBusComp(&quot;TELCO Orders - Simple&quot;);
	 	var ActionNew					= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);		//MSS: &quot;Add&quot;
	 	var psInputs : PropertySet		= TheApplication().NewPropertySet();
	 	var psOutputs : PropertySet		= TheApplication().NewPropertySet();     
      	var bsVFOrders : Service 		= TheApplication().GetService(&quot;VF Orders&quot;);
	 	var strOrderType = &quot;&quot;;
		var strSVBFee = &quot;&quot;; 
		var strPartNum = &quot;&quot;; 
	 	var strExpr = &quot;&quot;;
	 	var strPricelist = &quot;&quot;;
	 	//Begin - Scripting 15 - Input validation 
		var inProp  :PropertySet = TheApplication().NewPropertySet();
		var outProp : PropertySet = TheApplication().NewPropertySet();
		var BS : Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		//End - Scripting 15

	 	
	 	bcOrder.SetViewMode(AllView); //Venkat- Modified as per Oracle Review Comment Using Literal Constant Instead of Named Constants
		bcOrder.ActivateField(&quot;Order Type&quot;);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchSpec (&quot;Id&quot;, strOrderId);
		BcOrderEntryLI.SetViewMode(AllView);
		BcOrderEntryLI.ClearToQuery();
		BcOrderEntryLI.ActivateField(&quot;Item Price List Id&quot;);
		BcOrderEntryLI.ActivateField(&quot;Part Number&quot;);

		//MSS: 4001=&quot;Voice 1500 Mins&quot;  4002=&quot;Voice 2500 Mins&quot;  4003=&quot;Voice 5000 Mins&quot;  4004=&quot;Voice 10000 Mins&quot;  4005=&quot;Voice 20000 Mins&quot;  4006=&quot;Voice 40000 Mins&quot;
		//MSS: 7001=&quot;Roaming Voice 150 Mins&quot;  7002=&quot;Roaming Voice 300 Mins&quot;  7003=&quot;Roaming Voice 600 Mins&quot;  7004=&quot;Roaming Voice 1200 Mins&quot;  
		//MSS: 8001=&quot;Roaming Data 100&quot;  8002=&quot;Roaming Data 250&quot;  8003=&quot;Roaming Data 500&quot;  8004=&quot;Roaming Data 750&quot;  
		//MSS: 9001=&quot;SMS 1000&quot;  9002=&quot;SMS 2500&quot;  9003=&quot;SMS 5000&quot;  9004=&quot;SMS 7500&quot;  9005=&quot;SMS 10000&quot;  9006=&quot;SMS 15000&quot;  
		//MSS: 10001=&quot;Data 5000&quot;  10002=&quot;Data 10000&quot;  10003=&quot;Data 20000&quot;  10004=&quot;Data 40000&quot;  10005=&quot;Data 60000&quot;  10006=&quot;Data 100000&quot;  
		//MSS  4020=&quot;SVB Fee&quot;
		//MSS: 7020=&quot;SVB Roaming Voice Fee&quot;
		//MSS: 8020=&quot;SVB Roaming Data Fee&quot;
		//MSS: 9020=&quot;SVB SMS Fee&quot;
		//MSS: 10020=&quot;SVB Data Fee&quot;
		strExpr = &quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND ([Part Number]= &apos;4001&apos; OR [Part Number]= &apos;4002&apos; OR [Part Number]= &apos;4003&apos; OR [Part Number]= &apos;4004&apos; OR [Part Number]= &apos;4005&apos; OR [Part Number]= &apos;4006&apos; OR&quot; //SVB Voice
									+&quot;[Part Number]= &apos;7001&apos; OR [Part Number]= &apos;7002&apos; OR [Part Number]= &apos;7003&apos; OR [Part Number]= &apos;7004&apos; OR&quot; //SVB Roaming Voice
									+&quot;[Part Number]= &apos;8001&apos; OR [Part Number]= &apos;8002&apos; OR [Part Number]= &apos;8003&apos; OR [Part Number]= &apos;8004&apos; OR&quot; //SVB Roaming Data
									+&quot;[Part Number]= &apos;9001&apos; OR [Part Number]= &apos;9002&apos; OR [Part Number]= &apos;9003&apos; OR [Part Number]= &apos;9004&apos; OR [Part Number]= &apos;9005&apos; OR [Part Number]= &apos;9006&apos; OR&quot; //SVB SMS
									+&quot;[Part Number]= &apos;10001&apos; OR [Part Number]= &apos;10002&apos; OR [Part Number]= &apos;10003&apos; OR [Part Number]= &apos;10004&apos; OR [Part Number]= &apos;10005&apos; OR [Part Number]= &apos;10006&apos;) AND [Action Code] = &apos;&quot;+ActionNew+&quot;&apos;&quot;; //SVB Data
	   BcOrderEntryLI.SetSearchExpr (strExpr);
	   bcOrder.ExecuteQuery (ForwardOnly); //DIVA 20120315 - Oracle review comments: ForwardOnly
	   
	   if(bcOrder.FirstRecord()) {
	    	strOrderType	= bcOrder.GetFieldValue(&quot;Order Type&quot;);
	  		if(strOrderType == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Modify Product &amp; Service&quot;)) {	//MSS: &quot;Modify Product &amp; Service&quot;
				if (BcOrderEntryLI.FirstRecord()) {	
					strPricelist = BcOrderEntryLI.GetFieldValue(&quot;Item Price List Id&quot;);
					strPartNum = BcOrderEntryLI.GetFieldValue(&quot;Part Number&quot;);
					if (strPartNum == &quot;4001&quot; || strPartNum == &quot;4002&quot; || strPartNum == &quot;4003&quot; || strPartNum == &quot;4004&quot; || strPartNum == &quot;4005&quot; || strPartNum == &quot;4006&quot;){
						strSVBFee = &quot;4020&quot;;   
					}
					else if (strPartNum == &quot;7001&quot; || strPartNum == &quot;7002&quot; || strPartNum == &quot;7003&quot; || strPartNum == &quot;7004&quot;){
						strSVBFee = &quot;7020&quot;;   
					}
					else if (strPartNum == &quot;8001&quot; || strPartNum == &quot;8002&quot; || strPartNum == &quot;8003&quot; || strPartNum == &quot;8004&quot;){
						strSVBFee = &quot;8020&quot;;   
					}
					else if (strPartNum == &quot;9001&quot; || strPartNum == &quot;9002&quot; || strPartNum == &quot;9003&quot; || strPartNum == &quot;9004&quot; || strPartNum == &quot;9005&quot; || strPartNum == &quot;9006&quot;){
						strSVBFee = &quot;9020&quot;;   
					}
					else if (strPartNum == &quot;10001&quot; || strPartNum == &quot;10002&quot; || strPartNum == &quot;10003&quot; || strPartNum == &quot;10004&quot; || strPartNum == &quot;10005&quot; || strPartNum == &quot;10006&quot;){
						strSVBFee = &quot;10020&quot;;   
					}
        			psInputs.SetProperty(&quot;orderId&quot;, strOrderId);
        			psInputs.SetProperty(&quot;priceListId&quot;, strPricelist);
        			psInputs.SetProperty(&quot;productPartNumber&quot;, strSVBFee);	
		        	bsVFOrders.InvokeMethod(&quot;addProductToOrder&quot;, psInputs, psOutputs);
					var res= psOutputs.GetProperty(&quot;Result&quot;);			
				}
			}
		}
    	return (CancelOperation);
	} //Close Try		
	finally
	{
		psOutputs		= null;
		psInputs		= null;
		bsVFOrders		= null;
		BS				= null;
	 	inProp			= null;
	 	outProp			= null;
		BcOrderEntryLI 	= null;
	 	bcOrder 		= null;
		BoOrderEntry 	= null;
		psInputs		= null;
		psOutputs		= null;
		bsVFOrders		= null;
	}
}//!function"
			   SEQUENCE="1"
			   UPDATED="01/26/2016 15:20:36"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAccountNull"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAccountNull (Inputs:PropertySet, Outputs:PropertySet)
{
   try
   {
		var BoOrderEntry : BusObject		= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var BcOrderEntryLI : BusComp		= BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var strVPN = &quot;3000&quot;;
		var strVPN2 = &quot;3001&quot;;
		var strVPN3 = &quot;3300&quot;;				
		var existingVPN = 0;
		var existingMobileLine = &quot;&quot;;
		var strMobileLine = &quot;1000&quot;;
		var strMessageCategory = &quot;&quot;;
		var strCode = &quot;&quot;;
		var sMsg = &quot;&quot;;
		//VFTRCBU Retrofits / WA#39 EBU Conversion - TiagoRocha - 20.03.2015 - Start
		//var strOrderId = this.BusComp().GetFieldValue(&quot;Id&quot;);
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);		
		//var sAct = this.BusComp().GetFieldValue(&quot;Account&quot;); 
		var sAct = Inputs.GetProperty(&quot;sAct&quot;);
		//End - 20.03.2015

			with(BcOrderEntryLI)
			{
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+  &quot;&apos; AND [Parent Order Item Id] is null  AND   ( [Part Number] = &apos;&quot;+strVPN+&quot;&apos; OR [Part Number] = &apos;&quot;+strVPN2+&quot;&apos; OR [Part Number] = &apos;&quot;+strVPN3+&quot;&apos; )&quot;);
				ExecuteQuery(ForwardOnly);
				
				if(FirstRecord())
					existingVPN = 1;
				else
					existingVPN = 0;
				
				//existingVPN = CountRecords();//CountRecords() shudn&apos;t be removed since Count is used for validation

				if(existingVPN == 0 &amp;&amp; (sAct == &quot;&quot; || sAct == null ))
				{
					strMessageCategory = &quot;VF Message Category&quot;;
                 	strCode = &quot;175&quot;;
                  	sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);
                  	TheApplication().RaiseErrorText(sMsg); 
				}
		     }
   }
   	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
   finally
   {
		BcOrderEntryLI 	= null;
		BoOrderEntry 	= null;
   }
}"
			   SEQUENCE="2"
			   UPDATED="01/26/2016 15:20:37"
			   UPDATED_BY="SADMIN"
			   CREATED="03/31/2015 21:42:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckActiveCampaign"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckActiveCampaign(sReferenceNumber)
{
	try
	{
		var boOrder	: BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boOrder.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sSearchExpr     = &quot;&quot;;
		var sErrorText      = &quot;&quot;;
		var sStatusInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);

		if (sReferenceNumber == null || sReferenceNumber == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Serial Number]=&apos;&quot; + sReferenceNumber + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusInactive +
					  &quot;&apos; AND [Id]=[Root Asset Id] AND [Prod Prom Instance Id] IS NOT NULL&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;260&quot;); //MSS: &quot;A campaign is in progress or is already active for Reference Number. Decaf cannot be activated for this mobile line.&quot;
			TheApplication().RaiseErrorText(sErrorText + &quot;: &quot; + sReferenceNumber);				
		}
	}
	finally
	{
		bcAsset = null;
		boOrder = null;
	}
}//!function"
			   SEQUENCE="3"
			   UPDATED="01/26/2016 15:20:37"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:36:16"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAdapterNo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAdapterNo (Inputs:PropertySet, Outputs:PropertySet) 
{
	try {
//		var strOrderId = this.BusComp().GetFieldValue(&quot;Id&quot;);		//WA39:MSS
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
	
		var OrderBO				= TheApplication().GetBusObject(&quot;VF HP Order Entry Line Items&quot;);
	    var BcOrderEntryLI    	= OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
	    var BcOrderEntryLIXA    = OrderBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);	
		var strAdd              = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);		//MSS: &quot;Add&quot;
		var strCountRecord      = &quot;&quot;;
		var strSearchExpr       = &quot;&quot;;
		var strAdapter          = &quot;&quot;;
		var AdapterNo = false;
	
		with(BcOrderEntryLI) {
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Adapter Number&quot;); 
			SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
			SetSearchSpec (&quot;VF Product Type&quot;,&quot;HANDSET&quot;); 
			SetSearchSpec (&quot;Action Code&quot;,strAdd);
			with(BcOrderEntryLIXA) {
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;Action Code&quot;);
				strSearchExpr = &quot;[Action Code] = &apos;&quot;+strAdd+&quot;&apos; AND [Name] = &apos;Adapter&apos; AND [Value] is not null&quot;;
				SetSearchExpr (strSearchExpr);
			} 
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()) {
				strAdapter = GetFieldValue(&quot;VF Adapter Number&quot;);
				if (strAdapter ==&quot;&quot; || strAdapter == null) {
					var strOrderItemId = GetFieldValue(&quot;Id&quot;);
					if(BcOrderEntryLIXA.FirstRecord())
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_373&quot;));		//MSS: &quot;Adapter No  field can not be empty.&quot;
				}
			}
		}
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally {
		BcOrderEntryLI = null;
		BcOrderEntryLIXA = null;
		OrderBO = null;
	}
}//!function"
			   SEQUENCE="4"
			   UPDATED="03/31/2015 21:42:35"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAmalfi"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAmalfi (Inputs:PropertySet, Outputs:PropertySet)
{
	// VFTK Amul 20120302 - Added this function for CR389 to handle below validation
	// For SME and SOHO, subscribers newer than 6 months, it is allowed to have maximum 50 lines for This Campaign
	try
	{
		var boAsset   : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var boAccount : BusObject = TheApplication().GetBusObject(&quot;TELCO Account - Simple&quot;);
		var bcAccount : BusComp   = boAccount.GetBusComp(&quot;TELCO Account - Simple&quot;);
		var bcAsset   : BusComp   = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sAccountId     = Inputs.GetProperty(&quot;AccountId&quot;);
		var sCustomerClass = Inputs.GetProperty(&quot;MarketType&quot;);
		var sCreated       = &quot;&quot;;
		var oCreated       = null;
		var iCreated       = 0;
		var iPlusSixMonths = 0;
		var oPlusSixMonths = null;
		var oToday         = null;
		var sSearchExpr    = &quot;&quot;;
		var sErrorText     = &quot;&quot;;

		var sClassSME             = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;CUSTOMER_CLASS&quot;,&quot;SME&quot;);
		var sClassSOHO            = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;CUSTOMER_CLASS&quot;,&quot;SOHO&quot;);
		var sStatusActive         = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var sProdTypeHANDSETPROMO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var sProdSubTypeAMALFI    = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;AMALFI&quot;);

		if (sAccountId == null || sAccountId == &quot;&quot;)
		{
			return;
		}

		if (sCustomerClass == null || sCustomerClass == &quot;&quot; ||
			(sCustomerClass != sClassSME &amp;&amp; sCustomerClass != sClassSOHO))
		{
			return;
		}

		bcAccount.SetViewMode(AllView);
		bcAccount.ClearToQuery();
		bcAccount.SetSearchExpr(&quot;[Id]=&apos;&quot; + sAccountId + &quot;&apos;&quot;);
		bcAccount.ExecuteQuery(ForwardOnly);

		if (!bcAccount.FirstRecord())
		{
			return;
		}

		sCreated       = bcAccount.GetFieldValue(&quot;Created&quot;);
		oCreated       = new Date(sCreated);
    	iCreated       = oCreated.toSystem();
    	iCreated       = iCreated * 1000;
		iPlusSixMonths = iCreated + 6*30*24*3600*1000;//Adding 6 month duration
		oPlusSixMonths = new Date(sCreated);
		oPlusSixMonths.setTime(iPlusSixMonths);
		oToday         = new Date();
		
		if (oPlusSixMonths &lt;= oToday)
		{
			return;
		}

		sSearchExpr = &quot;[Owner Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [Status]=&apos;&quot; + sStatusActive +
					  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
					  &quot;&apos; AND [VF Product Sub Type]=&apos;&quot; + sProdSubTypeAMALFI + &quot;&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.CountRecords() &gt; 50)//CountRecords shudn&apos;t be removed since Count is used for validation
		{
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_176&quot;);	//MSS: &quot;50 is the maximum limit, limit is exceeded&quot;
			TheApplication().RaiseErrorText(sErrorText);
		}
	}
	finally
	{
		bcAsset   = null;
		bcAccount = null;
		boAsset	  = null;
		boAccount = null;
	}
}//!function"
			   SEQUENCE="5"
			   UPDATED="01/26/2016 15:20:37"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCommitmentPeriod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCommitmentPeriod(argAssetId , argInstallDate) 
{

 // This function is not invoked first hand. It&apos;s an auxiliary function used by  &quot;manageActiveDiscountFlag&quot; function

	try {
		var currentDate = new Date;				
		var currdateComp = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());
		var dDate;
		var iTodaySec;
		var iDateSec;
		var iDiff;
		var iDiffHours;
		var custDate;
		var AssetMngtBo	= TheApplication().GetBusObject(&quot;Account&quot;); 
		var AssetMngtBCXA	= AssetMngtBo.GetBusComp(&quot;HP Submit - X Asset Mgmt - Asset XA&quot;);
		
		AssetMngtBCXA.SetViewMode(AllView);
		AssetMngtBCXA.ClearToQuery();
    	AssetMngtBCXA.ActivateField(&quot;Object Id&quot;);
    	AssetMngtBCXA.ActivateField(&quot;Name&quot;);
    	AssetMngtBCXA.ActivateField(&quot;Text Value&quot;);
		AssetMngtBCXA.SetSearchSpec(&quot;Object Id&quot;, argAssetId);
		AssetMngtBCXA.SetSearchSpec(&quot;Name&quot;, &quot;Commitment Duration&quot;);
		AssetMngtBCXA.ExecuteQuery(ForwardOnly);
		var booRecordExistsXA = AssetMngtBCXA.FirstRecord ();
	
		var commitmentDuration = null;
		if(booRecordExistsXA )
			commitmentDuration = AssetMngtBCXA.GetFieldValue(&quot;Text Value&quot;);
	
		if (commitmentDuration == null || commitmentDuration==&quot;&quot;)
			commitmentDuration = 12;
		
		dDate = new Date(argInstallDate);
		iTodaySec = currentDate.getTime()/1000;
		iDateSec = dDate.getTime()/1000;
		iDiff = Clib.difftime(iTodaySec,iDateSec);
		iDiffHours = (iDiff/60)/60
		
		if ( iDiffHours &lt; (30*24*commitmentDuration) )
			return true;
	    else
	    	return false;
	}			
	finally {
	   currentDate 		= null ;
		currdateComp		=  null
		dDate				= null;
		iTodaySec			= null;
		iDateSec			= null;
		iDiff 				= null;
		iDiffHours			= null;
		custDate			= null;
		AssetMngtBo			= null;
		AssetMngtBCXA		= null;
		commitmentDuration  = null;
 	}
}//!function"
			   SEQUENCE="6"
			   UPDATED="03/31/2015 21:42:35"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckConfigState"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckConfigState (Inputs:PropertySet, Outputs:PropertySet)
{
   try
   {
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;); //WA39:VFM.Changed to BC Light
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

   		var sOrderId        = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
   		var sItemSearchExpr = &quot;&quot;;
		var sErrroText      = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
						  &quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;)&quot; +
						  &quot; AND [Cfg State Code]=&apos;New Item&apos;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
		{
			//there is at least one item waiting to configure...
			sErrroText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;221&quot;);    //MSS: &quot;Mobile Line missing attributes&quot;
			TheApplication().RaiseErrorText(sErrroText);
		}
   }
   catch(e)
   {
   		//WA39:VFM.START
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
		//WA39:VFM.END
   }
   finally
   {
		bcItem  = null;
		boOrder = null;
   }
}"
			   SEQUENCE="7"
			   UPDATED="01/26/2016 15:20:38"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDSPreSubmitValidations"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckDSPreSubmitValidations (Inputs:PropertySet, Outputs:PropertySet) 
{
	try
	{
      	var booRecordExists;
		var psInputs  = TheApplication().NewPropertySet();
		var psOutputs = TheApplication().NewPropertySet();		
		var bsWorkflowProcess = TheApplication().GetService(&quot;Workflow Process Manager&quot;);

		//var boOrderEntry      = this.BusObject ();									//WA39:MSS
		//var bcOrderEntryItems = boOrderEntry.GetBusComp (&quot;Order Entry - Line Items&quot;)	//WA39:MSS
		//var booRecordExists = bcOrderEntryItems.FirstRecord ();						//WA39:MSS

		/* WA39:MSS Begin *********/
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);	
		var boOrderEntry      = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;); //WA39:VFM
		var bcOrderEntryItems = boOrderEntry.GetBusComp (&quot;TELCO Line Items - Simple&quot;);  //WA39:VFM
        with (bcOrderEntryItems) {
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
			ExecuteQuery(ForwardOnly);
			booRecordExists = FirstRecord();
		}
		/* WA39:MSS End  *********/
		
		if (booRecordExists)	
		{				
			psInputs.SetProperty(&quot;ProcessName&quot;, &quot;VF Data Sharing Order Pre Submit Validations WF&quot;);
			psInputs.SetProperty(&quot;Object Id&quot;, strOrderId);
			bsWorkflowProcess.InvokeMethod(&quot;RunProcess&quot;, psInputs, psOutputs);
			if(psOutputs.GetProperty(&quot;Error Code&quot;) != null &amp;&amp; psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;&quot;)
				TheApplication().RaiseErrorText(psOutputs.GetProperty(&quot;Error Message&quot;));          
		}
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally {
		boOrderEntry 	= null;
		bcOrderEntryItems 	= null;	
	}
}//!function"
			   SEQUENCE="9"
			   UPDATED="01/26/2016 15:20:38"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDataService"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckDataService(ReferenceNumber)
{
	try
	{
		var result = false;
		var strCode = &quot;&quot;;
		var sMsg = &quot;&quot;;
		var strMessageCategory 	= &quot;VF Message Category&quot;;
		var ActiveStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var RootAssetId = TheApplication().GetProfileAttr(&quot;RootAssetId&quot;);
		var BO = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var AssetBC = BO.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		with(AssetBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Root Asset Id] = &apos;&quot;+RootAssetId+&quot;&apos; AND [Status] = &apos;&quot;+ActiveStatus+&quot;&apos; AND [Product Part Number] = &apos;1103&apos;&quot;);		//MSS: &quot;VF_GPRS&quot;
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
			{
				result = true;
			}
		}
		AssetBC = null;
		BO = null;
		if (!result)
		{
			strCode = &quot;262&quot;;
			sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);		//MSS: &quot;Reference Number has no DATA service activated. Please activate DATA service for Reference Number.&quot;
			TheApplication().RaiseErrorText(sMsg+&quot;: &quot;+ReferenceNumber);	
		}
		return(CancelOperation);
	}
	finally
	{
		AssetBC = null;
		BO = null;
	}
}//! function"
			   SEQUENCE="8"
			   UPDATED="01/26/2016 15:20:38"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:43:54"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckGroupHead"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckGroupHead(Inputs:PropertySet, Outputs:PropertySet)
{
	try {
		var BoOrderEntryMACD   	: BusObject = TheApplication().GetBusObject(&quot;MACD Performance Order&quot;);
		var BcOrderEntryMACDLI 	: BusComp   = BoOrderEntryMACD.GetBusComp(&quot;MACD Order Entry - Line Items&quot;);	
		var BoGroups			: BusObject = TheApplication().GetBusObject(&quot;VF Groups BO&quot;);
		var BcGroupsAccount	  	: BusComp   = BoGroups.GetBusComp(&quot;VF Group Products BC&quot;);
		
//		var bcOrder         	= this.BusComp();				//WA39:MSS
		var strOrderId=Inputs.GetProperty(&quot;strOrderId&quot;);		//WA39:MSS	

		var found = &quot;&quot;;
		var groupHead = &quot;&quot;;
		var groupType = &quot;&quot;;
		var groupNr = &quot;&quot;;
		var strMessageCategory;
		var strCode;
		var sMsg;
		var strActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);					//MSS: &quot;Active&quot;
		var strInactive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);				//MSS: &quot;Inactive&quot;
		var searchGroup		= &quot;[Order Header Id] = &apos;&quot; + strOrderId + &quot;&apos; AND [Part Number] = &apos;3300&apos;&quot;;		//MSS: 3300=&quot;Group&quot;
		
//		var strOrderType=bcOrder.GetFieldValue(&quot;Order Type&quot;);	//WA39:MSS		
		var strOrderType=Inputs.GetProperty(&quot;strOrderType&quot;);	//WA39:MSS	
		var strOrderTypeLOV = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Disconnect&quot;);	//MSS: &quot;Disconnect&quot;
		var strAssetIntId = &quot;&quot;;
		
		with(BcOrderEntryMACDLI) {
			ActivateField(&quot;VF Group Head&quot;);
			ActivateField(&quot;Part Number&quot;);
			ActivateField(&quot;Order Header Id&quot;);
			ActivateField(&quot;VF Group Nr&quot;);
			ActivateField(&quot;VF Group Type&quot;);
			ActivateField(&quot;Asset Integration Id&quot;);
			ClearToQuery();
			SetViewMode(AllView);
			SetSearchExpr(searchGroup);
			ExecuteQuery(ForwardOnly);
			found = FirstRecord();
			
			while(found) {
				groupHead = GetFieldValue(&quot;VF Group Head&quot;);
				groupType = GetFieldValue(&quot;VF Group Type&quot;);
				groupNr = GetFieldValue(&quot;VF Group Nr&quot;);
				strAssetIntId = GetFieldValue(&quot;Asset Integration Id&quot;);
				
				//VFTRCBU-26367 || FGUEDES - To avoid query error
				var p = /(&apos;)/g;
				groupType = groupType.replace(p, &quot;&apos;&apos;&quot;); //JFONSECA - VFTRCBU-27328
				
				if (groupHead != &quot;&quot; &amp;&amp; strOrderType != strOrderTypeLOV){ // TLG-5421
					with(BcGroupsAccount){
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchExpr(&quot;[VF Msisdn] = &apos;&quot; + groupHead + &quot;&apos; AND [VF Status] = &apos;&quot;+strActive+&quot;&apos; AND [VF Root Group Type] = &apos;&quot;+groupType+&quot;&apos; AND [VF Root Group Nr] =&apos;&quot;+groupNr+&quot;&apos;&quot;);
						ExecuteQuery(ForwardOnly);
						if(!FirstRecord()) {
							strMessageCategory = &quot;VF Message Category&quot;;
							strCode = &quot;RSTAB_002&quot;;
							sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);  //MSS: &quot;Group Head should -be an active line which is already under the group.&quot;
							TheApplication().RaiseErrorText(sMsg);
						}
					}
				}
				found = NextRecord();
			}
		}
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally {
		BcGroupsAccount		= null;
		BcOrderEntryMACDLI	= null;
		BoOrderEntryMACD	= null;
		BoGroups			= null;
//		bcOrder				= null;			//WA39:MSS
	}
}//!function"
			   SEQUENCE="10"
			   UPDATED="03/31/2016 11:34:34"
			   UPDATED_BY="JFONSECA"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckHandsetCampDebundle"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckHandsetCampDebundle(psInputs, psOutputs)
{
	try
	{
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		var sOrderId    = psInputs.GetProperty(&quot;OrderId&quot;);
		var sSearchExpr = &quot;&quot;;
		var sErrorCode  = &quot;&quot;;
		var handsetDel = false;
		var bpDel = false;

		var sActionNew                = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sActionDel                = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);		
		var sProdGroupCAMPCONTAINER   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP CONTAINER&quot;);
		var sProdTypeHANDSETCONTAINER = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET CONTAINER&quot;);
		var sProdGroupCAMPPROMO   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_GROUP&quot;,&quot;CAMP PROMO&quot;);
		var sProdTypeHANDSETPROMO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);

		psOutputs.SetProperty(&quot;ErrorMessage&quot;,     &quot;&quot;);
		psOutputs.SetProperty(&quot;CampaignStatus&quot;, &quot;OK&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionDel +
					  &quot;&apos; AND [VF Product Group]=&apos;&quot; + sProdGroupCAMPCONTAINER +
					  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETCONTAINER +
					  &quot;&apos; AND [Prod Prom Instance Id] IS NULL&quot;; 

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Order Header Id&quot;);
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcItem.ActivateField(&quot;VF Product Group&quot;);
		bcItem.ActivateField(&quot;VF Product Type&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
			handsetDel = true;
			
		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionDel +
					  &quot;&apos; AND [VF Product Group]=&apos;&quot; + sProdGroupCAMPPROMO +
					  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +&quot;&apos;&quot;; 

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Order Header Id&quot;);
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcItem.ActivateField(&quot;VF Product Group&quot;);
		bcItem.ActivateField(&quot;VF Product Type&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
			bpDel = true;
			
		if(!bpDel &amp;&amp; handsetDel)
		{
			psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;Debundle: Order configuration is invalid.&quot;);
			psOutputs.SetProperty(&quot;CampaignStatus&quot;, &quot;NOK&quot;);
			return;
		}
		else if(bpDel &amp;&amp; !handsetDel)
		{
			sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionNew +
						  &quot;&apos; AND [VF Product Group]=&apos;&quot; + sProdGroupCAMPPROMO +
						  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +&quot;&apos;&quot;; 

			bcItem.ClearToQuery();
			bcItem.SetViewMode(AllView);
			bcItem.ActivateField(&quot;Order Header Id&quot;);
			bcItem.ActivateField(&quot;Action Code&quot;);
			bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
			bcItem.ActivateField(&quot;VF Product Group&quot;);
			bcItem.ActivateField(&quot;VF Product Type&quot;);
			bcItem.SetSearchExpr(sSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);
			
			if (!bcItem.FirstRecord())
			{
				psOutputs.SetProperty(&quot;ErrorMessage&quot;, &quot;Debundle: Order configuration is invalid.&quot;);
				psOutputs.SetProperty(&quot;CampaignStatus&quot;, &quot;NOK&quot;);
				return;
			}	
		} 
		
		psOutputs.SetProperty(&quot;CampaignStatus&quot;, &quot;OK&quot;);
			
	}
	catch(oExcep)
	{
		psOutputs.SetProperty(&quot;ErrorMessage&quot;,     &quot;Debundle: &quot; + oExcep.errText);
		psOutputs.SetProperty(&quot;CampaignStatus&quot;, &quot;NOK&quot;); 
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="01/26/2016 15:20:36"
			   UPDATED_BY="SADMIN"
			   CREATED="01/26/2016 15:20:36"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckHandsetCampIntegrity"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckHandsetCampIntegrity (Inputs:PropertySet, Outputs:PropertySet)
{
	try {
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);						//WA39:MSS
		
		var ControlsBS = TheApplication().GetService(&quot;VF Controls&quot;);
		var psInputs = TheApplication().NewPropertySet();
		var psOutputs = TheApplication().NewPropertySet();
		var sErrorCode = &quot;&quot;;
		var sErrorMessage = &quot;&quot;;

		psInputs.SetProperty(&quot;OrderId&quot;, strOrderId);
		ControlsBS.InvokeMethod(&quot;CheckHandsetCampIntegrity&quot;, psInputs, psOutputs);
		sErrorCode = psOutputs.GetProperty(&quot;Error Code&quot;);
		if (sErrorCode != &quot;&quot; &amp;&amp; sErrorCode != null) {
			sErrorMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
			TheApplication().RaiseErrorText(sErrorMessage);
		}
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally {
		ControlsBS = null;
		psInputs = null;
		psOutputs = null;
	}
}//! NEW function CheckHandsetCampIntegrity (OrderId) for CBU"
			   SEQUENCE="12"
			   UPDATED="01/26/2016 15:20:39"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckIMEICampagn"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckIMEICampagn(Inputs:PropertySet, Outputs:PropertySet)
{	//Amul - Logic has been changed for C_MSP00000367
	try
	{
		var boOrder      : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
	   	var bcItem       : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
    	var bsControl    : Service     = null;
    	var psControlIn  : PropertySet = null;
    	var psControlOut : PropertySet = null;

		var sOrderId        = Inputs.GetProperty(&quot;strOrderId&quot;);
		var sItemSearchExpr = &quot;&quot;;
		var sActionAdd      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var sActionDel      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
		var sItemAction     = &quot;&quot;;
		var sAddIMEI        = &quot;&quot;;
		var sAddAdapter     = &quot;&quot;;
		var sAddItemId      = &quot;&quot;;
		var sAddRootItemId  = &quot;&quot;;
		var sDelIMEI        = &quot;&quot;;
		var sDelAdapter     = &quot;&quot;;
		var sDelItemId      = &quot;&quot;;
		var sDelRootItemId  = &quot;&quot;;
		var sResult			= false;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [VF Product Type]=&apos;HANDSET&apos; AND &quot; +
						  &quot;([Action Code]=&apos;&quot; + sActionAdd + &quot;&apos; OR [Action Code]=&apos;&quot; + sActionDel + &quot;&apos;)&quot;;

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;VF IMEI&quot;);
		bcItem.ActivateField(&quot;VF Adapter Number&quot;);
		bcItem.ActivateField(&quot;Root Order Item Id&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		do
		{
			sItemAction = bcItem.GetFieldValue(&quot;Action Code&quot;);

			if (sItemAction == sActionAdd)
			{
				sAddIMEI    = bcItem.GetFieldValue(&quot;VF IMEI&quot;);
				sAddAdapter = bcItem.GetFieldValue(&quot;VF Adapter Number&quot;);

				if (sAddItemId != null &amp;&amp; sAddItemId != &quot;&quot; &amp;&amp;
					((sAddIMEI == null || sAddIMEI == &quot;&quot;) &amp;&amp; (sAddAdapter == null || sAddAdapter == &quot;&quot;)))
				{
					// MSS: &quot;IMEI field can not be empty.&quot;
					TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorCode&quot;, &quot;R142_362&quot;);
					TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;, TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_362&quot;));
	 				TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_362&quot;));
	 				return;
				}

				sAddItemId     = bcItem.GetFieldValue(&quot;Id&quot;);
				sAddRootItemId = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);
			}

		 	if (sItemAction == sActionDel)
		 	{	
				sDelIMEI       = bcItem.GetFieldValue(&quot;VF IMEI&quot;);
				sDelAdapter    = bcItem.GetFieldValue(&quot;VF Adapter Number&quot;);
 				sDelItemId     = bcItem.GetFieldValue(&quot;Id&quot;);
 				sDelRootItemId = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);
 			}
 		}
 		while (bcItem.NextRecord());

		if (sAddItemId == null || sAddItemId == &quot;&quot;)
		{
			return;
		}

		if (sDelItemId == null || sDelItemId == &quot;&quot;)
		{
			if ((sAddIMEI == null || sAddIMEI == &quot;&quot;) &amp;&amp; (sAddAdapter == null || sAddAdapter == &quot;&quot;))
			{
				// MSS: &quot;IMEI field can not be empty.&quot;
				TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorCode&quot;, &quot;R142_362&quot;);
				TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;, TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_362&quot;));
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_362&quot;));
			}

			return;
		}

		bsControl    = TheApplication().GetService(&quot;VF Controls&quot;);
		psControlIn  = TheApplication().NewPropertySet();
		psControlOut = TheApplication().NewPropertySet();

		psControlIn.SetProperty(&quot;ItemId&quot;,sAddItemId);

		psControlIn.SetProperty(&quot;ItemIdAdd&quot;,  sAddRootItemId);
		psControlIn.SetProperty(&quot;ItemIdDell&quot;, sDelRootItemId);

		bsControl.InvokeMethod(&quot;CheckUpgrade&quot;, psControlIn, psControlOut);
 
 		sResult = psControlOut.GetProperty(&quot;result&quot;);
 
 		if (sResult == &quot;true&quot;)
 		{
			bcItem.ClearToQuery();
			bcItem.SetViewMode(AllView);
			bcItem.ActivateField(&quot;VF IMEI&quot;);
			bcItem.ActivateField(&quot;VF Adapter Number&quot;);
			bcItem.SetSearchSpec(&quot;Id&quot;, sAddItemId);
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord())
			{
				bcItem.SetFieldValue(&quot;VF IMEI&quot;,           sDelIMEI);
				bcItem.SetFieldValue(&quot;VF Adapter Number&quot;, sDelAdapter);
				bcItem.WriteRecord();
			}

			return;	
 		}
 
 		if ((sAddIMEI == null || sAddIMEI == &quot;&quot;) &amp;&amp; (sAddAdapter == null || sAddAdapter == &quot;&quot;))
 		{
			TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorCode&quot;, &quot;R142_362&quot;);
			TheApplication().SetProfileAttr(&quot;LastUserDefinedErrorMessage&quot;, TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_362&quot;));
			TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_362&quot;));
 		}
	}
	catch (e)
	{  
		var oError = e;
		if (Inputs.GetProperty(&quot;strWkf&quot;) == &quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;, oError.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(oError);
	}
	finally
	{
		psControlOut = null;
		psControlIn  = null;
		bsControl    = null;
		bcItem       = null;
		boOrder      = null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="01/26/2016 15:20:39"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLastInvoice"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLastInvoice(Inputs:PropertySet, Outputs:PropertySet)  
{
	try
	{
	  	var boOrder        : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	  	//var bcOrder        : BusComp     = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var bcItem         : BusComp     = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var bsUtilities    : Service     = TheApplication().GetService(&quot;TELCO Order Management Utilities&quot;);
		var psUtilitiesIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut : PropertySet = TheApplication().NewPropertySet();

		var sOrderId        = Inputs.GetProperty(&quot;strOrderId&quot;);		//WA39:MSS
	  	var sOrderType      = Inputs.GetProperty(&quot;strOrderType&quot;);	//WA39:MSS
		var sOrderReason    = Inputs.GetProperty(&quot;strOrderReason&quot;);	//WA39:MSS
		var sItemSearchExpr = &quot;&quot;;
		var sRootAssetId    = &quot;&quot;;
		var sErrorCode      = &quot;&quot;;
		var sErrorMessage   = &quot;&quot;;

		var sTypeDisconnect     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Disconnect&quot;);				//MSS: &quot;Disconnect&quot;
		var sReasonRejectFraud  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1018&quot;);					//MSS: &quot;Reject-Fraud&quot;
		var sReasonRejectCredit = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;1019&quot;);					//MSS: &quot;Reject - Credit Risk&quot;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		if (sOrderType == null || sOrderType == &quot;&quot; || sOrderType != sTypeDisconnect)
		{
			return;
		}

		if (sOrderReason == null || sOrderReason == &quot;&quot; ||
			(sOrderReason != sReasonRejectCredit &amp;&amp; sOrderReason != sReasonRejectFraud))
		{
			return;
		}

		//bcOrder.ClearToQuery();
		//bcOrder.SetViewMode(AllView);
		//bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		//bcOrder.ExecuteQuery(ForwardOnly);

		//if (!bcOrder.FirstRecord())
		//{
		//	return;
		//}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
						  &quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;) AND [Id]=[Root Order Item Id]&quot;;

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;VF Orig Asset Id&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sRootAssetId = bcItem.GetFieldValue(&quot;VF Orig Asset Id&quot;);

		if (sRootAssetId == null || sRootAssetId == &quot;&quot;)
		{
			return;
		}

		psUtilitiesIn.SetProperty(&quot;AssetId&quot;, sRootAssetId);

		bsUtilities.InvokeMethod(&quot;CheckLastInvoiceDate&quot;, psUtilitiesIn, psUtilitiesOut);

		sErrorCode    = psUtilitiesOut.GetProperty(&quot;Error Code&quot;);
		sErrorMessage = psUtilitiesOut.GetProperty(&quot;Error Message&quot;);

		if (sErrorCode == &quot;0&quot;)
		{
			return;
		}

		TheApplication().RaiseErrorText(sErrorMessage);
		// END ADDED CODE FOR R142-WP16
	}
	//WA39:VFM.START
	catch (e)
	{  
		var err = e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally
	{
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;
	  	bcItem         = null;
	  	//bcOrder	       = null;
	  	boOrder	       = null;
	}
}//! NEW function CheckLastInvoice() for CBU"
			   SEQUENCE="14"
			   UPDATED="01/26/2016 15:20:39"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLimit"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLimit(sAccountId,sProdSubType)
{
	try
	{
		var boAsset : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem  : BusComp   = null;

		var sSearchExpr   = &quot;&quot;;
		var iAssetCounter = 0;
		var iItemCounter  = 0;
		var sErrorCode    = &quot;&quot;;
		var sErrorText    = &quot;&quot;;

		var sStatusActive         = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);
		var sProdTypeHANDSETPROMO = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET PROMO&quot;);
		var sStatusCancelled	  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var sStatusComplete       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var sStatusRejected       = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Rejected&quot;);
		var sActionCodeNew        = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sLOVTypeLimit         = (sProdSubType == &quot;AMALFI&quot;)?&quot;AMALFI_LIMIT&quot;:&quot;DECAF_LIMIT&quot;;			
		var sLimit                = TheApplication().InvokeMethod(&quot;LookupValue&quot;,sLOVTypeLimit,&quot;Limit&quot;);

		if (sAccountId == null || sAccountId == &quot;&quot; || sProdSubType == null || sProdSubType == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Owner Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [Status]=&apos;&quot; + sStatusActive+
					  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
					  &quot;&apos; AND [VF Product Sub Type]=&apos;&quot; + sProdSubType + &quot;&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);
		iAssetCounter = bcAsset.CountRecords();

		bcItem = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		sSearchExpr = &quot;[Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled +
					  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusComplete + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusRejected +
					  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSETPROMO +
					  &quot;&apos; AND [VF Product Sub Type]=&apos;&quot; + sProdSubType + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionCodeNew + &quot;&apos;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);
		iItemCounter = bcItem.CountRecords();//Oracle Review - Needed for logic

		if (iItemCounter + iAssetCounter &lt; sLimit)
		{
			return;
		}

		sErrorCode = (sProdSubType == &quot;AMALFI&quot;)?&quot;R21_175&quot;:&quot;261&quot;;						//MSS: &quot;UP TO 50 NUMBERS ARE ALLOWED TO ENTER THIS CAMPAIGN. ENTRANCE NOT ALLOWED AS 50 NUMBERS ALREADY REGISTERED ON THE CAMPAIGN&quot;
		sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);	//MSS: &quot;50 is the maximum threshold for Decaf product and it is exceeded.&quot;
		TheApplication().RaiseErrorText(sLimit + &quot; &quot; + sErrorText);
	}
	finally
	{
		bcItem  = null;
		bcAsset = null;
		boOrder = null;
		boAsset = null;
	}
}//! NEW function CheckLimit(sAccountId,sProdSubType) for CBU"
			   SEQUENCE="15"
			   UPDATED="01/26/2016 15:20:39"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMNPCustomerPoints"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMNPCustomerPoints (Inputs:PropertySet, Outputs:PropertySet)	
{

  try 
  {
	var foundDiscount = Inputs.GetProperty(&quot;found Discount&quot;);
	var strOrderType = Inputs.GetProperty(&quot;strOrderType&quot;);
    var strOrderTypeDisconnect = (strOrderType == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Disconnect&quot;)) ? &quot;Y&quot; : &quot;N&quot;;	 //MSS: Disconnect	
	var itemIdWithDiscount = Inputs.GetProperty(&quot;itemIdWithDiscount&quot;);
	var strAccountId = Inputs.GetProperty(&quot;strAccountId&quot;);
	var strValidationOnly = Inputs.GetProperty(&quot;strValidationOnly&quot;);

	var InputsCheck : PropertySet;
	var OutputsCheck : PropertySet;
	var bsVFVodamoney : Service;

	if ((foundDiscount || foundDiscount== &quot;Y&quot; || foundDiscount == &quot;true&quot;) &amp;&amp;
		strOrderTypeDisconnect != &quot;Y&quot;) //Check The VF_DISCOUNT PRODUCT. Only 1 product x Billing Account
	{
	  // Vodamoney checks for MNP Customer and amount of points
	  bsVFVodamoney=TheApplication().GetService(&quot;VF Vodamoney Validation&quot;);
	  InputsCheck = TheApplication().NewPropertySet();
	  OutputsCheck = TheApplication().NewPropertySet();
			
	  InputsCheck.SetProperty(&quot;OrderItemId&quot;, itemIdWithDiscount);
	  InputsCheck.SetProperty(&quot;AccountId&quot;, strAccountId);
	  bsVFVodamoney.InvokeMethod(&quot;ValidateDiscount&quot;, InputsCheck, OutputsCheck);

	  var resultScore = OutputsCheck.GetProperty(&quot;ResultScore&quot;);
	  var resultCheck = OutputsCheck.GetProperty(&quot;resultCheckInternal&quot;);
	  var resultCheckCustomer=OutputsCheck.GetProperty(&quot;ResultCustomerType&quot;);		
	  var attrTotalDeviceAmount = OutputsCheck.GetProperty(&quot;attrTotalDeviceAmount&quot;);
	  var sMsg1 = OutputsCheck.GetProperty(&quot;sMsg&quot;);
         			
      if(resultScore == &quot;OK&quot;)
	  {
		if (strValidationOnly != &quot;Y&quot;)
		{
		  var InputsTDA:PropertySet = TheApplication().NewPropertySet();
		  var OutputsTDA:PropertySet = TheApplication().NewPropertySet();
		  InputsTDA.SetProperty(&quot;ItemId&quot;, itemIdWithDiscount);
		  InputsTDA.SetProperty(&quot;attrTotalDeviceAmount&quot;, attrTotalDeviceAmount)
          SetTotalDeviceAmount(InputsTDA , OutputsTDA);
		}																						  
      }
          		
	  if (resultScore == &quot;KO&quot; &amp;&amp;  (resultCheck!= &quot;KO1&quot; || resultCheck == &quot;KO2&quot;))
	  {	
		var strMessageCategory=&quot;VF Message Category&quot;;
		var strCode=&quot;196&quot;;
		var sMsg=TheApplication().LookupMessage(strMessageCategory, strCode);	//MSS: &quot;The total Vodamoney points for selected devices is above the allowed total for the selected plan.  Please review the Discount product.&quot;
		TheApplication().RaiseErrorText(sMsg);
	  }
	  else 
	  {
		if (resultScore == &quot;KO&quot; &amp;&amp;  (resultCheck == &quot;KO1&quot; || resultCheck == &quot;KO2&quot;) )
		{
		  TheApplication().RaiseErrorText(sMsg1);
		}
	  }
	  // bsVFVodamoney = null;
	}// if 
  }
  //WA39:VFM.START
   catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
  finally
  {
	bsVFVodamoney = null;
	InputsCheck = null;
	OutputsCheck = null;
	InputsTDA = null;
	OutputsTDA = null;
  }
}//! function CheckMNPCustomerPoints"
			   SEQUENCE="17"
			   UPDATED="01/26/2016 15:20:40"
			   UPDATED_BY="SADMIN"
			   CREATED="09/30/2014 17:37:33"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMPBXGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMPBXGroup (Inputs:PropertySet, Outputs:PropertySet) 				
{
 try {
	var arrMyArr = new Array();
	var OrderItemBCExists;
	var A = 0;
	var Msg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;JUL_01&quot;);			//MSS: MSISDN of Access Number duplicate; Please Check;
	
	var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
						
	var BoOrderEntry : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	var BcOrderEntryLI : BusComp = BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		
	with (BcOrderEntryLI) {
		SetViewMode(AllView);
		ClearToQuery();
		ActivateField(&quot;VF Member Asset Id&quot;);
		SetSearchSpec(&quot;Order Header Id&quot;, strOrderId);
		SetSearchSpec(&quot;Part Number&quot;,&quot;9080&quot;);
		SetSortSpec (&quot;VF Member Asset Id(DESCENDING)&quot;);
		ExecuteQuery(ForwardOnly);
		OrderItemBCExists = FirstRecord();
		var count = CountRecords();
		while (OrderItemBCExists) {
			arrMyArr[count];
			var AssetId = BcOrderEntryLI.GetFieldValue(&quot;VF Member Asset Id&quot;);
			arrMyArr[A]=AssetId;
			A = A + 1;
			OrderItemBCExists = NextRecord();
		}
	}

	if (arrMyArr.length &gt; 1) {
		for ( var i = 0; i &lt; getArrayLength(arrMyArr)-1; i++ ) { 
			 if( arrMyArr[i]== arrMyArr[i+1])
			     TheApplication().RaiseErrorText(Msg);
		}
	}		
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	 finally
   {
    BcOrderEntryLI = null;
    BoOrderEntry = null;
  }//! 
}//! NEW function CheckMPBXGroup (strOrderId) for CBU"
			   SEQUENCE="20"
			   UPDATED="01/26/2016 15:20:40"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMSISDN_ICCID"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMSISDN_ICCID (Inputs:PropertySet, Outputs:PropertySet)
{	
  try
  {
    var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);
    var strMessageCategory;
    var strCode;
    var sMsg;
    
    var bsOrderMng : Service = TheApplication().GetService(&quot;ACS Order Management&quot;);
    var InputsMSI_ICCID : PropertySet = TheApplication().NewPropertySet();
    var OutputsMSI_ICCID : PropertySet = TheApplication().NewPropertySet();

    InputsMSI_ICCID.SetProperty(&quot;OrderID&quot;, strOrderId);
    bsOrderMng.InvokeMethod(&quot;CheckMSISDN_ICCID&quot;, InputsMSI_ICCID, OutputsMSI_ICCID);
    var result2 = OutputsMSI_ICCID.GetProperty(&quot;Result&quot;);
    if (result2 == &quot;KO&quot;)
    {
      strMessageCategory = &quot;VF Message Category&quot;;
      strCode = &quot;101&quot;;
      sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);	//MSS: MSISDN or ICCID is missing!
      TheApplication().RaiseErrorText(sMsg);
	}
  }
  //WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
  finally
  {
    OutputsMSI_ICCID = null;
    InputsMSI_ICCID = null;
    bsOrderMng = null;
  }//! 
}"
			   SEQUENCE="21"
			   UPDATED="01/26/2016 15:20:40"
			   UPDATED_BY="SADMIN"
			   CREATED="10/01/2014 12:11:20"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMetropolis"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMetropolis(Inputs:PropertySet, Outputs:PropertySet) 
{ 
// WP1 YGhazi 30/05/2011
	try {
//		var strOrderId = this.BusComp().GetFieldValue(&quot;Id&quot;);		//WA39:MSS
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
		
		var strBA = &quot;&quot;;
		var AssetBO				= TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var LIBO				= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var LIBO2				= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	    var AssetBC				= AssetBO.GetBusComp(&quot;TELCO Asset - Simple&quot;);
	    var BcOrderEntryLI    	= LIBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
	    var BcOrderEntryLI2    	= LIBO2.GetBusComp(&quot;TELCO Line Items - Simple&quot;);			
		var strAdd              = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var strCountRecord      = &quot;&quot;;
		var strNext				= &quot;&quot;;
		with(BcOrderEntryLI) {
			ClearToQuery();
			SetViewMode(AllView);
	 		ActivateField(&quot;Order Header Id&quot;);  
	 		ActivateField(&quot;Part Number&quot;);
	 		ActivateField(&quot;Billing Account Id&quot;);
 			SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
 			SetSearchSpec (&quot;Part Number&quot;, &quot;14100&quot;);						//MSS: Product=Metropolis
 			SetSearchSpec (&quot;Action Code&quot;,strAdd);
 			ExecuteQuery(ForwardOnly);
			strNext = FirstRecord();
			while(strNext) {
				strBA = GetFieldValue(&quot;Billing Account Id&quot;);
				with(AssetBC) {
					ClearToQuery();
					SetViewMode(AllView);
					ActivateField(&quot;Product Part Number&quot;); 
					SetSearchSpec (&quot;Billing Account Id&quot;, strBA);
					SetSearchSpec (&quot;Product Part Number&quot;, &quot;14100&quot;);		//MSS: Product=Metropolis
					ExecuteQuery(ForwardOnly);	  
					if (FirstRecord())
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_328&quot;));  //MSS: &quot;A new mobile line cannot be activated under this Billing Account. Metropolis Campaign is active.&quot;
				}
				with(BcOrderEntryLI2) {
					SetViewMode(AllView);
					ClearToQuery();	 
					SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
					SetSearchSpec (&quot;Billing Account Id&quot;, strBA);
					SetSearchSpec (&quot;Part Number&quot;, &quot;14100&quot;); 
					strCountRecord = CountRecords();
					if (strCountRecord &gt; 1)
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_053&quot;)); //MSS: Only 1 Metropolis campaign can be activated under one billing account
				}			
				strNext = NextRecord();
			}
		}
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally	{
		
		AssetBC = null;
		BcOrderEntryLI2 = null;
		BcOrderEntryLI	= null;
		AssetBO = null;
		LIBO	= null;
		LIBO2	= null
	}
	// WP1 YGhazi 30/05/2011
}//! NEW function CheckMetropolis() for CBU"
			   SEQUENCE="16"
			   UPDATED="01/26/2016 15:20:40"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckModfyOli"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckModfyOli (Inputs:PropertySet, Outputs:PropertySet) 
{
	try {
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);						//WA39:MSS
	    
		var BoOrderEntry 	: BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var BcOrderEntryLI 	: BusComp   = BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var Existing 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);				//MSS: &quot;-&quot;
		var search 			= &quot;[Order Header Id] = &apos;&quot; + strOrderId + &quot;&apos; AND [Action Code] &lt;&gt; &apos;&quot; + Existing + &quot;&apos;&quot;;
		var found 			= &quot;&quot;;
		var strActive 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);													//MSS: &quot;Active2
		var strMessageCategory;
      var strCode;
      var sMsg;
		
		if (strOrderId != null &amp;&amp; strOrderId != &quot;&quot;) {
			with(BcOrderEntryLI) {
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(search);
				ExecuteQuery(ForwardOnly);
				if (!FirstRecord()) {
       		       strMessageCategory = &quot;VF Message Category&quot;;
                   strCode = &quot;200&quot;;
                   sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);				//MSS: &quot;Please modify at last one item before submit the order.&quot;
                   TheApplication().RaiseErrorText(sMsg);              	
				}	
			}
		}	
		//CheckCompatibleTariffs(); //CR389 ++ Bundled Promotions
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally {
		BcOrderEntryLI 	= null;
		BoOrderEntry 	= null;		
	}
}//! NEW function CheckModfyOli(strOrderId)"
			   SEQUENCE="18"
			   UPDATED="01/26/2016 15:20:41"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckModifyIMSI"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckModifyIMSI(Inputs:PropertySet, Outputs:PropertySet)  
{
	try
	{
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
 		var bcItemXA : BusComp   = null;		

		var sOrderId    = Inputs.GetProperty(&quot;strOrderId&quot;);		//WA39:MSS
		var sItemId     = &quot;&quot;;
		var sSearchExpr = &quot;&quot;;
		var sOldCharVal = &quot;&quot;;
		var sNewCharVal = &quot;&quot;;

		var sTypeModifyIMSI	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;103&quot;);		//MSS: &quot;Modify IMSI&quot;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}
		
		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;,             sOrderId);
		bcItem.SetSearchSpec(&quot;TELCO Root Action Type&quot;, sTypeModifyIMSI); 
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		bcItemXA = boOrder.GetBusComp(&quot;TELCO Line Items XA - Simple&quot;);

		do
		{
			sItemId     = bcItem.GetFieldValue(&quot;Id&quot;);
			sSearchExpr = &quot;[Object Id]=&apos;&quot; + sItemId + &quot;&apos; AND [Name]=&apos;ICCI&apos; AND [Text Value] IS NOT NULL&quot;;

			bcItemXA.SetViewMode(AllView);
			bcItemXA.ClearToQuery();
			bcItemXA.ActivateField(&quot;Previous Text Value&quot;);
			bcItemXA.ActivateField(&quot;Text Value&quot;);
			bcItemXA.SetSearchExpr(sSearchExpr);
			bcItemXA.ExecuteQuery(ForwardOnly); 

			if (bcItemXA.FirstRecord())
			{
				sOldCharVal = bcItemXA.GetFieldValue(&quot;Previous Text Value&quot;);
				sNewCharVal = bcItemXA.GetFieldValue(&quot;Text Value&quot;);
					
				if (sOldCharVal == sNewCharVal)
				{
					TheApplication().RaiseErrorText(&quot;ICCI degerini degistirmediniz. Lutfen kontrol ediniz&quot;);
					return;
				}						  
			}
		}
		while (bcItem.NextRecord());
	}	
	//WA39:VFM.START
	catch (e)
	{  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally
	{
 		bcItemXA = null;
		bcItem   = null;
		boOrder  = null;
	}
}//! NEW function CheckModifyIMSI() for CBU"
			   SEQUENCE="19"
			   UPDATED="01/26/2016 15:20:41"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOTP"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOTP (Inputs:PropertySet, Outputs:PropertySet) {
	// VFTRCBU Retrofits | TiagoRocha | 23.03.2015 | Update logic respecting EBU Conversion Procedures
	try {
		var App 				= TheApplication();
		var BO 					: BusObject;
		var BO2 				: BusObject;
		var BO3 				: BusObject;
		var AssetBC 			: BusComp;
		var OrderItemBC 		: BusComp;
		var OrderItemBC2 		: BusComp;
		var strOrderId 			= Inputs.GetProperty(&quot;strOrderId&quot;);
		var strInactive 		= App.InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Inactive&quot;);
		var PendingStatus 		= App.InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);
		var OpenStatus 			= App.InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Open&quot;);
		var InstalledStatus 	= App.InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Installed&quot;);
		var strAdd 				= App.InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var bIsOTP 				= &quot;&quot;;
		var AssetCounter 		= 0;
		var OrderItemCounter	= 0;
		var strBillAccntId 		= &quot;&quot;;

		BO = App.GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		OrderItemBC = BO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		BO2 = App.GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		OrderItemBC2 = BO2.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		BO3 = App.GetBusObject(&quot;TELCO Asset - Simple&quot;);
		AssetBC = BO3.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		with (OrderItemBC) {
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Billing Account Id&quot;);
			SetSearchExpr(&quot;[Action Code] = &apos;&quot; + strAdd + &quot;&apos; AND [Order Header Id] = &apos;&quot; + strOrderId + &quot;&apos; AND [Part Number] = &apos;27000&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			bIsOTP = FirstRecord();
			while (bIsOTP) {
				strBillAccntId = GetFieldValue(&quot;Billing Account Id&quot;);
				if (strBillAccntId != &quot;&quot; &amp;&amp; strBillAccntId != null) {
					with (AssetBC) {
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(&quot;[Billing Account Id] = &apos;&quot; + strBillAccntId + &quot;&apos; AND [Status] &lt;&gt; &apos;&quot; + strInactive + &quot;&apos; AND [Product Part Number] = &apos;27000&apos;&quot;);
						ExecuteQuery(ForwardOnly);
						if (FirstRecord()) {
							var strErrMsg1 = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VF_BACC_HAS_OTP&quot;);
							TheApplication().RaiseErrorText(strErrMsg1);
						}
					}

					with (OrderItemBC2) {
						ClearToQuery();
						SetViewMode(AllView);
						SetSearchExpr(&quot;[Billing Account Id] = &apos;&quot; + strBillAccntId + &quot;&apos; AND [Action Code] = &apos;&quot; + strAdd + &quot;&apos; AND ([Status] = &apos;&quot; + PendingStatus + &quot;&apos; OR [Status] = &apos;&quot; + OpenStatus + &quot;&apos; OR [Status] = &apos;&quot; + InstalledStatus + &quot;&apos;) AND [Part Number] = &apos;27000&apos; AND [Id] &lt;&gt; &apos;&quot; + OrderItemBC.GetFieldValue(&quot;Id&quot;) + &quot;&apos;&quot;);
						ExecuteQuery(ForwardOnly);
						if (FirstRecord()) {
							var strErrMsg1 = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VF_BACC_HAS_OTP&quot;);
							TheApplication().RaiseErrorText(strErrMsg1);
						}
					}
				}
				bIsOTP = NextRecord();
			}
		}
	}
	
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	
	finally 
	{
		AssetBC 		= null;
		OrderItemBC2 	= null;
		BO2 			= null;
		OrderItemBC 	= null;
		BO 				= null;
		BO3				= null;
	}
}"
			   SEQUENCE="27"
			   UPDATED="01/26/2016 15:20:41"
			   UPDATED_BY="SADMIN"
			   CREATED="03/31/2015 21:42:35"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOnBA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOnBA (Inputs:PropertySet, Outputs:PropertySet)
{
	try {
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
		var strOrderType = Inputs.GetProperty(&quot;strOrderType&quot;);		//WA39:MSS
		var foundDiscount = Inputs.GetProperty(&quot;foundDiscount&quot;);	//WA39:MSS

		var BoOrderEntry:BusObject;
		var BcOrderEntryLI:BusComp;
		var strBA = &quot;&quot;;
		var sPartNum = &quot;&quot;; //JMARQUES

        var strOrderTypeDisconnect = (strOrderType == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Disconnect&quot;)) ? &quot;Y&quot; : &quot;N&quot;;	 //MSS: Disconnect	

		BoOrderEntry = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;); 
		BcOrderEntryLI = BoOrderEntry.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		with(BcOrderEntryLI) {
			SetViewMode(AllView);
			ActivateField(&quot;Part Number&quot;); // JMARQUES - To avoid validations related with VPN and Group Orders
			ActivateField(&quot;Billing Account Id&quot;);
			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Parent Order Item Id] is null&quot;);
			ExecuteQuery(ForwardOnly);
			var existingOLI = FirstRecord();
		 	while(existingOLI) {
				var tmp = GetFieldValue(&quot;Parent Order Item Id&quot;);
				strBA = GetFieldValue(&quot;Billing Account Id&quot;);
				sPartNum = GetFieldValue(&quot;Part Number&quot;); // JMARQUES
				if ((strOrderTypeDisconnect == &quot;Y&quot; &amp;&amp; sPartNum != &quot;3000&quot; &amp;&amp; sPartNum != &quot;3300&quot;) &amp;&amp; foundDiscount == &quot;N&quot;)
					manageActiveDiscountFlag(strBA);

				existingOLI = NextRecord();
			}
		}
	}
	finally {
		BcOrderEntryLI = null;
		BoOrderEntry = null;
	}
}//! NEW function CheckOnBA (strOrderId,strOrderTypeDisconnect,foundDiscount)"
			   SEQUENCE="23"
			   UPDATED="01/26/2016 15:20:41"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOpenOrders"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOpenOrders(sReferenceNumber, sProdSubType)
{
	try
	{
		var boOrder	: BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var boAsset	: BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var bcItem 	: BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		var sSearchExpr      = &quot;&quot;;
		var sAssetIntegId    = &quot;&quot;;
		var sErrorCode       = &quot;&quot;;
		var sErrorText       = &quot;&quot;;
		var sStatusInactive  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Inactive&quot;);
		var sStatusCancelled = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);
		var sStatusComplete  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);
		var sStatusRejected  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Rejected&quot;);

		if (sReferenceNumber == null || sReferenceNumber == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Serial Number]=&apos;&quot; + sReferenceNumber + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusInactive +
					  &quot;&apos; AND [Id]=[Root Asset Id]&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);

		sSearchExpr = &quot;[Asset Integration Id]=&apos;&quot; + sAssetIntegId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusCancelled +
					  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusComplete + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sStatusRejected + &quot;&apos;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);
		
		if (!bcItem.FirstRecord())
		{
			return;
		}

		if (sProdSubType == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;CINGOZ&quot;))
			sErrorCode = &quot;R142_352&quot;;		
		else
			sErrorCode = &quot;R142_351&quot;;																					

		sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);   //MSS: R142_352=&quot;Main number has an open order.&quot;      R142_351=&quot;Reference Number is located on the open request&quot;
		TheApplication().RaiseErrorText(sErrorText + &quot;: &quot; + sReferenceNumber);
	}
	finally
	{
		bcItem  = null;
		bcAsset = null;
		boOrder = null;
		boAsset = null;
	}
}//! NEW function CheckOpenOrders(ReferenceNumber,sProdSubType) for CBU"
			   SEQUENCE="24"
			   UPDATED="01/26/2016 15:20:42"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:57:43"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrder"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrder(Inputs:PropertySet, Outputs:PropertySet) // Check the number of the order line items 
{
	try	{
//		var strOrderId = this.BusComp().GetFieldValue(&quot;Id&quot;);		//WA39:MSS
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
		
		var AssetBO			= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	    var BcOrderEntryLI  = AssetBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);			
		with(BcOrderEntryLI) 
		{
			ClearToQuery();
			SetViewMode(AllView);
		 	ActivateField(&quot;Order Header Id&quot;);  
	 		SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
	 		ExecuteQuery(ForwardOnly);
	 		if (!FirstRecord()) //Replaced CountRecord() with FirstRecord() as per Oracle review comments
	 			TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_378&quot;));  //MSS: &quot;No order line item is created, please create Order Line Item&quot;
		}	
	}
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally	{
		AssetBO = null;
		BcOrderEntryLI = null;
	}
}//! NEW function CheckOrder() for CBU"
			   SEQUENCE="25"
			   UPDATED="01/26/2016 15:20:42"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrderAttribute"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrderAttribute (Inputs: PropertySet, Outputs: PropertySet)
{
  try
  {
    var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);
    var strCode;
    var strMessageCategory;
    var sMsg;

    var bsOrderMng : Service = TheApplication().GetService(&quot;ACS Order Management&quot;);
    var InputsCheckOM : PropertySet = TheApplication().NewPropertySet();
    var OutputsCheckOM : PropertySet = TheApplication().NewPropertySet();
    
    InputsCheckOM.SetProperty(&quot;OrderID&quot;, strOrderId);
    bsOrderMng.InvokeMethod(&quot;CheckOrderAttribute&quot;, InputsCheckOM, OutputsCheckOM);
    var result = OutputsCheckOM.GetProperty(&quot;Result&quot;);
    var queryMSISDN = OutputsCheckOM.GetProperty(&quot;queryMSISDN&quot;);

    if (result == &quot;KO&quot; &amp;&amp; queryMSISDN == &quot;N&quot;)
    {
      strMessageCategory = &quot;VF Message Category&quot;;
      strCode = &quot;004&quot;;
      sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);	//MSS: &quot;Please configure the product before the order submission&quot;
      TheApplication().RaiseErrorText(sMsg);	        			
    }

    if (result == &quot;KO&quot; &amp;&amp; queryMSISDN == &quot;Y&quot;)
    {
      strMessageCategory = &quot;VF Message Category&quot;;
      strCode	= &quot;221&quot;;
      sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);	//MSS: &quot;Mobile Line missing attributes&quot;
      TheApplication().RaiseErrorText(sMsg);
    }
  }
  //WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
  finally
  {
    OutputsCheckOM = null;
    InputsCheckOM = null;
    bsOrderMng = null;
  }
}//! function CheckOrderAttribute"
			   SEQUENCE="26"
			   UPDATED="01/26/2016 15:20:42"
			   UPDATED_BY="SADMIN"
			   CREATED="10/01/2014 11:48:44"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckPSTN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckPSTN (Inputs:PropertySet, Outputs:PropertySet)
{
	var BcOrderEntryLI;
	var AssetBO;
	try {		
//		var strOrderId = this.BusComp().GetFieldValue(&quot;Id&quot;);					//WA39:MSS
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);						//WA39:MSS
//		var strSubType = this.BusComp().GetFieldValue(&quot;Order Sub Type Calc&quot;);	//WA39:MSS
		var strSubType = Inputs.GetProperty(&quot;strOrderSubTypeCalc&quot;); 			//WA39:MSS

		//	&quot;VPN&quot;					&quot;Modify VPN Group&quot;		&quot;Modify Options&quot;
		if (strSubType == &apos;110&apos; || strSubType == &apos;113&apos; || strSubType == &apos;111&apos; ) {

			AssetBO				 	= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
			BcOrderEntryLI    	= AssetBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);			
			var iNext;
			var sNumber = &quot;0&quot;;
			with(BcOrderEntryLI) {
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;Order Header Id&quot;);  
				ActivateField(&quot;Part Number&quot;);
				ActivateField(&quot;VF Voucher Status&quot;);			
				SetSearchSpec (&quot;Order Header Id&quot;, strOrderId);
				SetSearchSpec (&quot;Part Number&quot;, &quot;3004&quot;);				//MSS: Product = &quot;PSTN&quot;
				SetSortSpec(&quot;VF Voucher Status(DESCENDING)&quot;);
				ExecuteQuery(ForwardOnly);
				iNext = FirstRecord();
				while (iNext) {
					if (sNumber == &quot;0&quot;)
						sNumber = GetFieldValue(&quot;VF Voucher Status&quot;);			
					else
						if (sNumber == GetFieldValue(&quot;VF Voucher Status&quot;))
							TheApplication().RaiseErrorText(&quot;VPN Gruba ayni PSTN numarasi tanimlanamamaktadir.&quot;);
						else
							sNumber = GetFieldValue(&quot;VF Voucher Status&quot;);
					iNext = NextRecord();
				}	 			
			}
		}	
	}	
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally	{
		AssetBO = null;
		BcOrderEntryLI = null;
	}
}//! NEW function CheckPSTN() for CBU"
			   SEQUENCE="29"
			   UPDATED="01/26/2016 15:20:42"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckRefNumStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckRefNumStatus(sReferenceNumber, sProdSubType)
{
	try
	{
		var boOrder	: BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boOrder.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sSearchExpr   = &quot;&quot;;
		var sErrorCode    = &quot;&quot;;
		var sErrorText    = &quot;&quot;;
		var sStatusActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);

		if (sReferenceNumber == null || sReferenceNumber == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Serial Number]=&apos;&quot; + sReferenceNumber + &quot;&apos; AND [Status]=&apos;&quot; + sStatusActive +
					  &quot;&apos; AND [Id]=[Root Asset Id]&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Cfg Latest Released Flag&quot;);
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			TheApplication().SetProfileAttr(&quot;IntegrationId&quot;,         bcAsset.GetFieldValue(&quot;Integration Id&quot;));
			TheApplication().SetProfileAttr(&quot;RootAssetId&quot;,           bcAsset.GetFieldValue(&quot;Id&quot;));
			TheApplication().SetProfileAttr(&quot;CfgLatestReleasedFlag&quot;, bcAsset.GetFieldValue(&quot;Cfg Latest Released Flag&quot;));
			return;
		}
	
		if (sProdSubType == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;CINGOZ&quot;))
			sErrorCode = &quot;R142_349&quot;;	//MSS: &quot;Main number should be active.&quot;
		else
			sErrorCode = &quot;258&quot;;			//MSS: &quot;Reference number should be active.&quot;

		sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
		TheApplication().RaiseErrorText(sErrorText + &quot;: &quot; + sReferenceNumber);	
	}
	finally
	{
		bcAsset = null;
		boOrder = null;
	}
}//! function NEW CheckRefNumStatus(sReferenceNumber,sProdSubType) for CBU"
			   SEQUENCE="30"
			   UPDATED="01/26/2016 15:20:42"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:31"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckRequiredConfigFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckRequiredConfigFlag (Inputs:PropertySet, Outputs:PropertySet) 
{
	try
	{
		var boOrder = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
	   	var bcItem  = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);			

		var sOrderId        = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
		var sItemSearchExpr = &quot;&quot;;
		var sErrroText      = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
						  &quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;)&quot; +
						  &quot; AND [VF Required Config Flag]=&apos;Y&apos;&quot;;

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (bcItem.FirstRecord())
		{
			sErrroText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;004&quot;);
			TheApplication().RaiseErrorText(sErrroText);	//MSS: &quot;Please configure the product before the order submission&quot;
		}
	}
	//WA39:VFM.START
	catch (e)
	{  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}//! NEW function CheckRequiredConfigFlag() for CBU"
			   SEQUENCE="31"
			   UPDATED="01/26/2016 15:20:43"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSVBAllInOne"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSVBAllInOne(Inputs:PropertySet, Outputs:PropertySet) 
{
  try {
//	var strOrderId = this.BusComp().GetFieldValue(&quot;Id&quot;);		//WA39:MSS
	var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
	
	var BS = TheApplication().GetService(&quot;VF Manage SVB AllInOne BS&quot;);
	var PSIn = TheApplication().NewPropertySet();
	var PSOut = TheApplication().NewPropertySet();
	PSIn.SetProperty(&quot;OrderId&quot;,strOrderId);
	BS.InvokeMethod(&quot;CheckAllocated&quot;,PSIn,PSOut);
	var Result = PSOut.GetProperty(&quot;Result&quot;);
	var Remaining = PSOut.GetProperty(&quot;Remaining&quot;);
	if(Result != &quot;OK&quot;) {
		var strErrMsg1  = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;AD8&quot;+Result);
		TheApplication().RaiseErrorText(strErrMsg1,Remaining);	
	}
  }
  	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
  finally {
    BS=null;
    PSIn=null;
    PSOut=null;
  }
}//! NEW function CheckSVBAllInOne() for CBU"
			   SEQUENCE="33"
			   UPDATED="01/26/2016 15:20:43"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSameNumber"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSameNumber(sOrderId, sReferenceNumber, sPromoInstanceId, sProdSubType)
{
   try
   {
		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		var sSearchExpr   = &quot;&quot;; 
		var sParentMSISDN = &quot;&quot;;
		var sErrorCode    = &quot;&quot;;
		var sErrorText    = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot; ||
			sReferenceNumber == null || sReferenceNumber == &quot;&quot; ||
			sPromoInstanceId == null || sPromoInstanceId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [VF Root Prod Prom Instance Id]=&apos;&quot; + sPromoInstanceId +
					  &quot;&apos; AND ([Part Number]=&apos;1000&apos; OR [Part Number]=&apos;70000&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;MSISDN&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		sParentMSISDN = bcItem.GetFieldValue(&quot;MSISDN&quot;);

		if (sParentMSISDN == sReferenceNumber)
		{
			if (sProdSubType == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;CINGOZ&quot;))
				sErrorCode = &quot;R142_350&quot;;	//MSS: &quot;MSISDN shouldn&apos;t be the same with main number&quot;
			else
				sErrorCode = &quot;259&quot;;			//MSS: &quot;MSISDN shouldn’t be the same with reference number.&quot;

			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
			TheApplication().RaiseErrorText(sErrorText + &quot;: &quot; + sReferenceNumber);
		}
	}
	finally
	{
		bcItem  = null;
		boOrder = null;
	}
}//! NEW function CheckSameNumber(sOrderId, sReferenceNumber,sPromoInstanceId,sProdSubType) for CBU"
			   SEQUENCE="32"
			   UPDATED="01/26/2016 15:20:43"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindDec"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindDec (Inputs:PropertySet, Outputs:PropertySet) 
{
	try
	{
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);

		var sOrderId         = Inputs.GetProperty(&quot;OrderId&quot;);
		var sAccountId       = Inputs.GetProperty(&quot;AccountId&quot;);
		var sSearchExpr      = &quot;&quot;;
		var sItemId          = &quot;&quot;;
		var sProdSubType     = &quot;&quot;;
		var sPromoInstId     = &quot;&quot;;
		var sReferenceNumber = &quot;&quot;;
		var sRefNumberFound  = &quot;&quot;;

		var sActionCodeNew     = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var sProdTypeHANDSET   = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_TYPE&quot;,&quot;HANDSET&quot;);
		var sProdSubTypeDECAF  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;DECAF&quot;);									//MSS: &quot;DECAF&quot;
		var sProdSubTypeCINGOZ = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;CINGOZ&quot;);								//MSS: &quot;CINGOZ&quot;
		var sProdSubTypeAMALFI = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PROD_CAT_SUB_TYPE&quot;,&quot;AMALFI&quot;);//CR389							//MSS: &quot;AMALFI&quot;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Action Code]=&apos;&quot; + sActionCodeNew +
					  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProdTypeHANDSET +
					  &quot;&apos; AND ([VF Product Sub Type]=&apos;&quot; + sProdSubTypeDECAF +
					  &quot;&apos; OR [VF Product Sub Type]=&apos;&quot; + sProdSubTypeCINGOZ +
					  &quot;&apos; OR [VF Product Sub Type]=&apos;&quot; + sProdSubTypeAMALFI +
					  &quot;&apos;) AND [VF Root Prod Prom Instance Id] IS NOT NULL&quot;; 

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ActivateField(&quot;VF Root Prod Prom Instance Id&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		do
		{
			sItemId      = bcItem.GetFieldValue(&quot;Id&quot;);
			sProdSubType = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sPromoInstId = bcItem.GetFieldValue(&quot;VF Root Prod Prom Instance Id&quot;);

			if (sProdSubType == &quot;AMALFI&quot;)
			{
				CheckAmalfi(Inputs, Outputs);//CR389
				CheckLimit(sAccountId, sProdSubTypeAMALFI);
			}
			else
			{
				sSearchExpr = &quot;[Object Id]=&apos;&quot; +  sItemId + &quot;&apos; AND [Name]=&apos;Reference Number&apos; AND [Text Value] IS NOT NULL&quot;;

				bcItemXA.SetViewMode(AllView);
				bcItemXA.ClearToQuery();
				bcItemXA.ActivateField(&quot;Text Value&quot;);
				bcItemXA.SetSearchExpr(sSearchExpr);
				bcItemXA.ExecuteQuery(ForwardOnly);

				if (bcItemXA.FirstRecord())
				{
					sReferenceNumber = bcItemXA.GetFieldValue(&quot;Text Value&quot;);
					sRefNumberFound  = &quot;FOUND&quot;;

					CheckSameNumber(sOrderId, sReferenceNumber, sPromoInstId, sProdSubType);
					CheckRefNumStatus(sReferenceNumber, sProdSubType);

					if (sProdSubType == sProdSubTypeDECAF)
					{
						CheckActiveCampaign(sReferenceNumber);
						CheckDataService(sReferenceNumber);
					}

					CheckOpenOrders(sReferenceNumber, sProdSubType);
				}
			}
		}
		while (bcItem.NextRecord());
	}
	//WA39:VFM.START
	catch (e)
	{  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally
	{
		bcItemXA = null;
		bcItem   = null;
		boOrder  = null;	
	}
}//! NEW function FindDec(Inputs,Outputs) for CBU"
			   SEQUENCE="35"
			   UPDATED="01/26/2016 15:20:43"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="FindDiscountProd"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function FindDiscountProd (Inputs:PropertySet, Outputs:PropertySet) 
{  
  try
  {
    var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);
    var strOrderType = Inputs.GetProperty(&quot;strOrderType&quot;);
	var strOrderSubType = Inputs.GetProperty(&quot;strOrderSubType&quot;);
    var strValidationOnly = Inputs.GetProperty(&quot;strValidationOnly&quot;);
    //var strOrderOrderReasonCode = Inputs.GetProperty(&quot;strOrderOrderReasonCode&quot;);
    //var strOrderOrderReason = Inputs.GetProperty(&quot;strOrderOrderReason&quot;);    


    var boOrderEntry:BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
    var bcOrderEntryLI:BusComp = boOrderEntry.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
    var strOrderTypeDisconnect = (strOrderType == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Disconnect&quot;)) ? &quot;Y&quot; : &quot;N&quot;;	 //MSS: Disconnect
    // var strOrderChangeMSISDN = (BCGFV_ORDER_orderSubType == TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;102&quot;))? &quot;Y&quot; : &quot;N&quot;;//MSS: Modify MSISDN  (var not used anyhere in code)
	var LKUPV_strAddNewService = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;, &quot;Add New Service&quot;);					// MSS: Add New Service
    var LKUPV_strTransSame = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;127&quot;);
	var LKUPV_actionADD = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;); 		//PROD00029587			//MSS: &quot;Add&quot;
	var LKUPV_actionExisting = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);						//MSS: &quot;-&quot; 
    
	if ( strOrderTypeDisconnect == &quot;Y&quot; )
	{
	  deactivationOrderCheck(Inputs,Outputs);
	  if (strValidationOnly != &quot;Y&quot;)
		ManagePhoneDirectory(Inputs, Outputs);
	}

	if (strOrderType == LKUPV_strAddNewService &amp;&amp; strOrderSubType == LKUPV_strTransSame)   
	{
	  if (strValidationOnly != &quot;Y&quot;)
		ManageTransferDirectory(Inputs, Outputs);       
	}
				
	var InputsCheck : PropertySet  = TheApplication().NewPropertySet();
	var OutputsCheck : PropertySet = TheApplication().NewPropertySet();
	var itemWithJoker;//Implemented for build R1.4
	var foundJoker = false; //Implemented for build R1.4
	var foundDiscount = &quot;N&quot;;
	var foundPartNumItemSVB_GROUP = &quot;N&quot;
	var itemIdWithDiscount = &quot;&quot;;
	var eligStatus = &quot;&quot;;
	var actionCode = &quot;&quot;;
	var partNum = &quot;&quot;;
	
	
	with(bcOrderEntryLI)
	{
	  SetViewMode(AllView);
	  ActivateField(&quot;Display Name&quot;);
	  ActivateField(&quot;VF Termination Reason&quot;);
	  ActivateField(&quot;Eligibility Status&quot;);
	  ClearToQuery();
	  SetSearchSpec(&quot;Order Header Id&quot;, strOrderId);
	  ExecuteQuery(ForwardOnly);
	  var existingOLI = FirstRecord();
	  while(existingOLI)
	  {
		partNum = bcOrderEntryLI.GetFieldValue(&quot;Part Number&quot;);					//MSS: (not used anywhere in code)
		eligStatus = bcOrderEntryLI.GetFieldValue(&quot;Eligibility Status&quot;);			 
		actionCode = bcOrderEntryLI.GetFieldValue(&quot;Action Code&quot;); //PROD00029587 
		if ((eligStatus == &quot;N&quot; || eligStatus == &quot;H&quot;) &amp;&amp; (LKUPV_actionADD == actionCode || LKUPV_actionExisting == actionCode))
		{
			if (GetFieldValue(&quot;Part Number&quot;) != 70000)        //VFTRCBU-34628 ESANTOS - if added to avoid error in TransferCrossCustomer EBU-&gt;CBU
			{
			  var eligReason = bcOrderEntryLI.GetFieldValue(&quot;Eligibility Reason&quot;);
			  TheApplication().RaiseErrorText(eligReason);
			 }
		}
								
		if (GetFieldValue(&quot;Part Number&quot;) == 5000)        //MSS: Product=&quot;Discount&quot;
		{
		  foundDiscount = &quot;Y&quot;;
		  itemIdWithDiscount = GetFieldValue(&quot;Id&quot;);
		  if (strValidationOnly != &quot;Y&quot;)
		  {
			if (strOrderTypeDisconnect != &quot;Y&quot;)
			{
			  SetFieldValue(&quot;VF Termination Reason&quot;, &quot;&quot;);
			  WriteRecord();
			}
		  }
		}
		else
		{
		  if (strValidationOnly != &quot;Y&quot;)
		  {
			SetFieldValue(&quot;VF Termination Reason&quot;, &quot;&quot;);
			WriteRecord();
		  }
		}

		var itemIdMainSVB = GetFieldValue(&quot;Id&quot;);
		var partNumber_itemSVB = GetFieldValue(&quot;Part Number&quot;);
		
		if (partNumber_itemSVB == &quot;3300&quot; || partNumber_itemSVB == &quot;3000&quot;) //MSS: 3300=Group  3000=VF_VPN GROUP
	        foundPartNumItemSVB_GROUP = &quot;Y&quot;;
	        	
		if (strOrderTypeDisconnect != &quot;Y&quot; &amp;&amp; 
		   ((partNumber_itemSVB == &quot;4000&quot;) ||		//MSS: PRoduct = VF_SVB_Group
		   (partNumber_itemSVB  == &quot;8000&quot;) ||		//MSS: Product = SVB Roaming Data
		   (partNumber_itemSVB  == &quot;7000&quot;) ||		//MSS: Product = SVB Roaming Voice
		   (partNumber_itemSVB  == &quot;9000&quot;) ||		//MSS: Product = SVB SMS
		   (partNumber_itemSVB  == &quot;10000&quot;)))		//MSS: Product = SVB Data
		{
		  var strExpr = &quot;[Parent Order Item Id]=&apos;&quot; + itemIdMainSVB + &quot;&apos; AND [Action Code]&lt;&gt;&apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;) +&quot;&apos;&quot;;   //MSS: &quot;Delete&quot;
		  SetViewMode(AllView);
		  ClearToQuery();
		  SetSearchExpr(strExpr);
		  ExecuteQuery(ForwardOnly);	
		  var isItem = FirstRecord();
		  if (!isItem)
		  {
			var strMessageCategory = &quot;VF Message Category&quot;;
			var strCode	= &quot;004&quot;;
			var sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);		//MSS: &quot;Please configure the product before the order submission&quot;
			TheApplication().RaiseErrorText(sMsg);
		  }
		}
		existingOLI = NextRecord();

	  }//! while(existingOLI)
  	}//! with(bcOrderEntryLI)
  	
	Outputs.SetProperty(&quot;foundDiscount&quot;, foundDiscount);
  	Outputs.SetProperty(&quot;itemIdWithDiscount&quot;, itemIdWithDiscount);
  	Outputs.SetProperty(&quot;foundPartNumItemSVB_GROUP&quot;, foundPartNumItemSVB_GROUP);
  	
  }//! try
  //WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
  finally
  {
	boOrderEntry = null;
	bcOrderEntryLI = null;
	InputsCheck = null
	OutputsCheck = null
  }
}//! function"
			   SEQUENCE="36"
			   UPDATED="11/09/2016 15:43:08"
			   UPDATED_BY="ESANTOS"
			   CREATED="09/30/2014 13:46:41"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GIBOrderMgmt"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GIBOrderMgmt (Inputs:PropertySet, Outputs:PropertySet) 
{
	try {
		var strLog55				= TheApplication().GetProfileAttr(&quot;Log55&quot;);
		var strLog54				= TheApplication().GetProfileAttr(&quot;Log54&quot;);
		var BoOrderEntry 			= TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcAccount				= BoOrderEntry.GetBusComp(&quot;HP Submit - Account&quot;)
		var enable_logging			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ENABLED_LOGGING&quot;,&quot;GIBEnabled&quot;);	//MSS: &quot;Y&quot;
		var strGIBUnverified		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_VER_STATUS&quot;,&quot;GIBUnverified&quot;);	//MSS: &quot;Unverified&quot;
		var bsGIBLogging			= TheApplication().GetService(&quot;VF Logging BS&quot;);
		var psBSInput				= TheApplication().NewPropertySet();
		var psBSOutput				= TheApplication().NewPropertySet();
//		var strAccountId			= this.BusComp().GetFieldValue(&quot;Account Id&quot;);										//WA39:MSS
		var strAccountId			= Inputs.GetProperty(&quot;strAccountId&quot;);												//WA39:MSS
		var strCompanyStatusActive	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;Y&quot;);			//MSS: &quot;Active&quot;
		var strCompanyStatusPassive	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ACCOUNT_STATUS&quot;,&quot;N&quot;);			//MSS: &quot;Passive&quot;
//		var strGIBCompStatus		= this.BusComp().GetFieldValue(&quot;VF GIB Account Status&quot;);							//WA39:MSS
		var strGIBCompStatus		= Inputs.GetProperty(&quot;strGIBCompStatus&quot;);											//WA39:MSS
//		var strOrderId				= this.BusComp().GetFieldValue(&quot;Id&quot;);												//WA39:MSS
		var strOrderId				= Inputs.GetProperty(&quot;strOrderId&quot;);													//WA39:MSS
        var strLogResult = &quot;&quot;;

		if(strLog55==&quot;Y&quot;) {					
			TheApplication().SetProfileAttr(&quot;Log55&quot;,&quot;N&quot;);
			var strProfileAttr = TheApplication().GetProfileAttr(&quot;Log55&quot;);
			TheApplication().Trace(&quot;strProfileAttr::&quot;+strProfileAttr);
			bcAccount.SetViewMode(AllView);
			bcAccount.ClearToQuery();
			bcAccount.ActivateField(&quot;VF GIB Ver Status&quot;);
			bcAccount.SetSearchSpec(&quot;Id&quot;,strAccountId);
			bcAccount.ExecuteQuery(ForwardOnly);
			if(bcAccount.FirstRecord()) {
				bcAccount.SetFieldValue(&quot;VF GIB Ver Status&quot;,strGIBUnverified);
				bcAccount.WriteRecord();
				if (enable_logging==&quot;Y&quot;) {
					if (strGIBCompStatus==strCompanyStatusActive) {
						psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L55&quot;);
					} else if (strGIBCompStatus==strCompanyStatusPassive) {
						psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L78&quot;);
					} else {
						psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L79&quot;);
					}
					psBSInput.SetProperty(&quot;Customer Code&quot;,strAccountId);
					psBSInput.SetProperty(&quot;Order Id&quot;,strOrderId);
					psBSInput.SetProperty(&quot;Profile Mode&quot;,&quot;GIBOrder&quot;);
					bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
					strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);							
				}	
			}
		}
		if(strLog54==&quot;Y&quot;) {
			TheApplication().SetProfileAttr(&quot;Log54&quot;,&quot;N&quot;);
			if (enable_logging==&quot;Y&quot;) {						
				if(strGIBCompStatus==strCompanyStatusActive) {
					psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L54&quot;);
				} else if (strGIBCompStatus==strCompanyStatusPassive) {
					psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L76&quot;);
				} else {
					psBSInput.SetProperty(&quot;Logging Id&quot;,&quot;L77&quot;);
				}
				psBSInput.SetProperty(&quot;Customer Code&quot;,strAccountId);
				psBSInput.SetProperty(&quot;Order Id&quot;,strOrderId);
				psBSInput.SetProperty(&quot;Profile Mode&quot;,&quot;GIBOrder&quot;);
				bsGIBLogging.InvokeMethod(&quot;LoggingGIB&quot;,psBSInput,psBSOutput);
				strLogResult = psBSOutput.GetProperty(&quot;Result&quot;);						
				return (CancelOperation); 
			}					
		}
	}
	finally {
		psBSOutput		= null;
		psBSInput		= null;
		bsGIBLogging	= null;
		bcAccount		= null;
		BoOrderEntry	= null;
	}       
	//Mamta-Added for WP17
}//! NEW function GIBOrderMgmt() for CBU"
			   SEQUENCE="38"
			   UPDATED="01/26/2016 15:20:44"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetBundleInfo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetBundleInfo(OrderId, InstanceId, Context, ComponentType, psFieldList, psAttribList){
	try{
		var wkfSvc = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var wkfInputs : PropertySet = TheApplication().NewPropertySet();
		var wkfOutputs : PropertySet = TheApplication().NewPropertySet();
		var psOutputs : PropertySet = TheApplication().NewPropertySet();
		var psFieldOutputs : PropertySet	= TheApplication().NewPropertySet();
		var psAttribOutputs : PropertySet = TheApplication().NewPropertySet();
		var i;
				
		wkfInputs.SetProperty(&quot;Header Id&quot;, OrderId);
		wkfInputs.SetProperty(&quot;Bundle Instance Id&quot;, InstanceId);
		wkfInputs.SetProperty(&quot;Context&quot;,Context);
		wkfInputs.SetProperty(&quot;Component Type&quot;,ComponentType);
		psFieldList.SetType(&quot;Field List&quot;);
		wkfInputs.AddChild(psFieldList);
		psAttribList.SetType(&quot;Attribute List&quot;);
		wkfInputs.AddChild(psAttribList);
		wkfInputs.SetProperty(&quot;ProcessName&quot;,&quot;VF Get Bundle Promotion Components Data WF&quot;);
		wkfSvc.InvokeMethod(&quot;RunProcess&quot;,wkfInputs,wkfOutputs);
		
		for(i = 0; i&lt;wkfOutputs.GetChildCount();i++)
		{ 
			if(wkfOutputs.GetChild(i).GetType() == &quot;Field Output&quot;)
				psFieldOutputs = wkfOutputs.GetChild(i);
			else if (wkfOutputs.GetChild(i).GetType() == &quot;Attribute Output&quot;)
				psAttribOutputs = wkfOutputs.GetChild(i);
		}
		psOutputs.AddChild(psFieldOutputs);
		psOutputs.AddChild(psAttribOutputs);
		return psOutputs;
	}
	catch(oExcep){
		TheApplication().RaiseErrorText(oExcep.toString());
	}
	finally{
		psOutputs		= null;
		psFieldOutputs	= null;
		psAttribOutputs	= null;
		wkfOutputs		= null;
		wkfInputs		= null;
		wkfSvc 			= null;
		
	}
}//! NEW function GetBundleInfo(OrderId, InstanceId, Context, ComponentType, psFieldList, psAttribList) for CBU"
			   SEQUENCE="37"
			   UPDATED="01/26/2016 15:20:44"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManagePhoneDirectory"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManagePhoneDirectory (Inputs:PropertySet, Outputs:PropertySet) 
{
	try {		
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS

		var BoOrderEntry 		= TheApplication().GetBusObject(&quot;X Order Entry&quot;);       
		var BcOrderEntryXA 	= BoOrderEntry.GetBusComp(&quot;HP Submit - Order Item XA&quot;);  
		var PhoneDirectory = &quot;Phone Directory&quot;;         
		var DirectoryFlag  = &quot;&quot;;
		
		if (strOrderId != null &amp;&amp; strOrderId != &quot;&quot;) {
		    with(BcOrderEntryXA) {
				SetViewMode(AllView);  
				ActivateField(&quot;Order Header Id&quot;);
				ActivateField(&quot;Name&quot;);
				ActivateField(&quot;Value&quot;);
				ActivateField(&quot;Data Type&quot;); 
				ClearToQuery();
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Name] = &apos;&quot;+PhoneDirectory+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly); //DIVA 20120315 - Oracle review comments: ForwardOnly
				var existingMobileLine = FirstRecord();	
				while (existingMobileLine) {
					SetFieldValue(&quot;Value&quot;,&quot;N&quot;); 
					WriteRecord();  
					existingMobileLine = NextRecord();
				}
			}
		}
   }   
   finally {
		BcOrderEntryXA 	= null;
		BoOrderEntry 	= null;
   }	
}//! NEW function ManagePhoneDirectory(strOrderId) for CBU"
			   SEQUENCE="40"
			   UPDATED="01/26/2016 15:20:44"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManageTransferDirectory"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ManageTransferDirectory (Inputs:PropertySet, Outputs:PropertySet)
{
	try {			
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);						//WA39:MSS
	
		var BoOrderEntry 		= TheApplication().GetBusObject(&quot;X Order Entry&quot;);       
		var BcOrderEntryXA 	= BoOrderEntry.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var PhoneNewValue = &quot;Y&quot;; // Default  
		PhoneNewValue = TheApplication().GetProfileAttr(&quot;TransferDirectVal&quot;);      
		var PhoneDirectory = &quot;Phone Directory&quot;;         
		var DirectoryFlag  = &quot;&quot;;
		
		if (strOrderId != null &amp;&amp; strOrderId != &quot;&quot;) {
		    with(BcOrderEntryXA) {
				SetViewMode(AllView);  
				ActivateField(&quot;Order Header Id&quot;);
				ActivateField(&quot;Name&quot;);
				ActivateField(&quot;Value&quot;);
				ActivateField(&quot;Data Type&quot;);  
				ClearToQuery();
				SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+strOrderId+&quot;&apos; AND [Name] = &apos;&quot;+PhoneDirectory+&quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly); //DIVA 20120315 - Oracle review comments: ForwardOnly
				var existingMobileLine = FirstRecord();	
			
				while (existingMobileLine) {
					SetFieldValue(&quot;Value&quot;,PhoneNewValue);  
					WriteRecord();  
					existingMobileLine = NextRecord();
				}
			}
		}
   }   
   finally {
		BcOrderEntryXA 	= null;
		BoOrderEntry 	= null;
   }	
}//! NEW function ManageTransferDirectory(strOrderId) for CBU"
			   SEQUENCE="41"
			   UPDATED="01/26/2016 15:20:45"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName:chars, Inputs:PropertySet, Outputs:PropertySet)
{
	switch(MethodName)
	{
		case &quot;CheckPSTN&quot;:
			CheckPSTN(Inputs,Outputs);	 					//1		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);						
			//Inputs.GetProperty(&quot;strOrderSubTypeCalc&quot;); 						
			break;						
		case &quot;CheckOrder&quot;:
			CheckOrder (Inputs,Outputs);					//2		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;									
		case &quot;CheckSVBAllInOne&quot;:
			CheckSVBAllInOne (Inputs,Outputs);				//3		ReadOnly: No
			//Inputs.GetProperty(&quot;strOrderId&quot;);	
			break;			
		case &quot;CheckMetropolis&quot;:
			CheckMetropolis (Inputs,Outputs);				//4		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;		
		case &quot;CheckIMEICampagn&quot;:
			CheckIMEICampagn (Inputs,Outputs);				//5		ReadOnly: No
			//Inputs.GetProperty(&quot;strOrderId&quot;)
			break;						
		case &quot;CheckAdapterNo&quot;:
			CheckAdapterNo (Inputs,Outputs);				//6		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;					
		case &quot;CheckLastInvoice&quot;:				
			CheckLastInvoice (Inputs,Outputs);				//7		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderStatus&quot;);
	  		//Inputs.GetProperty(&quot;strOrderType&quot;);
			//Inputs.GetProperty(&quot;strOrderReason&quot;);
			//Inputs.GetProperty(&quot;strOrderId&quot;);	 
			break;						
		case &quot;CheckRequiredConfigFlag&quot;:
			CheckRequiredConfigFlag (Inputs,Outputs);		//8		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;						
		case &quot;CheckConfigState&quot;:
			CheckConfigState (Inputs,Outputs);				//9		ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;						
		case &quot;CheckMPBXGroup&quot;:
			CheckMPBXGroup (Inputs,Outputs);				//10	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;									
		case &quot;CheckDSPreSubmitValidations&quot;:
			CheckDSPreSubmitValidations (Inputs,Outputs);	//11	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;						
		case &quot;CheckModifyIMSI&quot;:
			CheckModifyIMSI (Inputs,Outputs);				//12	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;						
		case &quot;CheckGroupHead&quot;:
			CheckGroupHead (Inputs,Outputs);				//13	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			//Inputs.GetProperty(&quot;strOrderType&quot;);	
			break;						
		case &quot;checkMTTGroup&quot;:
			checkMTTGroup (Inputs,Outputs);					//14	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);	
			//Inputs.GetProperty(&quot;strBAId&quot;);
			break;
		case &quot;GIBOrderMgmt&quot;:
			GIBOrderMgmt (Inputs,Outputs);					//15	ReadOnly: No
			//Inputs.GetProperty(&quot;strAccountId&quot;);
			//Inputs.GetProperty(&quot;strGIBCompStatus&quot;);
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;CheckModfyOli&quot;:
			CheckModfyOli (Inputs,Outputs);					//16	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;						
		case &quot;CheckHandsetCampIntegrity&quot;:
			CheckHandsetCampIntegrity (Inputs,Outputs);		//17	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;deactivationOrderCheck&quot;:
			deactivationOrderCheck (Inputs,Outputs);		//18	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderType&quot;);			
			//Inputs.GetProperty(&quot;strOrderReasonCode&quot;);
		   	//Inputs.GetProperty(&quot;strOrderReason&quot;);		
			//Inputs.GetProperty(&quot;strOrderId&quot;);			
			break;
		//case &quot;checkPrefix&quot;:								
		//	checkPrefix(strOrderId);						//19	ReadOnly: Yes
		//	break;
		case &quot;ManagePhoneDirectory&quot;:
			ManagePhoneDirectory (Inputs,Outputs);			//20	ReadOnly: No
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;ManageTransferDirectory&quot;:
			ManageTransferDirectory (Inputs,Outputs);		//21	ReadOnly: No
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;CheckOnBA&quot;:
			CheckOnBA (Inputs,Outputs);						//22	ReadOnly: Yes
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			//Inputs.GetProperty(&quot;strOrderType&quot;);
			//Inputs.GetProperty(&quot;foundDiscount&quot;);
			break;
		//case &quot;manageActiveDiscountFlag&quot;:
		//	manageActiveDiscountFlag(Inputs,Outputs);		//23	ReadOnly: No  
		//break;
		//case &quot;CheckCommitmentPeriod&quot;:
		//	CheckCommitmentPeriod(Inputs,Outputs);			//24	ReadOnly: Yes
		//	break;
		case &quot;SetTotalDeviceAmount&quot;:
			SetTotalDeviceAmount (Inputs,Outputs);			//25	ReadOnly: No
			//Inputs.GetProperty(&quot;ItemId&quot;);
	    	//Inputs.GetProperty(&quot;attrTotalDeviceAmount&quot;);
			break;
		case &quot;AddSVBFee&quot;:
			AddSVBFee(Inputs,Outputs);						//26	ReadOnly: No
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;FindDec&quot;:
			FindDec (Inputs,Outputs);						//27	ReadOnly: Yes
			//Inputs.GetProperty(&quot;OrderId&quot;);
			//Inputs.GetProperty(&quot;AccountId&quot;);
			//Inputs.GetProperty(&quot;MarketType&quot;);
			break;	
		case &quot;CheckAmalfi&quot;:
			CheckAmalfi (Inputs,Outputs);					//28	ReadOnly: Yes
			//Inputs.GetProperty(&quot;AccountId&quot;);
			//Inputs.GetProperty(&quot;MarketType&quot;);
			break;
		//case &quot;CheckLimit&quot;:		
		//	CheckLimit(strAccountId,ProductSubType);		//29	ReadOnly: Yes
		//	break;
		//case &quot;GetBundleInfo&quot;:
		//	GetBundleInfo(OrderId, InstanceId, Context, ComponentType, psFieldList, psAttribList); //30		ReadOnly: Yes
		//	break;
		//case &quot;CheckSameNumber&quot;:
		//	CheckSameNumber(OrderId, ReferenceNumber,PromoInstanceId,CurrSubType); 	//31	ReadOnly: Yes
		//	break;
		//case &quot;CheckRefNumStatus(ReferenceNumber,CurrSubType)&quot;:					//32	ReadOnly: Yes
		//	CheckRefNumStatus(ReferenceNumber,CurrSubType);
		//	break;
		//case &quot;CheckActiveCampaign&quot;:
		//	CheckActiveCampaign(ReferenceNumber);(Inputs,Outputs);					//33	ReadOnly: Yes
		//	break;
		//case &quot;CheckDataService&quot;:
		//	CheckDataService(ReferenceNumber);										//34	ReadOnly: Yes
		//	break;
		//case &quot;CheckOpenOrders&quot;:
		//	CheckOpenOrders(ReferenceNumber,CurrSubType);							//35	ReadOnly: Yes
		//	break;
		case &quot;FindDiscountProd&quot;:
			FindDiscountProd (Inputs,Outputs);										//35,1	ReadOnly: Yes/No. dependeds on an input parameter flag
			//Inputs.GetProperty(&quot;strOrderId&quot;);
			//Inputs.GetProperty(&quot;strOrderType&quot;);
			//Inputs.GetProperty(&quot;strOrderSubType&quot;);
			//Inputs.GetProperty(&quot;strOrderOrderReasonCode&quot;);
			//Inputs.GetProperty(&quot;strOrderOrderReason&quot;);
			//Inputs.GetProperty(&quot;strValidationOnly&quot;);
			//Outputs.SetProperty(&quot;itemIdWithDiscount&quot;,itemIdWithDiscount);
			//Outputs.SetProperty(&quot;foundDiscount&quot;,foundDiscount);
			//Outputs.SetProperty(&quot;foundPartNumItemSVB_GROUP&quot;,foundPartNumItemSVB_GROUP) 
			break;			
		case &quot;CheckMNPCustomerPoints&quot;:
			CheckMNPCustomerPoints (Inputs,Outputs);								//35,2	ReadOnly: Yes/No. dependeds on an input parameter flag
  			//Inputs.GetProperty(&quot;foundDiscount&quot;);
			//Inputs.GetProperty(&quot;strOrderType&quot;);
			//Inputs.GetProperty(&quot;itemIdWithDiscount&quot;);
			//Inputs.GetProperty(&quot;strAccountId&quot;);
			//Inputs.GetProperty(&quot;strValidationOnly&quot;);
			break;			
		case &quot;CheckOrderAttribute&quot;:
			CheckOrderAttribute (Inputs,Outputs);									//35,3	ReadOnly: Yes/No. dependeds on an input parameter flag
  			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;						
		case &quot;CheckMSISDN_ICCID&quot;:
			CheckMSISDN_ICCID (Inputs,Outputs);										//35,4	ReadOnly: Yes
  			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;CheckAccountNull&quot;:
			CheckAccountNull (Inputs,Outputs);										//35,5	ReadOnly: Yes - Added after EBU Retrofits - TiagoRocha
  			//Inputs.GetProperty(&quot;strOrderId&quot;);
  			//Inputs.GetProperty(&quot;strAccountId&quot;);
			break;
		case &quot;CheckOTP&quot;:
			CheckOTP (Inputs,Outputs);												//35,6	ReadOnly: Yes - Added after EBU Retrofits - TiagoRocha
  			//Inputs.GetProperty(&quot;strOrderId&quot;);
			break;
		case &quot;CheckHandsetCampDebundle&quot;:
			CheckHandsetCampDebundle (Inputs,Outputs);
			break;	
			
		default:
			return (ContinueOperation);						
	}
	return (CancelOperation);
}"
			   SEQUENCE="43"
			   UPDATED="01/26/2016 15:20:45"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetTotalDeviceAmount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetTotalDeviceAmount (Inputs:PropertySet, Outputs:PropertySet) 
{
	try {
	
	    var ItemId = Inputs.GetProperty(&quot;ItemId&quot;);									//WA39:MSS
	    var attrTotalDeviceAmount = Inputs.GetProperty(&quot;attrTotalDeviceAmount&quot;);	//WA39:MSS
	    
		var OrderEntryBO = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var OrderItemXA  = OrderEntryBO.GetBusComp(&quot;HP Submit - Order Item XA&quot;);		
		var totalDeviceAmount=&quot;&quot;;
		with(OrderItemXA) {
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Object Id] = &apos;&quot;+ItemId+&quot;&apos; AND ([Name] = &apos;Total Device Amount&apos; )&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()) {
				OrderItemXA.SetFieldValue(&quot;Numeric Value&quot;,attrTotalDeviceAmount);
 			  	OrderItemXA.WriteRecord();
			}
		}
	}
	finally {
		OrderItemXA	= null;
		OrderEntryBO = null;
	}
}//! NEW function SetTotalDeviceAmount(ItemId, attrTotalDeviceAmount) for CBU"
			   SEQUENCE="42"
			   UPDATED="01/26/2016 15:20:45"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkMTTGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkMTTGroup (Inputs:PropertySet, Outputs:PropertySet)  
{
	try {
		var OrderBO			= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var OrderItemBC	= OrderBO.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var OrderBO2			= TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var Items			= OrderBO2.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var AssetBO			= TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var AssetBC  		= AssetBO.GetBusComp(&quot;TELCO Asset - Simple&quot;);
//  	var OrderId			= this.BusComp().GetFieldValue(&quot;Id&quot;);											//WA39:MSS
	  	var OrderId			= Inputs.GetProperty(&quot;strOrderId&quot;);												//WA39:MSS
//		var BAId			= this.BusComp().GetFieldValue(&quot;Billing Account Id&quot;);							//WA39:MSS
		var strBAId			= Inputs.GetProperty(&quot;strBAId&quot;);													//WA39:MSS

		var strActive 	= TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Active&quot;);				//MSS: &quot;Active&quot;
		var strSuspended = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;,&quot;Suspended&quot;);			//MSS: &quot;Suspended&quot;
		var strAddActCd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);			//MSS: &quot;Add&quot;
		var strCompleted = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Complete&quot;);		//MSS: &quot;Complete&quot;
		var strCancelled = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;,&quot;Cancelled&quot;);		//MSS: &quot;Cancelled&quot;
		var OrderItemBCExists; 
		var AssetBCExists;
		var ItemId;
		var strErrMsg1 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R142_022&quot;);					//MSS: &quot;Billing Account is already associated with a valid MTT Group.&quot;
		var strErrMsg2 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R_Error_Message&quot;);			//MSS: &quot;There is a pending &quot;VF Locate Service Group&quot; order under the billing account. Please cancel pending &quot;VF Locate Service Group&quot; orders and then create a new activation order for activation.&quot;

																						//  MTT GROUP
		var strSearchExpr1 = &quot;[Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos; AND [Product Part Number] = &apos;21400&apos; AND ([Status] = &apos;&quot;+strActive+&quot;&apos; OR [Status] = &apos;&quot;+strSuspended+&quot;&apos;)&quot;;
		var strSearchExpr2 = &quot;[Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos; AND [Part Number]= &apos;21400&apos; AND [Action Code]=&apos;&quot;+strAddActCd+&quot;&apos; AND [Order Header Id] &lt;&gt; &apos;&quot;+OrderId+&quot;&apos; AND ([Status] &lt;&gt; &apos;&quot;+strCompleted+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strCancelled+&quot;&apos;)&quot;;
  		with(OrderItemBC) {
			SetViewMode(AllView);
			ActivateField(&quot;Billing Account Id&quot;);
			ClearToQuery();	 
			SetSearchSpec(&quot;Order Header Id&quot;, OrderId);
			SetSearchSpec(&quot;Part Number&quot;,&quot;21400&quot;);				//MSS: Product=&quot;MTT Group&quot;
			ExecuteQuery(ForwardOnly);

			OrderItemBCExists = FirstRecord();

			while (OrderItemBCExists) {
				strBAId = GetFieldValue(&quot;Billing Account Id&quot;);
				ItemId = GetFieldValue(&quot;Id&quot;);
				strSearchExpr1 = &quot;[Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos; AND [Product Part Number] = &apos;21400&apos; AND ([Status] = &apos;&quot;+strActive+&quot;&apos; OR [Status] = &apos;&quot;+strSuspended+&quot;&apos;)&quot;;
				strSearchExpr2 = &quot;[Billing Account Id] = &apos;&quot;+strBAId+&quot;&apos; AND [Part Number]= &apos;21400&apos; AND [Action Code]=&apos;&quot;+strAddActCd+&quot;&apos; AND [Id] &lt;&gt; &apos;&quot;+ItemId+&quot;&apos; AND ([Status] &lt;&gt; &apos;&quot;+strCompleted+&quot;&apos; AND [Status] &lt;&gt; &apos;&quot;+strCancelled+&quot;&apos;)&quot;;
				
				with (AssetBC) {
					SetViewMode(AllView);
					ClearToQuery();	 
					SetSearchExpr(strSearchExpr1);
					ExecuteQuery(ForwardOnly);
					AssetBCExists = FirstRecord();	
					if (AssetBCExists)
							TheApplication().RaiseErrorText(strErrMsg1);	//MSS: &quot;Billing Account is already associated with a valid MTT Group.&quot;
				}

				with(Items) {
					SetViewMode(AllView);
					ClearToQuery();	 
					SetSearchExpr(strSearchExpr2);
					ExecuteQuery(ForwardOnly);
					if(FirstRecord())
						TheApplication().RaiseErrorText(strErrMsg2);		//MSS: &quot;There is a pending &quot;VF Locate Service Group&quot; order under the billing account. Please cancel pending &quot;VF Locate Service Group&quot; orders and then create a new activation order for activation.&quot;
				}
				OrderItemBCExists = NextRecord();
			}
		}	
	}	
	//WA39:VFM.START
	catch (e){  
		var err=e;
		if (Inputs.GetProperty(&quot;strWkf&quot;)==&quot;Y&quot;)
			Outputs.SetProperty(&quot;oResult&quot;,err.toString().replace(/\(SBL-EXL-00151\)/g,&apos;&apos;)); 
		else
			throw(err);
	}
	//WA39:VFM.END
	finally {
		OrderItemBC =  null;
		Items =  null;
		AssetBC =  null;
		OrderBO = null;
		AssetBO = null;
		OrderBO2 = null;
	}
}//! NEW function checkMTTGroup() for CBU"
			   SEQUENCE="22"
			   UPDATED="01/26/2016 15:20:45"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkPrefix"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkPrefix(strOrderId)
{
 // This function is not invoked first hand. It&apos;s an auxiliary function used by  &quot;deactivationOrderCheck&quot; function
 try
	{
    	//var strOrderId  			= Inputs.GetProperty(&quot;orderId&quot;);
    	var boOrderEntrySales		: BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
    	//var bcOrderEntryOrders		: BusComp = boOrderEntrySales.GetBusComp(&quot;Order Entry - Orders&quot;); 
    	var bcOrderEntryLineItems 	: BusComp = boOrderEntrySales.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var strPrefix 				= &quot;&quot;;
		var strMSISDN				= &quot;&quot;;
    	var booRecordExists			= &quot;&quot;; 
    	var i						= 0;
    	var j						= 0;
    	var array 					= new Array;
    	var validPrefix			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_PREFIX&quot;,&quot;54&quot;);
    	var result = &quot;OK&quot;;
    	
    	//Begin - Scripting 15 - Input validation
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strOrderId&quot;,strOrderId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15
		
    	//bcOrderEntryOrders.SetViewMode(AllView);
    	//bcOrderEntryOrders.ClearToQuery();
		//bcOrderEntryOrders.SetSearchSpec(&quot;Id&quot;, strOrderId);
		
		bcOrderEntryLineItems.SetViewMode(AllView);
   		bcOrderEntryLineItems.ClearToQuery();
  		bcOrderEntryLineItems.ActivateField(&quot;MSISDN&quot;);
  		bcOrderEntryLineItems.SetSearchSpec(&quot;Order Header Id&quot;, strOrderId);
   		bcOrderEntryLineItems.SetSearchSpec(&quot;Part Number&quot;, &quot;1000&quot;);
		
    	bcOrderEntryLineItems.ExecuteQuery(ForwardOnly);
    	//if(bcOrderEntryOrders.FirstRecord())
	    //{
    		booRecordExists = bcOrderEntryLineItems.FirstRecord();
    		while(booRecordExists)
    		{
    			strMSISDN = bcOrderEntryLineItems.GetFieldValue(&quot;MSISDN&quot;);
    			strPrefix = strMSISDN.substring(0,2);
    			if(strPrefix != validPrefix)
    			{
    				result = &quot;KO&quot;;
    				break;
    			}
				//array[i] = strPrefix;	
    			//i++;
    			booRecordExists = bcOrderEntryLineItems.NextRecord();
    		}
    		//Outputs.SetProperty(&quot;Result&quot;, result);
    		/*while(array[j].length !=&quot;0&quot;)
    		{
    			if (array[j] != validPrefix)
    			{
    				Outputs.SetProperty(&quot;Result&quot;, &quot;KO&quot;);
    			}
    			else
    			{
    				Outputs.SetProperty(&quot;Result&quot;, &quot;OK&quot;);
    			}
    			j++;
    		}*/
    	//}
  		return(result);
	}		
	finally
	{
	    //bcOrderEntryOrders		= null;
	    bcOrderEntryLineItems 	= null;
		boOrderEntrySales		= null;
		inProp = null;
		outProp = null;
		BS = null;
	}	
}//! function checkPrefix(strOrderId)"
			   SEQUENCE="28"
			   UPDATED="01/26/2016 15:20:46"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="deactivationOrderCheck"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function deactivationOrderCheck (Inputs:PropertySet, Outputs:PropertySet)
{
	try {
//		var strOrderType;									//WA39:MSS	Used
//		var strOrderSubType;								//WA39:MSS	Not used
//		var strOrderReason;									//WA39:MSS  Used

		var strMessageCategory;
		var strCode;
		var sMsg;
		
		var bsGetService = TheApplication().GetService (&quot;VF Check Order&quot;);
		var psInput  = TheApplication().NewPropertySet();
		var psOutput = TheApplication().NewPropertySet();
//		var orderReasonCode = this.BusComp().GetFieldValue(&quot;Order Reason Code&quot;);		//WA39:MSS
		var strOrderReasonCode = Inputs.GetProperty(&quot;strOrderReasonCode&quot;);				//WA39:MSS
		var LICfound = &quot;&quot;;
		var bsGetService2 = TheApplication().GetService (&quot;ACS General Operations&quot;);
		var psInputs  = TheApplication().NewPropertySet();
		var psOutputs = TheApplication().NewPropertySet();
		
//   	orderType = bcOrder.GetFieldValue(&quot;Order Type&quot;);			//WA39:MSS
		var strOrderType = Inputs.GetProperty(&quot;strOrderType&quot;);		//WA39:MSS
//  	strOrderSubType = bcOrder.GetFieldValue(&quot;Order Sub Type&quot;);	//WA39:MSS
//   	strOrderReason = bcOrder.GetFieldValue(&quot;Order Reason&quot;);		//WA39:MSS
	   	var strOrderReason = Inputs.GetProperty(&quot;strOrderReason&quot;);	//WA39:MSS
		var strOrderId = Inputs.GetProperty(&quot;strOrderId&quot;);			//WA39:MSS
		
		if ( strOrderType == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Disconnect&quot;) &amp;&amp;	//MSS: &quot;Disconnect&quot;
	    	strOrderReason == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,&quot;199&quot;))	//MSS: 199 does not exist. Bug ? 
	   {
			var result = checkPrefix(strOrderId);
			if (result ==  &quot;KO&quot;) {
				strMessageCategory = &quot;VF Message Category&quot;;
			 	strCode = &quot;111&quot;;
				sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);						//MSS: &quot;The expiration date of the credit card is less than 3 months.&quot;
			 	TheApplication().RaiseErrorText(sMsg);
			}
	   }
	    
		psInputs.SetProperty (&quot;Function&quot;, &quot;VF_DEAC_CHECK&quot;);
		psInputs.SetProperty (&quot;Name&quot;, strOrderReasonCode);
		bsGetService2.InvokeMethod (&quot;GetParameter&quot;, psInputs, psOutputs);
		LICfound = psOutputs.GetProperty(&quot;Value&quot;);
		
	   if (strOrderType == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Disconnect&quot;) &amp;&amp; LICfound ==&apos;Y&apos;) {	//MSS: &quot;Disconnect&quot;
			psInput.SetProperty (&quot;orderId&quot;, strOrderId);	    
			psOutputs = bsGetService.InvokeMethod (&quot;CheckInvoiceDate&quot;, psInput, psOutput);
			result = psOutput.GetProperty(&quot;Result&quot;);
			if (result ==  &quot;KO&quot;) {
				strMessageCategory = &quot;VF Message Category&quot;;
			 	strCode = &quot;121&quot;;
				sMsg = TheApplication().LookupMessage(strMessageCategory, strCode);										//MSS: &quot;Deactivation not allowed. The last invoice date is bigger than the asset activation date.&quot;
			 	TheApplication().RaiseErrorText(sMsg);
			}
	   }
	}
	finally {
		bsGetService = null;
		psInput = null;
		psOutput = null;
		psOutputs	= null;
		psInputs = null;
		bsGetService2 = null;
	}	 
}//! NEW function deactivationOrderCheck(bcOrder,strOrderId) for CBU"
			   SEQUENCE="34"
			   UPDATED="01/26/2016 15:20:46"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="manageActiveDiscountFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function manageActiveDiscountFlag (billingAccountID) {
	try {
	
 // This function is not invoked first hand. It&apos;s an auxiliary function used by  &quot;CheckOnBA&quot; function
	
		// Use High Performance Business Component
		var accountBO    =   TheApplication().GetBusObject(&quot;Account&quot;);
		var assetItemBC  =  accountBO.GetBusComp(&quot;Asset Mgmt - Asset - Header Light&quot;);
		var partNum;
		var lookupStatusPending  = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);			//MSS: &quot;Pending&quot;
		var lookupStatusOpen  = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Open&quot;);					//MSS: &quot;Open&quot;
		var lookupStatusInstalled  = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Installed&quot;);		//MSS: &quot;Installed&quot;
		var lookupStatusCompleted = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);			//MSS: &quot;Complete&quot;
		var lookupStatusCancelled = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);		//MSS: &quot;Cancelled&quot;
		var lookupStatusActiveAsset = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Active&quot;);				//MSS: &quot;Active&quot;
		var lookupStatusSuspendedAsset = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;IMPL_PHASE&quot;, &quot;Suspended&quot;);		//MSS: &quot;Suspended&quot;
		var lookupNewActionCode = TheApplication().InvokeMethod (&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);				//MSS: &quot;Add&quot;
		var searchst = &quot;[Billing Account Id] = &apos;&quot; + billingAccountID + &quot;&apos; AND [Status] = &apos;&quot; + lookupStatusActiveAsset + &quot;&apos; AND ( [Product Part Number] = &apos;5000&apos; OR [Product Part Number] = &apos;1000&apos; )&quot;;//Modified for build 1.4
		var installDate 		  = &quot;&quot;;
		var assetDiscountId     = &quot;&quot;;

		//Begin - Scripting 15 - Input validation 
		var inProp  :PropertySet = TheApplication().NewPropertySet();
		var outProp : PropertySet = TheApplication().NewPropertySet();
		var BS  : Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;billingAccountID&quot;,billingAccountID);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		//End - Scripting 15

		assetItemBC.SetViewMode(AllView);
		assetItemBC.ClearToQuery();
		assetItemBC.ActivateField(&quot;Billing Account Id&quot;);
		assetItemBC.ActivateField(&quot;Install Date&quot;);
		assetItemBC.ActivateField(&quot;Product Part Number&quot;);
		assetItemBC.ActivateField(&quot;VF Active Discount Flag&quot;);
		assetItemBC.ActivateField(&quot;Status&quot;);
		assetItemBC.SetSearchExpr(searchst);//Modified for build 1.4
		assetItemBC.ExecuteQuery(ForwardBackward); //DIVA 20120315 - Oracle review comments: ForwardBackward.
			  
		var assetItemBCExists = assetItemBC.FirstRecord();
		var count = assetItemBC.CountRecords();
		//Count cannot be removed here since the validation should be done if there are only 2 records returned
		if (count == 2) {
		  while(assetItemBCExists ) {
				partNum = assetItemBC.GetFieldValue(&quot;Product Part Number&quot;);
				assetDiscountId = assetItemBC.GetFieldValue(&quot;Id&quot;);
				
				if ( partNum == &quot;5000&quot;)	{																//MSS: Product=&quot;Discount&quot;
					assetDiscountId = assetItemBC.GetFieldValue(&quot;Id&quot;);
					installDate     = assetItemBC.GetFieldValue(&quot;Install Date&quot;);
					var checkResult = CheckCommitmentPeriod(assetDiscountId, installDate);
					if (checkResult) {
						if (lookupStatusActiveAsset == assetItemBC.GetFieldValue(&quot;Status&quot;) ) {
							assetItemBC.SetFieldValue(&quot;VF Active Discount Flag&quot;,&quot;Y&quot;);
							assetItemBC.WriteRecord();
						}
					}
				}
				assetItemBCExists = assetItemBC.NextRecord();
		   } 	
		}
	}	
	finally {
		assetItemBC = null;
		accountBO = null;
		BS = null;
		inProp = null;
		outProp = null;
	}
}//! function manageActiveDiscountFlag(billingAccountID) for CBU"
			   SEQUENCE="39"
			   UPDATED="01/26/2016 15:20:46"
			   UPDATED_BY="SADMIN"
			   CREATED="09/26/2014 16:06:32"
			   CREATED_BY="MSOUSA">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



