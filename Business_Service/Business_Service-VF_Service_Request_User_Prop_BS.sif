<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   LOCKED_DATE="08/11/2017 16:04:06"
	   NAME="VF SR Creation"
	   UI_FREEZE="N"
	   UPDATED="03/27/2018 16:28:14"
	   UPDATED_BY="IBM_MERVEO"
	   CREATED="05/23/2011 19:47:20"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Service Request User Prop BS"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="03/28/2018 08:52:27"
		   UPDATED_BY="IBM_MERVEO"
		   CREATED="12/07/2012 17:34:55"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTRCBU WA#18 - MPONTE 2015.01.20"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AssignMNPToMe"
			   UPDATED="03/02/2015 21:25:24"
			   UPDATED_BY="SADMIN"
			   CREATED="03/02/2015 21:25:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AssignMNPToMe"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/02/2015 21:25:24"
				   UPDATED_BY="SADMIN"
				   CREATED="03/02/2015 21:25:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AssignMe"
			   UPDATED="12/07/2012 17:34:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AssignMe"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2012 17:34:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2012 17:34:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AssignTo"
			   UPDATED="12/07/2012 17:34:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AssignTo"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2012 17:34:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2012 17:34:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="[IBMMOLAMLI] - Sonic Agile 6th Sprint - Automatic SR"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CreateSuspendServiceReq"
			   UPDATED="03/27/2018 16:28:14"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="03/27/2018 16:28:14"
			   CREATED_BY="IBM_MERVEO">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Action Sub Reason"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/27/2018 16:28:14"
				   UPDATED_BY="IBM_MERVEO"
				   CREATED="03/27/2018 16:28:14"
				   CREATED_BY="IBM_MERVEO">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Phone Number"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/27/2018 16:28:14"
				   UPDATED_BY="IBM_MERVEO"
				   CREATED="03/27/2018 16:28:14"
				   CREATED_BY="IBM_MERVEO">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Service Request Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/27/2018 16:28:14"
				   UPDATED_BY="IBM_MERVEO"
				   CREATED="03/27/2018 16:28:14"
				   CREATED_BY="IBM_MERVEO">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Triplet Number"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/27/2018 16:28:14"
				   UPDATED_BY="IBM_MERVEO"
				   CREATED="03/27/2018 16:28:14"
				   CREATED_BY="IBM_MERVEO">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CreateSuspendServiceReq"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="03/27/2018 16:28:14"
				   UPDATED_BY="IBM_MERVEO"
				   CREATED="03/27/2018 16:28:14"
				   CREATED_BY="IBM_MERVEO">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="DeselectAll"
			   UPDATED="12/07/2012 17:34:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="DeselectAll"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2012 17:34:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2012 17:34:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SelectAllRecord"
			   UPDATED="12/07/2012 17:34:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SelectAllRecord"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2012 17:34:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2012 17:34:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SendBackToOwner"
			   UPDATED="12/07/2012 17:34:55"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SendBackToOwner"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/07/2012 17:34:55"
				   UPDATED_BY="SADMIN"
				   CREATED="12/07/2012 17:34:55"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTRCBU WA#31 2014.10.28 - HRODRIGUES"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetAssignTo"
			   UPDATED="12/01/2014 11:49:13"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2014 11:49:13"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="SetAssignTo"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/01/2014 11:49:13"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2014 11:49:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTRCBU WA#31 2014.10.28 - HRODRIGUES"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="fCreateActivityPlan"
			   UPDATED="12/04/2014 16:12:29"
			   UPDATED_BY="SADMIN"
			   CREATED="12/04/2014 16:12:29"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="fCreateActivityPlan"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/04/2014 16:12:29"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2014 16:12:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTRCBU WA#31 2014.10.28 - HRODRIGUES"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="fPrepareNotification"
			   UPDATED="12/04/2014 16:12:29"
			   UPDATED_BY="SADMIN"
			   CREATED="12/04/2014 16:12:29"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="fPrepareNotification"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/04/2014 16:12:29"
				   UPDATED_BY="SADMIN"
				   CREATED="12/04/2014 16:12:29"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTRCBU WA#31 2014.10.28 - HRODRIGUES"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="fSRDelivery"
			   UPDATED="12/01/2014 11:49:13"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2014 11:49:13"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="fSRDelivery"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/01/2014 11:49:13"
				   UPDATED_BY="SADMIN"
				   CREATED="12/01/2014 11:49:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AssignAutomatically"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="//GEN_REQ_532 : IDC-GPS :01/10/2013: Created new
function AssignAutomatically(Inputs, Outputs)
{
	try
	{
		var app 						= TheApplication();
		var boServiceRequest : BusObject= null;
		var bcServiceRequest : BusComp	= null;
		boServiceRequest				= app.ActiveBusObject();
		bcServiceRequest				= boServiceRequest.GetBusComp(&quot;Service Request&quot;);
		var strSRStatusInprogress 		= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		var strSRStatusOpen 			= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		var isRecord = &quot;&quot;;
		
		with(bcServiceRequest)
		{
			ClearToQuery();
			ActivateField(&quot;VF Select&quot;);
			SetSearchExpr(&quot;([Status] = &apos;&quot;+strSRStatusInprogress+&quot;&apos; OR [Status] = &apos;&quot;+strSRStatusOpen+&quot;&apos;) AND [VF Select] = &apos;Y&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			isRecord = FirstRecord();
			if(!isRecord)
			{
				//show error message - there is no avaliable SR to be assigned           
				//Error Message --&gt;Please select at list 1 service request to perform the automatic assignment / Lütfen otomatik atanacak en az 1 hizmet talebi seçiniz
				app.RaiseErrorText(app.LookupMessage(&quot;VF Message Category&quot;, &quot;Stab_002&quot;));
			}
			while (isRecord)
			{ 
				var sSRRowId = GetFieldValue(&quot;Id&quot;);
				//Call method ‘Assign’ of BS ‘Synchronous Assignment Manager Requests’;
				var psInputs	= app.NewPropertySet();                           
				var psOutputs	= app.NewPropertySet();           
				var bsGeneralOperations = app.GetService (&quot;Synchronous Assignment Manager Requests&quot;);
				psInputs.SetProperty(&quot;AsgnObjName&quot;, &quot;Service Request&quot;);
				psInputs.SetProperty(&quot;ObjRowId&quot;, sSRRowId);
				bsGeneralOperations.InvokeMethod(&quot;Assign&quot;, psInputs, psOutputs);
				WriteRecord(); 
				isRecord = NextRecord();
			}//End While
			ClearToQuery();
			ActivateField(&quot;VF Select&quot;);
			SetSearchExpr(&quot;([Status] = &apos;&quot;+strSRStatusInprogress+&quot;&apos; or [Status] = &apos;&quot;+strSRStatusOpen+&quot;&apos;) AND [VF Select] = &apos;Y&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			isRecord = FirstRecord();
			while (isRecord)
			{
				SetFieldValue(&quot;VF Select&quot;, &quot;N&quot;);
				isRecord = NextRecord();
			}
		}//End With
	}//End try
	finally
	{
		bcServiceRequest 	= null;
		boServiceRequest 	= null;
		app					= null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="04/04/2013 19:27:34"
			   UPDATED_BY="SADMIN"
			   CREATED="03/07/2013 21:36:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AssignMNPToMe"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AssignMNPToMe(Inputs, Outputs)
{
	//VFTRCBU WA#18 - MPONTE 2015.01.20 - Assign the selected records to the LoginUser
	try{
		var boActive 		= TheApplication().ActiveBusObject();
		var bcActive 		= boActive.GetBusComp(&quot;Service Request&quot;);
		var boSR 			= TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcSR			= boSR.GetBusComp(&quot;Service Request&quot;);
		
		var strOwnerGroup	= Inputs.GetProperty(&quot;Owner Group&quot;);
		var strLoginId 		= Inputs.GetProperty(&quot;User&quot;);
		
		var isSelected 		= bcActive.FirstSelected();
	
		while(isSelected){
			bcSR.ClearToQuery();
			bcSR.SetViewMode(AllView);
			bcSR.SetSearchSpec(&quot;Id&quot;, bcActive.GetFieldValue(&quot;Id&quot;));
			bcSR.ExecuteQuery(ForwardOnly); 
			if (bcSR.FirstRecord()){	
				bcSR.SetFieldValue(&quot;Owned By Id&quot;, strLoginId);
				bcSR.SetFieldValue(&quot;Status&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;));
				bcSR.WriteRecord();
			}
			else{
				TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;RACQ_001&quot;));
			}
			isSelected = bcActive.NextSelected();
		}
		bcActive.InvokeMethod(&quot;RefreshBusComp&quot;);
	}
	finally{
		boActive = null;
		bcActive = null;
		boSR = null;
		bcSR = null;
		strOwnerGroup = null;
		strLoginId = null;
		isSelected = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="03/02/2015 21:25:24"
			   UPDATED_BY="SADMIN"
			   CREATED="03/02/2015 21:25:24"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AssignMe"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AssignMe(Inputs, Outputs)
{
	try{
		var app							= TheApplication();
		var strOwnerGroup				= Inputs.GetProperty(&quot;Owner Group&quot;);
		var strLoginId 				= Inputs.GetProperty(&quot;User&quot;);
		var ownername               = TheApplication().LoginName();
		var strSRStatusOpen 		= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		var strSRStatusInprogress 		= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		
		var boServiceRequest : BusObject;
		var bcServiceRequest : BusComp;
		var boSR : BusObject;
		var bcSR : BusComp;

		boServiceRequest = app.ActiveBusObject();
		bcServiceRequest = boServiceRequest.GetBusComp(&quot;Service Request&quot;);
		var SRId = bcServiceRequest.GetFieldValue(&quot;Id&quot;);
		var strExp = &quot;[Owned By Id] is null AND [Owner Group] = &apos;&quot;+strOwnerGroup+&quot;&apos; AND ([Status] = &apos;&quot;+ strSRStatusInprogress +&quot;&apos; OR [Status] = &apos;&quot;+ strSRStatusOpen +&quot;&apos;) AND [VF Lock] &lt;&gt;&apos;Y&apos;&quot;; //
		bcServiceRequest.SetSearchExpr (strExp);
		bcServiceRequest.SetSortSpec (&quot;Created(ASCENDING)&quot;);
		bcServiceRequest.SetViewMode(AllView);
		bcServiceRequest.ExecuteQuery(ForwardOnly); 
		var isRecord = bcServiceRequest.FirstRecord();
		if (isRecord)
		{	
			var strId = bcServiceRequest.GetFieldValue(&quot;Id&quot;);
			bcServiceRequest.SetFieldValue(&quot;Owned By Id&quot;, strLoginId);
			var option=&quot;2&quot;;
			HistoryTracking(option, strId, strOwnerGroup, ownername);
		  	bcServiceRequest.WriteRecord();
		  	boSR = app.GetBusObject(&quot;Service Request&quot;);
			bcSR = boSR.GetBusComp(&quot;Service Request&quot;); // ISCHPOTE : 26/01/2012 : TLGA1130 : Amended BO to fix the defect
			with(bcSR)
			{
				SetViewMode(AllView);
			  	ClearToQuery();
			  	SetSearchSpec (&quot;Id&quot;, strId);
			  	ExecuteQuery(ForwardBackward); 
			  	//bcSR.FirstRecord(); // ISCHPOTE : 26/01/2012 : TLGA1202 : Commented out as not required
			  	if(FirstRecord()){app.GotoView(&quot;PLW Service Request Note View&quot;,boSR);}
			 }
			 
		 
		}else
		{
		//show error message - there is no avaliable SR to be assigned 	
			var strMsgId = &quot;RACQ_001&quot;; 
			app.RaiseErrorText(app.LookupMessage(&quot;VF Message Category&quot;, strMsgId));
		}
	}
	finally
	{
		boServiceRequest = null;
		bcServiceRequest = null;
		boSR = null;
		bcSR = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="05/04/2015 22:50:15"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AssignTo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AssignTo(Inputs, Outputs)
{
	try
	{
		var app							= TheApplication();
	    //var strOwnerGroup 				= Inputs.GetProperty(&quot;OwnerGroup&quot;); 
	    //var strOwnerName  				= Inputs.GetProperty(&quot;OwnerName&quot;); 
		var strSRStatusInprogress 		= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		var strSRStatusOpen 			= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		
		var boServiceRequest : BusObject;
		var bcServiceRequest : BusComp;
		/*
		var bcPickOwner : BusComp;
		var recordExists;
		var strOwnerGroupId;
		var strOwnerId					= Inputs.GetProperty(&quot;OwnerId&quot;); 		
		*/
		var propIN						= app.NewPropertySet();
		var propOUT						= app.NewPropertySet();
		/*
		boServiceRequest                = app.GetBusObject(&quot;VF Service Request Assignment&quot;);
	    bcServiceRequest 				= boServiceRequest.GetBusComp(&quot;VF Service Request Assignment3&quot;);
		*/
		boServiceRequest                = app.ActiveBusObject();
		bcServiceRequest 				= boServiceRequest.GetBusComp(&quot;Service Request&quot;);
		
		var sBCSearchExpr = bcServiceRequest.GetSearchExpr();
		var sSearchAdd  = &quot;&quot;;
		if(sBCSearchExpr != &quot;&quot;)
			sSearchAdd = &quot;(&quot; + sBCSearchExpr +&quot;)&quot; + &quot; AND [VF Select] = &apos;Y&apos; AND ([Status] = &apos;&quot;+ strSRStatusInprogress +&quot;&apos; OR [Status] = &apos;&quot;+ strSRStatusOpen +&quot;&apos;)&quot;;
		else
			sSearchAdd = &quot;[VF Select] = &apos;Y&apos; AND ([Status] = &apos;&quot;+ strSRStatusInprogress +&quot;&apos; OR [Status] = &apos;&quot;+ strSRStatusOpen +&quot;&apos;)&quot;;
			
		var listOfSR =  app.NewPropertySet();
		var sIdSR = &quot;&quot;;
		with(bcServiceRequest)
		{	
			SetViewMode(ManagerView); 
			ClearToQuery();
			SetSearchExpr(sSearchAdd);
			ExecuteQuery(ForwardOnly);
			var isRecord = FirstRecord();
		    while (isRecord)
		    {
	    		sIdSR = GetFieldValue(&quot;Id&quot;);	
	      		listOfSR.SetProperty(sIdSR,sIdSR);
	      		isRecord = NextRecord();
		   }
		   sIdSR = &quot;&quot;;
		}
		
		SetAssignTo(Inputs,listOfSR);
		/*
		with(bcServiceRequest)
		{		
			//ActivateField(&quot;Owner&quot;);
			//ActivateField(&quot;Owner Group&quot;);
			ActivateField(&quot;VF Owner&quot;);
			ActivateField(&quot;VF Owner Group&quot;);
			ActivateField(&quot;Owned By Group Id&quot;);	
			ActivateField(&quot;Owned By Id&quot;);
			ActivateField(&quot;VF Select&quot;);
			SetSearchExpr(&quot;([Status] = &apos;&quot;+strSRStatusInprogress+&quot;&apos; or [Status] = &apos;&quot;+strSRStatusOpen+&quot;&apos;) and [VF Select] = &apos;Y&apos;&quot;);
			//SetSearchSpec (&quot;Status&quot;, strSRStatusInprogress);
			//SetSearchSpec (&quot;VF Select&quot;, &quot;Y&quot;);
			SetViewMode(AllView);
			ExecuteQuery(ForwardOnly); 
			var isRecord = FirstRecord();
			if(!isRecord){
			//show error message - there is no avaliable SR to be assigned 	
				var strMsgId = &quot;RACQ_002&quot;; 
				app.RaiseErrorText(app.LookupMessage(&quot;VF Message Category&quot;, strMsgId));
			}
		    while (isRecord){ 
		    	SetFieldValue(&quot;VF Select&quot;, &quot;N&quot;);
		    	if(strOwnerGroupId){
		    	SetFieldValue(&quot;Owned By Group Id&quot;, strOwnerGroupId);
		    	}
		    	else{
					//bcPickOwner = GetPicklistBusComp(&quot;Owner Group&quot;);
					bcPickOwner = GetPicklistBusComp(&quot;VF Owner Group&quot;);
					bcPickOwner.ClearToQuery();
					bcPickOwner.SetViewMode(AllView);
					bcPickOwner.ActivateField(&quot;Name&quot;);
					bcPickOwner.SetSearchSpec(&quot;Name&quot;, &quot;\&apos;&quot;+strOwnerGroup+&quot;\&apos;&quot;);
					bcPickOwner.ExecuteQuery(ForwardOnly);
					recordExists = bcPickOwner.FirstRecord ();
					if(bcPickOwner.FirstRecord())
					{
						bcPickOwner.Pick();
						strOwnerGroupId = bcPickOwner.GetFieldValue(&quot;Id&quot;);
						SetFieldValue(&quot;Owned By Group Id&quot;, strOwnerGroupId);
					}
				}
		    	if(strOwnerId){
		    	SetFieldValue(&quot;Owned By Id&quot;, strOwnerId);
		    	}
		    	else if(strOwnerName!=&quot;&quot;){
					//bcPickOwner = GetPicklistBusComp(&quot;Owner&quot;);
					bcPickOwner = GetPicklistBusComp(&quot;VF Owner&quot;);
					bcPickOwner.ClearToQuery();
					bcPickOwner.SetViewMode(AllView);
					bcPickOwner.ActivateField(&quot;Login Name&quot;);
					bcPickOwner.SetSearchSpec(&quot;Login Name&quot;, &quot;\&apos;&quot;+strOwnerName+&quot;\&apos;&quot;);
					bcPickOwner.ExecuteQuery(ForwardOnly);
					recordExists = bcPickOwner.FirstRecord ();
					if(bcPickOwner.FirstRecord())
					{
						bcPickOwner.Pick();
						strOwnerId = bcPickOwner.GetFieldValue(&quot;Id&quot;);
						SetFieldValue(&quot;Owned By Id&quot;, strOwnerId);
					}
				}
		    	
		    	
		      	WriteRecord();
	      		isRecord = NextRecord();
		   }
		}
		*/
		with(bcServiceRequest)
		{	
			ClearToQuery ();		
			SetViewMode(ManagerView);
			SetSearchExpr(sBCSearchExpr);
			ExecuteQuery(ForwardOnly); 
		}
		
		var strRefresh = app.GetService(&quot;FINS Teller UI Navigation&quot;);
		
		app.SetProfileAttr(&quot;SROrderBy&quot;,&quot;N&quot;);
		
		strRefresh.InvokeMethod (&quot;RefreshCurrentApplet&quot;, propIN, propOUT);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest 	= null;
	//	bcPickOwner			= null;
		boServiceRequest 	= null;
		app 				= null;
		listOfSR = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="03/02/2015 21:25:24"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateSuspendServiceReq"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CreateSuspendServiceReq(Inputs, Outputs)
{
	try
	{
		var vTripletNo = Inputs.GetProperty(&quot;Triplet Number&quot;);
		var vPhoneNumber = Inputs.GetProperty(&quot;Phone Number&quot;);
		var vServiceRequestId = Inputs.GetProperty(&quot;Service Request Id&quot;);
		var vActionSubReason = Inputs.GetProperty(&quot;Action Sub Reason&quot;);		
		
		var vSmartScriptName;
		var vSmartScriptId;	
		var vStartPageName;
		var vStartPageId;
		var vStartQuestionName;
		var vFromQuestionName;
		var vNextQuestionName;
		var vQuestionId;		
		var vQuestionTrk; 
		var vMustAnswer; 
		var vCallScriptRunId; 
	
		
		var oBoTriplet = TheApplication().GetBusObject(&quot;VF ACT Triplet&quot;);
		var oBcTriplet= oBoTriplet.GetBusComp(&quot;VF ACT Sub-Area List Of Values&quot;);
		
		var oBoSmartScripts = TheApplication().GetBusObject(&quot;Smart Scripts&quot;);
		var oBcSmartScripts= oBoSmartScripts.GetBusComp(&quot;Smart Script Paths&quot;);
		var oBcSmartScriptPages= oBoSmartScripts.GetBusComp(&quot;Smart Script Pages&quot;);	
		var oBcSmartScriptQuestions= oBoSmartScripts.GetBusComp(&quot;Smart Script Questions&quot;);
		var oBcSSQuestionBranch= oBoSmartScripts.GetBusComp(&quot;Smart Script Page From Question&quot;);	
		var oBcCSQuestionTranslation= oBoSmartScripts.GetBusComp(&quot;Call Script Question Translations&quot;);	
			
		var oBoServiceRequest = TheApplication().GetBusObject(&quot;Call Scripts&quot;);
		var oBcCallScriptRuns= oBoServiceRequest.GetBusComp(&quot;Call Script Runs&quot;);
		var oBcCallScriptRunAnswers= oBoServiceRequest.GetBusComp(&quot;Call Script Run Answers&quot;);
		
		
		//Create Call Script Runs
		with(oBcCallScriptRuns)
		{
			ActivateField (&quot;Target Row Id&quot;);
			ActivateField (&quot;VF Rec to be deleted&quot;);
			ActivateField (&quot;Duration&quot;);
			ActivateField (&quot;VF Current Counter&quot;);
			ActivateField (&quot;Path Id&quot;);
			ActivateField (&quot;Status Code&quot;);
			ActivateField (&quot;Language Code&quot;);
			ActivateField (&quot;Start Date&quot;);
			
			NewRecord(NewAfter);
			SetFieldValue(&quot;Target Row Id&quot;, vServiceRequestId);
			SetFieldValue(&quot;VF Rec to be deleted&quot;, &quot;N&quot;);
			SetFieldValue(&quot;Duration&quot;, &quot;508&quot;);
			SetFieldValue(&quot;VF Current Counter&quot;, &quot;4&quot;);
			SetFieldValue(&quot;Path Id&quot;, vServiceRequestId);
			SetFieldValue(&quot;Status Code&quot;, &quot;Saved&quot;);
			SetFieldValue(&quot;Language Code&quot;, &quot;TRK&quot;);
			SetFieldValue(&quot;Start Date&quot;, GetFieldValue(&quot;Created&quot;) );	
			
			vCallScriptRunId = GetFieldValue(&quot;Id&quot;);
				
			WriteRecord();
		}
			
		with(oBcTriplet)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Type&quot;);
			ClearToQuery();
			SetSearchSpec (&quot;VF Triplet No&quot;, vTripletNo);
			SetSearchSpec (&quot;Type&quot;, &quot;SR_AREA&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord())
		    {
		   		vSmartScriptName = GetFieldValue(&quot;Smart Script&quot;);

		   		with(oBcSmartScripts)
		   		{
					SetViewMode(AllView);
					ActivateField(&quot;Name&quot;);
					ClearToQuery();
					SetSearchSpec (&quot;Name&quot;, vSmartScriptName);
					ExecuteQuery(ForwardOnly);
					if (FirstRecord())
					{
						vSmartScriptId = GetFieldValue(&quot;Id&quot;);
						vStartPageName = GetFieldValue(&quot;Start Page Name&quot;);
						
						with(oBcSmartScriptPages)
						{
							SetViewMode(AllView);
							ActivateField(&quot;Name&quot;);
							ActivateField(&quot;Start Question Name&quot;);
							ClearToQuery();
							SetSearchSpec (&quot;Name&quot;, vStartPageName);
							ExecuteQuery(ForwardOnly);
							if (FirstRecord())
							{
								vStartQuestionName = GetFieldValue(&quot;Start Question Name&quot;);
								vFromQuestionName = vStartQuestionName;
								
								with(oBcSSQuestionBranch)
								{
									var isRecord = true;
									
									while (isRecord)	
									{
										SetViewMode(AllView);
										ActivateField(&quot;From Question Name&quot;);
										ActivateField(&quot;Next Question Name&quot;);
										ClearToQuery();
										SetSearchSpec (&quot;From Question Name&quot;, vFromQuestionName);
										ExecuteQuery(ForwardOnly);
									
										if (FirstRecord())
										{
											with(oBcSmartScriptQuestions)
											{
												SetViewMode(AllView);
												ActivateField(&quot;Must Answer&quot;);
												ClearToQuery();
												SetSearchSpec (&quot;Name&quot;, vFromQuestionName);
												ExecuteQuery(ForwardOnly);
												if (FirstRecord())	
												{	
													vMustAnswer = GetFieldValue(&quot;Must Answer&quot;);
													vQuestionId = GetFieldValue(&quot;Id&quot;);
												}
											}
											with(oBcCSQuestionTranslation)
											{
												SetViewMode(AllView);
												ActivateField(&quot;Question Name&quot;);
												ActivateField(&quot;Language Code&quot;);
												ClearToQuery();
												SetSearchSpec (&quot;Language Code&quot;, &quot;TRK&quot;);
												SetSearchSpec (&quot;Question Name&quot;, vFromQuestionName);
												ExecuteQuery(ForwardOnly);
												if (FirstRecord())	
												{
													vQuestionTrk = GetFieldValue(&quot;Question&quot;);
												}
											}
											
											if( vMustAnswer == &quot;Must Answer&quot;)
											{
												//Create Call Script Run Answers
												with(oBcCallScriptRunAnswers)
												{
													ActivateField (&quot;Run Id&quot;);
													ActivateField (&quot;Question Id&quot;);
													ActivateField (&quot;Answer Text&quot;);
													ActivateField (&quot;Created By&quot;);
												
													NewRecord(NewAfter);
												    SetFieldValue(&quot;Run Id&quot;, vCallScriptRunId);
													SetFieldValue(&quot;Question Id&quot;, vQuestionId);
													//if İrtibat Numarası, fill with Contact Number
													if( vQuestionTrk == &quot;İrtibat Numarası&quot; )
													{
														SetFieldValue(&quot;Answer Text&quot;, vPhoneNumber);
													}
													else if( vQuestionTrk == &quot;Talep Şekli&quot; )
													{
														if ( vActionSubReason == &quot;Freeze&quot;)
															SetFieldValue(&quot;Answer Text&quot;, &quot;Dondurma&quot;);
														else if ( vActionSubReason == &quot;Inheritance&quot; )
															SetFieldValue(&quot;Answer Text&quot;, &quot;Veraseten&quot;);
														else
															SetFieldValue(&quot;Answer Text&quot;, &quot;Seçiniz&quot;);
													}
													else
													{
														SetFieldValue(&quot;Answer Text&quot;, &quot;Seçiniz&quot;);
													}
													WriteRecord();
												}
											}
											
											vNextQuestionName = GetFieldValue(&quot;Next Question Name&quot;);
											if( vNextQuestionName != null )
											{
												vFromQuestionName = vNextQuestionName;
											}
											else
												isRecord = false;
										}
										else
											isRecord = false;										
									}														
								}
							}						
						}
					}
		   		}
		   }
		}
	
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		oBoTriplet = null;
		oBcTriplet = null;
		oBoSmartScripts = null;
		oBcSmartScripts = null;
		oBcSmartScriptPages = null;
		oBcSmartScriptQuestions = null;
		oBcSSQuestionBranch = null;
		oBcCSQuestionTranslation = null;
		oBoServiceRequest = null;
		oBcCallScriptRuns = null;
		oBcCallScriptRunAnswers = null;
	}	
}"
			   SEQUENCE="5"
			   UPDATED="03/27/2018 16:28:14"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="03/27/2018 16:28:14"
			   CREATED_BY="IBM_MERVEO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeselectAll"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeselectAll(Inputs, Outputs)
{
	try
	{
		var app							= TheApplication();
		var boServiceRequest : BusObject;
		var bcServiceRequest : BusComp;	
		var bcServiceRequestPerf : BusComp;	
		var tmp							= null;
		var propIN						= app.NewPropertySet();
		var propOUT						= app.NewPropertySet();
	
	    boServiceRequest                = app.ActiveBusObject();
		bcServiceRequest 				= boServiceRequest.GetBusComp(&quot;Service Request&quot;);
		bcServiceRequestPerf 			= boServiceRequest.GetBusComp(&quot;VF Service Request Performance&quot;);
		var strRefresh = app.GetService(&quot;FINS Teller UI Navigation&quot;);
		var strSRStatusInprogress 		= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		var strSRStatusOpen 			= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		var sSearchAdd;
		var sBCSearchExpr = bcServiceRequest.GetSearchExpr();
		if(sBCSearchExpr != &quot;&quot;)
			sSearchAdd = sBCSearchExpr + &quot; AND [VF Select] = &apos;Y&apos; AND ([Status] = &apos;&quot;+ strSRStatusInprogress +&quot;&apos; OR [Status] = &apos;&quot;+ strSRStatusOpen +&quot;&apos;)&quot;;
		else
			sSearchAdd = &quot;[VF Select] = &apos;Y&apos; AND ([Status] = &apos;&quot;+ strSRStatusInprogress +&quot;&apos; OR [Status] = &apos;&quot;+ strSRStatusOpen +&quot;&apos;)&quot;;
		
		var listOfSR =  app.NewPropertySet();
		var sIdSR = &quot;&quot;;

		with(bcServiceRequest)
		{			
			//ActivateField(&quot;VF Select RO&quot;);
			//ActivateField(&quot;Read Only&quot;);
			//ActivateField(&quot;VF Select&quot;);
			//SetSearchExpr(sSearchAdd);
			//SetViewMode(ManagerView); 
			//ExecuteQuery(ForwardOnly);
			var isRecord = FirstRecord();
		    while (isRecord)
		    {
	    	//	SetFieldValue(&quot;VF Select&quot;, &quot;N&quot;);
	      	//	WriteRecord();	
	      		sIdSR = GetFieldValue(&quot;Id&quot;);	
	      		listOfSR.SetProperty(sIdSR,sIdSR);
	      		isRecord = NextRecord();
		   }
		   sIdSR = &quot;&quot;;
		}
		
		SetSelectFlag(listOfSR,&quot;N&quot;);
		
		with(bcServiceRequest)
		{	
			ClearToQuery ();		
			SetViewMode(ManagerView);
			SetSearchExpr(sBCSearchExpr);
			isRecord = FirstRecord();
		}
		strRefresh.InvokeMethod (&quot;RefreshCurrentApplet&quot;, propIN, propOUT);
		//app.GetService(&quot;FINS Teller UI Navigation&quot;).InvokeMethod (&quot;RefreshCurrentApplet&quot;, propIN, propOUT);
	}
	catch(e)
	{
		throw(e);
	}
	finally 
	{
		bcServiceRequest 	= null;
		bcServiceRequestPerf 	= null;
		boServiceRequest 	= null;
		app 				= null;
		propIN	= null;
		propOUT	= null;
		strRefresh	= null;
		listOfSR = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="03/02/2015 21:25:24"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="HistoryTracking"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function HistoryTracking(option, srId, OwnerGroupName, OwnerName) {

	try {
	    
	    var TrackBO = TheApplication ().GetBusObject (&quot;Service Request&quot;);
		var TrackBC = TrackBO.GetBusComp(&quot;VF Request History&quot;);
	

		TrackBC.ActivateField(&quot;Request Id&quot;);
		TrackBC.ActivateField(&quot;End Date&quot;);
		TrackBC.ActivateField(&quot;Created&quot;);
		TrackBC.ActivateField(&quot;Owner Group&quot;);
		TrackBC.ActivateField(&quot;Owner&quot;);
		TrackBC.ActivateField(&quot;Start Date&quot;);
		TrackBC.ActivateField(&quot;VF Timestamp&quot;);

		TrackBC.SetViewMode(AllView);
		TrackBC.ClearToQuery();
		TrackBC.SetSortSpec(&quot;End Date (DESCENDING)&quot;); //RETROFITS | TiagoRocha 07.09.2015
		//TrackBC.SetSortSpec(&quot;Created (DESCENDING)&quot;);
		TrackBC.SetSearchSpec(&quot;Request Id&quot;, srId);
		TrackBC.ExecuteQuery(ForwardOnly);

		if (TrackBC.FirstRecord()) {
			
			TrackBC.SetFieldValue(&quot;End Date&quot;,TrackBC.GetFieldValue(&quot;VF Timestamp&quot;));//DEF-4139
		
		}
		TrackBC.NewRecord(NewAfter);

	    TrackBC.SetFieldValue(&quot;Request Id&quot;, srId);
	    
	    

	
		if (option=&quot;1&quot;)
		{	
	        TrackBC.SetFieldValue(&quot;Owner&quot;, &quot;&quot;);
	    	TrackBC.SetFieldValue(&quot;Owner Group&quot;, OwnerGroupName);
	    	
	      }
	      
	      
	      	if (option=&quot;2&quot;)
		{	
	        TrackBC.SetFieldValue(&quot;Owner&quot;, OwnerName);
	    	TrackBC.SetFieldValue(&quot;Owner Group&quot;, OwnerGroupName);
	    	
	      }
		
		TrackBC.WriteRecord();
		
	} catch (e) {
		throw(e);
	}
	finally {
		TrackBC = null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="05/22/2016 22:03:42"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:50:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Init"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Init(Inputs,Outputs)
{
		return (CancelOperation);
}"
			   SEQUENCE="11"
			   UPDATED="07/05/2015 00:57:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2014 11:49:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Query"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Query(Inputs, Outputs)
{
	try
	{
		var oApp = TheApplication();
		var psRow : PropertySet =oApp.NewPropertySet();
    	Outputs.AddChild(psRow);
	}
	finally
	{
		psRow = null;
		oApp = null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="07/05/2015 00:57:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2014 11:49:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SelectAllRecord"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SelectAllRecord(Inputs, Outputs)
{
	try
	{
		var app							= TheApplication();
		var boServiceRequest : BusObject;
		var bcServiceRequest : BusComp;
		var bcServiceRequestPerf : BusComp;
		var propIN						= app.NewPropertySet();
		var propOUT						= app.NewPropertySet();
		var readOnly;
		var sSearchAdd;
	    boServiceRequest                = app.ActiveBusObject();
		bcServiceRequest 				= boServiceRequest.GetBusComp(&quot;Service Request&quot;);
		bcServiceRequestPerf			= boServiceRequest.GetBusComp(&quot;VF Service Request Performance&quot;);
		var strRefresh = app.GetService(&quot;FINS Teller UI Navigation&quot;);
		var strSRStatusInprogress 		= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		var strSRStatusOpen 			= app.InvokeMethod (&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		
		var sBCSearchExpr = bcServiceRequest.GetSearchExpr();
		if(sBCSearchExpr != &quot;&quot;)
			sSearchAdd = sBCSearchExpr + &quot; AND ([Status] = &apos;&quot;+ strSRStatusInprogress +&quot;&apos; OR [Status] = &apos;&quot;+ strSRStatusOpen +&quot;&apos;)&quot;;
		else
			sSearchAdd = &quot;([Status] = &apos;&quot;+ strSRStatusInprogress +&quot;&apos; OR [Status] = &apos;&quot;+ strSRStatusOpen +&quot;&apos;)&quot;;
		
		var listOfSR =  app.NewPropertySet();
		var sIdSR = &quot;&quot;;
		
		with(bcServiceRequest)
		{			
			//ActivateField(&quot;VF Select RO&quot;);
			//ActivateField(&quot;Read Only&quot;);
			//ActivateField(&quot;VF Select&quot;);
			//SetSearchExpr(sSearchAdd);
			//SetViewMode(ManagerView); 
			//ExecuteQuery(ForwardOnly);
			var isRecord = FirstRecord();
		    while (isRecord)
		    {
	    		//SetFieldValue(&quot;VF Select&quot;, &quot;Y&quot;);
	      		//WriteRecord();
	      		sIdSR = GetFieldValue(&quot;Id&quot;);	
	      		listOfSR.SetProperty(sIdSR,sIdSR);
	      		isRecord = NextRecord();
		   }
		   sIdSR = &quot;&quot;;
		}
		
		SetSelectFlag(listOfSR,&quot;Y&quot;);
		
		with(bcServiceRequest)
		{
			ClearToQuery();
			SetViewMode(ManagerView);
			SetSearchExpr(sBCSearchExpr);
			ExecuteQuery(ForwardOnly);
		}
		
		strRefresh.InvokeMethod (&quot;RefreshCurrentApplet&quot;, propIN, propOUT);
		//app.GetService(&quot;FINS Teller UI Navigation&quot;).InvokeMethod (&quot;RefreshCurrentApplet&quot;, propIN, propOUT);
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcServiceRequest 	= null;
		bcServiceRequestPerf 	= null;
		boServiceRequest 	= null;
		app 				= null;
		propIN	= null;
		propOUT	= null;
		strRefresh	= null;
		listOfSR = null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="07/05/2015 00:57:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SendBackToOwner"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SendBackToOwner(Inputs, Outputs)
{	
	try
	{
	    var app					= TheApplication();
	    var strUserId           = Inputs.GetProperty(&quot;SendBackId&quot;);
	    var strId               = Inputs.GetProperty(&quot;ObjectId&quot;);
		var boServiceRequest : BusObject;
		var bcServiceRequest : BusComp;
		var boEmployee : BusObject;
		var bcEmployee : BusComp;
		var propIN						= app.NewPropertySet();
		var propOUT						= app.NewPropertySet();
		
		boEmployee			= app.GetBusObject(&quot;Employee&quot;);
		bcEmployee			= boEmployee.GetBusComp(&quot;Employee&quot;);
		var strOwnerGroupId		: chars  = &quot;&quot;;
		
		with (bcEmployee)
   		{
	      SetViewMode(AllView);
	      ActivateField(&quot;Position Id&quot;);
	      SetSearchSpec(&quot;Id&quot;, strUserId);
	      ExecuteQuery(ForwardOnly);
	      if(FirstRecord())
	      {
	      	strOwnerGroupId = GetFieldValue(&quot;Position Id&quot;);
	      }
   		}
		boServiceRequest        = app.ActiveBusObject();
		bcServiceRequest 		= boServiceRequest.GetBusComp(&quot;Service Request&quot;);
		with(bcServiceRequest)
		{			
				ClearToQuery();
				ActivateField(&quot;Owned By Id&quot;);
				ActivateField(&quot;VF Send Back Id&quot;);
				ActivateField(&quot;Owned By Group Id&quot;);
				SetSearchSpec (&quot;Id&quot;,strId);
				ExecuteQuery(ForwardOnly); 
				var isRecord = FirstRecord();
			    if (isRecord){
			    	SetFieldValue(&quot;Owned By Group Id&quot;, strOwnerGroupId);
		            SetFieldValue(&quot;Owned By Id&quot;, strUserId);
		            WriteRecord();
		        }
		}
/*		with(bcServiceRequest)
		{	
			ClearToQuery ();				//skipped for TLG-5511
			ExecuteQuery(ForwardOnly); 
			isRecord = FirstRecord();
		}*/ 
		var strRefresh = app.GetService(&quot;FINS Teller UI Navigation&quot;);
		strRefresh.InvokeMethod (&quot;RefreshCurrentApplet&quot;, propIN, propOUT);
	}
	finally
	{
		bcEmployee			= null;
		bcServiceRequest	= null;
		boEmployee			= null;
		boServiceRequest	= null;
		app					= null;
		propIN	= null;
		propOUT	= null;
		strRefresh	= null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="07/05/2015 00:57:04"
			   UPDATED_BY="SADMIN"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName)
	{ 
		case &quot;SelectAllRecord&quot;:
			SelectAllRecord(Inputs,Outputs);
			return (CancelOperation);
		case &quot;DeselectAll&quot;:
			DeselectAll(Inputs,Outputs);
			return (CancelOperation);
		case &quot;SendBackToOwner&quot;:
			SendBackToOwner(Inputs,Outputs);
			return (CancelOperation);
		case &quot;AssignTo&quot;:
			AssignTo(Inputs,Outputs);
			return (CancelOperation);
		case &quot;AssignMe&quot;:
			AssignMe(Inputs,Outputs);
			return (CancelOperation);
		case &quot;AssignAutomatically&quot;:
			AssignAutomatically(Inputs, Outputs);
			return (CancelOperation);
		//VFTRCBU WA#31 - Start
		case &quot;fSRDelivery&quot;: 
			fSRDelivery(Inputs, Outputs);
			return (CancelOperation);
		case &quot;Init&quot;: 
			Init(Inputs, Outputs);
			return (CancelOperation);
		case &quot;Query&quot;: 
			Query(Inputs, Outputs);
			return (CancelOperation);
		case &quot;fPrepareNotification&quot;: 
			fPrepareNotification(Inputs, Outputs);
			return (CancelOperation);
		case &quot;fCreateActivityPlan&quot;: 
			fCreateActivityPlan(Inputs, Outputs);
			return (CancelOperation);
		//VFTRCBU WA#31 - End
		//Start - VFTRCBU WA#18 - MPONTE 2015.01.20
		case &quot;AssignMNPToMe&quot;:
			AssignMNPToMe(Inputs,Outputs);
			return (CancelOperation);
		//End - VFTRCBU WA#18 - MPONTE 2015.01.20
		//Sonic Agile 6th Sprint - Automatic SR
		case &quot;CreateSuspendServiceReq&quot;:
			CreateSuspendServiceReq(Inputs,Outputs);
			return (CancelOperation);
		default:
			return (ContinueOperation);
	}
}"
			   SEQUENCE="18"
			   UPDATED="03/27/2018 16:28:14"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="12/07/2012 17:34:55"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetAssignTo"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetAssignTo(Inputs,listOfSR)
{
	try
	{
		var app	= TheApplication();
		
		var oBoServReq : BusObject;
		var oBcServReq : BusComp;
		var bcPickOwner : BusComp;
		
		var propIN			= app.NewPropertySet();
		var propOUT			= app.NewPropertySet();
		
		var recordExists;
		var strOwnerGroupId = Inputs.GetProperty(&quot;OwnerGroupId&quot;); // VFTRCBU WA#31
	
		var strOwnerId		= Inputs.GetProperty(&quot;OwnerId&quot;); 
		var strOwnerGroup 	= Inputs.GetProperty(&quot;OwnerGroup&quot;); 
	    var strOwnerName  	= Inputs.GetProperty(&quot;OwnerName&quot;); 
		
		oBoServReq			= app.GetBusObject(&quot;VF Service Request Assignment&quot;);
	    oBcServReq 			= oBoServReq.GetBusComp(&quot;VF Service Request Assignment3&quot;);
		
		var strId = listOfSR.GetFirstProperty();
		while(strId != &quot;&quot;)
		{
			with(oBcServReq)
			{	
				SetViewMode(AllView);
				ActivateField(&quot;VF Select&quot;);
				ActivateField(&quot;VF Owner&quot;);
				ActivateField(&quot;VF Owner Group&quot;);
				ActivateField(&quot;Owned By Group Id&quot;);	
				ActivateField(&quot;Owned By Id&quot;);
				ClearToQuery();
				SetSearchSpec (&quot;Id&quot;, strId);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
			    {
		    		SetFieldValue(&quot;VF Select&quot;, &quot;N&quot;);
					if(strOwnerGroupId)
					{
				    	SetFieldValue(&quot;Owned By Group Id&quot;, strOwnerGroupId);
				    	var option=&quot;1&quot;;
			    	}
			    	else
			    	{
						bcPickOwner = GetPicklistBusComp(&quot;VF Owner Group&quot;);
						bcPickOwner.ClearToQuery();
						bcPickOwner.SetViewMode(AllView);
						bcPickOwner.ActivateField(&quot;Name&quot;);
						bcPickOwner.SetSearchSpec(&quot;Name&quot;, &quot;\&apos;&quot;+strOwnerGroup+&quot;\&apos;&quot;);
						bcPickOwner.ExecuteQuery(ForwardOnly);
						recordExists = bcPickOwner.FirstRecord ();
						if(bcPickOwner.FirstRecord())
						{
							bcPickOwner.Pick();
							strOwnerGroupId = bcPickOwner.GetFieldValue(&quot;Id&quot;);
							SetFieldValue(&quot;Owned By Group Id&quot;, strOwnerGroupId);
							SetFieldValue(&quot;Owned By Id&quot;, strOwnerId); // VFTRCBU WA#31
							option=&quot;1&quot;; //RCRISPIM: February Retrofit 
						}
					}
		    		if(strOwnerId)
		    		{
		    			SetFieldValue(&quot;Owned By Id&quot;, strOwnerId);
						option=&quot;2&quot;; //RCRISPIM: February Retrofit
		    		}
		    		else if(strOwnerName!=&quot;&quot;)
		    		{
						bcPickOwner = GetPicklistBusComp(&quot;VF Owner&quot;);
						bcPickOwner.ClearToQuery();
						bcPickOwner.SetViewMode(AllView);
						bcPickOwner.ActivateField(&quot;Login Name&quot;);
						bcPickOwner.SetSearchSpec(&quot;Login Name&quot;, &quot;\&apos;&quot;+strOwnerName+&quot;\&apos;&quot;);
						bcPickOwner.ExecuteQuery(ForwardOnly);
						recordExists = bcPickOwner.FirstRecord ();
						if(bcPickOwner.FirstRecord())
						{
							bcPickOwner.Pick();
							strOwnerId = bcPickOwner.GetFieldValue(&quot;Id&quot;);
							SetFieldValue(&quot;Owned By Id&quot;, strOwnerId);
							option=&quot;2&quot;; //RCRISPIM: February Retrofit
						}
					}
					HistoryTracking(option, strId, strOwnerGroup, strOwnerName);
		    		WriteRecord();
				}
			}
			strId = listOfSR.GetNextProperty();
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		bcPickOwner = null;
		oBcServReq 	= null;
		oBoServReq	= null;
		app 		= null;
	}
}"
			   SEQUENCE="15"
			   UPDATED="07/05/2015 00:57:04"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 22:20:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetSelectFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetSelectFlag(listOfSR,sSelect)
{
	try
	{
		var app	= TheApplication();
		var oBoServReq : BusObject;
		var oBcServReqPerf : BusComp;

	    oBoServReq		= app.GetBusObject(&quot;VF Service Request&quot;);
		oBcServReqPerf	= oBoServReq.GetBusComp(&quot;VF Service Request Performance&quot;);
	
		var strId = listOfSR.GetFirstProperty();
		while(strId != &quot;&quot;)
		{
			with(oBcServReqPerf)
			{	
				SetViewMode(AllView);
				ActivateField(&quot;VF Select&quot;);
				ClearToQuery();
				SetSearchSpec (&quot;Id&quot;, strId);
				ExecuteQuery(ForwardOnly);
				if (FirstRecord())
			    {
		    		SetFieldValue(&quot;VF Select&quot;, sSelect);
		      		WriteRecord();
			   }
			}
			strId = listOfSR.GetNextProperty();
		}
	}
	catch(e)
	{
		throw(e);
	}
	finally
	{
		oBcServReqPerf 	= null;
		oBoServReq		= null;
		app 			= null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="07/05/2015 00:57:04"
			   UPDATED_BY="SADMIN"
			   CREATED="08/18/2014 22:20:08"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Timestamp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Timestamp() {
	//var d = Date.fromSystem(Clib.time());
	//return Clib.rsprintf(&quot;%02d/%02d/%04d %02d:%02d:%02d&quot;, d.getMonth() + 1, d.getDate(), d.getFullYear(), d.getHours(), d.getMinutes(), d.getSeconds());
	
	var timestamp;
	var dateFormat = &quot;%m/%d/%Y %H:%M:%S&quot;;
	Clib.strftime(timestamp, dateFormat, Clib.localtime(Clib.time()));
	return (timestamp);
}"
			   SEQUENCE="17"
			   UPDATED="07/05/2015 00:57:04"
			   UPDATED_BY="SADMIN"
			   CREATED="05/04/2015 22:50:15"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="fCreateActivityPlan"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/****************************************************************************
* Description: Create the activity plan and activities.  VFTRCBU WA#31
* Name: Celfocus
* Date Creation: 2014.12.03
* Updated by &lt;DEVELOPER&gt; on &lt;DATE&gt;  
*****************************************************************************/
function fCreateActivityPlan(Inputs, Outputs){
	try{
		var OBo = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var OBcActivityPlan = OBo.GetBusComp(&quot;VFTRCBU SR Activity Plan&quot;);
		var OBcActivity = OBo.GetBusComp(&quot;VFTRCBU SR Activity Plan Action&quot;);
		
		var sActivityTemplateId = Inputs.GetProperty(&quot;VFTRCBU Activity Template Id&quot;);
		var sSRId = Inputs.GetProperty(&quot;Id&quot;);
		var sActivityStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;EVENT_STATUS&quot;, &quot;Closed&quot;);
		
		OBcActivityPlan.NewRecord(NewAfter);
		OBcActivityPlan.SetFieldValue(&quot;Template Id&quot;,sActivityTemplateId);
		OBcActivityPlan.SetFieldValue(&quot;Activity SR Id&quot;,sSRId);
		
		OBcActivityPlan.WriteRecord();
		var sActPlanid = OBcActivityPlan.GetFieldValue(&quot;Id&quot;);
		
		var OBoTemplate = TheApplication().GetBusObject(&quot;Activity Template&quot;);
		var OBcTemplate = OBoTemplate.GetBusComp(&quot;Activity Template&quot;);
		var OBcTemplateActivity = OBoTemplate.GetBusComp(&quot;Template Activity&quot;);
		
		with (OBcTemplate) {
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Id] = &apos;&quot; + sActivityTemplateId + &quot;&apos;&quot;); 
			ExecuteQuery(&quot;ForwardOnly&quot;);
			var isRecord2 = FirstRecord();
			while (isRecord2) {
				with (OBcTemplateActivity) {
					SetViewMode(AllView);
					ClearToQuery();
					ActivateField(&quot;Type&quot;);
					ActivateField(&quot;Priority&quot;);
					ExecuteQuery(&quot;ForwardOnly&quot;);
					var isRecord = FirstRecord();
					while (isRecord) {
						var sType = GetFieldValue(&quot;Type&quot;);
						var sDescription = GetFieldValue(&quot;Description&quot;);
						var sPriority = GetFieldValue(&quot;Priority&quot;);
				
						OBcActivity.NewRecord(NewAfter);
						OBcActivity.SetFieldValue(&quot;Parent Activity Id&quot;,sActPlanid);
						OBcActivity.SetFieldValue(&quot;Priority&quot;,sPriority);
						OBcActivity.SetFieldValue(&quot;Description&quot;,sDescription);
						OBcActivity.SetFieldValue(&quot;Status&quot;,sActivityStatus);
						OBcActivity.SetFieldValue(&quot;Type&quot;,sType);
				
						OBcActivity.WriteRecord();
						isRecord = NextRecord();
					}
				}
				isRecord2 = NextRecord();
			}
		}			
	}
	catch(e){
		throw(e);
	}
	finally{
		OBo = null;
		OBcActivityPlan = null;
		OBcActivity = null;
		OBoTemplate = null;
		OBcTemplate = null;
		OBcTemplateActivity = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="03/02/2015 21:25:24"
			   UPDATED_BY="SADMIN"
			   CREATED="12/04/2014 16:12:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="fPrepareNotification"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/****************************************************************************
 * Description: Verify and prepare to send notifications.  VFTRCBU WA#31
 * Name: Celfocus
 * Date Creation: 2014.12.03
 * Updated by &lt;DEVELOPER&gt; on &lt;DATE&gt;
 *****************************************************************************/
function fPrepareNotification(Inputs, Outputs) {
	try {
		var strGsmNum = Inputs.GetProperty(&quot;VF Customer GSM&quot;);
		var sType = Inputs.GetProperty(&quot;SR Type&quot;);
		var sArea = Inputs.GetProperty(&quot;Area&quot;);
		var strdisplayvalue = Inputs.GetProperty(&quot;Sub-Area&quot;);
		//VFTRCBU WA#31 - Start
		var BOAsset = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var BCAsset = BOAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var sSRBillAccnt = Inputs.GetProperty(&quot;Billing Account Id&quot;);
		var sSRAssetId = Inputs.GetProperty(&quot;Asset Id&quot;);
		var sMarketClass = Inputs.GetProperty(&quot;VF Market Class Calc&quot;);
		var sSRStatus = Inputs.GetProperty(&quot;Status&quot;);
		var strConsumer = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;102&quot;);
		var strAssetActive = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
		var sSMSTemplateOpen;
		var sSMSTemplateClosed;
		var psInput : PropertySet;
		var psOutput : PropertySet;
		var bsoApp : Service;

		//Check if the SR is related with Billing Account and get the GSM N?
		if (strGsmNum == &quot;&quot; &amp;&amp; sSRBillAccnt != &quot;&quot; &amp;&amp; sSRAssetId == &quot;&quot; &amp;&amp; sMarketClass == strConsumer) {
			with (BCAsset) {
				SetViewMode(AllView);
				ActivateField(&quot;Root MSISDN&quot;);
				ActivateField(&quot;Billing Account Id&quot;); //jmarques
				ClearToQuery();
				SetSearchSpec(&quot;Billing Account Id&quot;, sSRBillAccnt);
				ExecuteQuery(ForwardOnly);

				if (FirstRecord())
					strGsmNum = &quot;90&quot; + GetFieldValue(&quot;Root MSISDN&quot;);
			}
		} else if (sSRBillAccnt != &quot;&quot; &amp;&amp; sSRAssetId == &quot;&quot; &amp;&amp; sMarketClass != strConsumer) {
			var BOBilling = TheApplication().GetBusObject(&quot;Billing Account&quot;);
			var BCBilling = BOBilling.GetBusComp(&quot;Billing Account&quot;);
			with (BCBilling) {
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchSpec(&quot;Id&quot;, sSRBillAccnt);
				ExecuteQuery(ForwardOnly);

				if (FirstRecord())
					strGsmNum = GetFieldValue(&quot;Bill To Contact Cellular Number&quot;);
			}
		} else if (strGsmNum != &quot;&quot;)
			strGsmNum = &quot;90&quot; + strGsmNum;

		psInput = TheApplication().NewPropertySet();
		psOutput = TheApplication().NewPropertySet();
		bsoApp = TheApplication().GetService(&quot;VF Status Change Service&quot;);
		psInput.SetProperty(&quot;OpenClosedStatus&quot;, sSRStatus);
		psInput.SetProperty(&quot;GSM&quot;, strGsmNum);
		psInput.SetProperty(&quot;SRType&quot;, sType);
		psInput.SetProperty(&quot;SRArea&quot;, sArea);
		psInput.SetProperty(&quot;subarea&quot;, strdisplayvalue);
		psInput.SetProperty(&quot;MarketClass&quot;, sMarketClass); //VFTRCBU-26371
		
		//DEF-9807
		if (sSRBillAccnt==&quot;&quot; &amp;&amp; sSRAssetId != &quot;&quot;){
			with (BCAsset) {
				SetViewMode(AllView);
				ClearToQuery();
				ActivateField(&quot;Billing Account Id&quot;); //jmarques
				SetSearchExpr(&quot;[Root Asset Id] = &apos;&quot; + sSRAssetId + &quot;&apos;&quot;);
				ExecuteQuery(ForwardOnly);

				if (FirstRecord()) {
					sSRBillAccnt = GetFieldValue(&quot;Billing Account Id&quot;);
					}
			}
		}
		//DEF-9807

		if (sSRAssetId != &quot;&quot;) {
			var strProdGroup = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;TARIFF&quot;);
			var strProdTypeData = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;DATA&quot;);
			var strProdTypeDataTariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;DATA TARIFF&quot;);
			var strProdTypeDataOnlyTariff = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;DATA ONLY TARIFF PLAN&quot;);
			var strProdTypeMobile = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;MOBILE&quot;);
			with (BCAsset) {
				//VFTRCBU WA#31 Check if the SR is related with Subscriber and has Tariff Type = Data: send Email and SMS
				SetViewMode(AllView);
				ClearToQuery();
				SetSearchExpr(&quot;[Billing Account Id] = &apos;&quot; + sSRBillAccnt + &quot;&apos; AND [Status] = &apos;&quot; + strAssetActive + &quot;&apos; AND [VF Product Group] = &apos;&quot; + strProdGroup + &quot;&apos; AND ([VF Product Type]= &apos;&quot; + strProdTypeData + &quot;&apos; OR [VF Product Type]= &apos;&quot; + strProdTypeDataTariff + &quot;&apos; OR [VF Product Type]= &apos;&quot; + strProdTypeDataOnlyTariff + &quot;&apos;)&quot;);
				ExecuteQuery(ForwardOnly);

				if (FirstRecord()) {
					TheApplication().SetProfileAttr(&quot;VFTRCBU_Send_Email&quot;, &quot;Y&quot;);
					if (strGsmNum != &quot;&quot; &amp;&amp; strGsmNum != null) {
						bsoApp.InvokeMethod(&quot;StatusChange&quot;, psInput, psOutput);
						sSMSTemplateOpen = psOutput.GetProperty(&quot;sSMSTemplateOpen&quot;);
						sSMSTemplateClosed = psOutput.GetProperty(&quot;sSMSTemplateClosed&quot;);
					}
				} else {
					//VFTRCBU WA#31 Check if the SR is related with Subscriber and has Tariff Type = Mobile: send SMS
					SetViewMode(AllView);
					ClearToQuery();
					SetSearchExpr(&quot;[Billing Account Id] = &apos;&quot; + sSRBillAccnt + &quot;&apos; AND [Status] = &apos;&quot; + strAssetActive + &quot;&apos; AND [VF Product Group] = &apos;&quot; + strProdGroup + &quot;&apos; AND [VF Product Type]= &apos;&quot; + strProdTypeMobile + &quot;&apos;&quot;);
					ExecuteQuery(ForwardOnly);

					if (FirstRecord()) {
						if (strGsmNum != &quot;&quot; &amp;&amp; strGsmNum != null) {
							bsoApp.InvokeMethod(&quot;StatusChange&quot;, psInput, psOutput);
							sSMSTemplateOpen = psOutput.GetProperty(&quot;sSMSTemplateOpen&quot;);
							sSMSTemplateClosed = psOutput.GetProperty(&quot;sSMSTemplateClosed&quot;);
						}
					}
				}
			}
		} else if (sSRBillAccnt != &quot;&quot;) {
			if (strGsmNum != &quot;&quot; &amp;&amp; strGsmNum != null) {
				bsoApp.InvokeMethod(&quot;StatusChange&quot;, psInput, psOutput);
				sSMSTemplateOpen = psOutput.GetProperty(&quot;sSMSTemplateOpen&quot;);
				sSMSTemplateClosed = psOutput.GetProperty(&quot;sSMSTemplateClosed&quot;);
			}
		} //VFTRCBU WA#31 End
	}
	finally {
		BOAsset = null;
		BCAsset = null;
		BOBilling = null;
		BCBilling = null;
		psInput = null;
		psOutput = null;
		bsoApp = null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="03/13/2016 16:07:45"
			   UPDATED_BY="SADMIN"
			   CREATED="12/04/2014 16:12:29"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="fSRDelivery"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/****************************************************************************
 * Description: Delivery the SRs selected to Owner selected. VFTRCBU WA#31
 * Name: Celfocus
 * Date Creation: 2014.10.28
 * Updated by &lt;DEVELOPER&gt; on &lt;DATE&gt;
 *****************************************************************************/
function fSRDelivery(Inputs, Outputs) {
	try {
		var App = TheApplication();
		var oBO = TheApplication().ActiveBusObject();
		var oBC = oBO.GetBusComp(&quot;Service Request&quot;); ;
		var sBCSearchExpr = oBC.GetSearchExpr();
		var bcPickOwner : BusComp;
		var iCount = 0;
		var iCountSR = 0;
		var aOwner = new Array();
		var aOwnerGroup = new Array();
		var aSRs:Array = new Array();
		var InputProperty;
		var propIN = App.NewPropertySet();
		var propOUT = App.NewPropertySet();
		var strSRStatusInprogress = App.InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;In Progress&quot;);
		var strSRStatusOpen = App.InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
		var iChild = Inputs.GetChildCount();

		for (var i = 0; i &lt; iChild; i++) {
			aOwner[i] = Inputs.GetChild(i).GetProperty(&quot;OwnerId&quot;);
			aOwnerGroup[i] = Inputs.GetChild(i).GetProperty(&quot;OwnerGroupId&quot;);
		}

		var sSearchAdd = &quot;&quot;;
		if (sBCSearchExpr != &quot;&quot;)
			sSearchAdd = &quot;(&quot; + sBCSearchExpr + &quot;)&quot; + &quot; AND [VF Select] = &apos;Y&apos; AND ([Status] = &apos;&quot; + strSRStatusInprogress + &quot;&apos; OR [Status] = &apos;&quot; + strSRStatusOpen + &quot;&apos;)&quot;;
		else
			sSearchAdd = &quot;[VF Select] = &apos;Y&apos; AND ([Status] = &apos;&quot; + strSRStatusInprogress + &quot;&apos; OR [Status] = &apos;&quot; + strSRStatusOpen + &quot;&apos;)&quot;;

		var listOfSR;
		var sIdSR = &quot;&quot;;

		with (oBC) {
			SetViewMode(ManagerView);
			ClearToQuery();
			SetSearchExpr(sSearchAdd);
			ExecuteQuery(&quot;ForwardOnly&quot;);

			var iSRSelected = CountRecords();
			var isRecord = FirstRecord();
			while (isRecord) {
				aSRs[iCountSR] = new Array();
				aSRs[iCountSR][1] = GetFieldValue(&quot;Id&quot;);
				aSRs[iCountSR][0] = GetFieldValue(&quot;VF Remaining Resolution Time Calc3&quot;);
				isRecord = NextRecord();
				iCountSR++;
			}

			aSRs.sort(fSortArray);

			for (var i = 0; i &lt; aSRs.length; i++) {
				listOfSR = App.NewPropertySet();
				InputProperty = App.NewPropertySet();

				sIdSR = aSRs[i][1];
				listOfSR.SetProperty(sIdSR, sIdSR);

				InputProperty.SetProperty(&quot;OwnerId&quot;, aOwner[iCount]);
				InputProperty.SetProperty(&quot;OwnerGroupId&quot;, aOwnerGroup[iCount]);
				SetAssignTo(InputProperty, listOfSR);

				if (iCount == iChild - 1)
					iCount = 0;
				else
					iCount++;
			}
			SetViewMode(ManagerView);
			ClearToQuery();
			SetSearchExpr(sBCSearchExpr);
			ExecuteQuery(&quot;ForwardOnly&quot;);

			var strRefresh = App.GetService(&quot;FINS Teller UI Navigation&quot;);
			App.SetProfileAttr(&quot;SROrderBy&quot;, &quot;N&quot;);
			strRefresh.InvokeMethod(&quot;RefreshCurrentApplet&quot;, propIN, propOUT);
		}

	} catch (e) {
		throw (e);
	}
	finally {
		oBO = null;
		oBC = null;
		aOwner = null;
		aOwnerGroup = null;
		InputProperty = null;
		listOfSR = null;
		propIN = null;
		propOUT = null;
	}
}"
			   SEQUENCE="9"
			   UPDATED="03/02/2015 21:25:24"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2014 11:49:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="fSortArray"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/****************************************************************************
 * Description: Array sort function. VFTRCBU WA#31
 * Name: Celfocus
 * Date Creation: 2014.11.03
 * Updated by &lt;DEVELOPER&gt; on &lt;DATE&gt;
 *****************************************************************************/
function fSortArray(first, second) 
{
	return(parseFloat(first[0]) == parseFloat(second[0]) ? 0 : (parseFloat(first[0]) &lt; parseFloat(second[0]) ? -1 : 1))
}"
			   SEQUENCE="8"
			   UPDATED="03/02/2015 21:25:24"
			   UPDATED_BY="SADMIN"
			   CREATED="12/01/2014 11:49:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



