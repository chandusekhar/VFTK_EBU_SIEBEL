<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   LOCKED_DATE="08/11/2017 16:04:06"
	   NAME="VF Account Management"
	   UI_FREEZE="N"
	   UPDATED="04/26/2018 17:20:04"
	   UPDATED_BY="IBM_RCATITA"
	   CREATED="11/02/2009 12:09:53"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="ACS AD 26-Jul-06: Created. This is a collection of general purpose methods that can be called from any script"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Account General Operations"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="04/26/2018 15:21:21"
		   UPDATED_BY="IBM_RCATITA"
		   CREATED="11/20/2009 12:41:29"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   DISPLAY_NAME="ACS General Operations"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="11/20/2009 12:42:12"
			   UPDATED_BY="SADMIN"
			   CREATED="11/20/2009 12:42:12"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckDuplicity"
			   UPDATED="01/20/2012 12:24:13"
			   UPDATED_BY="SADMIN"
			   CREATED="05/24/2011 10:27:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Contact SSN"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:17:12"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:17:12"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Country"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:17:06"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:17:06"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CustomerClass"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:16:48"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:16:48"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CustomerStatus"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:17:30"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:17:30"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Individual"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:20:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:20:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MarketClass"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/20/2012 12:24:13"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 12:44:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Name"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:17:01"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:17:01"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PrimContId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/20/2012 12:24:13"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 12:44:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TaxId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:13:57"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:13:57"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="docNum"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:17:54"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:17:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="rowId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:17:37"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:17:37"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="trkCit"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/24/2011 11:20:13"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 11:20:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckDuplicity"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/24/2011 10:27:46"
				   UPDATED_BY="SADMIN"
				   CREATED="05/24/2011 10:27:46"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Diva R2.1 20120110: Created new for WP01"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckLastUpdateDate"
			   UPDATED="01/11/2012 08:39:32"
			   UPDATED_BY="SADMIN"
			   CREATED="01/11/2012 08:39:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CardID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/11/2012 08:39:32"
				   UPDATED_BY="SADMIN"
				   CREATED="01/11/2012 08:39:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/11/2012 08:39:32"
				   UPDATED_BY="SADMIN"
				   CREATED="01/11/2012 08:39:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckLastUpdateDate"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/11/2012 08:39:32"
				   UPDATED_BY="SADMIN"
				   CREATED="01/11/2012 08:39:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckMissingFields"
			   UPDATED="07/07/2010 13:07:17"
			   UPDATED_BY="SADMIN"
			   CREATED="05/25/2010 16:06:07"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Flag PF"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2010 16:06:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2010 16:06:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF Address Validation Calc"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2010 16:06:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2010 16:06:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF Contact Validation Calc"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2010 16:06:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2010 16:06:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF Customer Validation Calc"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2010 16:06:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2010 16:06:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF Customer Validation Individual Calc"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/25/2010 16:06:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2010 16:06:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="missingAddressFields"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2010 13:07:17"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2010 13:07:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="missingContactFields"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2010 13:07:17"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2010 13:07:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="missingCustomerFields"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2010 13:07:17"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2010 13:07:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="missingCustomerIndFields"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/07/2010 13:07:17"
				   UPDATED_BY="SADMIN"
				   CREATED="07/07/2010 13:07:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="missingFields"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/25/2010 16:06:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2010 16:06:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckMissingFields"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="05/25/2010 16:06:07"
				   UPDATED_BY="SADMIN"
				   CREATED="05/25/2010 16:06:07"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CheckTcId"
			   UPDATED="09/08/2014 19:08:12"
			   UPDATED_BY="SADMIN"
			   CREATED="09/08/2014 19:08:12"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TcId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2014 19:08:12"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2014 19:08:12"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="isTcIdValidated"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="09/08/2014 19:08:12"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2014 19:08:12"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="rowId"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="09/08/2014 19:08:12"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2014 19:08:12"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="CheckTcId"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="09/08/2014 19:08:12"
				   UPDATED_BY="SADMIN"
				   CREATED="09/08/2014 19:08:12"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="Checklength"
			   UPDATED="04/12/2011 17:57:11"
			   UPDATED_BY="SADMIN"
			   CREATED="03/30/2011 20:52:47"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessageNo"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/30/2011 20:52:47"
				   UPDATED_BY="SADMIN"
				   CREATED="03/30/2011 20:52:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessageText"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/30/2011 20:52:47"
				   UPDATED_BY="SADMIN"
				   CREATED="03/30/2011 20:52:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Matched"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/30/2011 20:52:47"
				   UPDATED_BY="SADMIN"
				   CREATED="03/30/2011 20:52:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MessageCategory"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/30/2011 20:52:47"
				   UPDATED_BY="SADMIN"
				   CREATED="03/30/2011 20:52:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Value"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/30/2011 20:52:47"
				   UPDATED_BY="SADMIN"
				   CREATED="03/30/2011 20:52:47"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Diva R2.1 20120109: Created New for WP01."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ContactSaveRecord"
			   UPDATED="01/11/2012 08:39:32"
			   UPDATED_BY="SADMIN"
			   CREATED="01/11/2012 08:39:32"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/11/2012 08:39:32"
				   UPDATED_BY="SADMIN"
				   CREATED="01/11/2012 08:39:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="sContId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="01/11/2012 08:39:32"
				   UPDATED_BY="SADMIN"
				   CREATED="01/11/2012 08:39:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ContactSaveRecord"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="01/11/2012 08:39:32"
				   UPDATED_BY="SADMIN"
				   CREATED="01/11/2012 08:39:32"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Diva R2.1 20111123: CReated new for WP01."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ContactValidations"
			   UPDATED="11/30/2011 19:00:17"
			   UPDATED_BY="SADMIN"
			   CREATED="11/30/2011 19:00:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MarketClass"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/30/2011 19:00:17"
				   UPDATED_BY="SADMIN"
				   CREATED="11/30/2011 19:00:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PrimContId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/30/2011 19:00:17"
				   UPDATED_BY="SADMIN"
				   CREATED="11/30/2011 19:00:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="isDuplicated"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/30/2011 19:00:17"
				   UPDATED_BY="SADMIN"
				   CREATED="11/30/2011 19:00:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="rowId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/30/2011 19:00:17"
				   UPDATED_BY="SADMIN"
				   CREATED="11/30/2011 19:00:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ContactValidations"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/30/2011 19:00:17"
				   UPDATED_BY="SADMIN"
				   CREATED="11/30/2011 19:00:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="EvaluateRegExp"
			   UPDATED="12/13/2010 19:30:56"
			   UPDATED_BY="SADMIN"
			   CREATED="12/13/2010 19:30:56"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessageNo"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2010 19:30:56"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2010 19:30:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessageText"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/13/2010 19:30:56"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2010 19:30:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Matched"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="12/13/2010 19:30:56"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2010 19:30:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="MessageCategory"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2010 19:30:56"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2010 19:30:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="RegExp"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2010 19:30:56"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2010 19:30:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Value"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="12/13/2010 19:30:56"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2010 19:30:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="EvaluateRegExp"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="12/13/2010 19:30:56"
				   UPDATED_BY="SADMIN"
				   CREATED="12/13/2010 19:30:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GenerateBGMessage"
			   UPDATED="11/21/2011 18:52:58"
			   UPDATED_BY="SADMIN"
			   CREATED="11/21/2011 18:52:58"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BGLOutput"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="11/21/2011 18:52:58"
				   UPDATED_BY="SADMIN"
				   CREATED="11/21/2011 18:52:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrorMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/21/2011 18:52:58"
				   UPDATED_BY="SADMIN"
				   CREATED="11/21/2011 18:52:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="generateBGMessage"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/21/2011 18:52:58"
				   UPDATED_BY="SADMIN"
				   CREATED="11/21/2011 18:52:58"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VF Diva 20110511: WP01 R2.1"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetPrimaryContactDet"
			   UPDATED="11/07/2011 12:44:24"
			   UPDATED_BY="SADMIN"
			   CREATED="11/07/2011 12:44:24"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="AccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="11/07/2011 12:44:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 12:44:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="FamilySeq"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/07/2011 12:44:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 12:44:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="GetPrimaryContactDet"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/07/2011 12:44:24"
				   UPDATED_BY="SADMIN"
				   CREATED="11/07/2011 12:44:24"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="VFTK Diva R2.1 20111123: CReated new for WP01."
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="ValidateContact"
			   UPDATED="01/06/2012 12:51:08"
			   UPDATED_BY="SADMIN"
			   CREATED="11/30/2011 19:00:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Code"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="01/06/2012 12:51:08"
				   UPDATED_BY="SADMIN"
				   CREATED="01/06/2012 12:51:08"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ErrMsg"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="11/30/2011 19:00:17"
				   UPDATED_BY="SADMIN"
				   CREATED="11/30/2011 19:00:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="ContactValidations"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="11/30/2011 19:00:17"
				   UPDATED_BY="SADMIN"
				   CREATED="11/30/2011 19:00:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   DISPLAY_NAME_-_STRING_REFERENCE="X_VF_MERNIS_VALIDATION"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="VerifyMernis"
			   UPDATED="04/08/2010 21:44:54"
			   UPDATED_BY="SADMIN"
			   CREATED="04/08/2010 21:44:54"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/08/2010 21:44:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/08/2010 21:44:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Mernis Internal Flag"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/08/2010 21:44:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/08/2010 21:44:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Mernis Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/08/2010 21:44:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/08/2010 21:44:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Tc Id Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/08/2010 21:44:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/08/2010 21:44:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Verification Date"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/08/2010 21:44:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/08/2010 21:44:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="message"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/08/2010 21:44:54"
				   UPDATED_BY="SADMIN"
				   CREATED="04/08/2010 21:44:54"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAccountType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAccountType(Inputs, Outputs)
{
/*****************************************************************************************************
Author				: 	Prateek Agrawal
Date				:	31-Jan-2012
Purpose				:	To validate if the Target Customer type and Donor Customer are same.
*****************************************************************************************************/
	try
	{
		var strAccountId = Inputs.GetProperty(&quot;CurrentAccntID&quot;);
		var strNewAccountId = Inputs.GetProperty(&quot;NewAccntID&quot;);
		var oBOAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
		var oBCAccount : BusComp = oBOAccount.GetBusComp(&quot;Account&quot;);
		var strResult = &quot;Success&quot;;
		var strCustType = &quot;&quot;;
	
		with(oBCAccount)
		{
			//Begin - Scripting 15 - Input validation
			var inProp 	:PropertySet = TheApplication().NewPropertySet();
			var outProp	: PropertySet = TheApplication().NewPropertySet();
			var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
			inProp.SetProperty(&quot;strAccountId&quot;,strAccountId);
			inProp.SetProperty(&quot;strNewAccountId&quot;,strNewAccountId);
			inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			//End - Scripting 15
			
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Market Class&quot;);
			SetSearchExpr(&quot;[Id] = &apos;&quot;+strAccountId+&quot;&apos; OR [Id] = &apos;&quot;+strNewAccountId+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				strCustType = GetFieldValue(&quot;Market Class&quot;);
			if(NextRecord()) {
				if(strCustType == GetFieldValue(&quot;Market Class&quot;))
				{
					strResult = &quot;Error&quot;;
				}
			}
			if(strResult != &quot;Success&quot;)
			{
				strResult = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_147&quot;);
			}
			Outputs.SetProperty(&quot;Error&quot;, strResult);
		}
	}
	finally
	{
		inProp		= null;
		outProp		= null;
		BS			= null;
		oBCAccount = null;
		oBOAccount = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="06/26/2012 16:34:01"
			   UPDATED_BY="SADMIN"
			   CREATED="02/01/2012 13:42:01"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckActivateCustomer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckActivateCustomer (Inputs,Outputs) 
{	 
	var accountStatusCode 	= Inputs.GetProperty(&quot;accountStatusCode&quot;);
    var flagPF			  	= Inputs.GetProperty(&quot;flagPF&quot;); //GetFieldValue(&quot;Flag PF&quot;)
    var custIndVal		  	= Inputs.GetProperty(&quot;custIndVal&quot;); //GetFieldValue(&quot;VF Customer Validation Individual Calc&quot;)
    var custCorVal			= Inputs.GetProperty(&quot;custCorVal&quot;); //GetFieldValue(&quot;VF Customer Validation Calc&quot;);
    var addrVal				= Inputs.GetProperty(&quot;addrVal&quot;); //GetFieldValue(&quot;VF Address Validation Calc&quot;)
    var contactIVal			= Inputs.GetProperty(&quot;contactVal&quot;); //GetFieldValue(&quot;VF Contact Validation Calc&quot;)
    var contactCitVal		= Inputs.GetProperty(&quot;contactCitVal&quot;); //GetFieldValue(&quot;VF Contact Citizenship&quot;)
    var gibActive			= Inputs.GetProperty(&quot;gibActive&quot;); //GetFieldValue(&quot;VF GIB Active&quot;);
    var bgCheck				= Inputs.GetProperty(&quot;bgCheck&quot;);//GetFieldValue(&quot;VF BG Contact Control&quot;);
	if (
		(accountStatusCode == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 80)) 
		|| 
		(accountStatusCode == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, 90))
		)
	{
		with (this)
		{   
			var customerVal	= (flagPF == &apos;Y&apos;) ? custIndVal : custCorVal;
			var addressVal 	= addrVal;
			var contactVal 	= contactIVal;
			var individual = flagPF;
			//Added for GIB R1.3
			var GIBVal = gibActive;
			//Added for Black/Grey list Control --&gt; customer cannot be active if contact is in black grey list
			var BGVal = bgCheck;
			//Added for CR0016
			var strCitizenship =contactCitVal;
			var strCitizen =TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_CITIZENSHIP&quot;,&quot;Turkish&quot;);
			//Added for CR0016
		}	
		if ((customerVal == &apos;Y&apos;) &amp;&amp; (addressVal == &apos;Y&apos;) &amp;&amp; (contactVal == &apos;Y&apos;) &amp;&amp; (GIBVal == &apos;Y&apos;) &amp;&amp; (BGVal == &apos;Y&apos;) &amp;&amp; (strCitizenship==strCitizen)) //Added (GIBVal == &apos;Y&apos;)for GIB R1.3 and (BGVal == Y) for Black/Grey list control R1.3
		{
			Outputs.SetProperty(&quot;Account Status Code&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, &quot;95&quot;));
		}
		else
		{
			  if((customerVal == &apos;Y&apos;) &amp;&amp; (addressVal == &apos;Y&apos;) &amp;&amp; (GIBVal == &apos;Y&apos;) &amp;&amp; (BGVal == &apos;Y&apos;) &amp;&amp; (strCitizenship!=strCitizen) &amp;&amp; (strCitizenship!=&quot;&quot;) ) //Added (GIBVal == &apos;Y&apos;)for GIB R1.3 and (BGVal == Y) for Black/Grey list control R1.3
			  {
			  	Outputs.SetProperty(&quot;Account Status Code&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACCOUNT_STATUS&quot;, &quot;95&quot;));
			  }
		}
   }
}"
			   SEQUENCE="2"
			   UPDATED="06/26/2012 16:36:38"
			   UPDATED_BY="SADMIN"
			   CREATED="05/23/2011 10:57:46"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckBG"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckBG(Inputs, Outputs)
{
/******************************************************************************************
* BS Method:CheckBG
* Description: This BS Method is called from VF Verify Consumer Customer Data WF and Reads BG 
* Reponse Siebel Message and in case of Error code as 0001 then the Error message will be passeed 
* to the WF 
* Date Creation 18/11/2011							     		
********************************************************************************************/	
	var i;
    var vStatusCode = Inputs.GetProperty(&quot;BGStatusCode&quot;); 
	var vErrorCode = Inputs.GetProperty(&quot;BGErrorCode&quot;);
	var sErrMessage = Inputs.GetProperty(&quot;BGErrorMsg&quot;);
	var vBGErrcode = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ERROR_CODE&quot;,&quot;VFTK-GIB-0001&quot;);
	if (vStatusCode == &quot;0&quot;)
	{
		var sBGMsg = Inputs.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
		var cnt = sBGMsg.GetChildCount();
		var sBGLVersion = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_BGL_LIST&quot;,&quot;Version&quot;);
		var sMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_068&quot;);	
		var sMess1 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_094&quot;);	
		var sList = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;List&quot;);
		var sId = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Id&quot;);
		var sPlatform = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Platform&quot;);
		var sType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Type&quot;);
		if(vStatusCode == &quot;V1&quot;)
		{		
			var sMessage = sMess + &quot;\r\n&quot; + sMess1 + &quot;\n\r\n\r&quot; + sList + &quot;\t&quot; + sId + &quot;\t&quot; + sPlatform + &quot;\t&quot; + sType + &quot;\r\n&quot;;
			sMessage = sMessage + &quot;--------\t--------\t--------\t--------\n\r&quot;;
		}
		else
		{
			var sInvoiceSuspFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;InvoiceSuspFlag&quot;);
			var sInvoiceFreezeFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;InvoiceFreezeFlag&quot;);
			var sFraudFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;FraudFlag&quot;);
			var sCreditRiskFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;CreditRiskFlag&quot;);
			var sManualFlagLabel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;ManualFlag&quot;);
			var sMessage = sMess + &quot;\r\n&quot; + sMess1 + &quot;\n\r\n\r&quot; + sList + &quot;\t&quot; + sId + &quot;\t&quot; + sPlatform + &quot;\t&quot; + sType + &quot;\t&quot; + sInvoiceSuspFlagLabel + &quot;\t&quot; + sInvoiceFreezeFlagLabel + &quot;\t&quot; + sFraudFlagLabel + &quot;\t&quot; + sCreditRiskFlagLabel + &quot;\t&quot; + sManualFlagLabel + &quot;\n&quot;;
			sMessage = sMessage + &quot;\n--------\t--------\t--------\t--------\t--------\t--------\t--------\t--------\t--------\n&quot;;
		}
		for ( i=0;i&lt; cnt;i++)
		{
			var res = sBGMsg.GetChild(i);
			var sBlackGray = res.GetProperty(&quot;GreyBlackListIND&quot;);
			var sCustType = res.GetProperty(&quot;RecordFlag&quot;);
			var sCustId = res.GetProperty(&quot;CustomerID&quot;);
			var sCustPlatform = res.GetProperty(&quot;Platform&quot;);
			
			if(sBGLVersion == &quot;V2&quot;)
			{
				/*WA22 JPASTOR */
				var sInvoiceSuspFlag = res.GetProperty(&quot;InvoiceSuspendFlag&quot;);
				var sInvoiceFreezeFlag = res.GetProperty(&quot;InvoiceFreezeFlag&quot;);
				var sFraudFlag = res.GetProperty(&quot;FraudFlag&quot;);
				var sCreditRiskFlag = res.GetProperty(&quot;CreditRiskFlag&quot;);
				var sManualFlag = res.GetProperty(&quot;ManualFlag&quot;);
			}
			
			var sBlack = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BG_LIST&quot;,&quot;BLACK&quot;);
			var sGrey = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BG_LIST&quot;,&quot;GREY&quot;);
			var sSiebel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;S&quot;);
			var sChannel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;C&quot;);
			var sSblChnl = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;SC&quot;);
			var sBusiness = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;C&quot;);
			var sConsumer = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;A&quot;);
			if(sBlackGray != &quot;&quot;)
			{
				if(sBlackGray == &quot;B&quot;)
					sBlackGray = sBlack;
				else 
					sBlackGray = sGrey;
			}
			if(sCustPlatform != &quot;&quot;)
			{
				if(sCustPlatform == &quot;S&quot;)
					sCustPlatform = sSiebel;
				else if(sCustPlatform == &quot;I&quot;)
					sCustPlatform = sChannel;
				else
					sCustPlatform = sSblChnl;
			}
			if(sCustType != &quot;&quot;)
			{
				if(sCustType == &quot;C&quot;)
					sCustType = sBusiness;
				else
					sCustType = sConsumer;
			}
			if (sBGLVersion == &quot;V1&quot;)
			{
				sMessage = sMessage + sBlackGray + &quot;\t&quot; + sCustId + &quot;\t&quot; + sCustPlatform + &quot;\t&quot; + sCustType + &quot;\r\n&quot;;
			}
			else
			{
				sMessage = sMessage + sBlackGray + &quot;\t&quot; + sCustId + &quot;\t&quot; + sCustPlatform + &quot;\t&quot; + sCustType + &quot;\t&quot; + sInvoiceSuspFlag + &quot;\t&quot; + sInvoiceFreezeFlag + &quot;\t&quot; + sFraudFlag + &quot;\t&quot; + sCreditRiskFlag + &quot;\t&quot; + sManualFlag + &quot;\n&quot;;
			}
		}
	}
	else
	{
		sMessage = sErrMessage;
	}
	Outputs.SetProperty(&quot;Error Message&quot;,sMessage);		
}"
			   SEQUENCE="3"
			   UPDATED="01/23/2015 01:15:00"
			   UPDATED_BY="SADMIN"
			   CREATED="11/22/2011 19:32:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckCepAra"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckCepAra(Inputs, Outputs)
{
/******************************************************************************************
* BS Method:CheckBG
* Description: This BS Method is called from VF Verify Consumer Customer Data WF and Reads BG 
* Reponse Siebel Message and in case of Error code as 0001 then the Error message will be passeed 
* to the WF 
* Date Creation 18/11/2011							     		
********************************************************************************************/
	var i;
    var vStatusCode = Inputs.GetProperty(&quot;CepStatusCode&quot;); 
	var vErrorCode = Inputs.GetProperty(&quot;CepErrorCode&quot;);
	var sErrMessage = Inputs.GetProperty(&quot;CepErrMess&quot;);	
	var vCepErrcode = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;GIB_ERROR_CODE&quot;,&quot;VFTK-GIB-0001&quot;);
	if (vStatusCode == &quot;0&quot;)
	{
		var cnt = Inputs.GetChild(0).GetChild(0).GetChildCount();
		var sBGMsg = Inputs.GetChild(0).GetChild(0);
		var sMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_066&quot;);		
		var sGSM = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;GSM&quot;);
		var sId = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Id&quot;);
		var sPlatform = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Platform&quot;);
		var sType = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGINQ_HEADER&quot;,&quot;Type&quot;);			
		var sMessage = sMess + &quot;\r\n\r\n&quot; + sId + &quot;\t&quot; + sPlatform + &quot;\t&quot; + sType + &quot;\t&quot; + sGSM + &quot;\r\n&quot;;
		sMessage = sMessage + &quot;--------\t--------\t--------\t--------\r\n&quot;;												
		for ( i=0;i&lt; cnt;i++)
		{
			var res = sBGMsg.GetChild(i);
			var sCustType = res.GetProperty(&quot;RECORD_FLAG&quot;);
			var sCustId = res.GetProperty(&quot;CUSTOMER CODE&quot;);
			var sCustPlatform = res.GetProperty(&quot;Platform&quot;);
			var sMSISDN = res.GetProperty(&quot;MSISDN&quot;);
			
			var sSiebel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;S&quot;);
			var sChannel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;C&quot;);
			var sSblChnl = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;SC&quot;);
			
			var sBusiness = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;C&quot;);
			var sConsumer = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;A&quot;);
			if(sCustPlatform != &quot;&quot;)
			{
				if(sCustPlatform == &quot;S&quot;)
					sCustPlatform = sSiebel;
				else if(sCustPlatform == &quot;I&quot;)
					sCustPlatform = sChannel;
				else
					sCustPlatform = sSblChnl;
			}
			if(sCustType != &quot;&quot;)
			{
			if(sCustType == &quot;C&quot;)
				sCustType = sBusiness;
			else
				sCustType = sConsumer;
			}
			sMessage = sMessage + sCustId + &quot;\t&quot; + sCustPlatform + &quot;\t&quot; + sCustType + &quot;\t&quot; + sMSISDN + &quot;\r&quot;;
		}
	}
	else
		sMessage = sErrMessage;
	Outputs.SetProperty(&quot;Error Message&quot;,sMessage);
}"
			   SEQUENCE="4"
			   UPDATED="04/02/2015 14:11:47"
			   UPDATED_BY="SADMIN"
			   CREATED="11/22/2011 19:32:23"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDuplicity"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*********************************************************************************
	* VF TK 23-11-09    : Created by Enrico Galliero	                      	  
	* Description      : 	This script checks customer duplicity, it&apos;s make a 
							difference Between Corporate and Individual business 
							customer.  
	* VFTK Diva 20111012:  Modified the script to add the condition for Consumer Customer*
	* VFTK Diva 20111128:  Modified the script to remove the condition for Consumer Customer*			  				
	******************************************************************************/
function CheckDuplicity (Inputs, Outputs)
{
	try
	{
		//LOG INFO
		var today = new Date();
		var bcRowId			=	Inputs.GetProperty(&quot;rowId&quot;);
		var rootTransactionId = bcRowId + today.toString();
		var ArBithDate = new Array;
		var ArBirthPlace = new Array;
		var ArFatherName = new Array;
		var ArFirstName = new Array;
		var ArLastName = new Array;
		var ArTCID = new Array;
		var i = 0;
		var j = 0;
		var k = 0;
		var x = 0;
		var y = 0;
		var z = 0;
        var bsACSGeneralOp : Service;	
		var bsIn : PropertySet;
		var bsOut : PropertySet;     
        var boAccount : BusObject;
   		var bcAccount : BusComp;
   		
		if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;A&quot;))
		{			
			bsACSGeneralOp = TheApplication().GetService(&quot;ACS General Operations&quot;);
			bsIn = TheApplication().NewPropertySet();
			bsOut= TheApplication().NewPropertySet();
			var processName = &quot;Verify customer duplication&quot;;
			var status = &quot;OK&quot;;
			var task = &quot;[BS] VF Account General Operation [CheckDuplicity]&quot;;
			var timestampStart = ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());
			var userId = TheApplication().LoginName();
						
			bsIn.SetProperty(&quot;UserId&quot;,userId);
			bsIn.SetProperty(&quot;description&quot;,&quot;Check Duplicity&quot;);
			bsIn.SetProperty(&quot;kpiRef&quot;,bcRowId);
			bsIn.SetProperty(&quot;processName&quot;,processName);
			bsIn.SetProperty(&quot;bcRowId&quot;,bcRowId);
			bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
			bsIn.SetProperty(&quot;status&quot;,status);
			bsIn.SetProperty(&quot;task&quot;,task);
			bsIn.SetProperty(&quot;timestampEnd&quot;,&quot;&quot;);
			bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);	
			bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
		    var output = bsOut.GetProperty(&quot;result&quot;);
		}  //LOG INFO  	
		/*isDuplicated predefaulted to N*/
		Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;N&quot;);
		 TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);

		boAccount		= TheApplication().GetBusObject (&quot;X Order Entry&quot;);
   		bcAccount		= boAccount.GetBusComp (&quot;HP Submit - Account&quot;);
		var individual		=	Inputs.GetProperty(&quot;Individual&quot;);
		var taxNumber		=	Inputs.GetProperty(&quot;TaxId&quot;);
		var customerClass	=	Inputs.GetProperty(&quot;Customer Class&quot;);
		var name			=	Inputs.GetProperty(&quot;Name&quot;);
		var country			=	Inputs.GetProperty(&quot;Country&quot;);
		var tcId			=	Inputs.GetProperty(&quot;Contact SSN&quot;);
		var customerStatus	=	Inputs.GetProperty(&quot;Customer Status&quot;);
		var rowId			=	Inputs.GetProperty(&quot;rowId&quot;);
		var documentNumber  =   Inputs.GetProperty(&quot;docNum&quot;);
		var citizenship     =   Inputs.GetProperty(&quot;trkCit&quot;);
		var isMigrated		=   Inputs.GetProperty(&quot;isMigrated&quot;);

		var activeStatus	=	TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;95&quot;);
		var acquiredStatus	=	TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;100&quot;);
		var taxIdNA			=	TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;);
		var trkCit			=   TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;X_CITIZENSHIP&quot;,&quot;Turkish&quot;);
		//FTOSCANO - VFTRCBU-9546
		var strLegalOwner = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Legal Owner&quot;);
		
		var strConsumer = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;102&quot;);
		var strBusiness = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;101&quot;); //JIRA-33746: Added 
		var strPrimContId = Inputs.GetProperty(&quot;PrimContId&quot;);
		var strCustType = Inputs.GetProperty(&quot;MarketClass&quot;);
		/*retrieve inputs from data inserted: Name, individual flag, Tc id, name, customer class and country */
		{
			if(strCustType != strConsumer)
			{		
				if (individual==&quot;N&quot;) 
				{ 
					var ctrlTaxId		=	(taxNumber == taxIdNA ? &quot;Y&quot; : &quot;N&quot;);
					if ((ctrlTaxId)==&quot;Y&quot;)
					/*Corporate Business customer, the check will be based on corporate name, 
					Customer class and country (tax id is N/A) */
					{	
						with (bcAccount)
						{	
							ClearToQuery();
							SetViewMode(AllView);//Mamta-Updated as per Oracle Review
							var express = &quot;[Flag PF] = &apos;N&apos; AND [Loc] = &apos;&quot; + name+customerClass+country + &quot;&apos; AND ([Account Status Code] = &apos;&quot; + acquiredStatus + &quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;)&quot;;
							
							bcAccount.SetSearchExpr(express);
							ExecuteQuery(ForwardOnly);
							/*Check if there is a record and if it&apos;s not the same that has not been modified*/
							if (bcAccount.FirstRecord()) 
							{ 
								if (bcAccount.GetFieldValue(&quot;Id&quot;) == rowId)
								{
							   		status = &quot;KO&quot;;
							   		return;
								}				
	   							Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;Y&quot;);
	   							TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;Y&quot;);
	   							status = &quot;KO&quot;;
	 							return;
							}
						}
					}	// End if ((ctrlTaxId)==&quot;Y&quot;)
					else
					/*Corporate business customer that owns Tax Id, Check will be based on Tax Id*/ 
					{ 
						if (isMigrated != &quot;&quot; &amp;&amp; isMigrated != null)

						{
							Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;N&quot;);
						 	TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;N&quot;);
				 			status = &quot;OK&quot;;
							return;
						}
						
						
						with (bcAccount)
						{	
							ClearToQuery();
							ActivateField(&quot;VF Account Migration Run&quot;);
							SetViewMode(AllView);//Mamta-Updated as per Oracle Review
							var express = &quot;&quot;;
							if(rowId!=&quot;&quot;)
							{
								express = &quot;[Id]&lt;&gt; &apos;&quot;+rowId+&quot;&apos; AND [Flag PF] = &apos;N&apos; AND [VF Tax Number] = &apos;&quot; + taxNumber + &quot;&apos; AND ([Account Status Code] = &apos;&quot; + acquiredStatus + &quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;)&quot;;
							}
							else
							{
								express = &quot;[Flag PF] = &apos;N&apos; AND [VF Tax Number] = &apos;&quot; + taxNumber + &quot;&apos; AND ([Account Status Code] = &apos;&quot; + acquiredStatus + &quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;)&quot;;
							}
							
							bcAccount.SetSearchExpr(express);
							ExecuteQuery(ForwardOnly); //Vaibhav 29/03/2012: Added parameter as per oracle review
							//var count = CountRecords();
							var isrecord = bcAccount.FirstRecord();
						 /*	while (isrecord) 
							{ 
								var migr = bcAccount.GetFieldValue(&quot;VF Account Migration Run&quot;);
							    var idC = bcAccount.GetFieldValue(&quot;Id&quot;);
								if (idC==rowId &amp;&amp; count&gt;=1) // CR733 in order to skip checkDuplicity control for customer imported from ICCB
								{
									Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;Y&quot;);
				   					 TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;Y&quot;);
				   					Outputs.SetProperty(&quot;customerStatus&quot;,customerStatus);
			                		status = &quot;KO&quot;;
				 					return;
				 				}
				 				isrecord = NextRecord();
			 				}*/
			 				
			 				if (isrecord) // CR733 in order to skip checkDuplicity control for customer imported from ICCB
							{
								Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;Y&quot;);
			   					 TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;Y&quot;);
			   					Outputs.SetProperty(&quot;customerStatus&quot;,customerStatus);
		                		status = &quot;KO&quot;;
			 					return;
			 				}
						}	
					}// End else
				}// End if (individual==&quot;N&quot;) 
				else /*Individual Business Customer, Check will be based on Tc id if turkish, Document Number if he/she&apos;s not */
	  			{		
					bcAccount	= 	boAccount.GetBusComp (&quot;Account&quot;);
			 		with (bcAccount)
					{	
						bcAccount.ClearToQuery();
						bcAccount.SetViewMode(AllView);//Mamta-Updated as per Oracle Review
						/*on Loc field has been previously stored the primary contact tc id*/
						var uniqueKey = citizenship == &quot;Y&quot; ? tcId : documentNumber;
//						var express = &quot;[Loc] = &apos;&quot; + uniqueKey + &quot;&apos; AND ([Account Status Code] = &apos;&quot; + acquiredStatus + &quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;)&quot;; //JIRA-33746:Commented
						var express = &quot;[Loc] = &apos;&quot; + uniqueKey + &quot;&apos; AND [Market Class] = &apos;&quot; + strBusiness + &quot;&apos; AND ([Account Status Code] = &apos;&quot; + acquiredStatus + &quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;)&quot;;  //JIRA-33746:Modified
						
						bcAccount.SetSearchExpr(express);
						bcAccount.ExecuteQuery(ForwardOnly);
					}
					
					if (bcAccount.FirstRecord()) 
					{ 
						if (bcAccount.GetFieldValue(&quot;Id&quot;) == rowId)
						{
							status = &quot;OK&quot;;
							return;
						}
				 		Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;Y&quot;);
						 TheApplication().SetProfileAttr(&quot;CustomerDuplicated&quot;,&quot;Y&quot;);
				 		status = &quot;KO&quot;;
						return;
					}
				}//else
		 	}//(strCustType != strConsumer) 
		}	 
	}// end try	
	catch (e)
	{
		status = &quot;KO &quot;+e.toString();
		throw(e);
	}	
	finally
	{	
		bcAccount=null;
		boAccount=null; 
		if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;A&quot;))
		{
			today = new Date();
			var timestampEnd = ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());
			bsIn.SetProperty(&quot;UserId&quot;,userId);
			bsIn.SetProperty(&quot;description&quot;,&quot;Check Duplicity&quot;);
			bsIn.SetProperty(&quot;kpiRef&quot;,bcRowId);
			bsIn.SetProperty(&quot;processName&quot;,processName);
			bsIn.SetProperty(&quot;bcRowId&quot;,bcRowId);
			bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
			bsIn.SetProperty(&quot;status&quot;,status);
			bsIn.SetProperty(&quot;task&quot;,task);
			bsIn.SetProperty(&quot;timestampEnd&quot;,timestampEnd);
			bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);
			bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
		}
		bsACSGeneralOp = null;
		bsIn = null;
		bsOut= null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="10/03/2016 23:26:18"
			   UPDATED_BY="SADMIN"
			   CREATED="11/20/2009 15:13:13"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLastUpdateDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLastUpdateDate(Inputs, Outputs)
{
/*****************************************************************************************************
Author				: 	Divakara Nagaraju
Date				:	10-Jan-2012
Purpose				:	To Validate the Credit Card Last Update Date before changing the Payment Method.
*****************************************************************************************************/
	try
	{
		var sCrdId = Inputs.GetProperty(&quot;CardID&quot;);
		var sCreditCrdBO : BusObject= TheApplication().GetBusObject(&quot;Com Invoice Profile&quot;);
		var sCreditCrdBC : BusComp = sCreditCrdBO.GetBusComp(&quot;Com Invoice Profile&quot;);
		
		var LstDate = &quot;&quot;;
		var strResult = &quot;Success&quot;;
		var sSearchCard = &quot;[Id] = &apos;&quot;+sCrdId+&quot;&apos;&quot;;
		//Begin - Scripting 15 - Input validation		
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;sCrdId&quot;,sCrdId);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		
		with(sCreditCrdBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;VF Last CC Update Date&quot;);
			SetSearchExpr(sSearchCard);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				LstDate = GetFieldValue(&quot;VF Last CC Update Date&quot;);
			}
		}
		
		if(LstDate != &quot;&quot;)
		{
			var strDiffDate = new Date(LstDate);
			var strLstDate = strDiffDate.getDate();
			var strLstMonth = strDiffDate.getMonth();
			var strLstYear = strDiffDate.getFullYear();
			 
			var strDate = new Date();
			var strCurrDay = strDate.getDate();
			var strCurrYear = strDate.getFullYear();
			var strCurrMonth = strDate.getMonth();
			 
			var Yeardiff = strCurrYear - strLstYear;
			var Mnthdiff = strCurrMonth - strLstMonth;
			var Datediff = strCurrDay - strLstDate;
			
			if(Yeardiff &lt;= 1)
			{
			 	if(Yeardiff == 0 &amp;&amp; Mnthdiff &lt; 6)
			 	{
			 		strResult = &quot;Error&quot;;
			 	}
			 	else if(Yeardiff == 0 &amp;&amp; Mnthdiff == 6 &amp;&amp; Datediff &lt; 0)
			 	{
			 		strResult = &quot;Error&quot;;
				}
				else if(Yeardiff == 1 &amp;&amp; Mnthdiff &lt; -6)
				{
					strResult = &quot;Error&quot;;
				}
				else if(Yeardiff == 1 &amp;&amp; Mnthdiff == -6 &amp;&amp; Datediff &lt; 0)
				{
					strResult = &quot;Error&quot;;
				}
			}
		}
		if(strResult != &quot;Success&quot;)
		{
			strResult = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_113&quot;);
		}
		Outputs.SetProperty(&quot;Error&quot;, strResult);
	}
	finally
	{
		sCreditCrdBC = null;
		sCreditCrdBO = null;
		inProp 		= null;
		outProp		= null;
		BS		= null;		
	}
}"
			   SEQUENCE="6"
			   UPDATED="06/26/2012 16:46:36"
			   UPDATED_BY="SADMIN"
			   CREATED="01/11/2012 08:39:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMissingFields"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*********************************************************************************
	* VF TK 20-04-10   : 	Created by Ignazio Castiglione	                      	  
	* Description      : 	This script checks customer missing fields for Customer Activation
							It makes difference between Corporate and Individual business 
							customer.  			  	  	                    														  *						  				
	******************************************************************************/
function CheckMissingFields (Inputs, Outputs)
{
	//output string set empty by default
	var addrMess = &quot;&quot;;
	var conMess = &quot;&quot;;
	var cusMess = &quot;&quot;;
	var cusMessInd = &quot;&quot;;
	var addrVal		=	Inputs.GetProperty(&quot;VF Address Validation Calc&quot;);
	var conVal		=	Inputs.GetProperty(&quot;VF Contact Validation Calc&quot;);
	var flagPF		=	Inputs.GetProperty(&quot;Flag PF&quot;);
	var cusVal		=	Inputs.GetProperty(&quot;VF Customer Validation Calc&quot;);
	var cusValInd	=	Inputs.GetProperty(&quot;VF Customer Validation Individual Calc&quot;);

	if (flagPF == &quot;N&quot;) //Corporate Business Customer
	{ 		
		if (cusVal ==&quot;N&quot;){
		cusMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;118&quot;);
		}
		if(addrVal == &quot;N&quot;){			
		addrMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;116&quot;);	
		}
		if(conVal == &quot;N&quot;){					
		conMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;117&quot;);		
		}
	
	}
	else //Individual Business Customer
	{		
		if (cusValInd ==&quot;N&quot;){
		cusMessInd	= TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;119&quot;);
		}			
		if(addrVal == &quot;N&quot;){					
		addrMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;116&quot;);		
		}
		if(conVal == &quot;N&quot;){					
		conMess = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;117&quot;);		
		}		
	}	 		
	Outputs.SetProperty(&quot;missingCustomerIndFields&quot;,cusMessInd);
	Outputs.SetProperty(&quot;missingCustomerFields&quot;,cusMess);		
	Outputs.SetProperty(&quot;missingAddressFields&quot;,addrMess);
	Outputs.SetProperty(&quot;missingContactFields&quot;,conMess);
}"
			   SEQUENCE="8"
			   UPDATED="06/26/2012 16:51:08"
			   UPDATED_BY="SADMIN"
			   CREATED="05/25/2010 16:06:07"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTaxId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*********************************************************************************
	* VF TK 23-11-09    : Created by Enrico Galliero	                      	  
	* Description      : 	This script checks tc id formal validation    														  *  				
	******************************************************************************/	
function CheckTaxId (Inputs, Outputs)
{	
	try
	{
		var today = new Date();
		var bcRowId			=	Inputs.GetProperty(&quot;rowId&quot;);
        var rootTransactionId = bcRowId + today.toString();
		var bsACSGeneralOp : Service;
		var bsIn : PropertySet;
		var bsOut : PropertySet;
		if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;A&quot;))
		{			
			bsACSGeneralOp = TheApplication().GetService(&quot;ACS General Operations&quot;);
			bsIn = TheApplication().NewPropertySet();
			bsOut= TheApplication().NewPropertySet();
			var processName = &quot;Verify Tax Id&quot;;
			var status = &quot;OK&quot;;
			var task = &quot;[BS] VF Account General Operation [CheckTaxId]&quot;;
			var timestampStart = ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());
			var userId = TheApplication().LoginName();		
			bsIn.SetProperty(&quot;UserId&quot;,userId);
			bsIn.SetProperty(&quot;description&quot;,&quot;Check Tax Id&quot;);
			bsIn.SetProperty(&quot;kpiRef&quot;,bcRowId);
			bsIn.SetProperty(&quot;processName&quot;,processName);
			bsIn.SetProperty(&quot;bcRowId&quot;,bcRowId);
			bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
			bsIn.SetProperty(&quot;status&quot;,status);
			bsIn.SetProperty(&quot;task&quot;,task);
			bsIn.SetProperty(&quot;timestampEnd&quot;,&quot;&quot;);
			bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);	
			bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
			var output = bsOut.GetProperty(&quot;result&quot;);
		}	
	   	var taxId 	= Inputs.GetProperty (&quot;taxId&quot;);
		var flagPF	= Inputs.GetProperty (&quot;flagPF&quot;);
	 	Outputs.SetProperty((&quot;isTaxIdFormalVerified&quot;),&quot;N&quot;); 
	 	var noTaxId = TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;VF_TAX_NUMBER_NA&quot;,&quot;noTaxId&quot;);
	 	//Mamta-Removed as per CR67B (flagPF==&apos;Y&apos;)
	 	if(taxId== noTaxId)
        {
           Outputs.SetProperty(&quot;isTaxIdFormalVerified&quot;,&quot;Y&quot;);
           status = &quot;KO&quot;; 
           return;
        }
       	
       	var taxIdLength=10; 	
 		var sCheck = /^\d{10}$/;
        
        if(taxId.length!=taxIdLength || taxId.search(sCheck)!=0)
        {	
        	status = &quot;KO ACS :: Account :: BusComp_SetFieldValue :: Tax Id fault :: &quot;+taxId+&quot;:: Ending&quot;;
        	return;
        }
      	var toBeTested =  taxId.substring(0,9);
        var xStep = 0;
		var zStep=0;
	
		for( var i = 0; i &lt;taxIdLength-1; i++)
		{	var  yStep	=	0;				
	 		yStep	=   parseInt(toBeTested.charAt(i),10) + (9-i); //take the i-number and sum it 9-i
	 		yStep   =   ToString(yStep);
	 		yStep	= 	parseInt(yStep.charAt(yStep.length -1),10); 
				// select the right part of the number obtained	    
				yStep	=	(yStep*512)/(Math.pow(2,i));
				yStep   =	ToString(yStep); // 
	          	do    // read the number stored on yStep and sum the ciphers each other 
				{	var qStep=0;
					for (var j=0; j&lt;yStep.length; j++)  
					{
						qStep+=parseInt(yStep.charAt(j),10);
					}
					yStep=ToString(qStep);  	      
	            } while (yStep.length!=1)
	        
	        zStep+=qStep;   
               qStep=0;
      		}              
           //calculate ten&apos;s complement to test the last value of tax id inserted
		zStep=ToString(zStep);
		zStep=zStep.charAt(zStep.length-1);
		var verifyLastNumber=10-(parseInt(zStep,10)!=0 ? parseInt(zStep,10) : 10) ;
	    if ((parseInt(taxId.charAt(9),10))==verifyLastNumber) 
		{
			Outputs.SetProperty(&quot;isTaxIdFormalVerified&quot;,&quot;Y&quot;);
		}
		else 
		{	
			status = &quot;KO FinalStep :: matching incorrect :: the field will be put blank&quot;;
			return;
   		}		   				
	}	
	catch(e)
 	{
		status = &quot;KO &quot;+e.toString();
	}
	finally
	{		
		if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;A&quot;))
		{				
			today = new Date();
			var timestampEnd = ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());
			bsIn.SetProperty(&quot;UserId&quot;,userId);
			bsIn.SetProperty(&quot;description&quot;,&quot;Check Tax Id&quot;);
			bsIn.SetProperty(&quot;kpiRef&quot;,bcRowId);
			bsIn.SetProperty(&quot;processName&quot;,processName);
			bsIn.SetProperty(&quot;bcRowId&quot;,bcRowId);
			bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
			bsIn.SetProperty(&quot;status&quot;,status);
			bsIn.SetProperty(&quot;task&quot;,task);
			bsIn.SetProperty(&quot;timestampEnd&quot;,timestampEnd);
			bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);		
			bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
		}
		bsACSGeneralOp = null;
		bsIn = null;
		bsOut= null;
	}	
				
}"
			   SEQUENCE="9"
			   UPDATED="06/30/2012 13:36:34"
			   UPDATED_BY="SADMIN"
			   CREATED="11/26/2009 12:23:40"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTcId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*********************************************************************************
	* VF TK 23-11-09    : Created by Enrico Galliero	                      	  
	* Description      : 	This script checks tc id formal validation    														  *
						  				
	******************************************************************************/	
function CheckTcId (Inputs, Outputs)
{	
	try 
	{
		var today = new Date();
		var bcRowId			=	Inputs.GetProperty(&quot;rowId&quot;);
        var rootTransactionId = bcRowId + today.toString();
		var bsACSGeneralOp : Service;
		var bsIn : PropertySet;
		var bsOut : PropertySet;
		if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;A&quot;))
		{			
			var processName = &quot;Verify Tc Id&quot;;
			var status = &quot;OK&quot;;
			var task = &quot;[BS] VF Account General Operation [CheckTcId]&quot;;
			var timestampStart = ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());
			var userId = TheApplication().LoginName();
							
			bsIn.SetProperty(&quot;UserId&quot;,userId);
			bsIn.SetProperty(&quot;description&quot;,&quot;Prova DESC&quot;);
			bsIn.SetProperty(&quot;kpiRef&quot;,bcRowId);
			bsIn.SetProperty(&quot;processName&quot;,processName);
			bsIn.SetProperty(&quot;bcRowId&quot;,bcRowId);
			bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
			bsIn.SetProperty(&quot;status&quot;,status);
			bsIn.SetProperty(&quot;task&quot;,task);
			bsIn.SetProperty(&quot;timestampEnd&quot;,&quot;&quot;);
			bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);	
			bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
			var output = bsOut.GetProperty(&quot;result&quot;);
		}
		/*isDuplicated predefaulted to N*/
		Outputs.SetProperty(&quot;isTcIdValidated&quot;,&quot;N&quot;);	
		var tcId		=	Inputs.GetProperty(&quot;TcId&quot;);
		/*tc id owns 11 numbers, the first one cannot be 0, the following regular exp check this property*/
		var sCheck 		= 	/^[1-9]\d{10}$/;
		var regRes = tcId.match(sCheck);
		
		if(regRes != null)	
		{
			var tcIdNoLong=parseInt(tcId,10);
		    var tmp, tmp1;
		    var oddSum, evenSum, total, chkDigit1, chkDigit2;
		    var array=new Array;   

        	tmp  =Math.floor(tcIdNoLong/100);  //Assigning Temporary    
        	tmp1 =Math.floor(tcIdNoLong/100);  //Assigning Temporary1
        	
        	for(var i=9;i&gt;0;i--)
        	{
        		array[i]=(tmp1%10);	
        		tmp1=Math.floor(tmp1/10);	
        	}
        	oddSum=array[1]+array[3]+array[5]+array[7]+array[9];
        	evenSum=array[2]+array[4]+array[6]+array[8];     	
        	total=oddSum*3+evenSum; 
        	chkDigit1=(10-(total % 10))%10;
        	oddSum=chkDigit1+array[8]+array[6]+array[4]+array[2];
        	evenSum=array[9]+array[7]+array[5]+array[3]+array[1];
        	total=oddSum*3+evenSum;	 
        	chkDigit2=(10-(total % 10))%10;
        	tmp=tmp*100+chkDigit1*10+chkDigit2; 
        	
        	if (tmp !=tcIdNoLong)
       		{
       		status = &quot;KO VF Account General Operations :: CheckTcId :: tmp value &quot;+tmp;	
       	 	return; 
       		}
        	else
        		Outputs.SetProperty(&quot;isTcIdValidated&quot;,&quot;Y&quot;);	
		}
	}
	catch (e)
	{
		status = &quot;KO &quot; + e.toString();
	}
	finally
	{
	    if((TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;Y&quot;)||(TheApplication().GetSharedGlobal(&quot;KPI_ON&quot;)== &quot;A&quot;))
	    {			
		    today = new Date();
			var timestampEnd = ((today.getMonth() + 1) + &quot;/&quot; + today.getDate() + &quot;/&quot; + today.getFullYear()+ &quot; &quot;+ today.getHours() + &quot;:&quot; + today.getMinutes()+&quot;:&quot; + today.getSeconds());
			bsIn.SetProperty(&quot;UserId&quot;,userId);
			bsIn.SetProperty(&quot;description&quot;,&quot;Prova DESC&quot;);
			bsIn.SetProperty(&quot;kpiRef&quot;,bcRowId);
			bsIn.SetProperty(&quot;processName&quot;,processName);
			bsIn.SetProperty(&quot;bcRowId&quot;,bcRowId);
			bsIn.SetProperty(&quot;rootTransactionId&quot;,rootTransactionId);
			bsIn.SetProperty(&quot;status&quot;,status);
			bsIn.SetProperty(&quot;task&quot;,task);
			bsIn.SetProperty(&quot;timestampEnd&quot;,timestampEnd);
			bsIn.SetProperty(&quot;timestampStart&quot;,timestampStart);		
			bsACSGeneralOp.InvokeMethod(&quot;KpiLogging&quot;,bsIn,bsOut);
		}
		bsACSGeneralOp = null;
		bsIn = null;
		bsOut= null;
	}
}"
			   SEQUENCE="10"
			   UPDATED="04/02/2015 14:11:47"
			   UPDATED_BY="SADMIN"
			   CREATED="11/25/2009 16:42:51"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Checklength"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Checklength(Inputs, Outputs)
{
   var strValue        = Inputs.GetProperty(&quot;Value&quot;);
   var strMessCategory = Inputs.GetProperty(&quot;MessageCategory&quot;);
   var strErrorCode    = Inputs.GetProperty(&quot;ErrorMessageNo&quot;);
   var check = strValue.length;
    if (check &gt; 160)
   {
           Outputs.SetProperty(&quot;Matched&quot;,&quot;N&quot;);
           Outputs.SetProperty(&quot;ErrorMessageText&quot;,TheApplication().LookupMessage(strMessCategory, strErrorCode));
   }
   else
   	Outputs.SetProperty(&quot;Matched&quot;,&quot;Y&quot;);            
}"
			   SEQUENCE="7"
			   UPDATED="06/26/2012 16:46:56"
			   UPDATED_BY="SADMIN"
			   CREATED="03/30/2011 20:52:47"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ContactSaveRecord"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ContactSaveRecord(Inputs, Outputs)
{
/********************************************************************************************
	Author		: 		Divakara Nagaraju
	Created On	:		09-Jan-2012
	Purpose		:		To check whether the contact is validated against all the validations.
********************************************************************************************/
	try
	{
		var sContId = Inputs.GetProperty(&quot;sContId&quot;);
		var sAccId = Inputs.GetProperty(&quot;sAccId&quot;);
		var sContactBO = TheApplication().GetBusObject(&quot;Contact&quot;);
		var sContactBC = sContactBO.GetBusComp(&quot;Contact&quot;);
		var sAccountBC = sContactBO.GetBusComp(&quot;Account&quot;);
		
		var sAccnType = &quot;&quot;;
		var sContType = &quot;&quot;;
		var sMernis = &quot;&quot;;
		var sBlkList = &quot;&quot;;
		var sRelative = &quot;&quot;;
		var strCitizenship = &quot;&quot;;
		var sErrMsg = &quot;Success&quot;;
		
		//Begin - Scripting 15 - Input validation		
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);

		
		var sContactLegal = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Contract Owner&quot;);
		var sEndUsr = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;End-user&quot;);
		var sContactRep = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Contact Representative&quot;);
		var sConsType = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;102&quot;);
		var trkCit			=   TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;X_CITIZENSHIP&quot;,&quot;Turkish&quot;);
				
		var sSearchCont = &quot;[Id] = &apos;&quot;+sContId+&quot;&apos;&quot;;

		
		with(sContactBC)
		{
			SetViewMode(AllView);
			ClearToQuery();
			inProp.SetProperty(&quot;sContId&quot;,sContId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			ActivateField(&quot;VF BlackList Validate Flg&quot;);
			ActivateField(&quot;VF Account Type&quot;);
			SetSearchExpr(sSearchCont);
			ExecuteQuery(ForwardOnly);//VFTK Venkata 11052012 : No changes for OracleScript 15 review since sContId is a required input
			
			with(sAccountBC){
				SetViewMode(AllView);
				ClearToQuery();
				inProp.SetProperty(&quot;sAccId&quot;,sAccId);
				BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
				ActivateField(&quot;&quot;);
				SetSearchSpec(&quot;Id&quot;,sAccId);
				ExecuteQuery(ForwardOnly);
				var sPrimCont = GetFieldValue(&quot;Primary Contact Id&quot;);
	    	}
			
			if(FirstRecord())
			{
				strCitizenship = GetFieldValue(&quot;Citizenship&quot;);
				sAccnType = GetFieldValue(&quot;VF Account Type&quot;);
				sContType = GetFieldValue(&quot;Type&quot;);
				sMernis = GetFieldValue(&quot;VF Mernis Status&quot;);
				sBlkList = GetFieldValue(&quot;VF BlackList Validate Flg&quot;);
				sRelative = GetFieldValue(&quot;VF Relative Validate Flg&quot;);
			}
			if(sMernis != &quot;Y&quot; &amp;&amp; strCitizenship == trkCit &amp;&amp; sPrimCont == sContId)
			{
				if(sContType == sContactLegal)
				{
					sErrMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_073&quot;);
				}
				else if(sContType == sContactRep)
				{
					sErrMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_072&quot;);
				}
				else if(sAccnType == sConsType &amp;&amp; sContType == sEndUsr)
				{
					sErrMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_074&quot;);
				}
			}
			else if(sRelative != &quot;Y&quot; &amp;&amp; sAccnType == sConsType &amp;&amp; sContType == sEndUsr)
			{
				sErrMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_075&quot;);
			}
			else if(sBlkList != &quot;Y&quot; &amp;&amp; sPrimCont == sContId)
			{
				if(sContType == sContactRep)
				{
					sErrMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_076&quot;);
				}
				else if(sContType == sContactLegal)
				{
					sErrMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_077&quot;);
				}
			}
			Outputs.SetProperty(&quot;Error&quot;, sErrMsg);
		}
	}//try
	finally
	{
		sContactBC = null;
		sContactBO = null;
		sAccountBC = null;
		inProp 		= null;
		outProp		= null;
		BS		= null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="07/06/2012 15:26:30"
			   UPDATED_BY="SADMIN"
			   CREATED="01/11/2012 08:39:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ContactValidations"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*********************************************************************************
	* VFTK Diva 20111022: 
	* Created by	   :  Divakara Nagaraju
	* Description      :  Created for the new contact validations introduced as part of WP01 R2.1
  				
	******************************************************************************/
function ContactValidations(Inputs, Outputs)
{
	try
	{   
		var ArBithDate = new Array;
		var ArBirthPlace = new Array;
		var ArFatherName = new Array;
		var ArFirstName = new Array;
		var ArLastName = new Array;
		var ArTCID = new Array;
		var ArMernis = new Array;
		var ArRelative = new Array;
		var Arcitizenship = new Array;
		var i = 0;
		var j = 0;
		var k = 0;
		var x = 0;
		var y = 0;
		var z = 0;
		var strContactType = &quot;&quot;;
		
 		Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;N&quot;);
 		
 		var sSkipCheckContact = TheApplication().GetProfileAttr(&quot;SkipCheckContact&quot;);
 		
 		if(sSkipCheckContact == &quot;Y&quot;)
 		{
 			return(CancelOperation);
 		}
 		
		var customerClass	=	Inputs.GetProperty(&quot;MarketClass&quot;);
		var name			=	Inputs.GetProperty(&quot;Name&quot;);
		var country			=	Inputs.GetProperty(&quot;Country&quot;);
		var tcId			=	Inputs.GetProperty(&quot;Contact SSN&quot;);
		var customerStatus	=	Inputs.GetProperty(&quot;Customer Status&quot;);
		var rowId			=	Inputs.GetProperty(&quot;rowId&quot;);
		var citizenship     =   Inputs.GetProperty(&quot;trkCit&quot;);
		
		var inProp  :PropertySet	= TheApplication().NewPropertySet();
		var outProp :PropertySet	= TheApplication().NewPropertySet();
		var BS 		:Service		= TheApplication().GetService(&quot;VF TRK Utilities&quot;);

		var activeStatus	= TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;95&quot;);
		var acquiredStatus	= TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;100&quot;);
		var trkCit			= TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;X_CITIZENSHIP&quot;,&quot;Turkish&quot;);
		//FTOSCANO - VFTRCBU-9546
		var strLegalOwner   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Legal Owner&quot;);
		var ContactRep 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Contact Representative&quot;);
				
		var strConsumer 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;102&quot;);
		var strPrimContId 	= Inputs.GetProperty(&quot;PrimContId&quot;);
		var strCustType 	= Inputs.GetProperty(&quot;MarketClass&quot;);
		
		var strBOContact 	:BusObject	= TheApplication().GetBusObject(&quot;Contact&quot;);
		var strBCContact 	:BusComp	= strBOContact.GetBusComp(&quot;Contact&quot;);
		var strBCContactHP 	:BusComp	= strBOContact.GetBusComp(&quot;Contact HP&quot;);
		
		var strBOAccount 	:BusObject	= TheApplication().GetBusObject(&quot;Account&quot;);
		var strBCAccount_Copy :BusComp	= strBOAccount.GetBusComp(&quot;Account&quot;);
		
		var strSearchExpr 	= &quot;&quot;;
		var strSearchExprAcc = &quot;&quot;;
		var strSearchExprcontHP = &quot;&quot;;
		var strMernisStat 	= &quot;Y&quot;;
		var strBGListCheck 	= &quot;Y&quot;;
		var strRelativeChk 	= &quot;Y&quot;;
		var strMernisErrCode = &quot;&quot;;
		var strMernisStatx = &quot;&quot;;
		var strMernisErrCodex = &quot;&quot;;
		
		with(strBCContact)
		{
			ActivateField(&quot;Place of Birth&quot;);
			ActivateField(&quot;VF Mernis Father Name&quot;);
			ActivateField(&quot;VF BlackList Validate Flg&quot;);
			ActivateField(&quot;VF Mernis Error Code&quot;);
			ActivateField(&quot;SSN&quot;);
			ActivateField(&quot;Citizenship&quot;);
			ActivateField(&quot;VF Mernis Status&quot;);
			ActivateField(&quot;Type&quot;);
			ActivateField(&quot;Date of Birth&quot;);
			ActivateField(&quot;First Name&quot;);
			ActivateField(&quot;Last Name&quot;);
			ClearToQuery();
			SetViewMode(AllView);
			strSearchExpr = &quot;[Id] = &apos;&quot;+strPrimContId+&quot;&apos;&quot;;
			SetSearchExpr(strSearchExpr);//Scripting 15:null check not req mandatory in BS method argument
			ExecuteQuery(ForwardOnly);//Review Parent-Child Query: No child query present 14may2012 Udbhav IDC VFTK
			var CurrRecord = FirstRecord();
			if(FirstRecord())
			{
				var strCitizenship = GetFieldValue(&quot;Citizenship&quot;);
				strMernisStat = GetFieldValue(&quot;VF Mernis Status&quot;);
				strBGListCheck = GetFieldValue(&quot;VF BlackList Validate Flg&quot;);
				strContactType = GetFieldValue(&quot;Type&quot;);
				strMernisErrCode = GetFieldValue(&quot;VF Mernis Error Code&quot;);
				if(strMernisErrCode == &quot;VFTK-Mernis-0002&quot; || strMernisStat == &quot;Y&quot;)
					strMernisStat = &quot;Y&quot;;
			
				if(strCitizenship == trkCit)
				{
					var TC_ID = GetFieldValue(&quot;SSN&quot;);
					strSearchExprAcc = &quot;[Market Class] = &apos;&quot;+strConsumer+&quot;&apos; AND [Contact SSN] = &apos;&quot;+TC_ID+&quot;&apos; AND [Id] &lt;&gt; &apos;&quot;+rowId+&quot;&apos; AND ([Account Status Code] = &apos;&quot;+acquiredStatus+&quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;)&quot;;
					// Begin: Review Input validation: Scripting 15 null check Added 14may2012 Udbhav IDC
						inProp.SetProperty(&quot;TC_ID&quot;,TC_ID);
						BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
						//End
					ArTCID[x] = TC_ID;
					x = x+1;														
				}
				else
				{
					var BirthPlace = GetFieldValue(&quot;Place of Birth&quot;);
					var BithDate = GetFieldValue(&quot;Date of Birth&quot;);
					var FatherName = GetFieldValue(&quot;VF Mernis Father Name&quot;);
					var FirstName = GetFieldValue(&quot;First Name&quot;);
					var LastName = GetFieldValue(&quot;Last Name&quot;);
					// Begin: Review Input validation: Scripting 15 null check Added 14may2012 Udbhav IDC
						inProp.SetProperty(&quot;BirthPlace&quot;,BirthPlace);
						inProp.SetProperty(&quot;BithDate&quot;,BithDate);
						inProp.SetProperty(&quot;FatherName&quot;,FatherName);
						inProp.SetProperty(&quot;FirstName&quot;,FirstName);
						inProp.SetProperty(&quot;LastName&quot;,LastName);
						inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);											
						BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
						//End
					strSearchExprAcc = &quot;[Market Class] = &apos;&quot;+strConsumer+&quot;&apos; AND [Id] &lt;&gt; &apos;&quot;+rowId+&quot;&apos; AND ([Account Status Code] = &apos;&quot;+acquiredStatus+&quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;) AND [VF Mernis Birth Place] = &apos;&quot;+BirthPlace+&quot;&apos; AND [Contact Last Name] = &apos;&quot;+LastName+&quot;&apos;AND [Contact First Name] = &apos;&quot;+FirstName+&quot;&apos; AND [VF Mernis Father Name] = &apos;&quot;+FatherName+&quot;&apos; AND [Contact Date Of Birth] = &apos;&quot;+BithDate+&quot;&apos;&quot;;
					ArBithDate[i] = BithDate;
					ArBirthPlace[i] = BirthPlace;
					ArFatherName[i] = FatherName;
					ArFirstName[i] = FirstName;
					ArLastName[i] = LastName;
					i = i+1;														
				}
			}
		}
		i = 0; // JMARQUES - VFTRCBU-8069
		x = 0; // JMARQUES - VFTRCBU-8069
		
		if(customerClass == strConsumer)
		{							
			with (strBCAccount_Copy)
			{
				ClearToQuery();
				ActivateField(&quot;Contact Type&quot;)
				SetViewMode(AllView);	
				SetSearchExpr(strSearchExprAcc);
				ExecuteQuery(ForwardOnly);//Review Parent-Child Query: No child query present 14may2012 Udbhav IDC VFTK
				var chkRecord = FirstRecord();
				while(chkRecord)
				{
					var Contact_Type = GetFieldValue(&quot;Contact Type&quot;);
					if(Contact_Type == strLegalOwner)
					{
						Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_071&quot;);
						return;
					}
					chkRecord = NextRecord();
				}		
			}// end of primary contact duplicate check - VFTK-SBL_M0041
					 					
			with(strBCContactHP) // for End-Users
			{
				var strEndUsr = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;End-user&quot;);
				ActivateField(&quot;Place of Birth&quot;);
				ActivateField(&quot;VF Mernis Father Name&quot;);
				ActivateField(&quot;VF Mernis Status&quot;);
				ActivateField(&quot;VF Relative Validate Flg&quot;);
				ActivateField(&quot;VF Mernis Error Code&quot;);
				ClearToQuery();
				SetViewMode(AllView);
				strSearchExprcontHP = &quot;[Account Id] = &apos;&quot;+rowId+&quot;&apos; AND [VF Inactive Flag] &lt;&gt; &apos;Y&apos; AND [Type] = &apos;&quot;+strEndUsr+&quot;&apos;&quot;;//Scripting 15:null check not req mandatory in BS method argument
				SetSearchExpr(strSearchExprcontHP);//Review Parent-Child Query: No child query present 14may2012 Udbhav IDC VFTK
				ExecuteQuery(ForwardOnly);
				var strCurrRecrd = FirstRecord();
				while(strCurrRecrd)
				{
					var ContCitizeShip = GetFieldValue(&quot;Citizenship&quot;);
					if(ContCitizeShip != trkCit)
					{
						ArBithDate[i] = GetFieldValue(&quot;Date of Birth&quot;);
						ArBirthPlace[i] = GetFieldValue(&quot;Place of Birth&quot;);
						ArFatherName[i] = GetFieldValue(&quot;VF Mernis Father Name&quot;);
						ArFirstName[i] = GetFieldValue(&quot;First Name&quot;);
						ArLastName[i] = GetFieldValue(&quot;Last Name&quot;);
						i = i+1;
					}
					else
					{
						ArTCID[x] = GetFieldValue(&quot;SSN&quot;);
						Arcitizenship[x] = GetFieldValue(&quot;Citizenship&quot;);
						ArRelative[x] = GetFieldValue(&quot;VF Relative Validate Flg&quot;);
						strMernisStatx = GetFieldValue(&quot;VF Mernis Status&quot;);
						strMernisErrCodex = GetFieldValue(&quot;VF Mernis Error Code&quot;);
						if (strMernisErrCodex == &quot;VFTK-Mernis-0002&quot;)
							strMernisStatx = &quot;Y&quot;;
						ArMernis[x] = strMernisStatx;
						x = x+1;
					}
					strCurrRecrd = NextRecord();
				}
				for(j=0; j&lt;i; j++)
				{
					for(k=j+1; k&lt;=i; k++)
					{
						if(ArBithDate[j] == ArBithDate[k] &amp;&amp; ArBirthPlace[j] == ArBirthPlace[k] &amp;&amp; ArFatherName[j] == ArFatherName[k] &amp;&amp; ArFirstName[j] == ArFirstName[k] &amp;&amp; ArLastName[j] == ArLastName[k])
						{Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_070&quot;);
						return;
						 }
					}
				} 
				for(y=0; y&lt;x; y++)
				{
					for(z=y+1; z&lt;=x; z++)
					{
						if(ArTCID[y] == ArTCID[z])
						{Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_070&quot;);
						return; 
						}
					}
				}
			} // end for End-User
		}//if (consumer)
		
		if(strCitizenship == trkCit &amp;&amp; strMernisStat != &quot;Y&quot; &amp;&amp; strContactType == strLegalOwner)
		{
			Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_073&quot;);
			return; // Legal Mernis
		}
		if(strCitizenship == trkCit &amp;&amp; strMernisStat != &quot;Y&quot; &amp;&amp; strContactType == ContactRep)
		{
			Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_072&quot;);
			return;
			//Contact Representative missing Mernis validation
		}
		for(var p=1; p&lt;x; p++)
		{
			if(ArMernis[p] != &quot;Y&quot; &amp;&amp; Arcitizenship[p] == trkCit)
			{
				Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_074&quot;);
				return;
			}//End User missing mernis validation
		}
		if(strBGListCheck != &quot;Y&quot; &amp;&amp; strContactType == strLegalOwner &amp;&amp; TheApplication().GetProfileAttr(&quot;Bypass_BGList_076_077&quot;) == &quot;N&quot;)
		{
			Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_077&quot;);
			return;//Legal Owner missing BG/Cep check
		}
		if(strBGListCheck != &quot;Y&quot; &amp;&amp; strContactType == ContactRep &amp;&amp; TheApplication().GetProfileAttr(&quot;Bypass_BGList_076_077&quot;) == &quot;N&quot;)
		{
			Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_076&quot;);
			return;
			//Contact Rep missing BG/Cep check
		}
		for(var q=1; q&lt;x; q++)
		{
			if(ArRelative[q] != &quot;Y&quot; &amp;&amp; Arcitizenship[q] == trkCit)
			{
				Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;R21_075&quot;);
				return;
			}
		}				//End user missing Relativeness Check
	}// end try
	catch (e)
	{
	Outputs.SetProperty(&quot;isDuplicated&quot;,&quot;N&quot;);
	}
	finally
	{	
		strBCAccount_Copy = null;
		strBCContactHP = null;
		strBCContact = null;
		strBOAccount = null;
		strBOContact = null;
		inProp 	= null;
		outProp = null;
		BS 	= null;
		TheApplication().SetProfileAttr(&quot;Bypass_BGList_076_077&quot;,&quot;&quot;);
	}
}"
			   SEQUENCE="12"
			   UPDATED="07/27/2015 10:23:10"
			   UPDATED_BY="SADMIN"
			   CREATED="11/30/2011 19:00:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="EvaluateRegExp"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function EvaluateRegExp(Inputs, Outputs)
{	
	var strValue 		= Inputs.GetProperty(&quot;Value&quot;);
	var strRegExp 		= Inputs.GetProperty(&quot;RegExp&quot;);
	var strMessCategory = Inputs.GetProperty(&quot;MessageCategory&quot;);
	var strErrorCode    = Inputs.GetProperty(&quot;ErrorMessageNo&quot;);
	var check = strValue.search(strRegExp);
	if(strValue.search(strRegExp) == -1)
	{
		 Outputs.SetProperty(&quot;Matched&quot;,&quot;N&quot;);
		 Outputs.SetProperty(&quot;ErrorMessageText&quot;,TheApplication().LookupMessage(strMessCategory, strErrorCode));
	}
	else {Outputs.SetProperty(&quot;Matched&quot;,&quot;Y&quot;);}
}"
			   SEQUENCE="13"
			   UPDATED="06/26/2012 17:05:19"
			   UPDATED_BY="SADMIN"
			   CREATED="12/13/2010 19:30:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GenerateBGMessage"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GenerateBGMessage (Inputs, Outputs)
{
	var i;
	var sMessage = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_089&quot;);
	sMessage = sMessage +&quot;\n\r\n\r&quot;+ &quot;ID&quot; + &quot;\t\t&quot; + &quot;PLATFORM&quot; + &quot;\t&quot; + &quot;MSISDN&quot;;
	sMessage = sMessage +&quot;\n\r&quot;+ &quot;----------&quot; + &quot;\t\t&quot; + &quot;----------&quot; + &quot;\t\t&quot; + &quot;----------&quot;;
	var BGInq = Inputs.GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0).GetChild(0);
	var cnt = BGInq.GetChildCount();
	for ( i=0;i&lt; cnt;i++)
	{
		var res = BGInq.GetChild(i);
		var sCustType = res.GetProperty(&quot;RecordFlag&quot;);
		var sCustId = res.GetProperty(&quot;CustomerID&quot;);
		var sCustPlatform = res.GetProperty(&quot;Platform&quot;);
		var sCustMsisdn   = res.GetProperty(&quot;MSISDN&quot;);
		var sSiebel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;S&quot;);
		var sChannel = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_PLATFORM&quot;,&quot;C&quot;);
		var sBusiness = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;C&quot;);
		var sConsumer = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_BGLIST_TYPE&quot;,&quot;A&quot;);
		if(sCustPlatform == &quot;S&quot;)
		{
			sCustPlatform = sSiebel;
		}
		else
			sCustPlatform = sChannel;
		if(sCustType != &quot;&quot;)
		{
			if(sCustType == &quot;C&quot;)
				sCustType = sBusiness;
			else
				sCustType = sConsumer;
		}
		sMessage = sMessage +&quot;\n\r&quot;+ sCustId + &quot;\t&quot; + sCustPlatform + &quot;\t\t&quot; + sCustMsisdn;
	}
	sMessage = sMessage + &quot;\n\r&quot;;
	Outputs.SetProperty(&quot;ErrorMessage&quot;,sMessage);
}"
			   SEQUENCE="14"
			   UPDATED="07/27/2015 10:23:10"
			   UPDATED_BY="SADMIN"
			   CREATED="11/21/2011 18:52:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetPrimaryContactDet"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetPrimaryContactDet(Inputs, Outputs)
{
	/*====================================================================
	Author: Diva
	Date: 05-Nov-2011
	Purpose: To get the Primary Contact&apos;s Family sequence number - R2.1 - WP01
	Modify: VFTK Diva 20111207: To improve the performance
	=======================================================================*/
	try
	{
		var AccountId = Inputs.GetProperty(&quot;AccountId&quot;);
		var BOContact : BusObject = TheApplication().GetBusObject(&quot;Contact&quot;);
		var BCContact : BusComp = BOContact.GetBusComp(&quot;Contact HP&quot;);
		var strSearchExpr = &quot;&quot;;
		var FamilySeq = &quot;&quot;;
		var PriContId = &quot;&quot;;
		var strLegalOwner = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Legal Owner&quot;);//ESANTOS VFTRCBU-28720 - changed from Contract Owner to Legal Owner
		//Begin - Scripting 15 - Input validation		
		var inProp 	:PropertySet = TheApplication().NewPropertySet();
		var outProp	: PropertySet = TheApplication().NewPropertySet();
		var BS		: Service	 = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		with(BCContact)
		{
			ActivateField(&quot;VF Mernis Family Sequence Number&quot;);
			SetViewMode(AllView)
			ClearToQuery();
			inProp.SetProperty(&quot;AccountId&quot;,AccountId);
			BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
			strSearchExpr = &quot;[Account Id] = &apos;&quot;+AccountId+&quot;&apos; AND [Type] = &apos;&quot;+strLegalOwner+&quot;&apos;&quot;;//VFTK Venkata 11052012 : No changes for OracleScript 15 review since AccountId is a required input
			SetSearchExpr(strSearchExpr);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
				FamilySeq = GetFieldValue(&quot;VF Mernis Family Sequence Number&quot;);	
		}
		Outputs.SetProperty(&quot;FamilySeq&quot;, FamilySeq);
	}
	finally
	{
			BCContact = null;
			BOContact = null;
			inProp 		= null;
			outProp		= null;
			BS		= null;
	}	
}"
			   SEQUENCE="15"
			   UPDATED="05/13/2016 19:27:28"
			   UPDATED_BY="SADMIN"
			   CREATED="11/07/2011 12:44:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName)
	{
		case &quot;GenerateBGMessage&quot;:
			GenerateBGMessage (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;EvaluateRegExp&quot;:
			EvaluateRegExp (Inputs, Outputs);
			return (CancelOperation);
			break;
		case &quot;CheckDuplicity&quot;:
			CheckDuplicity(Inputs, Outputs);
			return (CancelOperation);
			break;
			
		case &quot;CheckTcId&quot;:
			CheckTcId(Inputs, Outputs);
			return (CancelOperation);	
			break;	
			
		case &quot;Checklength&quot;:
			Checklength(Inputs, Outputs);
			return (CancelOperation);	
			break;	
			
		case &quot;CheckTaxId&quot;:
			CheckTaxId(Inputs, Outputs);
			return (CancelOperation);	
			break;
			
		case &quot;VerifyMernis&quot;:
			VerifyMernis(Inputs, Outputs);
			return (CancelOperation);	
			break;
			
		case &quot;CheckMissingFields&quot;:
			CheckMissingFields(Inputs, Outputs);
			return (CancelOperation);
			break;
			
		case &quot;GetPrimaryContactDet&quot;:
			GetPrimaryContactDet(Inputs, Outputs);								
			return (CancelOperation);
			break;
			
		/** Added by Junaid for WP01 on 21/11/2011 **/
		case &quot;CheckBG&quot;:
			CheckBG(Inputs, Outputs);
			return (CancelOperation);
			break;
			
		case &quot;CheckCepAra&quot;:
			CheckCepAra(Inputs, Outputs);
			return (CancelOperation);
			break;
		/** End **/
		
		case &quot;ContactValidations&quot;: //Diva
			ContactValidations(Inputs, Outputs);
			return (CancelOperation);
			break;	
		
		case &quot;ValidateContact&quot;: //Diva
			ValidateContact(Inputs, Outputs);
			return (CancelOperation);
			break;			
		
		case &quot;ContactSaveRecord&quot;: //Diva
			ContactSaveRecord(Inputs, Outputs);
			return (CancelOperation);
			break;
			
		case &quot;CheckLastUpdateDate&quot;: //Diva
			CheckLastUpdateDate(Inputs, Outputs);
			return (CancelOperation);
			break;		
			
		case &quot;CheckAccountType&quot;: // VF Prateek 2012/01/31 Created for PROD00028584
			CheckAccountType(Inputs, Outputs);
			return (CancelOperation);
			break;		
	}
	return (ContinueOperation);
}"
			   SEQUENCE="18"
			   UPDATED="06/15/2012 11:42:48"
			   UPDATED_BY="SADMIN"
			   CREATED="11/20/2009 12:42:10"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateContact"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************************************
* Name: ValidateContact															
* Description: To check for duplication in contact information and the required validations.
* Name: Diva
* Date Creation: 24/11/2011										     		
**************************************************************************/
function ValidateContact(Inputs : PropertySet, Outputs : PropertySet)
{
	try
	{
		var strBoAccount : BusObject;
		var strBcAccount : BusComp;
		var strBcContact : BusComp;
		var strBo = TheApplication().ActiveBusObject().Name();
		var oBO : BusObject;
		var oBC : BusComp;
		var AccntBO : BusObject;
		var AccntBC : BusComp;
		if(strBo == &quot;Account&quot;)
		{		
			strBoAccount = TheApplication().ActiveBusObject();
			strBcAccount = strBoAccount.GetBusComp(&quot;Account&quot;);
			strBcContact = strBoAccount.GetBusComp(&quot;Contact&quot;);
			
			var strInactive= strBcContact.GetFieldValue(&quot;VF Inactive Flag&quot;);
			
			var sBypassMernisError = Inputs.GetProperty(&quot;BypassMernisError&quot;);//VFTRCBU-24758
			
			if(strInactive!=&quot;Y&quot;)
			{		
				var AccntId = strBcAccount.GetFieldValue(&quot;Id&quot;);
				var strCustType = strBcAccount.GetFieldValue(&quot;Market Class&quot;);
				var strPrimCon = strBcAccount.GetFieldValue(&quot;Primary Contact Id&quot;);
				var sNation = strBcContact.GetFieldValue(&quot;Citizenship&quot;);
				var sAccId = strBcContact.GetFieldValue(&quot;Account Id&quot;);
				var sCurrTcId = strBcContact.GetFieldValue(&quot;SSN&quot;);
				var sCurrId = strBcContact.GetFieldValue(&quot;Id&quot;);
				var strPrimary = strBcContact.GetFieldValue(&quot;VF Primary Contact Calc&quot;);
				
				var sRec;
				var sErr;
				
				oBO = TheApplication().GetBusObject(&quot;Contact&quot;);
				oBC = oBO.GetBusComp(&quot;Contact&quot;);
				
				if(strPrimCon == &quot;&quot;)
					strPrimary = &quot;Y&quot;;
				
				Outputs.SetProperty(&quot;ErrMsg&quot;, &quot;Success&quot;);
				var sTrk = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;X_CITIZENSHIP&quot;,&quot;Turkish&quot;);
				//FTOSCANO - VFTRCBU-9546
				var strLegalOwner = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Legal Owner&quot;);
				var strContRep = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;Contact Representative&quot;);
				var strEnduser = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;CONTACT_TYPE&quot;, &quot;End-user&quot;);
				var strConsumer = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;102&quot;);
				var strBusiness = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;101&quot;);
				var activeStatus	=	TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;95&quot;);
				var acquiredStatus	=	TheApplication().InvokeMethod(&quot;lookupValue&quot;,&quot;ACCOUNT_STATUS&quot;,&quot;100&quot;);
				var sCurrFrstName = strBcContact.GetFieldValue(&quot;First Name&quot;);
				var sCurrLName = strBcContact.GetFieldValue(&quot;Last Name&quot;);
				var sCurrDOB = strBcContact.GetFieldValue(&quot;Date of Birth&quot;);
				var sCurrPOB = strBcContact.GetFieldValue(&quot;Place of Birth&quot;);
				var sCurrFatherName = strBcContact.GetFieldValue(&quot;VF Mernis Father Name&quot;);
				var strContactType = strBcContact.GetFieldValue(&quot;Type&quot;);
				var strMernisStat = strBcContact.GetFieldValue(&quot;VF Mernis Status&quot;);
				var strBGStat = strBcContact.GetFieldValue(&quot;VF BlackList Validate Flg&quot;);
				var strRelativeFLg = strBcContact.GetFieldValue(&quot;VF Relative Validate Flg&quot;);						
				
				AccntBO = TheApplication().GetBusObject(&quot;Account&quot;);
				AccntBC = AccntBO.GetBusComp(&quot;Account&quot;);
				if(strPrimary != &quot;Y&quot; &amp;&amp; strCustType == strConsumer)
				{
					with(oBC)
					{
						if(sNation == sTrk)
						{
							var sExpr = &quot;[Account Id] = &apos;&quot;+AccntId+&quot;&apos; AND [Id] &lt;&gt; &apos;&quot;+sCurrId+&quot;&apos; AND [SSN] = &apos;&quot;+sCurrTcId+&quot;&apos;&quot;;
							ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(sExpr);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_070&quot;);
								Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
								Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);
								return;
							}
						}
						else
						{
							ClearToQuery();
							SetViewMode(AllView);			
							SetSearchSpec(&quot;Id&quot;,&quot;&lt;&gt; &apos;&quot; +sCurrId+ &quot;&apos;&quot;); // Added by Junaid as per defect PROD00029093
							SetSearchSpec(&quot;Account Id&quot;,sAccId);
							SetSearchSpec(&quot;First Name&quot;,sCurrFrstName);
							SetSearchSpec(&quot;Last Name&quot;,sCurrLName);
							SetSearchSpec(&quot;Date of Birth&quot;,sCurrDOB);
							SetSearchSpec(&quot;Place of Birth&quot;,sCurrPOB);
							SetSearchSpec(&quot;VF Mernis Father Name&quot;,sCurrFatherName);
							ExecuteQuery(ForwardOnly);
							if(FirstRecord())
							{
								sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_070&quot;);
								Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
								Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);
								return;
							}
						}
					}
				}
				
				else if(strCustType == strConsumer)
				{
					with(AccntBC)
					{
						var strSearchExprAcc = &quot;&quot;;
						if(sNation == sTrk)
							strSearchExprAcc = &quot;[Market Class] = &apos;&quot;+strConsumer+&quot;&apos; AND [Contact SSN] = &apos;&quot;+sCurrTcId+&quot;&apos; AND [Id] &lt;&gt; &apos;&quot;+AccntId+&quot;&apos; AND ([Account Status Code] = &apos;&quot;+acquiredStatus+&quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;)&quot;;
						else
							strSearchExprAcc = &quot;[Market Class] = &apos;&quot;+strConsumer+&quot;&apos; AND [Id] &lt;&gt; &apos;&quot;+AccntId+&quot;&apos; AND ([Account Status Code] = &apos;&quot;+acquiredStatus+&quot;&apos; OR [Account Status Code] = &apos;&quot;+activeStatus+&quot;&apos;) AND [VF Mernis Birth Place] = &apos;&quot;+sCurrPOB+&quot;&apos; AND [Contact Last Name] = &apos;&quot;+sCurrLName+&quot;&apos;AND [Contact First Name] = &apos;&quot;+sCurrFrstName +&quot;&apos; AND [VF Mernis Father Name] = &apos;&quot;+sCurrFatherName+&quot;&apos; AND [Contact Date Of Birth] = &apos;&quot;+sCurrDOB+&quot;&apos;&quot;;
							
						SetViewMode(AllView);
						ClearToQuery();
						SetSearchExpr(strSearchExprAcc);
						ActivateField(&quot;Contact Type&quot;);
						ExecuteQuery(ForwardOnly);
						var sCurrRecrd = FirstRecord();
						while(sCurrRecrd)
						{
							var strType = GetFieldValue(&quot;Contact Type&quot;);
							if(strType == strLegalOwner)
							{
								sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_071&quot;);
								Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
								Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);
								return;
							}
							sCurrRecrd = NextRecord();
						}
					}
				}
				
				if(strMernisStat != &quot;Y&quot; &amp;&amp; sNation == sTrk &amp;&amp; sBypassMernisError ==&quot;N&quot;)//VFTRCBU-24758
				{
					if(strCustType == strBusiness &amp;&amp; strContactType == strContRep)
					{
						sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_072&quot;);
						Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
						Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);
						return;
					}
					else if(strCustType == strConsumer)
					{
						if(strContactType == strLegalOwner)
						{
							sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_073&quot;);
							Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
							Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);							
							return; 
						}
						
			//Commented for VFTRCBU WA#05 - FGUEDES
					/*	else
						{
							sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_074&quot;);
							Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
							Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);	
							return;
						}
					}*/
				}
				
			/*	if(strCustType == strConsumer &amp;&amp; strContactType == strEnduser &amp;&amp; strRelativeFLg != &quot;Y&quot; &amp;&amp; sNation == sTrk)
				{
					sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_075&quot;);
					Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
					Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);	
					return;
				}*/
				
				if(strBGStat != &quot;Y&quot;)
				{
					if(strCustType == strConsumer &amp;&amp; strContactType == strLegalOwner)
					{
						sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_077&quot;);
						Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
						Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);	
						return;
					} 
					if(strCustType == strBusiness &amp;&amp; strContactType == strContRep)
					{
						sErr = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_076&quot;);
						Outputs.SetProperty(&quot;ErrMsg&quot;, sErr);
						Outputs.SetProperty(&quot;Code&quot;, &quot;Dup&quot;);	
						return;
					}
				}
			}//Inactive Check	
		}
	}}
	finally
	{
		AccntBC	= null;
		strBcAccount = null;
		strBcContact = null;
		oBC = null;
		oBO = null;
		strBoAccount = null;		
		AccntBO = null;		
	}
}"
			   SEQUENCE="16"
			   UPDATED="02/14/2016 12:53:18"
			   UPDATED_BY="SADMIN"
			   CREATED="11/30/2011 19:00:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="VerifyMernis"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*********************************************************************************
	* VF TK 07-03-10    : Created by Enrico Galliero	                      	  
	* Description      : 	This script checks Mernis response    														  *
						  				
	******************************************************************************/	
function VerifyMernis (Inputs, Outputs)
{	
    var m00 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Mernis-0000&quot;);
    var m01 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Mernis-0001&quot;);
    var m02 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Mernis-0002&quot;);
    var m03 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Mernis-0003&quot;);
    var m04 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Mernis-0004&quot;);
    var m05 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Mernis-0005&quot;);
    var mTibco01 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Tibco-0001&quot;);
    var mTibco08 = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;MERNIS_ERROR_CODE&quot;,&quot;VFTK-Tibco-0008&quot;);
	var mernisErrorCode = Inputs.GetProperty(&quot;Error Code&quot;);
	var status = Inputs.GetProperty (&quot;Tc Id Status&quot;);
	Outputs.SetProperty(&quot;Verification Date&quot;,&quot;&quot;);
	Outputs.SetProperty(&quot;Mernis Status&quot;,&quot;&quot;);
	Outputs.SetProperty(&quot;Mernis Internal Flag&quot;,&quot;&quot;);
	Outputs.SetProperty(&quot;message&quot;,&quot;&quot;);
	switch (mernisErrorCode)
	{
		case m00://lookup M000000	
					  	
			switch (status)
			{ //tc id is retrived and its value is correct. Update Mernis Status 
				case (TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;TC_ID_STATUS_BS&quot;,&quot;Open&quot;)):
				case (TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;TC_ID_STATUS_BS&quot;,&quot;ExitingCitizenship&quot;)): //DEF-26919 IBMRDAS
					var tm, tmStrFmt;
					tm = Clib.localtime(Clib.time());
					Clib.strftime(tmStrFmt, &quot;%m/%d/%Y&quot;,tm);
					TheApplication().Trace(&quot;Time String Format: &quot; + tmStrFmt);
					Outputs.SetProperty(&quot;Verification Date&quot;,tmStrFmt);
					Outputs.SetProperty(&quot;Mernis Status&quot;,&apos;Y&apos;);
					break;
			 	case (TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;TC_ID_STATUS_BS&quot;,&quot;ClosedDeath&quot;)):
					Outputs.SetProperty(&quot;Mernis Status&quot;,&apos;N&apos;);
					break;
				default :
					Outputs.SetProperty(&quot;Mernis Status&quot;,&apos;N&apos;);
					var error = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;043&quot;);
					Outputs.SetProperty(&quot;message&quot;,error);
					break;	
			}
			break;	  		
		case m01:// lookup Mernis0001  
			var error = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;044&quot;);
			Outputs.SetProperty(&quot;Mernis Status&quot;,&apos;N&apos;);
			Outputs.SetProperty(&quot;message&quot;,error+m01);
			break;
 	 	case m02: //lookup Mernis0002
			Outputs.SetProperty(&quot;Mernis Internal Flag&quot;,&apos;Y&apos;);
			Outputs.SetProperty(&quot;Mernis Status&quot;,&apos;N&apos;);
			Outputs.SetProperty(&quot;message&quot;,m02);
			break;
 	 	case m05: //lookup Mernis0005
			Outputs.SetProperty(&quot;Mernis Internal Flag&quot;,&apos;Y&apos;);
			Outputs.SetProperty(&quot;Mernis Status&quot;,&apos;N&apos;);
			Outputs.SetProperty(&quot;message&quot;,m05);
			break;
 	 	default: 
			var error = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;045&quot;);
			var errorDisplay = error + mernisErrorCode;
			Outputs.SetProperty(&quot;message&quot;,errorDisplay);
			Outputs.SetProperty(&quot;Mernis Status&quot;,&apos;N&apos;);
			break;
		//lookup M0003-4-5
	}	
}"
			   SEQUENCE="17"
			   UPDATED="04/26/2018 17:20:04"
			   UPDATED_BY="IBM_RCATITA"
			   CREATED="03/09/2010 09:06:03"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



