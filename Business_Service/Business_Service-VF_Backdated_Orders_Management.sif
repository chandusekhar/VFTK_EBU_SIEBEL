<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="New Project for Asset Management"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="Asset Management"
	   UI_FREEZE="N"
	   UPDATED="08/05/2016 17:58:55"
	   UPDATED_BY="CSANTOS"
	   CREATED="08/17/1998 18:50:31"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="GEN_REQ_090 : IDC-ISCSSARTHIK :21/1/2013: Created new."
		   DISPLAY_NAME_-_STRING_REFERENCE="X_VF BACKDATED ORDERS MANAGEMENT"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Backdated Orders Management"
		   OBJECT_LANGUAGE_LOCKED="ENU"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="08/04/2016 14:30:50"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   OBJECT_LOCKED_BY_NAME="CSANTOS"
		   UPDATED="08/05/2016 17:57:35"
		   UPDATED_BY="CSANTOS"
		   CREATED="02/12/2013 12:57:00"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_LOCALE
			   APPLICATION_CODE="STD"
			   INACTIVE="N"
			   LANGUAGE_CODE="ENU"
			   NAME="ENU-STD"
			   TRANSLATE="Y"
			   UPDATED="02/12/2013 12:57:00"
			   UPDATED_BY="SADMIN"
			   CREATED="02/12/2013 12:57:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_LOCALE>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AlignStartEnd"
			   UPDATED="04/11/2013 11:56:59"
			   UPDATED_BY="SADMIN"
			   CREATED="04/11/2013 11:56:59"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/11/2013 11:56:59"
				   UPDATED_BY="SADMIN"
				   CREATED="04/11/2013 11:56:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_LOCALE
				   APPLICATION_CODE="STD"
				   DISPLAY_NAME="AlignStartEnd"
				   INACTIVE="N"
				   LANGUAGE_CODE="ENU"
				   NAME="ENU-STD"
				   TRANSLATE="Y"
				   UPDATED="04/11/2013 11:56:59"
				   UPDATED_BY="SADMIN"
				   CREATED="04/11/2013 11:56:59"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_LOCALE>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="PROD00031048 / GEN_REQ_090 : IDC-ISCHPOTE :19/02/2013: Created new"
			   DISPLAY_NAME_-_STRING_REFERENCE="X_CALCULATEDBACKDATED"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CalculateBackdated"
			   UPDATED="02/21/2013 21:16:09"
			   UPDATED_BY="SADMIN"
			   CREATED="02/21/2013 21:16:09"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="PROD00031048 / GEN_REQ_090 : IDC-ISCHPOTE :19/02/2013: Created new."
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="BillingAccountId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/21/2013 21:16:09"
				   UPDATED_BY="SADMIN"
				   CREATED="02/21/2013 21:16:09"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="BillingAccountId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="02/21/2013 21:16:09"
					   UPDATED_BY="SADMIN"
					   CREATED="02/21/2013 21:16:09"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   COMMENTS="PROD00031048 / GEN_REQ_090 : IDC-ISCHPOTE :19/02/2013: Created new."
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="02/21/2013 21:16:09"
				   UPDATED_BY="SADMIN"
				   CREATED="02/21/2013 21:16:09"
				   CREATED_BY="SADMIN">
					<BUSINESS_SERVICE_METHOD_ARG_LOCALE
					   APPLICATION_CODE="STD"
					   DISPLAY_NAME="OrderId"
					   INACTIVE="N"
					   LANGUAGE_CODE="ENU"
					   NAME="ENU-STD"
					   TRANSLATE="Y"
					   UPDATED="02/21/2013 21:16:09"
					   UPDATED_BY="SADMIN"
					   CREATED="02/21/2013 21:16:09"
					   CREATED_BY="SADMIN">
					</BUSINESS_SERVICE_METHOD_ARG_LOCALE>
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="(declarations)"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="var sBillingAccountId;
var strNewBillCycleDate;
var DataCOMP;
var strServiceStartDate;
var Inputs1;
var Outputs1;
var Inputs2;
var Outputs2;
var strActionCode;
var strProductName;
var ProductPortId;
var ParentProductId;
var RootProductId;
var strEndDate;
var LastDueDate;"
			   SEQUENCE="1"
			   UPDATED="02/25/2013 21:55:26"
			   UPDATED_BY="SADMIN"
			   CREATED="02/25/2013 21:55:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AlignStartEnd"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AlignStartEnd(psInputs, psOutputs)
{
	try
	{ 
		var sOrderId = psInputs.GetProperty(&quot;OrderId&quot;);
		var OrderBO : BusObject = TheApplication().GetBusObject (&quot;X Order Entry HP&quot;);
		var OrderBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var Existing = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Existing&quot;);
		var OutFlags : PropertySet = TheApplication().NewPropertySet();
		var DueDate = &quot;&quot;;
		var ActionCode = &quot;&quot;;
		var ProductGroup = &quot;&quot;;
		var ProductType = &quot;&quot;;
		var ProductSubType = &quot;&quot;;
		with(OrderBC)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Service End Date&quot;);
			ActivateField(&quot;Service Start Date&quot;);
			ActivateField(&quot;Due Date&quot;);
			ActivateField(&quot;Action Code&quot;);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;VF Product Type&quot;);
			ActivateField(&quot;VF Product Sub Type&quot;);			
			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot;+sOrderId+&quot;&apos; AND [Action Code] &lt;&gt; &apos;&quot;+Existing+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var Record = FirstRecord();
			while(Record)
			{	
				DueDate = GetFieldValue(&quot;Due Date&quot;);
				ActionCode = GetFieldValue(&quot;Action Code&quot;);
				ProductGroup = GetFieldValue(&quot;VF Product Group&quot;);
				ProductType = GetFieldValue(&quot;VF Product Type&quot;);
				ProductSubType = GetFieldValue(&quot;VF Product Sub Type&quot;);			
				if (ActionCode == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;))
				{
					CheckProdBackDate(ProductGroup,ProductType,ProductSubType,OutFlags);
					if (OutFlags.GetProperty(&quot;DelFlag&quot;) == &quot;Y&quot;)
					{						
						SetFieldValue(&quot;Service End Date&quot;,DueDate);
						WriteRecord();	
					}
				}
				if (ActionCode == TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;))
				{				
					SetFieldValue(&quot;Service Start Date&quot;,DueDate);
					WriteRecord();
				}
				Record = NextRecord();
			}
		}							
	}
	finally
	{
		OrderBO = null;
		OrderBC = null;
		OutFlags = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="04/18/2016 12:16:12"
			   UPDATED_BY="ESANTOS"
			   CREATED="04/11/2013 11:56:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateBackdated"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateBackdated(psInputs, psOutputs) {
	try {
		var sOrderId = psInputs.GetProperty(&quot;OrderId&quot;);
		var sBillingAccountId = psInputs.GetProperty(&quot;BillingAccountId&quot;);
		var BillingAccountBO : BusObject = TheApplication().GetBusObject(&quot;Billing Account&quot;);
		var ComInvoiceBC : BusComp = BillingAccountBO.GetBusComp(&quot;Com Invoice Profile&quot;);
		var OrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;); //BO Instance for New Order Line Item
		var OrderBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;); //Parent BC

		//var ResumeBo : BusObject = TheApplication().GetBusObject (&quot;Asset Management - Asset Item&quot;);
		var ResumeBc : BusComp = OrderBO.GetBusComp(&quot;Order Entry - Line Items for IO HP&quot;);

		//Defining Bill Cycle Date
		var strBillCycleDate = new Date();
		var strBillCycle = &quot;&quot;;
		var strBillCycleTime = &quot;&quot;;
		//Declaring &quot;Bill Cycle Date&quot;
		var Inputs1 : PropertySet = TheApplication().NewPropertySet();
		var Outputs1 : PropertySet = TheApplication().NewPropertySet();
		with (ComInvoiceBC) {
			SetViewMode(AllView);
			ActivateField(&quot;Bill Cycle&quot;);
			ClearToQuery();
			SetSearchExpr(&quot;[Account Id] = &apos;&quot; + sBillingAccountId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()) {
				//DEF-10146
				var strVFBillCycle : float;
				strBillCycle = GetFieldValue(&quot;Bill Cycle&quot;);
				//END DEF-10146

				if (strBillCycle != &quot;&quot;) {
					Inputs1.SetProperty(&quot;InCycle&quot;, strBillCycle);
					CalculateDate(Inputs1, Outputs1);
					strBillCycleDate = Outputs1.GetProperty(&quot;OutCycle&quot;);
					if (strBillCycleDate != &quot;&quot;) {
						var strDate = new Date(strBillCycleDate);
						strBillCycleTime = strDate.getTime();
					}
				}
			}
		} //End with (OrderBC)

		var BackDateToSet = new Date();
		var OutFlags : PropertySet = TheApplication().NewPropertySet();
		var DeleteActCode = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
		var NewActCode = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var ProductGroup = &quot;&quot;;
		var ProductType = &quot;&quot;;
		var ProductSubType = &quot;&quot;;
		var RootOrderItemId = &quot;&quot;;
		var LineItemId = &quot;&quot;;
		var strServiceStartDate = &quot;&quot;;
		var strStartDateTime = &quot;&quot;;
		var strStartDate = &quot;&quot;;
		var strActionCode = &quot;&quot;;
		var InstallDt = &quot;&quot;;
		var integID = &quot;&quot;;
		var createdDate = &quot;&quot;;
		var strcreatedDateTime = &quot;&quot;;
		var ProductName = &quot;&quot;;

		with (OrderBC) {
			SetViewMode(AllView);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;VF Product Type&quot;);
			ActivateField(&quot;VF Product Sub Type&quot;);
			ActivateField(&quot;Display Name&quot;);
			ActivateField(&quot;Service Start Date&quot;);
			ActivateField(&quot;Product Port Id&quot;);
			ActivateField(&quot;Root Order Item Id&quot;);
			ActivateField(&quot;VF Originating Asset Install Date&quot;);
			ActivateField(&quot;Due Date&quot;);
			ActivateField(&quot;Action Code&quot;);
			//for resume order
			ActivateField(&quot;Asset Integration Id&quot;);
			ActivateField(&quot;Order Sub Type&quot;);
			ActivateField(&quot;Created Date&quot;);

			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos;&quot;) // AND [Action Code] = &apos;&quot;+DeleteActCode+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var Record = FirstRecord();
			while (Record) {
				ProductGroup = GetFieldValue(&quot;VF Product Group&quot;);
				ProductType = GetFieldValue(&quot;VF Product Type&quot;);
				ProductSubType = GetFieldValue(&quot;VF Product Sub Type&quot;);
				RootOrderItemId = GetFieldValue(&quot;Root Order Item Id&quot;);
				LineItemId = GetFieldValue(&quot;Id&quot;);
				strActionCode = GetFieldValue(&quot;Action Code&quot;);
				ProductName = GetFieldValue(&quot;Display Name&quot;);
				//for resume order
				integID = GetFieldValue(&quot;Asset Integration Id&quot;);

				CheckProdBackDate(ProductGroup, ProductType, ProductSubType, OutFlags);
				strStartDate = GetFieldValue(&quot;Service Start Date&quot;);

				if (strActionCode == DeleteActCode) {
					if (OutFlags.GetProperty(&quot;DelFlag&quot;) == &quot;Y&quot; || OutFlags.GetProperty(&quot;ModFlag&quot;) == &quot;Y&quot;) {
						ProductPortId = GetFieldValue(&quot;Product Port Id&quot;);
						strStartDate = GetFieldValue(&quot;Service Start Date&quot;);
						InstallDt = GetFieldValue(&quot;VF Originating Asset Install Date&quot;);
						if (InstallDt != &quot;&quot;) {
							strServiceStartDate = new Date(InstallDt);
							strStartDateTime = strServiceStartDate.getTime();
						} else {
							strServiceStartDate = new Date(strStartDate);
							strStartDateTime = strServiceStartDate.getTime();
						}

						with (ResumeBc) {
							SetViewMode(AllView);
							ActivateField(&quot;Integration Id&quot;);
							ActivateField(&quot;Order Sub Type&quot;);
							//find resume order for DEF-1709
							ClearToQuery();
							var searchexpr2 = (&quot;[Asset Integration Id]=&apos;&quot; + integID + &quot;&apos; AND [Action Code]=&apos;Resume&apos;&quot;); //Search for the resume orders
							ResumeBc.SetSearchExpr(searchexpr2);
							ResumeBc.SetSortSpec(&quot;Created(DESCENDING)&quot;); // Get the newest one
							ResumeBc.ExecuteQuery(ForwardOnly);
							var hasOrder = ResumeBc.FirstRecord();
							if (hasOrder) {
								createdDate = GetFieldValue(&quot;Created&quot;);
								var strServiceCreatedDate = new Date(createdDate);
								strcreatedDateTime = strServiceCreatedDate.getTime();
								if (strBillCycleTime &lt;= strcreatedDateTime) {
									BackDateToSet = new Date(strcreatedDateTime + 1 * 1 * 5 * 60 * 1000); //DEF-1709
								} else {
									if (strStartDateTime &lt;= strBillCycleTime) {
										//BackDateToSet = new Date(strBillCycleDate);
										BackDateToSet = new Date(strBillCycleTime + 1 * 24 * 60 * 60 * 1000); // adding 1 days for TLG-5528
										if (BackDateToSet.getDate() == 2) {
											BackDateToSet = new Date(strBillCycleTime); // BC01 as special case: do not add 1 days; see TLG-6074
										}
									} else if (strStartDateTime &gt; strBillCycleTime) {
										BackDateToSet = new Date(strServiceStartDate);
									}
								}
							} else {

								if (strStartDateTime &lt;= strBillCycleTime) {
									//BackDateToSet = new Date(strBillCycleDate);
									BackDateToSet = new Date(strBillCycleTime + 1 * 24 * 60 * 60 * 1000); // adding 1 days for TLG-5528
									if (BackDateToSet.getDate() == 2) {
										BackDateToSet = new Date(strBillCycleTime); // BC01 as special case: do not add 1 days; see TLG-6074
									}
								} else if (strStartDateTime &gt; strBillCycleTime) {
									BackDateToSet = new Date(strServiceStartDate);
								}

							} //end of resume
						}
						//VFTRCBU-29215 - HRODRIGUES - Updated with HH:MM:SS
						SetFieldValue(&quot;Due Date&quot;, (BackDateToSet.getMonth() + 1) + &quot;/&quot; + (BackDateToSet.getDate()) + &quot;/&quot; + (BackDateToSet.getFullYear()) + &quot; &quot; + BackDateToSet.getHours() + &quot;:&quot; + BackDateToSet.getMinutes() + &quot;:&quot; + BackDateToSet.getSeconds());
						SetBackDatePortId(sOrderId, BackDateToSet, ProductPortId, RootOrderItemId, LineItemId);	
						
					}
				}

				if (strActionCode == NewActCode) {
					//DEF-3833
					if (ProductName == &quot;3 Months MI Discount 50%&quot;) {
						SetFieldValue(&quot;Due Date&quot;, strStartDate);
					}
					WriteRecord();
				}
				Record = NextRecord();
			}
		} //End with(OrderBC)

		//VFTRCBU-30728 - Set OrderDueDate with BackDate
		var OrderEntryBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);		
		
		with (OrderEntryBC) {		
			SetViewMode(AllView);
			ActivateField(&quot;VFTRCBU Backdated Order Date&quot;);
			ClearToQuery();
			SetSearchExpr(&quot;[Id] = &apos;&quot; + sOrderId + &quot;&apos;&quot;)
			ExecuteQuery(ForwardBackward);
			
			if (FirstRecord()) {			
				SetFieldValue(&quot;VFTRCBU Backdated Order Date&quot;, (BackDateToSet.getMonth() + 1) + &quot;/&quot; + (BackDateToSet.getDate()) + &quot;/&quot; + (BackDateToSet.getFullYear()) + &quot; &quot; + BackDateToSet.getHours() + &quot;:&quot; + BackDateToSet.getMinutes() + &quot;:&quot; + BackDateToSet.getSeconds());
				WriteRecord();
			}			
		}		
	} //End 	try
	catch (e) {
		throw (e);
	}

	finally {
		
		OrderBC = null;
		OrderEntryBC = null;
		OrderBO = null;
		//		VFBCC = null;
		//		VFBCCBC = null;
		BillingAccountBO = null;
		ComInvoiceBC = null;
		Inputs1 = null;
		Outputs1 = null;
		OutFlags = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="07/03/2016 16:17:19"
			   UPDATED_BY="RLOURENCO"
			   CREATED="02/12/2013 12:57:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CalculateDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CalculateDate(Inputs,Outputs)
{
    var InCycle = Inputs.GetProperty(&quot;InCycle&quot;);
	var OutCycle = &quot;&quot;;
	var LastCutOffDate = &quot;&quot;;													
	var sysdate =  new Date();
	var todayDay = sysdate.getDate(); //Commented for DEF-4128
//	var todayDay =&quot;&quot;;
//	Clib.strftime(todayDay, &apos;%d&apos;, Clib.localtime(Clib.time())); //DEF-4128
	
	if (sysdate.getDate() &gt; InCycle)  // InCycle = 1 defines the case &quot;Last Day of the month&quot;, so todayDay is not greater than InCycle
	{
		LastCutOffDate = new Date(sysdate.getFullYear(),sysdate.getMonth(), InCycle); 
	}
  
  	else if (sysdate.getDate() &lt;= InCycle)
	{
		if (sysdate.getMonth() == 0)
		{
			LastCutOffDate = new Date(sysdate.getFullYear()-1,&quot;11&quot;, InCycle); //TLG-5524
		}
		else
		{
			LastCutOffDate = new Date(sysdate.getFullYear(),sysdate.getMonth()-1, InCycle); 
		}
	}
	Outputs.SetProperty(&quot;OutCycle&quot;,LastCutOffDate);
}"
			   SEQUENCE="4"
			   UPDATED="04/18/2016 12:16:12"
			   UPDATED_BY="ESANTOS"
			   CREATED="02/12/2013 12:57:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckProdBackDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckProdBackDate(ProductGroup,ProductType,ProductSubType,OutFlags)
{
	try
	{
		var ACSBO : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var ACSNIParameter : BusComp = ACSBO.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);
		var Exist = false;
		var AddFlag = &quot;N&quot;;
		var DelFlag = &quot;N&quot;;
		var ModFlag = &quot;N&quot;;
		with(ACSNIParameter)
		{
			SetViewMode(AllView);
			ActivateField(&quot;Condition4&quot;);
			ActivateField(&quot;Condition5&quot;);
			ActivateField(&quot;Condition6&quot;);
			SetSearchExpr(&quot;[Function] = &apos;BACKDATE_PRODUCT&apos; AND [Condition1] = &apos;&quot;+ProductGroup+&quot;&apos; AND [Condition2] = &apos;&quot;+ProductType+&quot;&apos; AND [Condition3] = &apos;&quot;+ProductSubType+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				AddFlag = GetFieldValue(&quot;Condition4&quot;);
				DelFlag = GetFieldValue(&quot;Condition5&quot;);
				ModFlag = GetFieldValue(&quot;Condition6&quot;);
			}
		}	
		OutFlags.SetProperty(&quot;DelFlag&quot;,DelFlag);	
		OutFlags.SetProperty(&quot;AddFlag&quot;,AddFlag);
		OutFlags.SetProperty(&quot;ModFlag&quot;,ModFlag);
	}
	finally
	{
		ACSNIParameter = null;
		ACSBO = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="04/11/2013 11:56:59"
			   UPDATED_BY="SADMIN"
			   CREATED="03/08/2013 18:51:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetOrderBackDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetOrderBackDate(psInputs, psOutputs) { //Function Added on Jira VFTRCBU-31881 - CSANTOS
	try {
		var sOrderId = psInputs.GetProperty(&quot;OrderId&quot;);
		var sBillingAccountId = psInputs.GetProperty(&quot;BillingAccountId&quot;);
		var BillingAccountBO : BusObject = TheApplication().GetBusObject(&quot;Billing Account&quot;);
		var ComInvoiceBC : BusComp = BillingAccountBO.GetBusComp(&quot;Com Invoice Profile&quot;);
		var OrderBO : BusObject = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;); //BO Instance for New Order Line Item
		var OrderBC : BusComp = OrderBO.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;); //Parent BC
		var ResumeBc : BusComp = OrderBO.GetBusComp(&quot;Order Entry - Line Items for IO HP&quot;);

		//Defining Bill Cycle Date
		var strBillCycleDate = new Date();
		var strBillCycle = &quot;&quot;;
		var strBillCycleTime = &quot;&quot;;
		//Declaring &quot;Bill Cycle Date&quot;
		var Inputs1 : PropertySet = TheApplication().NewPropertySet();
		var Outputs1 : PropertySet = TheApplication().NewPropertySet();
		
		with (ComInvoiceBC) {
			SetViewMode(AllView);
			ActivateField(&quot;Bill Cycle&quot;);
			ClearToQuery();
			SetSearchExpr(&quot;[Account Id] = &apos;&quot; + sBillingAccountId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			
			if (FirstRecord()) {	
				var strVFBillCycle : float;
				strBillCycle = GetFieldValue(&quot;Bill Cycle&quot;);
				
				if (strBillCycle != &quot;&quot;) {
					Inputs1.SetProperty(&quot;InCycle&quot;, strBillCycle);
					CalculateDate(Inputs1, Outputs1);
					strBillCycleDate = Outputs1.GetProperty(&quot;OutCycle&quot;);
					
					if (strBillCycleDate != &quot;&quot;) {
						var strDate = new Date(strBillCycleDate);
						strBillCycleTime = strDate.getTime();
					}
				}
			}
		} //End with (OrderBC)
		var BackDateToSet = new Date();
		var OutFlags : PropertySet = TheApplication().NewPropertySet();
		var DeleteActCode = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
		var NewActCode = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
		var ProductGroup = &quot;&quot;;
		var ProductType = &quot;&quot;;
		var ProductSubType = &quot;&quot;;
		var RootOrderItemId = &quot;&quot;;
		var LineItemId = &quot;&quot;;
		var strServiceStartDate = &quot;&quot;;
		var strStartDateTime = &quot;&quot;;
		var strStartDate = &quot;&quot;;
		var strActionCode = &quot;&quot;;
		var InstallDt = &quot;&quot;;
		var integID = &quot;&quot;;
		var createdDate = &quot;&quot;;
		var strcreatedDateTime = &quot;&quot;;
		var ProductName = &quot;&quot;;

		with (OrderBC) {
			SetViewMode(AllView);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;VF Product Type&quot;);
			ActivateField(&quot;VF Product Sub Type&quot;);
			ActivateField(&quot;Display Name&quot;);
			ActivateField(&quot;Service Start Date&quot;);
			ActivateField(&quot;Product Port Id&quot;);
			ActivateField(&quot;Root Order Item Id&quot;);
			ActivateField(&quot;VF Originating Asset Install Date&quot;);
			ActivateField(&quot;Due Date&quot;);
			ActivateField(&quot;Action Code&quot;);		
			ActivateField(&quot;Asset Integration Id&quot;);
			ActivateField(&quot;Order Sub Type&quot;);
			ActivateField(&quot;Created Date&quot;);

			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			var Record = FirstRecord();
			
			while (Record) {
				ProductGroup = GetFieldValue(&quot;VF Product Group&quot;);
				ProductType = GetFieldValue(&quot;VF Product Type&quot;);
				ProductSubType = GetFieldValue(&quot;VF Product Sub Type&quot;);
				RootOrderItemId = GetFieldValue(&quot;Root Order Item Id&quot;);
				LineItemId = GetFieldValue(&quot;Id&quot;);
				strActionCode = GetFieldValue(&quot;Action Code&quot;);
				ProductName = GetFieldValue(&quot;Display Name&quot;);
				//for resume order
				integID = GetFieldValue(&quot;Asset Integration Id&quot;);

				CheckProdBackDate(ProductGroup, ProductType, ProductSubType, OutFlags);
				strStartDate = GetFieldValue(&quot;Service Start Date&quot;);

				if (strActionCode == DeleteActCode) {
					if (OutFlags.GetProperty(&quot;DelFlag&quot;) == &quot;Y&quot; || OutFlags.GetProperty(&quot;ModFlag&quot;) == &quot;Y&quot;) {
						ProductPortId = GetFieldValue(&quot;Product Port Id&quot;);
						strStartDate = GetFieldValue(&quot;Service Start Date&quot;);
						InstallDt = GetFieldValue(&quot;VF Originating Asset Install Date&quot;);
						if (InstallDt != &quot;&quot;) {
							strServiceStartDate = new Date(InstallDt);
							strStartDateTime = strServiceStartDate.getTime();
						} else {
							strServiceStartDate = new Date(strStartDate);
							strStartDateTime = strServiceStartDate.getTime();
						}

						with (ResumeBc) {
							SetViewMode(AllView);
							ActivateField(&quot;Integration Id&quot;);
							ActivateField(&quot;Order Sub Type&quot;);		
							ClearToQuery();
							var searchexpr2 = (&quot;[Asset Integration Id]=&apos;&quot; + integID + &quot;&apos; AND [Action Code]=&apos;Resume&apos;&quot;); //Search for the resume orders
							ResumeBc.SetSearchExpr(searchexpr2);
							ResumeBc.SetSortSpec(&quot;Created(DESCENDING)&quot;); // Get the newest one
							ResumeBc.ExecuteQuery(ForwardOnly);
							var hasOrder = ResumeBc.FirstRecord();
							if (hasOrder) {
								createdDate = GetFieldValue(&quot;Created&quot;);
								var strServiceCreatedDate = new Date(createdDate);
								strcreatedDateTime = strServiceCreatedDate.getTime();
								if (strBillCycleTime &lt;= strcreatedDateTime) {
									BackDateToSet = new Date(strcreatedDateTime + 1 * 1 * 5 * 60 * 1000); //DEF-1709
								} else {
									if (strStartDateTime &lt;= strBillCycleTime) {								
										BackDateToSet = new Date(strBillCycleTime + 1 * 24 * 60 * 60 * 1000); // adding 1 days for TLG-5528
										if (BackDateToSet.getDate() == 2) {
											BackDateToSet = new Date(strBillCycleTime); // BC01 as special case: do not add 1 days; see TLG-6074
										}
									} else if (strStartDateTime &gt; strBillCycleTime) {
										BackDateToSet = new Date(strServiceStartDate);
									}
								}
							} else {

								if (strStartDateTime &lt;= strBillCycleTime) {								
									BackDateToSet = new Date(strBillCycleTime + 1 * 24 * 60 * 60 * 1000); // adding 1 days for TLG-5528
									if (BackDateToSet.getDate() == 2) {
										BackDateToSet = new Date(strBillCycleTime); // BC01 as special case: do not add 1 days; see TLG-6074
									}
								} else if (strStartDateTime &gt; strBillCycleTime) {
									BackDateToSet = new Date(strServiceStartDate);
								}

							} //end of resume
						}					
					}
				}	
				Record = NextRecord();
			}
		} //End with(OrderBC)
	} //End Try
	catch (e) {
		throw (e);
	}

	finally {
		psOutputs.SetProperty(&quot;strBillCycleTime&quot;,strBillCycleTime);
		psOutputs.SetProperty(&quot;BackDateToSet&quot;,BackDateToSet);
		psOutputs.SetProperty(&quot;BillCycleTime&quot;,strDate);
		OrderBC = null;
		OrderBO = null;
		BillingAccountBO = null;
		ComInvoiceBC = null;
		Inputs1 = null;
		Outputs1 = null;
		OutFlags = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="08/05/2016 17:57:10"
			   UPDATED_BY="CSANTOS"
			   CREATED="08/04/2016 14:33:54"
			   CREATED_BY="CSANTOS">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/**************************************************
	NAME: 		 VF Backdated Orders Management
	DESCRIPTION: Business service has been created to manage automatic population of Due Date field at Line Items Level in case of Backdate order
	INPUTS:		 
	RETURNS:	
	AUTHOR:		 
	DATE CREATED:1/21/2013 	
	UPDATES:	 
	**************************************************/
function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if(MethodName == &quot;CalculateBackdated&quot;)
	{
		CalculateBackdated(Inputs, Outputs);
		return(CancelOperation);
	}
	
	if(MethodName == &quot;CalculateDate&quot;)
	{
		CalculateDate(Inputs, Outputs);
		return(CancelOperation);
	}
	
	//CSANTOS - VFTRCBU-31881 --&gt;
	if(MethodName == &quot;GetOrderBackDate&quot;)
	{
		GetOrderBackDate(Inputs, Outputs);
		return(CancelOperation);
	}
	//&lt;-- CSANTOS - VFTRCBU-31881
	
	if(MethodName == &quot;CHECK_BILLCYCLECHANGE_REQUEST&quot;)
	{
		CHECK_BILLCYCLECHANGE_REQUEST(sBillingAccountId, strNewBillCycleDate, DataCOMP, strServiceStartDate);
		return(CancelOperation);
	}
	if(MethodName == &quot;AlignStartEnd&quot;)
	{
		AlignStartEnd(Inputs, Outputs);
		return(CancelOperation);
	}
	return (ContinueOperation);
}"
			   SEQUENCE="8"
			   UPDATED="08/05/2016 17:57:35"
			   UPDATED_BY="CSANTOS"
			   CREATED="02/12/2013 12:57:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetBackDatePortId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetBackDatePortId(sOrderId, BackDateToSet, ProductPortId, RootOrderItemId, LineItemId) {
	try {
		var OrdBO : BusObject = TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var LIBC : BusComp = OrdBO.GetBusComp(&quot;Order Entry - Line Items for IO HP&quot;);
		var Out : PropertySet = TheApplication().NewPropertySet();
		var ProductGroup = &quot;&quot;;
		var ProductType = &quot;&quot;;
		var ProductSubType = &quot;&quot;;
		var DueDate = &quot;&quot;;
		with (LIBC) {
			SetViewMode(AllView);
			ActivateField(&quot;VF Product Group&quot;);
			ActivateField(&quot;VF Product Type&quot;);
			ActivateField(&quot;VF Product Sub Type&quot;);
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos; AND [Id] &lt;&gt; &apos;&quot; + LineItemId + &quot;&apos; AND [Root Order Item Id] = &apos;&quot; + RootOrderItemId + &quot;&apos; AND [Product Port Id] = &apos;&quot; + ProductPortId + &quot;&apos; and [Action Code] = &apos;&quot; + TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;) + &quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if (FirstRecord()) {
				ProductGroup = GetFieldValue(&quot;VF Product Group&quot;);
				ProductType = GetFieldValue(&quot;VF Product Type&quot;);
				ProductSubType = GetFieldValue(&quot;VF Product Sub Type&quot;);
				/*			CheckProdBackDate(ProductGroup,ProductType,ProductSubType,Out);
				if (Out.GetProperty(&quot;AddFlag&quot;) == &quot;Y&quot;){	*/
				DueDate = new Date(BackDateToSet);
				//VFTRCBU-29215 - HRODRIGUES - Updated with HH:MM:SS
				SetFieldValue(&quot;Due Date&quot;, (DueDate.getMonth() + 1) + &quot;/&quot; + (DueDate.getDate()) + &quot;/&quot; + (DueDate.getFullYear()) + &quot; &quot; + DueDate.getHours() + &quot;:&quot; + DueDate.getMinutes() + &quot;:&quot; + DueDate.getSeconds());
				WriteRecord();
				//			}
			}
		}
	}
	finally {
		Out = null;
		LIBC = null;
		OrdBO = null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="08/04/2016 14:33:54"
			   UPDATED_BY="CSANTOS"
			   CREATED="03/08/2013 18:51:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



