<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="08/11/2017 16:02:15"
   UPDATED_BY="SADMIN"
   CREATED="08/11/2017 11:53:44"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   COMMENTS="WA#39  DG - 3/7/14"
	   INACTIVE="N"
	   LANGUAGE_LOCKED="ENU"
	   LOCKED="Y"
	   LOCKED_DATE="12/19/2017 23:32:54"
	   NAME="TELCO Order Management"
	   UI_FREEZE="N"
	   LOCKED_BY_NAME="IBM_RCATITA"
	   UPDATED="02/27/2018 12:32:01"
	   UPDATED_BY="IBM_RCATITA"
	   CREATED="08/14/2014 20:13:30"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="Y"
		   CLASS="CSSService"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="TELCO Order Management Utilities"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="02/27/2018 10:06:59"
		   UPDATED_BY="IBM_RCATITA"
		   CREATED="09/01/2014 19:24:30"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="AddOrderBusinessUnit"
			   UPDATED="05/09/2016 12:23:50"
			   UPDATED_BY="SADMIN"
			   CREATED="05/09/2016 12:23:50"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GoToView"
			   UPDATED="05/09/2016 12:23:51"
			   UPDATED_BY="SADMIN"
			   CREATED="08/02/2015 21:18:42"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Business Component"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/09/2016 12:23:51"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:23:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Business Object"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/09/2016 12:23:51"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:23:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Object Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/09/2016 12:23:51"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:23:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="View Name"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/09/2016 12:23:51"
				   UPDATED_BY="SADMIN"
				   CREATED="05/09/2016 12:23:51"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   COMMENTS="SANTOSP - VFTRCBU WA#32 D2"
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="InsertDocumentsPRMSubDealer"
			   UPDATED="08/02/2015 21:18:42"
			   UPDATED_BY="SADMIN"
			   CREATED="08/02/2015 21:18:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="MNPUpdateOrderRootItemsByTA"
			   UPDATED="03/13/2015 01:23:28"
			   UPDATED_BY="SADMIN"
			   CREATED="03/02/2015 21:25:22"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Code"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/02/2015 21:25:22"
				   UPDATED_BY="SADMIN"
				   CREATED="03/02/2015 21:25:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Error Message"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/02/2015 21:25:22"
				   UPDATED_BY="SADMIN"
				   CREATED="03/02/2015 21:25:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="ListOfRootItem"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input"
				   UPDATED="03/02/2015 21:25:22"
				   UPDATED_BY="SADMIN"
				   CREATED="03/02/2015 21:25:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/02/2015 21:25:22"
				   UPDATED_BY="SADMIN"
				   CREATED="03/02/2015 21:25:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="PortId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/13/2015 01:23:28"
				   UPDATED_BY="SADMIN"
				   CREATED="03/13/2015 01:23:28"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UserHasRole"
			   UPDATED="10/24/2014 12:21:56"
			   UPDATED_BY="SADMIN"
			   CREATED="10/24/2014 12:21:56"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="hasRole"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="10/24/2014 12:21:56"
				   UPDATED_BY="SADMIN"
				   CREATED="10/24/2014 12:21:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="roles"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="10/24/2014 12:21:56"
				   UPDATED_BY="SADMIN"
				   CREATED="10/24/2014 12:21:56"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="(declarations)"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="var sActionAdd                         = &quot;100&quot;;
var sActionModifyMSISDN                = &quot;102&quot;;
var sActionModifyIMSI                  = &quot;103&quot;;
var sActionMNPPortIn                   = &quot;106&quot;;
var sActionTypeVPN                     = &quot;110&quot;;
var sActionModifyOptions               = &quot;111&quot;;
var sActionSuspendCredit               = &quot;114&quot;;
var sActionSuspendFraud                = &quot;115&quot;;
var sActionSuspendVoluntary            = &quot;116&quot;;
var sActionResumeCredit                = &quot;117&quot;;
var sActionResumeFraud                 = &quot;118&quot;;
var sActionResumeVoluntary             = &quot;119&quot;;
var sActionDeactivateCredit            = &quot;121&quot;;
var sActionDeactivateFraud             = &quot;122&quot;;
var sActionDeactivateVoluntary         = &quot;123&quot;;
var sActionTransferSameCustomer        = &quot;127&quot;;
var sActionTransferOtherCustomer       = &quot;128&quot;;
var sActionSuspendDunning              = &quot;129&quot;;
var sActionResumeDunning               = &quot;130&quot;;
var sActionDeactivateBackwardMigration = &quot;131&quot;;
var sActionBackwardMigration 		   = &quot;131&quot;; //WA#13 RPIRES
var sActionResumeMissingDocument       = &quot;132&quot;;
var sActionSuspendMissingDocument      = &quot;133&quot;;
var sActionForwardMigration			   = &quot;137&quot;; //WA#13 RPIRES
var sPartNumMobileLine                 = &quot;1000&quot;;
var sPartNumMPBXGroup                  = &quot;1600&quot;;
var sPartNumMPBXService                = &quot;1601&quot;;
var sPartNumVPNGroup                   = &quot;3000&quot;;
var sPartNumVPN                        = &quot;3001&quot;;
var sPartNumSVBGroup                   = &quot;4000&quot;;
var sPartNumSVBVoice                   = &quot;4010&quot;;
var sPartNumSVBRoamingVoiceGrp         = &quot;7000&quot;;
var sPartNumSVBRoamingVoice            = &quot;7010&quot;;
var sPartNumSVBRoamingDataGrp          = &quot;8000&quot;;
var sPartNumSVBRoamingData             = &quot;8010&quot;;
var sPartNumSVBSMSGrp                  = &quot;9000&quot;;
var sPartNumSVBSMS                     = &quot;9010&quot;;
var sPartNumAccessNumber               = &quot;9080&quot;;
var sPartNumMobileSignature            = &quot;9069&quot;;
var sPartNumDataSVBGrp                 = &quot;10000&quot;; //JMARQUES
var sPartNumMobileSignatureConsumer    = &quot;70249&quot;; //VFTRCBU WA#43 HRODRIGUES
var sPartNumSVBData                    = &quot;10010&quot;
var sPartNumMTT                        = &quot;14502&quot;;
var sParNumHandset                     = &quot;16999&quot;;
var sPartNumMTTGroup                   = &quot;21400&quot;;
var sParNumIsyerimCebimde              = &quot;25000&quot;;
var sPartNumAmalfiDiscount             = &quot;26002&quot;;
var sPartNumM2MOffer                   = &quot;40000&quot;;
var sPartNumGSMConsumer                = &quot;70000&quot;;
var sAccounStatusAquired               = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_STATUS&quot;, &quot;100&quot;);
var sActionTypeValAdd                  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;100&quot;);
var sActionTypeValModifyMSISDN         = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;102&quot;);
var sActionTypeValModifyIMSI           = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;103&quot;);
var sActionTypeValMNPPortIn            = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;106&quot;);
var sActionTypeValVPN                  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;110&quot;);
var sActionTypeValModifyOptions        = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;111&quot;);
var sActionTypeValSuspCredit           = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;114&quot;);
var sActionTypeValDeaTransferSame      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;125&quot;);
var sActionTypeValMNPOut               = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;126&quot;);
var sActionTypeValActTransferSame      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;127&quot;);
var sActionTypeValBackDated            = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;134&quot;);
var sActionTypeValGroup                = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;135&quot;);
var sActionTypeTransferWithin		   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;127&quot;); //WA#13 RPIRES
var sActionTypeTransferCross		   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;128&quot;); //WA#13 RPIRES
var sActionTypeTransferBackMig		   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;131&quot;); //WA#13 RPIRES
var sActionTypeTransferFwdMig		   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ORDER_SUB_TYPE&quot;, &quot;137&quot;); //WA#13 RPIRES
var sCustomerTypeConsumer              = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACCOUNT_TYPE&quot;, &quot;102&quot;);
var sAssetStatusActive                 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);
var sAssetStatusInactive               = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Inactive&quot;);
var sOrderTypeAddNewService            = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_TYPE&quot;, &quot;Add New Service&quot;);
var sOrderTypeDisconnect               = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_TYPE&quot;, &quot;Disconnect&quot;);
var sOrderStatusCancelled              = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Cancelled&quot;);
var sOrderStatusComplete               = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Complete&quot;);
var sOrderStatusPartiallyCompleted     = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Partially Completed&quot;);
var sOrderStatusPending                = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Pending&quot;);
var sOrderStatusParked                 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Parked&quot;);
var sOrderStatusRejected               = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;FS_ORDER_STATUS&quot;, &quot;Rejected&quot;);
var sActionReasonLostStolen            = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;201&quot;);
var sActionReasonModifyOptions         = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;232&quot;);
var sActionReasonLimitedCancellation   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;ACS_ORDER_REASON&quot;, &quot;1421&quot;)
var sItemActionNew                     = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;New&quot;);
var sItemActionDeleted                 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Deleted&quot;);
var sItemActionModified                = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Modified&quot;);
var sItemActionSuspend                 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;DELTA_ACTION_CODE&quot;, &quot;Suspend&quot;);
var sSRStatusOpen                      = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Open&quot;);
var sSRStatusClosed	                   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_STATUS&quot;, &quot;Closed&quot;);
var sSRCategoryMNPOut                  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_SR_CATEGORY&quot;, &quot;MNP OUT&quot;);
var sProductGroupCamp                  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP&quot;);
var sProductGroupCampContainer         = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP CONTAINER&quot;);
var sProductGroupCampPromo             = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;CAMP PROMO&quot;);
var sProductGroupSvb                   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_GROUP&quot;, &quot;SVB&quot;);
var sProductTypeMobile                 = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;SUBSCRIBER&quot;);
var sProductTypeMPBX                   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;MPBX&quot;);
var sProductTypeAccNumber              = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;ACCESS&quot;);
var sProductTypeHandsetPromo           = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;HANDSET PROMO&quot;);
var sProductTypePSTN                   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;PSTN&quot;);
var sProductTypeGroupChild             = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;GROUP_CHILD&quot;);
var sProductTypeMinspend               = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;MINSPEND&quot;);
var sProductTypeHandset                = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;HANDSET&quot;)
var sProductTypeHandsetContainer       = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_TYPE&quot;, &quot;HANDSET CONTAINER&quot;);
var sProductSubTypeAmalfi              = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;AMALFI&quot;);
var sProductSubTypeKafein              = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;KAFEIN&quot;);
var sProductSubTypeMinspendBA          = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;MINSPEND_BA&quot;);
var sProductSubTypeMinspendLine        = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PROD_CAT_SUB_TYPE&quot;, &quot;MINSPEND_LINE&quot;);
//ACAMBAS: VFTRCBU-22339 - Start
//var sSuspendFrozenStatus        	   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_FINAL_STATUS&quot;, &quot;Frozen&quot;);	//ACAMBAS: VFTRCBU-22339
//var sSuspendClosedStatus         	   = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_FINAL_STATUS&quot;, &quot;Closed&quot;);	//ACAMBAS: VFTRCBU-22339
//ACAMBAS: VFTRCBU-22339 - End"
			   SEQUENCE="1"
			   UPDATED="02/05/2016 08:43:25"
			   UPDATED_BY="SADMIN"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="AddOrderBusinessUnit"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function AddOrderBusinessUnit(sOrganization, sOrderId, psOutputs)
{
	var sErrorCode      = &quot;0&quot;;
	var sErrorText      = &quot;&quot;;
	var sOrganizationId = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,      sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,   sErrorText);
		psOutputs.SetProperty(&quot;Organization Id&quot;, sOrganizationId);

		var boOrder	       : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Simple)&quot;);
		var bcOrganization : BusComp   = boOrder.GetBusComp(&quot;Organization&quot;);
		var bcBusinessUnit : BusComp   = boOrder.GetBusComp(&quot;Order Business Unit&quot;);

		if (sOrganization == null || sOrganization == &quot;&quot; ||
			sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcOrganization.SetViewMode(AllView);
		bcOrganization.ClearToQuery();
		bcOrganization.ActivateField(&quot;Name&quot;);
		bcOrganization.SetSearchSpec(&quot;Name&quot;, sOrganization);
		bcOrganization.ExecuteQuery(ForwardOnly);

		if (!bcOrganization.FirstRecord())
		{
			return;
		}

		sOrganizationId = bcOrganization.GetFieldValue(&quot;Id&quot;);
		
		bcBusinessUnit.SetViewMode(AllView);
		bcBusinessUnit.ClearToQuery();
		bcBusinessUnit.ActivateField(&quot;Organization Id&quot;);
		bcBusinessUnit.SetSearchSpec(&quot;Order Id&quot;,         sOrderId);
		bcBusinessUnit.SetSearchSpec(&quot;Business Unit Id&quot;, sOrganizationId);
		bcBusinessUnit.ExecuteQuery(ForwardOnly);

		if (bcBusinessUnit.FirstRecord())
		{
			return;
		}

		bcBusinessUnit.NewRecord(NewAfter);
		bcBusinessUnit.SetFieldValue(&quot;Order Id&quot;,         sOrderId);
		bcBusinessUnit.SetFieldValue(&quot;Business Unit Id&quot;, sOrganizationId);
		bcBusinessUnit.WriteRecord();
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,      sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,   sErrorText);
		psOutputs.SetProperty(&quot;Organization Id&quot;, sOrganizationId);

		bcBusinessUnit = null;
		bcOrganization = null;
		boOrder	       = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="04/06/2015 21:36:51"
			   UPDATED_BY="SADMIN"
			   CREATED="09/22/2014 23:00:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BADedicatedUpdate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function BADedicatedUpdate, &quot;ACS Asset Management&quot; Business Service
function BADedicatedUpdate(sBillAccountId, sOrderType)//CR377 DEV3 Retrofit
{
	try
	{
		var boAccount : BusObject = TheApplication().GetBusObject(&quot;Billing Account&quot;);
		var bcAccount : BusComp   = boAccount.GetBusComp(&quot;Billing Account&quot;);

		var sM2MActivation = &quot;M2M - bundle activation&quot;;
		var sM2MActive     = &quot;M2M - bundle already active&quot;;

		if (sBillAccountId == null || sBillAccountId == &quot;&quot;)
		{
			return;
		}

      	bcAccount.SetViewMode(AllView);                                                                               
        bcAccount.ClearToQuery();
      	bcAccount.ActivateField(&quot;VF Bulk SMS&quot;);
        bcAccount.SetSearchSpec(&quot;Id&quot;, sBillAccountId);
        bcAccount.ExecuteQuery(ForwardOnly);

        if (bcAccount.FirstRecord())
        {
        	if (sOrderType == sOrderTypeDisconnect)
        	{
        		bcAccount.SetFieldValue(&quot;VF Bulk SMS&quot;, sM2MActivation);
        	}
        	else
        	{
           		bcAccount.SetFieldValue(&quot;VF Bulk SMS&quot;, sM2MActive);
           	}

			bcAccount.WriteRecord();
		}
 	}
 	finally
 	{
	 	bcAccount 	= null;
	 	boAccount 	= null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="01/23/2015 01:14:58"
			   UPDATED_BY="SADMIN"
			   CREATED="01/23/2015 01:14:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BrowserLoadMetropolis"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BrowserLoadMetropolis(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var bsNavigation    : Service     = null;
		var psNavigationIn  : PropertySet = null;
		var psNavigationOut : PropertySet = null;

 		if (TheApplication().GetProfileAttr(&quot;MetropolisFlag&quot;) == &quot;Y&quot;)
 		{
			TheApplication().SetProfileAttr(&quot;MetropolisFlag&quot;, &quot;N&quot;);

			bsNavigation    = TheApplication().GetService(&quot;FINS Teller UI Navigation&quot;);
			psNavigationIn  = TheApplication().NewPropertySet();
			psNavigationOut = TheApplication().NewPropertySet();

			psNavigationIn.SetProperty(&quot;Refresh All&quot;, &quot;Y&quot;);

			bsNavigation.InvokeMethod(&quot;RefreshCurrentApplet&quot;, psNavigationIn, psNavigationOut);
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		psNavigationOut = null;
		psNavigationIn  = null;
		bsNavigation    = null;
	}
}"
			   SEQUENCE="4"
			   UPDATED="04/06/2015 21:36:51"
			   UPDATED_BY="SADMIN"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BrowserPreCustomerPortal"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BrowserPreCustomerPortal(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;
	var sQuestion  = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,       sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,    sErrorText);
		psOutputs.SetProperty(&quot;Question Message&quot;, sQuestion);

		var boActive : BusObject = null;
		var bcOrder  : BusComp   = null;

		var sActiveViewName = &quot;&quot;;
		var sOrderStatus    = &quot;&quot;;
		var sStatusPending  = &quot;&quot;;

		sActiveViewName = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);

		if (sActiveViewName == &quot;&quot; || sActiveViewName == null) return;

		boActive = TheApplication().ActiveBusObject();

		if (boActive == null) return;

		bcOrder = boActive.GetBusComp(&quot;Order Entry - Orders&quot;);

		if (bcOrder == null) return;

		sOrderStatus = bcOrder.GetFieldValue(&quot;Status&quot;);

		if (sOrderStatus == sOrderStatusPending)
		{
			sQuestion = TheApplication().LookupMessage(&quot;ACS Messages&quot;, &quot;071&quot;);
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,       sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,    sErrorText);
		psOutputs.SetProperty(&quot;Question Message&quot;, sQuestion);

		bcOrder  = null;
		boActive = null;
	}
}"
			   SEQUENCE="5"
			   UPDATED="04/06/2015 21:36:51"
			   UPDATED_BY="SADMIN"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BrowserPreEditPopup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BrowserPreEditPopup(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boActive        : BusObject   = null;
		var bcOrderItem     : BusComp     = null;
		var bsUtilities     : Service     = null;
		var psUtilitiesIn   : PropertySet = null;
		var psUtilitiesOut  : PropertySet = null;
		var sActiveViewName = &quot;&quot;;
		var sICCID          = &quot;&quot;;
		var sMSISDN         = &quot;&quot;;
		var sActionType     = &quot;&quot;;

		sActiveViewName = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);

		if (sActiveViewName == &quot;&quot; || sActiveViewName == null) return;

		boActive = TheApplication().ActiveBusObject();

		if (boActive == null) return;

		bcOrderItem = boActive.GetBusComp(&quot;Order Entry - Line Items&quot;);

		if (bcOrderItem == null) return;

		sICCID      = bcOrderItem.GetFieldValue(&quot;ICCID&quot;);
		sMSISDN     = bcOrderItem.GetFieldValue(&quot;MSISDN&quot;);
		sActionType = bcOrderItem.GetFieldValue(&quot;TELCO Root Item Action Type&quot;);

		bsUtilities    = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		psUtilitiesIn  = TheApplication().NewPropertySet();
		psUtilitiesOut = TheApplication().NewPropertySet();

		psUtilitiesIn.SetProperty(&quot;VF ICCB ICCID&quot;,   sICCID);
		psUtilitiesIn.SetProperty(&quot;VF ICCB MSISDN&quot;,  sMSISDN);
		psUtilitiesIn.SetProperty(&quot;VF ICCB SubType&quot;, sActionType);

		bsUtilities.InvokeMethod(&quot;SetProfileAttr&quot;, psUtilitiesIn, psUtilitiesOut);
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;
		bcOrderItem    = null;
		boActive       = null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="04/06/2015 21:36:51"
			   UPDATED_BY="SADMIN"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BrowserPreModifyOptions"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BrowserPreModifyOptions(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;
	var sAlertText = &quot;&quot;;
	var sQuestion  = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,       sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,    sErrorText);
		psOutputs.SetProperty(&quot;Alert Message&quot;,    sAlertText);
		psOutputs.SetProperty(&quot;Question Message&quot;, sQuestion);

		var boActive        : BusObject   = null;
		var bcAsset         : BusComp     = null;
		var bsOperations    : Service     = null;
		var psOperationsIn  : PropertySet = null;
		var psOperationsOut : PropertySet = null;
		var bsManager       : Service     = null;
		var psManagerIn     : PropertySet = null;
		var psManagerOut    : PropertySet = null;

		var sActiveViewName   = &quot;&quot;;
		var sActionTypeLIC    = &quot;&quot;;
		var sProductPartNum   = &quot;&quot;;
		var sBillingAccountId = &quot;&quot;;
		var sOwnerAccountId   = &quot;&quot;;
		var sMSISDN           = &quot;&quot;;
		var sMessageCode      = &quot;&quot;;
		var sAssetId          = &quot;&quot;;

		sActiveViewName = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);

		if (sActiveViewName == &quot;&quot; || sActiveViewName == null) return;

		boActive = TheApplication().ActiveBusObject();

		if (boActive == null) return;

		bcAsset = boActive.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);

		if (bcAsset == null) return;

		sActionTypeLIC    = bcAsset.GetFieldValue(&quot;TELCO Picked Action Type LIC&quot;);
		sProductPartNum   = bcAsset.GetFieldValue(&quot;Product Part Number&quot;);			
		sBillingAccountId = bcAsset.GetFieldValue(&quot;Billing Account Id&quot;);
		sOwnerAccountId   = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);
		sMSISDN           = bcAsset.GetFieldValue(&quot;VF MSISDN&quot;);
		sAssetId          = bcAsset.GetFieldValue(&quot;Id&quot;);

		if (sActionTypeLIC == sActionDeactivateBackwardMigration)
		{
			sAlertText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R244_8&quot;);
			return;
		}

		if (sActionTypeLIC == sActionDeactivateVoluntary &amp;&amp; sProductPartNum == sPartNumSVBGroup) 
    	{
			bsOperations    = TheApplication().GetService(&quot;ACS NI General Operations&quot;);
			psOperationsIn  = TheApplication().NewPropertySet();
			psOperationsOut = TheApplication().NewPropertySet();
    		
			psOperationsIn.SetProperty(&quot;BillingAccountId&quot;, sBillingAccountId);

			bsOperations.InvokeMethod(&quot;checkSVBDiscount&quot;, psOperationsIn, psOperationsOut);
    		    
			if (psOperationsOut.GetProperty(&quot;Res&quot;) == &quot;KO&quot;)
			{
				sQuestion = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;219&quot;);
				return;
			}
		}

		if (sActionTypeLIC == &quot;eSalesDisconnectProdSvc&quot; || sActionTypeLIC == sActionModifyMSISDN) 
    	{
			bsOperations    = TheApplication().GetService(&quot;ACS NI General Operations&quot;);
			psOperationsIn  = TheApplication().NewPropertySet();
			psOperationsOut = TheApplication().NewPropertySet();

			psOperationsIn.SetProperty(&quot;Owner Account Id&quot;, sOwnerAccountId);
			psOperationsIn.SetProperty(&quot;VF MSISDN&quot;,        sMSISDN);
    		 
			bsOperations.InvokeMethod(&quot;checkVPNGroup&quot;, psOperationsIn, psOperationsOut);

			if (psOperationsOut.GetProperty(&quot;Result&quot;) == true || psOperationsOut.GetProperty(&quot;Result&quot;) == &quot;true&quot;)
			{
				if (sActionTypeLIC == &quot;eSalesDisconnectProdSvc&quot;) 
					sMessageCode = &quot;065&quot;;
				else if (sActionTypeLIC == &quot;eSalesModifyProdSvcMsisdn&quot;)
					sMessageCode = &quot;112&quot;;

				sQuestion = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sMessageCode);
				return;
			}
		}

		if (sActionTypeLIC == &quot;SITransferWith&quot;)
		{
			bsManager    = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
			psManagerIn  = TheApplication().NewPropertySet();
			psManagerOut = TheApplication().NewPropertySet();

			psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Data Sharing Check Transfer Order Workflow&quot;);
			psManagerIn.SetProperty(&quot;Object Id&quot;,   sAssetId);

			bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut); 

			sQuestion = psManagerOut.GetProperty(&quot;Error Message&quot;);
			return;
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,       sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,    sErrorText);
		psOutputs.SetProperty(&quot;Alert Message&quot;,    sAlertText);
		psOutputs.SetProperty(&quot;Question Message&quot;, sQuestion);

		psManagerOut    = null;
		psManagerIn     = null;
		bsManager       = null;
		psOperationsOut = null;
		psOperationsIn  = null;
		bsOperations    = null;
		bcAsset         = null;
		boActive        = null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="04/06/2015 21:36:51"
			   UPDATED_BY="SADMIN"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BrowserPrePostChanges"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BrowserPrePostChanges(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;
	var sQuestion  = &quot;&quot;;
	var sOldMSISDN = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,       sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,    sErrorText);
		psOutputs.SetProperty(&quot;Question Message&quot;, sQuestion);
		psOutputs.SetProperty(&quot;Old MSISDN&quot;,       sOldMSISDN);

		var boActive    : BusObject = null;
		var bcOrderItem : BusComp   = null;

		var sActiveViewName = &quot;&quot;;
		var sActionType     = &quot;&quot;;
		var sNewMSISDN      = &quot;&quot;;

		sActiveViewName = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);

		if (sActiveViewName == &quot;&quot; || sActiveViewName == null) return;

		boActive = TheApplication().ActiveBusObject();

		if (boActive == null) return;

		bcOrderItem = boActive.GetBusComp(&quot;Order Entry - Line Items&quot;);

		if (bcOrderItem == null) return;

		sActionType = bcOrderItem.GetFieldValue(&quot;TELCO Root Item Action Type&quot;);

		if (sActionType == null || sActionType == &quot;&quot; || sActionType != sActionModifyMSISDN)
		{
			return;
		} 

		sOldMSISDN = bcOrderItem.GetFieldValue(&quot;Previous Service Id&quot;);
		sNewMSISDN = bcOrderItem.GetFieldValue(&quot;MSISDN&quot;);

		if (sOldMSISDN == sNewMSISDN) return;

		sQuestion = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;240&quot;);
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,       sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,    sErrorText);
		psOutputs.SetProperty(&quot;Question Message&quot;, sQuestion);
		psOutputs.SetProperty(&quot;Old MSISDN&quot;,       sOldMSISDN);

		bcOrderItem     = null;
		boActive        = null;
	}
}"
			   SEQUENCE="8"
			   UPDATED="04/06/2015 21:36:51"
			   UPDATED_BY="SADMIN"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="BrowserSetProfileAttribute"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function BrowserSetProfileAttribute(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var sAttribName  = &quot;&quot;;
		var sAttribValue = &quot;&quot;;

		sAttribName = psInputs.GetFirstProperty();

		while (sAttribName != &quot;&quot;)
		{
			sAttribValue = psInputs.GetProperty(sAttribName);

			TheApplication().SetProfileAttr(sAttribName, sAttribValue);

			sAttribName = psInputs.GetNextProperty();
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
	}
}"
			   SEQUENCE="9"
			   UPDATED="01/23/2015 01:14:59"
			   UPDATED_BY="SADMIN"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CallCheckMPBX_WF"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CallCheckMPBX_WF(sOwnerAccountId, sProductPartNum, sAssetIntegId, sRootAssetId)
{
	try	
	{
		var boAsset         : BusObject   = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset         : BusComp     = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var bcAssetXA       : BusComp     = boAsset.GetBusComp(&quot;TELCO Asset XA - Simple&quot;);
		var psAccessNumMPBX : PropertySet = TheApplication().NewPropertySet();

		var sObjectId         = &quot;&quot;;
		var sAccessNumber     = &quot;&quot;;
		var sAccessNumberServ = &quot;&quot;;

		if (sProductPartNum == sPartNumMPBXService) //FC: VFTRCBU-13440
		{
			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.SetSearchSpec(&quot;Root Asset Id&quot;,       sRootAssetId);
			bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
			bcAsset.SetSearchSpec(&quot;Owner Account Id&quot;,    sOwnerAccountId);
			bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sPartNumAccessNumber); //FC: VFTRCBU-13440
			bcAsset.ExecuteQuery(ForwardOnly);	

			if (!bcAsset.FirstRecord())
			{
				return &quot;OK&quot;;
			}

			do
			{
				sObjectId = bcAsset.GetFieldValue(&quot;Id&quot;);

				bcAssetXA.SetViewMode(AllView);
				bcAssetXA.ClearToQuery();
				bcAssetXA.ActivateField(&quot;Value&quot;);
				bcAssetXA.SetSearchSpec(&quot;Object Id&quot;, sObjectId);
				bcAssetXA.SetSearchSpec(&quot;Name&quot;,      &quot;Access Number&quot;);
				bcAssetXA.ExecuteQuery(ForwardOnly);

				if (!bcAssetXA.FirstRecord())
				{
					return &quot;OK&quot;;
				}

				do
				{
					sAccessNumber = bcAssetXA.GetFieldValue(&quot;Value&quot;);
					psAccessNumMPBX.SetProperty(sAccessNumber, sAccessNumber);
				}
				while (bcAssetXA.NextRecord());
			}
			while (bcAsset.NextRecord());

			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
			bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sProductPartNum);
			bcAsset.SetSearchSpec(&quot;Owner Account Id&quot;,    sOwnerAccountId);
			bcAsset.ExecuteQuery(ForwardOnly);

			if (!bcAsset.FirstRecord())
			{
				return &quot;OK&quot;;
			}

			do
			{
				sObjectId = bcAsset.GetFieldValue(&quot;Id&quot;);

				bcAssetXA.SetViewMode(AllView);
				bcAssetXA.ClearToQuery();
				bcAssetXA.ActivateField(&quot;Value&quot;);
				bcAssetXA.SetSearchSpec(&quot;Object Id&quot;, sObjectId);
				bcAssetXA.SetSearchSpec(&quot;Name&quot;,      &quot;Access Number&quot;);
				bcAssetXA.ExecuteQuery(ForwardOnly);

				if (!bcAssetXA.FirstRecord())
				{
					return &quot;OK&quot;;
				}

				do
				{
					sAccessNumberServ = bcAssetXA.GetFieldValue(&quot;Value&quot;);

					if (sAccessNumberServ == psAccessNumMPBX.GetProperty(sAccessNumberServ))
					{
						return &quot;KO&quot;;
					}
				}
				while (bcAssetXA.NextRecord());
			}
			while (bcAsset.NextRecord());
		}
		else
		{
			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.SetSearchSpec(&quot;VF Member Asset Id&quot;,  sAssetIntegId);
			bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
			bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sProductPartNum);
			bcAsset.SetSearchSpec(&quot;Owner Account Id&quot;,    sOwnerAccountId);
			bcAsset.ExecuteQuery(ForwardOnly);

			if (bcAsset.FirstRecord())
			{
				return &quot;KO&quot;;
			}
	   }

	    return &quot;OK&quot;;  
	}
 	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		psAccessNumMPBX = null;
		bcAssetXA = null;
		bcAsset   = null;
		boAsset   = null;	
	}
}"
			   SEQUENCE="10"
			   UPDATED="01/18/2018 09:38:02"
			   UPDATED_BY="1-FYSRA2I"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckActiveCampaign"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckActiveCampaign(sAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boOrder.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sSearchExpr = &quot;&quot;;
		var sPromInstId = &quot;&quot;;

		if (sAssetId == null || sAssetId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Root Asset Id] = &apos;&quot; + sAssetId +
					  &quot;&apos; AND [Status] = &apos;&quot; + sAssetStatusActive +
					  &quot;&apos; AND [Product Part Number] = &apos;&quot; + sParNumHandset + &quot;&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			sErrorCode = &quot;R142_355&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VFTRCBU_HANDSET_DEACTIVATION&quot;);
			return;
		}

		sSearchExpr = &quot;[Root Asset Id] = &apos;&quot; + sAssetId +
					  &quot;&apos; AND [Status] = &apos;&quot; + sAssetStatusActive +
					  &quot;&apos; AND [VF Product Type] = &apos;&quot; + sProductTypeHandsetPromo + &quot;&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			sErrorCode = &quot;R142_355&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VFTRCBU_HANDSET_DEACTIVATION&quot;);
			return;
		}

		sSearchExpr = &quot;[Root Asset Id] = &apos;&quot; + sAssetId +
					  &quot;&apos; AND [Status] = &apos;&quot; + sAssetStatusActive +
					  &quot;&apos; AND [Prod Prom Instance Id] IS NOT NULL&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sPromInstId = bcAsset.GetFieldValue(&quot;Prod Prom Instance Id&quot;);

		sSearchExpr = &quot;[Integration Id] = &apos;&quot; + sPromInstId +
					  &quot;&apos; AND [Status] = &apos;&quot; + sAssetStatusActive +
					  &quot;&apos; AND [VF Product Type] = &apos;&quot; + sProductTypeHandsetPromo + &quot;&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			sErrorCode = &quot;R142_355&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VFTRCBU_HANDSET_DEACTIVATION&quot;);
			return;
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAsset = null;
		boOrder = null;
	}
}"
			   SEQUENCE="13"
			   UPDATED="07/28/2016 16:31:49"
			   UPDATED_BY="SADMIN"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckAvailableReason"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckAvailableReason(sAssetId, sActionTypeLIC, sMessageCategory, sFinalError, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boLOV  	: BusObject = null;
		var bcLOV   : BusComp   = null;
		var boAsset : BusObject = null;
		var bcAsset : BusComp   = null;
		var boItem  : BusObject = null;
		var bcItem  : BusComp   = null;

		var sAssetIntegId    = &quot;&quot;;
		var sActionTypeActor = &quot;&quot;;
  		var sFraudStatus     = &quot;&quot;;
		var sCustomerStatus  = &quot;&quot;;
		var sCreditStatus 	 = &quot;&quot;;
		var sDunningStatus 	 = &quot;&quot;;
		//var sFinalStatus	 = &quot;&quot;; //ACAMBAS: VFTRCBU-22339
		var sDocumentStatus  = &quot;&quot;;
		var sCustomerType    = &quot;&quot;;
		var sCustomerTypeLIC = &quot;&quot;;
		var sActorStatus     = &quot;&quot;;
		var sMSISDN          = &quot;&quot;;
		var sItemSearchExpr  = &quot;&quot;;
		var sWithReason      = &quot;&quot;;
		var bHasParked       = false;
		var sSourceSystem 	 = &quot;&quot;; //DEF-11145
		var sForbidden 		 = &quot;&quot;; //DEF-11145
		
		if (sAssetId == null || sAssetId == &quot;&quot;)
		{
			return;
		}

		if (sActionTypeLIC == null || sActionTypeLIC == &quot;&quot;)
		{
			return;
		}

		boLOV = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		bcLOV = boLOV.GetBusComp(&quot;List Of Values&quot;);

		bcLOV.SetViewMode(AllView);
		bcLOV.ClearToQuery();
		bcLOV.ActivateField(&quot;High&quot;);
		bcLOV.SetSearchSpec(&quot;Type&quot;,   &quot;VF_SUBTYPE_ACTOR&quot;);
		bcLOV.SetSearchSpec(&quot;Name&quot;,   sActionTypeLIC);
		bcLOV.SetSearchSpec(&quot;Active&quot;, &quot;Y&quot;);
		bcLOV.ExecuteQuery(ForwardOnly);

		if (!bcLOV.FirstRecord())
		{
			return;
		}

		sActionTypeActor = bcLOV.GetFieldValue(&quot;High&quot;);

		boAsset = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;); 
		bcAsset = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;VF Customer Status&quot;);
		bcAsset.ActivateField(&quot;VF Fraud Status&quot;);
		bcAsset.ActivateField(&quot;VF Credit Status&quot;);
		bcAsset.ActivateField(&quot;VF Dunning Status&quot;);
		//bcAsset.ActivateField(&quot;VF Final Status&quot;); 	//ACAMBAS: VFTRCBU-22339
		bcAsset.ActivateField(&quot;VF Document Missing Status&quot;);
		bcAsset.ActivateField(&quot;Owner Account Type&quot;);
		bcAsset.ActivateField(&quot;Owner Account Type LIC&quot;);
		bcAsset.ActivateField(&quot;VF MSISDN&quot;);
		bcAsset.SetSearchSpec(&quot;Id&quot;, sAssetId);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord ())
		{
			return;
		}

		sAssetIntegId    = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
		sFraudStatus     = bcAsset.GetFieldValue(&quot;VF Fraud Status&quot;);
		sCustomerStatus  = bcAsset.GetFieldValue(&quot;VF Customer Status&quot;);
		sCreditStatus    = bcAsset.GetFieldValue(&quot;VF Credit Status&quot;);
		sDunningStatus   = bcAsset.GetFieldValue(&quot;VF Dunning Status&quot;);
		//sFinalStatus   	 = bcAsset.GetFieldValue(&quot;VF Final Status&quot;);	//ACAMBAS: VFTRCBU-22339
		sDocumentStatus  = bcAsset.GetFieldValue(&quot;VF Document Missing Status&quot;);
		sCustomerType    = bcAsset.GetFieldValue(&quot;Owner Account Type&quot;);
		sCustomerTypeLIC = bcAsset.GetFieldValue(&quot;Owner Account Type LIC&quot;);
		sMSISDN 		 = bcAsset.GetFieldValue(&quot;VF MSISDN&quot;);

		if (sActionTypeActor == &quot;Fraud&quot;)
			sActorStatus = sFraudStatus;
		if (sActionTypeActor == &quot;Customer&quot;)
			sActorStatus = sCustomerStatus;
		if (sActionTypeActor == &quot;Credit&quot;)
			sActorStatus = sCreditStatus;
		if (sActionTypeActor == &quot;Dunning&quot;)
			sActorStatus = sDunningStatus;
		if (sActionTypeActor == &quot;Missing Document&quot;)
			sActorStatus = sDocumentStatus;
		if (sActorStatus == null || sActorStatus == &quot;&quot;)
			sActorStatus = &quot;000&quot;;

		if (sActionTypeActor != null &amp;&amp; sActionTypeActor != &quot;&quot; &amp;&amp; sActionTypeActor != &quot;NoActor&quot;)
		{

			sItemSearchExpr = &quot;[Asset Integration Id]=&apos;&quot; + sAssetIntegId + &quot;&apos; AND [Due Date] IS NOT NULL&quot; +
							  &quot; AND [TELCO Action Type Actor]=&apos;&quot; + sActionTypeActor +
							  &quot;&apos; AND [TELCO Action Type]&lt;&gt;&apos;&quot; + sActionTypeValMNPOut +
							  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusPending +
							  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled +
							  // Jira VFTRCBU-30964 (it has applied EBU Code again because the Jira-26636 was an invalid scenario)							  
							  //&quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusParked + 
							  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusRejected + &quot;&apos;&quot;;

			boItem = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
			bcItem = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;Status&quot;);
			bcItem.ActivateField(&quot;VF Credit Status Final&quot;);
			bcItem.ActivateField(&quot;VF Customer Status Final&quot;);
			bcItem.ActivateField(&quot;VF Document Missing Status Final&quot;);
			bcItem.ActivateField(&quot;VF Dunning Status Final&quot;);
			bcItem.ActivateField(&quot;VF Fraud Status Final&quot;);
			bcItem.ActivateField(&quot;TELCO Source System&quot;); //DEF-11145
			bcItem.SetSearchExpr(sItemSearchExpr);
			bcItem.SetSortSpec(&quot;Due Date (DESCENDING)&quot;);
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord() &amp;&amp;
				bcItem.GetFieldValue(&quot;Status&quot;) != sOrderStatusComplete)
				
			{		
				if (sActionTypeActor == &quot;Fraud&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Fraud Status Final&quot;);
				if (sActionTypeActor == &quot;Customer&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Customer Status Final&quot;);
				if (sActionTypeActor == &quot;Credit&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Credit Status Final&quot;);
				if (sActionTypeActor == &quot;Dunning&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Dunning Status Final&quot;);
				if (sActionTypeActor == &quot;Missing Document&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Document Missing Status Final&quot;);
				sSourceSystem = bcItem.GetFieldValue(&quot;TELCO Source System&quot;);  //DEF-11145
			}
		}
	
		WithAvailableReason(sMSISDN, sActionTypeLIC, sActorStatus, sCustomerTypeLIC, sSourceSystem, psOutputs);  //DEF-11145

		sErrorCode  = psOutputs.GetProperty(&quot;Error Code&quot;);
		sErrorText  = psOutputs.GetProperty(&quot;Error Message&quot;);
		sWithReason = psOutputs.GetProperty(&quot;With Reason&quot;);
		
		if (sErrorCode != &quot;0&quot; ) return; //DEF-11145

		if (sWithReason == &quot;Y&quot;) return;

		// Jira VFTRCBU-30964 (it has applied EBU Code again bacause the Jira-26636 was an invalid scenario)							  
		
		if (sActionTypeActor != null &amp;&amp; sActionTypeActor != &quot;&quot; &amp;&amp; sActionTypeActor != &quot;NoActor&quot;) 
		{
			sItemSearchExpr = &quot;[Asset Integration Id]=&apos;&quot; + sAssetIntegId + &quot;&apos; AND [Due Date] IS NOT NULL&quot; + 
							  &quot; AND [TELCO Action Type Actor]=&apos;&quot; + sActionTypeActor +
							  &quot;&apos; AND [TELCO Action Type]&lt;&gt;&apos;&quot; + sActionTypeValMNPOut +
							  &quot;&apos; AND [Order Status]=&apos;&quot; + sOrderStatusParked +
							  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled + &quot;&apos;&quot;;
			
			boItem = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
			bcItem = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;Status&quot;);
			bcItem.ActivateField(&quot;VF Credit Status Final&quot;);
			bcItem.ActivateField(&quot;VF Customer Status Final&quot;);
			bcItem.ActivateField(&quot;VF Document Missing Status Final&quot;);
			bcItem.ActivateField(&quot;VF Dunning Status Final&quot;);
			bcItem.ActivateField(&quot;VF Fraud Status Final&quot;);
			bcItem.ActivateField(&quot;TELCO Source System&quot;); //DEF-11145
			bcItem.SetSearchExpr(sItemSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);

			bHasParked = bcItem.FirstRecord();

			while (bHasParked)
			{
				if (sActionTypeActor == &quot;Fraud&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Fraud Status Final&quot;);
				if (sActionTypeActor == &quot;Customer&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Customer Status Final&quot;);
				if (sActionTypeActor == &quot;Credit&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Credit Status Final&quot;);
				if (sActionTypeActor == &quot;Dunning&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Dunning Status Final&quot;);
				if (sActionTypeActor == &quot;Missing Document&quot;)
					sActorStatus = bcItem.GetFieldValue(&quot;VF Document Missing Status Final&quot;);
				sSourceSystem = bcItem.GetFieldValue(&quot;TELCO Source System&quot;);  //DEF-11145
				
				WithAvailableReason(sMSISDN, sActionTypeLIC, sActorStatus, sCustomerTypeLIC, sSourceSystem, psOutputs);  //DEF-11145

				sErrorCode  = psOutputs.GetProperty(&quot;Error Code&quot;);
				sErrorText  = psOutputs.GetProperty(&quot;Error Message&quot;);
				sWithReason = psOutputs.GetProperty(&quot;With Reason&quot;);
	
				if (sErrorCode != &quot;0&quot;) return; //DEF-11145
			
				if (sWithReason == &quot;Y&quot;) return;

				bHasParked = bcItem.NextRecord()
			}
		}
		
		sErrorCode = sFinalError;
		sErrorText = TheApplication().LookupMessage(sMessageCategory, sErrorCode);
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcItem      = null;
		boItem      = null;
		bcAsset	    = null;
		boAsset		= null;
		bcLOV 		= null;
		boLOV 		= null;
	}
}"
			   SEQUENCE="14"
			   UPDATED="09/03/2016 00:03:49"
			   UPDATED_BY="SADMIN"
			   CREATED="10/01/2014 20:08:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckDisconnectM2M"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckDisconnectM2M(sBillingAccountId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAssetSimple : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAssetSimple : BusComp   = boAssetSimple.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var sSearchExpr = &quot;&quot;;

		sSearchExpr = &quot;[Parent Asset Id] IS NULL AND [Product Part Number]=&apos;&quot; + sPartNumMobileLine + &quot;&apos; AND &quot; +
					  &quot;[Billing Account Id]=&apos;&quot; + sBillingAccountId + &quot;&apos; AND &quot; +
					  &quot;[Status]=&apos;&quot; + sAssetStatusActive + &quot;&apos;&quot;;

		bcAssetSimple.ClearToQuery();
		bcAssetSimple.SetViewMode(AllView);
		bcAssetSimple.SetSearchExpr(sSearchExpr);
		bcAssetSimple.ExecuteQuery(ForwardOnly);

		if (bcAssetSimple.FirstRecord())
		{
			sErrorCode = &quot;AD9008&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD9008&quot;);
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetSimple = null;
		boAssetSimple = null;
	}
}"
			   SEQUENCE="15"
			   UPDATED="02/01/2016 09:19:18"
			   UPDATED_BY="SADMIN"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckEligibility"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckEligibility (Inputs,Outputs) //DEF-22363 - IBMMOLAMLI
{

	var sErrorCode  = &quot;0&quot;;
	var sErrorText  = &quot;&quot;;

	try
	{
		var sOrderHeaderId	= Inputs.GetProperty(&quot;OrderHeaderId&quot;);
		
		var boOrderCamp = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcItemCamp  = boOrderCamp.GetBusComp(&quot;Order Entry - Line Items&quot;);
		
		with(bcItemCamp)
		{
			SetViewMode(AllView);
			ClearToQuery();
			SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + sOrderHeaderId + &quot;&apos; AND [VF Product Group] = &apos;CAMP PROMO&apos;&quot;  + &quot; AND [Action Code] = &apos;New&apos;&quot; );
			ExecuteQuery(ForwardOnly);
			
			if(FirstRecord())
			{
				with(bcItemCamp)
				{
					ClearToQuery();
					SetViewMode(AllView);
					SetSearchExpr(&quot;[Order Header Id] = &apos;&quot; + sOrderHeaderId + &quot;&apos; AND [VF Product Group] = &apos;TARIFF&apos;&quot;  + &quot; AND [Action Code] = &apos;Deleted&apos;&quot; );
					ExecuteQuery(ForwardOnly);
				
					if(FirstRecord())
					{
						Outputs.SetProperty(&quot;ReturnVal&quot;, &quot;Y&quot;);	
					}
					else
					{
						Outputs.SetProperty(&quot;ReturnVal&quot;, &quot;N&quot;);
					}
				}
			}
			else
			{
				Outputs.SetProperty(&quot;ReturnVal&quot;, &quot;N&quot;);
			}		
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		bcItemCamp  = null; 
		boOrderCamp	= null;
	}
}"
			   SEQUENCE="16"
			   UPDATED="10/16/2017 16:31:29"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="10/12/2017 15:30:35"
			   CREATED_BY="IBM_MERVEO">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckGroupToDeact"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function CheckGroupToDeact, &quot;ACS Asset Management&quot; Business Service
function CheckGroupToDeact(sMSISDN)
{
	try
	{
		var boGroup : BusObject = TheApplication().GetBusObject(&quot;VF Groups BO&quot;);
		var bcGroup : BusComp   = boGroup.GetBusComp(&quot;VF Groups BC&quot;);
		var boStage	: BusObject = TheApplication().GetBusObject(&quot;VF_Batch_Order_Creation_BO&quot;);
		var bcStage	: BusComp   = boStage.GetBusComp(&quot;VF Batch Create Order&quot;);

		var sGroupId = &quot;&quot;;
	
		bcGroup.SetViewMode(AllView);
		bcGroup.ClearToQuery();
		bcGroup.SetSearchExpr(&quot;[VF Group Head] LIKE &apos;*&quot; + sMSISDN + &quot;&apos;&quot;);
		bcGroup.ExecuteQuery(ForwardOnly);

		if (!bcGroup.FirstRecord())
		{
			return;
		}

		do
		{
			sGroupId = bcGroup.GetFieldValue(&quot;Id&quot;);

			bcStage.NewRecord(NewAfter);
			bcStage.SetFieldValue(&quot;VF Asset Id&quot;, sGroupId);
			bcStage.SetFieldValue(&quot;VF Status&quot;,   &quot;TBP&quot;);
			bcStage.SetFieldValue(&quot;VF Action&quot;,   &quot;GroupDeactivation&quot;);
			bcStage.WriteRecord();
		}
		while (bcGroup.NextRecord());
	}
	finally
	{
		bcStage = null;
		boStage = null;
		bcGroup = null;	
		boGroup = null;
	}
}"
			   SEQUENCE="17"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckHatsahKulPeriod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckHatsahKulPeriod(Inputs,Outputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		Outputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		Outputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		
		var oldCustId = Inputs.GetProperty(&quot;OldCustomerId&quot;);
		var newCustId = Inputs.GetProperty(&quot;NewCustomerId&quot;);
		var strOrderReasonCode = Inputs.GetProperty(&quot;OrderReasonCode&quot;);
		var strOrderReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ACS_ORDER_REASON&quot;,strOrderReasonCode);
		var strKulHatsahReason = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_TRANSFER_SUB_REASON&quot;,&quot;KUL_HATSAH&quot;);
		var strOrderSubReason = Inputs.GetProperty(&quot;OrderSubReason&quot;);
		var msisdn = Inputs.GetProperty(&quot;MSISDN&quot;);
		var newCustomerCode = Inputs.GetProperty(&quot;NewCustomerCode&quot;);
		
		var InAccnt : PropertySet = TheApplication().NewPropertySet();
		var OutAccnt : PropertySet = TheApplication().NewPropertySet();
		var mnpService = TheApplication().GetService(&quot;VF MNPRED Transfer&quot;);
		var CrossType = &quot;&quot;;

		InAccnt.SetProperty(&quot;OldAcc&quot;,oldCustId);
		InAccnt.SetProperty(&quot;NewAcc&quot;,newCustId);
		InAccnt.SetProperty(&quot;OrderReason&quot;,strOrderReason);
		InAccnt.SetProperty(&quot;OrderSubReason&quot;,strOrderSubReason);
		InAccnt.SetProperty(&quot;VF MSISDN&quot;,msisdn);
		InAccnt.SetProperty(&quot;inTask&quot;,&quot;Y&quot;);
		checkAccntType(InAccnt,OutAccnt);
		CrossType = OutAccnt.GetProperty(&quot;CrossType&quot;);
		InAccnt.SetProperty(&quot;NewAcc&quot;,newCustomerCode);
		mnpService.InvokeMethod(&quot;CheckHatsahKul&quot;,InAccnt,OutAccnt);
		
		sErrorCode = OutAccnt.GetProperty(&quot;Error Code&quot;);
		sErrorText = OutAccnt.GetProperty(&quot;Error Message&quot;);
		
		if(sErrorCode != &quot;0&quot;)
			return;
				
		if(TheApplication().GetProfileAttr(&quot;InHatsahKulPeriod&quot;)==&quot;&quot;)
		{
			mnpService.InvokeMethod(&quot;CheckHatsahKulForTransfers&quot;,InAccnt,OutAccnt);
			//sErrorCode = OutAccnt.GetProperty(&quot;Error Code&quot;);
			//sErrorText = OutAccnt.GetProperty(&quot;Error Message&quot;);
			
			//if(sErrorCode != &quot;&quot;)  //VFTRCBU-17822 RPIRES
			//	return;
		}
		//if(TheApplication().GetProfileAttr(&quot;InHatsahKulPeriod&quot;)==&quot;Y&quot;&amp;&amp;(strOrderReasonCode!=&quot;2200&quot;&amp;&amp;strOrderReasonCode!=&quot;2201&quot;)) //VFTRCBU-17822 RPIRES
		if(TheApplication().GetProfileAttr(&quot;InHatsahKulPeriod&quot;)==&quot;Y&quot;&amp;&amp;strOrderSubReason!=strKulHatsahReason)
		{
	 		sErrorCode = &quot;VF_MNPRED_010&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
			Outputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
			Outputs.SetProperty(&quot;Error Message&quot;, sErrorText);
	 		return;
		}
		else
		{
			Outputs.SetProperty(&quot;Error Code&quot;,    &quot;0&quot;);
			Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		Outputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		Outputs.SetProperty(&quot;Error Message&quot;, sErrorText);
	}	
}"
			   SEQUENCE="18"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckIsyerimCebimde"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckIsyerimCebimde(sAssetId, sOwnerAccountId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		
		var sSearchExpr = &quot;[Root Asset Id] = &apos;&quot; + sAssetId +
						  &quot;&apos; AND [VF Product Type] = &apos;&quot; + sProductTypePSTN +
						  &quot;&apos; AND [Status] = &apos;&quot; + sAssetStatusActive +
						  &quot;&apos; AND [Owner Account Id] = &apos;&quot; + sOwnerAccountId +
						  &quot;&apos; AND ([Parent Part Number] = &apos;&quot; + sPartNumMobileLine +
						  &quot;&apos; OR [Parent Part Number] = &apos;&quot; + sPartNumGSMConsumer + &quot;&apos;)&quot;;

		bcAsset.ClearToQuery();
		bcAsset.SetViewMode(AllView);
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);
		
		if (bcAsset.FirstRecord())
		{
			sErrorCode = &quot;AD13_CR131_01&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD13_CR131_01&quot;) +
						 TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD13_CR131_01_Part2&quot;);
			return;
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="19"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckLastInvoiceDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckLastInvoiceDate(sAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAssetSimple : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAssetSimple : BusComp   = boAssetSimple.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		if (sAssetId == null || sAssetId == &quot;&quot;)
		{
			return;
		}

		//R1.4.2-WP01
		bcAssetSimple.SetViewMode(AllView);
		bcAssetSimple.ClearToQuery();
		bcAssetSimple.ActivateField(&quot;Install Date&quot;);
		bcAssetSimple.ActivateField(&quot;VF Bill Cycle&quot;);
		bcAssetSimple.SetSearchSpec(&quot;Id&quot;, sAssetId);
		bcAssetSimple.ExecuteQuery(ForwardOnly);
		
		if (!bcAssetSimple.FirstRecord())
		{
			return;
		}

		var sInstallDate   = bcAssetSimple.GetFieldValue(&quot;Install Date&quot;);
		var sBillCycle     = bcAssetSimple.GetFieldValue(&quot;VF Bill Cycle&quot;);
		var oToday         = new Date();
		var oInstallDate   = new Date(sInstallDate);
		var oBillCycleDate = new Date(((oToday.getMonth()+1)+ &quot;/&quot; + sBillCycle + &quot;/&quot; + oToday.getFullYear()));
		var iMonth         = oToday.getMonth()+2;
		var iYear          = oToday.getFullYear();

		if (iMonth == 13)
		{
			iMonth = 1;
			iYear = iYear + 1;
		}

		var oBillCycleNextDate = new Date(((iMonth)+ &quot;/&quot; + sBillCycle + &quot;/&quot; + iYear));
		var iCheckInvoice      = 1;
		
		if (oBillCycleDate &gt; oInstallDate)
		{
			if (oToday&lt;oBillCycleDate)
			{
				iCheckInvoice = 0;
			}
		}
		if (oToday &lt; oBillCycleNextDate)
		{
			iCheckInvoice = 0;
		}

		if (iCheckInvoice == 1)
		{
			sErrorCode = &quot;121&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;121&quot;);
			return;
		}
	}	
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetSimple = null;
		boAssetSimple = null;
	}
}"
			   SEQUENCE="20"
			   UPDATED="12/18/2017 16:19:45"
			   UPDATED_BY="1-FYSQW6T"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMTTAccount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMTTAccount(sAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAssetSimple : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAssetSimple : BusComp   = boAssetSimple.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sSearchExpr = &quot;[Root Asset Id] = &apos;&quot; + sAssetId +
						  &quot;&apos; AND [Product Part Number] = &apos;&quot; + sPartNumMTT +
						  &quot;&apos; AND [Status] &lt;&gt; &apos;&quot; + sAssetStatusInactive + &quot;&apos;&quot;;

		bcAssetSimple.ClearToQuery();
		bcAssetSimple.SetViewMode(AllView);
		bcAssetSimple.SetSearchExpr(sSearchExpr);
		bcAssetSimple.ExecuteQuery(ForwardOnly);

		if (bcAssetSimple.FirstRecord())
		{
			sErrorCode = &quot;R142_029&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_029&quot;);
			return;
		}
	}	
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetSimple = null;
		boAssetSimple = null;
	}
}"
			   SEQUENCE="24"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMTTGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMTTGroup(sActionTypeLIC, sProductPartNum, sBillingAccountId, sMTTGroupId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset   : BusObject = null;
		var bcAsset   : BusComp   = null;
		var bcAssetXA : BusComp   = null;
	
		var sAssetId  = &quot;&quot;;

		if (sActionTypeLIC == sActionDeactivateVoluntary &amp;&amp; sProductPartNum == sPartNumMTTGroup) 
		{
			if (sBillingAccountId == &quot;&quot; || sBillingAccountId == null)
			{
				return;
			}

			boAsset   = TheApplication().GetBusObject(&quot;VF MSISDN Inquiry&quot;);
			bcAsset   = boAsset.GetBusComp(&quot;HP Web Asset Mgmt - Asset&quot;);
			bcAssetXA = boAsset.GetBusComp(&quot;HP Web Asset Mgmt - Asset XA&quot;);

			bcAsset.ClearToQuery();
			bcAsset.SetViewMode(AllView);
			bcAsset.SetSearchSpec(&quot;Billing Account Id&quot;,  sBillingAccountId);
			bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sPartNumMTT);
			bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
			bcAsset.ExecuteQuery(ForwardOnly);

			if (!bcAsset.FirstRecord())
			{
				return;
			}

			sAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);

			bcAssetXA.SetSearchSpec(&quot;Object Id&quot;,  sAssetId);
			bcAssetXA.SetSearchSpec(&quot;Text Value&quot;, sMTTGroupId);
			bcAssetXA.SetSearchSpec(&quot;Name&quot;,       &quot;MTT Group ID&quot;);
			bcAssetXA.ExecuteQuery(ForwardOnly);

			if (!bcAssetXA.FirstRecord())
			{
				return;
			}

			sErrorCode = &quot;X_VF_MTT_GROUP_Deactivation&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VF_MTT_GROUP_Deactivation&quot;);
			return;
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetXA = null;
		bcAsset   = null;
		boAsset   = null;
	}
}"
			   SEQUENCE="25"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckMobileSignature"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckMobileSignature(sAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sSearchExpr = &quot;[Root Asset Id]=&apos;&quot; + sAssetId +
						  // &quot;&apos; AND [Product Part Number]=&apos;&quot; + sPartNumMobileSignature + VFTRCBU WA#43 HRODRIGUES
						  &quot;&apos; AND ([Product Part Number]=&apos;&quot; + sPartNumMobileSignature +
						  &quot;&apos; OR [Parent Part Number]=&apos;&quot; + sPartNumMobileSignatureConsumer + 
						  &quot;&apos;) AND [Status]=&apos;&quot; + sAssetStatusActive +
						  &quot;&apos; AND ([Parent Part Number]=&apos;&quot; + sPartNumMobileLine +
						  &quot;&apos; OR [Parent Part Number]=&apos;&quot; + sPartNumGSMConsumer + &quot;&apos;)&quot;;

		bcAsset.ClearToQuery();
		bcAsset.SetViewMode(AllView);
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			sErrorCode = &quot;AD_JULY13_011&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AD_JULY13_011&quot;);
			return;
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="21"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOpenMNPOutSR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function checkOpenMnpOutSR, &quot;SIS OM Products &amp; Services Root List Applet (Service) - Tiny - Poste&quot; Applet
function CheckOpenMNPOutSR(sMSISDN, sOwnerAccountId, sActionTypeLIC, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boRequest : BusObject = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcRequest : BusComp   = boRequest.GetBusComp(&quot;Service Request&quot;);
		var bcMNPOut  : BusComp   = boRequest.GetBusComp(&quot;VF MNP Port Out MSISDN&quot;);
		var sSearchExpr    = &quot;&quot;;
		var oToday         = new Date();
		var iTodayTime     = oToday.getTime();
		var sBlockPeriod   = TheApplication().InvokeMethod (&quot;LookupValue&quot;, &quot;VF_MNP_MODIFY_BLOCK_DAYS&quot;, &quot;DAYS&quot;);//TLG-7267
		var oYesterday     = new Date(iTodayTime-(sBlockPeriod*24*60*60*1000));
		var iMonth         = oYesterday.getMonth()+1;
		var sPreviousDay   = iMonth + &quot;/&quot; + oYesterday.getDate() + &quot;/&quot; + oYesterday.getFullYear() + &quot; &quot; +
						     oYesterday.getHours() + &quot;:&quot; + oYesterday.getMinutes() + &quot;:&quot; + oYesterday.getSeconds();
		var sRequestId     = &quot;&quot;;
		var sPortOutMSISDN = null;

		sSearchExpr = &quot;[VF SR Category] = &apos;&quot; + sSRCategoryMNPOut + &quot;&apos; AND &quot; +
					  &quot;[Account Id] = &apos;&quot; + sOwnerAccountId + &quot;&apos; AND [Opened Date]&gt;=&apos;&quot; + sPreviousDay + &quot;&apos;&quot;;

		if (sOwnerAccountId == null || sOwnerAccountId == &quot;&quot; || sMSISDN == null || sMSISDN == &quot;&quot;)
		{
			return;
		}

		bcRequest.ClearToQuery();
		bcRequest.SetViewMode(AllView);
		bcRequest.ActivateField(&quot;Opened Date&quot;);
		bcRequest.ActivateField(&quot;Account Id&quot;);
		bcRequest.SetSearchExpr(sSearchExpr);
		bcRequest.ExecuteQuery(ForwardOnly);

		if (!bcRequest.FirstRecord())
		{
			return;
		}

		do
		{
			sRequestId = bcRequest.GetFieldValue(&quot;Id&quot;);

			bcMNPOut.ClearToQuery();
			bcMNPOut.SetViewMode (AllView);
			bcMNPOut.ActivateField(&quot;VF MSISDN&quot;);
			bcMNPOut.SetSearchSpec(&quot;SR Id&quot;, sRequestId);
			bcMNPOut.ExecuteQuery(ForwardOnly);

			if (bcMNPOut.FirstRecord())
			{
				do
				{
					sPortOutMSISDN = bcMNPOut.GetFieldValue(&quot;VF MSISDN&quot;);
	
					if (sPortOutMSISDN == sMSISDN)
					{
						if (sActionTypeLIC == sActionSuspendVoluntary)
						{
							sErrorCode = &quot;0&quot;; // VFTRCBU-19608
							sErrorText = &quot;&quot;; //VFTRCBU-19608
						}
						else
						{
				    		sErrorCode = &quot;AM_TLG_83&quot;;
				    		sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AM_TLG_83&quot;);
				    	}

						return;				    	
					}
				}
				while (bcMNPOut.NextRecord());
			}
		}
		while (bcRequest.NextRecord());
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcMNPOut  = null;
		bcRequest = null;
		boRequest = null;
	}
}"
			   SEQUENCE="26"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckOrderStatusForLostStolen"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckOrderStatusForLostStolen(sAssetIntegId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		var sItemStatus  = &quot;&quot;;
		var sOrderStatus = &quot;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Order Status&quot;);	 
		bcItem.ActivateField(&quot;Status&quot;);	 
		bcItem.SetSearchSpec(&quot;Asset Integration Id&quot;, sAssetIntegId);
		bcItem.SetSearchSpec(&quot;TELCO Action Reason&quot;,  sActionReasonLostStolen)
		bcItem.ExecuteQuery(ForwardOnly); //Vaibhav 23/03/2012: Added parameter for Oracle Review

		if (!bcItem.FirstRecord())
		{
			return;
		}

		do
		{
			sItemStatus  = bcItem.GetFieldValue(&quot;Status&quot;);
			sOrderStatus = bcItem.GetFieldValue(&quot;Order Status&quot;);

	 		if (sItemStatus != sOrderStatusComplete &amp;&amp;
	 			sItemStatus != sOrderStatusCancelled &amp;&amp;
	 			sOrderStatus != sOrderStatusComplete &amp;&amp;
	 			sOrderStatus != sOrderStatusCancelled &amp;&amp;
	 			sOrderStatus != sOrderStatusParked) 
	 		{
				sErrorCode = &quot;X_LOST_STOLEN_ORDER&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_LOST_STOLEN_ORDER&quot;);
	 		}
		}
		while (bcItem.NextRecord());
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcItem  = null;
		boOrder = null;
	}
}"
			   SEQUENCE="28"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckPostSellingActionsControl"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckPostSellingActionsControl(sAssetId, sAssetIntegId, sAssetStatus, sActionTypeLIC, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var bsManager    : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn  : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut : PropertySet = TheApplication().NewPropertySet();

		psManagerIn.SetProperty(&quot;ProcessName&quot;,        &quot;VF Post Selling Actions Control&quot;);
		psManagerIn.SetProperty(&quot;Object Id&quot;,          sAssetId);
		psManagerIn.SetProperty(&quot;AssetIntegrationId&quot;, sAssetIntegId);
		psManagerIn.SetProperty(&quot;AssetStatus&quot;,        sAssetStatus);
		psManagerIn.SetProperty(&quot;OrderSubTypeCode&quot;,   sActionTypeLIC);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

		sErrorCode = psManagerOut.GetProperty(&quot;Error Code&quot;);
		sErrorText = psManagerOut.GetProperty(&quot;Error Message&quot;);

		if (sErrorCode == null || sErrorCode == &quot;&quot;)
		{
			sErrorCode = &quot;0&quot;;
			sErrorText = &quot;&quot;;
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		psManagerOut = null;
		psManagerIn  = null;
		bsManager	 = null;
	}
}"
			   SEQUENCE="29"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/22/2014 23:00:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckPrefix"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckPrefix(sMSISDN)
{
	try
	{
		var boParameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter	: BusComp   = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);

		var sMSISDNPrefix = &quot;&quot;;
		var sSearchExpr   = &quot;&quot;;

		if (sMSISDN == null || sMSISDN == &quot;&quot;)
		{
			return(&quot;OK&quot;);
		}

		sMSISDNPrefix = sMSISDN.charAt(0) + sMSISDN.charAt(1);
		sSearchExpr   = &quot;[Function]=&apos;ForbiddenMSISDN2&apos; AND [Name]=&apos;Transfer&apos; AND [Value]=&apos;&quot; + sMSISDNPrefix + &quot;&apos;&quot;;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.SetSearchExpr(sSearchExpr);
		bcParameter.ExecuteQuery(ForwardOnly);

		if (bcParameter.FirstRecord())
		{
			return(&quot;KO&quot;);
		}

		return(&quot;OK&quot;);
	}
	finally
	{
		bcParameter = null;
		boParameter = null;		
	}
}"
			   SEQUENCE="30"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="11/02/2015 10:35:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSVB"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSVB(sAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

	    var boAccount : BusObject = TheApplication().GetBusObject(&quot;Account&quot;);
	    var bcAssetXA : BusComp   = boAccount.GetBusComp(&quot;X Asset Mgmt - Asset XA&quot;);

	    var sAttribName  = &quot;SVB Active SIM No&quot;;
	    var sAttribValue = &quot;&quot;;

		bcAssetXA.SetViewMode(AllView);
		bcAssetXA.ClearToQuery();
		bcAssetXA.ActivateField(&quot;Value&quot;);
		bcAssetXA.ActivateField(&quot;Name&quot;);
		bcAssetXA.SetSearchSpec(&quot;Object Id&quot;, sAssetId);
		bcAssetXA.SetSearchSpec(&quot;Name&quot;,      sAttribName);
		bcAssetXA.ExecuteQuery(ForwardOnly);

		if (!bcAssetXA.FirstRecord ())
		{
			return;
		}

		sAttribValue = bcAssetXA.GetFieldValue(&quot;Value&quot;);

		if (sAttribValue == &quot;0&quot;)
		{
			return;
		}

		sErrorCode = &quot;214&quot;;
		sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;214&quot;);
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetXA = null;
		boAccount = null;
	}
}"
			   SEQUENCE="31"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckSVBOption"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckSVBOption(sAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAssetSimple : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAssetSimple : BusComp   = boAssetSimple.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sSearchExpr = &quot;([Parent Asset Id] = &apos;&quot; + sAssetId + &quot;&apos; AND [Status] = &apos;&quot; + sAssetStatusActive +
						  &quot;&apos; AND ([Product Part Number]=&apos;&quot; + sPartNumSVBVoice +
						  &quot;&apos; OR [Product Part Number]=&apos;&quot; + sPartNumSVBRoamingVoice +
						  &quot;&apos; OR [Product Part Number]=&apos;&quot; + sPartNumSVBRoamingData +
						  &quot;&apos; OR [Product Part Number]=&apos;&quot; + sPartNumSVBSMS +
						  &quot;&apos; OR [Product Part Number]=&apos;&quot; + sPartNumSVBData + &quot;&apos;))&quot;;

		bcAssetSimple.SetViewMode(AllView);
		bcAssetSimple.ClearToQuery();
		bcAssetSimple.SetSearchExpr(sSearchExpr);
		bcAssetSimple.ExecuteQuery(ForwardOnly);
		
		if (bcAssetSimple.FirstRecord())
		{
			sErrorCode = &quot;154&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;154&quot;);
			return;
		}
	}	
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetSimple = null;
		boAssetSimple = null;
	}
}"
			   SEQUENCE="32"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CheckTargetBillingAcc"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CheckTargetBillingAcc(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAccount : BusObject;
		var bcAccount : BusComp;
		var boAssetManagement : BusObject;
		var bcAssetMgmtAssetHeader : BusComp;
		var billAccountId       = psInputs.GetProperty(&quot;BillingAccountId&quot;);
		var sInActionTypeLIC  = psInputs.GetProperty(&quot;Action Type LIC&quot;); //WA#13 Drop 2 - RPIRES
		var isBulkSMSTransfer  = psInputs.GetProperty(&quot;BulkSMSTransfer&quot;); //WA#13 Drop 2 - RPIRES
		
		var strBunActivation  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;BILLING_ACCOUNT_DEDICATED&quot;, &quot;M2M - bundle already active&quot;);
		var strBulkSMS  = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;BILLING_ACCOUNT_DEDICATED&quot;, &quot;Bulk SMS&quot;);
		var strAssetStatus_Active    = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;IMPL_PHASE&quot;, &quot;Active&quot;);

		if (billAccountId == null || billAccountId == &quot;&quot;)
		{
			psOutputs.SetProperty(&quot;Error Code&quot;,    &quot;1&quot;);
			psOutputs.SetProperty(&quot;Error Message&quot;, &quot;Input is null or empty.&quot;);
			return;
		}
		
		boAccount	= TheApplication().GetBusObject(&quot;TELCO Account - Simple&quot;);
		bcAccount = boAccount.GetBusComp(&quot;TELCO Account - Simple&quot;);
		
		//BEGIN - Vodafone Code Review - SIEBELCodeReviewIssues - JFONSECA
		with(bcAccount)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;VF Bulk SMS&quot;);
			SetSearchSpec(&quot;Id&quot;,    billAccountId);
			ExecuteQuery(ForwardOnly);
			
			if(!FirstRecord())
			{
			return;
			}
		}
		//bcAccount.SetViewMode(AllView);
		//bcAccount.ClearToQuery();
		//bcAccount.ActivateField(&quot;VF Bulk SMS&quot;);
		//bcAccount.SetSearchSpec(&quot;Id&quot;,    billAccountId);
		//bcAccount.ExecuteQuery(ForwardOnly);
		
		//if(!bcAccount.FirstRecord())
		//	return;
		
		//END - Vodafone Code Review - SIEBELCodeReviewIssues - JFONSECA
		
		var strBillAccDedicated = bcAccount.GetFieldValue(&quot;VF Bulk SMS&quot;);
		
		if(strBillAccDedicated == strBunActivation)
		{
			boAssetManagement = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
			bcAssetMgmtAssetHeader = boAssetManagement.GetBusComp(&quot;TELCO Asset - Simple&quot;);
			with(bcAssetMgmtAssetHeader)
			{
				ClearToQuery();
				SetViewMode(AllView);
				ActivateField(&quot;Status&quot;);
				SetSearchSpec(&quot;Product Part Number&quot;,&quot;40000&quot;);
				SetSearchSpec(&quot;Billing Account Id&quot;,billAccountId);
				ExecuteQuery(ForwardOnly);
				if(FirstRecord())
				{
					var assetStatus = bcAssetMgmtAssetHeader.GetFieldValue(&quot;Status&quot;);
					if(assetStatus == strAssetStatus_Active)
					{
				 		sErrorCode = &quot;R142_385&quot;;
						sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
						psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
						psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
						return;
					}	
				}
			}
		}
		
		if (strBillAccDedicated == strBulkSMS &amp;&amp; !isBulkSMSTransfer) //WA#13 Drop 2 BS#1/BS#4/BS#6 - RPIRES
		{
			sErrorCode = &quot;R142_375&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
			psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
			psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
			return;;
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAccount = null;
		boAccount = null;
		bcAssetMgmtAssetHeader = null;
		boAssetManagement = null;
	}
}"
			   SEQUENCE="33"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Check_Create_SR"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function Check_Create_SR, &quot;ACS Asset Management&quot; Business Service
function Check_Create_SR(sOrderId, sItemId, sActionType)
{
	try
	{
		var boItemXA       : BusObject   = TheApplication().GetBusObject(&quot;TELCO Line Items XA - Simple&quot;);
		var bcItemXA       : BusComp     = boItemXA.GetBusComp(&quot;TELCO Line Items XA - Simple&quot;);
		var boAsset        : BusObject   = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset        : BusComp     = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);
		var boItem         : BusObject   = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem         : BusComp     = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var bsUtilities    : Service     = null;
		var psUtilitiesIn  : PropertySet = null;
		var psUtilitiesOut : PropertySet = null;

		var sItemXASearchExpr = &quot;&quot;;
		var sNewNumber        = &quot;&quot;;
		var sOldNumber        = &quot;&quot;;
		var iCntr             = 0;
		var sMSISDNPrexFree   = &quot;&quot;;
		var sAccountId        = &quot;&quot;;
		var sItemSearchExpr   = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot; || sItemId == null || sItemId == &quot;&quot;)
		{
			return;
		}

		sItemXASearchExpr = &quot;[Object Id]=&apos;&quot; + sItemId + &quot;&apos; AND [Name]=&apos;Contact Phone&apos;&quot;;

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Text Value&quot;);
		bcItemXA.ActivateField(&quot;Previous Text Value&quot;);
		bcItemXA.SetSearchExpr(sItemXASearchExpr);
		bcItemXA.ExecuteQuery(ForwardOnly);

		if (!bcItemXA.FirstRecord())
		{
			return;
		}

		sNewNumber = bcItemXA.GetFieldValue(&quot;Text Value&quot;);
		sOldNumber = bcItemXA.GetFieldValue(&quot;Previous Text Value&quot;);

		if (sActionType == sActionTypeValModifyOptions &amp;&amp; sNewNumber == sOldNumber)
		{
			return;
		}

		for (iCntr=2; iCntr&lt;sNewNumber.length; iCntr++)
		{
			sMSISDNPrexFree = sMSISDNPrexFree + &quot;&quot; + sNewNumber.charAt(iCntr);
		}

		if (sMSISDNPrexFree == null || sMSISDNPrexFree == &quot;&quot;)
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();	 
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.ActivateField(&quot;Owner Account Id&quot;);
		bcAsset.SetSearchSpec(&quot;VF MSISDN&quot;, sMSISDNPrexFree);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sAccountId = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);

		if (sAccountId == null || sAccountId == &quot;&quot;)
		{
			return;
		}

		sItemSearchExpr = &quot;[Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled +
						  &quot;&apos; AND ([TELCO Action Type]=&apos;&quot; + sActionTypeValMNPOut + &quot;&apos; OR [TELCO Action Type]=&apos;&quot; + sActionTypeValSuspCredit + &quot;&apos;)&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		bsUtilities	   = TheApplication().GetService(&quot;ACS General Operations&quot;);
		psUtilitiesIn  = TheApplication().NewPropertySet();
		psUtilitiesOut = TheApplication().NewPropertySet();

		psUtilitiesIn.SetProperty(&quot;Order Id&quot;,    sOrderId);
		psUtilitiesIn.SetProperty(&quot;Type&quot;,        &quot;İŞLEM&quot;);
		psUtilitiesIn.SetProperty(&quot;Area&quot;,        &quot;MTT&quot;);
		psUtilitiesIn.SetProperty(&quot;Sub Area&quot;,    &quot;SIRKET YETKILISI KONTROLÜ&quot;);
		psUtilitiesIn.SetProperty(&quot;Status&quot;,      sSRStatusOpen);
		psUtilitiesIn.SetProperty(&quot;Account Id&quot;,  sAccountId);
		psUtilitiesIn.SetProperty(&quot;Owner Group&quot;, &quot;VIP_KURUMSAL_DESTEK&quot;);

		bsUtilities.InvokeMethod(&quot;CreateSR&quot;, psUtilitiesIn, psUtilitiesOut);
	}	
	finally
	{
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;	
		bcItem         = null;
		boItem         = null;
		bcAsset        = null;
		boAsset        = null;
		bcItemXA       = null;
		boItemXA       = null;
	}
}"
			   SEQUENCE="11"
			   UPDATED="02/01/2016 09:19:19"
			   UPDATED_BY="SADMIN"
			   CREATED="01/23/2015 01:14:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CreateStagingRecord"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function CreateStagingRecord, &quot;ACS Asset Management&quot; Business Service
function CreateStagingRecord(sOrderId, sRootItemId, sMSISDN)
{
	try
	{
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcItemXA : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var boStage  : BusObject = TheApplication().GetBusObject(&quot;VF_Batch_Order_Creation_BO&quot;);
		var bcStage  : BusComp   = boStage.GetBusComp(&quot;VF Batch Create Order&quot;);
		var aAction              = new Array;
		var aNewValue            = new Array;
		var aOldValue            = new Array;

		var sItemSearchExpr   = &quot;&quot;;
		var sItemId		      = &quot;&quot;;
		var sItemProdSubType  = &quot;&quot;;
		var sItemAction       = &quot;&quot;;
		var sItemAccountId    = &quot;&quot;;
		var sRootMSISDN       = &quot;&quot;;
		var sItemXASearchExpr = &quot;&quot;;
		var sStagingAction    = &quot;&quot;;
		var bSkipItem         = false;
		var iItem             = 0;
		var bHasAttrib        = false;
		var sAttribNewValue   = &quot;&quot;;
		var sAttribOldValue   = &quot;&quot;;
		var iStage            = 0;

		if (sOrderId == null || sOrderId == &quot;&quot; || sRootItemId == null || sRootItemId == &quot;&quot;)
		{
			return;
		}

		// Bundled Promotions
		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Root Order Item Id]=&apos;&quot; + sRootItemId +
						  &quot;&apos; AND ([VF Product Sub Type]=&apos;AMALFI&apos; OR [VF Product Sub Type]=&apos;KAFEIN&apos;)&quot; +
						  &quot; AND [VF Product Group]=&apos;&quot; + sProductGroupCamp +
						  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProductTypeHandset + &quot;&apos;&quot;;

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Account Id&quot;);
		bcItem.ActivateField(&quot;Root Service Num&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		do
		{
			bSkipItem        = false;
			sItemId 	     = bcItem.GetFieldValue(&quot;Id&quot;);
			sItemProdSubType = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sItemAction      = bcItem.GetFieldValue(&quot;Action Code&quot;);
			sItemAccountId   = bcItem.GetFieldValue(&quot;Account Id&quot;);
			sRootMSISDN      = bcItem.GetFieldValue(&quot;Root Service Num&quot;);

			if (sMSISDN == null || sMSISDN == &quot;&quot;)
			{
				sMSISDN = sRootMSISDN;
			}

			sItemXASearchExpr = &quot;[Object Id]=&apos;&quot; + sItemId + &quot;&apos;&quot;;

			if (sItemProdSubType == &quot;KAFEIN&quot;)
			{
				sItemXASearchExpr = &quot;[Object Id]=&apos;&quot; + sItemId + &quot;&apos; AND ([Name]=&apos;Reference Number&apos;)&quot;
			}
			else
			{
				sItemXASearchExpr = &quot;[Object Id]=&apos;&quot; + sItemId +
									&quot;&apos; AND ([Name]=&apos;Asset Row id of reference number1&apos; OR [Name] = &apos;Asset Row id of reference number2&apos;)&quot;;
			}

			if (sItemAction == sItemActionNew)
				sStagingAction = &quot;Add&quot;;
			else if (sItemAction == sItemActionDeleted)
				sStagingAction = &quot;Delete&quot;;
			else if (sItemAction == sItemActionModified)
				sStagingAction = &quot;Swap&quot;;
			else 
				bSkipItem = true;

			if (!bSkipItem)
			{
				bcItemXA.SetViewMode(AllView);
				bcItemXA.ClearToQuery();
				bcItemXA.ActivateField(&quot;Text Value&quot;);
				bcItemXA.ActivateField(&quot;Previous Text Value&quot;);
				bcItemXA.SetSearchExpr(sItemXASearchExpr);
				bcItemXA.ExecuteQuery(ForwardOnly);

				bHasAttrib = bcItemXA.FirstRecord();

				while(bHasAttrib)
				{
					sAttribNewValue = bcItemXA.GetFieldValue(&quot;Text Value&quot;);
					sAttribOldValue = bcItemXA.GetFieldValue(&quot;Previous Text Value&quot;);

					aAction[iItem]   = sStagingAction;
					aNewValue[iItem] = sAttribNewValue;
					aOldValue[iItem] = sAttribOldValue;

					if (sItemProdSubType == &quot;KAFEIN&quot; &amp;&amp; sAttribNewValue != null &amp;&amp; sAttribNewValue != &quot;&quot;)
						aNewValue[iItem] = GetAssetId(sAttribNewValue, sItemAccountId);

					if (sItemProdSubType == &quot;KAFEIN&quot; &amp;&amp; sAttribOldValue != &quot;null&quot; &amp;&amp; sAttribOldValue != &quot;&quot;)
						aOldValue[iItem] = GetAssetId(sAttribOldValue, sItemAccountId);

					iItem++;
					bHasAttrib = bcItemXA.NextRecord();
				}
			}
		}
		while (bcItem.NextRecord());

		while (iStage &lt; iItem)
		{
			if (aAction[iStage] == &quot;Add&quot; &amp;&amp;
				aNewValue[iStage] != null &amp;&amp; aNewValue[iStage] != &quot;&quot;)
			{
				bcStage.NewRecord(NewAfter);
				bcStage.SetFieldValue(&quot;VF Main Number&quot;, sMSISDN);
				bcStage.SetFieldValue(&quot;VF Asset Id&quot;,    aNewValue[iStage]);
				bcStage.SetFieldValue(&quot;VF Action&quot;,      &quot;Add&quot;);
				bcStage.SetFieldValue(&quot;VF Campaign&quot;,    sItemProdSubType);
				bcStage.WriteRecord();
			}

			if (aAction[iStage] == &quot;Delete&quot; &amp;&amp;
				aOldValue[iStage] != null &amp;&amp; aOldValue[iStage] != &quot;&quot;)
			{
				bcStage.NewRecord(NewAfter);
				bcStage.SetFieldValue(&quot;VF Main Number&quot;, sMSISDN);
				bcStage.SetFieldValue(&quot;VF Asset Id&quot;,    aOldValue[iStage]);
				bcStage.SetFieldValue(&quot;VF Action&quot;,      &quot;Delete&quot;);
				bcStage.SetFieldValue(&quot;VF Campaign&quot;,    sItemProdSubType);
				bcStage.WriteRecord();
			}

			if (aAction[iStage] == &quot;Swap&quot;)
			{
				if (aOldValue[iStage] != null &amp;&amp; aOldValue[iStage] != &quot;&quot; &amp;&amp;
					(aNewValue[iStage] == null || aNewValue[iStage] == &quot;&quot; ||
					 aNewValue[iStage] != aOldValue[iStage]))
				{
					bcStage.NewRecord(NewAfter);
					bcStage.SetFieldValue(&quot;VF Main Number&quot;, sMSISDN);
					bcStage.SetFieldValue(&quot;VF Asset Id&quot;,    aOldValue[iStage]);
					bcStage.SetFieldValue(&quot;VF Action&quot;,      &quot;Delete&quot;);
					bcStage.SetFieldValue(&quot;VF Campaign&quot;,    sItemProdSubType);
					bcStage.WriteRecord();
				}

				if (aNewValue[iStage] != null &amp;&amp; aNewValue[iStage] != &quot;&quot; &amp;&amp;
					(aOldValue[iStage] == null || aOldValue[iStage] == &quot;&quot; ||
					 aOldValue[iStage] != aNewValue[iStage]))
				{
					bcStage.NewRecord(NewAfter);
					bcStage.SetFieldValue(&quot;VF Main Number&quot;, sMSISDN);
					bcStage.SetFieldValue(&quot;VF Asset Id&quot;,    aNewValue[iStage]);
					bcStage.SetFieldValue(&quot;VF Action&quot;,      &quot;Add&quot;);
					bcStage.SetFieldValue(&quot;VF Campaign&quot;,    sItemProdSubType);
					bcStage.WriteRecord();
				}
			}

			iStage++;
		}
	}
	finally
	{
		aOldValue = null;
		aNewValue = null;
		aAction   = null;
		bcStage   = null;
		boStage   = null;
		bcItemXA  = null;
		bcItem    = null;
		boOrder   = null;
	}
}"
			   SEQUENCE="34"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:58"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DeactvOldAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DeactvOldAsset(sRootAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		if (sRootAssetId == null || sRootAssetId == &quot;&quot;)
		{
			return;
		}

		var boAsset      : BusObject = TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var bcAsset      : BusComp   = boAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var boChildAsset : BusObject = TheApplication().GetBusObject(&quot;X HP Order Entry&quot;);
		var bcChildAsset : BusComp   = boChildAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var boOrder      : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcItem       : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sSearchExpr   = &quot;&quot;;
		var sAssetId      = &quot;&quot;;
		var sAssetEndDate = &quot;&quot;;
		var sAssetIntegId = &quot;&quot;;
		var bSkipAsset    = false;
		var oToday        = GetCurrentDate();
		var iToday        = oToday.getTime();
		var oEndDate      = null;
		var iEndDate      = 0;

		sSearchExpr = &quot;[Root Asset Id]=&apos;&quot; + sRootAssetId + &quot;&apos; AND [Id]&lt;&gt;&apos;&quot; + sRootAssetId +
					  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sAssetStatusInactive + &quot;&apos; AND [Effective End Date] IS NOT NULL&quot; +
					  &quot; AND ([VF Product Type] IS NULL OR [VF Product Type]&lt;&gt;&apos;&quot; + sProductTypeHandset + &quot;&apos;)&quot;;
					  //&quot;&apos; AND ([VF Product Sub Type]=&apos;NONRECW&apos; OR [VF Product Sub Type]=&apos;NONRECD&apos; OR &quot; +
					  //&quot;[Product Part Number]=&apos;51012&apos; OR [Product Part Number]=&apos;51014&apos; OR [Product Part Number]=&apos;51017&apos;)&quot;;

		bcAsset.ClearToQuery();
		bcAsset.SetViewMode(AllView);
		bcAsset.ActivateField(&quot;Status&quot;);
		bcAsset.ActivateField(&quot;Effective End Date&quot;);
		bcAsset.ActivateField(&quot;Integration Id&quot;);
		bcAsset.SetSearchExpr(sSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		do
		{
			sAssetId      = bcAsset.GetFieldValue(&quot;Id&quot;)
			sAssetEndDate = bcAsset.GetFieldValue(&quot;Effective End Date&quot;);
			sAssetIntegId = bcAsset.GetFieldValue(&quot;Integration Id&quot;);

			bSkipAsset = (sAssetEndDate == null || sAssetEndDate == &quot;&quot; || sAssetEndDate == &quot;undefined&quot;);

			if (!bSkipAsset)
			{
				oEndDate = null;
				oEndDate = new Date(sAssetEndDate);
				iEndDate = oEndDate.getTime();

				bSkipAsset = (iEndDate &gt;= iToday);
			}

			if (!bSkipAsset)
			{
				sSearchExpr = &quot;[Parent Asset Id]=&apos;&quot; + sAssetId + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sAssetStatusInactive + &quot;&apos;&quot;;

				bcChildAsset.ClearToQuery();
				bcChildAsset.SetViewMode(AllView);
				bcChildAsset.SetSearchExpr(sSearchExpr);
				bcChildAsset.ExecuteQuery(ForwardOnly);

				bSkipAsset = bcChildAsset.FirstRecord();
			}

			if (!bSkipAsset)
			{
				sSearchExpr = &quot;[Asset Integration Id]=&apos;&quot; + sAssetIntegId +
							  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled +
							  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusComplete +
							  &quot;&apos; AND [Order Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled +
							  &quot;&apos; AND [Order Status]&lt;&gt;&apos;&quot; + sOrderStatusComplete +
							  &quot;&apos; AND [Order Status]&lt;&gt;&apos;&quot; + sOrderStatusPartiallyCompleted + &quot;&apos;&quot;

				bcItem.ClearToQuery();
				bcItem.SetViewMode(AllView);
				bcItem.SetSearchExpr(sSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);

				bSkipAsset = bcItem.FirstRecord();
			}

			if (!bSkipAsset)
			{
				bcAsset.SetFieldValue(&quot;Status&quot;, sAssetStatusInactive);
				bcAsset.WriteRecord();
			}
		}
		while (bcAsset.NextRecord());
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcItem       = null;
		boOrder      = null;
		oEndDate     = null;
		oToday       = null;
		bcChildAsset = null;
		boChildAsset = null;
		bcAsset      = null;
		boAsset      = null;
	}
}"
			   SEQUENCE="35"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="10/17/2014 10:03:38"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Disconnect"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Disconnect(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var sAccountId = psInputs.GetProperty(&quot;AccntId&quot;);
		var sRefNum1   = psInputs.GetProperty(&quot;RefNum1&quot;);
		var sRefNum2   = psInputs.GetProperty(&quot;RefNum2&quot;);

		if (sRefNum1 != null &amp;&amp; sRefNum1 != &quot;&quot;)
		{
			DisconnectReference(sRefNum1, sAccountId, psOutputs);

			sErrorCode = psOutputs.GetProperty(&quot;Error Code&quot;);
			sErrorText = psOutputs.GetProperty(&quot;Error Message&quot;);

			if (sErrorCode != &quot;0&quot;) return;
		}

		if (sRefNum2 != null &amp;&amp; sRefNum2 != &quot;&quot;)
		{
			DisconnectReference(sRefNum2, sAccountId, psOutputs);

			sErrorCode = psOutputs.GetProperty(&quot;Error Code&quot;);
			sErrorText = psOutputs.GetProperty(&quot;Error Message&quot;);

			if (sErrorCode != &quot;0&quot;) return;
		}
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
	}
}"
			   SEQUENCE="36"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/22/2014 23:00:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="DisconnectReference"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function DisconnectReference(sReferenceNumber, sAccountId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

  		var boAsset        : BusObject   = TheApplication().GetBusObject(&quot;Asset Management&quot;); 
		var bcAsset        : BusComp     = boAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);
		var boOrder        : BusObject   = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;); 
		var bcOrder        : BusComp     = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcItem         : BusComp     = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var boSimpleOrder  : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcSimpleOrder  : BusComp     = boSimpleOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcSimpleItem   : BusComp     = boSimpleOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcSimpleItemXA : BusComp     = boSimpleOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
		var bsManager      : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn    : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut   : PropertySet = TheApplication().NewPropertySet();

		var sRootAssetId     = &quot;&quot;;
		var sAssetIntegId    = &quot;&quot;;
		var sCfgReleasedFlag = &quot;&quot;;
		var sBillAccountId 	 = &quot;&quot;;
		var sOwnerAccountId  = &quot;&quot;;
		var sShopCode        = &quot;&quot;;
		var sDealerCode      = &quot;&quot;;
		var	sOrderId         = &quot;&quot;;
		var bHasItem         = false;
		var sItemId          = &quot;&quot;;
		var bHasItemXA       = false;
		var sOrganizationId  = &quot;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Root Asset Id&quot;);
		bcAsset.SetSearchSpec(&quot;Owner Account Id&quot;,    sAccountId);
		bcAsset.SetSearchSpec(&quot;VF Par MSISDN&quot;,       sReferenceNumber);
		bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sPartNumAmalfiDiscount);
		bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sRootAssetId = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Status&quot;);
		bcAsset.ActivateField(&quot;Billing Account Id&quot;);
		bcAsset.ActivateField(&quot;Owner Account Id&quot;);
		bcAsset.ActivateField(&quot;VF Dealer Code&quot;);
		bcAsset.ActivateField(&quot;VF Originating Shop Code&quot;);
		bcAsset.SetSearchSpec(&quot;Id&quot;, sRootAssetId);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sAssetIntegId	 = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
		sCfgReleasedFlag = bcAsset.GetFieldValue(&quot;Cfg Latest Released Flag&quot;);
		sBillAccountId 	 = bcAsset.GetFieldValue(&quot;Billing Account Id&quot;);
		sOwnerAccountId	 = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);
		sShopCode 	     = bcAsset.GetFieldValue(&quot;VF Originating Shop Code&quot;);
		sDealerCode	     = bcAsset.GetFieldValue(&quot;VF Dealer Code&quot;);

		psManagerIn.SetProperty(&quot;ProcessName&quot;,              &quot;TELCO Process Account Root Asset Action&quot;);
		psManagerIn.SetProperty(&quot;Object Id&quot;,                sOwnerAccountId);
		psManagerIn.SetProperty(&quot;Asset Integration Id&quot;,     sAssetIntegId);
		psManagerIn.SetProperty(&quot;Asset Action&quot;,             &quot;Modify&quot;);
		psManagerIn.SetProperty(&quot;Asset Action Type&quot;,        sActionTypeValModifyOptions);
		psManagerIn.SetProperty(&quot;Reuse Active Order&quot;,       &quot;N&quot;);
		psManagerIn.SetProperty(&quot;SkipGUINavigation&quot;,        &quot;Y&quot;);
		
		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
		
		sOrderId = psManagerOut.GetProperty(&quot;Order Id&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;TELCO Action Reason&quot;);
		bcItem.ActivateField(&quot;VF Logical Reason&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;,      sOrderId);
		bcItem.SetSearchSpec(&quot;Asset Integration Id&quot;, sAssetIntegId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		bcItem.SetFieldValue(&quot;TELCO Action Reason&quot;, sActionReasonModifyOptions);
		bcItem.SetFieldValue(&quot;VF Logical Reason&quot;,   &quot;000&quot;);
		bcItem.WriteRecord();

		bcSimpleOrder.SetViewMode(AllView);
		bcSimpleOrder.ClearToQuery();
		bcSimpleOrder.ActivateField(&quot;VF Prevent Automatic Cancellation&quot;);
		bcSimpleOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcSimpleOrder.ExecuteQuery(ForwardOnly);

		if (!bcSimpleOrder.FirstRecord())
		{
			return;
		}
			
		bcSimpleOrder.SetFieldValue(&quot;VF Prevent Automatic Cancellation&quot;, &quot;Y&quot;);
		bcSimpleOrder.WriteRecord();

		bcSimpleItem.SetViewMode(AllView);
		bcSimpleItem.ClearToQuery();
		bcSimpleItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		bcSimpleItem.SetSearchSpec(&quot;Part Number&quot;,     sPartNumAmalfiDiscount);
		bcSimpleItem.ExecuteQuery(ForwardOnly);

		bHasItem = bcSimpleItem.FirstRecord();

		while(bHasItem)
		{
			sItemId = bcSimpleItem.GetFieldValue(&quot;Id&quot;);

			bcSimpleItem.SetFieldValue(&quot;Action Code&quot;, sItemActionDeleted);
			bcSimpleItem.WriteRecord();

			bcSimpleItemXA.SetViewMode(AllView);
			bcSimpleItemXA.ClearToQuery();
			bcSimpleItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId);
			bcSimpleItemXA.ExecuteQuery(ForwardOnly);

			bHasItemXA = bcSimpleItemXA.FirstRecord();

			while(bHasItemXA)
			{
				bcSimpleItemXA.SetFieldValue(&quot;Action Code&quot;, sItemActionDeleted);
				bcSimpleItemXA.WriteRecord();
				bHasItemXA = bcSimpleItemXA.NextRecord();
			}

			bHasItem = bcSimpleItem.NextRecord();
		}

		AddOrderBusinessUnit(&quot;Vodafone Organization&quot;, sOrderId, psOutputs);

		sErrorCode      = psOutputs.GetProperty(&quot;Error Code&quot;);
		sErrorText      = psOutputs.GetProperty(&quot;Error Message&quot;);
		sOrganizationId = psOutputs.GetProperty(&quot;Organization Id&quot;);

		SetOrderOwnership(sOrderId, sDealerCode, sShopCode, sOrganizationId, psOutputs);

		sErrorCode = psOutputs.GetProperty(&quot;Error Code&quot;);
		sErrorText = psOutputs.GetProperty(&quot;Error Message&quot;);

		psManagerIn.Reset();
		psManagerOut.Reset();

		psManagerIn.SetProperty(&quot;ProcessName&quot;,     &quot;TELCO Async Submit Order Interface WF&quot;);
		psManagerIn.SetProperty(&quot;Order Id&quot;,        sOrderId);
		psManagerIn.SetProperty(&quot;Cancel On Error&quot;, &quot;N&quot;);
		
		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		psManagerOut   = null;
		psManagerIn    = null;
		bsManager      = null;
		bcSimpleItemXA = null;
		bcSimpleItem   = null;
		bcSimpleOrder  = null;
		boSimpleOrder  = null;
		bcItem         = null;
		bcOrder        = null;
		boOrder        = null;
		bcAsset        = null;
  		boAsset        = null;
	}
}"
			   SEQUENCE="37"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Documents"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Documents(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boList     : BusObject = null;
		var bcList     : BusComp   = null;
		var boOrder    : BusObject = null;
		var bcOrderDoc : BusComp   = null;

		var sOrderId      = psInputs.GetProperty(&quot;OrderId&quot;);
		var sTypeAccount  = psInputs.GetProperty(&quot;TypeAccount&quot;);
		var sCustomerType = psInputs.GetProperty(&quot;CustomerType&quot;);
		var sActionType   = psInputs.GetProperty(&quot;ActionType&quot;);
 
		var sOriginSubDealerSR = TheApplication().GetProfileAttr(&quot;OriginSubDealerSR&quot;); //PSANTOS VFTRCBU WA#32 D2
		var sSearchDocs   = &quot;&quot;;
		var bHasRecord    = false;
		var sTemplateName = &quot;&quot;;
		var sDraftName    = &quot;&quot;;
		var sDescription  = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		if (sOriginSubDealerSR != &quot;Y&quot; || sOriginSubDealerSR == null) //PSANTOS VFTRCBU WA#32 D2
		{
			if (sCustomerType == sCustomerTypeConsumer)
			{
				if (sActionType == &quot;112&quot;)
					sSearchDocs = &quot;[Type]=&apos;VF_MNP_DOCUMENTS_CBU&apos; AND [Low]=&apos;Cancel Port In&apos; AND [Language Name]=&apos;Turkish&apos; AND [Active] = &apos;Y&apos;&quot;;
				else
					sSearchDocs = &quot;[Type]=&apos;VF_MNP_DOCUMENTS_CBU&apos; AND [Low]=&apos;Port In&apos; AND [Language Name]=&apos;Turkish&apos; AND [Active] = &apos;Y&apos;&quot;;
			}
			else
			{
				if (sActionType == &quot;112&quot;)
					sSearchDocs = &quot;[Type]=&apos;VF_MNP_DOCUMENTS_CANCELLATION&apos; AND [Language Name]=&apos;Turkish&apos; AND [Active] = &apos;Y&apos;&quot;;
				else
					sSearchDocs = &quot;[Type]=&apos;VF_MNP_DOCUMENTS&apos; AND [Language Name]=&apos;Turkish&apos; AND [Active] = &apos;Y&apos;&quot;;
			}
	
			boList = TheApplication().GetBusObject(&quot;List Of Values&quot;);
			bcList = boList.GetBusComp(&quot;List Of Values&quot;);
	
			bcList.ClearToQuery();
			bcList.ActivateField(&quot;Name&quot;);
			bcList.ActivateField(&quot;Active&quot;);
			bcList.ActivateField(&quot;Value&quot;);
			bcList.ActivateField(&quot;Description&quot;);
			bcList.SetSearchExpr(sSearchDocs);
			bcList.ExecuteQuery(ForwardOnly);
	
			if (!bcList.FirstRecord())
			{
				return;
			}
	
			boOrder    = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
			bcOrderDoc = boOrder.GetBusComp(&quot;VF Mnp Documentum&quot;);
	
			do
			{
				if (sCustomerType == sCustomerTypeConsumer)
				{
					sTemplateName = bcList.GetFieldValue(&quot;Value&quot;);
					sDraftName    = bcList.GetFieldValue(&quot;Name&quot;);
				}
				else
				{
					sTemplateName = bcList.GetFieldValue(&quot;Name&quot;);
					sDraftName    = bcList.GetFieldValue(&quot;Value&quot;);
				}
	
				if (sTypeAccount == &quot;Y&quot; || sCustomerType == sCustomerTypeConsumer)
				{
					sDescription = bcList.GetFieldValue(&quot;Description&quot;);
				}
				else
				{
					if (sActionType == &quot;112&quot;)
						sDescription = &quot;MnpCorporateCancel&quot;;
					else
						sDescription = &quot;MnpCorporateStand&quot;;
				}
	
				bcOrderDoc.NewRecord(NewAfter);
				bcOrderDoc.SetFieldValue(&quot;Template Name&quot;,        sTemplateName);
				bcOrderDoc.SetFieldValue(&quot;Draft Name&quot;,           sDraftName);
				bcOrderDoc.SetFieldValue(&quot;Order Id&quot;,             sOrderId);
				bcOrderDoc.SetFieldValue(&quot;VF Generate Template&quot;, sDescription);
				bcOrderDoc.WriteRecord();
			}
			while (bcList.NextRecord());
		}
	}
	catch (oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;, sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcOrderDoc = null;
		boOrder    = null;
		bcList     = null;
		boList     = null;
	}
}"
			   SEQUENCE="38"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ForbiddenReason"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ForbiddenReason(sMSISDN, sActionTypeLIC, sActionReasonLIC, sSourceSystem, sDealerPosition, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;
	var sForbidden = &quot;N&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		psOutputs.SetProperty(&quot;Forbidden&quot;,     sForbidden);
		
		var boLOV 	 	: BusObject = null;
		var bcLOV 	    : BusComp   = null;
		var sLOVCode   = &quot;&quot;;
		var sHasForbiddenRole = &quot;&quot;;
		
		if (sMSISDN == null || sMSISDN == &quot;&quot; || sActionTypeLIC == null || sActionTypeLIC == &quot;&quot; ||
			sActionReasonLIC == null || sActionReasonLIC == &quot;&quot;)
		{
			return;
		}
		
		sLOVCode = sActionTypeLIC + &quot;-&quot; + sActionReasonLIC;
		
		//ACAMBAS - VFTRCBU-33039 - Start
		
		var sSearchSpec = &quot;[Type]=&apos;VFTRCBU_FORBIDDEN_REASONS&apos; AND [Active]=&apos;Y&apos; AND [Name]=&apos;&quot; + sLOVCode + &quot;&apos; AND [Value]=&apos;&quot; + sLOVCode + &quot;&apos;&quot;;
		
		if(sDealerPosition == &quot;Y&quot;) 
		{
			var sPrefix = sMSISDN.substring(0,2);

			if (sPrefix == &quot;54&quot;) {
				return;
			}
			
			sSearchSpec = sSearchSpec + &quot; AND [Description]=&apos;Dealers&apos;&quot;;
		}
		else 
		{
			if (sSourceSystem==&quot;DUNNING&quot;) {
				return;
			}	
			
			sSearchSpec = sSearchSpec + &quot; AND [Description] IS NULL&quot;;
		}
		//ACAMBAS - VFTRCBU-33039 - End


		boLOV = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		bcLOV = boLOV.GetBusComp(&quot;List Of Values&quot;);

		bcLOV.SetViewMode(AllView);
		bcLOV.ClearToQuery();
		//ACAMBAS - VFTRCBU-33039 - Start
		//bcLOV.ActivateField(&quot;VFTRCBU Visible To User Roles Calc&quot;);
		//bcLOV.ActivateField(&quot;VFTRCBU Role List&quot;);
		bcLOV.ActivateField(&quot;Description&quot;);
		//bcLOV.SetSearchExpr(&quot;[Type]=&apos;VFTRCBU_FORBIDDEN_REASONS&apos; AND [Active]=&apos;Y&apos; AND [Name]=&apos;&quot; + sLOVCode + &quot;&apos; AND [Value]=&apos;&quot; + sLOVCode + &quot;&apos;&quot;)
		bcLOV.SetSearchExpr(sSearchSpec);
		//ACAMBAS - VFTRCBU-33039 - And
		bcLOV.ExecuteQuery(ForwardOnly);

		if (!bcLOV.FirstRecord())
		{
			return;
		}
		else
		{
			//sHasForbiddenRole = bcLOV.GetFieldValue(&quot;VFTRCBU Visible To User Roles Calc&quot;); //VFTRCBU-18707 - HRODRIGUES
			//ACAMBAS: VFTRCBU-22339 - Start
			/*var sDealerPosition = TheApplication().GetProfileAttr(&quot;TELCO.PositionProfile:Agent Type.Dealer&quot;);
 
			if (sDealerPosition == &quot;Y&quot;)		
			{	
				psOutputs.SetProperty(&quot;Forbidden&quot;,&quot;Y&quot;);
			}*/
			sForbidden = &quot;Y&quot;;
			//ACAMBAS: VFTRCBU-22339 - End
		}	
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
		sForbidden = &quot;Y&quot;;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		psOutputs.SetProperty(&quot;Forbidden&quot;, sForbidden);	//ACAMBAS: VFTRCBU-22339
		
		bcLOV = null;
		boLOV = null;
	}
}"
			   SEQUENCE="39"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="05/11/2015 21:15:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAssetBundlePromotionMSISDN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetAssetBundlePromotionMSISDN(Inputs, Outputs)
{
	var sMSISDN = &quot;&quot;;

	try
	{
		var bsManager       : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn     : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut    : PropertySet = TheApplication().NewPropertySet();
		var psFieldListIn   : PropertySet = TheApplication().NewPropertySet();
		var psAttribListIn  : PropertySet = TheApplication().NewPropertySet();
		var psFieldListOut  : PropertySet = null;
		var psAttribListOut : PropertySet = null;

		var i = 0;
		
		var sAccountId = Inputs.GetProperty(&quot;Account Id&quot;); 
		var sPromoInstanceId = Inputs.GetProperty(&quot;Promo Instance Id&quot;); 

		psManagerIn.SetProperty(&quot;Header Id&quot;,          sAccountId);
		psManagerIn.SetProperty(&quot;Bundle Instance Id&quot;, sPromoInstanceId);
		psManagerIn.SetProperty(&quot;Context&quot;,            &quot;Asset&quot;);
		psManagerIn.SetProperty(&quot;Component Type&quot;,     &quot;Mobile&quot;);

		psFieldListIn.SetType(&quot;Field List&quot;);
		psFieldListIn.SetProperty(&quot;VF MSISDN&quot;, &quot;&quot;);
		psManagerIn.AddChild(psFieldListIn);

		psAttribListIn.SetType(&quot;Attribute List&quot;);
		psManagerIn.AddChild(psAttribListIn);

		psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Get Bundle Promotion Components Data WF&quot;);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

		for (i = 0; i&lt;psManagerOut.GetChildCount(); i++)
		{
			if (psManagerOut.GetChild(i).GetType() == &quot;Field Output&quot;)
				psFieldListOut = psManagerOut.GetChild(i);
			if (psManagerOut.GetChild(i).GetType() == &quot;Attribute Output&quot;)
				psAttribListOut = psManagerOut.GetChild(i);
		}

		sMSISDN = psFieldListOut.GetProperty(&quot;VF MSISDN&quot;);

		Outputs.SetProperty(&quot;MSISDN&quot;, sMSISDN);
	}
	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		psAttribListOut = null;
		psFieldListOut = null;
		psAttribListIn = null;
		psFieldListIn  = null;
		psManagerOut   = null;
		psManagerIn    = null;
		bsManager      = null;
	}
}"
			   SEQUENCE="40"
			   UPDATED="01/18/2018 09:49:51"
			   UPDATED_BY="1-FYSRA2I"
			   CREATED="05/07/2015 22:34:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetAssetId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function GetAssetId, &quot;ACS Asset Management&quot; Business Service
function GetAssetId(sMSISDN, sAccountId)
{
	try
	{
		var boAsset : BusObject = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		var sAssetId         = &quot;&quot;;
		var sAssetSearchExpr = &quot;&quot;;

		if (sMSISDN == null || sMSISDN == &quot;&quot; || sAccountId == &quot;&quot; || sAccountId == &quot;&quot;)
		{
			return (sAssetId);
		}

		sAssetSearchExpr = &quot;[VF MSISDN]=&apos;&quot; + sMSISDN + &quot;&apos; AND [Owner Account Id]=&apos;&quot; + sAccountId +
						   &quot;&apos; AND [Status]=&apos;&quot; + sAssetStatusActive + &quot;&apos;&quot;;

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchExpr(sAssetSearchExpr);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (bcAsset.FirstRecord())
		{
			sAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);
		}

		return (sAssetId);
	}
	finally
	{
		bcAsset = null;
		boAsset	= null;
	}
}"
			   SEQUENCE="41"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCaseMPBX"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCaseMPBX(sAssetId, sActionTypeLIC, sOwnerAccountId, sProductPartNum, sAssetIntegId, sRootAssetId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset : BusObject = null;
		var bcAsset : BusComp   = null;
		var sSearchExpr = &quot;&quot;;
		var sCallResult = &quot;OK&quot;;

		if (sActionTypeLIC == &quot;SITransferCross&quot; || sActionTypeLIC == sActionTransferOtherCustomer) //WA#13 RPIRES
		{
			sSearchExpr = &quot;[Root Asset Id] = &apos;&quot; + sAssetId + &quot;&apos; AND [Status] = &apos;&quot; + sAssetStatusActive +
						  //&quot;&apos; AND [VF Product Type] = &apos;&quot; + sProductTypeMPBX + &quot;&apos;&quot;;
						  &quot;&apos; AND [Product Part Number] = &apos;&quot; + sPartNumMPBXService + &quot;&apos;&quot;; //FCARRIL: VFTRCBU-13440
						  
		  	boAsset = TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
			bcAsset = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);

			bcAsset.SetViewMode(AllView);
			bcAsset.ClearToQuery();
			bcAsset.SetSearchExpr(sSearchExpr);
			bcAsset.ExecuteQuery(ForwardOnly);

			if (bcAsset.FirstRecord())
			{
				sErrorCode = &quot;VF_REQ_666_2&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;VF_REQ_666_2&quot;);
				return;
			}
		} 

		if (sActionTypeLIC == &quot;SITransferWith&quot; || sActionTypeLIC == &quot;SITransferCross&quot; || 
			sActionTypeLIC == sActionTransferSameCustomer || sActionTypeLIC == sActionTransferOtherCustomer || //WA#13 RPIRES
			sActionTypeLIC == sActionModifyMSISDN || sActionTypeLIC == sActionSuspendVoluntary ||
			sActionTypeLIC == sActionSuspendCredit || sActionTypeLIC == sActionSuspendFraud ||
			sActionTypeLIC == sActionSuspendMissingDocument || sActionTypeLIC == sActionDeactivateVoluntary ||
			sActionTypeLIC == sActionDeactivateCredit || sActionTypeLIC == sActionDeactivateFraud ||
			sActionTypeLIC == sActionBackwardMigration) //WA#13 RPIRES
		{
			// if i am a MobileLine with access number
			if (sProductPartNum == sPartNumMPBXGroup || sProductPartNum == sPartNumMobileLine)
			{
				if (sProductPartNum == sPartNumMPBXGroup)
					sCallResult = CallCheckMPBX_WF(sOwnerAccountId, sPartNumMPBXService, sAssetIntegId, sRootAssetId);
				else
					sCallResult = CallCheckMPBX_WF(sOwnerAccountId, sPartNumAccessNumber, sAssetIntegId, sRootAssetId); //FCARRIL: VFTRCBU-13440

				if( sCallResult == &quot;KO&quot;)	
				{
					if (sProductPartNum == sPartNumMPBXGroup)
						sErrorCode = &quot;VF_REQ_666_4&quot;;
					else
						sErrorCode = &quot;VF_REQ_666_3&quot;

					sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
					return;
				}
			}				
		}	 
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="42"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetCurrentDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetCurrentDate()
{
	//Created due to Oracle Bug 10589024 : [CR#12-1XHF9OH][FR#12-1XHF9P2] CLIB LIBRARY AND DATE OBJECT HAVE DIFFERENT RESUL
	//Date constructor does not work properly in HP-UX
	var currentDate:chars = &quot;&quot;;

	Clib.strftime(currentDate, &apos;%m/%d/%Y %H:%M:%S&apos;, Clib.localtime(Clib.time()));

	return new Date(currentDate);
}"
			   SEQUENCE="43"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="04/09/2015 23:33:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetGolfUserName"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetGolfUserName(Inputs, Outputs)
{
	try
	{
		var boParameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp   = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		var boEmployee  : BusObject = null;
		var bcEmployee  : BusComp   = null;
		var sDefaultUserName = Inputs.GetProperty(&quot;DefaultUserName&quot;);
		var sDealerCode = Inputs.GetProperty(&quot;DealerCode&quot;);

		var sUserName     = &quot;&quot;;
		var sGolfPosition = TheApplication().PositionName();
		var sGolfSIMCard  = &quot;&quot;;
		var sSearchExpr   = &quot;&quot;;

		sUserName = sDefaultUserName;

		if (sGolfPosition == null || sGolfPosition == &quot;&quot;)
		{
			Outputs.SetProperty(&quot;UserName&quot;, sUserName);
			return;
		}

		sSearchExpr = &quot;[Function]=&apos;GolfProject_SimCard&apos; AND [Name]=&apos;GolfProject&apos; AND [Condition1]=&apos;&quot; + sGolfPosition + &quot;&apos;&quot;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.ActivateField(&quot;Condition2&quot;);
		bcParameter.SetSearchExpr(sSearchExpr);
		bcParameter.ExecuteQuery(ForwardOnly);  

		if (!bcParameter.FirstRecord())
		{
			Outputs.SetProperty(&quot;UserName&quot;, sUserName);
			return;
		}

		sGolfSIMCard = bcParameter.GetFieldValue(&quot;Condition2&quot;);
		
		if (sGolfSIMCard == null || sGolfSIMCard == &quot;&quot; || sGolfSIMCard != &quot;True&quot;)
		{
			Outputs.SetProperty(&quot;UserName&quot;, sUserName);
			return;
		}

		if (sDealerCode == null || sDealerCode == &quot;&quot;)
		{
			Outputs.SetProperty(&quot;UserName&quot;, sUserName);
			return;
		}

		boEmployee = TheApplication().GetBusObject(&quot;Employee&quot;);
		bcEmployee = boEmployee.GetBusComp(&quot;Employee&quot;);

		bcEmployee.SetViewMode(AllView);
		bcEmployee.ClearToQuery();
		bcEmployee.ActivateField(&quot;Login Name&quot;);
		bcEmployee.SetSearchSpec(&quot;VF Dealer Code&quot;, sDealerCode);
		bcEmployee.ExecuteQuery(ForwardOnly);

		if (!bcEmployee.FirstRecord())
		{
			Outputs.SetProperty(&quot;UserName&quot;, sUserName);
			return;
		}

		sUserName = bcEmployee.GetFieldValue(&quot;Login Name&quot;);
		
		Outputs.SetProperty(&quot;UserName&quot;, sUserName);

	}
	finally
	{
		bcEmployee  = null;
		boEmployee  = null;
		bcParameter = null;
		boParameter = null;
	}
}"
			   SEQUENCE="44"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="11/09/2015 13:59:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetOrderBundlePromotionMSISDN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetOrderBundlePromotionMSISDN(sOrderId, sPromoInstanceId)
{
	var sMSISDN = &quot;&quot;;

	try
	{
		var bsManager       : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn     : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut    : PropertySet = TheApplication().NewPropertySet();
		var psFieldListIn   : PropertySet = TheApplication().NewPropertySet();
		var psAttribListIn  : PropertySet = TheApplication().NewPropertySet();
		var psFieldListOut  : PropertySet = null;
		var psAttribListOut : PropertySet = null;

		var i = 0;

		psManagerIn.SetProperty(&quot;Header Id&quot;,          sOrderId);
		psManagerIn.SetProperty(&quot;Bundle Instance Id&quot;, sPromoInstanceId);
		psManagerIn.SetProperty(&quot;Context&quot;,            &quot;Order&quot;);
		psManagerIn.SetProperty(&quot;Component Type&quot;,     &quot;Mobile&quot;);

		psFieldListIn.SetType(&quot;Field List&quot;);
		psFieldListIn.SetProperty(&quot;MSISDN&quot;, &quot;&quot;);
		psManagerIn.AddChild(psFieldListIn);

		psAttribListIn.SetType(&quot;Attribute List&quot;);
		psManagerIn.AddChild(psAttribListIn);

		psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Get Bundle Promotion Components Data WF&quot;);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

		for (i = 0; i&lt;psManagerOut.GetChildCount(); i++)
		{
			if (psManagerOut.GetChild(i).GetType() == &quot;Field Output&quot;)
				psFieldListOut = psManagerOut.GetChild(i);
			if (psManagerOut.GetChild(i).GetType() == &quot;Attribute Output&quot;)
				psAttribListOut = psManagerOut.GetChild(i);
		}

		sMSISDN = psFieldListOut.GetProperty(&quot;MSISDN&quot;);

		return sMSISDN;
	}
	finally
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		psAttribListOut = null;
		psFieldListOut = null;
		psAttribListIn = null;
		psFieldListIn  = null;
		psManagerOut   = null;
		psManagerIn    = null;
		bsManager      = null;
	}
}"
			   SEQUENCE="45"
			   UPDATED="01/18/2018 09:52:39"
			   UPDATED_BY="1-FYSRA2I"
			   CREATED="12/01/2014 11:49:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetOrganizationId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetOrganizationId(sOrganizationName)
{
	try
	{
		var boOrganization	: BusObject = TheApplication().GetBusObject(&quot;Organization&quot;);
		var bcOrganization  : BusComp   = boOrganization.GetBusComp(&quot;Organization&quot;);
		var sOrganizationId = &quot;&quot;;

		if (sOrganizationName != null &amp;&amp; sOrganizationName != &quot;&quot;)
		{
			bcOrganization.SetViewMode(AllView);
			bcOrganization.ClearToQuery();
			bcOrganization.ActivateField(&quot;Name&quot;);
			bcOrganization.SetSearchSpec(&quot;Name&quot;, sOrganizationName);
			bcOrganization.ExecuteQuery(ForwardOnly);

			if (bcOrganization.FirstRecord())
			{
				sOrganizationId = bcOrganization.GetFieldValue(&quot;Id&quot;);
			}
		}

		return(sOrganizationId);
	}
	finally
	{
		bcOrganization 	= null;
		boOrganization	= null;
	}
}"
			   SEQUENCE="46"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/22/2014 23:00:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetSelectedBillingAccount"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetSelectedBillingAccount(psInputs, psOutputs)
{
	var sErrorCode         = &quot;0&quot;;
	var sErrorText         = &quot;&quot;;
	var sBillAccountId     = &quot;&quot;;
	var sBillAccountCode   = &quot;&quot;;
	var sCustomerAccountId = &quot;&quot;;
	var boBillAccount      = null;
	var bcBillAccount      = null;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,           sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,        sErrorText);
		psOutputs.SetProperty(&quot;Billing Account Id&quot;,   sBillAccountId);
		psOutputs.SetProperty(&quot;Billing Account Code&quot;, sBillAccountCode);
		psOutputs.SetProperty(&quot;Customer Account Id&quot;,  sCustomerAccountId);

		var sInvokeFromApplet = psInputs.GetProperty(&quot;InvokeFromApplet&quot;);
		var sSelectionBusComp = psInputs.GetProperty(&quot;SelectionBusComp&quot;);

		if (sInvokeFromApplet == &quot;Y&quot;)
		{
			boBillAccount = TheApplication().ActiveBusObject();

			if (boBillAccount == null) return;

			if (sSelectionBusComp == null || sSelectionBusComp == &quot;&quot;)
				sSelectionBusComp = &quot;Billing Account&quot;;

			bcBillAccount = boBillAccount.GetBusComp(sSelectionBusComp);

			if (bcBillAccount == null) return;
		}
		else
		{
			return;
		}

		sBillAccountId     = bcBillAccount.GetFieldValue(&quot;Id&quot;);
		sBillAccountCode   = bcBillAccount.GetFieldValue(&quot;Account Code&quot;);
		sCustomerAccountId = bcBillAccount.GetFieldValue(&quot;Parent Account Id&quot;);
	}
	catch(oException)
	{
		sErrorCode = sErrorCode + oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,           sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,        sErrorText);
		psOutputs.SetProperty(&quot;Billing Account Id&quot;,   sBillAccountId);
		psOutputs.SetProperty(&quot;Billing Account Code&quot;, sBillAccountCode);
		psOutputs.SetProperty(&quot;Customer Account Id&quot;,  sCustomerAccountId);

		bcBillAccount = null;
		boBillAccount = null;
	}
}"
			   SEQUENCE="47"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="10/01/2014 20:08:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetSelectedCustomer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetSelectedCustomer(psInputs, psOutputs)
{
	var sErrorCode       = &quot;0&quot;;
	var sErrorText       = &quot;&quot;;
	var sAccountId       = &quot;&quot;;
	var sAccountNumber   = &quot;&quot;;
	var sMarketClass     = &quot;&quot;;
	var sMarketClassLIC  = &quot;&quot;;
	var boAccount        = null;
	var bcAccount        = null;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,              sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,           sErrorText);
		psOutputs.SetProperty(&quot;Customer Account Id&quot;,     sAccountId);
		psOutputs.SetProperty(&quot;Customer Account Number&quot;, sAccountNumber);
		psOutputs.SetProperty(&quot;Market Class&quot;,            sMarketClass);
		psOutputs.SetProperty(&quot;Market Class LIC&quot;,        sMarketClassLIC);

		var sInvokeFromApplet = psInputs.GetProperty(&quot;InvokeFromApplet&quot;);
		var sSelectionBusComp = psInputs.GetProperty(&quot;SelectionBusComp&quot;);

		if (sInvokeFromApplet == &quot;Y&quot;)
		{
			boAccount = TheApplication().ActiveBusObject();

			if (boAccount == null) return;

			if (sSelectionBusComp == null || sSelectionBusComp == &quot;&quot;)
				sSelectionBusComp = &quot;Account&quot;;

			bcAccount = boAccount.GetBusComp(sSelectionBusComp);

			if (bcAccount == null) return;
		}
		else
		{
			return;
		}

		sAccountId      = bcAccount.GetFieldValue(&quot;Id&quot;);
		sAccountNumber  = bcAccount.GetFieldValue(&quot;CSN&quot;);
		sMarketClass    = bcAccount.GetFieldValue(&quot;Market Class&quot;);
		sMarketClassLIC = bcAccount.GetFieldValue(&quot;VF PRM Customer Type&quot;);
	}
	catch(oException)
	{
		sErrorCode = sErrorCode + oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,              sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,           sErrorText);
		psOutputs.SetProperty(&quot;Customer Account Id&quot;,     sAccountId);
		psOutputs.SetProperty(&quot;Customer Account Number&quot;, sAccountNumber);
		psOutputs.SetProperty(&quot;Market Class&quot;,            sMarketClass);
		psOutputs.SetProperty(&quot;Market Class LIC&quot;,        sMarketClassLIC);

		bcAccount = null;
		boAccount = null;
	}
}"
			   SEQUENCE="48"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="10/01/2014 20:08:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetSelectedSubscriber"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetSelectedSubscriber(psInputs, psOutputs)
{
	var sErrorCode        = &quot;0&quot;;
	var sErrorText        = &quot;&quot;;
	var sAssetId          = &quot;&quot;;
	var sRootAssetId      = &quot;&quot;;
	var sAssetIntegId     = &quot;&quot;;
	var sRootAssetIntegId = &quot;&quot;;
	var sOwnerAccountId   = &quot;&quot;;
	var sAssetMethod      = &quot;&quot;;
	var sActionTypeLIC    = &quot;&quot;;
	var boAsset           = null;
	var bcAsset           = null;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,             sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,          sErrorText);
		psOutputs.SetProperty(&quot;Asset Id&quot;,               sAssetId);
		psOutputs.SetProperty(&quot;Root Asset Id&quot;,          sRootAssetId);
		psOutputs.SetProperty(&quot;Integration Id&quot;,         sAssetIntegId);
		psOutputs.SetProperty(&quot;Root Integration Id&quot;,    sRootAssetIntegId);
		psOutputs.SetProperty(&quot;Owner Account Id&quot;,       sOwnerAccountId);
		psOutputs.SetProperty(&quot;Picked Method&quot;,          sAssetMethod);
		psOutputs.SetProperty(&quot;Picked Action Type LIC&quot;, sActionTypeLIC);

		var sInvokeFromApplet = psInputs.GetProperty(&quot;InvokeFromApplet&quot;);
		var sSelectionBusComp = psInputs.GetProperty(&quot;SelectionBusComp&quot;);

		if (sInvokeFromApplet == &quot;Y&quot;)
		{
			boAsset = TheApplication().ActiveBusObject();

			if (boAsset == null) return;

			if (sSelectionBusComp == null || sSelectionBusComp == &quot;&quot;)
				sSelectionBusComp = &quot;Asset Mgmt - Asset - Header&quot;;

			bcAsset = boAsset.GetBusComp(sSelectionBusComp);

			if (bcAsset == null) return;
		}
		else
		{
			return;
		}

		if (sSelectionBusComp == &quot;VF Groups BC&quot;)
		{
			sAssetId          = bcAsset.GetFieldValue(&quot;Id&quot;);
			sRootAssetId      = bcAsset.GetFieldValue(&quot;Id&quot;);
			sAssetIntegId     = bcAsset.GetFieldValue(&quot;VF Int Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;VF Int Id&quot;);
			sOwnerAccountId   = bcAsset.GetFieldValue(&quot;VF Owner Account Id&quot;);
			sAssetMethod      = bcAsset.GetFieldValue(&quot;VF Sub Method&quot;);
			sActionTypeLIC    = bcAsset.GetFieldValue(&quot;TELCO Picked Action Type LIC&quot;);
		}
		else
		{
			sAssetId          = bcAsset.GetFieldValue(&quot;Id&quot;);
			sRootAssetId      = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);
			sAssetIntegId     = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
			sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
			sOwnerAccountId   = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);
			sAssetMethod      = bcAsset.GetFieldValue(&quot;SubMethod&quot;);
			sActionTypeLIC    = bcAsset.GetFieldValue(&quot;TELCO Picked Action Type LIC&quot;);
		}
	}
	catch(oException)
	{
		sErrorCode = sErrorCode + oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,             sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;,          sErrorText);
		psOutputs.SetProperty(&quot;Asset Id&quot;,               sAssetId);
		psOutputs.SetProperty(&quot;Root Asset Id&quot;,          sRootAssetId);
		psOutputs.SetProperty(&quot;Integration Id&quot;,         sAssetIntegId);
		psOutputs.SetProperty(&quot;Root Integration Id&quot;,    sRootAssetIntegId);
		psOutputs.SetProperty(&quot;Owner Account Id&quot;,       sOwnerAccountId);
		psOutputs.SetProperty(&quot;Picked Method&quot;,          sAssetMethod);
		psOutputs.SetProperty(&quot;Picked Action Type LIC&quot;, sActionTypeLIC);

		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="49"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="10/01/2014 20:08:32"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GoToView"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GoToView (Inputs, Outputs)
{
	try
	{
		var strViewName = Inputs.GetProperty(&quot;View Name&quot;);
		var strObjectId = Inputs.GetProperty(&quot;Object Id&quot;);
		var strBusObj  = Inputs.GetProperty(&quot;Business Object&quot;);
		var strBusComp = Inputs.GetProperty(&quot;Business Component&quot;);
		
		var bo : BusObject = TheApplication().GetBusObject(strBusObj);
		var bc : BusComp = bo.GetBusComp(strBusComp);
		
		bc.ClearToQuery();
		bc.SetViewMode(AllView);
		bc.SetSearchSpec(&quot;Id&quot;, strObjectId);
		bc.ExecuteQuery(ForwardBackward);
		
		TheApplication().GotoView(strViewName, bo);
	}
	finally
	{
		bc = null;
		bo = null;
	}
}"
			   SEQUENCE="50"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="08/02/2015 21:18:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="InsertDocumentsPRMSubDealer"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function InsertDocumentsPRMSubDealer(psInputs, psOutputs)
{
	//PSANTOS - VFTRCBU WA#32 D2 - iCCB integration - Method created to allow the creation of the documents records related to a Port In Order
	//based in Method function used in &quot;as is process&quot;
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;
	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;, sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		var sOrderId = psInputs.GetProperty(&quot;OrderId&quot;);
		var sActionType = psInputs.GetProperty(&quot;ActionType&quot;);
		var boList : BusObject;
		var bcList : BusComp;
		var boOrder : BusObject;
		var bcOrderDoc : BusComp;
		var sSearchDocs = &quot;&quot;;
		var bHasRecord = false;
		var sTemplateName = &quot;&quot;;
		var sDraftName = &quot;&quot;;
		var sDescription = &quot;&quot;;
		
		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}
		boList = TheApplication().GetBusObject(&quot;List Of Values&quot;);
		bcList = boList.GetBusComp(&quot;List Of Values&quot;);
		boOrder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		bcOrderDoc = boOrder.GetBusComp(&quot;VF Mnp Documentum&quot;);
	
		if (sActionType == TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;SR_AREA&quot;,&quot;MNP PORT-IN CANCELLATION&quot;))
		{
			sSearchDocs = &quot;[Type]=&apos;VF_MNP_DOCS_CANCELLATION_CBU&apos; AND [Language] = &apos;&quot; + TheApplication().InvokeMethod(&quot;Language&quot;) + &quot;&apos; AND [Active] = &apos;Y&apos;&quot;;
		}
		else
		{
			sSearchDocs = &quot;[Type]=&apos;VF_MNP_DOCUMENTS_CBU&apos; AND [Low] = &apos;Port In&apos; AND [Language] = &apos;&quot; + TheApplication().InvokeMethod(&quot;Language&quot;) + &quot;&apos; AND [Active] = &apos;Y&apos;&quot;;
		}
		
		with(bcList)
		{
			SetViewMode(AllView);
			ClearToQuery();
			ActivateField(&quot;Name&quot;);
			ActivateField(&quot;Value&quot;);
			ActivateField(&quot;Description&quot;);
			ActivateField(&quot;Language&quot;);
			ActivateField(&quot;Active&quot;);
			SetSearchExpr(sSearchDocs);
			ExecuteQuery(ForwardOnly);

			bHasRecord = FirstRecord();
			
			while (bHasRecord)
			{
				sTemplateName = GetFieldValue(&quot;Value&quot;);		
				sDraftName = GetFieldValue(&quot;Name&quot;);			
				sDescription = GetFieldValue(&quot;Description&quot;);
				bcOrderDoc.NewRecord(NewAfter);
				bcOrderDoc.SetFieldValue(&quot;Template Name&quot;, sTemplateName);
				bcOrderDoc.SetFieldValue(&quot;Draft Name&quot;, sDraftName);
				bcOrderDoc.SetFieldValue(&quot;Order Id&quot;, sOrderId);
				bcOrderDoc.SetFieldValue(&quot;VF Generate Template&quot;, sDescription);
				bcOrderDoc.WriteRecord();
				bHasRecord = NextRecord();
			}
		}
	}
	catch (oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;, sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		bcList = null;
		boList = null;
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		bcOrderDoc = null;
		boOrder = null;
		//bcOrderDoc = null;
	}
}"
			   SEQUENCE="51"
			   UPDATED="01/18/2018 09:55:07"
			   UPDATED_BY="1-FYSRA2I"
			   CREATED="08/02/2015 21:18:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="MNPUpdateOrderRootItemsByTA"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function MNPUpdateOrderRootItemsByTA(psInputs, psOutputs)
{  
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 *  Description:
 *   	Invoked by OSM via WS:&quot;TELCO SiebelMessage Dispatcher WF&quot; EAI Request Type=&quot;OM MNP PortIn TA Update Order&quot;.
 *      In the FD Port-In scenario context (facilitation map:interface 15), it updates the ROLIs with the message data 
 *      coming from the TA regarding the accepted/rejected Root Line Items to be ported in to vodafone. Data to be updated: 
 *		1) Status of ROLIs and child OLIs				(Order entry - Line Items::Status)
 *      2) Rejection Reason of ROLIs and child OLIs    	(Order entry - Line Items::VF Cancellation Reason)
 *		3) Porting Date of Order (same for all ROLIs)	(Order Entry - Orders::Porting Date Time)
 *
 *      Some logic retrieved from deprecated interface WS:&apos;VFOrderResponseService&apos;-&gt;WF:&apos;XWF Inbound Service Item&apos;-&gt; BS-&apos;VF Update Line Items::UpdateLineItems&apos;
 * 
 *  Arguments:
 *    	Input : OrderId, PortId, property set containing the ListOfRootItem.  
 *		Output: property set SiebelMessage &quot;compliant&quot; with error code and error message
 *
 *  History:
 *         Date       Who       Comments
 *      ------------------------------------
 *      2015-02-25 - Celfocus   First version
* **************************************************************************/

	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		var bsSOPS=TheApplication().GetService(&quot;SIS OM PMT Service&quot;);
		var psInRBC=TheApplication().NewPropertySet();
		var psOutRBC=TheApplication().NewPropertySet();
		var psInANGO=TheApplication().NewPropertySet();
		var psOutANGO=TheApplication().NewPropertySet();
		
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var psWFInput           = TheApplication().NewPropertySet();
		var psWFOutput          = TheApplication().NewPropertySet();
		var psWF2Input          = TheApplication().NewPropertySet();
		var psWF2Output         = TheApplication().NewPropertySet();
		var bsWFManager         = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psExInput           = TheApplication().NewPropertySet();
		var psExOutput          = TheApplication().NewPropertySet();
		var bsExHierar          = TheApplication().GetService(&quot;VF Extract Hierarchy BS&quot;)
		var boOrder             = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcMainOrder         = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcItem              = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var bcOrder             = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var sOrderId            = psInputs.GetProperty(&quot;OrderId&quot;);
		var sPortId             = psInputs.GetProperty(&quot;PortId&quot;);
		var pListOfRootItem     = psInputs.GetChild(0);
		var totListOfRootItems	= psInputs.GetChild(0).GetChildCount();

		var sRootItemId                 = &quot;&quot;;
		var sPortInROLIStatus           = &quot;&quot;;
		var sPortInROLICutOverDate      = &quot;&quot;;
		var sPortInOrderCutOverDate     = &quot;&quot;;
		var sPortInROLIRejectReasonCode = &quot;&quot;;
		var sPortResponse               = &quot;&quot;;
		var sPromIntanceId              = &quot;&quot;;
		var sRootItemSearchExpr         = &quot;&quot;;
		var sItemSearchExpr             = &quot;&quot;;
		var sOLIId                      = &quot;&quot;;
		var sAccountPaymentType			= &quot;&quot;;
		var isRecord;

		if (sOrderId != null &amp;&amp; sOrderId != &quot;&quot;)
		{
			bcMainOrder.SetViewMode(AllView);
			bcMainOrder.ClearToQuery();
			bcMainOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);		
			bcMainOrder.ExecuteQuery(ForwardOnly);
			bcMainOrder.FirstRecord();
		}

		/*** Iterate and update ROLIs and OLIs fields Status Rejection Reason with inbound message data ***/
		for (var i = 0 ; i &lt; totListOfRootItems ; i++)
		{
			sRootItemId                 = &quot;&quot;;
			sPortInROLIStatus           = &quot;&quot;;
			sPortInROLICutOverDate      = &quot;&quot;;
			sPortInROLIRejectReasonCode = &quot;&quot;;
			sPortResponse               = &quot;&quot;;
			sPromIntanceId              = &quot;&quot;;
			sRootItemSearchExpr         = &quot;&quot;;
			sItemSearchExpr             = &quot;&quot;;
			sAccountPaymentType			= &quot;&quot;;

			sRootItemId                 = pListOfRootItem.GetChild(i).GetProperty(&quot;RootItemId&quot;);
			sPortInROLIStatus           = pListOfRootItem.GetChild(i).GetProperty(&quot;PortInROLIStatus&quot;);
			sPortInROLIRejectReasonCode = pListOfRootItem.GetChild(i).GetProperty(&quot;PortInROLIRejectReasonCode&quot;);
			sPortInROLICutOverDate      = pListOfRootItem.GetChild(i).GetProperty(&quot;PortInROLICutOverDate&quot;);
			sPortResponse               = pListOfRootItem.GetChild(i).GetProperty(&quot;PortResponse&quot;);
			sAccountPaymentType			= pListOfRootItem.GetChild(i).GetProperty(&quot;AccountPaymentType&quot;);
      
			if (sPortInROLICutOverDate != &quot;&quot;)
			{
				sPortInOrderCutOverDate = sPortInROLICutOverDate;
			}
				if (sRootItemId != &quot;&quot; &amp;&amp; sRootItemId != null)//RMENEZES | VFTRCBU-36691
				{
					bcItem.SetViewMode(AllView);
					bcItem.ClearToQuery();
					bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
					bcItem.SetSearchSpec(&quot;Id&quot;, sRootItemId);
					bcItem.ExecuteQuery(ForwardOnly);

					if (bcItem.FirstRecord())
					{
						sPromIntanceId = bcItem.GetFieldValue(&quot;Prod Prom Instance Id&quot;);

						if (sPromIntanceId != null &amp;&amp; sPromIntanceId != &quot;&quot; &amp;&amp; sOrderId != null &amp;&amp; sOrderId != &quot;&quot;)
						{
							sRootItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
												  &quot;&apos; AND [Root Order Item Id]=[Id] AND &quot; +
												  &quot;([Prod Prom Instance Id]=&apos;&quot; + sPromIntanceId + &quot;&apos; OR&quot; +
												  &quot; [Asset Integration Id]=&apos;&quot; + sPromIntanceId + &quot;&apos;)&quot;;

							bcItem.SetViewMode(AllView);
							bcItem.ClearToQuery();
							bcItem.SetSearchExpr(sRootItemSearchExpr);
							bcItem.ExecuteQuery(ForwardOnly);
							
							if (bcItem.FirstRecord())
							{
								sItemSearchExpr  = &quot;[Root Order Item Id]=&apos;&quot; + bcItem.GetFieldValue(&quot;Id&quot;) + &quot;&apos;&quot;;

								while (bcItem.NextRecord())
								{
									sItemSearchExpr = sItemSearchExpr +
													  &quot; OR [Root Order Item Id]=&apos;&quot; + bcItem.GetFieldValue(&quot;Id&quot;) + &quot;&apos;&quot;;
								}
							}
						}
					}

					if (sItemSearchExpr == null || sItemSearchExpr == &quot;&quot;)
					{
						sItemSearchExpr = &quot;[Root Order Item Id]=&apos;&quot; + sRootItemId + &quot;&apos;&quot;;
					}

					bcItem.SetViewMode(AllView);
					bcItem.ClearToQuery();
					bcItem.ActivateField(&quot;Status&quot;);		
					bcItem.ActivateField(&quot;VF Cancellation Reason&quot;);
					bcItem.ActivateField(&quot;VF Cancel Flag&quot;);
					bcItem.ActivateField(&quot;VF Port Response&quot;);
					bcItem.ActivateField(&quot;VF Account Pay Type&quot;);
					bcItem.SetSearchExpr(sItemSearchExpr);
					bcItem.ExecuteQuery(ForwardOnly);
					isRecord = bcItem.FirstRecord();

					while (isRecord)
					{
						sOLIId = bcItem.GetFieldValue(&quot;Id&quot;);
						
						if (sPortInROLIStatus != null &amp;&amp; sPortInROLIStatus != &quot;&quot;)
						{
							bcItem.SetFieldValue(&quot;Status&quot;, sPortInROLIStatus);
							bcItem.SetFieldValue(&quot;VF Cancellation Reason&quot;, &quot;&quot;);
						}

						if (sPortResponse != null &amp;&amp; sPortResponse != &quot;&quot;)
						{
							bcItem.SetFieldValue(&quot;VF Port Response&quot;, sPortResponse);
						}

						if (sPortInROLIRejectReasonCode != null &amp;&amp; sPortInROLIRejectReasonCode != &quot;&quot;)
						{
							// WA#18 - Begin:Logic copied from deprecated interface
							//EBU CR 247
							if (sPortId != null &amp;&amp; sPortId != &quot;&quot; &amp;&amp; (sOLIId == sRootItemId) /*WA#18-Only run WF for ROLI */ ) // TLG 618
							{
								psWFInput.Reset();
								psWFOutput.Reset();
								psWFInput.SetProperty(&quot;ProcessName&quot;, &quot;VF MNP Error Management Create Request Process&quot;);
								psWFInput.SetProperty(&quot;PortID&quot;,      sPortId);
								psWFInput.SetProperty(&quot;ErrorCode&quot;,   sPortInROLIRejectReasonCode);
								bsWFManager.InvokeMethod(&quot;RunProcess&quot;, psWFInput, psWFOutput);
							}
							// WA#18 - End:Logic copied from deprecated interface
					
							//JIRA-21944:Begin
							//a)if code block was moved up, so as to be executed before the SetFieldValue(&amp;quot;Status&amp;quot;) that follows (which triggers a RTE). 
							//b)Added SIS OM PMT Service::RefreshBusComp method  
							psInRBC.SetProperty(&quot;Business Object Name&quot;,&quot;X Order Entry&quot;);
							psInRBC.SetProperty(&quot;Business Component Name&quot;,&quot;HP Submit - Order Entry - Line Items&quot;);
							bsSOPS.InvokeMethod(&quot;Refresh Business Component&quot;,psInRBC,psOutRBC);
							//JIRA-21944:End
							
							bcItem.SetFieldValue(&quot;VF Cancellation Reason&quot;, TheApplication().InvokeMethod (&quot;LookupValue&quot;, &quot;MNP_REJECTION_REASON&quot;, sPortInROLIRejectReasonCode));
						}
						
						if (sPortInROLIStatus != null || sPortInROLIStatus != &quot;&quot;)
						{
						  bcItem.SetFieldValue(&quot;Status&quot;, sPortInROLIStatus);

						  if (sPortInROLIStatus != &quot;Rejected&quot; &amp;&amp; sPortInROLIStatus != &quot;Cancelled&quot; ) // JIRA-VFTRCBU-23843  //JIRA-30236
						  {
							bcItem.SetFieldValue(&quot;VF Cancellation Reason&quot;, &quot;&quot;);
						  }
						  //JIRA-30236:20160615:Begin
						  else if (sPortInROLIStatus == &quot;Cancelled&quot;)
						  {
							bcItem.SetFieldValue(&quot;VF Cancel Flag&quot;, &quot;Y&quot;);
						  }
						  //JIRA-30236:20160615:End
						  /*+++ JIRA-26030: Begin:Set Root Port In fields VF Cancel Flag and VF Cancellation Reason to have these fields updated according to the related Port In Cancellation Root values  +++ */
						  else  
						  {
							if (sPortId != null &amp;&amp; sPortId != &quot;&quot; &amp;&amp; (sOLIId == sRootItemId)/*WA#18-Only run WF for ROLI */ ) 
							{
							  psWF2Input.Reset(); 
							  psWF2Output.Reset();
							  psWF2Input.SetProperty(&quot;ProcessName&quot;, &quot;VFTRCBU Occurred MNP Port In Cancellation for MNP Port In ROLI WF&quot;);
							  psWF2Input.SetProperty(&quot;Root Item Id&quot;,sRootItemId);
							  psWF2Input.SetProperty(&quot;Object Id&quot;,   sOrderId);
							  bsWFManager.InvokeMethod(&quot;RunProcess&quot;, psWF2Input, psWF2Output);
							  
							  // if the Port In Root has an associated Port In Cancellation Root, then update its cancel flag and cancellation reason according to the values of Port In Cancellation Root
							  if (psWF2Output.GetProperty(&quot;UpdPortInCancelFlg&quot;) == &quot;Y&quot;) 
							  {
								// Update Port In Root field &quot;VF Cancel Flag&quot; with corresponding value from Port In Cancellation Root field 
								bcItem.SetFieldValue(&quot;VF Cancel Flag&quot;, &quot;Y&quot;);

								// Update Port In Root field &quot;VF Cancellation Reason&quot; with corresponding value from Port In Cancellation Root field 
								psInANGO.Reset(); 
								psOutANGO.Reset();
								psInANGO.SetProperty(&quot;LOV&quot;,&quot;MNP_REJECTION_REASON&quot;); 
								psInANGO.SetProperty(&quot;Val&quot;, psWF2Output.GetProperty(&quot;VFCancellationReason&quot;)); 
								TheApplication().GetService(&quot;ACS NI General Operations&quot;).InvokeMethod(&quot;LookupName&quot;, psInANGO, psOutANGO);
								if (psOutANGO.GetProperty(&quot;Name&quot;) != null &amp;&amp; psOutANGO.GetProperty(&quot;Name&quot;) != &quot;&quot;)
								  bcItem.SetFieldValue(&quot;VF Cancellation Reason&quot;, TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;MNP_REJECTION_REASON&quot;, psOutANGO.GetProperty(&quot;Name&quot;)));
							  }
							}  
						  }
						  /* ---  JIRA-26030: End  --- */
						}
			
						if (sPortResponse != null || sPortResponse != &quot;&quot;)
						{
						  bcItem.SetFieldValue(&quot;VF Port Response&quot;, sPortResponse);
						}
							
						if(sOLIId == sRootItemId)
						{
							if (sPortInROLIRejectReasonCode == &quot;ERROR91&quot;)
							{ 
								bcItem.SetFieldValue (&quot;VF Account Pay Type&quot;, &quot;PostPaid&quot;);
							}
							else if ( sAccountPaymentType == null || sAccountPaymentType == &quot;&quot; || sAccountPaymentType.length ==0 ){}
							else
							{
								bcItem.SetFieldValue (&quot;VF Account Pay Type&quot;, sAccountPaymentType);
							}
						}

						isRecord = bcItem.NextRecord();
					}
				}
		}//! for

		/*** Update Order&apos;s field &quot;Porting Date Time&quot; with inbound message data ***/
		if (sOrderId != null &amp;&amp; sOrderId != &quot;&quot; &amp;&amp; sPortInOrderCutOverDate != &quot;&quot;)
		{
			bcOrder.SetViewMode(AllView);
			bcOrder.ClearToQuery();
			bcOrder.ActivateField(&quot;Porting Date Time&quot;);
			bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
			bcOrder.ExecuteQuery(ForwardOnly);

			if (bcOrder.FirstRecord())
			{
				// WA#18 - Begin:Logic copied from deprecated interface
				//Added for r142 wp16
				psExInput.SetProperty(&quot;OrderId&quot;, sOrderId);
				bsExHierar.InvokeMethod(&quot;loggingExtractMNPIn&quot;, psExInput, psExOutput);
				//end added code
				// WA#18 - End:Logic copied from deprecated interface

				bcOrder.SetFieldValue(&quot;Porting Date Time&quot;, sPortInOrderCutOverDate);
				bcOrder.WriteRecord();
			}      
		}
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	} 
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
	
		bcOrder     = null;
		bcItem      = null;
		bcMainOrder = null;
		boOrder     = null;
		bsExHierar  = null;
		psExOutput  = null;
		psExInput   = null;
		bsWFManager = null;
		psWFOutput  = null;
		psWFInput	= null;
		psWF2Input  = null;
		psWF2Output = null;
		bsSOPS      = null;
		psInRBC     = null;
		psOutRBC    = null;
		psInANGO    = null;
		psOutANGO   = null;
	}
}"
			   SEQUENCE="54"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="03/02/2015 21:25:22"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ManagePhoneFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function ManagePhoneFlag, &quot;ACS Asset Management&quot; Business Service
function ManagePhoneFlag(sAssetIntegId)
{
	try
	{
		var boAssetXA : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);       
		var bcAssetXA : BusComp   = boAssetXA.GetBusComp(&quot;HP Submit - X Asset Mgmt - Asset XA&quot;); 
		var DirectoryFlag  = &quot;&quot;;
		
		if (sAssetIntegId == null || sAssetIntegId == &quot;&quot;)
		{
			return;
		}

		bcAssetXA.SetViewMode(AllView);  
		bcAssetXA.ClearToQuery();
		bcAssetXA.ActivateField(&quot;Integration Id&quot;);
		bcAssetXA.ActivateField(&quot;Name&quot;);  
		bcAssetXA.ActivateField(&quot;Text Value&quot;);
		bcAssetXA.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + sAssetIntegId + &quot;&apos; AND [Name]=&apos;Phone Directory&apos;&quot;);
		bcAssetXA.ExecuteQuery(ForwardOnly); //Vaibhav 28/03/2012: Added parameter as per oracle review

		if (bcAssetXA.FirstRecord())
		{
			bcAssetXA.SetFieldValue(&quot;Text Value&quot;, &quot;N&quot;);
			bcAssetXA.WriteRecord();
		}
   }   
   finally
   {
		bcAssetXA	= null;
		boAssetXA	= null;
  }
}"
			   SEQUENCE="52"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="MapIntertableLink"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function MapIntertableLink, &quot;ACS Asset Management&quot; Business Service
function MapIntertableLink(sGroupAssetIntegId, sAccountId)
{
	try
	{
		var boVPNInterTable	: BusObject = TheApplication().GetBusObject(&quot;VF VPN Groups BO&quot;);
		var bcVPNInterTable	: BusComp   = boVPNInterTable.GetBusComp(&quot;FINS Organization Asset&quot;);

		if (sGroupAssetIntegId == null || sAccountId == null ||
			sGroupAssetIntegId == &quot;&quot; || sAccountId == &quot;&quot;)
		{
			return;
		}

		bcVPNInterTable.SetViewMode(AllView);
		bcVPNInterTable.ClearToQuery();
		bcVPNInterTable.ActivateField(&quot;Asset Id&quot;);
		bcVPNInterTable.ActivateField(&quot;Account Id&quot;);
		bcVPNInterTable.SetSearchSpec(&quot;Asset Id&quot;,   sGroupAssetIntegId);
		bcVPNInterTable.SetSearchSpec(&quot;Account Id&quot;, sAccountId);
		bcVPNInterTable.ExecuteQuery(ForwardOnly);

		if (bcVPNInterTable.FirstRecord())
		{
			return;
		}

		bcVPNInterTable.NewRecord(NewAfter);
		bcVPNInterTable.SetFieldValue(&quot;Asset Id&quot;,   sGroupAssetIntegId);
		bcVPNInterTable.SetFieldValue(&quot;Account Id&quot;, sAccountId);
		bcVPNInterTable.WriteRecord();
	}
	catch(e)
	{
		//throw(e); //TLG-3523 : the throw has been commented because in some rare cases the query returns no record. Before that the process inserts it, another process has already done it and an oracle error occurs (there is a unique index on Asset Id and Account Id). this occurs often on bulk orders
	}
	finally
	{
		bcVPNInterTable = null;
		boVPNInterTable = null;
	}
}"
			   SEQUENCE="53"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="NavigatetoCustomerPortal"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function NavigatetoCustomerPortal(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boActive       : BusObject = null;
		var bcOrderItem    : BusComp   = null;
		var bcParent       : BusComp   = null;
		var boAccount      : BusObject = null;
		var bcAccount      : BusComp   = null;
		var bcBillAccount  : BusComp   = null;
		var bcAccountOrder : BusComp   = null;

		var sActiveViewName      = &quot;&quot;;
		var sParentBCName        = &quot;&quot;;
		var sOrderId             = &quot;&quot;;
		var sOrderAccountId      = &quot;&quot;;
		var sOrderBillingAccount = &quot;&quot;;
		var bHasBillingAccount   = false;
		var bHasOrder            = false;
		var sApplicationName     = &quot;&quot;;
		var sGotoViewName        = &quot;&quot;;

		sActiveViewName = TheApplication().GetProfileAttr(&quot;ActiveViewName&quot;);

		if (sActiveViewName == &quot;&quot; || sActiveViewName == null) return;

		boActive = TheApplication().ActiveBusObject();

		if (boActive == null) return;

		bcOrderItem = boActive.GetBusComp(&quot;Order Entry - Line Items&quot;);

		if (bcOrderItem == null) return;

		bcParent = bcOrderItem.ParentBusComp();

		if (bcParent == null) return;

		sParentBCName = bcParent.Name();

		if (sParentBCName == &quot;TAF Order Entry - Orders&quot; || sParentBCName == &quot;Order Entry - Orders&quot; ||
			sParentBCName == &quot;X Order Entry - Orders (Customer Portal)&quot; || sParentBCName == &quot;Com Work Order - Orders&quot; ||
			sParentBCName == &quot;FS Receive RMA PO&quot; || sParentBCName == &quot;VF MNP Port Out MSISDN&quot; ||
			sParentBCName == &quot;FS Invoice Line Item Details&quot; || sParentBCName ==&quot;Order Entry - Orders (IC - SCA)&quot; ||
			sParentBCName == &quot;X Order Entry - Orders (Customer Portal)&quot; || sParentBCName == &quot;Campaign Orders (Chart)&quot;)	
		{
			sOrderId             = bcParent.GetFieldValue(&quot;Order Id&quot;);
			sOrderAccountId      = bcParent.GetFieldValue(&quot;Account Id&quot;);
			sOrderBillingAccount = bcParent.GetFieldValue(&quot;Billing Account Code&quot;);
		}
		else
		{
			return;
		}

		boAccount      = TheApplication().GetBusObject(&quot;Account&quot;);
		bcAccount      = boAccount.GetBusComp(&quot;Account&quot;);
		bcBillAccount  = boAccount.GetBusComp(&quot;Billing Account&quot;);
		bcAccountOrder = boAccount.GetBusComp(&quot;X Order Entry - Orders (Customer Portal)&quot;);

		bcAccount.ClearToQuery();
		bcAccount.SetViewMode(AllView);
		bcAccount.SetSearchSpec(&quot;Id&quot;, sOrderAccountId);
		bcAccount.ExecuteQuery(ForwardOnly);

		if (bcAccount.FirstRecord())
		{
			bHasBillingAccount = bcBillAccount.FirstRecord();

			while(bHasBillingAccount)
			{
				if (sOrderBillingAccount == bcBillAccount.GetFieldValue(&quot;Account Code&quot;))
				{
					bHasOrder = bcAccountOrder.FirstRecord();

					while(bHasOrder)
					{
						if (sOrderId == bcAccountOrder.GetFieldValue(&quot;Id&quot;))
						{
							break;
						}

						bHasOrder = bcAccountOrder.NextRecord();
					}

					break;
				}

				bHasBillingAccount = bcBillAccount.NextRecord();
			}
		}
		
		sApplicationName = TheApplication().GetProfileAttr(&quot;ApplicationName&quot;);

		if (sApplicationName == &quot;TeXCo Application&quot;)
		{
			sGotoViewName = &quot;SIS OM Customer Account Portal View - Poste&quot;;
		}
		else
		{
			sGotoViewName = &quot;AMES PRM Partner Customer Account Portal View&quot;;
		}

		TheApplication().GotoView(sGotoViewName, boAccount);
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAccountOrder = null;
		bcBillAccount  = null;
		bcAccount      = null;
		boAccount      = null;
		bcParent       = null;
		bcOrderItem    = null;
		boActive       = null;
	}
}"
			   SEQUENCE="55"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PenaltyInquiry"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function PenaltyInquiry(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var bsInquiry           : Service     = TheApplication().GetService(&quot;VF Penalty Inquiry&quot;);
		var psInquiryIn         : PropertySet = TheApplication().NewPropertySet();
		var psInquiryOut        : PropertySet = TheApplication().NewPropertySet();
		var bsManager           : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn         : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut        : PropertySet = TheApplication().NewPropertySet();
		var psListOfCPTResponse : PropertySet = null;
		var psCPTResponse       : PropertySet = null;
		var psListOfResponse    : PropertySet = null;
		var psResponse          : PropertySet = null;
		var psListOfCampaign    : PropertySet = null;
		var psCampaign          : PropertySet = null;
		var psListOfCalculated  : PropertySet = null;
		var psCalculated        : PropertySet = null;

		var sOrderId 	       = psInputs.GetProperty(&quot;OrderId&quot;);
		var sRootItemId 	   = psInputs.GetProperty(&quot;RootItemId&quot;);
		var sNoPromoPenalty    = &quot;&quot;;
		var sPromoAssetIntegId = &quot;&quot;;
		var sPromoPartNumber   = &quot;&quot;;
		var sMLMSISDN          = &quot;&quot;;
		var sMLStartDate       = &quot;&quot;;
		var sPenaltyMethod     = &quot;&quot;;
		var iChild             = 0;
		var sMethodId          = &quot;&quot;;
		var sPenalty           = &quot;&quot;;

		if ((sOrderId == null || sOrderId == &quot;&quot;) &amp;&amp; (sRootItemId == null || sRootItemId == &quot;&quot;))
		{
			return;
		}

		psInquiryIn.SetProperty(&quot;OrderId&quot;,         sOrderId);
		psInquiryIn.SetProperty(&quot;RootOrderItemId&quot;, sRootItemId);

		bsInquiry.InvokeMethod(&quot;PenaltyServiceBuildMessage&quot;, psInquiryIn, psInquiryOut);	

		sNoPromoPenalty    = psInquiryOut.GetProperty(&quot;strNoRecord&quot;);
		//sPromoAssetIntegId = psInquiryOut.GetProperty(&quot;strAssetIntegrationId&quot;);
		//sPromoPartNumber   = psInquiryOut.GetProperty(&quot;strPartNum&quot;);
		//sMLMSISDN          = psInquiryOut.GetProperty(&quot;MSISDN&quot;);
		//sMLStartDate       = psInquiryOut.GetProperty(&quot;START_DATE&quot;);

		if (sNoPromoPenalty == &quot;Y&quot;)
		{
			sErrorCode = &quot;R142_018&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_018&quot;);
			return;
		} 

		psManagerIn.SetProperty(&quot;ProcessName&quot;,          &quot;VF Penalty Inquiry&quot;);
		//psManagerIn.SetProperty(&quot;MSISDN&quot;,               sMLMSISDN);
		//psManagerIn.SetProperty(&quot;Start_Date&quot;,           sMLStartDate);
		//psManagerIn.SetProperty(&quot;Campaign_Code&quot;,        sPromoAssetIntegId);
		//psManagerIn.SetProperty(&quot;Campaign_Reason_Code&quot;, sPromoPartNumber);
		//psManagerIn.SetProperty(&quot;Campaign_Start_Date&quot;,  &quot;&quot;);
		psManagerIn.AddChild(psInquiryOut);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

		sErrorCode = psManagerOut.GetProperty(&quot;Error Code&quot;);
		sErrorText = psManagerOut.GetProperty(&quot;Error Message&quot;);

		if (sErrorCode != &quot;&quot; &amp;&amp; sErrorCode != null &amp;&amp; sErrorCode != &quot;0&quot;)
		{
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_052&quot;) + &quot; &quot; +
						 sErrorText;
			return;
		}

		if (psManagerOut.GetChildCount() == 0) return;

		psListOfCPTResponse = psManagerOut.GetChild(0);
		if (psListOfCPTResponse.GetChildCount() == 0) return;

		psCPTResponse = psListOfCPTResponse.GetChild(0);
		if (psCPTResponse.GetChildCount() == 0) return;

		psListOfResponse = psCPTResponse.GetChild(0);
		if (psListOfResponse.GetChildCount() == 0) return;

		psResponse = psListOfResponse.GetChild(0);
		if (psResponse.GetChildCount() == 0) return;

		psListOfCampaign = psResponse.GetChild(0);
		if (psListOfCampaign.GetChildCount() == 0) return;

		psCampaign = psListOfCampaign.GetChild(0).GetChild(0);//jMARQUES
		if (psCampaign.GetChildCount() == 0) return;

		sPenaltyMethod = psCampaign.GetProperty(&quot;PenaltyMethod&quot;);
		if (sPenaltyMethod == null || sPenaltyMethod == &quot;&quot;) return;

		for (iChild=0; iChild&lt;psCampaign.GetChildCount(); iChild++)
		{
			if (psCampaign.GetChild(iChild).GetType() == &quot;ListOfCalculatePens&quot;)
			{
				psListOfCalculated = psCampaign.GetChild(iChild);
				break;
			}
		}

		if (psListOfCalculated == null) return;
		if (psListOfCalculated.GetChildCount() == 0) return;

		for (iChild=0; iChild&lt;psListOfCalculated.GetChildCount(); iChild++)
		{
			psCalculated = psListOfCalculated.GetChild(iChild);

			sMethodId = psCalculated.GetProperty(&quot;MethodId&quot;);
			sPenalty  = psCalculated.GetProperty(&quot;Value&quot;);

			if (sMethodId == sPenaltyMethod)
			{
				sErrorCode = &quot;R142_030&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_030&quot;);
				sErrorText = sErrorText + sPenalty;
				break;
			}
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		psCalculated        = null;
		psListOfCalculated  = null;
		psCampaign          = null;
		psListOfCampaign    = null;
		psResponse          = null;
		psListOfResponse    = null;
		psCPTResponse       = null;
		psListOfCPTResponse = null;
		psManagerOut        = null;
		psManagerIn         = null;
		bsManager           = null;
		psInquiryOut        = null;
		psInquiryIn         = null;
		bsInquiry           = null;
	}
}"
			   SEQUENCE="56"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PickOrderDealerCode"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function PickOrderDealerCode(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder	     : BusObject = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		var bcOrder      : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcDealerCode : BusComp   = null;

		var sOrderId     = psInputs.GetProperty(&quot;OrderId&quot;);
		var sDealerCode  = psInputs.GetProperty(&quot;DealerCode&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		if (sDealerCode == null || sDealerCode == &quot;&quot;)
		{
			return;
		}

		bcOrder.SetViewMode(AllView)
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;VF Dealer Code&quot;);
		bcOrder.ActivateField(&quot;VF Shop Code&quot;);
		bcOrder.ActivateField(&quot;VF Shop Id&quot;);
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		bcDealerCode = bcOrder.GetPicklistBusComp(&quot;VF Dealer Code&quot;);
	
		bcDealerCode.SetViewMode(AllView);
		bcDealerCode.ClearToQuery();
		bcDealerCode.SetSearchSpec(&quot;VF Dealer Code&quot;, sDealerCode);
		bcDealerCode.ExecuteQuery(ForwardOnly);
		
		if (!bcDealerCode.FirstRecord())
		{
			return;
		}

		bcDealerCode.Pick();

		bcOrder.WriteRecord();
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcDealerCode = null;
		bcOrder      = null;
		boOrder      = null;
	}
}"
			   SEQUENCE="57"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="10/08/2014 17:12:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PopulateModifyOrderId"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function PopulateModifyOrderId(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boItem  : BusObject;
		var bcItem  : BusComp;
		//var boAsset : BusObject;
		var bcAsset : BusComp;
		var sOrderId      = psInputs.GetProperty(&quot;OrderId&quot;);
		var sSearchExpr   = &quot;&quot;;
		var sAssetIntegId = &quot;&quot;;
		var sRootAssetId  = &quot;&quot;;
		var bHasRecord    = false;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		sSearchExpr = &quot;[Order Header Id] = &apos;&quot; + sOrderId + &quot;&apos; AND &quot; +
					  &quot;[VF Root Order Item Id] = [Id] AND &quot; +
					  &quot;[VF Asset Integration Id] IS NOT NULL&quot;;

		boItem = TheApplication().GetBusObject(&quot;VF Order Entry - Line Items Lightest&quot;);
		bcItem = boItem.GetBusComp(&quot;VF Order Entry - Line Items Lightest&quot;);

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;VF Asset Integration Id&quot;);
		bcItem.SetSearchExpr(sSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		//boAsset = TheApplication().GetBusObject(&quot;Asset Management&quot;);
		bcAsset = boItem.GetBusComp(&quot;VF Asset Light&quot;);

		do
		{
			sAssetIntegId = bcItem.GetFieldValue(&quot;VF Asset Integration Id&quot;);

			bcAsset.ClearToQuery();
			bcAsset.SetViewMode(AllView);
			bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sAssetIntegId);
			bcAsset.ExecuteQuery(ForwardOnly);

			if (bcAsset.FirstRecord())
			{
				sRootAssetId = bcAsset.GetFieldValue(&quot;Id&quot;);
			
				bcAsset.ClearToQuery();
				bcAsset.SetViewMode(AllView);
				bcAsset.ActivateField(&quot;Modify Order Id&quot;);
				bcAsset.SetSearchSpec(&quot;Root Asset Id&quot;, sRootAssetId);
				bcAsset.ExecuteQuery(ForwardOnly);
			
				bHasRecord = bcAsset.FirstRecord();

				while (bHasRecord)
				{
					bcAsset.SetFieldValue(&quot;Modify Order Id&quot;, sOrderId);
					bcAsset.WriteRecord();

					bHasRecord = bcAsset.NextRecord();
				}
			}
		}
		while (bcItem.NextRecord());
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAsset = null;
		//boAsset = null;
		bcItem = null;
		boItem = null;
	}
}"
			   SEQUENCE="58"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="PostOrderClose"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function OrderStatusUpdate, &quot;ACS Asset Management&quot; Business Service
function PostOrderClose(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder        : BusObject   = TheApplication().GetBusObject(&quot;X Order Entry&quot;); 
		var bcOrder        : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcAccount      : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Account&quot;);
		var bcItem         : BusComp     = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boParameter    : BusObject   = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter    : BusComp     = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		var bsUtilities    : Service     = TheApplication().GetService(&quot;VF Orders&quot;);
		var psUtilitiesIn  : PropertySet = TheApplication().NewPropertySet();
		var psUtilitiesOut : PropertySet = TheApplication().NewPropertySet();
		var bsManager      : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn    : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut   : PropertySet = TheApplication().NewPropertySet();

		var sOrderId    = psInputs.GetProperty(&quot;Order Id&quot;);
		var sRootItemId = psInputs.GetProperty(&quot;Item Id&quot;);

		var sAccountId           = &quot;&quot;;
		var sFirstSubsDate       = &quot;&quot;;
		var sOrderType           = &quot;&quot;;
		var sAccountStatus       = &quot;&quot;;
		var sItemSearchExpr      = &quot;&quot;;
		var bHasItem             = &quot;&quot;;
		var sGroupAssetIntegId   = &quot;&quot;;
		var sPartNumber          = &quot;&quot;;
		var sItemAction          = &quot;&quot;;
		var sItemProduct         = &quot;&quot;;
		var sItemId              = &quot;&quot;;
		var sServiceEndDate      = &quot;&quot;;
		var sAssetIntegId        = &quot;&quot;;
		var sActionType          = &quot;&quot;;
		var sActionTypeLIC       = &quot;&quot;;
		var sBillAccountId       = &quot;&quot;;
		var sMSISDN              = &quot;&quot;;
		var sItemProdType        = &quot;&quot;;
		var sItemProdSubType     = &quot;&quot;;
		var sItemProdGroup       = &quot;&quot;;
		var bMapIntertable       = false;
		var sParamSearchExpr     = &quot;&quot;;
		var bSVBCounted          = false;
		var sProdPromInstId      = &quot;&quot;;
		var sOldProdPromInstId   = &quot;&quot;;
		var sProdPromoMSISDN     = &quot;&quot;;
		var sProdPromoActionType = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot; || sRootItemId == null || sRootItemId == &quot;&quot;)
		{
			return;
		}

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;Account Id&quot;);
		bcOrder.ActivateField(&quot;VF First Subscription Date&quot;);
		bcOrder.ActivateField(&quot;Order Type&quot;);
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);                      

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		sAccountId     = bcOrder.GetFieldValue(&quot;Account Id&quot;);
		sFirstSubsDate = bcOrder.GetFieldValue(&quot;VF First Subscription Date&quot;);
		sOrderType     = bcOrder.GetFieldValue(&quot;Order Type&quot;);

		// Added fot R2.1
		if (sAccountId != &quot;&quot; &amp;&amp; sAccountId != &quot;&quot; &amp;&amp; (sFirstSubsDate == null || sFirstSubsDate == &quot;&quot;))	
		{
			bcAccount.SetViewMode(AllView);
			bcAccount.ClearToQuery();
			bcAccount.ActivateField(&quot;Account Status Code&quot;);
			bcAccount.ActivateField(&quot;VF First Subscription Date&quot;);
			bcAccount.SetSearchSpec(&quot;Id&quot;, sAccountId);
			bcAccount.ExecuteQuery(ForwardOnly);

			if (bcAccount.FirstRecord())
			{
				sAccountStatus = bcAccount.GetFieldValue(&quot;Account Status Code&quot;);
				sFirstSubsDate = bcAccount.GetFieldValue(&quot;VF First Subscription Date&quot;);

				if (sAccountStatus == sAccounStatusAquired &amp;&amp; (sFirstSubsDate == null || sFirstSubsDate == &quot;&quot;))
				{
					Clib.strftime(sFirstSubsDate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
					bcAccount.SetFieldValue(&quot;VF First Subscription Date&quot;, sFirstSubsDate);
					bcAccount.WriteRecord ();
				}
			}
		}

		sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
						  &quot;&apos; AND [Root Order Item Id]=&apos;&quot; + sRootItemId + &quot;&apos;&quot;;

		bcItem.SetViewMode(AllView);
	  	bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Member Asset Id&quot;);
		bcItem.ActivateField(&quot;Part Number&quot;);
		bcItem.ActivateField(&quot;Action Code&quot;);
		bcItem.ActivateField(&quot;Product&quot;);
		bcItem.ActivateField(&quot;Service End Date&quot;);
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.ActivateField(&quot;TELCO Root Item Action Type&quot;);
		bcItem.ActivateField(&quot;Billing Account Id&quot;);
		bcItem.ActivateField(&quot;Root Service Num&quot;);
		bcItem.ActivateField(&quot;VF Product Type&quot;);
		bcItem.ActivateField(&quot;VF Product Sub Type&quot;);
		bcItem.ActivateField(&quot;VF Product Group&quot;);
		bcItem.ActivateField(&quot;VF SVB Counted Flag&quot;);
		bcItem.ActivateField(&quot;Prod Prom Instance Id&quot;);
		bcItem.ActivateField(&quot;VF Old Prod Prom Instance Id&quot;);
		bcItem.ActivateField(&quot;TELCO Root Item Action Type LIC&quot;);
		bcItem.SetSearchExpr(sItemSearchExpr);
		bcItem.ExecuteQuery(ForwardOnly);
	
		bHasItem = bcItem.FirstRecord();

		while (bHasItem)
		{
			sGroupAssetIntegId = bcItem.GetFieldValue(&quot;VF Member Asset Id&quot;);
			sPartNumber        = bcItem.GetFieldValue(&quot;Part Number&quot;);
			sItemAction        = bcItem.GetFieldValue(&quot;Action Code&quot;);
			sItemProduct       = bcItem.GetFieldValue(&quot;Product&quot;);
			sItemId            = bcItem.GetFieldValue(&quot;Id&quot;);
			sServiceEndDate    = bcItem.GetFieldValue(&quot;Service End Date&quot;);
			sAssetIntegId      = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);
			sActionType        = bcItem.GetFieldValue(&quot;TELCO Root Item Action Type&quot;);
			sActionTypeLIC     = bcItem.GetFieldValue(&quot;TELCO Root Item Action Type LIC&quot;);
			sBillAccountId     = bcItem.GetFieldValue(&quot;Billing Account Id&quot;);
			sMSISDN            = bcItem.GetFieldValue(&quot;Root Service Num&quot;);
			sItemProdType      = bcItem.GetFieldValue(&quot;VF Product Type&quot;);
			sItemProdSubType   = bcItem.GetFieldValue(&quot;VF Product Sub Type&quot;);
			sItemProdGroup     = bcItem.GetFieldValue(&quot;VF Product Group&quot;);

			if (sGroupAssetIntegId != &quot;&quot; &amp;&amp; sItemAction != sItemActionDeleted &amp;&amp; 
				sActionTypeLIC !=sActionSuspendDunning &amp;&amp; sActionTypeLIC !=sActionResumeDunning)
			{
				if (sPartNumber == &quot;3001&quot;)
				{
					bMapIntertable = true;
				}
				else
				{
					sParamSearchExpr = &quot;[Function]=&apos;GROUP_TYPE&apos; AND [Name]=&apos;&quot; + sItemProduct + &quot;&apos;&quot;;

					bcParameter.SetViewMode(AllView);
					bcParameter.ClearToQuery();
					bcParameter.SetSearchExpr(sParamSearchExpr);
					bcParameter.ExecuteQuery(ForwardOnly);

					bMapIntertable = bcParameter.FirstRecord();
				}

				if (bMapIntertable)
				{
					MapIntertableLink(sGroupAssetIntegId, sAccountId);
				}
			}

			if (sOrderType != sOrderTypeDisconnect &amp;&amp; (sPartNumber==&quot;3000&quot; || sPartNumber == &quot;3300&quot;))
			{
				// PRM GEN_REQ_205 	PRM GEN_REQ_018
				UpdateAsset(sOrderId, sItemId);
			}

			if (sItemAction == sItemActionNew &amp;&amp; sServiceEndDate != &quot;&quot;)
			{
				// Update Effective End Date when vanilla doesnt do it.
				UpdateEffectiveEndDate(sAssetIntegId, sServiceEndDate);
			}

			if (sPartNumber == &quot;21400&quot; &amp;&amp;
				(sOrderType == sOrderTypeAddNewService || sActionType == sActionTypeValModifyOptions))
			{
				Check_Create_SR(sOrderId, sItemId, sActionType);
			}

			// CR377 DEV3 Retrofit-Start
			if (sPartNumber == &quot;40000&quot;)
			{
				BADedicatedUpdate(sBillAccountId, sOrderType);
			}
			// CR377 DEV3 Retrofit

			if (sOrderType == sOrderTypeDisconnect &amp;&amp; (sPartNumber == &quot;1000&quot; || sPartNumber == &quot;70000&quot;))
			{
				ManagePhoneFlag(sAssetIntegId);
				CheckGroupToDeact(sMSISDN); 
			}
	
			if (sActionType == sActionTypeValModifyOptions &amp;&amp; sItemProdType == sProductTypeGroupChild &amp;&amp;
				sItemAction == sItemActionDeleted)
			{
				CheckGroupToDeact(sMSISDN); 
			}

			if ((sItemProdSubType == sProductSubTypeAmalfi || sItemProdSubType == sProductSubTypeKafein) &amp;&amp;
				(sActionType == &quot;&quot; ||
				 (sActionType != sActionTypeValDeaTransferSame &amp;&amp; sActionType != sActionTypeValActTransferSame)))
			{
				CreateStagingRecord(sOrderId, sRootItemId, &quot;&quot;);
			}
		
			if (sItemProdGroup == sProductGroupSvb)
			{
				psUtilitiesIn.SetProperty(&quot;orderId&quot;,    sOrderId);
				psUtilitiesIn.SetProperty(&quot;LineItemId&quot;, sItemId);
				bsUtilities.InvokeMethod(&quot;manageSVBProducts&quot;, psUtilitiesIn, psUtilitiesOut);
				bSVBCounted = (psUtilitiesOut.GetProperty(&quot;result&quot;) == true ||
							   psUtilitiesOut.GetProperty(&quot;result&quot;) == &quot;true&quot;);
			}

			if (sItemProdGroup == sProductGroupCamp &amp;&amp; sItemProdType == sProductTypeMinspend &amp;&amp;
				sItemProdSubType == sProductSubTypeMinspendBA &amp;&amp; (sActionType == &quot;&quot; || sActionType == sActionTypeValAdd))
			{			
				psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Joker Update&quot;);
				psManagerIn.SetProperty(&quot;Object Id&quot;,   sOrderId);
				psManagerIn.SetProperty(&quot;LineItemId&quot;,  sItemId);
				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);					
			}

			if (sItemProdGroup == sProductGroupCamp &amp;&amp; sItemProdType == sProductTypeMinspend &amp;&amp;
				sItemProdSubType == sProductSubTypeMinspendLine &amp;&amp;
				(sActionType == sActionTypeValMNPPortIn || sActionType == sActionTypeValModifyOptions))
			{
				psManagerIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Joker Update&quot;);
				psManagerIn.SetProperty(&quot;Object Id&quot;,   sOrderId);
				psManagerIn.SetProperty(&quot;LineItemId&quot;,  sItemId);
				bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);	
			}

			if (sPartNumber == &quot;1000&quot; || sPartNumber == &quot;70000&quot;)
			{
				sProdPromInstId      = bcItem.GetFieldValue(&quot;Prod Prom Instance Id&quot;);
				sOldProdPromInstId   = bcItem.GetFieldValue(&quot;VF Old Prod Prom Instance Id&quot;);
				sProdPromoActionType = sActionType;
				sProdPromoMSISDN     = sMSISDN;
			}

			if (bSVBCounted)
			{
				bcItem.SetFieldValue(&quot;VF SVB Counted Flag&quot;, &quot;Y&quot;);
			}							

			bcItem.WriteRecord();
			bHasItem = bcItem.NextRecord ();
		}

		// Bundled Promotions
		if (((sProdPromInstId != null &amp;&amp; sProdPromInstId != &quot;&quot;) ||
			 (sOldProdPromInstId != null &amp;&amp; sOldProdPromInstId != &quot;&quot;)) &amp;&amp;
			(sProdPromoActionType == &quot;&quot; ||
			 (sProdPromoActionType != sActionTypeValDeaTransferSame &amp;&amp; sProdPromoActionType != sActionTypeValActTransferSame)))
		{
			sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId +
							  &quot;&apos; AND [Root Order Item Id]=[Id] AND [Root Order Item Id]&lt;&gt;&apos;&quot; + sRootItemId +
							  &quot;&apos; AND [VF Product Group]=&apos;&quot; + sProductGroupCampContainer +
							  &quot;&apos; AND [VF Product Type]=&apos;&quot; + sProductTypeHandsetContainer + &quot;&apos;&quot;;

			if (sOldProdPromInstId != null &amp;&amp; sOldProdPromInstId != &quot;&quot; &amp;&amp;
				(sProdPromInstId == null || sProdPromInstId == &quot;&quot; || sProdPromInstId != sOldProdPromInstId))
			{
				sItemSearchExpr = sItemSearchExpr + &quot; AND ([Prod Prom Instance Id]=&apos;&quot; + sOldProdPromInstId +
								  &quot;&apos; OR [VF Old Prod Prom Instance Id]=&apos;&quot; + sOldProdPromInstId + &quot;&apos;)&quot;;

				bcItem.SetViewMode(AllView);
			  	bcItem.ClearToQuery();
				bcItem.SetSearchExpr(sItemSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);

				if (bcItem.FirstRecord())
				{
					sItemId = bcItem.GetFieldValue(&quot;Id&quot;);
					CreateStagingRecord(sOrderId, sItemId, sProdPromoMSISDN);
				}
			}

			if (sProdPromInstId != null &amp;&amp; sProdPromInstId != &quot;&quot;)
			{
				sItemSearchExpr = sItemSearchExpr + &quot; AND [Prod Prom Instance Id]=&apos;&quot; + sProdPromInstId + &quot;&apos;&quot;;

				bcItem.SetViewMode(AllView);
			  	bcItem.ClearToQuery();
				bcItem.SetSearchExpr(sItemSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);

				if (bcItem.FirstRecord())
				{
					sItemId = bcItem.GetFieldValue(&quot;Id&quot;);
					CreateStagingRecord(sOrderId, sItemId, sProdPromoMSISDN);
				}
			}
		}
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		psManagerOut   = null;
		psManagerIn    = null;
		bsManager      = null;
		psUtilitiesOut = null;
		psUtilitiesIn  = null;
		bsUtilities    = null;
		bcParameter    = null;
		boParameter    = null;
		bcItem         = null;
		bcAccount      = null;
		bcOrder        = null;
		boOrder        = null;
	}
}"
			   SEQUENCE="59"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RetrieveUsrData"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveUsrData(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		psOutputs.SetProperty(&quot;Result&quot;,        &quot;KO&quot;);
		psOutputs.SetProperty(&quot;Position&quot;,      &quot;&quot;);
		psOutputs.SetProperty(&quot;DealerCode&quot;,    &quot;&quot;);
		psOutputs.SetProperty(&quot;ShopId&quot;,        &quot;&quot;);

		var sLoginName  = psInputs.GetProperty(&quot;LoginName&quot;);
		var sPosition   = psInputs.GetProperty(&quot;PositionName&quot;);
		var sDealerCode = &quot;&quot;;
		var sShopId     = &quot;&quot;;
		var boEmployee  : BusObject;
		var bcEmployee  : BusComp;
		var boParameter : BusObject;
		var bcParameter : BusComp;

		if (sLoginName == null || sLoginName == &quot;&quot;)
		{
			return;
		}

		if (sPosition == null || sPosition == &quot;&quot;)
		{
			return;
		}

		boEmployee = TheApplication().GetBusObject(&quot;Employee&quot;);
		bcEmployee = boEmployee.GetBusComp(&quot;Employee&quot;);

		bcEmployee.ClearToQuery();
		bcEmployee.SetViewMode(AllView);
		bcEmployee.ActivateField(&quot;Position&quot;);
		bcEmployee.ActivateField(&quot;VF Dealer Code&quot;);
		bcEmployee.ActivateField(&quot;VF Shop Id&quot;);
		bcEmployee.SetSearchSpec(&quot;Login Name&quot;, sLoginName);
		bcEmployee.ExecuteQuery(ForwardOnly);

		if (!bcEmployee.FirstRecord())
		{
			return;
		}

		sDealerCode = bcEmployee.GetFieldValue(&quot;VF Dealer Code&quot;);
		sShopId     = bcEmployee.GetFieldValue(&quot;VF Shop Id&quot;);
				
		if (sDealerCode == &quot;&quot;) sDealerCode = &quot;COPS&quot;;

		boParameter = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		bcParameter = boParameter.GetBusComp(&quot;ACS NI Parameter (Simple)&quot;);

		bcParameter.ClearToQuery();
		bcParameter.SetViewMode(AllView);
		bcParameter.ActivateField(&quot;Function&quot;);
		bcParameter.SetSearchSpec(&quot;Function&quot;, &quot;CK_POSITION&quot;);
		bcParameter.SetSearchSpec(&quot;Name&quot;, sPosition);
		bcParameter.ExecuteQuery(ForwardOnly);

		if (!bcParameter.FirstRecord())
		{
			return;
		}

		psOutputs.SetProperty(&quot;Result&quot;,     &quot;OK&quot;);
		psOutputs.SetProperty(&quot;Position&quot;,   sPosition);
		psOutputs.SetProperty(&quot;DealerCode&quot;, sDealerCode);
		psOutputs.SetProperty(&quot;ShopId&quot;,     sShopId);
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcParameter = null;
		boParameter = null;
		bcEmployee = null;
		boEmployee = null;
	}
}"
			   SEQUENCE="60"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="RetrieveVPNAttributesValue"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function RetrieveVPNAttributesValue(boActive, sOrderId, sPartNumber, sRootItemId) // Added sRootItemId DEF-3908
{
	try
	{
		var boOrder  : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		//var bcOrder  : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);
		var bcItem   : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var bcItemXA : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items XA - Simple&quot;);

		var bcShortNumber = boActive.GetBusComp(&quot;VF VPN Short Number Virtual BC&quot;);

		var sAttribName  = &quot;&quot;;
		var sAttribValue = &quot;&quot;;

		bcShortNumber.SetSearchSpec(&quot;CustomMethodName&quot;, &quot;ClearCache&quot;);
		bcShortNumber.ExecuteQuery(ForwardOnly); //PSANTOS VFTRCBU-22356 Oracle Review 		

		//bcOrder.SetViewMode(AllView);
		//bcOrder.ClearToQuery();
		//bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
			
		// Query in bcItem
		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.SetSearchSpec(&quot;Part Number&quot;, sPartNumber);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		
		// Added sRootItemId DEF-3908
		if (sRootItemId != null || sRootItemId !=&quot;&quot;)
		{
			bcItem.SetSearchSpec(&quot;Root Order Item Id&quot;, sRootItemId);
		}	
		// Added sRootItemId DEF-3908

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Name&quot;);
		bcItemXA.ActivateField(&quot;Value&quot;);
		bcItem.ExecuteQuery(ForwardOnly);

		//if (!bcOrder.FirstRecord())
		//{
		//	return;
		//}

		if (!bcItem.FirstRecord())
		{
			return;
		}

		if (!bcItemXA.FirstRecord())
		{
			return;
		}

		do
		{
			sAttribName  = bcItemXA.GetFieldValue(&quot;Name&quot;);
			sAttribValue = bcItemXA.GetFieldValue(&quot;Value&quot;);

			switch (sAttribName)
			{
				case &quot;Group #&quot;:
					TheApplication().SetProfileAttr(&quot;VPNGroupId&quot;, sAttribValue);
				break;
				
				case &quot;Group Name&quot;:
					TheApplication().SetProfileAttr(&quot;GROUP_NAME_PICK&quot;, sAttribValue);
				break;
				
				case &quot;Short Number&quot;:
					TheApplication().SetProfileAttr(&quot;SHORT_NUMBER_PICK&quot;, sAttribValue);
				break;
				
				case &quot;Short Number Length&quot;:
					TheApplication().SetProfileAttr(&quot;SNLenght&quot;, sAttribValue);
				break;
			}	
		}
		while (bcItemXA.NextRecord());
	}
	finally
	{
		bcItemXA = null;
		bcItem   = null;
		//bcOrder  = null;
		boOrder  = null;
	}
}"
			   SEQUENCE="61"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="12/17/2014 01:31:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	try
	{
		Outputs.SetProperty(&quot;Error Code&quot;,    &quot;0&quot;);
		Outputs.SetProperty(&quot;Error Message&quot;, &quot;&quot;);

		switch (MethodName)
		{
			case &quot;GoToView&quot;:
				GoToView(Inputs, Outputs);
				break;
			case &quot;RetrieveUsrData&quot;:
				RetrieveUsrData(Inputs, Outputs);
				break;
			case &quot;Documents&quot;:
				Documents(Inputs, Outputs);
				break;
			case &quot;ValidateNewVPN&quot;:
				ValidateNewVPN(Inputs, Outputs);
				break;
			case &quot;PopulateModifyOrderId&quot;:
				PopulateModifyOrderId(Inputs, Outputs);
				break;
			case &quot;PenaltyInquiry&quot;:
				PenaltyInquiry(Inputs, Outputs);
				break;
			case &quot;ValidateUngroup&quot;:
				ValidateUngroup(Inputs, Outputs);
				break;
			case &quot;NavigatetoCustomerPortal&quot;:
				NavigatetoCustomerPortal(Inputs, Outputs);
				break;
			case &quot;BrowserPreEditPopup&quot;:
				BrowserPreEditPopup(Inputs, Outputs);
				break;
			case &quot;BrowserPrePostChanges&quot;:
				BrowserPrePostChanges(Inputs, Outputs);
				break;
			case &quot;BrowserLoadMetropolis&quot;:
				BrowserLoadMetropolis(Inputs, Outputs);
				break;
			case &quot;BrowserPreCustomerPortal&quot;:
				BrowserPreCustomerPortal(Inputs, Outputs);
				break;
			case &quot;BrowserSetProfileAttribute&quot;:
				BrowserSetProfileAttribute(Inputs, Outputs);
				break;
			case &quot;BrowserPreModifyOptions&quot;:
				BrowserPreModifyOptions(Inputs, Outputs);
				break;
			case &quot;ValidateAssetActionType&quot;:
				ValidateAssetActionType(Inputs, Outputs);
				break;
			case &quot;UpdateOrderRootItem&quot;:
				UpdateOrderRootItem(Inputs, Outputs);
				break;
			case &quot;GetSelectedCustomer&quot;:
				GetSelectedCustomer(Inputs, Outputs);
				break;
			case &quot;GetSelectedBillingAccount&quot;:
				GetSelectedBillingAccount(Inputs, Outputs);
				break;
			case &quot;GetSelectedSubscriber&quot;:
				GetSelectedSubscriber(Inputs, Outputs);
				break;
			case &quot;CheckMobileSignature&quot;:
				CheckMobileSignature(Inputs.GetProperty(&quot;AssetId&quot;), Outputs);
				break
			case &quot;PickOrderDealerCode&quot;:
				PickOrderDealerCode(Inputs, Outputs);
				break;
			case &quot;DeactvOldAsset&quot;:
				DeactvOldAsset(Inputs.GetProperty(&quot;AssetId&quot;), Outputs);
				break;
			case &quot;UserHasRole&quot;:
				UserHasRole(Inputs, Outputs);
				break;
			case &quot;AddOrderBusinessUnit&quot;:
				AddOrderBusinessUnit(Inputs.GetProperty(&quot;Organization&quot;), Inputs.GetProperty(&quot;OrderId&quot;), Outputs);
				break;
			case &quot;CheckLastInvoiceDate&quot;:
				CheckLastInvoiceDate(Inputs.GetProperty(&quot;AssetId&quot;), Outputs);
				break;
			case &quot;CheckActiveCampaign&quot;:
				CheckActiveCampaign(Inputs.GetProperty(&quot;AssetId&quot;), Outputs);
				break;
			case &quot;SetConfiguratorProfileAttributes&quot;:
				SetConfiguratorProfileAttributes(Inputs, Outputs);
				break;
			case &quot;CheckHatsahKulPeriod&quot;:
				CheckHatsahKulPeriod(Inputs, Outputs);
				break;	
			case &quot;CheckTargetBillingAcc&quot;:
				CheckTargetBillingAcc(Inputs, Outputs);
				break;	
			case &quot;PostOrderClose&quot;:
				PostOrderClose(Inputs, Outputs);
				break;
			case &quot;MNPUpdateOrderRootItemsByTA&quot;:
				MNPUpdateOrderRootItemsByTA(Inputs, Outputs);
				break;
			case &quot;GetAssetBundlePromotionMSISDN&quot;: //JMARQUES
				GetAssetBundlePromotionMSISDN(Inputs, Outputs);
				break;
			case &quot;ForbiddenReason&quot;:
				ForbiddenReason(Inputs.GetProperty(&quot;MSISDN&quot;), Inputs.GetProperty(&quot;ActionTypeLIC&quot;), Inputs.GetProperty(&quot;ActionReasonLIC&quot;), Inputs.GetProperty(&quot;FinalStatus&quot;), Inputs.GetProperty(&quot;SourceSystem&quot;), Inputs.GetProperty(&quot;DealerPosition&quot;), Outputs)
				break;
			case &quot;UserOnlyHasRoles&quot;:
				UserOnlyHasRoles(Inputs, Outputs);
				break;
			//++SANTOSP - VFTRCBU WA#32 D2 
			case &quot;InsertDocumentsPRMSubDealer&quot;: 
				InsertDocumentsPRMSubDealer(Inputs, Outputs); 
				break; 
			case &quot;GoToView&quot;: 
				GoToView(Inputs, Outputs); 
				break; 
			//--SANTOSP - VFTRCBU WA#32 D2 
			case &quot;ValidateFDO&quot;:
				ValidateFDO(Inputs, Outputs);
				break;
			case &quot;CheckPrefix&quot;:
				Outputs.SetProperty(&quot;Result&quot;, CheckPrefix(Inputs.GetProperty(&quot;MSISDN&quot;)));
				break;
			case &quot;WithAvailableReason&quot;:
				WithAvailableReason(Inputs.GetProperty(&quot;MSISDN&quot;), Inputs.GetProperty(&quot;ActionTypeLIC&quot;), Inputs.GetProperty(&quot;ActorStatus&quot;), Inputs.GetProperty(&quot;CustomerTypeLIC&quot;), Inputs.GetProperty(&quot;FinalStatus&quot;), Outputs);
				break;
			case &quot;CheckAvailableReason&quot;:
				CheckAvailableReason(Inputs.GetProperty(&quot;AssetId&quot;), Inputs.GetProperty(&quot;ActionTypeLIC&quot;), Inputs.GetProperty(&quot;MessageCategory&quot;), Inputs.GetProperty(&quot;FinalError&quot;), Outputs);
				break;
			case &quot;GetGolfUserName&quot;:
				GetGolfUserName(Inputs, Outputs);
				break;
			case &quot;UpdateAssetForPenaltyFlag&quot;:
				UpdateAssetForPenaltyFlag(Inputs,Outputs);
				break;
			case &quot;CheckEligibility&quot;: //DEF-22363
				CheckEligibility (Inputs,Outputs);
				break;
			case &quot;checkParkedOrdersTask&quot;:
				break;
			default:
				return(ContinueOperation);
				break;
		}

		return (CancelOperation);
	}
	catch (oException)
	{
		Outputs.SetProperty(&quot;Error Code&quot;,    oException.errCode);
		Outputs.SetProperty(&quot;Error Message&quot;, oException.errText);
	}
	finally
	{
	}
}"
			   SEQUENCE="78"
			   UPDATED="01/04/2018 14:33:58"
			   UPDATED_BY="1-FYSQW6T"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetConfiguratorProfileAttributes"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetConfiguratorProfileAttributes(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder     : BusObject = null;
		var bcItem      : BusComp   = null;
		var boAuxOrder  : BusObject = null;
		var bcAuxItemXA : BusComp   = null;

		var sFromActiveBusObject = psInputs.GetProperty(&quot;FromActiveBusObject&quot;);
		var sInOrderId           = psInputs.GetProperty(&quot;OrderId&quot;);
		var sInItemId            = psInputs.GetProperty(&quot;ItemId&quot;);

		if(sInOrderId != null || sInOrderId != &quot;&quot;)
			UpdateAssetForPenaltyFlag(psInputs,psOutputs);
			
		if (sFromActiveBusObject == &quot;Y&quot;)
		{
			boOrder = TheApplication().ActiveBusObject();

			if (boOrder == null) return;

			bcItem = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);

			if (bcItem == null) return;
		}
		else
		{
			if (sInOrderId == null || sInOrderId == &quot;&quot; ||
				sInItemId == null || sInItemId == &quot;&quot;)
			{
				return;
			}

			boOrder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
			bcItem  = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		
			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.ActivateField(&quot;Order Header Id&quot;);
			bcItem.ActivateField(&quot;Order Type&quot;);
			bcItem.ActivateField(&quot;VF Order Type LIC&quot;);
			bcItem.ActivateField(&quot;TELCO Root Item Action Type&quot;);
			bcItem.ActivateField(&quot;TELCO Root Item Action Type LIC&quot;);
			bcItem.ActivateField(&quot;Account Id&quot;);
			bcItem.ActivateField(&quot;Billing Account Id&quot;);
			bcItem.ActivateField(&quot;VF Billing Account Type LIC&quot;);
			bcItem.ActivateField(&quot;VF Tax Profile&quot;)
			bcItem.ActivateField(&quot;Asset Integration Id&quot;);
			bcItem.ActivateField(&quot;Root Order Item Id&quot;);
			bcItem.ActivateField(&quot;Part Number&quot;);
			bcItem.ActivateField(&quot;MSISDN&quot;);
			bcItem.ActivateField(&quot;VF Line Type&quot;);
			bcItem.ActivateField(&quot;VF Risk Not To Pay&quot;);
			bcItem.ActivateField(&quot;VF Average Invoice&quot;);
			bcItem.ActivateField(&quot;VF Total Invoice&quot;);
			bcItem.ActivateField(&quot;VF Group Type&quot;);
			bcItem.ActivateField(&quot;VF Group Nr&quot;);
			//++WA#21 RPIRES
			bcItem.ActivateField(&quot;VFTRCBU Contact Age&quot;);
			bcItem.ActivateField(&quot;VFTRCBU MNP Activation Date Calc&quot;);
			bcItem.ActivateField(&quot;VFTRCBU New Acquisition Date Calc&quot;);
			bcItem.ActivateField(&quot;VFTRCBU PreToPost Date Calc&quot;);
			bcItem.ActivateField(&quot;VFTRCBU Subscriber Act Date Calc&quot;);
			bcItem.ActivateField(&quot;VFTRCBU Customer Contact Citizenship&quot;);
			//--WA#21 RPIRES
			bcItem.ActivateField(&quot;VF Root Prod Prom Instance Id&quot;);
			//++CA#08 IMARTINS 18082015
			bcItem.ActivateField(&quot;VFTRCBU SharingLeaderTariffPlan JustInTime&quot;);
			//--CA#08 IMARTINS
			bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sInOrderId);
			bcItem.SetSearchSpec(&quot;Id&quot;,              sInItemId);
			bcItem.ExecuteQuery(ForwardOnly);

			if (!bcItem.FirstRecord())
			{
				return;
			}
		}

		var sOrderId               = bcItem.GetFieldValue(&quot;Order Header Id&quot;);
		var sOrderType			   = bcItem.GetFieldValue(&quot;Order Type&quot;);
		var sOrderTypeLIC          = bcItem.GetFieldValue(&quot;VF Order Type LIC&quot;);
		var sOrderSubType          = bcItem.GetFieldValue(&quot;TELCO Root Item Action Type&quot;);
		var sOrderSubTypeLIC       = bcItem.GetFieldValue(&quot;TELCO Root Item Action Type LIC&quot;);
		var sAccountId             = bcItem.GetFieldValue(&quot;Account Id&quot;);
		var sBillingAccountId      = bcItem.GetFieldValue(&quot;Billing Account Id&quot;);
		var sBillingAccountTypeLIC = bcItem.GetFieldValue(&quot;VF Billing Account Type LIC&quot;);
		var sTaxProfile            = bcItem.GetFieldValue(&quot;VF Tax Profile&quot;)
		var sAssetIntegId          = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);
		var sRootItemId 		   = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);
		var sProdPartNum           = bcItem.GetFieldValue(&quot;Part Number&quot;);
		var sMSISDN                = bcItem.GetFieldValue(&quot;MSISDN&quot;);
		var sLineType              = bcItem.GetFieldValue(&quot;VF Line Type&quot;);
		var sRiskStatus            = bcItem.GetFieldValue(&quot;VF Risk Not To Pay&quot;);
		var sAverageInvoice        = bcItem.GetFieldValue(&quot;VF Average Invoice&quot;);
		var sTotalInvoice		   = bcItem.GetFieldValue(&quot;VF Total Invoice&quot;);
		var sGroupType             = bcItem.GetFieldValue(&quot;VF Group Type&quot;);
		var sGroupId               = bcItem.GetFieldValue(&quot;VF Group Nr&quot;);
		//++WA#21 RPIRES
		var sContactAge            = bcItem.GetFieldValue(&quot;VFTRCBU Contact Age&quot;);
		var sMNPActDate            = bcItem.GetFieldValue(&quot;VFTRCBU MNP Activation Date Calc&quot;);
		var sNewAcqDate            = bcItem.GetFieldValue(&quot;VFTRCBU New Acquisition Date Calc&quot;);
		var sPrePostDate           = bcItem.GetFieldValue(&quot;VFTRCBU PreToPost Date Calc&quot;);
		var sActDate               = bcItem.GetFieldValue(&quot;VFTRCBU Subscriber Act Date Calc&quot;);
		var sCitizenship           = bcItem.GetFieldValue(&quot;VFTRCBU Customer Contact Citizenship&quot;);
		//--WA#21 RPIRES
		//++CA#08 IMARTINS 18082015
		var sLeaderTariffId        = bcItem.GetFieldValue(&quot;VFTRCBU SharingLeaderTariffPlan JustInTime&quot;);
		//--CA#08 IMARTINS
		var sRootProdId			   = bcItem.GetFieldValue(&quot;VF Root Prod Prom Instance Id&quot;);
		
		TheApplication().SetProfileAttr(&quot;OrderId&quot;,           sOrderId);
		TheApplication().SetProfileAttr(&quot;OrderType&quot;,         sOrderType);
		TheApplication().SetProfileAttr(&quot;OrderTypeLIC&quot;,      sOrderTypeLIC);
		TheApplication().SetProfileAttr(&quot;OrderSubType&quot;,      sOrderSubType);
		TheApplication().SetProfileAttr(&quot;OrderSubTypeLic&quot;,   sOrderSubTypeLIC);
		TheApplication().SetProfileAttr(&quot;OrdLineAccountId&quot;,  sAccountId);
		TheApplication().SetProfileAttr(&quot;BillingAccId&quot;,      sBillingAccountId);
		TheApplication().SetProfileAttr(&quot;RootAssetIntegId&quot;,  sAssetIntegId);
		TheApplication().SetProfileAttr(&quot;RootItemId&quot;,        sRootItemId);
		TheApplication().SetProfileAttr(&quot;RootProdPartNum&quot;,   sProdPartNum);
		TheApplication().SetProfileAttr(&quot;MSISDN Root&quot;,       sMSISDN);
		TheApplication().SetProfileAttr(&quot;ShortNumberLocked&quot;, &quot;&quot;);
		TheApplication().SetProfileAttr(&quot;BulkSMS&quot;,           sBillingAccountTypeLIC);
		TheApplication().SetProfileAttr(&quot;VFTaxProfile&quot;,      sTaxProfile);
		TheApplication().SetProfileAttr(&quot;LineType&quot;,          sLineType);
		TheApplication().SetProfileAttr(&quot;RiskStatus&quot;,        sRiskStatus);
		TheApplication().SetProfileAttr(&quot;LogRiskTemp&quot;,       &quot;&quot;);
		TheApplication().SetProfileAttr(&quot;LogRisk&quot;,           &quot;&quot;);
		TheApplication().SetProfileAttr(&quot;AverageInvoice&quot;,    sAverageInvoice);
		TheApplication().SetProfileAttr(&quot;TotalInvoice&quot;,      sTotalInvoice);
		//++WA#21 RPIRES
		TheApplication().SetProfileAttr(&quot;VFTECBU_CONTACT_AGE&quot;,       sContactAge);
		TheApplication().SetProfileAttr(&quot;VFTRCBU_MNP_ACT_DATE&quot;,       sMNPActDate);
		TheApplication().SetProfileAttr(&quot;VFTRCBU_NEW_ACQ_DATE&quot;,       sNewAcqDate);
		TheApplication().SetProfileAttr(&quot;VFTRCBU_PRETOPOST_DATE&quot;,       sPrePostDate);
		TheApplication().SetProfileAttr(&quot;VFTRCBU_NEW_SUBS_DATE&quot;,       sActDate);
		TheApplication().SetProfileAttr(&quot;VFTRCBU_CITIZENSHIP&quot;,       sCitizenship);
		//--WA#21 RPIRES
		//++CA#08 IMARTINS 18082015
		TheApplication().SetProfileAttr(&quot;VFTRCBU_LEADERTARIFF_ID&quot;,   sLeaderTariffId);
		//--CA#08 IMARTINS
		TheApplication().SetProfileAttr(&quot;VFTRCBU_ROOT_PROD_ID&quot;,	sRootProdId);

		//++ Bundled Promotions
		if (sProdPartNum == &quot;1000&quot; || sProdPartNum == &quot;70000&quot;)
		{
			TheApplication().SetProfileAttr(&quot;BUNDLE_PROMO_ROW_ID&quot;,   sRootItemId);
			TheApplication().SetProfileAttr(&quot;BUNDLE_PROMO_ORDER_ID&quot;, sOrderId);
		}
		//-- Bundled Promotions

		if (sOrderSubType == sActionTypeValAdd ||
			//sOrderSubType == sActionTypeValModifyMSISDN ||
			//sOrderSubType == sActionTypeValModifyIMSI ||
			sOrderSubType == sActionTypeValModifyOptions ||
			sOrderSubType == sActionTypeValBackDated)
		{
			TheApplication().SetProfileAttr(&quot;EligIndex&quot;, &quot;0&quot;);
		}

		if (sProdPartNum == &quot;1000&quot;)
		{
			RetrieveVPNAttributesValue(boOrder, sOrderId, &quot;3001&quot;, sRootItemId);// DEF-3908
		}
		else if (sProdPartNum == &quot;3000&quot;)
		{
			RetrieveVPNAttributesValue(boOrder, sOrderId, &quot;3000&quot;, sRootItemId);// DEF-3908
		}

		if (sOrderSubType == sActionTypeValVPN)
		{
			TheApplication().SetProfileAttr(&quot;RefreshVPNAttribute&quot;,    &quot;TRUE&quot;);
			TheApplication().SetProfileAttr(&quot;PostSalesDisableScript&quot;, &quot;FALSE&quot;);
		}

		if (sOrderSubType == sActionTypeValMNPPortIn || sOrderSubType == sActionTypeValAdd || sOrderSubType == &quot;&quot;)
		{
			TheApplication().SetProfileAttr(&quot;PostSalesDisableScript&quot;, &quot;FALSE&quot;);
			TheApplication().SetProfileAttr(&quot;ProfMSISDN&quot;,             sMSISDN);
			TheApplication().SetProfileAttr(&quot;SVBVoice&quot;,               &quot;&quot;);
			TheApplication().SetProfileAttr(&quot;SVBSMS&quot;,                 &quot;&quot;);
			TheApplication().SetProfileAttr(&quot;SVBData&quot;,                &quot;&quot;);
			TheApplication().SetProfileAttr(&quot;SVBRoamingVoice&quot;,        &quot;&quot;);
			TheApplication().SetProfileAttr(&quot;SVBRoamingData&quot;,         &quot;&quot;);
		}

		if (sProdPartNum == &quot;3300&quot;)
		{
			// Group Activation
			if (sOrderSubType == sActionTypeValGroup)
			{
				TheApplication().SetProfileAttr(&quot;GROUP_TYPE_PICK&quot;, &quot;&quot;);
			}
			else
			{
				TheApplication().SetProfileAttr(&quot;GROUP_TYPE_PICK&quot;, sGroupType);
				TheApplication().SetProfileAttr(&quot;GROUP_NR_PICK&quot;,   sGroupId);
				
				boAuxOrder  = TheApplication().GetBusObject(&quot;X Order Entry HP&quot;);
				bcAuxItemXA = boAuxOrder.GetBusComp(&quot;HP Submit - Order Item XA&quot;);
				
				bcAuxItemXA.ClearToQuery();
				bcAuxItemXA.ActivateField(&quot;Attribute Value&quot;);
				bcAuxItemXA.SetSearchSpec(&quot;Object Id&quot;,      sRootItemId);
				bcAuxItemXA.SetSearchSpec(&quot;Attribute Name&quot;, &quot;Group Start Date&quot;);
				bcAuxItemXA.ExecuteQuery(ForwardOnly);
				
				if (bcAuxItemXA.FirstRecord())
				{
					TheApplication().SetProfileAttr(&quot;startDatePicked&quot;, bcAuxItemXA.GetFieldValue(&quot;Attribute Value&quot;));
				}
			}
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAuxItemXA = null;
		boAuxOrder  = null;
		bcItem      = null;
		boOrder     = null;
	}
}"
			   SEQUENCE="62"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="12/17/2014 01:31:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetOrderOwnership"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetOrderOwnership(sOrderId, sDealerCode, sShopCode, sOrganizationId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcOrder : BusComp   = boOrder.GetBusComp(&quot;HP Submit - Order Entry - Orders&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		bcOrder.SetViewMode(AllView)
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;VF Dealer Code&quot;);
		bcOrder.ActivateField(&quot;VF Shop Code&quot;);
		bcOrder.ActivateField(&quot;Primary Organization Id&quot;);
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (bcOrder.FirstRecord())
		{
			return;
		}

		if (sDealerCode != &quot;&quot; &amp;&amp; sDealerCode != null)
		{
			bcOrder.SetFieldValue(&quot;VF Dealer Code&quot;, sDealerCode);
		}

		if (sShopCode != &quot;&quot; &amp;&amp; sShopCode != null)
		{
			bcOrder.SetFieldValue(&quot;VF Shop Code&quot;, sShopCode);
		}

		if (sOrganizationId != null &amp;&amp; sOrganizationId != &quot;&quot;)
		{
			bcOrder.SetFieldValue(&quot;Primary Organization Id&quot;, sOrganizationId);
		}

		bcOrder.WriteRecord();
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcOrder = null;
		boOrder = null;
	}
}"
			   SEQUENCE="63"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/22/2014 23:00:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SimCardMSISDNChangeCountsValidations"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SimCardMSISDNChangeCountsValidations(sRootAssetIntegId, sOwnerAccountId,sType, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		var bsManager           : Service     = TheApplication().GetService(&quot;Workflow Process Manager&quot;);
		var psManagerIn         : PropertySet = TheApplication().NewPropertySet();
		var psManagerOut        : PropertySet = TheApplication().NewPropertySet();
		var sMessageCategory;
		
		var CurrentDate	= new Date; 
		var DD	= CurrentDate.getDate(); 
		var MM	= CurrentDate.getMonth() + 1; 
		var YYYY	= CurrentDate.getFullYear(); 
		var sHRS	= &quot;00&quot;; 
		var sMIN	= &quot;00&quot;; 
		var sSEC	= &quot;00&quot;; 
		var today	= ToNumber(MM) + &quot;/&quot; + ToNumber(DD) + &quot;/&quot; + ToNumber(YYYY) + &quot; &quot; + sHRS + &quot;:&quot; + sMIN + &quot;:&quot; + sSEC ; 
		
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);	
		
		psManagerIn.SetProperty(&quot;ProcessName&quot;,          &quot;VFTRCBU Custom Count Validations WF&quot;);
		psManagerIn.SetProperty(&quot;Asset Integration Id&quot;,  sRootAssetIntegId);
		psManagerIn.SetProperty(&quot;Customer Id&quot;,           sOwnerAccountId);
		psManagerIn.SetProperty(&quot;Current Order Due Date&quot;,        today);
		psManagerIn.SetProperty(&quot;Type Scenario&quot;, sType);

		bsManager.InvokeMethod(&quot;RunProcess&quot;, psManagerIn, psManagerOut);

		sErrorCode =       psManagerOut.GetProperty(&quot;Msg Category Code&quot;);
		sMessageCategory = psManagerOut.GetProperty(&quot;Message Category&quot;); 
		
		if(sErrorCode != null &amp;&amp; sErrorCode != &quot;&quot;)
			sErrorText = TheApplication().LookupMessage(sMessageCategory, sErrorCode);
		else
			sErrorCode = &quot;0&quot;;

	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		
		bsManager  = null;
		psManagerIn = null;
	    psManagerOut = null;
		sMessageCategory = null;
		
		CurrentDate	= null; 
		DD	= null; 
		MM	= null; 
		YYYY	= null; 
		sHRS	= null; 
		sMIN	= null; 
		sSEC	= null; 
		today	= null; 

	}
}"
			   SEQUENCE="64"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="11/16/2015 11:31:16"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateAsset"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function UpdateAsset, &quot;ACS Asset Management&quot; Business Service
function UpdateAsset(sOrderId, sItemId)
{
 	try
 	{
		var boOrder	: BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);//Order BO
		var bcOrder : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Orders&quot;); //Order BC
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;); //Order Line Item BC
		var boAsset : BusObject	= TheApplication().GetBusObject(&quot;Order Entry&quot;); //Order BO
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;); //Asset BC

		var sServiceAccountId = &quot;&quot;;
		var sAssetIntegId     = &quot;&quot;;

		if (sOrderId == null || sOrderId == &quot;&quot; || sItemId == null || sItemId == &quot;&quot;)
		{
			return;
		}

		// Search for the Order 
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);

	    // Venkata 14/05/2012: Moved child query as per oracle review31-Start */
	    bcItem.SetViewMode(AllView); //3-AllView Mode
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Service Account Id&quot;);
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.SetSearchSpec(&quot;Id&quot;, sItemId);

		// Venkata 14/05/2012: Moved child query as per oracle review31-End */
		bcOrder.ExecuteQuery(ForwardOnly);	

		if ((!bcOrder.FirstRecord()) || (!bcItem.FirstRecord()))
		{
			return;
		}

		sServiceAccountId = bcItem.GetFieldValue(&quot;Service Account Id&quot;);
		sAssetIntegId     = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);

		if (sAssetIntegId == null || sAssetIntegId == &quot;&quot;)
		{
			return;
		}

		// Query the Asset BC based on the Asset Inegration id in line item leavel
		bcAsset.SetViewMode(AllView);
		bcAsset.ActivateField(&quot;Original Order Id&quot;);	
		bcAsset.ActivateField(&quot;Service Account Id&quot;);
		bcAsset.ActivateField(&quot;VF Originating Order Line Item Id&quot;); //GEN_REQ_205
		bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sAssetIntegId);
		bcAsset.ExecuteQuery(ForwardOnly) 
	
		if (!bcAsset.FirstRecord())
		{
			return;
		}

		//BEGIN GEN_REQ_205
		if (bcAsset.GetFieldValue(&quot;VF Originating Order Line Item Id&quot;) == &quot;&quot;)
		{
			bcAsset.SetFieldValue(&quot;VF Originating Order Line Item Id&quot;, sItemId);  
		}
		//END GEN_REQ_205

		bcAsset.SetFieldValue(&quot;Service Account Id&quot;, sServiceAccountId);
		bcAsset.SetFieldValue(&quot;Original Order Id&quot;,  sOrderId);
		bcAsset.WriteRecord();
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
		bcItem  = null;
		bcOrder = null;
		boOrder = null;	
	}
}"
			   SEQUENCE="65"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateAssetForPenaltyFlag"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateAssetForPenaltyFlag(Inputs,Outputs)
{
 	try
 	{
		var boOrder	: BusObject = TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);//Order BO
		var bcOrder : BusComp   = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;); //Order BC
		var bcItem  : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;); //Order Line Item BC
		var boAsset : BusObject	= TheApplication().GetBusObject(&quot;VF Order Entry Simple&quot;); //Asset BO
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;Asset Mgmt - Asset (Simple)&quot;); //Asset BC

		var sOrderId = Inputs.GetProperty(&quot;OrderId&quot;);
		var sAssetIntegId     = &quot;&quot;;
		var sActionDel		  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var skipPenaltyTrue	  = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_SKIP_PENALITY&quot;,&quot;Y&quot;);
		var itemSkipPenalty   = &quot;&quot;;
		var isRecord = null;

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}
		
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);

	    bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;VF Skip Penality&quot;);
		bcItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcItem.SetSearchSpec(&quot;Action Code&quot;, sActionDel);

		bcOrder.ExecuteQuery(ForwardOnly);	
		
		isRecord = bcItem.FirstRecord();

		if ((!bcOrder.FirstRecord()) || (!isRecord))
		{
			return;
		}

		while(isRecord)
		{
			itemSkipPenalty = bcItem.GetFieldValue(&quot;VF Skip Penality&quot;);
			Outputs.SetProperty(&quot;SkipPenalty&quot;,itemSkipPenalty);
			sAssetIntegId     = bcItem.GetFieldValue(&quot;Asset Integration Id&quot;);
	
			if (sAssetIntegId == null || sAssetIntegId == &quot;&quot;)
			{
				return;
			}
			
			if(itemSkipPenalty == skipPenaltyTrue)
			{
				bcAsset.SetViewMode(AllView);
				bcAsset.ClearToQuery();
				bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sAssetIntegId);
				bcAsset.ExecuteQuery(ForwardOnly) 
			
				if (!bcAsset.FirstRecord())
				{
					return;
				}
		
				bcAsset.SetFieldValue(&quot;VF Skip Penalty&quot;, skipPenaltyTrue);  
				bcAsset.WriteRecord();
			}
			
			isRecord = bcItem.NextRecord();
		}
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
		bcItem  = null;
		bcOrder = null;
		boOrder = null;	
	}
}"
			   SEQUENCE="66"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="02/05/2016 08:43:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateBaseProduct"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateBaseProduct(sProdPartNum, sItemId)
{
	try
	{
		var boParameter : BusObject	= TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp   = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);
		var boOrder     : BusObject	= TheApplication().GetBusObject(&quot;Order Entry&quot;);
		var bcItem      : BusComp   = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);
		var bcItemXA    : BusComp   = boOrder.GetBusComp(&quot;Order Item XA (Simple)&quot;);

		if (sProdPartNum == null || sProdPartNum == &quot;&quot; || sItemId == null || sItemId == &quot;&quot;)
		{
			return;
		} 

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.ActivateField(&quot;Value&quot;);
		bcParameter.SetSearchSpec(&quot;Function&quot;, &quot;VFTranWithinAdd&quot;);
		bcParameter.SetSearchSpec(&quot;Value&quot;,    sProdPartNum);
		bcParameter.ExecuteQuery(ForwardOnly);	

		if (!bcParameter.FirstRecord())
		{
			return;
		}

		bcItem.SetViewMode(AllView);
		bcItem.ClearToQuery();
		bcItem.ActivateField(&quot;Cfg State Code&quot;);
		bcItem.SetSearchSpec(&quot;Id&quot;, sItemId);
		bcItem.ExecuteQuery(ForwardOnly);

		if (!bcItem.FirstRecord())
		{
			return;
		}

		bcItem.SetFieldValue(&quot;Cfg State Code&quot;, &quot;User Requested Item&quot;);
		bcItem.WriteRecord();

		bcItemXA.SetViewMode(AllView);
		bcItemXA.ClearToQuery();
		bcItemXA.ActivateField(&quot;Cfg State Code&quot;);
		bcItemXA.SetSearchSpec(&quot;Object Id&quot;, sItemId);
		bcItemXA.ExecuteQuery(ForwardOnly);

		if (!bcItemXA.FirstRecord())
		{
			return;
		}

		do
		{
			bcItemXA.SetFieldValue(&quot;Cfg State Code&quot;, &quot;User Requested Item&quot;);
		}
		while (bcItemXA.NextRecord());

		bcItemXA.WriteRecord();
	}
	finally 
	{
		//IBM_TFERREIRA 20180116 DEF-24990 - Siebel Crash
		//boParameter = null;
		bcParameter = null;
		boParameter = null;
		bcItemXA    = null;
		bcItem      = null;
		boOrder     = null;
	}
}"
			   SEQUENCE="67"
			   UPDATED="01/18/2018 10:05:28"
			   UPDATED_BY="1-FYSRA2I"
			   CREATED="02/23/2015 21:44:41"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateEffectiveEndDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function UpdateEffectiveEndDate, &quot;ACS Asset Management&quot; Business Service
function UpdateEffectiveEndDate(sAssetIntegId, sServiceEndDate) 
{
	try 
	{
		var boAsset : BusObject = TheApplication().GetBusObject (&quot;X Order Entry&quot;);
		var bcAsset : BusComp   = boAsset.GetBusComp(&quot;HP Submit - Asset Mgmt - Asset - Header&quot;);

		var sAssetEndDate = &quot;&quot;;

		if (sAssetIntegId == null || sAssetIntegId == &quot;&quot; ||
			sServiceEndDate == null || sServiceEndDate == &quot;&quot;)
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.ActivateField(&quot;Effective End Date&quot;);
		bcAsset.SetSearchExpr(&quot;[Integration Id]=&apos;&quot; + sAssetIntegId + &quot;&apos; AND [Status]=&apos;&quot; + sAssetStatusActive + &quot;&apos;&quot;);
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		sAssetEndDate = bcAsset.GetFieldValue(&quot;Effective End Date&quot;);

		if (sAssetEndDate == &quot;&quot;)
		{
			bcAsset.SetFieldValue(&quot;Effective End Date&quot;, sServiceEndDate);
			bcAsset.WriteRecord();
		}
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="68"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateOrderRootItem"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateOrderRootItem(psInputs, psOutputs)
{
	// This function gathers the following functions:
	// 1. BS &quot;VF Update Line Items&quot;, method &quot;UpdateLineItems&quot;
	// 2. BS &quot;ACS Asset Management&quot;, method &quot;LineItemStatusUpdate&quot;
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boRootItem : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcRootItem : BusComp   = boRootItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sOrderId             = psInputs.GetProperty(&quot;OrderId&quot;);
		var sRootItemId          = psInputs.GetProperty(&quot;RootItemId&quot;);
		var sProvisioningDate    = psInputs.GetProperty(&quot;ProvisioningDate&quot;);
		var sBlockOwnerIn        = psInputs.GetProperty(&quot;BlockOwner&quot;);
		var sPortResponseIn      = psInputs.GetProperty(&quot;PortResponse&quot;);
		var sAccountPayTypeIn    = psInputs.GetProperty(&quot;AccountPaymentType&quot;);
		var sPartNumber          = &quot;&quot;;
		var sActionTypeLIC       = &quot;&quot;;
		var sActionReason        = &quot;&quot;;
		var sProdPromInstId      = &quot;&quot;;
		var sOldProdPromInstId   = &quot;&quot;;
		var sSearchHeader        = &quot;&quot;;
		var sSearchDetail        = &quot;&quot;;
		var sSearchExpr          = &quot;&quot;;
		var sCurrentDate         = &quot;&quot;;
		var sActionCode          = &quot;&quot;;
		var sCreated             = &quot;&quot;;
		var sCompletedDate       = &quot;&quot;;
		var sEAISyncDate         = &quot;&quot;;
		var sServiceStartDate    = &quot;&quot;;
		var sExchangeDate        = &quot;&quot;;
		var sServiceEndDate      = &quot;&quot;;
		var sBarDate             = &quot;&quot;;
		var sBarReason           = &quot;&quot;;
		var sBlockOwner        	 = &quot;&quot;;
		var sPortResponse        = &quot;&quot;;
		var sAccountPayType      = &quot;&quot;;
		var sCompletedDateNew    = &quot;&quot;;
		var sEAISyncDateNew      = &quot;&quot;;
		var sServiceStartDateNew = &quot;&quot;;
		var sExchangeDateNew     = &quot;&quot;;
		var sServiceEndDateNew   = &quot;&quot;;
		var sBarDateNew          = &quot;&quot;;
		var sBarReasonNew        = &quot;&quot;;
		var sBlockOwnerNew       = &quot;&quot;;
		var sPortResponseNew     = &quot;&quot;;
		var sAccountPayTypeNew   = &quot;&quot;;

		if (sRootItemId == null || sRootItemId == &quot;&quot;)
		{
			return;
		}

		bcRootItem.SetViewMode(AllView);
		bcRootItem.ClearToQuery();
		bcRootItem.ActivateField(&quot;Order Header Id&quot;);
		bcRootItem.ActivateField(&quot;Part Number&quot;);
		bcRootItem.ActivateField(&quot;TELCO Root Item Action Type LIC&quot;);
		bcRootItem.ActivateField(&quot;TELCO Root Item Action Reason&quot;);
		bcRootItem.ActivateField(&quot;Action Code&quot;);
		bcRootItem.ActivateField(&quot;Created&quot;);
		bcRootItem.ActivateField(&quot;Completed Date&quot;);
		bcRootItem.ActivateField(&quot;EAI Sync Date&quot;);
		bcRootItem.ActivateField(&quot;Service Start Date&quot;);
		bcRootItem.ActivateField(&quot;Exchange Date&quot;);
		bcRootItem.ActivateField(&quot;Service End Date&quot;);
		bcRootItem.ActivateField(&quot;BarDate&quot;);
		bcRootItem.ActivateField(&quot;BarReason&quot;);
		bcRootItem.ActivateField(&quot;VF Block Owner&quot;);
		bcRootItem.ActivateField(&quot;VF Port Response&quot;);
		bcRootItem.ActivateField(&quot;VF Account Pay Type&quot;);
		bcRootItem.SetSearchSpec(&quot;Id&quot;, sRootItemId);
		bcRootItem.ExecuteQuery(ForwardOnly);

		if (!bcRootItem.FirstRecord())
		{
			return;
		}

		sOrderId       = bcRootItem.GetFieldValue(&quot;Order Header Id&quot;);
		sPartNumber    = bcRootItem.GetFieldValue(&quot;Part Number&quot;);
		sActionTypeLIC = bcRootItem.GetFieldValue(&quot;TELCO Root Item Action Type LIC&quot;);
		sActionReason  = bcRootItem.GetFieldValue(&quot;TELCO Root Item Action Reason&quot;);

		// Bundled Promotions
		if (sPartNumber == sPartNumMobileLine || sPartNumber == sPartNumGSMConsumer)
		{
			sProdPromInstId    = bcRootItem.GetFieldValue(&quot;Prod Prom Instance Id&quot;);
			sOldProdPromInstId = bcRootItem.GetFieldValue(&quot;VF Old Prod Prom Instance Id&quot;);

			sSearchHeader = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Root Order Item Id]=[Id]&quot;;
			sSearchDetail = &quot;[Id]=&apos;&quot; + sRootItemId + &quot;&apos;&quot;;

			if (sProdPromInstId != null &amp;&amp; sProdPromInstId != &quot;&quot;)
			{
				sSearchDetail = sSearchDetail + &quot; OR [Asset Integration Id]=&apos;&quot; + sProdPromInstId + &quot;&apos; OR &quot; +
								&quot;[Prod Prom Instance Id]=&apos;&quot; + sProdPromInstId + &quot;&apos; OR &quot; +
								&quot;[VF Old Prod Prom Instance Id]=&apos;&quot; + sProdPromInstId + &quot;&apos;&quot;;
			}

			if (sOldProdPromInstId != null &amp;&amp; sOldProdPromInstId != &quot;&quot;)
			{
				sSearchDetail = sSearchDetail + &quot; OR [Asset Integration Id]=&apos;&quot; + sOldProdPromInstId + &quot;&apos; OR &quot; +
								&quot;[Prod Prom Instance Id]=&apos;&quot; + sOldProdPromInstId + &quot;&apos; OR &quot; +
								&quot;[VF Old Prod Prom Instance Id]=&apos;&quot; + sOldProdPromInstId + &quot;&apos;&quot;;
			}

			sSearchExpr = sSearchHeader + &quot; AND (&quot; + sSearchDetail + &quot;)&quot;;

			bcRootItem.ClearToQuery();
			bcRootItem.SetSearchExpr(sSearchExpr);
			bcRootItem.ExecuteQuery(ForwardOnly);

			if (!bcRootItem.FirstRecord())
			{
				return;
			}
		}

		Clib.strftime(sCurrentDate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));

		do
		{
			sRootItemId       = bcRootItem.GetFieldValue(&quot;Id&quot;);
			sActionCode       = bcRootItem.GetFieldValue(&quot;Action Code&quot;);
			sCreated          = bcRootItem.GetFieldValue(&quot;Created&quot;);
			sCompletedDate    = bcRootItem.GetFieldValue(&quot;Completed Date&quot;);
			sEAISyncDate      = bcRootItem.GetFieldValue(&quot;EAI Sync Date&quot;);
			sServiceStartDate = bcRootItem.GetFieldValue(&quot;Service Start Date&quot;);
			sExchangeDate     = bcRootItem.GetFieldValue(&quot;Exchange Date&quot;);
			sServiceEndDate   = bcRootItem.GetFieldValue(&quot;Service End Date&quot;);
			sBarDate          = bcRootItem.GetFieldValue(&quot;BarDate&quot;);
			sBarReason        = bcRootItem.GetFieldValue(&quot;BarReason&quot;);
			sBlockOwner       = bcRootItem.GetFieldValue(&quot;VF Block Owner&quot;);
			sPortResponse     = bcRootItem.GetFieldValue(&quot;VF Port Response&quot;);
			sAccountPayType   = bcRootItem.GetFieldValue(&quot;VF Account Pay Type&quot;);

			// Completed Date
			sCompletedDateNew = sCompletedDate;

			if (sProvisioningDate != null &amp;&amp; sProvisioningDate != &quot;&quot;)
				sCompletedDateNew = sProvisioningDate;
			else
				sCompletedDateNew = sCurrentDate;

			// Service Start Date
			sServiceStartDateNew = sServiceStartDate;

			if (sActionCode == sItemActionNew)
			{
				if ((sActionTypeLIC != sActionTransferOtherCustomer &amp;&amp; sActionTypeLIC != sActionTransferSameCustomer) ||
					(sServiceStartDate == null || sServiceStartDate == &quot;&quot;))
				{
					if (sProvisioningDate != null &amp;&amp; sProvisioningDate != &quot;&quot;)
						sServiceStartDateNew = sProvisioningDate;
					else
						sServiceStartDateNew = sCurrentDate;
				}
			}

			// Service End Date
			sServiceEndDateNew = sServiceEndDate;

			if (sActionCode == sItemActionDeleted)
			{
				if (sProvisioningDate != null &amp;&amp; sProvisioningDate != &quot;&quot;)
					sServiceEndDateNew = sProvisioningDate;
				else
					sServiceEndDateNew = sCurrentDate;
			}

			// EAI Sync Date
			sEAISyncDateNew = sEAISyncDate;

			if (sActionCode == sItemActionNew)
			{
				if (sActionTypeLIC == sActionTransferSameCustomer)
				{
					sEAISyncDateNew = sServiceStartDateNew;
				}
				else
				{
					if (sProvisioningDate != null &amp;&amp; sProvisioningDate != &quot;&quot;)
						sEAISyncDateNew = sProvisioningDate;
					else
						sEAISyncDateNew = sCurrentDate;
				}
			}

			// Exchange Date
			sExchangeDateNew = sExchangeDate;

			if (sActionCode == sItemActionNew)
			{
				if ((sActionTypeLIC == sActionTransferOtherCustomer || sActionTypeLIC == sActionTransferSameCustomer) &amp;&amp;
					(sServiceStartDate == null || sServiceStartDate == &quot;&quot;))
				{
					if (sProvisioningDate != &quot;&quot; &amp;&amp; sProvisioningDate != null)
						sExchangeDateNew = sProvisioningDate;
				}
			}

			if (sActionCode != sItemActionNew &amp;&amp; sActionCode != sItemActionDeleted &amp;&amp;
				sActionCode != sItemActionSuspend)
			{
				if (sProvisioningDate != &quot;&quot; &amp;&amp; sProvisioningDate != null)
					sExchangeDateNew = sProvisioningDate;
			}

			// Bar Date and Bar Reason
			sBarDateNew   = sBarDate;
			sBarReasonNew = sBarReason;

			if (sActionCode == sItemActionSuspend &amp;&amp; sActionTypeLIC == sActionSuspendVoluntary &amp;&amp;
				sActionReason == sActionReasonLimitedCancellation)
			{
				if (sProvisioningDate != &quot;&quot; &amp;&amp; sProvisioningDate != null)
					sBarDateNew = sProvisioningDate;
				else
					sBarDateNew = sCurrentDate;

				sBarReasonNew = &quot;Cancellation&quot;;
			}

			// Block Owner
			sBlockOwnerNew = sBlockOwner;

			if (sBlockOwnerIn != null &amp;&amp; sBlockOwnerIn != &quot;&quot;)
			{
				sBlockOwnerNew = sBlockOwnerIn;
			}

			// Port Response
			sPortResponseNew = sPortResponse;

			if (sPortResponseIn != null &amp;&amp; sPortResponseIn != &quot;&quot;)
			{
				sPortResponseNew = sPortResponseIn;
			}

			// Account Pay Type
			sAccountPayTypeNew = sAccountPayType;

			if (sAccountPayTypeIn != null &amp;&amp; sAccountPayTypeIn != &quot;&quot;)
			{
				sAccountPayTypeNew = sAccountPayTypeIn;
			}

			//Added for CR066 - manage case of ERROR91
			// Isto faz falta??
			//if (strErrCode == &quot;ERROR91&quot;)
			//{ 
			//	bcRootItem.SetFieldValue (&quot;VF Account Pay Type&quot;, &quot;PostPaid&quot;);
			//}

			bcRootItem.SetFieldValue(&quot;Completed Date&quot;,      sCompletedDateNew);
			bcRootItem.SetFieldValue(&quot;EAI Sync Date&quot;,       sEAISyncDateNew);
			bcRootItem.SetFieldValue(&quot;Service Start Date&quot;,  sServiceStartDateNew);
			bcRootItem.SetFieldValue(&quot;Exchange Date&quot;,       sExchangeDateNew);
			bcRootItem.SetFieldValue(&quot;Service End Date&quot;,    sServiceEndDateNew);
			bcRootItem.SetFieldValue(&quot;BarDate&quot;,             sBarDateNew);
			bcRootItem.SetFieldValue(&quot;BarReason&quot;,           sBarReasonNew);
			bcRootItem.SetFieldValue(&quot;VF Block Owner&quot;,      sBlockOwnerNew);
			bcRootItem.SetFieldValue(&quot;VF Port Response&quot;,    sPortResponseNew);
			bcRootItem.SetFieldValue(&quot;VF Account Pay Type&quot;, sAccountPayTypeNew);
			bcRootItem.WriteRecord();

			// Update root child items
			psInputs.SetProperty(&quot;RootItemId&quot;,       sRootItemId);
			psInputs.SetProperty(&quot;ProvisioningDate&quot;, sProvisioningDate);
			psInputs.SetProperty(&quot;CurrentDate&quot;,      sCurrentDate);

			UpdateRootChildItems(psInputs, psOutputs);

			sErrorCode = psOutputs.GetProperty(&quot;Error Code&quot;);
			sErrorText = psOutputs.GetProperty(&quot;Error Message&quot;);

			if (sErrorCode != &quot;0&quot;) return;
		}
		while (bcRootItem.NextRecord());
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcRootItem  = null;
		boRootItem = null;
	}
}"
			   SEQUENCE="69"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/22/2014 23:00:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateRootChildItems"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateRootChildItems(psInputs, psOutputs) {
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try {
		psOutputs.SetProperty(&quot;Error Code&quot;, sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boRootItem : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcRootItem : BusComp = boRootItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);
		var boChildItem : BusObject = TheApplication().GetBusObject(&quot;X Order Entry&quot;);
		var bcChildItem : BusComp = boRootItem.GetBusComp(&quot;HP Submit - Order Entry - Line Items&quot;);

		var sOrderId = psInputs.GetProperty(&quot;OrderId&quot;);
		var sRootItemId = psInputs.GetProperty(&quot;RootItemId&quot;);
		var sProvisioningDate = psInputs.GetProperty(&quot;ProvisioningDate&quot;);
		var sCurrentDate = psInputs.GetProperty(&quot;CurrentDate&quot;);
		var sRootActionCode = &quot;&quot;;
		var sRootEAISyncDate = &quot;&quot;;
		var sRootActionTypeLIC = &quot;&quot;;
		var sSearchExpr = &quot;&quot;;
		var sChildItemId = &quot;&quot;;
		var sProdPartNum = &quot;&quot;;
		var sActionCode = &quot;&quot;;
		var sCompletedDate = &quot;&quot;;
		var sServiceStartDate = &quot;&quot;;
		var sServiceEndDate = &quot;&quot;;
		var sEAISyncDate = &quot;&quot;;
		var sCompletedDateNew = &quot;&quot;;
		var sServiceStartDateNew = &quot;&quot;;
		var sServiceEndDateNew = &quot;&quot;;
		var sEAISyncDateNew = &quot;&quot;;

		if (sRootItemId == null || sRootItemId == &quot;&quot;) {
			return;
		}

		bcRootItem.SetViewMode(AllView);
		bcRootItem.ClearToQuery();
		bcRootItem.ActivateField(&quot;Action Code&quot;);
		bcRootItem.ActivateField(&quot;EAI Sync Date&quot;);
		bcRootItem.ActivateField(&quot;TELCO Root Item Action Type LIC&quot;);
		bcRootItem.SetSearchSpec(&quot;Id&quot;, sRootItemId);
		bcRootItem.ExecuteQuery(ForwardOnly);

		if (!bcRootItem.FirstRecord()) {
			return;
		}

		sRootActionCode = bcRootItem.GetFieldValue(&quot;Action Code&quot;);
		sRootEAISyncDate = bcRootItem.GetFieldValue(&quot;EAI Sync Date&quot;);
		sRootActionTypeLIC = bcRootItem.GetFieldValue(&quot;TELCO Root Item Action Type LIC&quot;);

		sSearchExpr = &quot;[Root Order Item Id]=&apos;&quot; + sRootItemId + &quot;&apos; AND [Root Order Item Id]&lt;&gt;[Id]&quot;;

		bcChildItem.SetViewMode(AllView);
		bcChildItem.ClearToQuery();
		bcChildItem.ActivateField(&quot;Part Number&quot;);
		bcChildItem.ActivateField(&quot;Action Code&quot;);
		bcChildItem.ActivateField(&quot;Completed Date&quot;);
		bcChildItem.ActivateField(&quot;Service Start Date&quot;);
		bcChildItem.ActivateField(&quot;Service End Date&quot;);
		bcChildItem.ActivateField(&quot;EAI Sync Date&quot;);
		bcChildItem.SetSearchExpr(sSearchExpr);
		bcChildItem.ExecuteQuery(ForwardOnly);

		if (!bcChildItem.FirstRecord()) {
			return;
		}

		if (sCurrentDate == null || sCurrentDate == &quot;&quot;) {
			Clib.strftime(sCurrentDate, &quot;%m/%d/%Y %H:%M:%S&quot;, Clib.localtime(Clib.time()));
		}

		do {
			sChildItemId = bcChildItem.GetFieldValue(&quot;Id&quot;);
			sProdPartNum = bcChildItem.GetFieldValue(&quot;Part Number&quot;);
			sActionCode = bcChildItem.GetFieldValue(&quot;Action Code&quot;);
			sCompletedDate = bcChildItem.GetFieldValue(&quot;Completed Date&quot;);
			sServiceStartDate = bcChildItem.GetFieldValue(&quot;Service Start Date&quot;);
			sServiceEndDate = bcChildItem.GetFieldValue(&quot;Service End Date&quot;);
			sEAISyncDate = bcChildItem.GetFieldValue(&quot;EAI Sync Date&quot;);

			// Completed Date
			sCompletedDateNew = sCompletedDate;

			if (sProvisioningDate != null &amp;&amp; sProvisioningDate != &quot;&quot;)
				sCompletedDateNew = sProvisioningDate;
			else
				sCompletedDateNew = sCurrentDate;

			// Service Start Date
			sServiceStartDateNew = sServiceStartDate;

			//VFTRCBU-33664 - Removed the and condition since sServiceStartDate never is null
			//if (sActionCode == sItemActionNew &amp;&amp; (sServiceStartDate == null || sServiceStartDate == &quot;&quot;)) {
			if (sActionCode == sItemActionNew) {
				if (sProvisioningDate != null &amp;&amp; sProvisioningDate != &quot;&quot;)
					sServiceStartDateNew = sProvisioningDate;
				else
					sServiceStartDateNew = sCurrentDate;
			}

			// Service End Date
			sServiceEndDateNew = sServiceEndDate;
			
			//VFTRCBU-34019 - Removed the and condition since sServiceStartDate never is null
			//if (sActionCode == sItemActionDeleted &amp;&amp; (sServiceEndDate == null || sServiceEndDate == &quot;&quot;)) {
			if (sActionCode == sItemActionDeleted) {
				if (sProvisioningDate != null &amp;&amp; sProvisioningDate != &quot;&quot;)
					sServiceEndDateNew = sProvisioningDate;
				else
					sServiceEndDateNew = sCurrentDate;
			}

			// EAI Sync Date
			sEAISyncDateNew = sEAISyncDate;

			if (sRootActionCode == sItemActionNew) {
				if (sRootActionTypeLIC == sActionTransferSameCustomer) {
					sEAISyncDateNew = sServiceStartDateNew;
				} else
					sEAISyncDateNew = sRootEAISyncDate;
			} else if (sActionCode == sItemActionNew) {
				sEAISyncDateNew = sServiceStartDateNew;
			}

			bcChildItem.SetFieldValue(&quot;Completed Date&quot;, sCompletedDateNew);
			bcChildItem.SetFieldValue(&quot;Service Start Date&quot;, sServiceStartDateNew);
			bcChildItem.SetFieldValue(&quot;Service End Date&quot;, sServiceEndDateNew);
			bcChildItem.SetFieldValue(&quot;EAI Sync Date&quot;, sEAISyncDateNew);
			bcChildItem.WriteRecord();

			UpdateBaseProduct(sProdPartNum, sChildItemId);
		} while (bcChildItem.NextRecord());
	} catch (oException) {
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally {
		psOutputs.SetProperty(&quot;Error Code&quot;, sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcChildItem = null;
		boChildItem = null;
		bcRootItem = null;
		boRootItem = null;
	}
}"
			   SEQUENCE="70"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/22/2014 23:00:06"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UserHasRole"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UserHasRole(Inputs:PropertySet, Outputs:PropertySet)
{	
	Outputs.SetProperty(&quot;hasRole&quot;, TheApplication().UserHasRole(Inputs.GetProperty(&quot;roles&quot;)) ? &quot;Y&quot; : &quot;N&quot;);
}"
			   SEQUENCE="71"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="10/24/2014 12:21:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UserOnlyHasRoles"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UserOnlyHasRoles(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;
	var sHasRoles  = &quot;N&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		psOutputs.SetProperty(&quot;Has Roles&quot;,     sHasRoles);
		psOutputs.SetProperty(&quot;User Roles&quot;,    &quot;&quot;);

		var aRoles             = null;
		var aUserRoles         = null;
		var psRoles            = null;
		var psUserRoles        = null;
		var sRoles             = psInputs.GetProperty(&quot;Roles&quot;);
		var sUserRoles         = TheApplication().GetProfileAttr(&quot;TELCO.PositionProfile:Role.AvailableRoles&quot;);
		var iNumberOfRoles     = 0; 
		var iNumberOfUserRoles = 0;
		var iRole              = 0;
		var sRole              = &quot;&quot;;
		var sRemainingRole     = &quot;&quot;;

		if (sRoles == null || sRoles == &quot;&quot; || sUserRoles == null || sUserRoles == &quot;&quot;)
		{
			return;
		}

		psOutputs.SetProperty(&quot;User Roles&quot;, sUserRoles);

		aRoles             = sRoles.split(&quot;,&quot;);
		aUserRoles         = sUserRoles.split(&quot;,&quot;);
		iNumberOfRoles     = aRoles.length;
		iNumberOfUserRoles = aUserRoles.length;

		if (iNumberOfRoles == 0 || iNumberOfUserRoles == 0 || iNumberOfRoles &lt; iNumberOfUserRoles)
		{
			return;
		}

		psRoles     = TheApplication().NewPropertySet();
		psUserRoles = TheApplication().NewPropertySet();

		for (iRole=0; iRole&lt;iNumberOfRoles; iRole++)
		{
			psRoles.SetProperty(aRoles[iRole], aRoles[iRole]);
		}

		for (iRole=0; iRole&lt;iNumberOfUserRoles; iRole++)
		{
			psUserRoles.SetProperty(aUserRoles[iRole], aUserRoles[iRole]);
		}

		sRole = psRoles.GetFirstProperty();

		while (sRole != null &amp;&amp; sRole != &quot;&quot;)
		{
			psUserRoles.RemoveProperty(sRole);

			sRole = psRoles.GetNextProperty();
		}

		sRemainingRole = psUserRoles.GetFirstProperty();

		if (sRemainingRole == null || sRemainingRole == &quot;&quot;)
		{
			sHasRoles = &quot;Y&quot;;
		}
	}
	catch(oException)
	{	
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		psOutputs.SetProperty(&quot;Has Roles&quot;,     sHasRoles);

		psUserRoles = null;
		psRoles     = null;
		aRoles      = null;
		aUserRoles  = null;
	}
}"
			   SEQUENCE="72"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="06/28/2015 23:46:44"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateAssetActionType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateAssetActionType(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset : BusObject = null;
		var bcAsset : BusComp   = null;

		var sInvokeFromApplet = psInputs.GetProperty(&quot;InvokeFromApplet&quot;);
		var sInAssetIntegId   = psInputs.GetProperty(&quot;Asset Integration Id&quot;);
		var sInActionTypeLIC  = psInputs.GetProperty(&quot;Action Type LIC&quot;);
		var sInPickedMethod   = psInputs.GetProperty(&quot;Picked Method&quot;);

		if (sInvokeFromApplet == &quot;Y&quot;)
		{
			boAsset = TheApplication().ActiveBusObject();

			if (boAsset == null) return;

			bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);

			if (bcAsset == null) return;
		}
		else
		{
			sInvokeFromApplet = &quot;N&quot;
		
			if (sInAssetIntegId == null || sInAssetIntegId == &quot;&quot; ||
				sInActionTypeLIC == null || sInActionTypeLIC == &quot;&quot;)
			{
				return;
			}

			boAsset	= TheApplication().GetBusObject(&quot;Asset Management - Asset Item&quot;);
			bcAsset = boAsset.GetBusComp(&quot;Asset Mgmt - Asset - Header&quot;);

			bcAsset.SetViewMode(AllView)
			bcAsset.ClearToQuery();
			bcAsset.ActivateField(&quot;Owner Account Id&quot;);
			bcAsset.ActivateField(&quot;VF Associate Asset Status&quot;);
			bcAsset.ActivateField(&quot;TELCO Picked Action Type LIC&quot;);
			bcAsset.ActivateField(&quot;Product Part Number&quot;);
			bcAsset.ActivateField(&quot;VF Product Type&quot;); 
			bcAsset.ActivateField(&quot;VF Product Sub Type&quot;);
			bcAsset.ActivateField(&quot;VF Product Group&quot;);
			bcAsset.ActivateField(&quot;Integration Id&quot;);
			bcAsset.ActivateField(&quot;Root Asset Id&quot;);
			bcAsset.ActivateField(&quot;Billing Account Id&quot;);
			bcAsset.ActivateField(&quot;VF MSISDN&quot;);
			bcAsset.ActivateField(&quot;VF Root Credit Status&quot;);
			bcAsset.ActivateField(&quot;VF Root Fraud Status&quot;);
			bcAsset.ActivateField(&quot;Root Integration Id&quot;);
			bcAsset.ActivateField(&quot;Status&quot;);
			bcAsset.ActivateField(&quot;SubMethod&quot;);
			bcAsset.ActivateField(&quot;Prod Prom Instance Id&quot;);
			bcAsset.SetSearchSpec(&quot;Integration Id&quot;, sInAssetIntegId);
			bcAsset.ExecuteQuery(ForwardOnly);
			
			if (!bcAsset.FirstRecord())
			{
				return;
			}
		}

		var sAssetId          = bcAsset.GetFieldValue(&quot;Id&quot;);
		var sOwnerAccountId   = bcAsset.GetFieldValue(&quot;Owner Account Id&quot;);
		var sAssocAssetStatus = bcAsset.GetFieldValue(&quot;VF Associate Asset Status&quot;);
		var sActionTypeLIC    = bcAsset.GetFieldValue(&quot;TELCO Picked Action Type LIC&quot;);  
		var sProductPartNum   = bcAsset.GetFieldValue(&quot;Product Part Number&quot;);
		var sProductType      = bcAsset.GetFieldValue(&quot;VF Product Type&quot;); 
		var sProductSubType   = bcAsset.GetFieldValue(&quot;VF Product Sub Type&quot;);
		var sProductGroup     = bcAsset.GetFieldValue(&quot;VF Product Group&quot;);
		var sAssetIntegId     = bcAsset.GetFieldValue(&quot;Integration Id&quot;);
		var sRootAssetId      = bcAsset.GetFieldValue(&quot;Root Asset Id&quot;);
		var sBillingAccountId = bcAsset.GetFieldValue(&quot;Billing Account Id&quot;);
		var sMSISDN           = bcAsset.GetFieldValue(&quot;VF MSISDN&quot;);
		var sCreditStatus     = bcAsset.GetFieldValue(&quot;VF Root Credit Status&quot;);
		var sFraudStatus      = bcAsset.GetFieldValue(&quot;VF Root Fraud Status&quot;);
		var sRootAssetIntegId = bcAsset.GetFieldValue(&quot;Root Integration Id&quot;);
		var sAssetStatus      = bcAsset.GetFieldValue(&quot;Status&quot;);
		var sPickedMethod     = bcAsset.GetFieldValue(&quot;SubMethod&quot;);
		var sPromInstanceId   = bcAsset.GetFieldValue(&quot;Prod Prom Instance Id&quot;);



		if (sInActionTypeLIC != null &amp;&amp; sInActionTypeLIC != &quot;&quot;)
			sActionTypeLIC = sInActionTypeLIC;

		if (sInPickedMethod != null &amp;&amp; sInPickedMethod != &quot;&quot;)
			sPickedMethod  = sInPickedMethod;

		DeactvOldAsset(sAssetId, psOutputs);

		if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;

		GetCaseMPBX(sAssetId, sActionTypeLIC, sOwnerAccountId, sProductPartNum, sAssetIntegId, sRootAssetId, psOutputs);

		if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;

		CheckMTTGroup(sActionTypeLIC, sProductPartNum, sBillingAccountId, sAssetId, psOutputs);

		if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;

		/* Fambio CR377: M2M disconnect*/
		if (sProductPartNum == sPartNumM2MOffer &amp;&amp; sActionTypeLIC == sActionDeactivateVoluntary)
		{
			CheckDisconnectM2M(sBillingAccountId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}

		/* Promotions */
		if (sPickedMethod == &quot;DebundlePromotion&quot;  &amp;&amp; (sProductPartNum == sPartNumMobileLine || sProductPartNum == sPartNumGSMConsumer)) 
		{
			if (sPromInstanceId == null || sPromInstanceId == &quot;&quot;) //Bundle Promotions
			{
				sErrorCode = &quot;BP_001&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;BP_001&quot;);

				psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
				psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
				return;
			}
		}

		//CR19
		if (sActionTypeLIC == sActionSuspendVoluntary)
		{
			CheckOrderStatusForLostStolen(sAssetIntegId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}

		if ((sActionTypeLIC == sActionDeactivateVoluntary || sActionTypeLIC == sActionDeactivateCredit ||
			 sActionTypeLIC == sActionDeactivateFraud) &amp;&amp;
			(sProductPartNum == sPartNumDataSVBGrp || //JMARQUES
			 sProductPartNum == sPartNumSVBGroup || sProductPartNum == sPartNumSVBRoamingVoiceGrp ||
			 sProductPartNum == sPartNumSVBRoamingDataGrp || sProductPartNum == sPartNumSVBSMSGrp)) 
		{
			CheckSVB(sAssetId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}
		


		//ADELUCIA - R1.4 WP08 / START
		if (sProductPartNum == sPartNumMobileLine &amp;&amp;
			(sActionTypeLIC == sActionTransferOtherCustomer || sActionTypeLIC == sActionTransferSameCustomer))
		{
			CheckMTTAccount(sAssetId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;

			if (sActionTypeLIC == sActionTransferSameCustomer)
			{
				checkMSISDN_MTTGroup(sMSISDN, sOwnerAccountId, psOutputs);

				if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
			}
		}
		//ADELUCIA-R1.4 WP08/END

		if ((sProductPartNum == sPartNumMobileLine || sProductPartNum == sPartNumGSMConsumer) &amp;&amp;
			sActionTypeLIC == sActionTransferOtherCustomer) 
		{
			//message will be raised for all the suspension that are not voluntary 
			if (sCreditStatus != &quot;000&quot; || sFraudStatus != &quot;000&quot;)
			{
				sErrorCode = &quot;204&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;204&quot;);

				psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
				psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
				return;
			}
		}

		//M.Asaro-11/26/2010-Difference btw SITransferCross and SITransferWith about SVB and VPN check
		if (sProductPartNum == sPartNumMobileLine &amp;&amp;
			(sActionTypeLIC == sActionTransferSameCustomer || sActionTypeLIC == sActionTransferOtherCustomer))
		{
			// the message will be raised for all Sim asset that have almost one of the following product as child product
			// 4010-7010-8010-9010-10010 SVB Product and 3001 VPN product
			CheckSVBOption(sAssetId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}

		if ((sProductPartNum == sPartNumMobileLine || sProductPartNum == sPartNumGSMConsumer) &amp;&amp;
			(sActionTypeLIC == sActionDeactivateFraud || sActionTypeLIC == sActionDeactivateCredit)) 
		{
			//R1.4.2-WP01
			CheckActiveCampaign(sAssetId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;

			CheckLastInvoiceDate(sAssetId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}

		/*CR-131*/
		if ((sProductPartNum == sPartNumMobileLine || sProductPartNum == sPartNumGSMConsumer) &amp;&amp;
			(sActionTypeLIC == sActionDeactivateBackwardMigration || sActionTypeLIC == sActionModifyMSISDN ||
			 sActionTypeLIC == sActionTransferOtherCustomer || sActionTypeLIC == sActionDeactivateCredit ||
			 sActionTypeLIC == sActionDeactivateFraud || sActionTypeLIC == sActionDeactivateVoluntary)) 
		{
			CheckIsyerimCebimde(sAssetId, sOwnerAccountId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}/*end CR-131*/				
		
		//TLG-83
		if ((sProductPartNum == sPartNumMobileLine || sProductPartNum == sPartNumGSMConsumer) &amp;&amp; 
			(sActionTypeLIC == sActionModifyMSISDN || sActionTypeLIC == sActionDeactivateBackwardMigration ||
			 sActionTypeLIC == sActionSuspendVoluntary || sActionTypeLIC == sActionDeactivateVoluntary ||
			 sActionTypeLIC == sActionDeactivateCredit || sActionTypeLIC == sActionDeactivateFraud ||
			 sActionTypeLIC == sActionTransferSameCustomer || sActionTypeLIC == sActionTransferOtherCustomer))
		{
			//TLG-7267
			if (TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VF_MNP_MODIFY_BLOCK_DAYS&quot;,&quot;withStatus&quot;) == &quot;Y&quot;)
			{
				checkOpenMnpOutSRWithStatus(sMSISDN, sOwnerAccountId, sActionTypeLIC, psOutputs);
			}
			else
			{
				CheckOpenMNPOutSR(sMSISDN, sOwnerAccountId, sActionTypeLIC, psOutputs);
			}

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
			
			if(sActionTypeLIC == sActionModifyMSISDN)
			{
				SimCardMSISDNChangeCountsValidations(sRootAssetIntegId, sOwnerAccountId,&quot;Change MSISDN&quot;, psOutputs);
				
				if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
			}	
			
		}//end TLG-83			

		if ((sProductPartNum == sPartNumMobileLine || sProductPartNum == sPartNumGSMConsumer) &amp;&amp; 
			 sActionTypeLIC == sActionModifyMSISDN)
		{
			if (CheckPrefix(sMSISDN) == &quot;KO&quot;)
			{
				sErrorCode = &quot;419&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;419&quot;);
				psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
				psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
				return;
			}
		}

		if ((sProductPartNum == sPartNumMobileLine || sProductPartNum == sPartNumGSMConsumer) &amp;&amp;
			sActionTypeLIC == sActionModifyIMSI)
		{
			CheckMobileSignature(sAssetId, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
			
			if(sActionTypeLIC == sActionModifyIMSI) //JMARQUES - VFTRCBU-19894
			{
				SimCardMSISDNChangeCountsValidations(sRootAssetIntegId, sOwnerAccountId,&quot;Modify Sim Card&quot;, psOutputs);
				
				if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
			}
			
		}
		
		//DEF-5725 / START - Retrofit April Minor
        if (sProductPartNum == sPartNumMobileLine &amp;&amp; sActionTypeLIC == sActionModifyMSISDN)
            {
              checkModMSISDN_MTTGroup(sMSISDN, sOwnerAccountId, psOutputs);
              if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
            }
        //DEF-5725 / END - Retrofit April Minor


		CheckPostSellingActionsControl(sRootAssetId, sRootAssetIntegId, sAssetStatus, sActionTypeLIC, psOutputs);

		if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		
		
		//ACAMBAS: VFTRCBU-23953 - Start
		/*if (sActionTypeLIC == sActionSuspendCredit || sActionTypeLIC == sActionResumeCredit ||
			sActionTypeLIC == sActionSuspendFraud || sActionTypeLIC == sActionResumeFraud ||
			sActionTypeLIC == sActionSuspendVoluntary || sActionTypeLIC == sActionResumeVoluntary ||
			sActionTypeLIC == sActionSuspendDunning || sActionTypeLIC == sActionResumeDunning ||
			sActionTypeLIC == sActionSuspendMissingDocument || sActionTypeLIC == sActionResumeMissingDocument)
		{
			CheckAvailableReason(sRootAssetId, sActionTypeLIC, &quot;VF Message Category&quot;, &quot;PRM_MIG_001&quot;, psOutputs);
		
			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}*/
		
		if (sActionTypeLIC == sActionSuspendCredit || sActionTypeLIC == sActionSuspendFraud || sActionTypeLIC == sActionSuspendVoluntary || 
			sActionTypeLIC == sActionSuspendDunning || sActionTypeLIC == sActionSuspendMissingDocument )
		{
			CheckAvailableReason(sRootAssetId, sActionTypeLIC, &quot;VFTRCBU User Defined Errors&quot;, &quot;0620&quot;, psOutputs);
		
			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}
		
		if (sActionTypeLIC == sActionResumeCredit || sActionTypeLIC == sActionResumeFraud || sActionTypeLIC == sActionResumeVoluntary ||
			sActionTypeLIC == sActionResumeDunning || sActionTypeLIC == sActionResumeMissingDocument)
		{
			CheckAvailableReason(sRootAssetId, sActionTypeLIC, &quot;VF Message Category&quot;, &quot;PRM_MIG_001&quot;, psOutputs);
		
			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}
		
		//ACAMBAS: VFTRCBU-23953 - End

		if (sActionTypeLIC == sActionDeactivateCredit || sActionTypeLIC == sActionDeactivateFraud ||
			sActionTypeLIC == sActionDeactivateVoluntary || sActionTypeLIC == sActionDeactivateBackwardMigration)
		{
			CheckAvailableReason(sRootAssetId, sActionTypeLIC, &quot;VFTRCBU User Defined Errors&quot;, &quot;0111&quot;, psOutputs);

			if (psOutputs.GetProperty(&quot;Error Code&quot;) != &quot;0&quot;) return;
		}
	}
	catch(oException)
	{
		sErrorCode = sErrorCode + oException.errCode;
		sErrorText = oException.errText;

		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
	}
	finally
	{
		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="73"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/08/2014 19:08:11"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateFDO"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateFDO(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder    : BusObject = TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);
		var bcOrder    : BusComp   = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);
		var bcRootItem : BusComp   = boOrder.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var oTodayDate : Date      = null;
		var oDueDate   : Date      = null;
		var boItem     : BusObject = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		var bcItem     : BusComp   = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);
		var sOrderId          = psInputs.GetProperty(&quot;OrderId&quot;);
		var sFutureDated      = &quot;&quot;;
		var sOrderStatus      = &quot;&quot;;
		var sOMOrderId        = &quot;&quot;;
		var sDueDate          = &quot;&quot;;
		var sCustomerType     = &quot;&quot;;
		var sTodayDate        = &quot;&quot;;
		var iTodayDate        = 0;
		var iDueDate          = 0;
		var sSearchExpr       = &quot;&quot;;
		var sRootAssetIntegId = &quot;&quot;;
		var sRootMSISDN       = &quot;&quot;;
		var sMaxFDO           = &quot;&quot;;
		var iMaxFDO           = 0;
		var sMinFDOSchedule   = &quot;&quot;;
		var iMinFDOSchedule   = 0;
		var iMinFDODate       = 0;
		var sMaxFDOSchedule   = &quot;&quot;;
		var iMaxFDOSchedule   = 0;
		var iMaxFDODate       = 0;
		var sShortDueDate     = &quot;&quot;;
		var	Frodo2ndOrder     = &quot;&quot;;

		var sCBUMaxFDO         = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_MAX_FDO&quot;,&quot;Consumer&quot;);
		var sEBUMaxFDO         = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTREBU_MAX_FDO&quot;,&quot;Business&quot;);
		var sCBUMinFDOSchedule = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_MIN_FDO_SCHEDULE&quot;,&quot;Consumer&quot;);
		var sCBUMaxFDOSchedule = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTRCBU_MAX_FDO_SCHEDULE&quot;,&quot;Consumer&quot;);
		var sEBUMinFDOSchedule = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTREBU_MIN_FDO_SCHEDULE&quot;,&quot;Business&quot;);
		var sEBUMaxFDOSchedule = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;VFTREBU_MAX_FDO_SCHEDULE&quot;,&quot;Business&quot;);
		
		

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}		
		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.ActivateField(&quot;VF Future Order Flag&quot;);
		bcOrder.ActivateField(&quot;Status&quot;);
		bcOrder.ActivateField(&quot;TELCO OM Order Public Id&quot;);
		bcOrder.ActivateField(&quot;Requested Ship Date&quot;);
		bcOrder.ActivateField(&quot;Account Market Class&quot;);
		bcOrder.ActivateField(&quot;Frodo2ndOrder&quot;);
		bcOrder.SetSearchSpec(&quot;Id&quot;, sOrderId);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}	
		sFutureDated  = bcOrder.GetFieldValue(&quot;VF Future Order Flag&quot;);
		sOrderStatus  = bcOrder.GetFieldValue(&quot;Status&quot;);
		sOMOrderId    = bcOrder.GetFieldValue(&quot;TELCO OM Order Public Id&quot;);
		sDueDate      = bcOrder.GetFieldValue(&quot;Requested Ship Date&quot;);
		sCustomerType = bcOrder.GetFieldValue(&quot;Account Market Class&quot;);
		Frodo2ndOrder = bcOrder.GetFieldValue(&quot;Frodo2ndOrder&quot;);
		
		if (sFutureDated == null || sFutureDated == &quot;&quot; || sFutureDated != &quot;Y&quot;)
		{
			return;
		}
		
		if (sOrderStatus == sOrderStatusParked ||
			TheApplication().GetProfileAttr(&quot;TELCOCurrentOrderStatus&quot;) == sOrderStatusParked)
		{
			return;
		}
	
		if (sOMOrderId != null &amp;&amp; sOMOrderId != &quot;&quot;)
		{
			return;
		}
	
		if (sDueDate != null &amp;&amp; sDueDate != &quot;&quot;)
		{
			Clib.strftime(sTodayDate, &apos;%m/%d/%Y %H:%M:%S&apos;, Clib.localtime(Clib.time()));

			oTodayDate = new Date(sTodayDate);
			iTodayDate = oTodayDate.getTime();
			oDueDate   = new Date(sDueDate);
			iDueDate   = oDueDate.getTime();
		}
		
		sSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [Id]=[Root Order Item Id]&quot;;

		bcRootItem.SetViewMode(AllView);
		bcRootItem.ClearToQuery();
		bcRootItem.ActivateField(&quot;Asset Integration Id&quot;);
		bcRootItem.ActivateField(&quot;MSISDN&quot;);
		bcRootItem.SetSearchExpr(sSearchExpr);
		bcRootItem.SetSortSpec(&quot;Created(DESCENDING)&quot;);
		bcRootItem.ExecuteQuery(ForwardOnly);
	
		if (!bcRootItem.FirstRecord())
		{
			return;
		}

		sRootAssetIntegId = bcRootItem.GetFieldValue(&quot;Asset Integration Id&quot;);
		sRootMSISDN       = bcRootItem.GetFieldValue(&quot;MSISDN&quot;);

		if (sCustomerType == sCustomerTypeConsumer)
			sMaxFDO = sCBUMaxFDO;
		else
			sMaxFDO = sEBUMaxFDO;
	
		if (sMaxFDO != null &amp;&amp; sMaxFDO != &quot;&quot; &amp;&amp; !isNaN(parseInt(sMaxFDO)))
		{
			iMaxFDO = parseInt(sMaxFDO);

			if (sRootAssetIntegId != null &amp;&amp; sRootAssetIntegId != &quot;&quot;)
			{
				sSearchExpr = &quot;[Asset Integration Id]=&apos;&quot; + sRootAssetIntegId +
							  &quot;&apos; AND [Order Status]=&apos;&quot; + sOrderStatusParked +
							  &quot;&apos; AND [Order Header Id]&lt;&gt;&apos;&quot; + sOrderId + &quot;&apos;&quot;;

				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.SetSearchExpr(sSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);

				if (bcItem.CountRecords() &gt;= sMaxFDO)
				{
					sErrorCode = &quot;0220&quot;;
					sErrorText = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;, &quot;0220&quot;, sMaxFDO);
					return;
				}
		
			}

			if (sRootMSISDN != null &amp;&amp; sRootMSISDN != &quot;&quot;)
			{
				sSearchExpr = &quot;[MSISDN]=&apos;&quot; + sRootMSISDN +
							  &quot;&apos; AND [Order Status]=&apos;&quot; + sOrderStatusParked +
							  &quot;&apos; AND [Order Header Id]&lt;&gt;&apos;&quot; + sOrderId + &quot;&apos;&quot;;;

				bcItem.SetViewMode(AllView);
				bcItem.ClearToQuery();
				bcItem.SetSearchExpr(sSearchExpr);
				bcItem.ExecuteQuery(ForwardOnly);

				if (bcItem.CountRecords() &gt;= sMaxFDO)
				{
					sErrorCode = &quot;0220&quot;;
					sErrorText = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;, &quot;0220&quot;, sMaxFDO);
					return;
				}
			
			}
		}

		if (sCustomerType == sCustomerTypeConsumer)
			sMinFDOSchedule = sCBUMinFDOSchedule;
		else
			sMinFDOSchedule = sEBUMinFDOSchedule;

		if (sMinFDOSchedule != null &amp;&amp; sMinFDOSchedule != &quot;&quot; &amp;&amp; !isNaN(parseInt(sMinFDOSchedule)))
		{
			if (sDueDate == null || sDueDate == &quot;&quot;)
			{
				sErrorCode = &quot;R21_213&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_213&quot;, sMinFDOSchedule);
				return;
			}
		
			iMinFDOSchedule = parseInt(sMinFDOSchedule);
			iMinFDODate     = iTodayDate + iMinFDOSchedule * 60 * 60 * 1000;

			if (iDueDate &lt; iMinFDODate)
			{				
							
				if (Frodo2ndOrder != &quot;Y&quot;) //VFTRCBU-31514 CSANTOS 	
				{					
					if  (sCustomerType == sCustomerTypeConsumer)
					{					
						sErrorCode = &quot;0222&quot;;
						sErrorText = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;, &quot;0222&quot;, iMinFDOSchedule);
						return;
					}	
					sErrorCode = &quot;R21_213&quot;;
					sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_213&quot;, sMinFDOSchedule);
					TheApplication().SetProfileAttr(&quot;Frodo2ndOrder&quot;,&quot;&quot;);
					return;						
				}
			}
		}	
		
		if (sCustomerType == sCustomerTypeConsumer)
			sMaxFDOSchedule = sCBUMaxFDOSchedule;
		else
			sMaxFDOSchedule = sEBUMaxFDOSchedule;

		if (sMaxFDOSchedule != null &amp;&amp; sMaxFDOSchedule != &quot;&quot; &amp;&amp; !isNaN(parseInt(sMaxFDOSchedule)) &amp;&amp;
			sDueDate != null &amp;&amp; sDueDate != &quot;&quot;)
		{
			iMaxFDOSchedule = parseInt(sMaxFDOSchedule);
			iMaxFDODate     = iTodayDate + iMaxFDOSchedule * 24 * 60 * 60 * 1000;

			if (iDueDate &gt; iMaxFDODate)
			{
				sErrorCode = &quot;0221&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;, &quot;0221&quot;, sMaxFDOSchedule);
				return;
			}
		}

		if (sDueDate != null &amp;&amp; sDueDate != &quot;&quot; &amp;&amp;
			sRootAssetIntegId != null &amp;&amp; sRootAssetIntegId != &quot;&quot;)
		{
			sShortDueDate = sDueDate.substring(0, 10);
			sSearchExpr   = &quot;[Asset Integration Id]=&apos;&quot; + sRootAssetIntegId +
							&quot;&apos; AND [Order Status]=&apos;&quot; + sOrderStatusParked +
							&quot;&apos; AND [Order Requested Ship Date]=&apos;&quot; + sShortDueDate +
							&quot;&apos; AND [Order Header Id]&lt;&gt;&apos;&quot; + sOrderId + &quot;&apos;&quot;;

			bcItem.SetViewMode(AllView);
			bcItem.ClearToQuery();
			bcItem.SetSearchExpr(sSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord())
			{
				sErrorCode = &quot;0313&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VFTRCBU User Defined Errors&quot;, &quot;0313&quot;);
				return;
			}
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcItem     = null;	
		boItem     = null;
		oDueDate   = null;
		oTodayDate = null;
		bcRootItem = null;
		bcOrder    = null;
		boOrder    = null;
	}
}"
			   SEQUENCE="74"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="08/12/2015 11:00:56"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateNewVPN"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateNewVPN(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset : BusObject;
		var bcAsset : BusComp;
		var boOrder : BusObject;
		var bcOrder : BusComp;
		var boItem  : BusObject;
		var bcItem  : BusComp;
		var sAccountId       = psInputs.GetProperty(&quot;AccountId&quot;);
		var sOrderSearchExpr = &quot;&quot;;
		var sOrderId         = &quot;&quot;;
		var sItemSearchExpr  = &quot;&quot;;

		if (sAccountId == null || sAccountId == &quot;&quot;)
		{
			return;
		}

		boAsset	= TheApplication().GetBusObject(&quot;TELCO Asset - Simple&quot;);
		bcAsset = boAsset.GetBusComp(&quot;TELCO Asset - Simple&quot;);

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();
		bcAsset.SetSearchSpec(&quot;Owner Account Id&quot;,    sAccountId);
		bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sPartNumVPNGroup);
		bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
		bcAsset.ExecuteQuery(ForwardOnly); //DIVA R2.1 20120319: ForwardOnly.

		if (bcAsset.FirstRecord())
		{
			// VPN Product Found. the order can&apos;t be created.
			sErrorCode = &quot;99&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;064&quot;);
			return;
		}

		boOrder = TheApplication().GetBusObject(&quot;TELCO Order - Simple&quot;);
		bcOrder = boOrder.GetBusComp(&quot;TELCO Orders - Simple&quot;);

		sOrderSearchExpr = &quot;[Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [Order Type]=&apos;&quot; + sOrderTypeAddNewService +
						   &quot;&apos; AND [Order Sub Type]=&apos;&quot; + sActionTypeValVPN + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled +
						   &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusComplete +
						   &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusPartiallyCompleted + &quot;&apos;&quot;;

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchExpr(sOrderSearchExpr);
		bcOrder.ExecuteQuery(ForwardOnly);
		
		if (bcOrder.FirstRecord())
		{
			// VPN Order Found. the order can&apos;t be created.
			sErrorCode = &quot;99&quot;;
			sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;064&quot;);
			return;
		}

		sOrderSearchExpr = &quot;[Account Id]=&apos;&quot; + sAccountId + &quot;&apos; AND [Order Type]=&apos;&quot; + sOrderTypeAddNewService +
						   &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled + &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusComplete +
						   &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusPartiallyCompleted + &quot;&apos;&quot;;

		bcOrder.SetViewMode(AllView);
		bcOrder.ClearToQuery();
		bcOrder.SetSearchExpr(sOrderSearchExpr);
		bcOrder.ExecuteQuery(ForwardOnly);

		if (!bcOrder.FirstRecord())
		{
			return;
		}

		boItem = TheApplication().GetBusObject(&quot;TELCO Order Item - Simple&quot;);
		bcItem = boItem.GetBusComp(&quot;TELCO Line Items - Simple&quot;);

		do
		{
			sOrderId = bcOrder.GetFieldValue(&quot;Id&quot;);
			sItemSearchExpr = &quot;[Order Header Id]=&apos;&quot; + sOrderId + &quot;&apos; AND [TELCO Action Type]=&apos;&quot; + sActionTypeValVPN +
							  &quot;&apos; AND [Status]&lt;&gt;&apos;&quot; + sOrderStatusCancelled + &quot;&apos;&quot;;

			bcItem.SetViewMode (AllView);
			bcItem.ClearToQuery();
			bcItem.SetSearchExpr(sOrderSearchExpr);
			bcItem.ExecuteQuery(ForwardOnly);

			if (bcItem.FirstRecord())
			{
				// VPN Root Item Found. the order can&apos;t be created.
				sErrorCode = &quot;99&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;064&quot;);
				return;
			}
		}
		while (bcOrder.NextRecord());
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcItem  = null;
		boItem  = null;
		bcOrder = null;
		boOrder = null;
		bcAsset = null;
		boAsset = null;
	}
}"
			   SEQUENCE="75"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="ValidateUngroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function ValidateUngroup(psInputs, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boOrder      : BusObject = null;
		var bcItem       : BusComp   = null;
		var bcItemSimple : BusComp   = null;

		var sOrderId     = &quot;&quot;;
		var sRootItemId  = &quot;&quot;;

		sOrderId = psInputs.GetProperty(&quot;OrderId&quot;);

		if (sOrderId == null || sOrderId == &quot;&quot;)
		{
			return;
		}

		boOrder = TheApplication().GetBusObject(&quot;Order Entry (Sales)&quot;);
		bcItem  = boOrder.GetBusComp(&quot;Order Entry - Line Items&quot;);
		
		//DEF-24609 IBMRDAS
		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Prod Prom Id&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		bcItem.SetSearchSpec(&quot;TELCO Billing Account Master Type&quot;, &quot;102&quot;);
		bcItem.ExecuteQuery(ForwardOnly);
			
		if (bcItem.FirstRecord())
		{
			if(bcItem.GetFieldValue(&quot;Prod Prom Id&quot;) != &quot;&quot;)
			{
				sErrorCode = &quot;428&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, sErrorCode);
				
				return;
			}
		}
		//DEF-24609 IBMRDAS

		bcItem.ClearToQuery();
		bcItem.SetViewMode(AllView);
		bcItem.ActivateField(&quot;Root Order Item Id&quot;);
		bcItem.SetSearchSpec(&quot;Order Header Id&quot;, sOrderId);
		bcItem.SetSearchSpec(&quot;Part Number&quot;,     sPartNumVPN);
		bcItem.ExecuteQuery(ForwardOnly);
			
		if (!bcItem.FirstRecord())
		{
			return;
		}

		sRootItemId  = bcItem.GetFieldValue(&quot;Root Order Item Id&quot;);

		bcItemSimple = boOrder.GetBusComp(&quot;Order Entry - Line Items (Simple)&quot;);

		bcItemSimple.ClearToQuery();
		bcItemSimple.SetViewMode(AllView);
		bcItemSimple.ActivateField(&quot;Quantity Requested&quot;);
		bcItemSimple.SetSearchSpec(&quot;Root Order Item Id&quot;, sRootItemId);
		bcItemSimple.ExecuteQuery(ForwardOnly);

		if (bcItemSimple.FirstRecord())
		{
			bcItemSimple.SetFieldValue(&quot;Quantity Requested&quot;, &quot;1&quot;);
			bcItemSimple.WriteRecord();
		}

		sErrorCode = &quot;256&quot;;
		sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;256&quot;);
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcItemSimple = null;
		bcItem       = null;
		boOrder      = null;
	}
}"
			   SEQUENCE="76"
			   UPDATED="02/27/2018 12:31:50"
			   UPDATED_BY="IBM_RCATITA"
			   CREATED="09/01/2014 19:24:30"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="WithAvailableReason"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function WithAvailableReason(sMSISDN, sActionTypeLIC, sActorStatus, sCustomerTypeLIC, sSourceSystem, psOutputs)
{
	var sErrorCode  = &quot;0&quot;;
	var sErrorText  = &quot;&quot;;
	var sWithReason = &quot;N&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		psOutputs.SetProperty(&quot;With Reason&quot;,   sWithReason);

		var boParameter : BusObject = TheApplication().GetBusObject(&quot;ACS NI Parameter&quot;);
		var bcParameter : BusComp   = boParameter.GetBusComp(&quot;ACS NI Parameter&quot;);

		var bHasParameter    = false;
		var sActionReasonLIC = &quot;&quot;;
		var sForbiddenReason = &quot;&quot;;

		bcParameter.SetViewMode(AllView);
		bcParameter.ClearToQuery();
		bcParameter.SetSearchSpec(&quot;Function&quot;,   &quot;VF Reason&quot;);
		bcParameter.SetSearchSpec(&quot;Condition2&quot;, sActionTypeLIC);
		bcParameter.SetSearchSpec(&quot;Condition4&quot;, sActorStatus);
		bcParameter.SetSearchSpec(&quot;Attrib02&quot;,   sCustomerTypeLIC);
		bcParameter.ExecuteQuery(ForwardOnly);

		bHasParameter = bcParameter.FirstRecord();

		while (bHasParameter)
		{
			//sActionReasonLIC = bcParameter.GetFieldValue(&quot;Condition1&quot;);	//ACAMBAS: VFTRCBU-22339 - Commented
			sWithReason = &quot;Y&quot;;	//ACAMBAS: VFTRCBU-22339

			if (sMSISDN == null || sMSISDN == &quot;&quot;)
			{			
				//sWithReason = &quot;Y&quot;;	//ACAMBAS: VFTRCBU-22339 - Commented
				return;
			}
			
			//ACAMBAS - VFTRCBU-33039 - Start
			sActionReasonLIC = bcParameter.GetFieldValue(&quot;Condition1&quot;); 
			//ACAMBAS - VFTRCBU-33039 - End
	
			//ACAMBAS: VFTRCBU-22339 - Start
			var sDealerPosition = TheApplication().GetProfileAttr(&quot;TELCO.PositionProfile:Agent Type.Dealer&quot;); 
			
			ForbiddenReason(sMSISDN, sActionTypeLIC, sActionReasonLIC, sSourceSystem, sDealerPosition, psOutputs); 
			sForbiddenReason = psOutputs.GetProperty(&quot;Forbidden&quot;);
			
			//ACAMBAS - VFTRCBU-33039 - Start
			if (sForbiddenReason == &quot;Y&quot;) {
				sWithReason = &quot;N&quot;;
			}
			
			//WA16: Dealers cannot do a resume from Cancelled – Customer Request if the number is not Native. 
		/*	if(sDealerPosition == &quot;Y&quot;) 
			{
				sActionReasonLIC = bcParameter.GetFieldValue(&quot;Condition1&quot;); 
				//ACAMBAS: VFTRCBU-22339 - End

				ForbiddenReason(sMSISDN, sActionTypeLIC, sActionReasonLIC, sSourceSystem, psOutputs); //DEF-11145

				sErrorCode       = psOutputs.GetProperty(&quot;Error Code&quot;);
				sErrorText       = psOutputs.GetProperty(&quot;Error Message&quot;);
				sForbiddenReason = psOutputs.GetProperty(&quot;Forbidden&quot;);

				if (sErrorCode != &quot;0&quot;) {
					sWithReason = &quot;N&quot;;	//ACAMBAS: VFTRCBU-22339
					return;
				}
	
				if (sForbiddenReason == &quot;N&quot;) {
					//sWithReason = &quot;Y&quot;;	//ACAMBAS: VFTRCBU-22339 - Commented
					return;
				}
			}
			else //DEF-11145 - Begin 
			{
				sActionReasonLIC = bcParameter.GetFieldValue(&quot;Condition1&quot;);
				ForbiddenReason(sMSISDN, sActionTypeLIC, sActionReasonLIC, sSourceSystem, psOutputs); //DEF-11145
				sErrorCode       = psOutputs.GetProperty(&quot;Error Code&quot;);
				sErrorText       = psOutputs.GetProperty(&quot;Error Message&quot;);
				sForbiddenReason = psOutputs.GetProperty(&quot;Forbidden&quot;);

				if (sErrorCode != &quot;0&quot;)
				{
					return;
				}
	
				if (sForbiddenReason == &quot;N&quot;)
				{
					sWithReason = &quot;Y&quot;;
					return;
				}
			} //DEF-11145 - End
			*/
			//ACAMBAS - VFTRCBU-33039 - End
		
			bHasParameter = bcParameter.NextRecord();
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);
		psOutputs.SetProperty(&quot;With Reason&quot;,   sWithReason);

		bcParameter	= null;
		boParameter = null;
	}
}"
			   SEQUENCE="77"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="11/02/2015 10:35:21"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkAccntType"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkAccntType(InAccnt, OutAccnt)
{
	try
	{
		var OldCust = InAccnt.GetProperty(&quot;OldAcc&quot;);
		var NewCust = InAccnt.GetProperty(&quot;NewAcc&quot;);
		var OrderReason = InAccnt.GetProperty(&quot;OrderReason&quot;);
		var oBO : BusObject = TheApplication().GetBusObject(&quot;TELCO Account - Simple&quot;);
		var oBCAccount : BusComp = oBO.GetBusComp(&quot;TELCO Account - Simple&quot;);
		var oldCustType = &quot;&quot;;
		var newCustType = &quot;&quot;;
		var msg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_044&quot;);
		var msg2 = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_194&quot;);
		var ebu = &quot;101&quot;;
		
		//BEGIN - Vodafone Code Review - SIEBELCodeReviewIssues - JFONSECA
		if(OldCust == null)
		{
			OldCust = &quot;NO_ROW_ID&quot;;
		}
		else if (NewCust == null)
		{
			NewCust = &quot;NO_ROW_ID&quot;;
		}
		//END - Vodafone Code Review - SIEBELCodeReviewIssues - JFONSECA
		
		with(oBCAccount)
		{
			ClearToQuery();
			SetViewMode(AllView);
			ActivateField(&quot;Market Class&quot;);
			SetSearchExpr(&quot;[Id] = &apos;&quot;+OldCust+&quot;&apos; OR [Id] = &apos;&quot;+NewCust+&quot;&apos;&quot;);
			ExecuteQuery(ForwardOnly);
			if(FirstRecord())
			{
				if(GetFieldValue(&quot;Id&quot;) == OldCust)
					oldCustType = GetFieldValue(&quot;Market Class&quot;);
				else newCustType = GetFieldValue(&quot;Market Class&quot;);
			}	
			
			if(NextRecord())
			{
				if(GetFieldValue(&quot;Id&quot;) == OldCust)
					oldCustType = GetFieldValue(&quot;Market Class&quot;);
				else newCustType = GetFieldValue(&quot;Market Class&quot;);
				
				if(oldCustType != newCustType)
				{
					OutAccnt.SetProperty(&quot;CrossType&quot;,&quot;CrossSegment&quot;);	
				}
				else
				{
					OutAccnt.SetProperty(&quot;CrossType&quot;,&quot;SameSegment&quot;);
				}
			}
		}
	}
	finally
	{
		oBCAccount = null;
		oBO = null;
	}
}"
			   SEQUENCE="12"
			   UPDATED="02/01/2016 09:19:19"
			   UPDATED_BY="SADMIN"
			   CREATED="01/23/2015 01:14:59"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkMSISDN_MTTGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function checkMSISDN_MTTGroup, &quot;SIS OM Products &amp; Services Root List Applet (Service) - Tiny - Poste&quot; Applet
function checkMSISDN_MTTGroup(sMSISDN, sOwnerAccountId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset   : BusObject = TheApplication().GetBusObject(&quot;VF MSISDN Inquiry&quot;);
		var bcAsset   : BusComp   = boAsset.GetBusComp(&quot;HP Web Asset Mgmt - Asset&quot;);
		var bcAssetXA : BusComp   = boAsset.GetBusComp(&quot;HP Web Asset Mgmt - Asset XA&quot;);

		if (sOwnerAccountId == null || sOwnerAccountId == &quot;&quot; || sMSISDN == null || sMSISDN == &quot;&quot;)
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();	 
		bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
		bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sPartNumMTTGroup);
		bcAsset.SetSearchSpec(&quot;Owner Account Id&quot;,    sOwnerAccountId);			
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		do
		{
			bcAssetXA.SetViewMode(AllView);
			bcAssetXA.ClearToQuery();	 
			bcAssetXA.SetSearchSpec(&quot;Name&quot;,       &quot;Contact Phone&quot;);
			bcAssetXA.SetSearchSpec(&quot;Text Value&quot;, &quot;90&quot; + sMSISDN);
			bcAssetXA.ExecuteQuery(ForwardOnly); //DIVA 20120315 - Oracle review comments: ForwardOnly

			if (bcAssetXA.FirstRecord())
			{
				sErrorCode = &quot;X_VF_MTT_GROUP_ORDER2&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;X_VF_MTT_GROUP_ORDER2&quot;);
				return;
			}
		}
		while (bcAsset.NextRecord());
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetXA = null;
		bcAsset   = null;
		boAsset   = null;
	}
}"
			   SEQUENCE="23"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="02/02/2015 22:55:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkModMSISDN_MTTGroup"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkModMSISDN_MTTGroup(sMSISDN, sOwnerAccountId, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boAsset   : BusObject = TheApplication().GetBusObject(&quot;VF MSISDN Inquiry&quot;);
		var bcAsset   : BusComp   = boAsset.GetBusComp(&quot;HP Web Asset Mgmt - Asset&quot;);
		var bcAssetXA : BusComp   = boAsset.GetBusComp(&quot;HP Web Asset Mgmt - Asset XA&quot;);

		if (sOwnerAccountId == null || sOwnerAccountId == &quot;&quot; || sMSISDN == null || sMSISDN == &quot;&quot;)
		{
			return;
		}

		bcAsset.SetViewMode(AllView);
		bcAsset.ClearToQuery();	 
		bcAsset.SetSearchSpec(&quot;Status&quot;,              sAssetStatusActive);
		bcAsset.SetSearchSpec(&quot;Product Part Number&quot;, sPartNumMTTGroup);
		bcAsset.SetSearchSpec(&quot;Owner Account Id&quot;,    sOwnerAccountId);			
		bcAsset.ExecuteQuery(ForwardOnly);

		if (!bcAsset.FirstRecord())
		{
			return;
		}

		do
		{
			bcAssetXA.SetViewMode(AllView);
			bcAssetXA.ClearToQuery();	 
			bcAssetXA.SetSearchSpec(&quot;Name&quot;,       &quot;Contact Phone&quot;);
			bcAssetXA.SetSearchSpec(&quot;Text Value&quot;, &quot;90&quot; + sMSISDN);
			bcAssetXA.ExecuteQuery(ForwardOnly); //DIVA 20120315 - Oracle review comments: ForwardOnly
			if (bcAssetXA.FirstRecord())
			{
				sErrorCode = &quot;R142_038&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_038&quot;);
				return;
			}
		}
		while (bcAsset.NextRecord());
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcAssetXA = null;
		bcAsset   = null;
		boAsset   = null;
	}
}"
			   SEQUENCE="22"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="05/31/2016 09:21:26"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkOpenMnpOutSRWithStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="// Source: Function checkOpenMnpOutSRWithStatus, &quot;SIS OM Products &amp; Services Root List Applet (Service) - Tiny - Poste&quot; Applet
function checkOpenMnpOutSRWithStatus(sMSISDN, sOwnerAccountId, sActionTypeLIC, psOutputs)
{
	var sErrorCode = &quot;0&quot;;
	var sErrorText = &quot;&quot;;

	try
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		var boRequest : BusObject = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcRequest : BusComp	  = boRequest.GetBusComp(&quot;Service Request&quot;);
		var bcPortOut : BusComp	  = boRequest.GetBusComp(&quot;VF MNP Port Out MSISDN&quot;);
		
		var sRequestSearchExpr = &quot;&quot;;
		var bHasRequest        = false;
		var sRequestId         = &quot;&quot;;
		var sPortOutSearchExpr = &quot;&quot;;
		var bHasPortOut        = false;
		var sPortOutMSISDN     = &quot;&quot;;
		var bInMNPProcess      = false;
		var oToday             = new Date();
		var iTodayTime         = oToday.getTime();
		var sCheckPeriod       = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_MNP_MODIFY_BLOCK_DAYS&quot;, &quot;CHECKDAYS&quot;);//TLG-7267
		var oPreviousDate      = new Date(iTodayTime-(sCheckPeriod*24*60*60*1000));
		var iMonth             = oPreviousDate.getMonth() + 1;
		var sPreviousDate      = iMonth + &quot;/&quot; + oPreviousDate.getDate() + &quot;/&quot; + oPreviousDate.getFullYear() + &quot; &quot; +
								 oPreviousDate.getHours() + &quot;:&quot; + oPreviousDate.getMinutes() + &quot;:&quot; + oPreviousDate.getSeconds();

		if (sOwnerAccountId == null || sOwnerAccountId == &quot;&quot; || sMSISDN == null || sMSISDN == &quot;&quot;)
		{
			return;
		}

		sRequestSearchExpr = &quot;[VF SR Category]=&apos;&quot; + sSRCategoryMNPOut + &quot;&apos; AND [Account Id]=&apos;&quot; + sOwnerAccountId +
							 &quot;&apos; AND [Status]&lt;&gt;&apos;&quot;+ sSRStatusClosed + &quot;&apos;&quot;;

		bcRequest.SetViewMode(AllView);
		bcRequest.ClearToQuery();
		bcRequest.SetSearchExpr(sRequestSearchExpr);
		bcRequest.ExecuteQuery(ForwardOnly);
				
		bHasRequest = bcRequest.FirstRecord();

		while (bHasRequest)
		{
			sRequestId = bcRequest.GetFieldValue (&quot;Id&quot;);

			sPortOutSearchExpr = &quot;[SR Id]=&apos;&quot; + sRequestId + &quot;&apos;&quot;;

			bcPortOut.SetViewMode(AllView);
			bcPortOut.ClearToQuery();
			bcPortOut.ActivateField(&quot;SR Id&quot;);
			bcPortOut.ActivateField(&quot;VF MSISDN&quot;);
			bcPortOut.SetSearchExpr(sPortOutSearchExpr);
			bcPortOut.ExecuteQuery(ForwardOnly);

			bHasPortOut = bcPortOut.FirstRecord();
	
			while (bHasPortOut)
			{
				sPortOutMSISDN = bcPortOut.GetFieldValue(&quot;VF MSISDN&quot;);

				if (sMSISDN == sPortOutMSISDN)
				{
					bInMNPProcess = true;
					break;
				}

				bHasPortOut = bcPortOut.NextRecord();
			}

			if (bInMNPProcess)
			{
				break;
			}

			bHasRequest = bcRequest.NextRecord();
		}	

		if (!bInMNPProcess)
		{
			sRequestSearchExpr = &quot;[VF SR Category]=&apos;&quot; + sSRCategoryMNPOut +&quot;&apos; AND [Account Id]=&apos;&quot; + sOwnerAccountId +
								 &quot;&apos; AND [Status]=&apos;&quot; + sSRStatusClosed + &quot;&apos; AND [Opened Date]&gt;=&apos;&quot; + sPreviousDate + &quot;&apos;&quot;;

			bcRequest.SetViewMode(AllView);
			bcRequest.ClearToQuery();
			bcRequest.SetSearchExpr(sRequestSearchExpr);
			bcRequest.ExecuteQuery(ForwardOnly);

			bHasRequest = bcRequest.FirstRecord();

			while (bHasRequest)
			{
				sRequestId = bcRequest.GetFieldValue (&quot;Id&quot;);

                //JIRA-28745::Begin Add check for Autoaccepted
				sPortOutSearchExpr = &quot;[SR Id]=&apos;&quot; + sRequestId + &quot;&apos; AND ([VF Status]=&apos;Accepted&apos; OR [VF Status]=&apos;Autoaccepted&apos;) AND [VF MNP OUT Processed]=&apos;Workable&apos;&quot;;
                //JIRA-28745::End

				bcPortOut.SetViewMode(AllView);
				bcPortOut.ClearToQuery();
				bcPortOut.ActivateField(&quot;SR Id&quot;);
				bcPortOut.ActivateField(&quot;VF MSISDN&quot;);
				bcPortOut.SetSearchExpr(sPortOutSearchExpr);
				bcPortOut.ExecuteQuery(ForwardOnly);

				bHasPortOut = bcPortOut.FirstRecord();
		
				while (bHasPortOut)
				{
					sPortOutMSISDN = bcPortOut.GetFieldValue(&quot;VF MSISDN&quot;);

					if (sMSISDN == sPortOutMSISDN )
					{
						bInMNPProcess = true;
						break;
					}

					bHasPortOut = bcPortOut.NextRecord();
				}

				if (bInMNPProcess)
				{
					break;
				}

				bHasRequest = bcRequest.NextRecord();
			}	
		}

		if (bInMNPProcess)
		{
			if (sActionTypeLIC == sActionSuspendVoluntary)
			{
				sErrorCode = &quot;0&quot;; // VFTRCBU-19608
				sErrorText = &quot;&quot;; //VFTRCBU-19608
			}			
			else
			{
				sErrorCode = &quot;AM_TLG_83&quot;;
				sErrorText = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;AM_TLG_83&quot;);
		    }
		}
	}
	catch(oException)
	{
		sErrorCode = oException.errCode;
		sErrorText = oException.errText;
	}
	finally
	{
		psOutputs.SetProperty(&quot;Error Code&quot;,    sErrorCode);
		psOutputs.SetProperty(&quot;Error Message&quot;, sErrorText);

		bcPortOut = null;
		bcRequest = null;
		boRequest = null;
	}
}"
			   SEQUENCE="27"
			   UPDATED="10/12/2017 15:30:35"
			   UPDATED_BY="IBM_MERVEO"
			   CREATED="02/02/2015 22:55:42"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



