<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   COMMENTS="Siebel 8.1.1.11 repository"
   NAME="Siebel Repository"
   UPDATED="06/17/2014 13:50:12"
   UPDATED_BY="SADMIN"
   CREATED="06/06/2014 19:53:48"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF R2.1 CR155"
	   UI_FREEZE="N"
	   UPDATED="12/21/2016 16:34:03"
	   UPDATED_BY="SNOIVO"
	   CREATED="02/17/2012 08:00:41"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   EXTERNAL_USE="Y"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF VDF Test Employee Billing Accounts BS"
		   OBJECT_LANGUAGE_LOCKED="ENG"
		   OBJECT_LOCKED="Y"
		   OBJECT_LOCKED_DATE="12/21/2016 16:21:58"
		   SERVER_ENABLED="Y"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="Y"
		   OBJECT_LOCKED_BY_NAME="SNOIVO"
		   UPDATED="12/21/2016 16:34:00"
		   UPDATED_BY="SNOIVO"
		   CREATED="03/19/2012 16:17:17"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CallUpdatePaymentStatusWS"
			   UPDATED="03/19/2012 16:17:17"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 16:17:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Inputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Outputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CopySelectedInvoices"
			   UPDATED="03/19/2012 16:17:17"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 16:17:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Inputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Outputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetInputForInterimPaymentWS"
			   UPDATED="03/19/2012 16:17:17"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 16:17:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Inputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Outputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetInvoices"
			   UPDATED="04/19/2012 15:43:00"
			   UPDATED_BY="SADMIN"
			   CREATED="04/19/2012 15:43:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Inputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="04/19/2012 15:43:00"
				   UPDATED_BY="SADMIN"
				   CREATED="04/19/2012 15:43:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Outputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="04/19/2012 15:43:00"
				   UPDATED_BY="SADMIN"
				   CREATED="04/19/2012 15:43:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetListOfIdForPaymentCancellation"
			   UPDATED="05/15/2012 16:36:17"
			   UPDATED_BY="SADMIN"
			   CREATED="04/19/2012 15:43:00"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Inputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/15/2012 16:36:17"
				   UPDATED_BY="SADMIN"
				   CREATED="04/19/2012 15:43:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Outputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/15/2012 16:36:18"
				   UPDATED_BY="SADMIN"
				   CREATED="04/19/2012 15:43:00"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="GetRowIdforAccountingDate"
			   UPDATED="05/15/2012 16:36:17"
			   UPDATED_BY="SADMIN"
			   CREATED="05/15/2012 16:36:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Inputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/15/2012 16:36:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/15/2012 16:36:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Outputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/15/2012 16:36:17"
				   UPDATED_BY="SADMIN"
				   CREATED="05/15/2012 16:36:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SelectOrUnselectAll"
			   UPDATED="03/19/2012 16:17:17"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 16:17:17"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Inputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Outputs"
				   OPTIONAL="Y"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/19/2012 16:17:17"
				   UPDATED_BY="SADMIN"
				   CREATED="03/19/2012 16:17:17"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="CopySelectedInvoices"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function CopySelectedInvoices(Inputs, Outputs)
{
	try
	{
		var BOAccount :BusObject				= TheApplication().ActiveBusObject();
		var BCInstallmentRequestBC :BusComp 	= BOAccount.GetBusComp(&quot;VF Installment Request BC&quot;);
		var strPending				= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PAYMENT_INSTALLMENTS_STATUS&quot;,&quot;Pending&quot;);
		var strBA 					= Inputs.GetProperty(&quot;strBA&quot;);
		var strInvoiceNo 			= Inputs.GetProperty(&quot;strInvoiceNo&quot;);
		var strInvoiceCreationDate 	= Inputs.GetProperty(&quot;strInvoiceCreationDate&quot;);
		var strInvoiceDueDate 		= Inputs.GetProperty(&quot;strInvoiceDueDate&quot;);
		var strPaymentStatus 		= Inputs.GetProperty(&quot;strPaymentStatus&quot;);
		var strTotalAmount 			= Inputs.GetProperty(&quot;strTotalAmount&quot;);
		var strRequestId			= Inputs.GetProperty(&quot;strRequestId&quot;);
		
		strPaymentStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;, &quot;VF_PAYMENT_STATUS_DESC&quot;, strPaymentStatus);
		
		checkDuplicity(strInvoiceNo); // C_MSP00001295 
		with(BCInstallmentRequestBC)
		{	
			NewRecord(NewAfter);
		    SetFieldValue(&quot;Billing Account&quot;, strBA);
		    SetFieldValue(&quot;Invoice No&quot;, strInvoiceNo);
		    SetFieldValue(&quot;Invoice Creation Date&quot;, strInvoiceCreationDate);
		    SetFieldValue(&quot;Invoice Due Date&quot;, strInvoiceDueDate);
		    SetFieldValue(&quot;Payment Status&quot;, strPaymentStatus);
		    SetFieldValue(&quot;Invoice Due Amount&quot;, strTotalAmount);	
		    SetFieldValue(&quot;Request Status&quot;, strPending);
		    SetFieldValue(&quot;Request Id&quot;, strRequestId);
		    SetFieldValue(&quot;Selected&quot;, &quot;Y&quot;);
	  		WriteRecord();
	  	}	
	}
		
	finally
	{
		BCInstallmentRequestBC 	= null;	
		BOAccount 				= null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="06/22/2012 16:38:43"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 16:17:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetInputForInterimPaymentWS"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetInputForInterimPaymentWS(Inputs, Outputs)
{
	try
	{
		var BO :BusObject 			= TheApplication().ActiveBusObject();
		var BC :BusComp				= BO.GetBusComp(&quot;VF Billing Account VDF Test Employee&quot;);
		var InstallmentBC :BusComp 	= BO.GetBusComp(&quot;VF Installment Request BC&quot;);
		var PayConfBC :BusComp 		= BO.GetBusComp(&quot;VF Payment Confirmation BC&quot;);
		var InterimBC: BusComp;
				
		var strVFEmployee 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;TAX_TYPE&quot;,&quot;106&quot;);
		var strTestVF 			= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;TAX_TYPE&quot;,&quot;107&quot;);
		var strTestOtherGSM 	= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;TAX_TYPE&quot;,&quot;108&quot;);
		var strSearchSpechAll	= &quot;[Tax Type Literal] = &apos;&quot;+strVFEmployee+&quot;&apos;OR [Tax Type Literal] = &apos;&quot;+strTestVF+&quot;&apos; OR  [Tax Type Literal] = &apos;&quot;+strTestOtherGSM+&quot;&apos;&quot;;

		var iRecord				= &quot;&quot;;
		var strBillingCode		= &quot;&quot;;
		var strAllBA			= Inputs.GetProperty(&quot;AllBA&quot;);
		var strPaymentStatus	= Inputs.GetProperty(&quot;PaymentStatus&quot;);
		var strCustomerType     = Inputs.GetProperty(&quot;CustomerType&quot;); //added code  - WA#26 22082014 JSOUSA 
		var i= &quot;1&quot;;
		var sMsg =&quot;&quot;;
		var strExpr = &quot;&quot;;
		var ioStrExpr = &quot;&quot;;
		
		if (strAllBA ==&quot;N&quot;)
		{
			with(BC)
			{	
				iRecord = FirstSelected();
				if(iRecord)
				{
					strBillingCode = &quot;|&quot; + GetFieldValue(&quot;Account Code&quot;);
					strExpr = &quot;[Billing Account]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;;
					ioStrExpr = &quot;[VF Billing Account HP 2.Account Code]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;; //28102014 - WA#26 - RPIRES
					TheApplication().SetProfileAttr(&quot;ioDummyBACode&quot;,GetFieldValue(&quot;Id&quot;)); //28102014 - WA#26 - RPIRES
					iRecord = NextSelected();
			
					while(iRecord)
					{
						strBillingCode = strBillingCode + &quot;|&quot; + BC.GetFieldValue(&quot;Account Code&quot;);
						strExpr = strExpr + &quot; OR [Billing Account]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;;
						ioStrExpr = ioStrExpr + &quot; OR [VF Billing Account HP 2.Account Code]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;; //28102014 - WA#26 - RPIRES
						i++;
						iRecord = NextSelected();
					}
				}
				else
				{	
					sMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;336&quot;);
					TheApplication().RaiseErrorText(sMsg);
				}	
			}
		}
		else
		{
			with (BC)
			{				
				iRecord = FirstRecord();
				if (iRecord)
				{	
					strBillingCode = &quot;|&quot; + GetFieldValue(&quot;Account Code&quot;);
					strExpr = &quot;[Billing Account]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;;
					ioStrExpr = &quot;[VF Billing Account HP 2.Account Code]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;; //28102014 - WA#26 - RPIRES
					TheApplication().SetProfileAttr(&quot;ioDummyBACode&quot;,GetFieldValue(&quot;Id&quot;)); //28102014 - WA#26 - RPIRES
					iRecord = NextRecord();
					while(iRecord)
					{
						strBillingCode = strBillingCode + &quot;|&quot; + BC.GetFieldValue(&quot;Account Code&quot;);
						strExpr = strExpr + &quot; OR [Billing Account]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;;
						ioStrExpr = ioStrExpr + &quot; OR [VF Billing Account HP 2.Account Code]=&apos;&quot;+GetFieldValue(&quot;Account Code&quot;)+&quot;&apos;&quot;; //28102014 - WA#26 - RPIRES
						i++;
						iRecord = NextRecord();
					}
				}
				else
				{	
					sMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;336&quot;);
					TheApplication().RaiseErrorText(sMsg);
				}
			}
		}
			
		TheApplication().SetProfileAttr(&quot;ioSearchExpr&quot;,ioStrExpr); //28102014 - WA#26 - RPIRES
				
		strBillingCode = strBillingCode + &quot;|&quot;;
		
		if(strPaymentStatus == &quot;Unpaid&quot;)
		{		
			TheApplication().SetProfileAttr(&quot;Payment Status&quot;,&quot;Unpaid&quot;);
			TheApplication().SetProfileAttr(&quot;Invoice Type&quot;,&quot;1&quot;); //VFTRCBU-35250 - JFONSECA
			
				//VFTRCBU-35429|DEF-15969 - SNOIVO
				if(TheApplication().ActiveViewName() == &quot;VFTRCBU Invoice Payments View&quot;)
					{
						TheApplication().SetProfileAttr(&quot;Invoice Type&quot;,&quot;0&quot;);
						with(InstallmentBC)
			            {
			                ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(strExpr);
						    ExecuteQuery(ForwardOnly);
					    }
		    		}
		    	else if (TheApplication().ActiveViewName() == &quot;VF Payment of Invoices View&quot; &amp;&amp; strAllBA ==&quot;N&quot; )
		    		{
						TheApplication().SetProfileAttr(&quot;Invoice Type&quot;,&quot;0&quot;);
						with(InstallmentBC)
			            {
			                ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(strExpr);
						    ExecuteQuery(ForwardOnly);
					    }
		    		}
		    	else
					{
				//VFTRCBU-35429|DEF-15969 - SNOIVO
						
						with(InstallmentBC)
			            {
			                ClearToQuery();
							SetViewMode(AllView);
							SetSearchExpr(strExpr);
						    ExecuteQuery(ForwardOnly);
					    }
					}
		}
		
		else if(strPaymentStatus == &quot;Paid&quot;)
		{		
			TheApplication().SetProfileAttr(&quot;Payment Status&quot;,&quot;Paid&quot;);
			TheApplication().SetProfileAttr(&quot;Invoice Type&quot;,&quot;1&quot;); //VFTRCBU-35250 - JFONSECA
			with(PayConfBC)
            {
                ClearToQuery();
				SetViewMode(AllView);
				SetSearchExpr(strExpr);
			    ExecuteQuery(ForwardOnly);
		    }
		}
			
		TheApplication().SetProfileAttr(&quot;IPBillingCode&quot;, strBillingCode);
		// Added code below - WA#26 22082014 JSOUSA 
		if(strCustomerType==&quot;Consumer&quot;)
		{
				TheApplication().SetProfileAttr(&quot;CustomerType&quot;, &quot;Consumer&quot;);
		}
		// end of code added
					
		// Call VBC
		InterimBC = BO.GetBusComp(&quot;VF Interim Payment Test Billing Accounts VBC&quot;);
		InterimBC.ClearToQuery();			
		InterimBC.ExecuteQuery(ForwardBackward);//This ForwardBackward is necessary because of CR155. Don&apos;t remove it.	
		
		return (CancelOperation);	
	}

	finally
	{	
		BC 					= null;
		InstallmentBC		= null;
		InterimBC 			= null;
		PayConfBC			= null;
		BO 					= null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="12/21/2016 16:34:00"
			   UPDATED_BY="SNOIVO"
			   CREATED="03/19/2012 16:17:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetInvoices"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetInvoices(Inputs, Outputs)
{
    try
    {
        var BO :BusObject   = TheApplication().ActiveBusObject();
        var BC :BusComp  	= BO.GetBusComp(&quot;VF Interim Payment Test Billing Accounts VBC&quot;);
        var bcCanc : BusComp;
        var i =1;
        var strSelect = &quot;&quot;;
        var strExpr = &quot;&quot;;
        var ioStrExpr = &quot;&quot;;
        var strInvoiceNumber = &quot;&quot;;
                                
        with(BC)
        {
         	var RecordExist = FirstRecord();
			if(RecordExist)
            {              
            	strSelect = GetFieldValue(&quot;SELECT&quot;); 
                if(strSelect == &quot;Y&quot;)
            	{
            		strInvoiceNumber = &quot;|&quot; + GetFieldValue(&quot;INVOICE_NUMBER&quot;);
                 	TheApplication().SetProfileAttr(&quot;ioDummyInvoiceId&quot;,GetFieldValue(&quot;INVOICE_NUMBER&quot;)); //28102014 - WA#26 - RPIRES
            		ioStrExpr = &quot;[VF Interim Payment Test Billing Accounts VBC.INVOICE_NUMBER]=&apos;&quot; + GetFieldValue(&quot;INVOICE_NUMBER&quot;) + &quot;&apos;&quot;; //28102014 - WA#26 - RPIRES
            	}
            	
 				RecordExist = NextRecord();
                while(RecordExist)
 				 {
                  	strSelect = GetFieldValue(&quot;SELECT&quot;); 
                    if(strSelect == &quot;Y&quot;)
                    {
                        strInvoiceNumber = strInvoiceNumber + &quot;|&quot; + BC.GetFieldValue(&quot;INVOICE_NUMBER&quot;);
                        TheApplication().SetProfileAttr(&quot;ioDummyInvoiceId&quot;,BC.GetFieldValue(&quot;INVOICE_NUMBER&quot;)); //28102014 - WA#26 - RPIRES
                        if(ioStrExpr == &quot;&quot;)
                        	ioStrExpr = &quot;[VF Interim Payment Test Billing Accounts VBC.INVOICE_NUMBER]=&apos;&quot; + GetFieldValue(&quot;INVOICE_NUMBER&quot;) + &quot;&apos;&quot;; //28102014 - WA#26 - RPIRES
                        else
                        	ioStrExpr = ioStrExpr + &quot; OR [VF Interim Payment Test Billing Accounts VBC.INVOICE_NUMBER]=&apos;&quot; + GetFieldValue(&quot;INVOICE_NUMBER&quot;) + &quot;&apos;&quot;; //28102014 - WA#26 - RPIRES
                        i++;
                     }
                     RecordExist = NextRecord();
                 }
                                                                
                 strInvoiceNumber = strInvoiceNumber + &quot;|&quot;;
                 
                 TheApplication().SetProfileAttr(&quot;IPBillingCode&quot;, &quot;&quot;);              
                 TheApplication().SetProfileAttr(&quot;ListOfInvoicesId&quot;, strInvoiceNumber);
                 TheApplication().SetProfileAttr(&quot;ioSearchExpr&quot;,ioStrExpr); //28102014 - WA#26 - RPIRES
                                                               
                 bcCanc = BO.GetBusComp(&quot;VF Request Cancellation VBC&quot;);
                 bcCanc.ClearToQuery ();
                 bcCanc.ExecuteQuery (ForwardBackward); //Backward added to solve defect C_MSP00001833.
            }
        	else       
               TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;336&quot;));

       }
	}

   finally
  	{
  	    BC   	= null;
  	    bcCanc	= null;
   		BO   	= null;
    }
}"
			   SEQUENCE="4"
			   UPDATED="10/28/2014 17:04:19"
			   UPDATED_BY="RPIRES"
			   CREATED="04/19/2012 15:43:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetListOfIdForPaymentCancellation"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetListOfIdForPaymentCancellation(Inputs, Outputs)
{
	try
	{
		var BO :BusObject 		= TheApplication().ActiveBusObject();
		var BC :BusComp			= BO.GetBusComp(&quot;VF Payment Confirmation BC&quot;);	
		var iRecord				= &quot;&quot;;
		var strListOfId			= &quot;&quot;;
		var strAll				= Inputs.GetProperty(&quot;All&quot;);	
		var sMsg				= &quot;&quot;;
		var strPending	 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PAYMENT_INSTALLMENTS_STATUS&quot;,&quot;Pending&quot;);
		var ioStrExpr = &quot;&quot;;
	
		var i= &quot;1&quot;;

		if (strAll ==&quot;N&quot;)	
		{
			with(BC)
			{		
				iRecord = FirstSelected();
				
				if (iRecord)
				{
					strListOfId = &quot;|&quot; + GetFieldValue(&quot;Id&quot;);
					ioStrExpr = &quot;[VF Payment Confirmation BC.Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;; //29102014 - WA#26 - RPIRES						
					iRecord = NextSelected();
					
					while(iRecord)
					{
						strListOfId = strListOfId + &quot;|&quot; + GetFieldValue(&quot;Id&quot;);	
						ioStrExpr = ioStrExpr + &quot; OR [VF Payment Confirmation BC.Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;; //29102014 - WA#26 - RPIRES							
						i++;
						iRecord = NextSelected();		
					}
				}
			
				else 
				{
					sMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_336&quot;);
					TheApplication().RaiseErrorText(sMsg);
				}
			}	
		}
		
		else
		{
			with (BC)
			{	
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Request Status&quot;, strPending);			
				ExecuteQuery(ForwardOnly);
				iRecord = FirstRecord();
				
			    if (iRecord)
			    {		
					strListOfId = &quot;|&quot; + GetFieldValue(&quot;Id&quot;);
					ioStrExpr = &quot;[VF Payment Confirmation BC.Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;; //29102014 - WA#26 - RPIRES
					iRecord = NextRecord();
				
					while(iRecord)
					{
						strListOfId = strListOfId + &quot;|&quot; + GetFieldValue(&quot;Id&quot;);
						ioStrExpr = ioStrExpr + &quot; OR [VF Payment Confirmation BC.Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;; //29102014 - WA#26 - RPIRES
						i++;
						iRecord = NextRecord();
					}
				}
			 	
			 	else
				{
					sMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R142_336&quot;);
					TheApplication().RaiseErrorText(sMsg);
				}
				
				ClearToQuery();
				SetViewMode(AllView);			
				ExecuteQuery(ForwardOnly);	
			}
		}
		
		TheApplication().SetProfileAttr(&quot;paySearchExpr&quot;,ioStrExpr);
				
		strListOfId = strListOfId + &quot;|&quot;;
		
		Outputs.SetProperty(&quot;LIST_OF_ID&quot;, strListOfId);
	}
	
	finally
	{	
		BC							= null;
		BO							= null;
	}
}"
			   SEQUENCE="6"
			   UPDATED="10/30/2014 16:22:15"
			   UPDATED_BY="RPIRES"
			   CREATED="04/19/2012 15:43:00"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="GetRowIdforAccountingDate"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function GetRowIdforAccountingDate(Inputs, Outputs)
{
	try
	{
		var BO :BusObject 	= TheApplication().ActiveBusObject();
		var BC :BusComp	 	= BO.GetBusComp(&quot;VF Payment Confirmation BC&quot;);
		var i 	 = 1;
		var strExpr =&quot;&quot;;
		var iRecord;
		var strAllPayments 		= Inputs.GetProperty(&quot;All&quot;);
		var strPending	 		= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PAYMENT_INSTALLMENTS_STATUS&quot;,&quot;Pending&quot;);
		
		if (strAllPayments ==&quot;N&quot;)	
		{
			with(BC)
			{	
				iRecord = FirstSelected();

				if(iRecord)
				{
					strExpr = &quot;[Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;;
					
					if (GetFieldValue(&quot;Request Status&quot;) != strPending)
						TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_CR155_6&quot;));

					iRecord = NextSelected();
			
					while(iRecord)
					{
						strExpr = strExpr + &quot; OR [Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;;
						
						if (GetFieldValue(&quot;Request Status&quot;) != strPending)
							TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;R21_CR155_6&quot;));

						i++;
						iRecord = NextSelected();
					}
				}
				else
				{	
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;336&quot;));
				}	
			}
		}
		else
		{
			with (BC)
			{	
				ClearToQuery();
				SetViewMode(AllView);
				SetSearchSpec(&quot;Request Status&quot;, strPending);			
				ExecuteQuery(ForwardOnly);
				iRecord = FirstRecord();			

				if (iRecord)
				{	
					strExpr = &quot;[Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;;
					iRecord = NextRecord();
					
					while(iRecord)
					{
						strExpr = strExpr + &quot; OR [Id]=&apos;&quot;+GetFieldValue(&quot;Id&quot;)+&quot;&apos;&quot;;
						i++;
						iRecord = NextRecord();
					}
				}
				else
				{	
					TheApplication().RaiseErrorText(TheApplication().LookupMessage(&quot;VF Message Category&quot;, &quot;336&quot;));
				}
			}
		}
				
		Outputs.SetProperty(&quot;ListOfRowId&quot;, strExpr);
	}
	
	finally
	{
		BC = null;
		BO = null;
	}
}"
			   SEQUENCE="7"
			   UPDATED="06/22/2012 16:44:25"
			   UPDATED_BY="SADMIN"
			   CREATED="05/15/2012 16:36:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	switch (MethodName)
	{
		case &quot;CopySelectedInvoices&quot;:
			CopySelectedInvoices(Inputs, Outputs);
			return(CancelOperation);
			
		case &quot;GetInputForInterimPaymentWS&quot;:
			GetInputForInterimPaymentWS(Inputs, Outputs);
			return(CancelOperation);
			break;
			
		case &quot;GetListOfIdForPaymentCancellation&quot;:
			GetListOfIdForPaymentCancellation(Inputs, Outputs);
			return(CancelOperation);
			break;
			
		case &quot;GetRowIdforAccountingDate&quot;:
			GetRowIdforAccountingDate(Inputs, Outputs)
			return(CancelOperation);
			break;
	
		case &quot;GetInvoices&quot;:
			GetInvoices(Inputs, Outputs);
			return(CancelOperation);
			break;
		}
		
		return(ContinueOperation);
}"
			   SEQUENCE="8"
			   UPDATED="05/24/2012 08:27:43"
			   UPDATED_BY="SADMIN"
			   CREATED="03/19/2012 16:17:17"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="checkDuplicity"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function checkDuplicity(strInvoiceNo)
{
	try
	{
		var BOAccount: BusObject 				= TheApplication().GetBusObject(&quot;Account&quot;);
		var BCInstallmentRequestBC: BusComp 	= BOAccount.GetBusComp(&quot;VF Installment Request BC&quot;);
		var sPending = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;PAYMENT_INSTALLMENTS_STATUS&quot;, &quot;Pending&quot;);
		var sCount = 0;	
		var inProp :PropertySet     = TheApplication().NewPropertySet();
		var outProp :PropertySet    = TheApplication().NewPropertySet();
		var BS :Service 			= TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;strInvoiceNo&quot;, strInvoiceNo); 
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp); 
		
		with(BCInstallmentRequestBC)
		{
			ClearToQuery()
			SetViewMode(AllView);
			SetSearchExpr(&quot;[Invoice No] = &apos;&quot;+strInvoiceNo+&quot;&apos; AND [Request Status] = &apos;&quot;+sPending+&quot;&apos;&quot;);
			ActivateField(&quot;Selected&quot;);
			ExecuteQuery(ForwardOnly);
			var sRecCount = FirstRecord();
			while(sRecCount)
			{
				SetFieldValue(&quot;Selected&quot;,&quot;Y&quot;);
				sCount = sCount + 1;
				sRecCount = NextRecord();
			}
		}
		if(sCount &gt; 0)
		{
			var sMsg = TheApplication().LookupMessage(&quot;VF Message Category&quot;,&quot;R21_CR155_2&quot;);
			TheApplication().RaiseErrorText(sMsg);
		}
	}

	finally
	{
		BCInstallmentRequestBC = null;
		BOAccount = null;
		inProp = null;
		outProp = null;
		BS = null;
	}
}"
			   SEQUENCE="1"
			   UPDATED="06/22/2012 16:36:18"
			   UPDATED_BY="SADMIN"
			   CREATED="05/08/2012 08:31:04"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="getLIC"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function getLIC (type, value) 
{ 
	try
	{
		var lovBusObj : BusObject = TheApplication().GetBusObject(&quot;List Of Values&quot;); 
		var lovBusComp : BusComp = lovBusObj.GetBusComp(&quot;List Of Values&quot;); 
		var name = &quot;&quot;; 		
		var inProp: PropertySet = TheApplication().NewPropertySet();
		var outProp: PropertySet = TheApplication().NewPropertySet();
		var BS: Service  = TheApplication().GetService(&quot;VF TRK Utilities&quot;);
		inProp.SetProperty(&quot;type&quot;,type); 
		inProp.SetProperty(&quot;value&quot;, value);
		inProp.SetProperty(&quot;Validation Input Mode&quot;, &quot;AND&quot;);
		BS.InvokeMethod(&quot;Input Validation&quot;,inProp, outProp);
		
		lovBusComp.SetSearchSpec(&quot;Type&quot;, type); 
		lovBusComp.SetSearchSpec(&quot;Value&quot;, value); 
		lovBusComp.ExecuteQuery(ForwardOnly); 
		if(lovBusComp.FirstRecord()) 
		name = lovBusComp.GetFieldValue(&quot;Name&quot;); 	
		return(name); 
	}
   finally
  	{
  	    lovBusComp   	= null;
  	    lovBusObj		= null;
  	    inProp = null;
		outProp = null;
		BS = null;	
    }
}"
			   SEQUENCE="5"
			   UPDATED="07/01/2012 19:42:57"
			   UPDATED_BY="SADMIN"
			   CREATED="03/30/2012 15:03:25"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



