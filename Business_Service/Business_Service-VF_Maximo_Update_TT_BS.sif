<?xml version="1.0" encoding="UTF-8"?>
<REPOSITORY
   NAME="Siebel Repository"
   UPDATED="05/20/2015 12:00:07"
   UPDATED_BY="SADMIN"
   CREATED="05/19/2015 19:58:21"
   CREATED_BY="SADMIN"
   FIO_PLACEHOLDER_FIO="TRUE">
	<PROJECT
	   ALLOW_OBJECT_LOCKING="Y"
	   INACTIVE="N"
	   LOCKED="N"
	   NAME="VF Maximo Ticket"
	   UI_FREEZE="N"
	   UPDATED="06/29/2017 11:33:47"
	   UPDATED_BY="VF_AGUGRER"
	   CREATED="03/17/2011 12:33:59"
	   CREATED_BY="SADMIN"
	   FIO_PLACEHOLDER_FIO="TRUE">
		<BUSINESS_SERVICE
		   CACHE="N"
		   CLASS="CSSService"
		   COMMENTS="CR178"
		   EXTERNAL_USE="N"
		   HIDDEN="N"
		   INACTIVE="N"
		   NAME="VF Maximo Update TT BS"
		   OBJECT_LOCKED="N"
		   SERVER_ENABLED="N"
		   STATE_MANAGEMENT_TYPE="Stateful"
		   WEB_SERVICE_ENABLED="N"
		   UPDATED="06/29/2017 11:34:21"
		   UPDATED_BY="VF_AGUGRER"
		   CREATED="03/17/2011 12:35:05"
		   CREATED_BY="SADMIN">
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="CallOneNet"
			   UPDATED="05/06/2015 09:42:48"
			   UPDATED_BY="SADMIN"
			   CREATED="05/06/2015 09:42:48"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetMaximoData"
			   UPDATED="05/11/2015 09:22:13"
			   UPDATED_BY="SADMIN"
			   CREATED="05/06/2015 09:42:48"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="VF Maximo FK Id"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="05/11/2015 09:22:13"
				   UPDATED_BY="SADMIN"
				   CREATED="05/11/2015 09:22:13"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="SetSrStatus"
			   UPDATED="04/12/2015 23:24:33"
			   UPDATED_BY="SADMIN"
			   CREATED="04/12/2015 23:24:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateProperties"
			   UPDATED="07/16/2015 11:59:33"
			   UPDATED_BY="SADMIN"
			   CREATED="05/06/2015 09:42:49"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="CreateMaximo"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="07/16/2015 11:59:33"
				   UPDATED_BY="SADMIN"
				   CREATED="07/16/2015 11:59:33"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OrderLineItemId"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="05/06/2015 09:42:49"
				   UPDATED_BY="SADMIN"
				   CREATED="05/06/2015 09:42:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="Hierarchy"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SiebelMessage"
				   OPTIONAL="N"
				   STORAGE_TYPE="Hierarchy"
				   TYPE="Input / Output"
				   UPDATED="05/06/2015 09:42:49"
				   UPDATED_BY="SADMIN"
				   CREATED="05/06/2015 09:42:49"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_METHOD
			   HIDDEN="N"
			   INACTIVE="N"
			   NAME="UpdateTT"
			   UPDATED="03/08/2012 13:55:22"
			   UPDATED_BY="SADMIN"
			   CREATED="03/17/2011 12:35:05"
			   CREATED_BY="SADMIN">
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="GSM"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/17/2011 12:35:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/17/2011 12:35:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="Maximo ID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/17/2011 12:35:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/17/2011 12:35:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="OLDStatus"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/08/2012 13:55:22"
				   UPDATED_BY="SADMIN"
				   CREATED="03/08/2012 13:55:22"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="SR ID"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/17/2011 12:35:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/17/2011 12:35:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="StatusCode"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Output"
				   UPDATED="03/17/2011 12:35:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/17/2011 12:35:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
				<BUSINESS_SERVICE_METHOD_ARG
				   DATA_TYPE="String"
				   HIDDEN="N"
				   INACTIVE="N"
				   NAME="TT Status"
				   OPTIONAL="N"
				   STORAGE_TYPE="Property"
				   TYPE="Input"
				   UPDATED="03/17/2011 12:35:05"
				   UPDATED_BY="SADMIN"
				   CREATED="03/17/2011 12:35:05"
				   CREATED_BY="SADMIN">
				</BUSINESS_SERVICE_METHOD_ARG>
			</BUSINESS_SERVICE_METHOD>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="(declarations)"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="/*function CallOneNet(Input, Output) {
	try {
				var psCreateIn = TheApplication().NewPropertySet();
				var psCreateOut = TheApplication().NewPropertySet();
				psCreateIn.SetProperty(&quot;ProcessName&quot;, &quot;VF Create OneNet Maximo WF&quot;);
				psCreateIn.SetProperty(&quot;Object Id&quot;, &quot;1-OLC2UD&quot;);
				var strWFBS	= TheApplication().GetService(&quot;Workflow Process Manager&quot;);
				strWFBS.InvokeMethod (&quot;RunProcess&quot;, psCreateIn, psCreateOut);
	

	}
	
	finally{
	psCreateIn= null;
	}
	
}*/"
			   SEQUENCE="1"
			   UPDATED="05/06/2015 09:42:49"
			   UPDATED_BY="SADMIN"
			   CREATED="05/06/2015 09:42:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreCanInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreCanInvokeMethod (MethodName, &amp;CanInvoke)
{
	if (MethodName == &quot;UpdateTT&quot;)
	{
		CanInvoke = &apos;TRUE&apos;;
	}
	else
	{
		CanInvoke = &apos;FALSE&apos;;
	}
	
	return (ContinueOperation);
}"
			   SEQUENCE="6"
			   UPDATED="05/06/2015 09:42:49"
			   UPDATED_BY="SADMIN"
			   CREATED="03/17/2011 12:35:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="Service_PreInvokeMethod"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function Service_PreInvokeMethod (MethodName, Inputs, Outputs)
{
	if (MethodName == &quot;UpdateTT&quot;)
	{
		return (UpdateTT (Inputs, Outputs));
	}
	if (MethodName == &quot;SetSrStatus&quot;)
	{
		SetSrStatus (Inputs, Outputs);
		return (CancelOperation);
	}

	if (MethodName == &quot;UpdateProperties&quot;)
	{
		UpdateProperties (Inputs, Outputs);
		return (CancelOperation);
	}
	if (MethodName == &quot;SetMaximoData&quot;)
	{
		SetMaximoData (Inputs, Outputs);
		return (CancelOperation);
	}
	return (ContinueOperation);
}"
			   SEQUENCE="7"
			   UPDATED="07/16/2015 11:59:33"
			   UPDATED_BY="SADMIN"
			   CREATED="03/17/2011 12:35:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetMaximoData"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetMaximoData(Input, Output) {
	try {
		var boMaximo = TheApplication().GetBusObject(&quot;VF Maximo Ticket Flat BO&quot;);
		var bcMaximo = boMaximo.GetBusComp(&quot;VF Maximo Ticket BC&quot;);
		var strSearchSpec	= Input.GetProperty(&quot;SearchSpec&quot;);
		var strOperation = Input.GetProperty(&quot;Operation&quot;);
		var strMaximoId = Input.GetProperty(&quot;Maximo_ID&quot;);
		var strSR_ID = Input.GetProperty(&quot;SR_ID&quot;);
		
		var strStatus = Input.GetProperty(&quot;Status&quot;);
		var strRejectedFlag = Input.GetProperty(&quot;RejectedFlag&quot;);
		var strNonVFrelFlag = Input.GetProperty(&quot;NonVFrelFlag&quot;);
		var strLastWorkingGroup= Input.GetProperty(&quot;LastWorkingGroup&quot;);
		var strMaximoDesc = Input.GetProperty(&quot;MaximoDesc&quot;);
		var strMaximoSol = Input.GetProperty(&quot;MaximoSol&quot;);
		var strMaximoRowId=&quot;&quot;;
		
		
		
		var bNextSR = false;
		var iMaxErrCnt = 0;
		var strError = &quot;1&quot;;

		if (strSearchSpec !=&quot;&quot;) {
			while (ToNumber(iMaxErrCnt) &lt; 11 &amp;&amp; strError != &quot;&quot;) {
				strError = &quot;&quot;;
				iMaxErrCnt = ToNumber(iMaxErrCnt) + 1;
				try {
					with (bcMaximo) {
						ClearToQuery();
						SetViewMode(AllView);						
						ActivateField(&quot;Maximo Id&quot;);
						ActivateField(&quot;Status&quot;);
						ActivateField(&quot;Rejected flag&quot;);
						ActivateField(&quot;Non Vodafone related flag&quot;);
						ActivateField(&quot;Last Working Group&quot;);
						ActivateField(&quot;Maximo Description&quot;);
						ActivateField(&quot;Maximo Solution&quot;);
						SetSearchExpr(strSearchSpec);
						//SetSearchExpr(&quot;[Maximo Id]=&apos;&apos;&quot;);
						ExecuteQuery(ForwardOnly);
						bNextSR = FirstRecord();
						while (bNextSR) {
						//ESANTOS DEF-3151 - Added
							strMaximoRowId =GetFieldValue(&quot;Id&quot;);
							if (strOperation == &quot;1&quot;) {
								SetFieldValue(&quot;Maximo Id&quot;, strMaximoId);
							} else if (strOperation == &quot;2&quot;) {
								SetFieldValue(&quot;Status&quot;,strStatus);
								SetFieldValue(&quot;Rejected flag&quot;,strRejectedFlag);
								SetFieldValue(&quot;Non Vodafone related flag&quot;,strNonVFrelFlag);
								SetFieldValue(&quot;Last Working Group&quot;,strLastWorkingGroup);
								SetFieldValue(&quot;Maximo Description&quot;,strMaximoDesc);
								SetFieldValue(&quot;Maximo Solution&quot;,strMaximoSol);
							} else if (strOperation == &quot;3&quot;) {
								SetFieldValue(&quot;Maximo Id&quot;, strMaximoId);
								SetFieldValue(&quot;Status&quot;,strStatus);
								SetFieldValue(&quot;Rejected flag&quot;,strRejectedFlag);
								SetFieldValue(&quot;Non Vodafone related flag&quot;,strNonVFrelFlag);
								SetFieldValue(&quot;Last Working Group&quot;,strLastWorkingGroup);
								SetFieldValue(&quot;Maximo Description&quot;,strMaximoDesc);
								SetFieldValue(&quot;Maximo Solution&quot;,strMaximoSol);								
							} 
							WriteRecord();
							bNextSR = NextRecord();
						}
					}
				}
				catch (e) {
						Output.Reset();
						strError = e.toString();
				}
			}
		}
	} catch (e) {}
	finally 
	{
		if(strError!=&quot;&quot;)
		{
			Output.SetProperty(&quot;Error Count&quot;,iMaxErrCnt);
			throw(strError);			
		}
		//ESANTOS DEF-3151 - Added
		Output.SetProperty(&quot;VF Maximo FK Id&quot;,strMaximoRowId);
		
		bcMaximo = null;
		boMaximo = null;
	}
}"
			   SEQUENCE="2"
			   UPDATED="07/16/2015 11:59:33"
			   UPDATED_BY="SADMIN"
			   CREATED="05/06/2015 09:42:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="SetSrStatus"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function SetSrStatus(Input, Output) {
	try {
		var boServReq = TheApplication().GetBusObject(&quot;Service Request&quot;);
		var bcServReq = boServReq.GetBusComp(&quot;VF Service Request Performance&quot;);
		var strStatus = Input.GetProperty(&quot;Status&quot;);
		var strSubStatus = Input.GetProperty(&quot;Sub-Status&quot;);
		var strMaximoFKId = Input.GetProperty(&quot;VF Maximo FK Id&quot;);
		var strConclusion = Input.GetProperty(&quot;Conclusion&quot;);
		var strOperation = Input.GetProperty(&quot;Operation&quot;);
		var strSR_ID = Input.GetProperty(&quot;SR_ID&quot;);
		var strMaximoId = Input.GetProperty(&quot;Maximo_ID&quot;);
		var bNextSR = false;
		var iMaxErrCnt = 0;
		var strError = &quot;1&quot;;
		var strClosedStatus = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_STATUS&quot;,&quot;Closed&quot;); //DEF-9802
		var strResolvedStatus=&quot;Resolved&quot;;

		if (strSR_ID != &quot;&quot; || strMaximoId != &quot;&quot;) {
			while (ToNumber(iMaxErrCnt) &lt; 11 &amp;&amp; strError != &quot;&quot;) {
				strError = &quot;&quot;;
				iMaxErrCnt = ToNumber(iMaxErrCnt) + 1;
				try {
					with (bcServReq) {
						InvokeMethod(&quot;SetAdminMode&quot;, &quot;TRUE&quot;);
						ClearToQuery();
						SetViewMode(AllView);
						ActivateField(&quot;Status&quot;);
						ActivateField(&quot;Sub-Status&quot;);
						ActivateField(&quot;VF Maximo FK Id&quot;);
						ActivateField(&quot;VF Maximo Status&quot;);
						ActivateField(&quot;Conclusion&quot;);
						ActivateField(&quot;VF ByPass&quot;);
						ActivateField(&quot;Timestamp Calc&quot;);
						ActivateField(&quot;Closed Date&quot;);  //DEF-9802 by GBRAZ
						if (strMaximoId != &quot;&quot;) {
							SetSearchExpr(&quot;[VF Maximo Id]=&apos;&quot; + strMaximoId + &quot;&apos;&quot;);
						} else {
							SetSearchExpr(&quot;[SR Number]=&apos;&quot; + strSR_ID + &quot;&apos;&quot;);
						}
						ExecuteQuery(ForwardOnly);
						bNextSR = FirstRecord();
						while (bNextSR) {
						        var sTimestamp1 = GetFieldValue(&quot;Timestamp Calc&quot;); //DEF-9802 by GBRAZ
							if (strOperation == &quot;1&quot;) {
								SetFieldValue(&quot;Status&quot;, strStatus);
								SetFieldValue(&quot;Sub-Status&quot;, strSubStatus);
							     // DEF-9802 by GBRAZ
							    if (strStatus==strClosedStatus) {
			                    	SetFieldValue (&quot;Closed Date&quot;, sTimestamp1);  
	                            }
							} else if (strOperation == &quot;2&quot;) {
								SetFieldValue(&quot;VF Maximo FK Id&quot;, strMaximoFKId);
								SetFieldValue(&quot;Sub-Status&quot;, strSubStatus);
							} else if (strOperation == &quot;3&quot;) {
							 	var maximoStatus = GetFieldValue(&quot;VF Maximo Status&quot;);
							 	SetFieldValue(&quot;Sub-Status&quot;, strSubStatus);
							
							/*	if (maximoStatus==strResolvedStatus &amp;&amp; GetFieldValue(&quot;VF ByPass&quot;) ==&quot;Y&quot;) {
									SetFieldValue(&quot;Sub-Status&quot;, &quot;Resolved&quot;);
									SetFieldValue(&quot;Status&quot;, strClosedStatus);
									SetFieldValue (&quot;Closed Date&quot;, sTimestamp1);  
								}
								else {
									SetFieldValue(&quot;Sub-Status&quot;, strSubStatus);
								}*/
							
							} else if (strOperation == &quot;4&quot;) {
								SetFieldValue(&quot;Status&quot;, strStatus);
								SetFieldValue(&quot;VF Maximo FK Id&quot;, strMaximoFKId);
								SetFieldValue(&quot;Sub-Status&quot;, strSubStatus);
								 // DEF-9802 by GBRAZ
							    if (strStatus==strClosedStatus) {
			                    	SetFieldValue (&quot;Closed Date&quot;, sTimestamp1);  
	                            }
							} else if (strOperation == &quot;5&quot;) {
								//ESANTOS DEF-3082 - SetFieldValue sequence changed to make Status at the end	
								SetFieldValue(&quot;Conclusion&quot;, strConclusion);
								SetFieldValue(&quot;Sub-Status&quot;, strSubStatus);
								SetFieldValue(&quot;Status&quot;, strStatus);
							  // DEF-9802 by GBRAZ
							    if (strStatus==strClosedStatus) {
			                    	SetFieldValue (&quot;Closed Date&quot;, sTimestamp1);  
	                            }         
							}
							Output.SetProperty(&quot;Maximo_ID&quot;,GetFieldValue(&quot;VF Maximo FK Id&quot;));
							WriteRecord();
							bNextSR = NextRecord();
						}
					}
				}
				catch (e) {
						Output.Reset();
						strError = e.toString();
				}
			}
		}
	} catch (e) {}
	finally 
	{
		if(strError!=&quot;&quot;)
		{
			Output.SetProperty(&quot;Error Count&quot;,iMaxErrCnt);
			throw(strError);			
		}
		
		bcServReq = null;
		boServReq = null;
	}
}"
			   SEQUENCE="3"
			   UPDATED="06/29/2017 11:33:47"
			   UPDATED_BY="VF_AGUGRER"
			   CREATED="04/12/2015 23:24:33"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateProperties"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateProperties (Inputs, Outputs) {
	try {	
	
		

		var OrderBO : BusObject = TheApplication().GetBusObject(&quot;Order Entry-Maximo&quot;);
		var bcOrder : BusComp	= OrderBO.GetBusComp(&quot;Order Entry - Orders&quot;);
		var bcOrderXA : BusComp	= OrderBO.GetBusComp(&quot;VF Order Item XA&quot;);
		var bcOrderLine : BusComp	= OrderBO.GetBusComp(&quot;Order Entry - Line Items&quot;);
		var sModifOrdType= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;FS_ORDER_TYPE&quot;,&quot;Modify Product &amp; Service&quot;); 
		var sSubTypeModify = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;ORDER_SUB_TYPE&quot;,&quot;111&quot;);
		
		var strMedium = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;SR_PRIORITY&quot;,&quot;2- Medium&quot;);
		var strCorp = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;COMPANY_TYPE&quot;,&quot;Corporate&quot;);
		var strAdd = TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;New&quot;);
		var strDelete= TheApplication().InvokeMethod(&quot;LookupValue&quot;,&quot;DELTA_ACTION_CODE&quot;,&quot;Deleted&quot;);
		var sCreated = &quot;&quot;;
		var sOrderId=&quot;&quot;;
		var sJA=&quot;&quot;;
		var OrderLineItemId = Inputs.GetProperty(&quot;OrderLineItemId&quot;);
		var LoginName =	&quot;&quot;; //TheApplication().LoginName();
		var ListOfAdditional_Info = TheApplication().NewPropertySet();    
		var Additional_Info = TheApplication().NewPropertySet();   
		var Additional_Info1 = TheApplication().NewPropertySet(); 	    
		var Additional_Info2 = TheApplication().NewPropertySet(); 
		var Additional_Info3 = TheApplication().NewPropertySet();     
		var Additional_Info4 = TheApplication().NewPropertySet(); 
		var Additional_Info5 = TheApplication().NewPropertySet();
		var Additional_Info6 = TheApplication().NewPropertySet(); 
		var Additional_Info7 = TheApplication().NewPropertySet();
		var Additional_Info8 = TheApplication().NewPropertySet();
		var ListOfTriplet:PropertySet = TheApplication().NewPropertySet();
		var Triplet:PropertySet = TheApplication().NewPropertySet(); 
		var ListOfBODY = TheApplication().NewPropertySet(); 
		var BODY = TheApplication().NewPropertySet();
		var ListOfTT_Data = TheApplication().NewPropertySet(); 
		var TT_Data = TheApplication().NewPropertySet();
		var sGSM_NO =&quot;&quot;;
		var sLIC = &quot;&quot;;
		var sSubType=&quot;&quot;;
		var sType = &quot;&quot;;
		var sAttVal=&quot;&quot;;
		var sAtt=&quot;&quot;;
		var sOneNet_Att=&quot;&quot;;
		var sOneNet_Att2=&quot;&quot;;
		var sOneNet_Att3=&quot;&quot;;
		var sOneNet_Val=&quot;&quot;;	
		var search=&quot;&quot;;
		var sTaxNum=&quot;&quot;;	
		var searchAtt=&quot;&quot;;
		var sAttribute=&quot;&quot;;
		var sActCode=&quot;&quot;;
		var searchReason=&quot;&quot;;
		var sOldVPN=&quot;&quot;;
		var sCreateMaximo=&quot;Y&quot;;
		var sAction=&quot;&quot;;
		var sPartNum=&quot;&quot;;

	
			with (bcOrderLine)
			{
			SetViewMode(AllView);
			ActivateField(&quot;Order Header Id&quot;);
			ActivateField(&quot;Created&quot;);
			ActivateField(&quot;Joined Account&quot;);
			ActivateField(&quot;VF Root MSISDN&quot;);
			ActivateField(&quot;Order Type&quot;);
			//ActivateField(&quot;Order Sub Type Calc&quot;);
			ActivateField(&quot;TELCO Root Item Action Type LIC&quot;); //VFTRCBU-16883 - EBU Conversion - RPIRES
			ActivateField(&quot;Action Code&quot;);	
			//ActivateField(&quot;VF Order Header Reason LIC&quot;);
			ActivateField(&quot;TELCO Root Item Action Reason LIC&quot;); //VFTRCBU-16883 - EBU Conversion - RPIRES
			ActivateField(&quot;Part Number&quot;); //VFTRCBU-21476 - DEF-8832
			ClearToQuery();	
			search= &quot;[Id] = &apos;&quot;+OrderLineItemId+&quot;&apos;&quot;;
			SetSearchExpr(search);
			bcOrderLine.ExecuteQuery(ForwardOnly);
			var NextRec=bcOrderLine.FirstRecord();
				if (NextRec)
				{
			
					
						sOrderId = GetFieldValue(&quot;Order Header Id&quot;);
						sCreated = GetFieldValue(&quot;Created&quot;);
						sAction = GetFieldValue(&quot;Action Code&quot;); 
						sJA = GetFieldValue(&quot;Joined Account&quot;);
						sGSM_NO = GetFieldValue(&quot;VF Root MSISDN&quot;);
						sType = GetFieldValue(&quot;Order Type&quot;);
						sPartNum = GetFieldValue(&quot;Part Number&quot;); //VFTRCBU-21476 - DEF-8832
						if(sType == sModifOrdType)
						{
							var split1 = sType.split(&quot; &quot;);
							sType = split1[0];
						}
						//sSubType = GetFieldValue(&quot;Order Sub Type Calc&quot;);
						sSubType = GetFieldValue(&quot;TELCO Root Item Action Type LIC&quot;); //VFTRCBU-16883 - EBU Conversion - RPIRES
					//	sLIC = GetFieldValue(&quot;VF Order Header Reason LIC&quot;);	
						sLIC=GetFieldValue(&quot;TELCO Root Item Action Reason LIC&quot;); //VFTRCBU-16883 - EBU Conversion - RPIRES
						sTaxNum = GetFieldValue(&quot;VF Tax Id&quot;);
						sActCode = GetFieldValue (&quot;Action Code&quot;);
				/*		bcOrderXA.ActivateField(&quot;Attr Name&quot;);
						bcOrderXA.ActivateField(&quot;Value&quot;);
						sOneNet_Att= bcOrderXA.GetFieldValue(&quot;Attr Name&quot;);
						
					
						if (sOneNet_Att == &quot;Is Fixed&quot;)
									sOneNet_Val =bcOrderXA.GetFieldValue(&quot;Value&quot;);				
						else if (sOneNet_Att == &quot;Main Number&quot;)
									sOneNet_Val2 =bcOrderXA.GetFieldValue(&quot;Value&quot;);								
						else if (sOneNet_Att == &quot;Note&quot;)
									sOneNet_Val =bcOrderXA.GetFieldValue(&quot;Value&quot;);	*/										
													
				}
			}
			
			with (bcOrder)
				{
					SetViewMode(AllView);
					ActivateField(&quot;Order Reason&quot;);
					ActivateField(&quot;Created By Name&quot;);
					ClearToQuery();
					searchReason= &quot;[Id] = &apos;&quot;+sOrderId+&quot;&apos;&quot;;
					SetSearchExpr(searchReason);
					ExecuteQuery(ForwardOnly);
						if(FirstRecord())
							//sLIC=GetFieldValue(&quot;Order Reason&quot;); //VFTRCBU-16883 - EBU Conversion - RPIRES
							LoginName = GetFieldValue(&quot;Created By Name&quot;);
					
							}
					
					
			
			
			with (bcOrderXA)
			{
					SetViewMode(AllView);
					ActivateField(&quot;Attr Name&quot;);
					ActivateField(&quot;Value&quot;);
					ClearToQuery();	
					searchAtt= &quot;[Object Id] = &apos;&quot;+OrderLineItemId+&quot;&apos;&quot;;
					SetSearchExpr(searchAtt);
					bcOrderXA.ExecuteQuery(ForwardOnly);
					var NextRecAtt = bcOrderXA.FirstRecord();
					{
					
							if(NextRecAtt){
									while(NextRecAtt)	
											{
											sAttribute = bcOrderXA.GetFieldValue(&quot;Attr Name&quot;);
										
											if(sAttribute == &quot;Have Fixed&quot;)
												{
													sOneNet_Att = bcOrderXA.GetFieldValue(&quot;Value&quot;);	
													
												}
											if(sAttribute == &quot;SR Id&quot;)
												{
													sOneNet_Att2 = bcOrderXA.GetFieldValue(&quot;Value&quot;);	
													
												}
										/*	if(sAttribute == &quot;Note&quot;)
												{
													sOneNet_Att3 = bcOrderXA.GetFieldValue(&quot;Value&quot;);	
													
												}*/
												
											NextRecAtt=bcOrderXA.NextRecord();
					
											}
										}
					}
			
			}
			
			bcOrderLine.SetViewMode(AllView);
			bcOrderLine.ClearToQuery();
			bcOrderLine.ActivateField(&quot;Part Number&quot;);	
			bcOrderLine.SetSearchExpr(&quot;[Part Number] = &apos;3001&apos; AND [Order Id] = &apos;&quot;+sOrderId+&quot;&apos;&quot;);
			bcOrderLine.ExecuteQuery(ForwardOnly);	
			var iNextAttr = bcOrderLine.FirstRecord();
			
			
						if(iNextAttr){
								var VPNLineItemId = bcOrderLine.GetFieldValue(&quot;Id&quot;);
								bcOrderXA.SetViewMode(AllView);
								bcOrderXA.ClearToQuery();
								bcOrderXA.ActivateField(&quot;Attr Name&quot;);
								bcOrderXA.ActivateField(&quot;Value&quot;);
								bcOrderXA.ActivateField(&quot;Calculated Prev Value&quot;);		
								var searchAtt2= &quot;[Object Id] = &apos;&quot;+VPNLineItemId+&quot;&apos;&quot;;
								bcOrderXA.SetSearchExpr(searchAtt2);
								bcOrderXA.ExecuteQuery(ForwardOnly);
								var iNextAttrXA = bcOrderXA.FirstRecord();
								
							if(iNextAttrXA) {
								while(iNextAttrXA)	

									{
										sAtt = bcOrderXA.GetFieldValue(&quot;Attr Name&quot;);
								
										if(sAtt == &quot;Short Number&quot;)
											{
											sAttVal = bcOrderXA.GetFieldValue(&quot;Value&quot;);	
											sOldVPN = bcOrderXA.GetFieldValue(&quot;Calculated Prev Value&quot;);
											
											}		
									iNextAttrXA = bcOrderXA.NextRecord();
									}	

											}
							else{
							if(sLIC == sSubTypeModify &amp;&amp; sAction!= strDelete &amp;&amp; sAction!= strAdd)
							sCreateMaximo = &quot;N&quot;;						
							}
																	
				}	
		
		
		if(sLIC == sSubTypeModify &amp;&amp; sOldVPN == sAttVal &amp;&amp; sAction!= strDelete &amp;&amp; sAction!= strAdd )
		{
			sCreateMaximo = &quot;N&quot;;
		}
		
		//VFTRCBU-21476 - DEF-8832
		if(sAction!= strDelete &amp;&amp; sAction!= strAdd &amp;&amp; sPartNum == &quot;25134&quot; )
		{
			sCreateMaximo = &quot;N&quot;;
		}
			
		ListOfAdditional_Info.SetType(&quot;ListOfADDITIONAL_INFO&quot;);
		Additional_Info.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info1.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info2.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info3.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info4.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info5.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info6.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info7.SetType(&quot;ADDITIONAL_INFO&quot;);
		Additional_Info8.SetType(&quot;ADDITIONAL_INFO&quot;);
		ListOfBODY.SetType(&quot;ListOfBODY_3&quot;);
		BODY.SetType(&quot;BODY&quot;);	
		ListOfTriplet.SetType(&quot;ListOfTRIPLET&quot;);
		Triplet.SetType(&quot;TRIPLET&quot;);
		ListOfTT_Data.SetType(&quot;ListOfTT_DATA&quot;);
		TT_Data.SetType(&quot;TT_DATA&quot;);
				
		ListOfTriplet.AddChild(Triplet);
		ListOfAdditional_Info.AddChild(Additional_Info);
		ListOfAdditional_Info.AddChild(Additional_Info1);
		ListOfAdditional_Info.AddChild(Additional_Info2);
		ListOfAdditional_Info.AddChild(Additional_Info3);
		ListOfAdditional_Info.AddChild(Additional_Info4);
		ListOfAdditional_Info.AddChild(Additional_Info5);
		ListOfAdditional_Info.AddChild(Additional_Info6);
		ListOfAdditional_Info.AddChild(Additional_Info7);
		ListOfAdditional_Info.AddChild(Additional_Info8);
		
		ListOfTT_Data.AddChild(TT_Data);
		ListOfBODY.AddChild(BODY);
		BODY.AddChild(ListOfTriplet);
		BODY.AddChild(ListOfTT_Data);
		TT_Data.AddChild(ListOfAdditional_Info);
		
		BODY.SetProperty(&quot;USER_ID&quot;, LoginName);
		Triplet.SetProperty(&quot;TYPE&quot;,&quot;&quot;);
		Triplet.SetProperty(&quot;AREA&quot;,&quot;&quot;);
		Triplet.SetProperty(&quot;TRIPLET_ID&quot;,&quot;40000&quot;);
		TT_Data.SetProperty(&quot;SR_ID&quot;, sOrderId);
		TT_Data.SetProperty(&quot;START_DATE&quot;, sCreated);
		TT_Data.SetProperty(&quot;SR_DESCRIPTION&quot;, sOneNet_Att2);
		TT_Data.SetProperty(&quot;CORPORATE_FLAG&quot;,strCorp);
		TT_Data.SetProperty(&quot;CORP_CUST_NAME&quot;,sJA);
		TT_Data.SetProperty(&quot;VIP&quot;,&quot;N&quot;);
		TT_Data.SetProperty(&quot;PRIORITY&quot;,strMedium);
		TT_Data.SetProperty(&quot;GSM_NO&quot;,sGSM_NO);
		TT_Data.SetProperty(&quot;TICKET_DATE&quot;, sCreated);
		TT_Data.SetProperty(&quot;SEGMENT&quot;,&quot;&quot;);
		Additional_Info.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50000&quot;);
		Additional_Info1.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50001&quot;);
		Additional_Info2.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50002&quot;);
		Additional_Info3.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50003&quot;);
		Additional_Info4.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50004&quot;);
		Additional_Info5.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50005&quot;);
		Additional_Info6.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50006&quot;);
		//adding_action_code
		Additional_Info7.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50007&quot;);
		Additional_Info8.SetProperty(&quot;PARAMETER_ID&quot;,&quot;50008&quot;);
		
		
		Additional_Info.SetProperty(&quot;VALUE&quot;,sType);
		Additional_Info1.SetProperty(&quot;VALUE&quot;,sSubType);
		Additional_Info2.SetProperty(&quot;VALUE&quot;, sLIC);
		Additional_Info3.SetProperty(&quot;VALUE&quot;, sOneNet_Att2);
		Additional_Info4.SetProperty(&quot;VALUE&quot;, sAttVal);
		Additional_Info5.SetProperty(&quot;VALUE&quot;, sTaxNum);	
		Additional_Info6.SetProperty(&quot;VALUE&quot;, sOneNet_Att);
		Additional_Info7.SetProperty(&quot;VALUE&quot;, sActCode);
		Additional_Info8.SetProperty(&quot;VALUE&quot;, &quot;Mobile&quot;);
		var WFInput = TheApplication().NewPropertySet(); 
	  	WFInput.SetType(&quot;SiebelMessage&quot;); 
		WFInput.AddChild(ListOfBODY);
		WFInput.SetProperty(&quot;IntObjectName&quot;,&quot;BODY_3&quot;); 
		WFInput.SetProperty(&quot;IntObjectFormat&quot;,&quot;Siebel Hierarchical&quot;); 
		WFInput.SetProperty(&quot;MessageType&quot;,&quot;Integration Object&quot;); 
		
		Outputs.AddChild(WFInput);	
		Outputs.SetProperty(&quot;CreateMaximo&quot;,sCreateMaximo);
      		
	}
	
/*	catch (e)
	{
		Outputs.SetProperty (&quot;StatusCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorCode&quot;, &quot;1&quot;);
		Outputs.SetProperty (&quot;ErrorMessage&quot;, e.toString ());
	}*/	
	finally
	{
	
		ListOfAdditional_Info = null;  
		Additional_Info =null;   
		Additional_Info1 = null;	    
		Additional_Info2 = null; 
		Additional_Info3 = null;   
		Additional_Info4 = null;
		ListOfTriplet= null;
		Triplet = null; 
		ListOfBODY = null; 
		BODY = null;
		ListOfTT_Data = null; 
		TT_Data = null;
	}
	
	
}"
			   SEQUENCE="4"
			   UPDATED="06/29/2017 11:33:47"
			   UPDATED_BY="VF_AGUGRER"
			   CREATED="05/06/2015 09:42:49"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
			<BUSINESS_SERVICE_SERVER_SCRIPT
			   INACTIVE="N"
			   NAME="UpdateTT"
			   PROGRAM_LANGUAGE="JS"
			   SCRIPT="function UpdateTT (Inputs, Outputs) //OpenTicketRetrievalOperation
{
 	try
	{
		/******************************************************************************
		* Author : Valeria Carretto                                                       *
		* Date   : 24/02/2011                                                    *
		* Description : This script is used to update an existing ticket.                            *
		******************************************************************************/
			
		var strUserId          = TheApplication().LoginId();
		var strUserName		= TheApplication().LoginName();
		var strGSM            = Inputs.GetProperty (&quot;GSM&quot;);
		var strSRID       = Inputs.GetProperty (&quot;SR ID&quot;);
		var strTTStatus        = Inputs.GetProperty (&quot;TT Status&quot;);  
		var strErrorNoChild	   = &quot;Error! No Output&quot;;
		var OLDStatus = Inputs.GetProperty (&quot;OLDStatus&quot;);
		var strMaximoID	       = Inputs.GetProperty (&quot;Maximo ID&quot;);
		var Description = Inputs.GetProperty (&quot;Description&quot;);
		var HistBO : BusObject = TheApplication().GetBusObject(&quot;VF Maximo History BO&quot;);
		var HistBC : BusComp = HistBO.GetBusComp(&quot;VF Maximo History BC&quot;);
		
		var svcsetHeader : Service = TheApplication().GetService (&quot;VF Maximo Set Header IO BS&quot;);
		var svcWebService : Service;
		var psInputs  : PropertySet = TheApplication().NewPropertySet();
		var psOutputs : PropertySet = TheApplication().NewPropertySet();
		var psInputIO_BODY : PropertySet = TheApplication().NewPropertySet();
		var psInputIO_HEADER : PropertySet = TheApplication().NewPropertySet();
		var psInputIO_Open : PropertySet = TheApplication().NewPropertySet();
		var psInputHeader : PropertySet = TheApplication().NewPropertySet();
		var psOutputHeader : PropertySet = TheApplication().NewPropertySet();
		
		var psChild1  : PropertySet = TheApplication().NewPropertySet();
		var psChild2  : PropertySet = TheApplication().NewPropertySet();
		var psChild3  : PropertySet = TheApplication().NewPropertySet();
		var psChild4  : PropertySet = TheApplication().NewPropertySet();
		var row       : PropertySet = TheApplication ().NewPropertySet ();
		
		var psTempChild1  : PropertySet = TheApplication().NewPropertySet();
		var psTempChild2  : PropertySet = TheApplication().NewPropertySet();
		var psTempChild3  : PropertySet = TheApplication().NewPropertySet();
		var psTempChild4  : PropertySet = TheApplication().NewPropertySet();
		
		var headerType = &quot;&quot;;
		
		var strStatusCode = &quot;&quot;;
		var strErrorCode = &quot;&quot;;
		var strErrorDesc = &quot;&quot;;
		var strTTDescr = &quot;&quot;;
		var found = &quot;&quot;;
		
		var intChildCount1 = 0;
		var intChildCount2 = 0;
		var intloopCount2  = 0;
		
	
			if ((strGSM != &quot;&quot;) &amp;&amp; (strSRID != &quot;&quot;) &amp;&amp; (strMaximoID != &quot;&quot;) &amp;&amp; (strTTStatus != &quot;&quot;))
		{
			psInputHeader.SetProperty(&quot;Type&quot;,&quot;MaximoUpdateTTInputMessage:HEADER&quot;);
			svcsetHeader.InvokeMethod(&quot;SetHeaderIO&quot;,psInputHeader, psOutputHeader);
			psInputIO_HEADER = psOutputHeader.GetChild(0);
			var strTransNum = psOutputHeader.GetProperty(&quot;TRANS_ID&quot;);
			
			
			psInputIO_BODY.SetType (&quot;MaximoUpdateTTInputMessage:BODY&quot;);
			psTempChild1.SetType(&quot;ListOfBODY_4&quot;);
			psChild1.SetType (&quot;BODY&quot;);
			psChild1.SetProperty (&quot;USER_ID&quot;, strUserId);
			
			psTempChild3.SetType(&quot;ListOfTT_DATA&quot;);
			psChild3.SetType (&quot;TT_DATA&quot;);
			psChild3.SetProperty (&quot;GSM_NO&quot;, strGSM);
			psChild3.SetProperty (&quot;MAXIMO_ID&quot;, strMaximoID);
			psChild3.SetProperty (&quot;SR_ID&quot;, strSRID);
			if(strTTStatus != &quot;DESC&quot;)
			{
				psChild3.SetProperty (&quot;TT_STATUS&quot;, strTTStatus);
				strTTStatus=OLDStatus;
			}
			else
			{
				strTTStatus = &quot;&quot;;
				OLDStatus = &quot;&quot;;
			}
			psChild3.SetProperty (&quot;SR_DESCRIPTION&quot;, Description);
			
			psTempChild1.AddChild (psChild1);
			psTempChild3.AddChild (psChild3);
			
			psChild1.AddChild (psTempChild3);
			
			
			psInputIO_BODY.AddChild (psTempChild1);

			psInputIO_HEADER.SetType (&quot;MaximoUpdateTTInputMessage:HEADER&quot;);
			psInputs.AddChild (psInputIO_HEADER);
			psInputs.AddChild (psInputIO_BODY);
			
			svcWebService = TheApplication().GetService (&quot;MaximoPortType&quot;);
			svcWebService.InvokeMethod(&quot;MaximoUpdateTTOperation&quot;, psInputs, psOutputs);
			for (var i = 1;i &lt; 2; i++)
			{
				intChildCount1 = psOutputs.GetChildCount();	
				if (intChildCount1 &gt; 0)
					psOutputs = psOutputs.GetChild(0);
				else
					TheApplication().RaiseErrorText (strErrorNoChild);
			}
			intChildCount1 = psOutputs.GetChildCount();	
			if (intChildCount1 &gt; 0)
			{
				for (i = 0;i &lt; psOutputs.GetChildCount(); i++)
				{
					headerType = psOutputs.GetChild(i).GetType();
					if(headerType == &quot;ListOfHEADER_1&quot;)
					{
						psChild1 = psOutputs.GetChild(i);
						found = true;
					}
				}
				if(found)
				{
					strStatusCode = psChild1.GetChild(0).GetProperty(&quot;STATUS_CODE&quot;);
				
					Outputs.SetProperty(&quot;Status Code&quot;, strStatusCode);
					
					HistBC.NewRecord(NewBefore)
					HistBC.SetFieldValue(&quot;SR Id&quot;, strSRID);
					HistBC.SetFieldValue(&quot;Maximo Id&quot;, strMaximoID);
					HistBC.SetFieldValue(&quot;Operation&quot;, &quot;Update&quot;);
					HistBC.SetFieldValue(&quot;Status Before&quot;, OLDStatus);
					HistBC.SetFieldValue(&quot;Status After&quot;, strTTStatus);
					HistBC.SetFieldValue(&quot;User&quot;, strUserName);				
					HistBC.SetFieldValue(&quot;Originating Application&quot;, &quot;Siebel&quot;);	
					HistBC.SetFieldValue(&quot;Transaction Num&quot;, strTransNum);
					
					if(strStatusCode == &quot;1&quot;)
					{
						HistBC.SetFieldValue(&quot;Transaction Status&quot;, &quot;Error&quot;);
						strErrorCode = psChild1.GetChild(0).GetProperty(&quot;ERROR_CODE&quot;);
						strErrorDesc = psChild1.GetChild(0).GetProperty(&quot;ERROR_DESCRIPTION&quot;);
						HistBC.SetFieldValue(&quot;Error Description&quot;, strErrorDesc);
						TheApplication().RaiseErrorText (&quot;Error Code: &quot;+strErrorCode+&quot; - &quot;+strErrorDesc);
					}
					else
					{
							HistBC.SetFieldValue(&quot;Transaction Status&quot;, &quot;Pending&quot;);									
					}
					HistBC.WriteRecord();
				}
				else
					TheApplication().RaiseErrorText (strErrorNoChild);
			}
		}
	}
	finally
	{
		HistBC			 = null;
		HistBO			 = null;
		row				 = null;
		psInputs  		 = null;
		psOutputs 		 = null;
		psInputIO_BODY 	 = null;
		psInputIO_HEADER = null;
		psInputIO_Open 	 = null;
		psInputHeader 	 = null;
		psOutputHeader 	 = null;
		psChild1  		 = null;
		psChild2  		 = null;
		psChild3  		 = null;
		psChild4  		 = null;
		psTempChild1  	 = null;
		psTempChild2  	 = null;
		psTempChild3  	 = null;
		psTempChild4  	 = null;
		svcsetHeader 	 = null;
		svcWebService 	 = null;
	}
	
	return (CancelOperation);
}"
			   SEQUENCE="5"
			   UPDATED="05/06/2015 09:42:49"
			   UPDATED_BY="SADMIN"
			   CREATED="03/17/2011 12:35:05"
			   CREATED_BY="SADMIN">
			</BUSINESS_SERVICE_SERVER_SCRIPT>
		</BUSINESS_SERVICE>
	</PROJECT>
</REPOSITORY>



